/* tslint:disable */
/* eslint-disable */
/**
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 * CryptoCompare is the world\'s leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: data@cryptocompare.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GENERICRESPONSE,
} from '../models';
import {
    GENERICRESPONSEFromJSON,
    GENERICRESPONSEToJSON,
} from '../models';

export interface NewsV1ArticleListRequest {
    sourceIds?: Array<string>;
    lang?: NewsV1ArticleListLangEnum;
    categories?: Array<NewsV1ArticleListCategoriesEnum>;
    excludeCategories?: Array<NewsV1ArticleListExcludeCategoriesEnum>;
    toTs?: number;
}

export interface NewsV1SourceListRequest {
    lang?: NewsV1SourceListLangEnum;
    type?: NewsV1SourceListTypeEnum;
    status?: NewsV1SourceListStatusEnum;
}

/**
 * 
 */
export class NewsApi extends runtime.BaseAPI {

    /**
     */
    async newsV1ArticleListRaw(requestParameters: NewsV1ArticleListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GENERICRESPONSE>> {
        const queryParameters: any = {};

        if (requestParameters.sourceIds) {
            queryParameters['source_ids'] = requestParameters.sourceIds.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.lang !== undefined) {
            queryParameters['lang'] = requestParameters.lang;
        }

        if (requestParameters.categories) {
            queryParameters['categories'] = requestParameters.categories.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.excludeCategories) {
            queryParameters['exclude_categories'] = requestParameters.excludeCategories.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.toTs !== undefined) {
            queryParameters['to_ts'] = requestParameters.toTs;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/news/v1/article/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GENERICRESPONSEFromJSON(jsonValue));
    }

    /**
     */
    async newsV1ArticleList(requestParameters: NewsV1ArticleListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GENERICRESPONSE> {
        const response = await this.newsV1ArticleListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async newsV1CategoryListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GENERICRESPONSE>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/news/v1/category/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GENERICRESPONSEFromJSON(jsonValue));
    }

    /**
     */
    async newsV1CategoryList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GENERICRESPONSE> {
        const response = await this.newsV1CategoryListRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async newsV1SourceListRaw(requestParameters: NewsV1SourceListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GENERICRESPONSE>> {
        const queryParameters: any = {};

        if (requestParameters.lang !== undefined) {
            queryParameters['lang'] = requestParameters.lang;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/news/v1/source/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GENERICRESPONSEFromJSON(jsonValue));
    }

    /**
     */
    async newsV1SourceList(requestParameters: NewsV1SourceListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GENERICRESPONSE> {
        const response = await this.newsV1SourceListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const NewsV1ArticleListLangEnum = {
    En: 'EN',
    Es: 'ES',
    Pt: 'PT',
    Empty: ''
} as const;
export type NewsV1ArticleListLangEnum = typeof NewsV1ArticleListLangEnum[keyof typeof NewsV1ArticleListLangEnum];
/**
 * @export
 */
export const NewsV1ArticleListCategoriesEnum = {
    _1Inch: '1INCH',
    Aave: 'AAVE',
    Ada: 'ADA',
    Algo: 'ALGO',
    Altcoin: 'ALTCOIN',
    Asia: 'ASIA',
    Atom: 'ATOM',
    Avax: 'AVAX',
    Axs: 'AXS',
    Bal: 'BAL',
    Bat: 'BAT',
    Bch: 'BCH',
    Blockchain: 'BLOCKCHAIN',
    Btc: 'BTC',
    Business: 'BUSINESS',
    Commodity: 'COMMODITY',
    Comp: 'COMP',
    Crv: 'CRV',
    Dash: 'DASH',
    Doge: 'DOGE',
    Dot: 'DOT',
    Enj: 'ENJ',
    Etc: 'ETC',
    Eth: 'ETH',
    Exchange: 'EXCHANGE',
    Fiat: 'FIAT',
    Fil: 'FIL',
    Ftm: 'FTM',
    Ico: 'ICO',
    Knc: 'KNC',
    Link: 'LINK',
    Lrc: 'LRC',
    Ltc: 'LTC',
    Luna: 'LUNA',
    Lunc: 'LUNC',
    Mana: 'MANA',
    Market: 'MARKET',
    Matic: 'MATIC',
    Mining: 'MINING',
    Mkr: 'MKR',
    Regulation: 'REGULATION',
    Ren: 'REN',
    Sand: 'SAND',
    Shib: 'SHIB',
    Snx: 'SNX',
    Sol: 'SOL',
    Sponsored: 'SPONSORED',
    Sushi: 'SUSHI',
    Technology: 'TECHNOLOGY',
    Trading: 'TRADING',
    Trx: 'TRX',
    Uma: 'UMA',
    Uni: 'UNI',
    Usdt: 'USDT',
    Wallet: 'WALLET',
    Xlm: 'XLM',
    Xmr: 'XMR',
    Xrp: 'XRP',
    Xtz: 'XTZ',
    Yfi: 'YFI',
    Zec: 'ZEC',
    Zrx: 'ZRX',
    Empty: ''
} as const;
export type NewsV1ArticleListCategoriesEnum = typeof NewsV1ArticleListCategoriesEnum[keyof typeof NewsV1ArticleListCategoriesEnum];
/**
 * @export
 */
export const NewsV1ArticleListExcludeCategoriesEnum = {
    _1Inch: '1INCH',
    Aave: 'AAVE',
    Ada: 'ADA',
    Algo: 'ALGO',
    Altcoin: 'ALTCOIN',
    Asia: 'ASIA',
    Atom: 'ATOM',
    Avax: 'AVAX',
    Axs: 'AXS',
    Bal: 'BAL',
    Bat: 'BAT',
    Bch: 'BCH',
    Blockchain: 'BLOCKCHAIN',
    Btc: 'BTC',
    Business: 'BUSINESS',
    Commodity: 'COMMODITY',
    Comp: 'COMP',
    Crv: 'CRV',
    Dash: 'DASH',
    Doge: 'DOGE',
    Dot: 'DOT',
    Enj: 'ENJ',
    Etc: 'ETC',
    Eth: 'ETH',
    Exchange: 'EXCHANGE',
    Fiat: 'FIAT',
    Fil: 'FIL',
    Ftm: 'FTM',
    Ico: 'ICO',
    Knc: 'KNC',
    Link: 'LINK',
    Lrc: 'LRC',
    Ltc: 'LTC',
    Luna: 'LUNA',
    Lunc: 'LUNC',
    Mana: 'MANA',
    Market: 'MARKET',
    Matic: 'MATIC',
    Mining: 'MINING',
    Mkr: 'MKR',
    Regulation: 'REGULATION',
    Ren: 'REN',
    Sand: 'SAND',
    Shib: 'SHIB',
    Snx: 'SNX',
    Sol: 'SOL',
    Sponsored: 'SPONSORED',
    Sushi: 'SUSHI',
    Technology: 'TECHNOLOGY',
    Trading: 'TRADING',
    Trx: 'TRX',
    Uma: 'UMA',
    Uni: 'UNI',
    Usdt: 'USDT',
    Wallet: 'WALLET',
    Xlm: 'XLM',
    Xmr: 'XMR',
    Xrp: 'XRP',
    Xtz: 'XTZ',
    Yfi: 'YFI',
    Zec: 'ZEC',
    Zrx: 'ZRX',
    Empty: ''
} as const;
export type NewsV1ArticleListExcludeCategoriesEnum = typeof NewsV1ArticleListExcludeCategoriesEnum[keyof typeof NewsV1ArticleListExcludeCategoriesEnum];
/**
 * @export
 */
export const NewsV1SourceListLangEnum = {
    En: 'EN',
    Es: 'ES',
    Pt: 'PT',
    Empty: ''
} as const;
export type NewsV1SourceListLangEnum = typeof NewsV1SourceListLangEnum[keyof typeof NewsV1SourceListLangEnum];
/**
 * @export
 */
export const NewsV1SourceListTypeEnum = {
    Rss: 'RSS',
    Api: 'API',
    Twitter: 'TWITTER',
    Empty: ''
} as const;
export type NewsV1SourceListTypeEnum = typeof NewsV1SourceListTypeEnum[keyof typeof NewsV1SourceListTypeEnum];
/**
 * @export
 */
export const NewsV1SourceListStatusEnum = {
    Active: 'ACTIVE',
    Inactive: 'INACTIVE',
    Empty: ''
} as const;
export type NewsV1SourceListStatusEnum = typeof NewsV1SourceListStatusEnum[keyof typeof NewsV1SourceListStatusEnum];
