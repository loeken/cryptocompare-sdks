/* tslint:disable */
/* eslint-disable */
/**
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 * CryptoCompare is the world\'s leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: data@cryptocompare.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GENERICRESPONSE,
} from '../models';
import {
    GENERICRESPONSEFromJSON,
    GENERICRESPONSEToJSON,
} from '../models';

export interface AssetV1DataByAddressRequest {
    address: string;
    chainSymbol: string;
    groups?: string;
}

export interface AssetV1DataByIdRequest {
    assetId: number;
    groups?: string;
}

export interface AssetV1DataBySymbolRequest {
    assetSymbol: string;
    groups?: string;
}

export interface AssetV1TopListRequest {
    page?: number;
    pageSize?: number;
    assetType?: string;
    sortBy?: AssetV1TopListSortByEnum;
    sortDirection?: AssetV1TopListSortDirectionEnum;
    groups?: string;
}

/**
 * 
 */
export class AssetApi extends runtime.BaseAPI {

    /**
     */
    async assetV1DataByAddressRaw(requestParameters: AssetV1DataByAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GENERICRESPONSE>> {
        if (requestParameters.address === null || requestParameters.address === undefined) {
            throw new runtime.RequiredError('address','Required parameter requestParameters.address was null or undefined when calling assetV1DataByAddress.');
        }

        if (requestParameters.chainSymbol === null || requestParameters.chainSymbol === undefined) {
            throw new runtime.RequiredError('chainSymbol','Required parameter requestParameters.chainSymbol was null or undefined when calling assetV1DataByAddress.');
        }

        const queryParameters: any = {};

        if (requestParameters.address !== undefined) {
            queryParameters['address'] = requestParameters.address;
        }

        if (requestParameters.chainSymbol !== undefined) {
            queryParameters['chain_symbol'] = requestParameters.chainSymbol;
        }

        if (requestParameters.groups !== undefined) {
            queryParameters['groups'] = requestParameters.groups;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/asset/v1/data/by/address`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GENERICRESPONSEFromJSON(jsonValue));
    }

    /**
     */
    async assetV1DataByAddress(requestParameters: AssetV1DataByAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GENERICRESPONSE> {
        const response = await this.assetV1DataByAddressRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async assetV1DataByIdRaw(requestParameters: AssetV1DataByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GENERICRESPONSE>> {
        if (requestParameters.assetId === null || requestParameters.assetId === undefined) {
            throw new runtime.RequiredError('assetId','Required parameter requestParameters.assetId was null or undefined when calling assetV1DataById.');
        }

        const queryParameters: any = {};

        if (requestParameters.assetId !== undefined) {
            queryParameters['asset_id'] = requestParameters.assetId;
        }

        if (requestParameters.groups !== undefined) {
            queryParameters['groups'] = requestParameters.groups;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/asset/v1/data/by/id`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GENERICRESPONSEFromJSON(jsonValue));
    }

    /**
     */
    async assetV1DataById(requestParameters: AssetV1DataByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GENERICRESPONSE> {
        const response = await this.assetV1DataByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async assetV1DataBySymbolRaw(requestParameters: AssetV1DataBySymbolRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GENERICRESPONSE>> {
        if (requestParameters.assetSymbol === null || requestParameters.assetSymbol === undefined) {
            throw new runtime.RequiredError('assetSymbol','Required parameter requestParameters.assetSymbol was null or undefined when calling assetV1DataBySymbol.');
        }

        const queryParameters: any = {};

        if (requestParameters.assetSymbol !== undefined) {
            queryParameters['asset_symbol'] = requestParameters.assetSymbol;
        }

        if (requestParameters.groups !== undefined) {
            queryParameters['groups'] = requestParameters.groups;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/asset/v1/data/by/symbol`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GENERICRESPONSEFromJSON(jsonValue));
    }

    /**
     */
    async assetV1DataBySymbol(requestParameters: AssetV1DataBySymbolRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GENERICRESPONSE> {
        const response = await this.assetV1DataBySymbolRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async assetV1TopListRaw(requestParameters: AssetV1TopListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GENERICRESPONSE>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.assetType !== undefined) {
            queryParameters['asset_type'] = requestParameters.assetType;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sort_by'] = requestParameters.sortBy;
        }

        if (requestParameters.sortDirection !== undefined) {
            queryParameters['sort_direction'] = requestParameters.sortDirection;
        }

        if (requestParameters.groups !== undefined) {
            queryParameters['groups'] = requestParameters.groups;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/asset/v1/top/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GENERICRESPONSEFromJSON(jsonValue));
    }

    /**
     */
    async assetV1TopList(requestParameters: AssetV1TopListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GENERICRESPONSE> {
        const response = await this.assetV1TopListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const AssetV1TopListSortByEnum = {
    CreatedOn: 'CREATED_ON',
    UpdatedOn: 'UPDATED_ON',
    Symbol: 'SYMBOL'
} as const;
export type AssetV1TopListSortByEnum = typeof AssetV1TopListSortByEnum[keyof typeof AssetV1TopListSortByEnum];
/**
 * @export
 */
export const AssetV1TopListSortDirectionEnum = {
    Desc: 'DESC',
    Asc: 'ASC'
} as const;
export type AssetV1TopListSortDirectionEnum = typeof AssetV1TopListSortDirectionEnum[keyof typeof AssetV1TopListSortDirectionEnum];
