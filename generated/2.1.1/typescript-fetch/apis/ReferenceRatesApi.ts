/* tslint:disable */
/* eslint-disable */
/**
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 * CryptoCompare is the world\'s leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: data@cryptocompare.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GENERICRESPONSE,
} from '../models';
import {
    GENERICRESPONSEFromJSON,
    GENERICRESPONSEToJSON,
} from '../models';

export interface IndexCcV1HistoricalDaysRequest {
    market: string;
    instrument: string;
    groups?: Array<string>;
    limit?: number;
    toTs?: number;
    aggregate?: number;
    fill?: boolean;
    mappingPriority?: IndexCcV1HistoricalDaysMappingPriorityEnum;
    responseFormat?: IndexCcV1HistoricalDaysResponseFormatEnum;
}

export interface IndexCcV1HistoricalHoursRequest {
    market: string;
    instrument: string;
    groups?: Array<string>;
    limit?: number;
    toTs?: number;
    aggregate?: number;
    fill?: boolean;
    mappingPriority?: IndexCcV1HistoricalHoursMappingPriorityEnum;
    responseFormat?: IndexCcV1HistoricalHoursResponseFormatEnum;
}

export interface IndexCcV1HistoricalMessagesRequest {
    market: string;
    instrument: string;
    afterTs?: number;
    lastCcseq?: number;
    mappingPriority?: IndexCcV1HistoricalMessagesMappingPriorityEnum;
    limit?: number;
    responseFormat?: IndexCcV1HistoricalMessagesResponseFormatEnum;
    return404OnEmptyResponse?: boolean;
}

export interface IndexCcV1HistoricalMessagesHourRequest {
    market: string;
    instrument: string;
    hourTs?: number;
    mappingPriority?: IndexCcV1HistoricalMessagesHourMappingPriorityEnum;
    responseFormat?: IndexCcV1HistoricalMessagesHourResponseFormatEnum;
    return404OnEmptyResponse?: boolean;
}

export interface IndexCcV1HistoricalMinutesRequest {
    market: string;
    instrument: string;
    groups?: Array<string>;
    limit?: number;
    toTs?: number;
    aggregate?: number;
    fill?: boolean;
    mappingPriority?: IndexCcV1HistoricalMinutesMappingPriorityEnum;
    responseFormat?: IndexCcV1HistoricalMinutesResponseFormatEnum;
}

export interface IndexCcV1LatestInstrumentMetadataRequest {
    market: string;
    instruments: Array<string>;
    groups?: Array<string>;
    mappingPriority?: IndexCcV1LatestInstrumentMetadataMappingPriorityEnum;
}

export interface IndexCcV1LatestTickRequest {
    market: string;
    instruments: Array<string>;
    groups?: Array<string>;
    mappingPriority?: IndexCcV1LatestTickMappingPriorityEnum;
}

export interface IndexCcV1MarketsRequest {
    market?: string;
}

export interface IndexCcV1MarketsInstrumentsRequest {
    market?: string;
    instrument?: string;
    instrumentStatus?: Array<IndexCcV1MarketsInstrumentsInstrumentStatusEnum>;
}

export interface IndexCcV1MarketsInstrumentsUnmappedRequest {
    market?: string;
    instrument?: string;
    instrumentStatus?: Array<IndexCcV1MarketsInstrumentsUnmappedInstrumentStatusEnum>;
}

/**
 * 
 */
export class ReferenceRatesApi extends runtime.BaseAPI {

    /**
     */
    async indexCcV1HistoricalDaysRaw(requestParameters: IndexCcV1HistoricalDaysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GENERICRESPONSE>> {
        if (requestParameters.market === null || requestParameters.market === undefined) {
            throw new runtime.RequiredError('market','Required parameter requestParameters.market was null or undefined when calling indexCcV1HistoricalDays.');
        }

        if (requestParameters.instrument === null || requestParameters.instrument === undefined) {
            throw new runtime.RequiredError('instrument','Required parameter requestParameters.instrument was null or undefined when calling indexCcV1HistoricalDays.');
        }

        const queryParameters: any = {};

        if (requestParameters.market !== undefined) {
            queryParameters['market'] = requestParameters.market;
        }

        if (requestParameters.instrument !== undefined) {
            queryParameters['instrument'] = requestParameters.instrument;
        }

        if (requestParameters.groups) {
            queryParameters['groups'] = requestParameters.groups.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.toTs !== undefined) {
            queryParameters['to_ts'] = requestParameters.toTs;
        }

        if (requestParameters.aggregate !== undefined) {
            queryParameters['aggregate'] = requestParameters.aggregate;
        }

        if (requestParameters.fill !== undefined) {
            queryParameters['fill'] = requestParameters.fill;
        }

        if (requestParameters.mappingPriority !== undefined) {
            queryParameters['mapping_priority'] = requestParameters.mappingPriority;
        }

        if (requestParameters.responseFormat !== undefined) {
            queryParameters['response_format'] = requestParameters.responseFormat;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/index/cc/v1/historical/days`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GENERICRESPONSEFromJSON(jsonValue));
    }

    /**
     */
    async indexCcV1HistoricalDays(requestParameters: IndexCcV1HistoricalDaysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GENERICRESPONSE> {
        const response = await this.indexCcV1HistoricalDaysRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async indexCcV1HistoricalHoursRaw(requestParameters: IndexCcV1HistoricalHoursRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GENERICRESPONSE>> {
        if (requestParameters.market === null || requestParameters.market === undefined) {
            throw new runtime.RequiredError('market','Required parameter requestParameters.market was null or undefined when calling indexCcV1HistoricalHours.');
        }

        if (requestParameters.instrument === null || requestParameters.instrument === undefined) {
            throw new runtime.RequiredError('instrument','Required parameter requestParameters.instrument was null or undefined when calling indexCcV1HistoricalHours.');
        }

        const queryParameters: any = {};

        if (requestParameters.market !== undefined) {
            queryParameters['market'] = requestParameters.market;
        }

        if (requestParameters.instrument !== undefined) {
            queryParameters['instrument'] = requestParameters.instrument;
        }

        if (requestParameters.groups) {
            queryParameters['groups'] = requestParameters.groups.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.toTs !== undefined) {
            queryParameters['to_ts'] = requestParameters.toTs;
        }

        if (requestParameters.aggregate !== undefined) {
            queryParameters['aggregate'] = requestParameters.aggregate;
        }

        if (requestParameters.fill !== undefined) {
            queryParameters['fill'] = requestParameters.fill;
        }

        if (requestParameters.mappingPriority !== undefined) {
            queryParameters['mapping_priority'] = requestParameters.mappingPriority;
        }

        if (requestParameters.responseFormat !== undefined) {
            queryParameters['response_format'] = requestParameters.responseFormat;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/index/cc/v1/historical/hours`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GENERICRESPONSEFromJSON(jsonValue));
    }

    /**
     */
    async indexCcV1HistoricalHours(requestParameters: IndexCcV1HistoricalHoursRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GENERICRESPONSE> {
        const response = await this.indexCcV1HistoricalHoursRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async indexCcV1HistoricalMessagesRaw(requestParameters: IndexCcV1HistoricalMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GENERICRESPONSE>> {
        if (requestParameters.market === null || requestParameters.market === undefined) {
            throw new runtime.RequiredError('market','Required parameter requestParameters.market was null or undefined when calling indexCcV1HistoricalMessages.');
        }

        if (requestParameters.instrument === null || requestParameters.instrument === undefined) {
            throw new runtime.RequiredError('instrument','Required parameter requestParameters.instrument was null or undefined when calling indexCcV1HistoricalMessages.');
        }

        const queryParameters: any = {};

        if (requestParameters.market !== undefined) {
            queryParameters['market'] = requestParameters.market;
        }

        if (requestParameters.instrument !== undefined) {
            queryParameters['instrument'] = requestParameters.instrument;
        }

        if (requestParameters.afterTs !== undefined) {
            queryParameters['after_ts'] = requestParameters.afterTs;
        }

        if (requestParameters.lastCcseq !== undefined) {
            queryParameters['last_ccseq'] = requestParameters.lastCcseq;
        }

        if (requestParameters.mappingPriority !== undefined) {
            queryParameters['mapping_priority'] = requestParameters.mappingPriority;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.responseFormat !== undefined) {
            queryParameters['response_format'] = requestParameters.responseFormat;
        }

        if (requestParameters.return404OnEmptyResponse !== undefined) {
            queryParameters['return_404_on_empty_response'] = requestParameters.return404OnEmptyResponse;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // api_key_header authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_key"] = this.configuration.apiKey("api_key"); // api_key_query authentication
        }

        const response = await this.request({
            path: `/index/cc/v1/historical/messages`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GENERICRESPONSEFromJSON(jsonValue));
    }

    /**
     */
    async indexCcV1HistoricalMessages(requestParameters: IndexCcV1HistoricalMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GENERICRESPONSE> {
        const response = await this.indexCcV1HistoricalMessagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async indexCcV1HistoricalMessagesHourRaw(requestParameters: IndexCcV1HistoricalMessagesHourRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GENERICRESPONSE>> {
        if (requestParameters.market === null || requestParameters.market === undefined) {
            throw new runtime.RequiredError('market','Required parameter requestParameters.market was null or undefined when calling indexCcV1HistoricalMessagesHour.');
        }

        if (requestParameters.instrument === null || requestParameters.instrument === undefined) {
            throw new runtime.RequiredError('instrument','Required parameter requestParameters.instrument was null or undefined when calling indexCcV1HistoricalMessagesHour.');
        }

        const queryParameters: any = {};

        if (requestParameters.market !== undefined) {
            queryParameters['market'] = requestParameters.market;
        }

        if (requestParameters.instrument !== undefined) {
            queryParameters['instrument'] = requestParameters.instrument;
        }

        if (requestParameters.hourTs !== undefined) {
            queryParameters['hour_ts'] = requestParameters.hourTs;
        }

        if (requestParameters.mappingPriority !== undefined) {
            queryParameters['mapping_priority'] = requestParameters.mappingPriority;
        }

        if (requestParameters.responseFormat !== undefined) {
            queryParameters['response_format'] = requestParameters.responseFormat;
        }

        if (requestParameters.return404OnEmptyResponse !== undefined) {
            queryParameters['return_404_on_empty_response'] = requestParameters.return404OnEmptyResponse;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // api_key_header authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_key"] = this.configuration.apiKey("api_key"); // api_key_query authentication
        }

        const response = await this.request({
            path: `/index/cc/v1/historical/messages/hour`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GENERICRESPONSEFromJSON(jsonValue));
    }

    /**
     */
    async indexCcV1HistoricalMessagesHour(requestParameters: IndexCcV1HistoricalMessagesHourRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GENERICRESPONSE> {
        const response = await this.indexCcV1HistoricalMessagesHourRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async indexCcV1HistoricalMinutesRaw(requestParameters: IndexCcV1HistoricalMinutesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GENERICRESPONSE>> {
        if (requestParameters.market === null || requestParameters.market === undefined) {
            throw new runtime.RequiredError('market','Required parameter requestParameters.market was null or undefined when calling indexCcV1HistoricalMinutes.');
        }

        if (requestParameters.instrument === null || requestParameters.instrument === undefined) {
            throw new runtime.RequiredError('instrument','Required parameter requestParameters.instrument was null or undefined when calling indexCcV1HistoricalMinutes.');
        }

        const queryParameters: any = {};

        if (requestParameters.market !== undefined) {
            queryParameters['market'] = requestParameters.market;
        }

        if (requestParameters.instrument !== undefined) {
            queryParameters['instrument'] = requestParameters.instrument;
        }

        if (requestParameters.groups) {
            queryParameters['groups'] = requestParameters.groups.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.toTs !== undefined) {
            queryParameters['to_ts'] = requestParameters.toTs;
        }

        if (requestParameters.aggregate !== undefined) {
            queryParameters['aggregate'] = requestParameters.aggregate;
        }

        if (requestParameters.fill !== undefined) {
            queryParameters['fill'] = requestParameters.fill;
        }

        if (requestParameters.mappingPriority !== undefined) {
            queryParameters['mapping_priority'] = requestParameters.mappingPriority;
        }

        if (requestParameters.responseFormat !== undefined) {
            queryParameters['response_format'] = requestParameters.responseFormat;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/index/cc/v1/historical/minutes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GENERICRESPONSEFromJSON(jsonValue));
    }

    /**
     */
    async indexCcV1HistoricalMinutes(requestParameters: IndexCcV1HistoricalMinutesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GENERICRESPONSE> {
        const response = await this.indexCcV1HistoricalMinutesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async indexCcV1LatestInstrumentMetadataRaw(requestParameters: IndexCcV1LatestInstrumentMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GENERICRESPONSE>> {
        if (requestParameters.market === null || requestParameters.market === undefined) {
            throw new runtime.RequiredError('market','Required parameter requestParameters.market was null or undefined when calling indexCcV1LatestInstrumentMetadata.');
        }

        if (requestParameters.instruments === null || requestParameters.instruments === undefined) {
            throw new runtime.RequiredError('instruments','Required parameter requestParameters.instruments was null or undefined when calling indexCcV1LatestInstrumentMetadata.');
        }

        const queryParameters: any = {};

        if (requestParameters.market !== undefined) {
            queryParameters['market'] = requestParameters.market;
        }

        if (requestParameters.instruments) {
            queryParameters['instruments'] = requestParameters.instruments.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.groups) {
            queryParameters['groups'] = requestParameters.groups.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.mappingPriority !== undefined) {
            queryParameters['mapping_priority'] = requestParameters.mappingPriority;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/index/cc/v1/latest/instrument/metadata`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GENERICRESPONSEFromJSON(jsonValue));
    }

    /**
     */
    async indexCcV1LatestInstrumentMetadata(requestParameters: IndexCcV1LatestInstrumentMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GENERICRESPONSE> {
        const response = await this.indexCcV1LatestInstrumentMetadataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async indexCcV1LatestTickRaw(requestParameters: IndexCcV1LatestTickRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GENERICRESPONSE>> {
        if (requestParameters.market === null || requestParameters.market === undefined) {
            throw new runtime.RequiredError('market','Required parameter requestParameters.market was null or undefined when calling indexCcV1LatestTick.');
        }

        if (requestParameters.instruments === null || requestParameters.instruments === undefined) {
            throw new runtime.RequiredError('instruments','Required parameter requestParameters.instruments was null or undefined when calling indexCcV1LatestTick.');
        }

        const queryParameters: any = {};

        if (requestParameters.market !== undefined) {
            queryParameters['market'] = requestParameters.market;
        }

        if (requestParameters.instruments) {
            queryParameters['instruments'] = requestParameters.instruments.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.groups) {
            queryParameters['groups'] = requestParameters.groups.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.mappingPriority !== undefined) {
            queryParameters['mapping_priority'] = requestParameters.mappingPriority;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/index/cc/v1/latest/tick`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GENERICRESPONSEFromJSON(jsonValue));
    }

    /**
     */
    async indexCcV1LatestTick(requestParameters: IndexCcV1LatestTickRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GENERICRESPONSE> {
        const response = await this.indexCcV1LatestTickRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async indexCcV1MarketsRaw(requestParameters: IndexCcV1MarketsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GENERICRESPONSE>> {
        const queryParameters: any = {};

        if (requestParameters.market !== undefined) {
            queryParameters['market'] = requestParameters.market;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/index/cc/v1/markets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GENERICRESPONSEFromJSON(jsonValue));
    }

    /**
     */
    async indexCcV1Markets(requestParameters: IndexCcV1MarketsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GENERICRESPONSE> {
        const response = await this.indexCcV1MarketsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async indexCcV1MarketsInstrumentsRaw(requestParameters: IndexCcV1MarketsInstrumentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GENERICRESPONSE>> {
        const queryParameters: any = {};

        if (requestParameters.market !== undefined) {
            queryParameters['market'] = requestParameters.market;
        }

        if (requestParameters.instrument !== undefined) {
            queryParameters['instrument'] = requestParameters.instrument;
        }

        if (requestParameters.instrumentStatus) {
            queryParameters['instrument_status'] = requestParameters.instrumentStatus.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/index/cc/v1/markets/instruments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GENERICRESPONSEFromJSON(jsonValue));
    }

    /**
     */
    async indexCcV1MarketsInstruments(requestParameters: IndexCcV1MarketsInstrumentsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GENERICRESPONSE> {
        const response = await this.indexCcV1MarketsInstrumentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async indexCcV1MarketsInstrumentsUnmappedRaw(requestParameters: IndexCcV1MarketsInstrumentsUnmappedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GENERICRESPONSE>> {
        const queryParameters: any = {};

        if (requestParameters.market !== undefined) {
            queryParameters['market'] = requestParameters.market;
        }

        if (requestParameters.instrument !== undefined) {
            queryParameters['instrument'] = requestParameters.instrument;
        }

        if (requestParameters.instrumentStatus) {
            queryParameters['instrument_status'] = requestParameters.instrumentStatus.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/index/cc/v1/markets/instruments/unmapped`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GENERICRESPONSEFromJSON(jsonValue));
    }

    /**
     */
    async indexCcV1MarketsInstrumentsUnmapped(requestParameters: IndexCcV1MarketsInstrumentsUnmappedRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GENERICRESPONSE> {
        const response = await this.indexCcV1MarketsInstrumentsUnmappedRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const IndexCcV1HistoricalDaysMappingPriorityEnum = {
    MappedFirst: 'CHECK_MAPPED_FIRST',
    UnmappedFirst: 'CHECK_UNMAPPED_FIRST'
} as const;
export type IndexCcV1HistoricalDaysMappingPriorityEnum = typeof IndexCcV1HistoricalDaysMappingPriorityEnum[keyof typeof IndexCcV1HistoricalDaysMappingPriorityEnum];
/**
 * @export
 */
export const IndexCcV1HistoricalDaysResponseFormatEnum = {
    Json: 'JSON',
    Csv: 'CSV'
} as const;
export type IndexCcV1HistoricalDaysResponseFormatEnum = typeof IndexCcV1HistoricalDaysResponseFormatEnum[keyof typeof IndexCcV1HistoricalDaysResponseFormatEnum];
/**
 * @export
 */
export const IndexCcV1HistoricalHoursMappingPriorityEnum = {
    MappedFirst: 'CHECK_MAPPED_FIRST',
    UnmappedFirst: 'CHECK_UNMAPPED_FIRST'
} as const;
export type IndexCcV1HistoricalHoursMappingPriorityEnum = typeof IndexCcV1HistoricalHoursMappingPriorityEnum[keyof typeof IndexCcV1HistoricalHoursMappingPriorityEnum];
/**
 * @export
 */
export const IndexCcV1HistoricalHoursResponseFormatEnum = {
    Json: 'JSON',
    Csv: 'CSV'
} as const;
export type IndexCcV1HistoricalHoursResponseFormatEnum = typeof IndexCcV1HistoricalHoursResponseFormatEnum[keyof typeof IndexCcV1HistoricalHoursResponseFormatEnum];
/**
 * @export
 */
export const IndexCcV1HistoricalMessagesMappingPriorityEnum = {
    MappedFirst: 'CHECK_MAPPED_FIRST',
    UnmappedFirst: 'CHECK_UNMAPPED_FIRST'
} as const;
export type IndexCcV1HistoricalMessagesMappingPriorityEnum = typeof IndexCcV1HistoricalMessagesMappingPriorityEnum[keyof typeof IndexCcV1HistoricalMessagesMappingPriorityEnum];
/**
 * @export
 */
export const IndexCcV1HistoricalMessagesResponseFormatEnum = {
    Json: 'JSON',
    Csv: 'CSV'
} as const;
export type IndexCcV1HistoricalMessagesResponseFormatEnum = typeof IndexCcV1HistoricalMessagesResponseFormatEnum[keyof typeof IndexCcV1HistoricalMessagesResponseFormatEnum];
/**
 * @export
 */
export const IndexCcV1HistoricalMessagesHourMappingPriorityEnum = {
    MappedFirst: 'CHECK_MAPPED_FIRST',
    UnmappedFirst: 'CHECK_UNMAPPED_FIRST'
} as const;
export type IndexCcV1HistoricalMessagesHourMappingPriorityEnum = typeof IndexCcV1HistoricalMessagesHourMappingPriorityEnum[keyof typeof IndexCcV1HistoricalMessagesHourMappingPriorityEnum];
/**
 * @export
 */
export const IndexCcV1HistoricalMessagesHourResponseFormatEnum = {
    Json: 'JSON',
    Csv: 'CSV'
} as const;
export type IndexCcV1HistoricalMessagesHourResponseFormatEnum = typeof IndexCcV1HistoricalMessagesHourResponseFormatEnum[keyof typeof IndexCcV1HistoricalMessagesHourResponseFormatEnum];
/**
 * @export
 */
export const IndexCcV1HistoricalMinutesMappingPriorityEnum = {
    MappedFirst: 'CHECK_MAPPED_FIRST',
    UnmappedFirst: 'CHECK_UNMAPPED_FIRST'
} as const;
export type IndexCcV1HistoricalMinutesMappingPriorityEnum = typeof IndexCcV1HistoricalMinutesMappingPriorityEnum[keyof typeof IndexCcV1HistoricalMinutesMappingPriorityEnum];
/**
 * @export
 */
export const IndexCcV1HistoricalMinutesResponseFormatEnum = {
    Json: 'JSON',
    Csv: 'CSV'
} as const;
export type IndexCcV1HistoricalMinutesResponseFormatEnum = typeof IndexCcV1HistoricalMinutesResponseFormatEnum[keyof typeof IndexCcV1HistoricalMinutesResponseFormatEnum];
/**
 * @export
 */
export const IndexCcV1LatestInstrumentMetadataMappingPriorityEnum = {
    MappedFirst: 'CHECK_MAPPED_FIRST',
    UnmappedFirst: 'CHECK_UNMAPPED_FIRST'
} as const;
export type IndexCcV1LatestInstrumentMetadataMappingPriorityEnum = typeof IndexCcV1LatestInstrumentMetadataMappingPriorityEnum[keyof typeof IndexCcV1LatestInstrumentMetadataMappingPriorityEnum];
/**
 * @export
 */
export const IndexCcV1LatestTickMappingPriorityEnum = {
    MappedFirst: 'CHECK_MAPPED_FIRST',
    UnmappedFirst: 'CHECK_UNMAPPED_FIRST'
} as const;
export type IndexCcV1LatestTickMappingPriorityEnum = typeof IndexCcV1LatestTickMappingPriorityEnum[keyof typeof IndexCcV1LatestTickMappingPriorityEnum];
/**
 * @export
 */
export const IndexCcV1MarketsInstrumentsInstrumentStatusEnum = {
    Active: 'ACTIVE',
    Ignored: 'IGNORED',
    Retired: 'RETIRED',
    Expired: 'EXPIRED'
} as const;
export type IndexCcV1MarketsInstrumentsInstrumentStatusEnum = typeof IndexCcV1MarketsInstrumentsInstrumentStatusEnum[keyof typeof IndexCcV1MarketsInstrumentsInstrumentStatusEnum];
/**
 * @export
 */
export const IndexCcV1MarketsInstrumentsUnmappedInstrumentStatusEnum = {
    Active: 'ACTIVE',
    Ignored: 'IGNORED',
    Retired: 'RETIRED',
    Expired: 'EXPIRED'
} as const;
export type IndexCcV1MarketsInstrumentsUnmappedInstrumentStatusEnum = typeof IndexCcV1MarketsInstrumentsUnmappedInstrumentStatusEnum[keyof typeof IndexCcV1MarketsInstrumentsUnmappedInstrumentStatusEnum];
