/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models


import com.squareup.moshi.Json

/**
 * 
 *
 * @param BASE The mapped from asset (base / symbol/ coin). Only available on instruments that have been mapped (e.g. BTC).
 * @param CCSEQ Our internal sequence number for this trade, this is unique per market / exchange and trading pair. Should always be increasing by 1 for each new trade we discover, not in chronological order.
 * @param ID The trade ID as reported by the market / exchange. If the exchange does not provide a trade ID, this will be the timestamp of the trade + a number from 0 - 999. This preserves uniqueness, assuming there would never be more than 999 trades in any given second.
 * @param INSTRUMENT The unmapped instrument ID as given by the exchange (e.g. BTCUSD, BTC_USD, XBT-ZUSD, BTC-USD).
 * @param MAPPED_INSTRUMENT The mapped instrument ID, as derived from our mapping rules. This takes the form: \"BASE-QUOTE\". Only available on instruments that have been mapped (e.g. BTC-USD).
 * @param MARKET The market / exchange under consideration (e.g. Coinbase, Kraken, etc.).
 * @param PRICE The price in the to instrument (quote / counter symbol / coin) of the trade. For a BTC-USD trade, this is how much was paid for one BTC in USD. For futures, this will be the price of the contract.
 * @param QUANTITY The volume of the trade, given in the from instrument (base symbol / coin/ contract). For a spot BTC-USD trade, this is how much BTC was traded at the trade price. For a futures BTCUSDPERP, this is the BTC equivalent for the contracts traded.
 * @param QUOTE The mapped to asset (quote / counter symbol / coin). Only available on instruments that have been mapped (e.g. USD).
 * @param QUOTE_QUANTITY The volume of the trade, given in the to instrument (quote / counter symbol / coin). This is equivalent to QUANTITY * PRICE. E.g. for a BTC-USD trade, this is how much USD was paid in total for the volume of BTC traded. For futures this is the quote currency equivalent for the contracts traded.
 * @param RECEIVED_TIMESTAMP The timestamp in seconds that the trade was received. This varies from the trade taking place on the market by a few millisconds to a few seconds depending on the market / exchange API options / rate limits.
 * @param RECEIVED_TIMESTAMP_NS The nanosecond part of the received timestamp.
 * @param SIDE The side of the trade: SELL, BUY or UNKNOWN. If the exchange / api does not provide a side, \"UNKNOWN\" will be returned.
 * @param SOURCE The source of the trade update: POLLING, STREAMING, GO, BLOB etc.
 * @param TIMESTAMP The timestamp in seconds as reported by the market / exchange or the received timestamp if the market / exchange does not provide one.
 * @param TIMESTAMP_NS The nanosecond part of the reported timestamp.
 * @param TYPE The type of the message.
 */


data class SPOTINSTRUMENTTRADE (

    /* The mapped from asset (base / symbol/ coin). Only available on instruments that have been mapped (e.g. BTC). */
    @Json(name = "BASE")
    val BASE: kotlin.String? = null,

    /* Our internal sequence number for this trade, this is unique per market / exchange and trading pair. Should always be increasing by 1 for each new trade we discover, not in chronological order. */
    @Json(name = "CCSEQ")
    val CCSEQ: kotlin.Int? = null,

    /* The trade ID as reported by the market / exchange. If the exchange does not provide a trade ID, this will be the timestamp of the trade + a number from 0 - 999. This preserves uniqueness, assuming there would never be more than 999 trades in any given second. */
    @Json(name = "ID")
    val ID: kotlin.String? = null,

    /* The unmapped instrument ID as given by the exchange (e.g. BTCUSD, BTC_USD, XBT-ZUSD, BTC-USD). */
    @Json(name = "INSTRUMENT")
    val INSTRUMENT: kotlin.String? = null,

    /* The mapped instrument ID, as derived from our mapping rules. This takes the form: \"BASE-QUOTE\". Only available on instruments that have been mapped (e.g. BTC-USD). */
    @Json(name = "MAPPED_INSTRUMENT")
    val MAPPED_INSTRUMENT: kotlin.String? = null,

    /* The market / exchange under consideration (e.g. Coinbase, Kraken, etc.). */
    @Json(name = "MARKET")
    val MARKET: kotlin.String? = null,

    /* The price in the to instrument (quote / counter symbol / coin) of the trade. For a BTC-USD trade, this is how much was paid for one BTC in USD. For futures, this will be the price of the contract. */
    @Json(name = "PRICE")
    val PRICE: kotlin.Int? = null,

    /* The volume of the trade, given in the from instrument (base symbol / coin/ contract). For a spot BTC-USD trade, this is how much BTC was traded at the trade price. For a futures BTCUSDPERP, this is the BTC equivalent for the contracts traded. */
    @Json(name = "QUANTITY")
    val QUANTITY: kotlin.Int? = null,

    /* The mapped to asset (quote / counter symbol / coin). Only available on instruments that have been mapped (e.g. USD). */
    @Json(name = "QUOTE")
    val QUOTE: kotlin.String? = null,

    /* The volume of the trade, given in the to instrument (quote / counter symbol / coin). This is equivalent to QUANTITY * PRICE. E.g. for a BTC-USD trade, this is how much USD was paid in total for the volume of BTC traded. For futures this is the quote currency equivalent for the contracts traded. */
    @Json(name = "QUOTE_QUANTITY")
    val QUOTE_QUANTITY: kotlin.Int? = null,

    /* The timestamp in seconds that the trade was received. This varies from the trade taking place on the market by a few millisconds to a few seconds depending on the market / exchange API options / rate limits. */
    @Json(name = "RECEIVED_TIMESTAMP")
    val RECEIVED_TIMESTAMP: kotlin.Int? = null,

    /* The nanosecond part of the received timestamp. */
    @Json(name = "RECEIVED_TIMESTAMP_NS")
    val RECEIVED_TIMESTAMP_NS: kotlin.Int? = null,

    /* The side of the trade: SELL, BUY or UNKNOWN. If the exchange / api does not provide a side, \"UNKNOWN\" will be returned. */
    @Json(name = "SIDE")
    val SIDE: kotlin.String? = null,

    /* The source of the trade update: POLLING, STREAMING, GO, BLOB etc. */
    @Json(name = "SOURCE")
    val SOURCE: kotlin.String? = null,

    /* The timestamp in seconds as reported by the market / exchange or the received timestamp if the market / exchange does not provide one. */
    @Json(name = "TIMESTAMP")
    val TIMESTAMP: kotlin.Int? = null,

    /* The nanosecond part of the reported timestamp. */
    @Json(name = "TIMESTAMP_NS")
    val TIMESTAMP_NS: kotlin.Int? = null,

    /* The type of the message. */
    @Json(name = "TYPE")
    val TYPE: kotlin.String? = null

)

