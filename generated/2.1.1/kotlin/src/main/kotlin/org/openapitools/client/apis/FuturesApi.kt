/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import org.openapitools.client.models.Error
import org.openapitools.client.models.GENERICRESPONSE

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class FuturesApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://data-api.cryptocompare.com")
        }
    }

    /**
     * enum for parameter mappingPriority
     */
     enum class MappingPriority_futuresV1HistoricalDays(val value: kotlin.String) {
         @Json(name = "CHECK_MAPPED_FIRST") mAPPEDFIRST("CHECK_MAPPED_FIRST"),
         @Json(name = "CHECK_UNMAPPED_FIRST") uNMAPPEDFIRST("CHECK_UNMAPPED_FIRST")
     }

    /**
     * enum for parameter responseFormat
     */
     enum class ResponseFormat_futuresV1HistoricalDays(val value: kotlin.String) {
         @Json(name = "JSON") jSON("JSON"),
         @Json(name = "CSV") cSV("CSV")
     }

    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME (optional, default to arrayListOf())
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @return GENERICRESPONSE
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun futuresV1HistoricalDays(market: kotlin.String, instrument: kotlin.String, groups: kotlin.collections.List<kotlin.String>? = arrayListOf(), limit: kotlin.Int? = 30, toTs: kotlin.Int? = null, aggregate: kotlin.Int? = 1, fill: kotlin.Boolean? = true, mappingPriority: MappingPriority_futuresV1HistoricalDays? = MappingPriority_futuresV1HistoricalDays.mAPPEDFIRST, responseFormat: ResponseFormat_futuresV1HistoricalDays? = ResponseFormat_futuresV1HistoricalDays.jSON) : GENERICRESPONSE {
        val localVarResponse = futuresV1HistoricalDaysWithHttpInfo(market = market, instrument = instrument, groups = groups, limit = limit, toTs = toTs, aggregate = aggregate, fill = fill, mappingPriority = mappingPriority, responseFormat = responseFormat)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GENERICRESPONSE
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME (optional, default to arrayListOf())
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @return ApiResponse<GENERICRESPONSE?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun futuresV1HistoricalDaysWithHttpInfo(market: kotlin.String, instrument: kotlin.String, groups: kotlin.collections.List<kotlin.String>?, limit: kotlin.Int?, toTs: kotlin.Int?, aggregate: kotlin.Int?, fill: kotlin.Boolean?, mappingPriority: MappingPriority_futuresV1HistoricalDays?, responseFormat: ResponseFormat_futuresV1HistoricalDays?) : ApiResponse<GENERICRESPONSE?> {
        val localVariableConfig = futuresV1HistoricalDaysRequestConfig(market = market, instrument = instrument, groups = groups, limit = limit, toTs = toTs, aggregate = aggregate, fill = fill, mappingPriority = mappingPriority, responseFormat = responseFormat)

        return request<Unit, GENERICRESPONSE>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation futuresV1HistoricalDays
     *
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME (optional, default to arrayListOf())
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @return RequestConfig
     */
    fun futuresV1HistoricalDaysRequestConfig(market: kotlin.String, instrument: kotlin.String, groups: kotlin.collections.List<kotlin.String>?, limit: kotlin.Int?, toTs: kotlin.Int?, aggregate: kotlin.Int?, fill: kotlin.Boolean?, mappingPriority: MappingPriority_futuresV1HistoricalDays?, responseFormat: ResponseFormat_futuresV1HistoricalDays?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("market", listOf(market.toString()))
                put("instrument", listOf(instrument.toString()))
                if (groups != null) {
                    put("groups", toMultiValue(groups.toList(), "csv"))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (toTs != null) {
                    put("to_ts", listOf(toTs.toString()))
                }
                if (aggregate != null) {
                    put("aggregate", listOf(aggregate.toString()))
                }
                if (fill != null) {
                    put("fill", listOf(fill.toString()))
                }
                if (mappingPriority != null) {
                    put("mapping_priority", listOf(mappingPriority.toString()))
                }
                if (responseFormat != null) {
                    put("response_format", listOf(responseFormat.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/futures/v1/historical/days",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter mappingPriority
     */
     enum class MappingPriority_futuresV1HistoricalFundingRateDays(val value: kotlin.String) {
         @Json(name = "CHECK_MAPPED_FIRST") mAPPEDFIRST("CHECK_MAPPED_FIRST"),
         @Json(name = "CHECK_UNMAPPED_FIRST") uNMAPPEDFIRST("CHECK_UNMAPPED_FIRST")
     }

    /**
     * enum for parameter responseFormat
     */
     enum class ResponseFormat_futuresV1HistoricalFundingRateDays(val value: kotlin.String) {
         @Json(name = "JSON") jSON("JSON"),
         @Json(name = "CSV") cSV("CSV")
     }

    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,OHLC,OHLC_MESSAGE,MESSAGE (optional, default to arrayListOf())
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @return GENERICRESPONSE
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun futuresV1HistoricalFundingRateDays(market: kotlin.String, instrument: kotlin.String, groups: kotlin.collections.List<kotlin.String>? = arrayListOf(), limit: kotlin.Int? = 30, toTs: kotlin.Int? = null, aggregate: kotlin.Int? = 1, fill: kotlin.Boolean? = true, mappingPriority: MappingPriority_futuresV1HistoricalFundingRateDays? = MappingPriority_futuresV1HistoricalFundingRateDays.mAPPEDFIRST, responseFormat: ResponseFormat_futuresV1HistoricalFundingRateDays? = ResponseFormat_futuresV1HistoricalFundingRateDays.jSON) : GENERICRESPONSE {
        val localVarResponse = futuresV1HistoricalFundingRateDaysWithHttpInfo(market = market, instrument = instrument, groups = groups, limit = limit, toTs = toTs, aggregate = aggregate, fill = fill, mappingPriority = mappingPriority, responseFormat = responseFormat)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GENERICRESPONSE
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,OHLC,OHLC_MESSAGE,MESSAGE (optional, default to arrayListOf())
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @return ApiResponse<GENERICRESPONSE?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun futuresV1HistoricalFundingRateDaysWithHttpInfo(market: kotlin.String, instrument: kotlin.String, groups: kotlin.collections.List<kotlin.String>?, limit: kotlin.Int?, toTs: kotlin.Int?, aggregate: kotlin.Int?, fill: kotlin.Boolean?, mappingPriority: MappingPriority_futuresV1HistoricalFundingRateDays?, responseFormat: ResponseFormat_futuresV1HistoricalFundingRateDays?) : ApiResponse<GENERICRESPONSE?> {
        val localVariableConfig = futuresV1HistoricalFundingRateDaysRequestConfig(market = market, instrument = instrument, groups = groups, limit = limit, toTs = toTs, aggregate = aggregate, fill = fill, mappingPriority = mappingPriority, responseFormat = responseFormat)

        return request<Unit, GENERICRESPONSE>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation futuresV1HistoricalFundingRateDays
     *
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,OHLC,OHLC_MESSAGE,MESSAGE (optional, default to arrayListOf())
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @return RequestConfig
     */
    fun futuresV1HistoricalFundingRateDaysRequestConfig(market: kotlin.String, instrument: kotlin.String, groups: kotlin.collections.List<kotlin.String>?, limit: kotlin.Int?, toTs: kotlin.Int?, aggregate: kotlin.Int?, fill: kotlin.Boolean?, mappingPriority: MappingPriority_futuresV1HistoricalFundingRateDays?, responseFormat: ResponseFormat_futuresV1HistoricalFundingRateDays?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("market", listOf(market.toString()))
                put("instrument", listOf(instrument.toString()))
                if (groups != null) {
                    put("groups", toMultiValue(groups.toList(), "csv"))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (toTs != null) {
                    put("to_ts", listOf(toTs.toString()))
                }
                if (aggregate != null) {
                    put("aggregate", listOf(aggregate.toString()))
                }
                if (fill != null) {
                    put("fill", listOf(fill.toString()))
                }
                if (mappingPriority != null) {
                    put("mapping_priority", listOf(mappingPriority.toString()))
                }
                if (responseFormat != null) {
                    put("response_format", listOf(responseFormat.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/futures/v1/historical/funding-rate/days",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter mappingPriority
     */
     enum class MappingPriority_futuresV1HistoricalFundingRateHours(val value: kotlin.String) {
         @Json(name = "CHECK_MAPPED_FIRST") mAPPEDFIRST("CHECK_MAPPED_FIRST"),
         @Json(name = "CHECK_UNMAPPED_FIRST") uNMAPPEDFIRST("CHECK_UNMAPPED_FIRST")
     }

    /**
     * enum for parameter responseFormat
     */
     enum class ResponseFormat_futuresV1HistoricalFundingRateHours(val value: kotlin.String) {
         @Json(name = "JSON") jSON("JSON"),
         @Json(name = "CSV") cSV("CSV")
     }

    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,OHLC,OHLC_MESSAGE,MESSAGE (optional, default to arrayListOf())
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @return GENERICRESPONSE
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun futuresV1HistoricalFundingRateHours(market: kotlin.String, instrument: kotlin.String, groups: kotlin.collections.List<kotlin.String>? = arrayListOf(), limit: kotlin.Int? = 30, toTs: kotlin.Int? = null, aggregate: kotlin.Int? = 1, fill: kotlin.Boolean? = true, mappingPriority: MappingPriority_futuresV1HistoricalFundingRateHours? = MappingPriority_futuresV1HistoricalFundingRateHours.mAPPEDFIRST, responseFormat: ResponseFormat_futuresV1HistoricalFundingRateHours? = ResponseFormat_futuresV1HistoricalFundingRateHours.jSON) : GENERICRESPONSE {
        val localVarResponse = futuresV1HistoricalFundingRateHoursWithHttpInfo(market = market, instrument = instrument, groups = groups, limit = limit, toTs = toTs, aggregate = aggregate, fill = fill, mappingPriority = mappingPriority, responseFormat = responseFormat)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GENERICRESPONSE
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,OHLC,OHLC_MESSAGE,MESSAGE (optional, default to arrayListOf())
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @return ApiResponse<GENERICRESPONSE?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun futuresV1HistoricalFundingRateHoursWithHttpInfo(market: kotlin.String, instrument: kotlin.String, groups: kotlin.collections.List<kotlin.String>?, limit: kotlin.Int?, toTs: kotlin.Int?, aggregate: kotlin.Int?, fill: kotlin.Boolean?, mappingPriority: MappingPriority_futuresV1HistoricalFundingRateHours?, responseFormat: ResponseFormat_futuresV1HistoricalFundingRateHours?) : ApiResponse<GENERICRESPONSE?> {
        val localVariableConfig = futuresV1HistoricalFundingRateHoursRequestConfig(market = market, instrument = instrument, groups = groups, limit = limit, toTs = toTs, aggregate = aggregate, fill = fill, mappingPriority = mappingPriority, responseFormat = responseFormat)

        return request<Unit, GENERICRESPONSE>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation futuresV1HistoricalFundingRateHours
     *
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,OHLC,OHLC_MESSAGE,MESSAGE (optional, default to arrayListOf())
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @return RequestConfig
     */
    fun futuresV1HistoricalFundingRateHoursRequestConfig(market: kotlin.String, instrument: kotlin.String, groups: kotlin.collections.List<kotlin.String>?, limit: kotlin.Int?, toTs: kotlin.Int?, aggregate: kotlin.Int?, fill: kotlin.Boolean?, mappingPriority: MappingPriority_futuresV1HistoricalFundingRateHours?, responseFormat: ResponseFormat_futuresV1HistoricalFundingRateHours?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("market", listOf(market.toString()))
                put("instrument", listOf(instrument.toString()))
                if (groups != null) {
                    put("groups", toMultiValue(groups.toList(), "csv"))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (toTs != null) {
                    put("to_ts", listOf(toTs.toString()))
                }
                if (aggregate != null) {
                    put("aggregate", listOf(aggregate.toString()))
                }
                if (fill != null) {
                    put("fill", listOf(fill.toString()))
                }
                if (mappingPriority != null) {
                    put("mapping_priority", listOf(mappingPriority.toString()))
                }
                if (responseFormat != null) {
                    put("response_format", listOf(responseFormat.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/futures/v1/historical/funding-rate/hours",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter mappingPriority
     */
     enum class MappingPriority_futuresV1HistoricalFundingRateMessages(val value: kotlin.String) {
         @Json(name = "CHECK_MAPPED_FIRST") mAPPEDFIRST("CHECK_MAPPED_FIRST"),
         @Json(name = "CHECK_UNMAPPED_FIRST") uNMAPPEDFIRST("CHECK_UNMAPPED_FIRST")
     }

    /**
     * enum for parameter responseFormat
     */
     enum class ResponseFormat_futuresV1HistoricalFundingRateMessages(val value: kotlin.String) {
         @Json(name = "JSON") jSON("JSON"),
         @Json(name = "CSV") cSV("CSV")
     }

    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param afterTs Unix timestamp in seconds of the earliest funding rate message in the response (optional)
     * @param lastCcseq The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request. (optional, default to 0)
     * @param limit The maximum number of funding rate messages to return (optional, default to 100)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @param return404OnEmptyResponse If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)
     * @return GENERICRESPONSE
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun futuresV1HistoricalFundingRateMessages(market: kotlin.String, instrument: kotlin.String, afterTs: kotlin.Int? = null, lastCcseq: kotlin.Int? = 0, limit: kotlin.Int? = 100, mappingPriority: MappingPriority_futuresV1HistoricalFundingRateMessages? = MappingPriority_futuresV1HistoricalFundingRateMessages.mAPPEDFIRST, responseFormat: ResponseFormat_futuresV1HistoricalFundingRateMessages? = ResponseFormat_futuresV1HistoricalFundingRateMessages.jSON, return404OnEmptyResponse: kotlin.Boolean? = false) : GENERICRESPONSE {
        val localVarResponse = futuresV1HistoricalFundingRateMessagesWithHttpInfo(market = market, instrument = instrument, afterTs = afterTs, lastCcseq = lastCcseq, limit = limit, mappingPriority = mappingPriority, responseFormat = responseFormat, return404OnEmptyResponse = return404OnEmptyResponse)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GENERICRESPONSE
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param afterTs Unix timestamp in seconds of the earliest funding rate message in the response (optional)
     * @param lastCcseq The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request. (optional, default to 0)
     * @param limit The maximum number of funding rate messages to return (optional, default to 100)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @param return404OnEmptyResponse If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)
     * @return ApiResponse<GENERICRESPONSE?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun futuresV1HistoricalFundingRateMessagesWithHttpInfo(market: kotlin.String, instrument: kotlin.String, afterTs: kotlin.Int?, lastCcseq: kotlin.Int?, limit: kotlin.Int?, mappingPriority: MappingPriority_futuresV1HistoricalFundingRateMessages?, responseFormat: ResponseFormat_futuresV1HistoricalFundingRateMessages?, return404OnEmptyResponse: kotlin.Boolean?) : ApiResponse<GENERICRESPONSE?> {
        val localVariableConfig = futuresV1HistoricalFundingRateMessagesRequestConfig(market = market, instrument = instrument, afterTs = afterTs, lastCcseq = lastCcseq, limit = limit, mappingPriority = mappingPriority, responseFormat = responseFormat, return404OnEmptyResponse = return404OnEmptyResponse)

        return request<Unit, GENERICRESPONSE>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation futuresV1HistoricalFundingRateMessages
     *
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param afterTs Unix timestamp in seconds of the earliest funding rate message in the response (optional)
     * @param lastCcseq The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request. (optional, default to 0)
     * @param limit The maximum number of funding rate messages to return (optional, default to 100)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @param return404OnEmptyResponse If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)
     * @return RequestConfig
     */
    fun futuresV1HistoricalFundingRateMessagesRequestConfig(market: kotlin.String, instrument: kotlin.String, afterTs: kotlin.Int?, lastCcseq: kotlin.Int?, limit: kotlin.Int?, mappingPriority: MappingPriority_futuresV1HistoricalFundingRateMessages?, responseFormat: ResponseFormat_futuresV1HistoricalFundingRateMessages?, return404OnEmptyResponse: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("market", listOf(market.toString()))
                put("instrument", listOf(instrument.toString()))
                if (afterTs != null) {
                    put("after_ts", listOf(afterTs.toString()))
                }
                if (lastCcseq != null) {
                    put("last_ccseq", listOf(lastCcseq.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (mappingPriority != null) {
                    put("mapping_priority", listOf(mappingPriority.toString()))
                }
                if (responseFormat != null) {
                    put("response_format", listOf(responseFormat.toString()))
                }
                if (return404OnEmptyResponse != null) {
                    put("return_404_on_empty_response", listOf(return404OnEmptyResponse.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/futures/v1/historical/funding-rate-messages",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter mappingPriority
     */
     enum class MappingPriority_futuresV1HistoricalFundingRateMessagesHour(val value: kotlin.String) {
         @Json(name = "CHECK_MAPPED_FIRST") mAPPEDFIRST("CHECK_MAPPED_FIRST"),
         @Json(name = "CHECK_UNMAPPED_FIRST") uNMAPPEDFIRST("CHECK_UNMAPPED_FIRST")
     }

    /**
     * enum for parameter responseFormat
     */
     enum class ResponseFormat_futuresV1HistoricalFundingRateMessagesHour(val value: kotlin.String) {
         @Json(name = "JSON") jSON("JSON"),
         @Json(name = "CSV") cSV("CSV")
     }

    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param hourTs Unix timestamp in seconds for the hour containing the funding rate updates you are interested in. You can pass any timestamp in the hour but we will round it down the the full hour timestmap and return all funding rate updates in that hour. (optional)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @param return404OnEmptyResponse If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)
     * @return GENERICRESPONSE
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun futuresV1HistoricalFundingRateMessagesHour(market: kotlin.String, instrument: kotlin.String, hourTs: kotlin.Int? = null, mappingPriority: MappingPriority_futuresV1HistoricalFundingRateMessagesHour? = MappingPriority_futuresV1HistoricalFundingRateMessagesHour.mAPPEDFIRST, responseFormat: ResponseFormat_futuresV1HistoricalFundingRateMessagesHour? = ResponseFormat_futuresV1HistoricalFundingRateMessagesHour.jSON, return404OnEmptyResponse: kotlin.Boolean? = false) : GENERICRESPONSE {
        val localVarResponse = futuresV1HistoricalFundingRateMessagesHourWithHttpInfo(market = market, instrument = instrument, hourTs = hourTs, mappingPriority = mappingPriority, responseFormat = responseFormat, return404OnEmptyResponse = return404OnEmptyResponse)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GENERICRESPONSE
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param hourTs Unix timestamp in seconds for the hour containing the funding rate updates you are interested in. You can pass any timestamp in the hour but we will round it down the the full hour timestmap and return all funding rate updates in that hour. (optional)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @param return404OnEmptyResponse If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)
     * @return ApiResponse<GENERICRESPONSE?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun futuresV1HistoricalFundingRateMessagesHourWithHttpInfo(market: kotlin.String, instrument: kotlin.String, hourTs: kotlin.Int?, mappingPriority: MappingPriority_futuresV1HistoricalFundingRateMessagesHour?, responseFormat: ResponseFormat_futuresV1HistoricalFundingRateMessagesHour?, return404OnEmptyResponse: kotlin.Boolean?) : ApiResponse<GENERICRESPONSE?> {
        val localVariableConfig = futuresV1HistoricalFundingRateMessagesHourRequestConfig(market = market, instrument = instrument, hourTs = hourTs, mappingPriority = mappingPriority, responseFormat = responseFormat, return404OnEmptyResponse = return404OnEmptyResponse)

        return request<Unit, GENERICRESPONSE>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation futuresV1HistoricalFundingRateMessagesHour
     *
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param hourTs Unix timestamp in seconds for the hour containing the funding rate updates you are interested in. You can pass any timestamp in the hour but we will round it down the the full hour timestmap and return all funding rate updates in that hour. (optional)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @param return404OnEmptyResponse If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)
     * @return RequestConfig
     */
    fun futuresV1HistoricalFundingRateMessagesHourRequestConfig(market: kotlin.String, instrument: kotlin.String, hourTs: kotlin.Int?, mappingPriority: MappingPriority_futuresV1HistoricalFundingRateMessagesHour?, responseFormat: ResponseFormat_futuresV1HistoricalFundingRateMessagesHour?, return404OnEmptyResponse: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("market", listOf(market.toString()))
                put("instrument", listOf(instrument.toString()))
                if (hourTs != null) {
                    put("hour_ts", listOf(hourTs.toString()))
                }
                if (mappingPriority != null) {
                    put("mapping_priority", listOf(mappingPriority.toString()))
                }
                if (responseFormat != null) {
                    put("response_format", listOf(responseFormat.toString()))
                }
                if (return404OnEmptyResponse != null) {
                    put("return_404_on_empty_response", listOf(return404OnEmptyResponse.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/futures/v1/historical/funding-rate-messages/hour",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter mappingPriority
     */
     enum class MappingPriority_futuresV1HistoricalFundingRateMinutes(val value: kotlin.String) {
         @Json(name = "CHECK_MAPPED_FIRST") mAPPEDFIRST("CHECK_MAPPED_FIRST"),
         @Json(name = "CHECK_UNMAPPED_FIRST") uNMAPPEDFIRST("CHECK_UNMAPPED_FIRST")
     }

    /**
     * enum for parameter responseFormat
     */
     enum class ResponseFormat_futuresV1HistoricalFundingRateMinutes(val value: kotlin.String) {
         @Json(name = "JSON") jSON("JSON"),
         @Json(name = "CSV") cSV("CSV")
     }

    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,OHLC,OHLC_MESSAGE,MESSAGE (optional, default to arrayListOf())
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @return GENERICRESPONSE
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun futuresV1HistoricalFundingRateMinutes(market: kotlin.String, instrument: kotlin.String, groups: kotlin.collections.List<kotlin.String>? = arrayListOf(), limit: kotlin.Int? = 30, toTs: kotlin.Int? = null, aggregate: kotlin.Int? = 1, fill: kotlin.Boolean? = true, mappingPriority: MappingPriority_futuresV1HistoricalFundingRateMinutes? = MappingPriority_futuresV1HistoricalFundingRateMinutes.mAPPEDFIRST, responseFormat: ResponseFormat_futuresV1HistoricalFundingRateMinutes? = ResponseFormat_futuresV1HistoricalFundingRateMinutes.jSON) : GENERICRESPONSE {
        val localVarResponse = futuresV1HistoricalFundingRateMinutesWithHttpInfo(market = market, instrument = instrument, groups = groups, limit = limit, toTs = toTs, aggregate = aggregate, fill = fill, mappingPriority = mappingPriority, responseFormat = responseFormat)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GENERICRESPONSE
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,OHLC,OHLC_MESSAGE,MESSAGE (optional, default to arrayListOf())
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @return ApiResponse<GENERICRESPONSE?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun futuresV1HistoricalFundingRateMinutesWithHttpInfo(market: kotlin.String, instrument: kotlin.String, groups: kotlin.collections.List<kotlin.String>?, limit: kotlin.Int?, toTs: kotlin.Int?, aggregate: kotlin.Int?, fill: kotlin.Boolean?, mappingPriority: MappingPriority_futuresV1HistoricalFundingRateMinutes?, responseFormat: ResponseFormat_futuresV1HistoricalFundingRateMinutes?) : ApiResponse<GENERICRESPONSE?> {
        val localVariableConfig = futuresV1HistoricalFundingRateMinutesRequestConfig(market = market, instrument = instrument, groups = groups, limit = limit, toTs = toTs, aggregate = aggregate, fill = fill, mappingPriority = mappingPriority, responseFormat = responseFormat)

        return request<Unit, GENERICRESPONSE>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation futuresV1HistoricalFundingRateMinutes
     *
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,OHLC,OHLC_MESSAGE,MESSAGE (optional, default to arrayListOf())
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @return RequestConfig
     */
    fun futuresV1HistoricalFundingRateMinutesRequestConfig(market: kotlin.String, instrument: kotlin.String, groups: kotlin.collections.List<kotlin.String>?, limit: kotlin.Int?, toTs: kotlin.Int?, aggregate: kotlin.Int?, fill: kotlin.Boolean?, mappingPriority: MappingPriority_futuresV1HistoricalFundingRateMinutes?, responseFormat: ResponseFormat_futuresV1HistoricalFundingRateMinutes?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("market", listOf(market.toString()))
                put("instrument", listOf(instrument.toString()))
                if (groups != null) {
                    put("groups", toMultiValue(groups.toList(), "csv"))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (toTs != null) {
                    put("to_ts", listOf(toTs.toString()))
                }
                if (aggregate != null) {
                    put("aggregate", listOf(aggregate.toString()))
                }
                if (fill != null) {
                    put("fill", listOf(fill.toString()))
                }
                if (mappingPriority != null) {
                    put("mapping_priority", listOf(mappingPriority.toString()))
                }
                if (responseFormat != null) {
                    put("response_format", listOf(responseFormat.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/futures/v1/historical/funding-rate/minutes",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter mappingPriority
     */
     enum class MappingPriority_futuresV1HistoricalHours(val value: kotlin.String) {
         @Json(name = "CHECK_MAPPED_FIRST") mAPPEDFIRST("CHECK_MAPPED_FIRST"),
         @Json(name = "CHECK_UNMAPPED_FIRST") uNMAPPEDFIRST("CHECK_UNMAPPED_FIRST")
     }

    /**
     * enum for parameter responseFormat
     */
     enum class ResponseFormat_futuresV1HistoricalHours(val value: kotlin.String) {
         @Json(name = "JSON") jSON("JSON"),
         @Json(name = "CSV") cSV("CSV")
     }

    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME (optional, default to arrayListOf())
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @return GENERICRESPONSE
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun futuresV1HistoricalHours(market: kotlin.String, instrument: kotlin.String, groups: kotlin.collections.List<kotlin.String>? = arrayListOf(), limit: kotlin.Int? = 30, toTs: kotlin.Int? = null, aggregate: kotlin.Int? = 1, fill: kotlin.Boolean? = true, mappingPriority: MappingPriority_futuresV1HistoricalHours? = MappingPriority_futuresV1HistoricalHours.mAPPEDFIRST, responseFormat: ResponseFormat_futuresV1HistoricalHours? = ResponseFormat_futuresV1HistoricalHours.jSON) : GENERICRESPONSE {
        val localVarResponse = futuresV1HistoricalHoursWithHttpInfo(market = market, instrument = instrument, groups = groups, limit = limit, toTs = toTs, aggregate = aggregate, fill = fill, mappingPriority = mappingPriority, responseFormat = responseFormat)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GENERICRESPONSE
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME (optional, default to arrayListOf())
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @return ApiResponse<GENERICRESPONSE?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun futuresV1HistoricalHoursWithHttpInfo(market: kotlin.String, instrument: kotlin.String, groups: kotlin.collections.List<kotlin.String>?, limit: kotlin.Int?, toTs: kotlin.Int?, aggregate: kotlin.Int?, fill: kotlin.Boolean?, mappingPriority: MappingPriority_futuresV1HistoricalHours?, responseFormat: ResponseFormat_futuresV1HistoricalHours?) : ApiResponse<GENERICRESPONSE?> {
        val localVariableConfig = futuresV1HistoricalHoursRequestConfig(market = market, instrument = instrument, groups = groups, limit = limit, toTs = toTs, aggregate = aggregate, fill = fill, mappingPriority = mappingPriority, responseFormat = responseFormat)

        return request<Unit, GENERICRESPONSE>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation futuresV1HistoricalHours
     *
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME (optional, default to arrayListOf())
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @return RequestConfig
     */
    fun futuresV1HistoricalHoursRequestConfig(market: kotlin.String, instrument: kotlin.String, groups: kotlin.collections.List<kotlin.String>?, limit: kotlin.Int?, toTs: kotlin.Int?, aggregate: kotlin.Int?, fill: kotlin.Boolean?, mappingPriority: MappingPriority_futuresV1HistoricalHours?, responseFormat: ResponseFormat_futuresV1HistoricalHours?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("market", listOf(market.toString()))
                put("instrument", listOf(instrument.toString()))
                if (groups != null) {
                    put("groups", toMultiValue(groups.toList(), "csv"))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (toTs != null) {
                    put("to_ts", listOf(toTs.toString()))
                }
                if (aggregate != null) {
                    put("aggregate", listOf(aggregate.toString()))
                }
                if (fill != null) {
                    put("fill", listOf(fill.toString()))
                }
                if (mappingPriority != null) {
                    put("mapping_priority", listOf(mappingPriority.toString()))
                }
                if (responseFormat != null) {
                    put("response_format", listOf(responseFormat.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/futures/v1/historical/hours",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter mappingPriority
     */
     enum class MappingPriority_futuresV1HistoricalMinutes(val value: kotlin.String) {
         @Json(name = "CHECK_MAPPED_FIRST") mAPPEDFIRST("CHECK_MAPPED_FIRST"),
         @Json(name = "CHECK_UNMAPPED_FIRST") uNMAPPEDFIRST("CHECK_UNMAPPED_FIRST")
     }

    /**
     * enum for parameter responseFormat
     */
     enum class ResponseFormat_futuresV1HistoricalMinutes(val value: kotlin.String) {
         @Json(name = "JSON") jSON("JSON"),
         @Json(name = "CSV") cSV("CSV")
     }

    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME (optional, default to arrayListOf())
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @return GENERICRESPONSE
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun futuresV1HistoricalMinutes(market: kotlin.String, instrument: kotlin.String, groups: kotlin.collections.List<kotlin.String>? = arrayListOf(), limit: kotlin.Int? = 30, toTs: kotlin.Int? = null, aggregate: kotlin.Int? = 1, fill: kotlin.Boolean? = true, mappingPriority: MappingPriority_futuresV1HistoricalMinutes? = MappingPriority_futuresV1HistoricalMinutes.mAPPEDFIRST, responseFormat: ResponseFormat_futuresV1HistoricalMinutes? = ResponseFormat_futuresV1HistoricalMinutes.jSON) : GENERICRESPONSE {
        val localVarResponse = futuresV1HistoricalMinutesWithHttpInfo(market = market, instrument = instrument, groups = groups, limit = limit, toTs = toTs, aggregate = aggregate, fill = fill, mappingPriority = mappingPriority, responseFormat = responseFormat)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GENERICRESPONSE
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME (optional, default to arrayListOf())
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @return ApiResponse<GENERICRESPONSE?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun futuresV1HistoricalMinutesWithHttpInfo(market: kotlin.String, instrument: kotlin.String, groups: kotlin.collections.List<kotlin.String>?, limit: kotlin.Int?, toTs: kotlin.Int?, aggregate: kotlin.Int?, fill: kotlin.Boolean?, mappingPriority: MappingPriority_futuresV1HistoricalMinutes?, responseFormat: ResponseFormat_futuresV1HistoricalMinutes?) : ApiResponse<GENERICRESPONSE?> {
        val localVariableConfig = futuresV1HistoricalMinutesRequestConfig(market = market, instrument = instrument, groups = groups, limit = limit, toTs = toTs, aggregate = aggregate, fill = fill, mappingPriority = mappingPriority, responseFormat = responseFormat)

        return request<Unit, GENERICRESPONSE>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation futuresV1HistoricalMinutes
     *
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME (optional, default to arrayListOf())
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @return RequestConfig
     */
    fun futuresV1HistoricalMinutesRequestConfig(market: kotlin.String, instrument: kotlin.String, groups: kotlin.collections.List<kotlin.String>?, limit: kotlin.Int?, toTs: kotlin.Int?, aggregate: kotlin.Int?, fill: kotlin.Boolean?, mappingPriority: MappingPriority_futuresV1HistoricalMinutes?, responseFormat: ResponseFormat_futuresV1HistoricalMinutes?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("market", listOf(market.toString()))
                put("instrument", listOf(instrument.toString()))
                if (groups != null) {
                    put("groups", toMultiValue(groups.toList(), "csv"))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (toTs != null) {
                    put("to_ts", listOf(toTs.toString()))
                }
                if (aggregate != null) {
                    put("aggregate", listOf(aggregate.toString()))
                }
                if (fill != null) {
                    put("fill", listOf(fill.toString()))
                }
                if (mappingPriority != null) {
                    put("mapping_priority", listOf(mappingPriority.toString()))
                }
                if (responseFormat != null) {
                    put("response_format", listOf(responseFormat.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/futures/v1/historical/minutes",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter mappingPriority
     */
     enum class MappingPriority_futuresV1HistoricalOpenInterestDays(val value: kotlin.String) {
         @Json(name = "CHECK_MAPPED_FIRST") mAPPEDFIRST("CHECK_MAPPED_FIRST"),
         @Json(name = "CHECK_UNMAPPED_FIRST") uNMAPPEDFIRST("CHECK_UNMAPPED_FIRST")
     }

    /**
     * enum for parameter responseFormat
     */
     enum class ResponseFormat_futuresV1HistoricalOpenInterestDays(val value: kotlin.String) {
         @Json(name = "JSON") jSON("JSON"),
         @Json(name = "CSV") cSV("CSV")
     }

    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_MESSAGE,MESSAGE (optional, default to arrayListOf())
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @return GENERICRESPONSE
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun futuresV1HistoricalOpenInterestDays(market: kotlin.String, instrument: kotlin.String, groups: kotlin.collections.List<kotlin.String>? = arrayListOf(), limit: kotlin.Int? = 30, toTs: kotlin.Int? = null, aggregate: kotlin.Int? = 1, fill: kotlin.Boolean? = true, mappingPriority: MappingPriority_futuresV1HistoricalOpenInterestDays? = MappingPriority_futuresV1HistoricalOpenInterestDays.mAPPEDFIRST, responseFormat: ResponseFormat_futuresV1HistoricalOpenInterestDays? = ResponseFormat_futuresV1HistoricalOpenInterestDays.jSON) : GENERICRESPONSE {
        val localVarResponse = futuresV1HistoricalOpenInterestDaysWithHttpInfo(market = market, instrument = instrument, groups = groups, limit = limit, toTs = toTs, aggregate = aggregate, fill = fill, mappingPriority = mappingPriority, responseFormat = responseFormat)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GENERICRESPONSE
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_MESSAGE,MESSAGE (optional, default to arrayListOf())
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @return ApiResponse<GENERICRESPONSE?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun futuresV1HistoricalOpenInterestDaysWithHttpInfo(market: kotlin.String, instrument: kotlin.String, groups: kotlin.collections.List<kotlin.String>?, limit: kotlin.Int?, toTs: kotlin.Int?, aggregate: kotlin.Int?, fill: kotlin.Boolean?, mappingPriority: MappingPriority_futuresV1HistoricalOpenInterestDays?, responseFormat: ResponseFormat_futuresV1HistoricalOpenInterestDays?) : ApiResponse<GENERICRESPONSE?> {
        val localVariableConfig = futuresV1HistoricalOpenInterestDaysRequestConfig(market = market, instrument = instrument, groups = groups, limit = limit, toTs = toTs, aggregate = aggregate, fill = fill, mappingPriority = mappingPriority, responseFormat = responseFormat)

        return request<Unit, GENERICRESPONSE>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation futuresV1HistoricalOpenInterestDays
     *
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_MESSAGE,MESSAGE (optional, default to arrayListOf())
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @return RequestConfig
     */
    fun futuresV1HistoricalOpenInterestDaysRequestConfig(market: kotlin.String, instrument: kotlin.String, groups: kotlin.collections.List<kotlin.String>?, limit: kotlin.Int?, toTs: kotlin.Int?, aggregate: kotlin.Int?, fill: kotlin.Boolean?, mappingPriority: MappingPriority_futuresV1HistoricalOpenInterestDays?, responseFormat: ResponseFormat_futuresV1HistoricalOpenInterestDays?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("market", listOf(market.toString()))
                put("instrument", listOf(instrument.toString()))
                if (groups != null) {
                    put("groups", toMultiValue(groups.toList(), "csv"))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (toTs != null) {
                    put("to_ts", listOf(toTs.toString()))
                }
                if (aggregate != null) {
                    put("aggregate", listOf(aggregate.toString()))
                }
                if (fill != null) {
                    put("fill", listOf(fill.toString()))
                }
                if (mappingPriority != null) {
                    put("mapping_priority", listOf(mappingPriority.toString()))
                }
                if (responseFormat != null) {
                    put("response_format", listOf(responseFormat.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/futures/v1/historical/open-interest/days",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter mappingPriority
     */
     enum class MappingPriority_futuresV1HistoricalOpenInterestHours(val value: kotlin.String) {
         @Json(name = "CHECK_MAPPED_FIRST") mAPPEDFIRST("CHECK_MAPPED_FIRST"),
         @Json(name = "CHECK_UNMAPPED_FIRST") uNMAPPEDFIRST("CHECK_UNMAPPED_FIRST")
     }

    /**
     * enum for parameter responseFormat
     */
     enum class ResponseFormat_futuresV1HistoricalOpenInterestHours(val value: kotlin.String) {
         @Json(name = "JSON") jSON("JSON"),
         @Json(name = "CSV") cSV("CSV")
     }

    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_MESSAGE,MESSAGE (optional, default to arrayListOf())
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @return GENERICRESPONSE
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun futuresV1HistoricalOpenInterestHours(market: kotlin.String, instrument: kotlin.String, groups: kotlin.collections.List<kotlin.String>? = arrayListOf(), limit: kotlin.Int? = 30, toTs: kotlin.Int? = null, aggregate: kotlin.Int? = 1, fill: kotlin.Boolean? = true, mappingPriority: MappingPriority_futuresV1HistoricalOpenInterestHours? = MappingPriority_futuresV1HistoricalOpenInterestHours.mAPPEDFIRST, responseFormat: ResponseFormat_futuresV1HistoricalOpenInterestHours? = ResponseFormat_futuresV1HistoricalOpenInterestHours.jSON) : GENERICRESPONSE {
        val localVarResponse = futuresV1HistoricalOpenInterestHoursWithHttpInfo(market = market, instrument = instrument, groups = groups, limit = limit, toTs = toTs, aggregate = aggregate, fill = fill, mappingPriority = mappingPriority, responseFormat = responseFormat)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GENERICRESPONSE
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_MESSAGE,MESSAGE (optional, default to arrayListOf())
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @return ApiResponse<GENERICRESPONSE?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun futuresV1HistoricalOpenInterestHoursWithHttpInfo(market: kotlin.String, instrument: kotlin.String, groups: kotlin.collections.List<kotlin.String>?, limit: kotlin.Int?, toTs: kotlin.Int?, aggregate: kotlin.Int?, fill: kotlin.Boolean?, mappingPriority: MappingPriority_futuresV1HistoricalOpenInterestHours?, responseFormat: ResponseFormat_futuresV1HistoricalOpenInterestHours?) : ApiResponse<GENERICRESPONSE?> {
        val localVariableConfig = futuresV1HistoricalOpenInterestHoursRequestConfig(market = market, instrument = instrument, groups = groups, limit = limit, toTs = toTs, aggregate = aggregate, fill = fill, mappingPriority = mappingPriority, responseFormat = responseFormat)

        return request<Unit, GENERICRESPONSE>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation futuresV1HistoricalOpenInterestHours
     *
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_MESSAGE,MESSAGE (optional, default to arrayListOf())
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @return RequestConfig
     */
    fun futuresV1HistoricalOpenInterestHoursRequestConfig(market: kotlin.String, instrument: kotlin.String, groups: kotlin.collections.List<kotlin.String>?, limit: kotlin.Int?, toTs: kotlin.Int?, aggregate: kotlin.Int?, fill: kotlin.Boolean?, mappingPriority: MappingPriority_futuresV1HistoricalOpenInterestHours?, responseFormat: ResponseFormat_futuresV1HistoricalOpenInterestHours?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("market", listOf(market.toString()))
                put("instrument", listOf(instrument.toString()))
                if (groups != null) {
                    put("groups", toMultiValue(groups.toList(), "csv"))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (toTs != null) {
                    put("to_ts", listOf(toTs.toString()))
                }
                if (aggregate != null) {
                    put("aggregate", listOf(aggregate.toString()))
                }
                if (fill != null) {
                    put("fill", listOf(fill.toString()))
                }
                if (mappingPriority != null) {
                    put("mapping_priority", listOf(mappingPriority.toString()))
                }
                if (responseFormat != null) {
                    put("response_format", listOf(responseFormat.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/futures/v1/historical/open-interest/hours",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter mappingPriority
     */
     enum class MappingPriority_futuresV1HistoricalOpenInterestMessages(val value: kotlin.String) {
         @Json(name = "CHECK_MAPPED_FIRST") mAPPEDFIRST("CHECK_MAPPED_FIRST"),
         @Json(name = "CHECK_UNMAPPED_FIRST") uNMAPPEDFIRST("CHECK_UNMAPPED_FIRST")
     }

    /**
     * enum for parameter responseFormat
     */
     enum class ResponseFormat_futuresV1HistoricalOpenInterestMessages(val value: kotlin.String) {
         @Json(name = "JSON") jSON("JSON"),
         @Json(name = "CSV") cSV("CSV")
     }

    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param afterTs Unix timestamp in seconds of the earliest open interest message in the response (optional)
     * @param lastCcseq The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request. (optional, default to 0)
     * @param limit The maximum number of open interest messages to return (optional, default to 100)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @param return404OnEmptyResponse If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)
     * @return GENERICRESPONSE
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun futuresV1HistoricalOpenInterestMessages(market: kotlin.String, instrument: kotlin.String, afterTs: kotlin.Int? = null, lastCcseq: kotlin.Int? = 0, limit: kotlin.Int? = 100, mappingPriority: MappingPriority_futuresV1HistoricalOpenInterestMessages? = MappingPriority_futuresV1HistoricalOpenInterestMessages.mAPPEDFIRST, responseFormat: ResponseFormat_futuresV1HistoricalOpenInterestMessages? = ResponseFormat_futuresV1HistoricalOpenInterestMessages.jSON, return404OnEmptyResponse: kotlin.Boolean? = false) : GENERICRESPONSE {
        val localVarResponse = futuresV1HistoricalOpenInterestMessagesWithHttpInfo(market = market, instrument = instrument, afterTs = afterTs, lastCcseq = lastCcseq, limit = limit, mappingPriority = mappingPriority, responseFormat = responseFormat, return404OnEmptyResponse = return404OnEmptyResponse)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GENERICRESPONSE
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param afterTs Unix timestamp in seconds of the earliest open interest message in the response (optional)
     * @param lastCcseq The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request. (optional, default to 0)
     * @param limit The maximum number of open interest messages to return (optional, default to 100)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @param return404OnEmptyResponse If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)
     * @return ApiResponse<GENERICRESPONSE?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun futuresV1HistoricalOpenInterestMessagesWithHttpInfo(market: kotlin.String, instrument: kotlin.String, afterTs: kotlin.Int?, lastCcseq: kotlin.Int?, limit: kotlin.Int?, mappingPriority: MappingPriority_futuresV1HistoricalOpenInterestMessages?, responseFormat: ResponseFormat_futuresV1HistoricalOpenInterestMessages?, return404OnEmptyResponse: kotlin.Boolean?) : ApiResponse<GENERICRESPONSE?> {
        val localVariableConfig = futuresV1HistoricalOpenInterestMessagesRequestConfig(market = market, instrument = instrument, afterTs = afterTs, lastCcseq = lastCcseq, limit = limit, mappingPriority = mappingPriority, responseFormat = responseFormat, return404OnEmptyResponse = return404OnEmptyResponse)

        return request<Unit, GENERICRESPONSE>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation futuresV1HistoricalOpenInterestMessages
     *
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param afterTs Unix timestamp in seconds of the earliest open interest message in the response (optional)
     * @param lastCcseq The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request. (optional, default to 0)
     * @param limit The maximum number of open interest messages to return (optional, default to 100)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @param return404OnEmptyResponse If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)
     * @return RequestConfig
     */
    fun futuresV1HistoricalOpenInterestMessagesRequestConfig(market: kotlin.String, instrument: kotlin.String, afterTs: kotlin.Int?, lastCcseq: kotlin.Int?, limit: kotlin.Int?, mappingPriority: MappingPriority_futuresV1HistoricalOpenInterestMessages?, responseFormat: ResponseFormat_futuresV1HistoricalOpenInterestMessages?, return404OnEmptyResponse: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("market", listOf(market.toString()))
                put("instrument", listOf(instrument.toString()))
                if (afterTs != null) {
                    put("after_ts", listOf(afterTs.toString()))
                }
                if (lastCcseq != null) {
                    put("last_ccseq", listOf(lastCcseq.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (mappingPriority != null) {
                    put("mapping_priority", listOf(mappingPriority.toString()))
                }
                if (responseFormat != null) {
                    put("response_format", listOf(responseFormat.toString()))
                }
                if (return404OnEmptyResponse != null) {
                    put("return_404_on_empty_response", listOf(return404OnEmptyResponse.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/futures/v1/historical/open-interest-messages",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter mappingPriority
     */
     enum class MappingPriority_futuresV1HistoricalOpenInterestMessagesHour(val value: kotlin.String) {
         @Json(name = "CHECK_MAPPED_FIRST") mAPPEDFIRST("CHECK_MAPPED_FIRST"),
         @Json(name = "CHECK_UNMAPPED_FIRST") uNMAPPEDFIRST("CHECK_UNMAPPED_FIRST")
     }

    /**
     * enum for parameter responseFormat
     */
     enum class ResponseFormat_futuresV1HistoricalOpenInterestMessagesHour(val value: kotlin.String) {
         @Json(name = "JSON") jSON("JSON"),
         @Json(name = "CSV") cSV("CSV")
     }

    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param hourTs Unix timestamp in seconds for the hour containing the open interest updates you are interested in. You can pass any timestamp in the hour but we will round it down the the full hour timestmap and return all open interest updates in that hour. (optional)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @param return404OnEmptyResponse If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)
     * @return GENERICRESPONSE
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun futuresV1HistoricalOpenInterestMessagesHour(market: kotlin.String, instrument: kotlin.String, hourTs: kotlin.Int? = null, mappingPriority: MappingPriority_futuresV1HistoricalOpenInterestMessagesHour? = MappingPriority_futuresV1HistoricalOpenInterestMessagesHour.mAPPEDFIRST, responseFormat: ResponseFormat_futuresV1HistoricalOpenInterestMessagesHour? = ResponseFormat_futuresV1HistoricalOpenInterestMessagesHour.jSON, return404OnEmptyResponse: kotlin.Boolean? = false) : GENERICRESPONSE {
        val localVarResponse = futuresV1HistoricalOpenInterestMessagesHourWithHttpInfo(market = market, instrument = instrument, hourTs = hourTs, mappingPriority = mappingPriority, responseFormat = responseFormat, return404OnEmptyResponse = return404OnEmptyResponse)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GENERICRESPONSE
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param hourTs Unix timestamp in seconds for the hour containing the open interest updates you are interested in. You can pass any timestamp in the hour but we will round it down the the full hour timestmap and return all open interest updates in that hour. (optional)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @param return404OnEmptyResponse If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)
     * @return ApiResponse<GENERICRESPONSE?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun futuresV1HistoricalOpenInterestMessagesHourWithHttpInfo(market: kotlin.String, instrument: kotlin.String, hourTs: kotlin.Int?, mappingPriority: MappingPriority_futuresV1HistoricalOpenInterestMessagesHour?, responseFormat: ResponseFormat_futuresV1HistoricalOpenInterestMessagesHour?, return404OnEmptyResponse: kotlin.Boolean?) : ApiResponse<GENERICRESPONSE?> {
        val localVariableConfig = futuresV1HistoricalOpenInterestMessagesHourRequestConfig(market = market, instrument = instrument, hourTs = hourTs, mappingPriority = mappingPriority, responseFormat = responseFormat, return404OnEmptyResponse = return404OnEmptyResponse)

        return request<Unit, GENERICRESPONSE>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation futuresV1HistoricalOpenInterestMessagesHour
     *
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param hourTs Unix timestamp in seconds for the hour containing the open interest updates you are interested in. You can pass any timestamp in the hour but we will round it down the the full hour timestmap and return all open interest updates in that hour. (optional)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @param return404OnEmptyResponse If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)
     * @return RequestConfig
     */
    fun futuresV1HistoricalOpenInterestMessagesHourRequestConfig(market: kotlin.String, instrument: kotlin.String, hourTs: kotlin.Int?, mappingPriority: MappingPriority_futuresV1HistoricalOpenInterestMessagesHour?, responseFormat: ResponseFormat_futuresV1HistoricalOpenInterestMessagesHour?, return404OnEmptyResponse: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("market", listOf(market.toString()))
                put("instrument", listOf(instrument.toString()))
                if (hourTs != null) {
                    put("hour_ts", listOf(hourTs.toString()))
                }
                if (mappingPriority != null) {
                    put("mapping_priority", listOf(mappingPriority.toString()))
                }
                if (responseFormat != null) {
                    put("response_format", listOf(responseFormat.toString()))
                }
                if (return404OnEmptyResponse != null) {
                    put("return_404_on_empty_response", listOf(return404OnEmptyResponse.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/futures/v1/historical/open-interest-messages/hour",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter mappingPriority
     */
     enum class MappingPriority_futuresV1HistoricalOpenInterestMinutes(val value: kotlin.String) {
         @Json(name = "CHECK_MAPPED_FIRST") mAPPEDFIRST("CHECK_MAPPED_FIRST"),
         @Json(name = "CHECK_UNMAPPED_FIRST") uNMAPPEDFIRST("CHECK_UNMAPPED_FIRST")
     }

    /**
     * enum for parameter responseFormat
     */
     enum class ResponseFormat_futuresV1HistoricalOpenInterestMinutes(val value: kotlin.String) {
         @Json(name = "JSON") jSON("JSON"),
         @Json(name = "CSV") cSV("CSV")
     }

    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_MESSAGE,MESSAGE (optional, default to arrayListOf())
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @return GENERICRESPONSE
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun futuresV1HistoricalOpenInterestMinutes(market: kotlin.String, instrument: kotlin.String, groups: kotlin.collections.List<kotlin.String>? = arrayListOf(), limit: kotlin.Int? = 30, toTs: kotlin.Int? = null, aggregate: kotlin.Int? = 1, fill: kotlin.Boolean? = true, mappingPriority: MappingPriority_futuresV1HistoricalOpenInterestMinutes? = MappingPriority_futuresV1HistoricalOpenInterestMinutes.mAPPEDFIRST, responseFormat: ResponseFormat_futuresV1HistoricalOpenInterestMinutes? = ResponseFormat_futuresV1HistoricalOpenInterestMinutes.jSON) : GENERICRESPONSE {
        val localVarResponse = futuresV1HistoricalOpenInterestMinutesWithHttpInfo(market = market, instrument = instrument, groups = groups, limit = limit, toTs = toTs, aggregate = aggregate, fill = fill, mappingPriority = mappingPriority, responseFormat = responseFormat)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GENERICRESPONSE
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_MESSAGE,MESSAGE (optional, default to arrayListOf())
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @return ApiResponse<GENERICRESPONSE?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun futuresV1HistoricalOpenInterestMinutesWithHttpInfo(market: kotlin.String, instrument: kotlin.String, groups: kotlin.collections.List<kotlin.String>?, limit: kotlin.Int?, toTs: kotlin.Int?, aggregate: kotlin.Int?, fill: kotlin.Boolean?, mappingPriority: MappingPriority_futuresV1HistoricalOpenInterestMinutes?, responseFormat: ResponseFormat_futuresV1HistoricalOpenInterestMinutes?) : ApiResponse<GENERICRESPONSE?> {
        val localVariableConfig = futuresV1HistoricalOpenInterestMinutesRequestConfig(market = market, instrument = instrument, groups = groups, limit = limit, toTs = toTs, aggregate = aggregate, fill = fill, mappingPriority = mappingPriority, responseFormat = responseFormat)

        return request<Unit, GENERICRESPONSE>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation futuresV1HistoricalOpenInterestMinutes
     *
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_MESSAGE,MESSAGE (optional, default to arrayListOf())
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @return RequestConfig
     */
    fun futuresV1HistoricalOpenInterestMinutesRequestConfig(market: kotlin.String, instrument: kotlin.String, groups: kotlin.collections.List<kotlin.String>?, limit: kotlin.Int?, toTs: kotlin.Int?, aggregate: kotlin.Int?, fill: kotlin.Boolean?, mappingPriority: MappingPriority_futuresV1HistoricalOpenInterestMinutes?, responseFormat: ResponseFormat_futuresV1HistoricalOpenInterestMinutes?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("market", listOf(market.toString()))
                put("instrument", listOf(instrument.toString()))
                if (groups != null) {
                    put("groups", toMultiValue(groups.toList(), "csv"))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (toTs != null) {
                    put("to_ts", listOf(toTs.toString()))
                }
                if (aggregate != null) {
                    put("aggregate", listOf(aggregate.toString()))
                }
                if (fill != null) {
                    put("fill", listOf(fill.toString()))
                }
                if (mappingPriority != null) {
                    put("mapping_priority", listOf(mappingPriority.toString()))
                }
                if (responseFormat != null) {
                    put("response_format", listOf(responseFormat.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/futures/v1/historical/open-interest/minutes",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter mappingPriority
     */
     enum class MappingPriority_futuresV1HistoricalTrades(val value: kotlin.String) {
         @Json(name = "CHECK_MAPPED_FIRST") mAPPEDFIRST("CHECK_MAPPED_FIRST"),
         @Json(name = "CHECK_UNMAPPED_FIRST") uNMAPPEDFIRST("CHECK_UNMAPPED_FIRST")
     }

    /**
     * enum for parameter responseFormat
     */
     enum class ResponseFormat_futuresV1HistoricalTrades(val value: kotlin.String) {
         @Json(name = "JSON") jSON("JSON"),
         @Json(name = "CSV") cSV("CSV")
     }

    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param afterTs Unix timestamp in seconds of the earliest trade in the response. (optional)
     * @param lastCcseq The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request. (optional, default to 0)
     * @param limit The maximum number of trades to return (optional, default to 100)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @param return404OnEmptyResponse If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)
     * @return GENERICRESPONSE
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun futuresV1HistoricalTrades(market: kotlin.String, instrument: kotlin.String, afterTs: kotlin.Int? = null, lastCcseq: kotlin.Int? = 0, limit: kotlin.Int? = 100, mappingPriority: MappingPriority_futuresV1HistoricalTrades? = MappingPriority_futuresV1HistoricalTrades.mAPPEDFIRST, responseFormat: ResponseFormat_futuresV1HistoricalTrades? = ResponseFormat_futuresV1HistoricalTrades.jSON, return404OnEmptyResponse: kotlin.Boolean? = false) : GENERICRESPONSE {
        val localVarResponse = futuresV1HistoricalTradesWithHttpInfo(market = market, instrument = instrument, afterTs = afterTs, lastCcseq = lastCcseq, limit = limit, mappingPriority = mappingPriority, responseFormat = responseFormat, return404OnEmptyResponse = return404OnEmptyResponse)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GENERICRESPONSE
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param afterTs Unix timestamp in seconds of the earliest trade in the response. (optional)
     * @param lastCcseq The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request. (optional, default to 0)
     * @param limit The maximum number of trades to return (optional, default to 100)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @param return404OnEmptyResponse If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)
     * @return ApiResponse<GENERICRESPONSE?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun futuresV1HistoricalTradesWithHttpInfo(market: kotlin.String, instrument: kotlin.String, afterTs: kotlin.Int?, lastCcseq: kotlin.Int?, limit: kotlin.Int?, mappingPriority: MappingPriority_futuresV1HistoricalTrades?, responseFormat: ResponseFormat_futuresV1HistoricalTrades?, return404OnEmptyResponse: kotlin.Boolean?) : ApiResponse<GENERICRESPONSE?> {
        val localVariableConfig = futuresV1HistoricalTradesRequestConfig(market = market, instrument = instrument, afterTs = afterTs, lastCcseq = lastCcseq, limit = limit, mappingPriority = mappingPriority, responseFormat = responseFormat, return404OnEmptyResponse = return404OnEmptyResponse)

        return request<Unit, GENERICRESPONSE>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation futuresV1HistoricalTrades
     *
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param afterTs Unix timestamp in seconds of the earliest trade in the response. (optional)
     * @param lastCcseq The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request. (optional, default to 0)
     * @param limit The maximum number of trades to return (optional, default to 100)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @param return404OnEmptyResponse If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)
     * @return RequestConfig
     */
    fun futuresV1HistoricalTradesRequestConfig(market: kotlin.String, instrument: kotlin.String, afterTs: kotlin.Int?, lastCcseq: kotlin.Int?, limit: kotlin.Int?, mappingPriority: MappingPriority_futuresV1HistoricalTrades?, responseFormat: ResponseFormat_futuresV1HistoricalTrades?, return404OnEmptyResponse: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("market", listOf(market.toString()))
                put("instrument", listOf(instrument.toString()))
                if (afterTs != null) {
                    put("after_ts", listOf(afterTs.toString()))
                }
                if (lastCcseq != null) {
                    put("last_ccseq", listOf(lastCcseq.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (mappingPriority != null) {
                    put("mapping_priority", listOf(mappingPriority.toString()))
                }
                if (responseFormat != null) {
                    put("response_format", listOf(responseFormat.toString()))
                }
                if (return404OnEmptyResponse != null) {
                    put("return_404_on_empty_response", listOf(return404OnEmptyResponse.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/futures/v1/historical/trades",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter mappingPriority
     */
     enum class MappingPriority_futuresV1HistoricalTradesHour(val value: kotlin.String) {
         @Json(name = "CHECK_MAPPED_FIRST") mAPPEDFIRST("CHECK_MAPPED_FIRST"),
         @Json(name = "CHECK_UNMAPPED_FIRST") uNMAPPEDFIRST("CHECK_UNMAPPED_FIRST")
     }

    /**
     * enum for parameter responseFormat
     */
     enum class ResponseFormat_futuresV1HistoricalTradesHour(val value: kotlin.String) {
         @Json(name = "JSON") jSON("JSON"),
         @Json(name = "CSV") cSV("CSV")
     }

    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param hourTs Unix timestamp in seconds for the hour containing the trades you are interested in. You can pass any timestamp within an hour but we will round it down the the full hour timestmap and return all trades in that hour. (optional)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @param return404OnEmptyResponse If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)
     * @return GENERICRESPONSE
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun futuresV1HistoricalTradesHour(market: kotlin.String, instrument: kotlin.String, hourTs: kotlin.Int? = null, mappingPriority: MappingPriority_futuresV1HistoricalTradesHour? = MappingPriority_futuresV1HistoricalTradesHour.mAPPEDFIRST, responseFormat: ResponseFormat_futuresV1HistoricalTradesHour? = ResponseFormat_futuresV1HistoricalTradesHour.jSON, return404OnEmptyResponse: kotlin.Boolean? = false) : GENERICRESPONSE {
        val localVarResponse = futuresV1HistoricalTradesHourWithHttpInfo(market = market, instrument = instrument, hourTs = hourTs, mappingPriority = mappingPriority, responseFormat = responseFormat, return404OnEmptyResponse = return404OnEmptyResponse)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GENERICRESPONSE
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param hourTs Unix timestamp in seconds for the hour containing the trades you are interested in. You can pass any timestamp within an hour but we will round it down the the full hour timestmap and return all trades in that hour. (optional)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @param return404OnEmptyResponse If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)
     * @return ApiResponse<GENERICRESPONSE?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun futuresV1HistoricalTradesHourWithHttpInfo(market: kotlin.String, instrument: kotlin.String, hourTs: kotlin.Int?, mappingPriority: MappingPriority_futuresV1HistoricalTradesHour?, responseFormat: ResponseFormat_futuresV1HistoricalTradesHour?, return404OnEmptyResponse: kotlin.Boolean?) : ApiResponse<GENERICRESPONSE?> {
        val localVariableConfig = futuresV1HistoricalTradesHourRequestConfig(market = market, instrument = instrument, hourTs = hourTs, mappingPriority = mappingPriority, responseFormat = responseFormat, return404OnEmptyResponse = return404OnEmptyResponse)

        return request<Unit, GENERICRESPONSE>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation futuresV1HistoricalTradesHour
     *
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param hourTs Unix timestamp in seconds for the hour containing the trades you are interested in. You can pass any timestamp within an hour but we will round it down the the full hour timestmap and return all trades in that hour. (optional)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @param return404OnEmptyResponse If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)
     * @return RequestConfig
     */
    fun futuresV1HistoricalTradesHourRequestConfig(market: kotlin.String, instrument: kotlin.String, hourTs: kotlin.Int?, mappingPriority: MappingPriority_futuresV1HistoricalTradesHour?, responseFormat: ResponseFormat_futuresV1HistoricalTradesHour?, return404OnEmptyResponse: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("market", listOf(market.toString()))
                put("instrument", listOf(instrument.toString()))
                if (hourTs != null) {
                    put("hour_ts", listOf(hourTs.toString()))
                }
                if (mappingPriority != null) {
                    put("mapping_priority", listOf(mappingPriority.toString()))
                }
                if (responseFormat != null) {
                    put("response_format", listOf(responseFormat.toString()))
                }
                if (return404OnEmptyResponse != null) {
                    put("return_404_on_empty_response", listOf(return404OnEmptyResponse.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/futures/v1/historical/trades/hour",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter mappingPriority
     */
     enum class MappingPriority_futuresV1LatestFundingRateTick(val value: kotlin.String) {
         @Json(name = "CHECK_MAPPED_FIRST") mAPPEDFIRST("CHECK_MAPPED_FIRST"),
         @Json(name = "CHECK_UNMAPPED_FIRST") uNMAPPEDFIRST("CHECK_UNMAPPED_FIRST")
     }

    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instruments A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME (optional, default to arrayListOf())
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @return GENERICRESPONSE
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun futuresV1LatestFundingRateTick(market: kotlin.String, instruments: kotlin.collections.List<kotlin.String>, groups: kotlin.collections.List<kotlin.String>? = arrayListOf(), mappingPriority: MappingPriority_futuresV1LatestFundingRateTick? = MappingPriority_futuresV1LatestFundingRateTick.mAPPEDFIRST) : GENERICRESPONSE {
        val localVarResponse = futuresV1LatestFundingRateTickWithHttpInfo(market = market, instruments = instruments, groups = groups, mappingPriority = mappingPriority)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GENERICRESPONSE
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instruments A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME (optional, default to arrayListOf())
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @return ApiResponse<GENERICRESPONSE?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun futuresV1LatestFundingRateTickWithHttpInfo(market: kotlin.String, instruments: kotlin.collections.List<kotlin.String>, groups: kotlin.collections.List<kotlin.String>?, mappingPriority: MappingPriority_futuresV1LatestFundingRateTick?) : ApiResponse<GENERICRESPONSE?> {
        val localVariableConfig = futuresV1LatestFundingRateTickRequestConfig(market = market, instruments = instruments, groups = groups, mappingPriority = mappingPriority)

        return request<Unit, GENERICRESPONSE>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation futuresV1LatestFundingRateTick
     *
     * @param market The exchange to obtain data from
     * @param instruments A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME (optional, default to arrayListOf())
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @return RequestConfig
     */
    fun futuresV1LatestFundingRateTickRequestConfig(market: kotlin.String, instruments: kotlin.collections.List<kotlin.String>, groups: kotlin.collections.List<kotlin.String>?, mappingPriority: MappingPriority_futuresV1LatestFundingRateTick?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("market", listOf(market.toString()))
                put("instruments", toMultiValue(instruments.toList(), "csv"))
                if (groups != null) {
                    put("groups", toMultiValue(groups.toList(), "csv"))
                }
                if (mappingPriority != null) {
                    put("mapping_priority", listOf(mappingPriority.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/futures/v1/latest/funding-rate/tick",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter mappingPriority
     */
     enum class MappingPriority_futuresV1LatestInstrumentMetadata(val value: kotlin.String) {
         @Json(name = "CHECK_MAPPED_FIRST") mAPPEDFIRST("CHECK_MAPPED_FIRST"),
         @Json(name = "CHECK_UNMAPPED_FIRST") uNMAPPEDFIRST("CHECK_UNMAPPED_FIRST")
     }

    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instruments A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting metadata entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: STATUS,INTERNAL,GENERAL,MIGRATION,SOURCE (optional, default to arrayListOf())
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @return GENERICRESPONSE
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun futuresV1LatestInstrumentMetadata(market: kotlin.String, instruments: kotlin.collections.List<kotlin.String>, groups: kotlin.collections.List<kotlin.String>? = arrayListOf(), mappingPriority: MappingPriority_futuresV1LatestInstrumentMetadata? = MappingPriority_futuresV1LatestInstrumentMetadata.mAPPEDFIRST) : GENERICRESPONSE {
        val localVarResponse = futuresV1LatestInstrumentMetadataWithHttpInfo(market = market, instruments = instruments, groups = groups, mappingPriority = mappingPriority)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GENERICRESPONSE
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instruments A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting metadata entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: STATUS,INTERNAL,GENERAL,MIGRATION,SOURCE (optional, default to arrayListOf())
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @return ApiResponse<GENERICRESPONSE?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun futuresV1LatestInstrumentMetadataWithHttpInfo(market: kotlin.String, instruments: kotlin.collections.List<kotlin.String>, groups: kotlin.collections.List<kotlin.String>?, mappingPriority: MappingPriority_futuresV1LatestInstrumentMetadata?) : ApiResponse<GENERICRESPONSE?> {
        val localVariableConfig = futuresV1LatestInstrumentMetadataRequestConfig(market = market, instruments = instruments, groups = groups, mappingPriority = mappingPriority)

        return request<Unit, GENERICRESPONSE>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation futuresV1LatestInstrumentMetadata
     *
     * @param market The exchange to obtain data from
     * @param instruments A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting metadata entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: STATUS,INTERNAL,GENERAL,MIGRATION,SOURCE (optional, default to arrayListOf())
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @return RequestConfig
     */
    fun futuresV1LatestInstrumentMetadataRequestConfig(market: kotlin.String, instruments: kotlin.collections.List<kotlin.String>, groups: kotlin.collections.List<kotlin.String>?, mappingPriority: MappingPriority_futuresV1LatestInstrumentMetadata?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("market", listOf(market.toString()))
                put("instruments", toMultiValue(instruments.toList(), "csv"))
                if (groups != null) {
                    put("groups", toMultiValue(groups.toList(), "csv"))
                }
                if (mappingPriority != null) {
                    put("mapping_priority", listOf(mappingPriority.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/futures/v1/latest/instrument/metadata",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter mappingPriority
     */
     enum class MappingPriority_futuresV1LatestOpenInterestTick(val value: kotlin.String) {
         @Json(name = "CHECK_MAPPED_FIRST") mAPPEDFIRST("CHECK_MAPPED_FIRST"),
         @Json(name = "CHECK_UNMAPPED_FIRST") uNMAPPEDFIRST("CHECK_UNMAPPED_FIRST")
     }

    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instruments A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME (optional, default to arrayListOf())
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @return GENERICRESPONSE
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun futuresV1LatestOpenInterestTick(market: kotlin.String, instruments: kotlin.collections.List<kotlin.String>, groups: kotlin.collections.List<kotlin.String>? = arrayListOf(), mappingPriority: MappingPriority_futuresV1LatestOpenInterestTick? = MappingPriority_futuresV1LatestOpenInterestTick.mAPPEDFIRST) : GENERICRESPONSE {
        val localVarResponse = futuresV1LatestOpenInterestTickWithHttpInfo(market = market, instruments = instruments, groups = groups, mappingPriority = mappingPriority)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GENERICRESPONSE
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instruments A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME (optional, default to arrayListOf())
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @return ApiResponse<GENERICRESPONSE?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun futuresV1LatestOpenInterestTickWithHttpInfo(market: kotlin.String, instruments: kotlin.collections.List<kotlin.String>, groups: kotlin.collections.List<kotlin.String>?, mappingPriority: MappingPriority_futuresV1LatestOpenInterestTick?) : ApiResponse<GENERICRESPONSE?> {
        val localVariableConfig = futuresV1LatestOpenInterestTickRequestConfig(market = market, instruments = instruments, groups = groups, mappingPriority = mappingPriority)

        return request<Unit, GENERICRESPONSE>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation futuresV1LatestOpenInterestTick
     *
     * @param market The exchange to obtain data from
     * @param instruments A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME (optional, default to arrayListOf())
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @return RequestConfig
     */
    fun futuresV1LatestOpenInterestTickRequestConfig(market: kotlin.String, instruments: kotlin.collections.List<kotlin.String>, groups: kotlin.collections.List<kotlin.String>?, mappingPriority: MappingPriority_futuresV1LatestOpenInterestTick?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("market", listOf(market.toString()))
                put("instruments", toMultiValue(instruments.toList(), "csv"))
                if (groups != null) {
                    put("groups", toMultiValue(groups.toList(), "csv"))
                }
                if (mappingPriority != null) {
                    put("mapping_priority", listOf(mappingPriority.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/futures/v1/latest/open-interest/tick",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter mappingPriority
     */
     enum class MappingPriority_futuresV1LatestTick(val value: kotlin.String) {
         @Json(name = "CHECK_MAPPED_FIRST") mAPPEDFIRST("CHECK_MAPPED_FIRST"),
         @Json(name = "CHECK_UNMAPPED_FIRST") uNMAPPEDFIRST("CHECK_UNMAPPED_FIRST")
     }

    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instruments A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,LAST_UPDATE,TOP_OF_BOOK,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME (optional, default to arrayListOf())
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @return GENERICRESPONSE
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun futuresV1LatestTick(market: kotlin.String, instruments: kotlin.collections.List<kotlin.String>, groups: kotlin.collections.List<kotlin.String>? = arrayListOf(), mappingPriority: MappingPriority_futuresV1LatestTick? = MappingPriority_futuresV1LatestTick.mAPPEDFIRST) : GENERICRESPONSE {
        val localVarResponse = futuresV1LatestTickWithHttpInfo(market = market, instruments = instruments, groups = groups, mappingPriority = mappingPriority)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GENERICRESPONSE
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instruments A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,LAST_UPDATE,TOP_OF_BOOK,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME (optional, default to arrayListOf())
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @return ApiResponse<GENERICRESPONSE?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun futuresV1LatestTickWithHttpInfo(market: kotlin.String, instruments: kotlin.collections.List<kotlin.String>, groups: kotlin.collections.List<kotlin.String>?, mappingPriority: MappingPriority_futuresV1LatestTick?) : ApiResponse<GENERICRESPONSE?> {
        val localVariableConfig = futuresV1LatestTickRequestConfig(market = market, instruments = instruments, groups = groups, mappingPriority = mappingPriority)

        return request<Unit, GENERICRESPONSE>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation futuresV1LatestTick
     *
     * @param market The exchange to obtain data from
     * @param instruments A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,LAST_UPDATE,TOP_OF_BOOK,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME (optional, default to arrayListOf())
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @return RequestConfig
     */
    fun futuresV1LatestTickRequestConfig(market: kotlin.String, instruments: kotlin.collections.List<kotlin.String>, groups: kotlin.collections.List<kotlin.String>?, mappingPriority: MappingPriority_futuresV1LatestTick?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("market", listOf(market.toString()))
                put("instruments", toMultiValue(instruments.toList(), "csv"))
                if (groups != null) {
                    put("groups", toMultiValue(groups.toList(), "csv"))
                }
                if (mappingPriority != null) {
                    put("mapping_priority", listOf(mappingPriority.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/futures/v1/latest/tick",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param market The exchange to obtain data from (optional, default to "")
     * @return GENERICRESPONSE
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun futuresV1Markets(market: kotlin.String? = "") : GENERICRESPONSE {
        val localVarResponse = futuresV1MarketsWithHttpInfo(market = market)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GENERICRESPONSE
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param market The exchange to obtain data from (optional, default to "")
     * @return ApiResponse<GENERICRESPONSE?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun futuresV1MarketsWithHttpInfo(market: kotlin.String?) : ApiResponse<GENERICRESPONSE?> {
        val localVariableConfig = futuresV1MarketsRequestConfig(market = market)

        return request<Unit, GENERICRESPONSE>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation futuresV1Markets
     *
     * @param market The exchange to obtain data from (optional, default to "")
     * @return RequestConfig
     */
    fun futuresV1MarketsRequestConfig(market: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (market != null) {
                    put("market", listOf(market.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/futures/v1/markets",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter instrumentStatus
     */
     enum class InstrumentStatus_futuresV1MarketsInstruments(val value: kotlin.String) {
         @Json(name = "ACTIVE") aCTIVE("ACTIVE"),
         @Json(name = "IGNORED") iGNORED("IGNORED"),
         @Json(name = "RETIRED") rETIRED("RETIRED"),
         @Json(name = "EXPIRED") eXPIRED("EXPIRED")
     }

    /**
     * 
     * 
     * @param market The exchange to obtain data from (optional, default to "")
     * @param instrument The mapped instrument to retrieve on a specific market. (optional, default to "")
     * @param instrumentStatus The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED (optional, default to arrayListOf())
     * @return GENERICRESPONSE
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun futuresV1MarketsInstruments(market: kotlin.String? = "", instrument: kotlin.String? = "", instrumentStatus: kotlin.collections.List<InstrumentStatus_futuresV1MarketsInstruments>? = InstrumentStatus_futuresV1MarketsInstruments.arrayListOf()) : GENERICRESPONSE {
        val localVarResponse = futuresV1MarketsInstrumentsWithHttpInfo(market = market, instrument = instrument, instrumentStatus = instrumentStatus)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GENERICRESPONSE
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param market The exchange to obtain data from (optional, default to "")
     * @param instrument The mapped instrument to retrieve on a specific market. (optional, default to "")
     * @param instrumentStatus The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED (optional, default to arrayListOf())
     * @return ApiResponse<GENERICRESPONSE?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun futuresV1MarketsInstrumentsWithHttpInfo(market: kotlin.String?, instrument: kotlin.String?, instrumentStatus: kotlin.collections.List<InstrumentStatus_futuresV1MarketsInstruments>?) : ApiResponse<GENERICRESPONSE?> {
        val localVariableConfig = futuresV1MarketsInstrumentsRequestConfig(market = market, instrument = instrument, instrumentStatus = instrumentStatus)

        return request<Unit, GENERICRESPONSE>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation futuresV1MarketsInstruments
     *
     * @param market The exchange to obtain data from (optional, default to "")
     * @param instrument The mapped instrument to retrieve on a specific market. (optional, default to "")
     * @param instrumentStatus The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED (optional, default to arrayListOf())
     * @return RequestConfig
     */
    fun futuresV1MarketsInstrumentsRequestConfig(market: kotlin.String?, instrument: kotlin.String?, instrumentStatus: kotlin.collections.List<InstrumentStatus_futuresV1MarketsInstruments>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (market != null) {
                    put("market", listOf(market.toString()))
                }
                if (instrument != null) {
                    put("instrument", listOf(instrument.toString()))
                }
                if (instrumentStatus != null) {
                    put("instrument_status", toMultiValue(instrumentStatus.toList(), "csv"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/futures/v1/markets/instruments",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter instrumentStatus
     */
     enum class InstrumentStatus_futuresV1MarketsInstrumentsUnmapped(val value: kotlin.String) {
         @Json(name = "ACTIVE") aCTIVE("ACTIVE"),
         @Json(name = "IGNORED") iGNORED("IGNORED"),
         @Json(name = "RETIRED") rETIRED("RETIRED"),
         @Json(name = "EXPIRED") eXPIRED("EXPIRED")
     }

    /**
     * 
     * 
     * @param market The exchange to obtain data from (optional, default to "")
     * @param instrument The unmapped instrument to retrieve on a specific market. (optional, default to "")
     * @param instrumentStatus The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED (optional, default to arrayListOf())
     * @return GENERICRESPONSE
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun futuresV1MarketsInstrumentsUnmapped(market: kotlin.String? = "", instrument: kotlin.String? = "", instrumentStatus: kotlin.collections.List<InstrumentStatus_futuresV1MarketsInstrumentsUnmapped>? = InstrumentStatus_futuresV1MarketsInstrumentsUnmapped.arrayListOf()) : GENERICRESPONSE {
        val localVarResponse = futuresV1MarketsInstrumentsUnmappedWithHttpInfo(market = market, instrument = instrument, instrumentStatus = instrumentStatus)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GENERICRESPONSE
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param market The exchange to obtain data from (optional, default to "")
     * @param instrument The unmapped instrument to retrieve on a specific market. (optional, default to "")
     * @param instrumentStatus The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED (optional, default to arrayListOf())
     * @return ApiResponse<GENERICRESPONSE?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun futuresV1MarketsInstrumentsUnmappedWithHttpInfo(market: kotlin.String?, instrument: kotlin.String?, instrumentStatus: kotlin.collections.List<InstrumentStatus_futuresV1MarketsInstrumentsUnmapped>?) : ApiResponse<GENERICRESPONSE?> {
        val localVariableConfig = futuresV1MarketsInstrumentsUnmappedRequestConfig(market = market, instrument = instrument, instrumentStatus = instrumentStatus)

        return request<Unit, GENERICRESPONSE>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation futuresV1MarketsInstrumentsUnmapped
     *
     * @param market The exchange to obtain data from (optional, default to "")
     * @param instrument The unmapped instrument to retrieve on a specific market. (optional, default to "")
     * @param instrumentStatus The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED (optional, default to arrayListOf())
     * @return RequestConfig
     */
    fun futuresV1MarketsInstrumentsUnmappedRequestConfig(market: kotlin.String?, instrument: kotlin.String?, instrumentStatus: kotlin.collections.List<InstrumentStatus_futuresV1MarketsInstrumentsUnmapped>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (market != null) {
                    put("market", listOf(market.toString()))
                }
                if (instrument != null) {
                    put("instrument", listOf(instrument.toString()))
                }
                if (instrumentStatus != null) {
                    put("instrument_status", toMultiValue(instrumentStatus.toList(), "csv"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/futures/v1/markets/instruments/unmapped",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter mappingPriority
     */
     enum class MappingPriority_indexV1HistoricalDays(val value: kotlin.String) {
         @Json(name = "CHECK_MAPPED_FIRST") mAPPEDFIRST("CHECK_MAPPED_FIRST"),
         @Json(name = "CHECK_UNMAPPED_FIRST") uNMAPPEDFIRST("CHECK_UNMAPPED_FIRST")
     }

    /**
     * enum for parameter responseFormat
     */
     enum class ResponseFormat_indexV1HistoricalDays(val value: kotlin.String) {
         @Json(name = "JSON") jSON("JSON"),
         @Json(name = "CSV") cSV("CSV")
     }

    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME (optional, default to arrayListOf())
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @return GENERICRESPONSE
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun indexV1HistoricalDays(market: kotlin.String, instrument: kotlin.String, groups: kotlin.collections.List<kotlin.String>? = arrayListOf(), limit: kotlin.Int? = 30, toTs: kotlin.Int? = null, aggregate: kotlin.Int? = 1, fill: kotlin.Boolean? = true, mappingPriority: MappingPriority_indexV1HistoricalDays? = MappingPriority_indexV1HistoricalDays.mAPPEDFIRST, responseFormat: ResponseFormat_indexV1HistoricalDays? = ResponseFormat_indexV1HistoricalDays.jSON) : GENERICRESPONSE {
        val localVarResponse = indexV1HistoricalDaysWithHttpInfo(market = market, instrument = instrument, groups = groups, limit = limit, toTs = toTs, aggregate = aggregate, fill = fill, mappingPriority = mappingPriority, responseFormat = responseFormat)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GENERICRESPONSE
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME (optional, default to arrayListOf())
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @return ApiResponse<GENERICRESPONSE?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun indexV1HistoricalDaysWithHttpInfo(market: kotlin.String, instrument: kotlin.String, groups: kotlin.collections.List<kotlin.String>?, limit: kotlin.Int?, toTs: kotlin.Int?, aggregate: kotlin.Int?, fill: kotlin.Boolean?, mappingPriority: MappingPriority_indexV1HistoricalDays?, responseFormat: ResponseFormat_indexV1HistoricalDays?) : ApiResponse<GENERICRESPONSE?> {
        val localVariableConfig = indexV1HistoricalDaysRequestConfig(market = market, instrument = instrument, groups = groups, limit = limit, toTs = toTs, aggregate = aggregate, fill = fill, mappingPriority = mappingPriority, responseFormat = responseFormat)

        return request<Unit, GENERICRESPONSE>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation indexV1HistoricalDays
     *
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME (optional, default to arrayListOf())
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @return RequestConfig
     */
    fun indexV1HistoricalDaysRequestConfig(market: kotlin.String, instrument: kotlin.String, groups: kotlin.collections.List<kotlin.String>?, limit: kotlin.Int?, toTs: kotlin.Int?, aggregate: kotlin.Int?, fill: kotlin.Boolean?, mappingPriority: MappingPriority_indexV1HistoricalDays?, responseFormat: ResponseFormat_indexV1HistoricalDays?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("market", listOf(market.toString()))
                put("instrument", listOf(instrument.toString()))
                if (groups != null) {
                    put("groups", toMultiValue(groups.toList(), "csv"))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (toTs != null) {
                    put("to_ts", listOf(toTs.toString()))
                }
                if (aggregate != null) {
                    put("aggregate", listOf(aggregate.toString()))
                }
                if (fill != null) {
                    put("fill", listOf(fill.toString()))
                }
                if (mappingPriority != null) {
                    put("mapping_priority", listOf(mappingPriority.toString()))
                }
                if (responseFormat != null) {
                    put("response_format", listOf(responseFormat.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/index/v1/historical/days",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter mappingPriority
     */
     enum class MappingPriority_indexV1HistoricalHours(val value: kotlin.String) {
         @Json(name = "CHECK_MAPPED_FIRST") mAPPEDFIRST("CHECK_MAPPED_FIRST"),
         @Json(name = "CHECK_UNMAPPED_FIRST") uNMAPPEDFIRST("CHECK_UNMAPPED_FIRST")
     }

    /**
     * enum for parameter responseFormat
     */
     enum class ResponseFormat_indexV1HistoricalHours(val value: kotlin.String) {
         @Json(name = "JSON") jSON("JSON"),
         @Json(name = "CSV") cSV("CSV")
     }

    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME (optional, default to arrayListOf())
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @return GENERICRESPONSE
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun indexV1HistoricalHours(market: kotlin.String, instrument: kotlin.String, groups: kotlin.collections.List<kotlin.String>? = arrayListOf(), limit: kotlin.Int? = 30, toTs: kotlin.Int? = null, aggregate: kotlin.Int? = 1, fill: kotlin.Boolean? = true, mappingPriority: MappingPriority_indexV1HistoricalHours? = MappingPriority_indexV1HistoricalHours.mAPPEDFIRST, responseFormat: ResponseFormat_indexV1HistoricalHours? = ResponseFormat_indexV1HistoricalHours.jSON) : GENERICRESPONSE {
        val localVarResponse = indexV1HistoricalHoursWithHttpInfo(market = market, instrument = instrument, groups = groups, limit = limit, toTs = toTs, aggregate = aggregate, fill = fill, mappingPriority = mappingPriority, responseFormat = responseFormat)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GENERICRESPONSE
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME (optional, default to arrayListOf())
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @return ApiResponse<GENERICRESPONSE?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun indexV1HistoricalHoursWithHttpInfo(market: kotlin.String, instrument: kotlin.String, groups: kotlin.collections.List<kotlin.String>?, limit: kotlin.Int?, toTs: kotlin.Int?, aggregate: kotlin.Int?, fill: kotlin.Boolean?, mappingPriority: MappingPriority_indexV1HistoricalHours?, responseFormat: ResponseFormat_indexV1HistoricalHours?) : ApiResponse<GENERICRESPONSE?> {
        val localVariableConfig = indexV1HistoricalHoursRequestConfig(market = market, instrument = instrument, groups = groups, limit = limit, toTs = toTs, aggregate = aggregate, fill = fill, mappingPriority = mappingPriority, responseFormat = responseFormat)

        return request<Unit, GENERICRESPONSE>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation indexV1HistoricalHours
     *
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME (optional, default to arrayListOf())
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @return RequestConfig
     */
    fun indexV1HistoricalHoursRequestConfig(market: kotlin.String, instrument: kotlin.String, groups: kotlin.collections.List<kotlin.String>?, limit: kotlin.Int?, toTs: kotlin.Int?, aggregate: kotlin.Int?, fill: kotlin.Boolean?, mappingPriority: MappingPriority_indexV1HistoricalHours?, responseFormat: ResponseFormat_indexV1HistoricalHours?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("market", listOf(market.toString()))
                put("instrument", listOf(instrument.toString()))
                if (groups != null) {
                    put("groups", toMultiValue(groups.toList(), "csv"))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (toTs != null) {
                    put("to_ts", listOf(toTs.toString()))
                }
                if (aggregate != null) {
                    put("aggregate", listOf(aggregate.toString()))
                }
                if (fill != null) {
                    put("fill", listOf(fill.toString()))
                }
                if (mappingPriority != null) {
                    put("mapping_priority", listOf(mappingPriority.toString()))
                }
                if (responseFormat != null) {
                    put("response_format", listOf(responseFormat.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/index/v1/historical/hours",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter mappingPriority
     */
     enum class MappingPriority_indexV1HistoricalMessages(val value: kotlin.String) {
         @Json(name = "CHECK_MAPPED_FIRST") mAPPEDFIRST("CHECK_MAPPED_FIRST"),
         @Json(name = "CHECK_UNMAPPED_FIRST") uNMAPPEDFIRST("CHECK_UNMAPPED_FIRST")
     }

    /**
     * enum for parameter responseFormat
     */
     enum class ResponseFormat_indexV1HistoricalMessages(val value: kotlin.String) {
         @Json(name = "JSON") jSON("JSON"),
         @Json(name = "CSV") cSV("CSV")
     }

    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param afterTs Unix timestamp in seconds of the earliest index message in the response (optional)
     * @param lastCcseq The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request. (optional, default to 0)
     * @param limit The maximum number of index messages to return (optional, default to 100)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @param return404OnEmptyResponse If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)
     * @return GENERICRESPONSE
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun indexV1HistoricalMessages(market: kotlin.String, instrument: kotlin.String, afterTs: kotlin.Int? = null, lastCcseq: kotlin.Int? = 0, limit: kotlin.Int? = 100, mappingPriority: MappingPriority_indexV1HistoricalMessages? = MappingPriority_indexV1HistoricalMessages.mAPPEDFIRST, responseFormat: ResponseFormat_indexV1HistoricalMessages? = ResponseFormat_indexV1HistoricalMessages.jSON, return404OnEmptyResponse: kotlin.Boolean? = false) : GENERICRESPONSE {
        val localVarResponse = indexV1HistoricalMessagesWithHttpInfo(market = market, instrument = instrument, afterTs = afterTs, lastCcseq = lastCcseq, limit = limit, mappingPriority = mappingPriority, responseFormat = responseFormat, return404OnEmptyResponse = return404OnEmptyResponse)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GENERICRESPONSE
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param afterTs Unix timestamp in seconds of the earliest index message in the response (optional)
     * @param lastCcseq The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request. (optional, default to 0)
     * @param limit The maximum number of index messages to return (optional, default to 100)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @param return404OnEmptyResponse If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)
     * @return ApiResponse<GENERICRESPONSE?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun indexV1HistoricalMessagesWithHttpInfo(market: kotlin.String, instrument: kotlin.String, afterTs: kotlin.Int?, lastCcseq: kotlin.Int?, limit: kotlin.Int?, mappingPriority: MappingPriority_indexV1HistoricalMessages?, responseFormat: ResponseFormat_indexV1HistoricalMessages?, return404OnEmptyResponse: kotlin.Boolean?) : ApiResponse<GENERICRESPONSE?> {
        val localVariableConfig = indexV1HistoricalMessagesRequestConfig(market = market, instrument = instrument, afterTs = afterTs, lastCcseq = lastCcseq, limit = limit, mappingPriority = mappingPriority, responseFormat = responseFormat, return404OnEmptyResponse = return404OnEmptyResponse)

        return request<Unit, GENERICRESPONSE>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation indexV1HistoricalMessages
     *
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param afterTs Unix timestamp in seconds of the earliest index message in the response (optional)
     * @param lastCcseq The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request. (optional, default to 0)
     * @param limit The maximum number of index messages to return (optional, default to 100)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @param return404OnEmptyResponse If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)
     * @return RequestConfig
     */
    fun indexV1HistoricalMessagesRequestConfig(market: kotlin.String, instrument: kotlin.String, afterTs: kotlin.Int?, lastCcseq: kotlin.Int?, limit: kotlin.Int?, mappingPriority: MappingPriority_indexV1HistoricalMessages?, responseFormat: ResponseFormat_indexV1HistoricalMessages?, return404OnEmptyResponse: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("market", listOf(market.toString()))
                put("instrument", listOf(instrument.toString()))
                if (afterTs != null) {
                    put("after_ts", listOf(afterTs.toString()))
                }
                if (lastCcseq != null) {
                    put("last_ccseq", listOf(lastCcseq.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (mappingPriority != null) {
                    put("mapping_priority", listOf(mappingPriority.toString()))
                }
                if (responseFormat != null) {
                    put("response_format", listOf(responseFormat.toString()))
                }
                if (return404OnEmptyResponse != null) {
                    put("return_404_on_empty_response", listOf(return404OnEmptyResponse.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/index/v1/historical/messages",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter mappingPriority
     */
     enum class MappingPriority_indexV1HistoricalMessagesHour(val value: kotlin.String) {
         @Json(name = "CHECK_MAPPED_FIRST") mAPPEDFIRST("CHECK_MAPPED_FIRST"),
         @Json(name = "CHECK_UNMAPPED_FIRST") uNMAPPEDFIRST("CHECK_UNMAPPED_FIRST")
     }

    /**
     * enum for parameter responseFormat
     */
     enum class ResponseFormat_indexV1HistoricalMessagesHour(val value: kotlin.String) {
         @Json(name = "JSON") jSON("JSON"),
         @Json(name = "CSV") cSV("CSV")
     }

    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param hourTs Unix timestamp in seconds for the hour containing the index updates you are interested in. You can pass any timestamp in the hour but we will round it down the the full hour timestmap and return all index updates in that hour. (optional)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @param return404OnEmptyResponse If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)
     * @return GENERICRESPONSE
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun indexV1HistoricalMessagesHour(market: kotlin.String, instrument: kotlin.String, hourTs: kotlin.Int? = null, mappingPriority: MappingPriority_indexV1HistoricalMessagesHour? = MappingPriority_indexV1HistoricalMessagesHour.mAPPEDFIRST, responseFormat: ResponseFormat_indexV1HistoricalMessagesHour? = ResponseFormat_indexV1HistoricalMessagesHour.jSON, return404OnEmptyResponse: kotlin.Boolean? = false) : GENERICRESPONSE {
        val localVarResponse = indexV1HistoricalMessagesHourWithHttpInfo(market = market, instrument = instrument, hourTs = hourTs, mappingPriority = mappingPriority, responseFormat = responseFormat, return404OnEmptyResponse = return404OnEmptyResponse)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GENERICRESPONSE
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param hourTs Unix timestamp in seconds for the hour containing the index updates you are interested in. You can pass any timestamp in the hour but we will round it down the the full hour timestmap and return all index updates in that hour. (optional)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @param return404OnEmptyResponse If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)
     * @return ApiResponse<GENERICRESPONSE?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun indexV1HistoricalMessagesHourWithHttpInfo(market: kotlin.String, instrument: kotlin.String, hourTs: kotlin.Int?, mappingPriority: MappingPriority_indexV1HistoricalMessagesHour?, responseFormat: ResponseFormat_indexV1HistoricalMessagesHour?, return404OnEmptyResponse: kotlin.Boolean?) : ApiResponse<GENERICRESPONSE?> {
        val localVariableConfig = indexV1HistoricalMessagesHourRequestConfig(market = market, instrument = instrument, hourTs = hourTs, mappingPriority = mappingPriority, responseFormat = responseFormat, return404OnEmptyResponse = return404OnEmptyResponse)

        return request<Unit, GENERICRESPONSE>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation indexV1HistoricalMessagesHour
     *
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param hourTs Unix timestamp in seconds for the hour containing the index updates you are interested in. You can pass any timestamp in the hour but we will round it down the the full hour timestmap and return all index updates in that hour. (optional)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @param return404OnEmptyResponse If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)
     * @return RequestConfig
     */
    fun indexV1HistoricalMessagesHourRequestConfig(market: kotlin.String, instrument: kotlin.String, hourTs: kotlin.Int?, mappingPriority: MappingPriority_indexV1HistoricalMessagesHour?, responseFormat: ResponseFormat_indexV1HistoricalMessagesHour?, return404OnEmptyResponse: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("market", listOf(market.toString()))
                put("instrument", listOf(instrument.toString()))
                if (hourTs != null) {
                    put("hour_ts", listOf(hourTs.toString()))
                }
                if (mappingPriority != null) {
                    put("mapping_priority", listOf(mappingPriority.toString()))
                }
                if (responseFormat != null) {
                    put("response_format", listOf(responseFormat.toString()))
                }
                if (return404OnEmptyResponse != null) {
                    put("return_404_on_empty_response", listOf(return404OnEmptyResponse.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/index/v1/historical/messages/hour",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter mappingPriority
     */
     enum class MappingPriority_indexV1HistoricalMinutes(val value: kotlin.String) {
         @Json(name = "CHECK_MAPPED_FIRST") mAPPEDFIRST("CHECK_MAPPED_FIRST"),
         @Json(name = "CHECK_UNMAPPED_FIRST") uNMAPPEDFIRST("CHECK_UNMAPPED_FIRST")
     }

    /**
     * enum for parameter responseFormat
     */
     enum class ResponseFormat_indexV1HistoricalMinutes(val value: kotlin.String) {
         @Json(name = "JSON") jSON("JSON"),
         @Json(name = "CSV") cSV("CSV")
     }

    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME (optional, default to arrayListOf())
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @return GENERICRESPONSE
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun indexV1HistoricalMinutes(market: kotlin.String, instrument: kotlin.String, groups: kotlin.collections.List<kotlin.String>? = arrayListOf(), limit: kotlin.Int? = 30, toTs: kotlin.Int? = null, aggregate: kotlin.Int? = 1, fill: kotlin.Boolean? = true, mappingPriority: MappingPriority_indexV1HistoricalMinutes? = MappingPriority_indexV1HistoricalMinutes.mAPPEDFIRST, responseFormat: ResponseFormat_indexV1HistoricalMinutes? = ResponseFormat_indexV1HistoricalMinutes.jSON) : GENERICRESPONSE {
        val localVarResponse = indexV1HistoricalMinutesWithHttpInfo(market = market, instrument = instrument, groups = groups, limit = limit, toTs = toTs, aggregate = aggregate, fill = fill, mappingPriority = mappingPriority, responseFormat = responseFormat)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GENERICRESPONSE
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME (optional, default to arrayListOf())
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @return ApiResponse<GENERICRESPONSE?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun indexV1HistoricalMinutesWithHttpInfo(market: kotlin.String, instrument: kotlin.String, groups: kotlin.collections.List<kotlin.String>?, limit: kotlin.Int?, toTs: kotlin.Int?, aggregate: kotlin.Int?, fill: kotlin.Boolean?, mappingPriority: MappingPriority_indexV1HistoricalMinutes?, responseFormat: ResponseFormat_indexV1HistoricalMinutes?) : ApiResponse<GENERICRESPONSE?> {
        val localVariableConfig = indexV1HistoricalMinutesRequestConfig(market = market, instrument = instrument, groups = groups, limit = limit, toTs = toTs, aggregate = aggregate, fill = fill, mappingPriority = mappingPriority, responseFormat = responseFormat)

        return request<Unit, GENERICRESPONSE>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation indexV1HistoricalMinutes
     *
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME (optional, default to arrayListOf())
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @return RequestConfig
     */
    fun indexV1HistoricalMinutesRequestConfig(market: kotlin.String, instrument: kotlin.String, groups: kotlin.collections.List<kotlin.String>?, limit: kotlin.Int?, toTs: kotlin.Int?, aggregate: kotlin.Int?, fill: kotlin.Boolean?, mappingPriority: MappingPriority_indexV1HistoricalMinutes?, responseFormat: ResponseFormat_indexV1HistoricalMinutes?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("market", listOf(market.toString()))
                put("instrument", listOf(instrument.toString()))
                if (groups != null) {
                    put("groups", toMultiValue(groups.toList(), "csv"))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (toTs != null) {
                    put("to_ts", listOf(toTs.toString()))
                }
                if (aggregate != null) {
                    put("aggregate", listOf(aggregate.toString()))
                }
                if (fill != null) {
                    put("fill", listOf(fill.toString()))
                }
                if (mappingPriority != null) {
                    put("mapping_priority", listOf(mappingPriority.toString()))
                }
                if (responseFormat != null) {
                    put("response_format", listOf(responseFormat.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/index/v1/historical/minutes",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter mappingPriority
     */
     enum class MappingPriority_indexV1LatestInstrumentMetadata(val value: kotlin.String) {
         @Json(name = "CHECK_MAPPED_FIRST") mAPPEDFIRST("CHECK_MAPPED_FIRST"),
         @Json(name = "CHECK_UNMAPPED_FIRST") uNMAPPEDFIRST("CHECK_UNMAPPED_FIRST")
     }

    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instruments A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting metadata entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: STATUS,INTERNAL,GENERAL,MIGRATION,SOURCE (optional, default to arrayListOf())
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @return GENERICRESPONSE
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun indexV1LatestInstrumentMetadata(market: kotlin.String, instruments: kotlin.collections.List<kotlin.String>, groups: kotlin.collections.List<kotlin.String>? = arrayListOf(), mappingPriority: MappingPriority_indexV1LatestInstrumentMetadata? = MappingPriority_indexV1LatestInstrumentMetadata.mAPPEDFIRST) : GENERICRESPONSE {
        val localVarResponse = indexV1LatestInstrumentMetadataWithHttpInfo(market = market, instruments = instruments, groups = groups, mappingPriority = mappingPriority)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GENERICRESPONSE
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instruments A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting metadata entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: STATUS,INTERNAL,GENERAL,MIGRATION,SOURCE (optional, default to arrayListOf())
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @return ApiResponse<GENERICRESPONSE?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun indexV1LatestInstrumentMetadataWithHttpInfo(market: kotlin.String, instruments: kotlin.collections.List<kotlin.String>, groups: kotlin.collections.List<kotlin.String>?, mappingPriority: MappingPriority_indexV1LatestInstrumentMetadata?) : ApiResponse<GENERICRESPONSE?> {
        val localVariableConfig = indexV1LatestInstrumentMetadataRequestConfig(market = market, instruments = instruments, groups = groups, mappingPriority = mappingPriority)

        return request<Unit, GENERICRESPONSE>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation indexV1LatestInstrumentMetadata
     *
     * @param market The exchange to obtain data from
     * @param instruments A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting metadata entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: STATUS,INTERNAL,GENERAL,MIGRATION,SOURCE (optional, default to arrayListOf())
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @return RequestConfig
     */
    fun indexV1LatestInstrumentMetadataRequestConfig(market: kotlin.String, instruments: kotlin.collections.List<kotlin.String>, groups: kotlin.collections.List<kotlin.String>?, mappingPriority: MappingPriority_indexV1LatestInstrumentMetadata?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("market", listOf(market.toString()))
                put("instruments", toMultiValue(instruments.toList(), "csv"))
                if (groups != null) {
                    put("groups", toMultiValue(groups.toList(), "csv"))
                }
                if (mappingPriority != null) {
                    put("mapping_priority", listOf(mappingPriority.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/index/v1/latest/instrument/metadata",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter mappingPriority
     */
     enum class MappingPriority_indexV1LatestTick(val value: kotlin.String) {
         @Json(name = "CHECK_MAPPED_FIRST") mAPPEDFIRST("CHECK_MAPPED_FIRST"),
         @Json(name = "CHECK_UNMAPPED_FIRST") uNMAPPEDFIRST("CHECK_UNMAPPED_FIRST")
     }

    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instruments A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME (optional, default to arrayListOf())
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @return GENERICRESPONSE
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun indexV1LatestTick(market: kotlin.String, instruments: kotlin.collections.List<kotlin.String>, groups: kotlin.collections.List<kotlin.String>? = arrayListOf(), mappingPriority: MappingPriority_indexV1LatestTick? = MappingPriority_indexV1LatestTick.mAPPEDFIRST) : GENERICRESPONSE {
        val localVarResponse = indexV1LatestTickWithHttpInfo(market = market, instruments = instruments, groups = groups, mappingPriority = mappingPriority)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GENERICRESPONSE
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instruments A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME (optional, default to arrayListOf())
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @return ApiResponse<GENERICRESPONSE?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun indexV1LatestTickWithHttpInfo(market: kotlin.String, instruments: kotlin.collections.List<kotlin.String>, groups: kotlin.collections.List<kotlin.String>?, mappingPriority: MappingPriority_indexV1LatestTick?) : ApiResponse<GENERICRESPONSE?> {
        val localVariableConfig = indexV1LatestTickRequestConfig(market = market, instruments = instruments, groups = groups, mappingPriority = mappingPriority)

        return request<Unit, GENERICRESPONSE>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation indexV1LatestTick
     *
     * @param market The exchange to obtain data from
     * @param instruments A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME (optional, default to arrayListOf())
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @return RequestConfig
     */
    fun indexV1LatestTickRequestConfig(market: kotlin.String, instruments: kotlin.collections.List<kotlin.String>, groups: kotlin.collections.List<kotlin.String>?, mappingPriority: MappingPriority_indexV1LatestTick?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("market", listOf(market.toString()))
                put("instruments", toMultiValue(instruments.toList(), "csv"))
                if (groups != null) {
                    put("groups", toMultiValue(groups.toList(), "csv"))
                }
                if (mappingPriority != null) {
                    put("mapping_priority", listOf(mappingPriority.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/index/v1/latest/tick",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param market The exchange to obtain data from (optional, default to "")
     * @return GENERICRESPONSE
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun indexV1Markets(market: kotlin.String? = "") : GENERICRESPONSE {
        val localVarResponse = indexV1MarketsWithHttpInfo(market = market)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GENERICRESPONSE
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param market The exchange to obtain data from (optional, default to "")
     * @return ApiResponse<GENERICRESPONSE?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun indexV1MarketsWithHttpInfo(market: kotlin.String?) : ApiResponse<GENERICRESPONSE?> {
        val localVariableConfig = indexV1MarketsRequestConfig(market = market)

        return request<Unit, GENERICRESPONSE>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation indexV1Markets
     *
     * @param market The exchange to obtain data from (optional, default to "")
     * @return RequestConfig
     */
    fun indexV1MarketsRequestConfig(market: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (market != null) {
                    put("market", listOf(market.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/index/v1/markets",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter instrumentStatus
     */
     enum class InstrumentStatus_indexV1MarketsInstruments(val value: kotlin.String) {
         @Json(name = "ACTIVE") aCTIVE("ACTIVE"),
         @Json(name = "IGNORED") iGNORED("IGNORED"),
         @Json(name = "RETIRED") rETIRED("RETIRED"),
         @Json(name = "EXPIRED") eXPIRED("EXPIRED")
     }

    /**
     * 
     * 
     * @param market The exchange to obtain data from (optional, default to "")
     * @param instrument The mapped instrument to retrieve on a specific market. (optional, default to "")
     * @param instrumentStatus The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED (optional, default to arrayListOf())
     * @return GENERICRESPONSE
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun indexV1MarketsInstruments(market: kotlin.String? = "", instrument: kotlin.String? = "", instrumentStatus: kotlin.collections.List<InstrumentStatus_indexV1MarketsInstruments>? = InstrumentStatus_indexV1MarketsInstruments.arrayListOf()) : GENERICRESPONSE {
        val localVarResponse = indexV1MarketsInstrumentsWithHttpInfo(market = market, instrument = instrument, instrumentStatus = instrumentStatus)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GENERICRESPONSE
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param market The exchange to obtain data from (optional, default to "")
     * @param instrument The mapped instrument to retrieve on a specific market. (optional, default to "")
     * @param instrumentStatus The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED (optional, default to arrayListOf())
     * @return ApiResponse<GENERICRESPONSE?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun indexV1MarketsInstrumentsWithHttpInfo(market: kotlin.String?, instrument: kotlin.String?, instrumentStatus: kotlin.collections.List<InstrumentStatus_indexV1MarketsInstruments>?) : ApiResponse<GENERICRESPONSE?> {
        val localVariableConfig = indexV1MarketsInstrumentsRequestConfig(market = market, instrument = instrument, instrumentStatus = instrumentStatus)

        return request<Unit, GENERICRESPONSE>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation indexV1MarketsInstruments
     *
     * @param market The exchange to obtain data from (optional, default to "")
     * @param instrument The mapped instrument to retrieve on a specific market. (optional, default to "")
     * @param instrumentStatus The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED (optional, default to arrayListOf())
     * @return RequestConfig
     */
    fun indexV1MarketsInstrumentsRequestConfig(market: kotlin.String?, instrument: kotlin.String?, instrumentStatus: kotlin.collections.List<InstrumentStatus_indexV1MarketsInstruments>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (market != null) {
                    put("market", listOf(market.toString()))
                }
                if (instrument != null) {
                    put("instrument", listOf(instrument.toString()))
                }
                if (instrumentStatus != null) {
                    put("instrument_status", toMultiValue(instrumentStatus.toList(), "csv"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/index/v1/markets/instruments",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter instrumentStatus
     */
     enum class InstrumentStatus_indexV1MarketsInstrumentsUnmapped(val value: kotlin.String) {
         @Json(name = "ACTIVE") aCTIVE("ACTIVE"),
         @Json(name = "IGNORED") iGNORED("IGNORED"),
         @Json(name = "RETIRED") rETIRED("RETIRED"),
         @Json(name = "EXPIRED") eXPIRED("EXPIRED")
     }

    /**
     * 
     * 
     * @param market The exchange to obtain data from (optional, default to "")
     * @param instrument The unmapped instrument to retrieve on a specific market. (optional, default to "")
     * @param instrumentStatus The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED (optional, default to arrayListOf())
     * @return GENERICRESPONSE
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun indexV1MarketsInstrumentsUnmapped(market: kotlin.String? = "", instrument: kotlin.String? = "", instrumentStatus: kotlin.collections.List<InstrumentStatus_indexV1MarketsInstrumentsUnmapped>? = InstrumentStatus_indexV1MarketsInstrumentsUnmapped.arrayListOf()) : GENERICRESPONSE {
        val localVarResponse = indexV1MarketsInstrumentsUnmappedWithHttpInfo(market = market, instrument = instrument, instrumentStatus = instrumentStatus)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GENERICRESPONSE
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param market The exchange to obtain data from (optional, default to "")
     * @param instrument The unmapped instrument to retrieve on a specific market. (optional, default to "")
     * @param instrumentStatus The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED (optional, default to arrayListOf())
     * @return ApiResponse<GENERICRESPONSE?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun indexV1MarketsInstrumentsUnmappedWithHttpInfo(market: kotlin.String?, instrument: kotlin.String?, instrumentStatus: kotlin.collections.List<InstrumentStatus_indexV1MarketsInstrumentsUnmapped>?) : ApiResponse<GENERICRESPONSE?> {
        val localVariableConfig = indexV1MarketsInstrumentsUnmappedRequestConfig(market = market, instrument = instrument, instrumentStatus = instrumentStatus)

        return request<Unit, GENERICRESPONSE>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation indexV1MarketsInstrumentsUnmapped
     *
     * @param market The exchange to obtain data from (optional, default to "")
     * @param instrument The unmapped instrument to retrieve on a specific market. (optional, default to "")
     * @param instrumentStatus The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED (optional, default to arrayListOf())
     * @return RequestConfig
     */
    fun indexV1MarketsInstrumentsUnmappedRequestConfig(market: kotlin.String?, instrument: kotlin.String?, instrumentStatus: kotlin.collections.List<InstrumentStatus_indexV1MarketsInstrumentsUnmapped>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (market != null) {
                    put("market", listOf(market.toString()))
                }
                if (instrument != null) {
                    put("instrument", listOf(instrument.toString()))
                }
                if (instrumentStatus != null) {
                    put("instrument_status", toMultiValue(instrumentStatus.toList(), "csv"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/index/v1/markets/instruments/unmapped",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
