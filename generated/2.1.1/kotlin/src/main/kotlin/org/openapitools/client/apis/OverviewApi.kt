/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import org.openapitools.client.models.Error
import org.openapitools.client.models.GENERICRESPONSE

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class OverviewApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://data-api.cryptocompare.com")
        }
    }

    /**
     * enum for parameter responseFormat
     */
     enum class ResponseFormat_overviewV1HistoricalMarketcapAllAssetsDays(val value: kotlin.String) {
         @Json(name = "JSON") jSON("JSON"),
         @Json(name = "CSV") cSV("CSV")
     }

    /**
     * 
     * 
     * @param groups When requesting all market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME (optional, default to arrayListOf())
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @return GENERICRESPONSE
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun overviewV1HistoricalMarketcapAllAssetsDays(groups: kotlin.collections.List<kotlin.String>? = arrayListOf(), limit: kotlin.Int? = 30, toTs: kotlin.Int? = null, aggregate: kotlin.Int? = 1, fill: kotlin.Boolean? = true, responseFormat: ResponseFormat_overviewV1HistoricalMarketcapAllAssetsDays? = ResponseFormat_overviewV1HistoricalMarketcapAllAssetsDays.jSON) : GENERICRESPONSE {
        val localVarResponse = overviewV1HistoricalMarketcapAllAssetsDaysWithHttpInfo(groups = groups, limit = limit, toTs = toTs, aggregate = aggregate, fill = fill, responseFormat = responseFormat)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GENERICRESPONSE
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param groups When requesting all market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME (optional, default to arrayListOf())
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @return ApiResponse<GENERICRESPONSE?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun overviewV1HistoricalMarketcapAllAssetsDaysWithHttpInfo(groups: kotlin.collections.List<kotlin.String>?, limit: kotlin.Int?, toTs: kotlin.Int?, aggregate: kotlin.Int?, fill: kotlin.Boolean?, responseFormat: ResponseFormat_overviewV1HistoricalMarketcapAllAssetsDays?) : ApiResponse<GENERICRESPONSE?> {
        val localVariableConfig = overviewV1HistoricalMarketcapAllAssetsDaysRequestConfig(groups = groups, limit = limit, toTs = toTs, aggregate = aggregate, fill = fill, responseFormat = responseFormat)

        return request<Unit, GENERICRESPONSE>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation overviewV1HistoricalMarketcapAllAssetsDays
     *
     * @param groups When requesting all market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME (optional, default to arrayListOf())
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @return RequestConfig
     */
    fun overviewV1HistoricalMarketcapAllAssetsDaysRequestConfig(groups: kotlin.collections.List<kotlin.String>?, limit: kotlin.Int?, toTs: kotlin.Int?, aggregate: kotlin.Int?, fill: kotlin.Boolean?, responseFormat: ResponseFormat_overviewV1HistoricalMarketcapAllAssetsDays?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (groups != null) {
                    put("groups", toMultiValue(groups.toList(), "csv"))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (toTs != null) {
                    put("to_ts", listOf(toTs.toString()))
                }
                if (aggregate != null) {
                    put("aggregate", listOf(aggregate.toString()))
                }
                if (fill != null) {
                    put("fill", listOf(fill.toString()))
                }
                if (responseFormat != null) {
                    put("response_format", listOf(responseFormat.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/overview/v1/historical/marketcap/all/assets/days",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter responseFormat
     */
     enum class ResponseFormat_overviewV1HistoricalMarketcapAllAssetsHours(val value: kotlin.String) {
         @Json(name = "JSON") jSON("JSON"),
         @Json(name = "CSV") cSV("CSV")
     }

    /**
     * 
     * 
     * @param groups When requesting all market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME (optional, default to arrayListOf())
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @return GENERICRESPONSE
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun overviewV1HistoricalMarketcapAllAssetsHours(groups: kotlin.collections.List<kotlin.String>? = arrayListOf(), limit: kotlin.Int? = 30, toTs: kotlin.Int? = null, aggregate: kotlin.Int? = 1, fill: kotlin.Boolean? = true, responseFormat: ResponseFormat_overviewV1HistoricalMarketcapAllAssetsHours? = ResponseFormat_overviewV1HistoricalMarketcapAllAssetsHours.jSON) : GENERICRESPONSE {
        val localVarResponse = overviewV1HistoricalMarketcapAllAssetsHoursWithHttpInfo(groups = groups, limit = limit, toTs = toTs, aggregate = aggregate, fill = fill, responseFormat = responseFormat)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GENERICRESPONSE
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param groups When requesting all market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME (optional, default to arrayListOf())
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @return ApiResponse<GENERICRESPONSE?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun overviewV1HistoricalMarketcapAllAssetsHoursWithHttpInfo(groups: kotlin.collections.List<kotlin.String>?, limit: kotlin.Int?, toTs: kotlin.Int?, aggregate: kotlin.Int?, fill: kotlin.Boolean?, responseFormat: ResponseFormat_overviewV1HistoricalMarketcapAllAssetsHours?) : ApiResponse<GENERICRESPONSE?> {
        val localVariableConfig = overviewV1HistoricalMarketcapAllAssetsHoursRequestConfig(groups = groups, limit = limit, toTs = toTs, aggregate = aggregate, fill = fill, responseFormat = responseFormat)

        return request<Unit, GENERICRESPONSE>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation overviewV1HistoricalMarketcapAllAssetsHours
     *
     * @param groups When requesting all market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME (optional, default to arrayListOf())
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @return RequestConfig
     */
    fun overviewV1HistoricalMarketcapAllAssetsHoursRequestConfig(groups: kotlin.collections.List<kotlin.String>?, limit: kotlin.Int?, toTs: kotlin.Int?, aggregate: kotlin.Int?, fill: kotlin.Boolean?, responseFormat: ResponseFormat_overviewV1HistoricalMarketcapAllAssetsHours?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (groups != null) {
                    put("groups", toMultiValue(groups.toList(), "csv"))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (toTs != null) {
                    put("to_ts", listOf(toTs.toString()))
                }
                if (aggregate != null) {
                    put("aggregate", listOf(aggregate.toString()))
                }
                if (fill != null) {
                    put("fill", listOf(fill.toString()))
                }
                if (responseFormat != null) {
                    put("response_format", listOf(responseFormat.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/overview/v1/historical/marketcap/all/assets/hours",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter responseFormat
     */
     enum class ResponseFormat_overviewV1HistoricalMarketcapFtwAssetsDays(val value: kotlin.String) {
         @Json(name = "JSON") jSON("JSON"),
         @Json(name = "CSV") cSV("CSV")
     }

    /**
     * 
     * 
     * @param groups When requesting ftw universe market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME (optional, default to arrayListOf())
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @return GENERICRESPONSE
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun overviewV1HistoricalMarketcapFtwAssetsDays(groups: kotlin.collections.List<kotlin.String>? = arrayListOf(), limit: kotlin.Int? = 30, toTs: kotlin.Int? = null, aggregate: kotlin.Int? = 1, fill: kotlin.Boolean? = true, responseFormat: ResponseFormat_overviewV1HistoricalMarketcapFtwAssetsDays? = ResponseFormat_overviewV1HistoricalMarketcapFtwAssetsDays.jSON) : GENERICRESPONSE {
        val localVarResponse = overviewV1HistoricalMarketcapFtwAssetsDaysWithHttpInfo(groups = groups, limit = limit, toTs = toTs, aggregate = aggregate, fill = fill, responseFormat = responseFormat)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GENERICRESPONSE
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param groups When requesting ftw universe market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME (optional, default to arrayListOf())
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @return ApiResponse<GENERICRESPONSE?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun overviewV1HistoricalMarketcapFtwAssetsDaysWithHttpInfo(groups: kotlin.collections.List<kotlin.String>?, limit: kotlin.Int?, toTs: kotlin.Int?, aggregate: kotlin.Int?, fill: kotlin.Boolean?, responseFormat: ResponseFormat_overviewV1HistoricalMarketcapFtwAssetsDays?) : ApiResponse<GENERICRESPONSE?> {
        val localVariableConfig = overviewV1HistoricalMarketcapFtwAssetsDaysRequestConfig(groups = groups, limit = limit, toTs = toTs, aggregate = aggregate, fill = fill, responseFormat = responseFormat)

        return request<Unit, GENERICRESPONSE>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation overviewV1HistoricalMarketcapFtwAssetsDays
     *
     * @param groups When requesting ftw universe market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME (optional, default to arrayListOf())
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @return RequestConfig
     */
    fun overviewV1HistoricalMarketcapFtwAssetsDaysRequestConfig(groups: kotlin.collections.List<kotlin.String>?, limit: kotlin.Int?, toTs: kotlin.Int?, aggregate: kotlin.Int?, fill: kotlin.Boolean?, responseFormat: ResponseFormat_overviewV1HistoricalMarketcapFtwAssetsDays?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (groups != null) {
                    put("groups", toMultiValue(groups.toList(), "csv"))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (toTs != null) {
                    put("to_ts", listOf(toTs.toString()))
                }
                if (aggregate != null) {
                    put("aggregate", listOf(aggregate.toString()))
                }
                if (fill != null) {
                    put("fill", listOf(fill.toString()))
                }
                if (responseFormat != null) {
                    put("response_format", listOf(responseFormat.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/overview/v1/historical/marketcap/ftw/assets/days",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter responseFormat
     */
     enum class ResponseFormat_overviewV1HistoricalMarketcapFtwAssetsHours(val value: kotlin.String) {
         @Json(name = "JSON") jSON("JSON"),
         @Json(name = "CSV") cSV("CSV")
     }

    /**
     * 
     * 
     * @param groups When requesting ftw universe market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME (optional, default to arrayListOf())
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @return GENERICRESPONSE
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun overviewV1HistoricalMarketcapFtwAssetsHours(groups: kotlin.collections.List<kotlin.String>? = arrayListOf(), limit: kotlin.Int? = 30, toTs: kotlin.Int? = null, aggregate: kotlin.Int? = 1, fill: kotlin.Boolean? = true, responseFormat: ResponseFormat_overviewV1HistoricalMarketcapFtwAssetsHours? = ResponseFormat_overviewV1HistoricalMarketcapFtwAssetsHours.jSON) : GENERICRESPONSE {
        val localVarResponse = overviewV1HistoricalMarketcapFtwAssetsHoursWithHttpInfo(groups = groups, limit = limit, toTs = toTs, aggregate = aggregate, fill = fill, responseFormat = responseFormat)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GENERICRESPONSE
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param groups When requesting ftw universe market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME (optional, default to arrayListOf())
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @return ApiResponse<GENERICRESPONSE?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun overviewV1HistoricalMarketcapFtwAssetsHoursWithHttpInfo(groups: kotlin.collections.List<kotlin.String>?, limit: kotlin.Int?, toTs: kotlin.Int?, aggregate: kotlin.Int?, fill: kotlin.Boolean?, responseFormat: ResponseFormat_overviewV1HistoricalMarketcapFtwAssetsHours?) : ApiResponse<GENERICRESPONSE?> {
        val localVariableConfig = overviewV1HistoricalMarketcapFtwAssetsHoursRequestConfig(groups = groups, limit = limit, toTs = toTs, aggregate = aggregate, fill = fill, responseFormat = responseFormat)

        return request<Unit, GENERICRESPONSE>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation overviewV1HistoricalMarketcapFtwAssetsHours
     *
     * @param groups When requesting ftw universe market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME (optional, default to arrayListOf())
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @return RequestConfig
     */
    fun overviewV1HistoricalMarketcapFtwAssetsHoursRequestConfig(groups: kotlin.collections.List<kotlin.String>?, limit: kotlin.Int?, toTs: kotlin.Int?, aggregate: kotlin.Int?, fill: kotlin.Boolean?, responseFormat: ResponseFormat_overviewV1HistoricalMarketcapFtwAssetsHours?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (groups != null) {
                    put("groups", toMultiValue(groups.toList(), "csv"))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (toTs != null) {
                    put("to_ts", listOf(toTs.toString()))
                }
                if (aggregate != null) {
                    put("aggregate", listOf(aggregate.toString()))
                }
                if (fill != null) {
                    put("fill", listOf(fill.toString()))
                }
                if (responseFormat != null) {
                    put("response_format", listOf(responseFormat.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/overview/v1/historical/marketcap/ftw/assets/hours",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param groups When requesting all market cap tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,MOVING_24_HOUR (optional, default to arrayListOf())
     * @return GENERICRESPONSE
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun overviewV1LatestMarketcapAllTick(groups: kotlin.collections.List<kotlin.String>? = arrayListOf()) : GENERICRESPONSE {
        val localVarResponse = overviewV1LatestMarketcapAllTickWithHttpInfo(groups = groups)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GENERICRESPONSE
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param groups When requesting all market cap tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,MOVING_24_HOUR (optional, default to arrayListOf())
     * @return ApiResponse<GENERICRESPONSE?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun overviewV1LatestMarketcapAllTickWithHttpInfo(groups: kotlin.collections.List<kotlin.String>?) : ApiResponse<GENERICRESPONSE?> {
        val localVariableConfig = overviewV1LatestMarketcapAllTickRequestConfig(groups = groups)

        return request<Unit, GENERICRESPONSE>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation overviewV1LatestMarketcapAllTick
     *
     * @param groups When requesting all market cap tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,MOVING_24_HOUR (optional, default to arrayListOf())
     * @return RequestConfig
     */
    fun overviewV1LatestMarketcapAllTickRequestConfig(groups: kotlin.collections.List<kotlin.String>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (groups != null) {
                    put("groups", toMultiValue(groups.toList(), "csv"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/overview/v1/latest/marketcap/all/tick",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param groups When requesting ftw universe market cap tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,MOVING_24_HOUR (optional, default to arrayListOf())
     * @return GENERICRESPONSE
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun overviewV1LatestMarketcapFtwTick(groups: kotlin.collections.List<kotlin.String>? = arrayListOf()) : GENERICRESPONSE {
        val localVarResponse = overviewV1LatestMarketcapFtwTickWithHttpInfo(groups = groups)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GENERICRESPONSE
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param groups When requesting ftw universe market cap tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,MOVING_24_HOUR (optional, default to arrayListOf())
     * @return ApiResponse<GENERICRESPONSE?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun overviewV1LatestMarketcapFtwTickWithHttpInfo(groups: kotlin.collections.List<kotlin.String>?) : ApiResponse<GENERICRESPONSE?> {
        val localVariableConfig = overviewV1LatestMarketcapFtwTickRequestConfig(groups = groups)

        return request<Unit, GENERICRESPONSE>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation overviewV1LatestMarketcapFtwTick
     *
     * @param groups When requesting ftw universe market cap tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,MOVING_24_HOUR (optional, default to arrayListOf())
     * @return RequestConfig
     */
    fun overviewV1LatestMarketcapFtwTickRequestConfig(groups: kotlin.collections.List<kotlin.String>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (groups != null) {
                    put("groups", toMultiValue(groups.toList(), "csv"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/overview/v1/latest/marketcap/ftw/tick",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
