/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import org.openapitools.client.models.Error
import org.openapitools.client.models.GENERICRESPONSE

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class NewsApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://data-api.cryptocompare.com")
        }
    }

    /**
     * enum for parameter lang
     */
     enum class Lang_newsV1ArticleList(val value: kotlin.String) {
         @Json(name = "EN") eN("EN"),
         @Json(name = "ES") eS("ES"),
         @Json(name = "PT") pT("PT"),
         @Json(name = "") eMPTY("")
     }

    /**
     * enum for parameter categories
     */
     enum class Categories_newsV1ArticleList(val value: kotlin.String) {
         @Json(name = "1INCH") _1iNCH("1INCH"),
         @Json(name = "AAVE") aAVE("AAVE"),
         @Json(name = "ADA") aDA("ADA"),
         @Json(name = "ALGO") aLGO("ALGO"),
         @Json(name = "ALTCOIN") aLTCOIN("ALTCOIN"),
         @Json(name = "ASIA") aSIA("ASIA"),
         @Json(name = "ATOM") aTOM("ATOM"),
         @Json(name = "AVAX") aVAX("AVAX"),
         @Json(name = "AXS") aXS("AXS"),
         @Json(name = "BAL") bAL("BAL"),
         @Json(name = "BAT") bAT("BAT"),
         @Json(name = "BCH") bCH("BCH"),
         @Json(name = "BLOCKCHAIN") bLOCKCHAIN("BLOCKCHAIN"),
         @Json(name = "BTC") bTC("BTC"),
         @Json(name = "BUSINESS") bUSINESS("BUSINESS"),
         @Json(name = "COMMODITY") cOMMODITY("COMMODITY"),
         @Json(name = "COMP") cOMP("COMP"),
         @Json(name = "CRV") cRV("CRV"),
         @Json(name = "DASH") dASH("DASH"),
         @Json(name = "DOGE") dOGE("DOGE"),
         @Json(name = "DOT") dOT("DOT"),
         @Json(name = "ENJ") eNJ("ENJ"),
         @Json(name = "ETC") eTC("ETC"),
         @Json(name = "ETH") eTH("ETH"),
         @Json(name = "EXCHANGE") eXCHANGE("EXCHANGE"),
         @Json(name = "FIAT") fIAT("FIAT"),
         @Json(name = "FIL") fIL("FIL"),
         @Json(name = "FTM") fTM("FTM"),
         @Json(name = "ICO") iCO("ICO"),
         @Json(name = "KNC") kNC("KNC"),
         @Json(name = "LINK") lINK("LINK"),
         @Json(name = "LRC") lRC("LRC"),
         @Json(name = "LTC") lTC("LTC"),
         @Json(name = "LUNA") lUNA("LUNA"),
         @Json(name = "LUNC") lUNC("LUNC"),
         @Json(name = "MANA") mANA("MANA"),
         @Json(name = "MARKET") mARKET("MARKET"),
         @Json(name = "MATIC") mATIC("MATIC"),
         @Json(name = "MINING") mINING("MINING"),
         @Json(name = "MKR") mKR("MKR"),
         @Json(name = "REGULATION") rEGULATION("REGULATION"),
         @Json(name = "REN") rEN("REN"),
         @Json(name = "SAND") sAND("SAND"),
         @Json(name = "SHIB") sHIB("SHIB"),
         @Json(name = "SNX") sNX("SNX"),
         @Json(name = "SOL") sOL("SOL"),
         @Json(name = "SPONSORED") sPONSORED("SPONSORED"),
         @Json(name = "SUSHI") sUSHI("SUSHI"),
         @Json(name = "TECHNOLOGY") tECHNOLOGY("TECHNOLOGY"),
         @Json(name = "TRADING") tRADING("TRADING"),
         @Json(name = "TRX") tRX("TRX"),
         @Json(name = "UMA") uMA("UMA"),
         @Json(name = "UNI") uNI("UNI"),
         @Json(name = "USDT") uSDT("USDT"),
         @Json(name = "WALLET") wALLET("WALLET"),
         @Json(name = "XLM") xLM("XLM"),
         @Json(name = "XMR") xMR("XMR"),
         @Json(name = "XRP") xRP("XRP"),
         @Json(name = "XTZ") xTZ("XTZ"),
         @Json(name = "YFI") yFI("YFI"),
         @Json(name = "ZEC") zEC("ZEC"),
         @Json(name = "ZRX") zRX("ZRX"),
         @Json(name = "") eMPTY("")
     }

    /**
     * enum for parameter excludeCategories
     */
     enum class ExcludeCategories_newsV1ArticleList(val value: kotlin.String) {
         @Json(name = "1INCH") _1iNCH("1INCH"),
         @Json(name = "AAVE") aAVE("AAVE"),
         @Json(name = "ADA") aDA("ADA"),
         @Json(name = "ALGO") aLGO("ALGO"),
         @Json(name = "ALTCOIN") aLTCOIN("ALTCOIN"),
         @Json(name = "ASIA") aSIA("ASIA"),
         @Json(name = "ATOM") aTOM("ATOM"),
         @Json(name = "AVAX") aVAX("AVAX"),
         @Json(name = "AXS") aXS("AXS"),
         @Json(name = "BAL") bAL("BAL"),
         @Json(name = "BAT") bAT("BAT"),
         @Json(name = "BCH") bCH("BCH"),
         @Json(name = "BLOCKCHAIN") bLOCKCHAIN("BLOCKCHAIN"),
         @Json(name = "BTC") bTC("BTC"),
         @Json(name = "BUSINESS") bUSINESS("BUSINESS"),
         @Json(name = "COMMODITY") cOMMODITY("COMMODITY"),
         @Json(name = "COMP") cOMP("COMP"),
         @Json(name = "CRV") cRV("CRV"),
         @Json(name = "DASH") dASH("DASH"),
         @Json(name = "DOGE") dOGE("DOGE"),
         @Json(name = "DOT") dOT("DOT"),
         @Json(name = "ENJ") eNJ("ENJ"),
         @Json(name = "ETC") eTC("ETC"),
         @Json(name = "ETH") eTH("ETH"),
         @Json(name = "EXCHANGE") eXCHANGE("EXCHANGE"),
         @Json(name = "FIAT") fIAT("FIAT"),
         @Json(name = "FIL") fIL("FIL"),
         @Json(name = "FTM") fTM("FTM"),
         @Json(name = "ICO") iCO("ICO"),
         @Json(name = "KNC") kNC("KNC"),
         @Json(name = "LINK") lINK("LINK"),
         @Json(name = "LRC") lRC("LRC"),
         @Json(name = "LTC") lTC("LTC"),
         @Json(name = "LUNA") lUNA("LUNA"),
         @Json(name = "LUNC") lUNC("LUNC"),
         @Json(name = "MANA") mANA("MANA"),
         @Json(name = "MARKET") mARKET("MARKET"),
         @Json(name = "MATIC") mATIC("MATIC"),
         @Json(name = "MINING") mINING("MINING"),
         @Json(name = "MKR") mKR("MKR"),
         @Json(name = "REGULATION") rEGULATION("REGULATION"),
         @Json(name = "REN") rEN("REN"),
         @Json(name = "SAND") sAND("SAND"),
         @Json(name = "SHIB") sHIB("SHIB"),
         @Json(name = "SNX") sNX("SNX"),
         @Json(name = "SOL") sOL("SOL"),
         @Json(name = "SPONSORED") sPONSORED("SPONSORED"),
         @Json(name = "SUSHI") sUSHI("SUSHI"),
         @Json(name = "TECHNOLOGY") tECHNOLOGY("TECHNOLOGY"),
         @Json(name = "TRADING") tRADING("TRADING"),
         @Json(name = "TRX") tRX("TRX"),
         @Json(name = "UMA") uMA("UMA"),
         @Json(name = "UNI") uNI("UNI"),
         @Json(name = "USDT") uSDT("USDT"),
         @Json(name = "WALLET") wALLET("WALLET"),
         @Json(name = "XLM") xLM("XLM"),
         @Json(name = "XMR") xMR("XMR"),
         @Json(name = "XRP") xRP("XRP"),
         @Json(name = "XTZ") xTZ("XTZ"),
         @Json(name = "YFI") yFI("YFI"),
         @Json(name = "ZEC") zEC("ZEC"),
         @Json(name = "ZRX") zRX("ZRX"),
         @Json(name = "") eMPTY("")
     }

    /**
     * 
     * 
     * @param sourceIds Get articles from specific sources; either by their ids or keys (optional, default to arrayListOf(""))
     * @param lang The article Preferred language - English (EN), Portuguese (PT), Espanol (ES) (optional, default to EN)
     * @param categories News article categories to return (optional, default to arrayListOf())
     * @param excludeCategories News article categories to exclude from results (optional, default to arrayListOf())
     * @param toTs Articles published on or before this timestamp (optional, default to -1)
     * @return GENERICRESPONSE
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun newsV1ArticleList(sourceIds: kotlin.collections.List<kotlin.String>? = arrayListOf(""), lang: Lang_newsV1ArticleList? = Lang_newsV1ArticleList.eN, categories: kotlin.collections.List<Categories_newsV1ArticleList>? = Categories_newsV1ArticleList.arrayListOf(), excludeCategories: kotlin.collections.List<ExcludeCategories_newsV1ArticleList>? = ExcludeCategories_newsV1ArticleList.arrayListOf(), toTs: kotlin.Int? = -1) : GENERICRESPONSE {
        val localVarResponse = newsV1ArticleListWithHttpInfo(sourceIds = sourceIds, lang = lang, categories = categories, excludeCategories = excludeCategories, toTs = toTs)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GENERICRESPONSE
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param sourceIds Get articles from specific sources; either by their ids or keys (optional, default to arrayListOf(""))
     * @param lang The article Preferred language - English (EN), Portuguese (PT), Espanol (ES) (optional, default to EN)
     * @param categories News article categories to return (optional, default to arrayListOf())
     * @param excludeCategories News article categories to exclude from results (optional, default to arrayListOf())
     * @param toTs Articles published on or before this timestamp (optional, default to -1)
     * @return ApiResponse<GENERICRESPONSE?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun newsV1ArticleListWithHttpInfo(sourceIds: kotlin.collections.List<kotlin.String>?, lang: Lang_newsV1ArticleList?, categories: kotlin.collections.List<Categories_newsV1ArticleList>?, excludeCategories: kotlin.collections.List<ExcludeCategories_newsV1ArticleList>?, toTs: kotlin.Int?) : ApiResponse<GENERICRESPONSE?> {
        val localVariableConfig = newsV1ArticleListRequestConfig(sourceIds = sourceIds, lang = lang, categories = categories, excludeCategories = excludeCategories, toTs = toTs)

        return request<Unit, GENERICRESPONSE>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation newsV1ArticleList
     *
     * @param sourceIds Get articles from specific sources; either by their ids or keys (optional, default to arrayListOf(""))
     * @param lang The article Preferred language - English (EN), Portuguese (PT), Espanol (ES) (optional, default to EN)
     * @param categories News article categories to return (optional, default to arrayListOf())
     * @param excludeCategories News article categories to exclude from results (optional, default to arrayListOf())
     * @param toTs Articles published on or before this timestamp (optional, default to -1)
     * @return RequestConfig
     */
    fun newsV1ArticleListRequestConfig(sourceIds: kotlin.collections.List<kotlin.String>?, lang: Lang_newsV1ArticleList?, categories: kotlin.collections.List<Categories_newsV1ArticleList>?, excludeCategories: kotlin.collections.List<ExcludeCategories_newsV1ArticleList>?, toTs: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (sourceIds != null) {
                    put("source_ids", toMultiValue(sourceIds.toList(), "csv"))
                }
                if (lang != null) {
                    put("lang", listOf(lang.toString()))
                }
                if (categories != null) {
                    put("categories", toMultiValue(categories.toList(), "csv"))
                }
                if (excludeCategories != null) {
                    put("exclude_categories", toMultiValue(excludeCategories.toList(), "csv"))
                }
                if (toTs != null) {
                    put("to_ts", listOf(toTs.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/news/v1/article/list",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @return GENERICRESPONSE
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun newsV1CategoryList() : GENERICRESPONSE {
        val localVarResponse = newsV1CategoryListWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GENERICRESPONSE
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @return ApiResponse<GENERICRESPONSE?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun newsV1CategoryListWithHttpInfo() : ApiResponse<GENERICRESPONSE?> {
        val localVariableConfig = newsV1CategoryListRequestConfig()

        return request<Unit, GENERICRESPONSE>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation newsV1CategoryList
     *
     * @return RequestConfig
     */
    fun newsV1CategoryListRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/news/v1/category/list",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter lang
     */
     enum class Lang_newsV1SourceList(val value: kotlin.String) {
         @Json(name = "EN") eN("EN"),
         @Json(name = "ES") eS("ES"),
         @Json(name = "PT") pT("PT"),
         @Json(name = "") eMPTY("")
     }

    /**
     * enum for parameter type
     */
     enum class Type_newsV1SourceList(val value: kotlin.String) {
         @Json(name = "RSS") rSS("RSS"),
         @Json(name = "API") aPI("API"),
         @Json(name = "TWITTER") tWITTER("TWITTER"),
         @Json(name = "") eMPTY("")
     }

    /**
     * enum for parameter status
     */
     enum class Status_newsV1SourceList(val value: kotlin.String) {
         @Json(name = "ACTIVE") aCTIVE("ACTIVE"),
         @Json(name = "INACTIVE") iNACTIVE("INACTIVE"),
         @Json(name = "") eMPTY("")
     }

    /**
     * 
     * 
     * @param lang The article source Preferred language - English (EN), Portuguese (PT), Espanol (ES) (optional, default to EN)
     * @param type RSS, API, TWITTER (optional, default to RSS)
     * @param status The status for the  article source entry. Allowed values: ACTIVE, INACTIVE (optional, default to ACTIVE)
     * @return GENERICRESPONSE
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun newsV1SourceList(lang: Lang_newsV1SourceList? = Lang_newsV1SourceList.eN, type: Type_newsV1SourceList? = Type_newsV1SourceList.rSS, status: Status_newsV1SourceList? = Status_newsV1SourceList.aCTIVE) : GENERICRESPONSE {
        val localVarResponse = newsV1SourceListWithHttpInfo(lang = lang, type = type, status = status)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GENERICRESPONSE
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param lang The article source Preferred language - English (EN), Portuguese (PT), Espanol (ES) (optional, default to EN)
     * @param type RSS, API, TWITTER (optional, default to RSS)
     * @param status The status for the  article source entry. Allowed values: ACTIVE, INACTIVE (optional, default to ACTIVE)
     * @return ApiResponse<GENERICRESPONSE?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun newsV1SourceListWithHttpInfo(lang: Lang_newsV1SourceList?, type: Type_newsV1SourceList?, status: Status_newsV1SourceList?) : ApiResponse<GENERICRESPONSE?> {
        val localVariableConfig = newsV1SourceListRequestConfig(lang = lang, type = type, status = status)

        return request<Unit, GENERICRESPONSE>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation newsV1SourceList
     *
     * @param lang The article source Preferred language - English (EN), Portuguese (PT), Espanol (ES) (optional, default to EN)
     * @param type RSS, API, TWITTER (optional, default to RSS)
     * @param status The status for the  article source entry. Allowed values: ACTIVE, INACTIVE (optional, default to ACTIVE)
     * @return RequestConfig
     */
    fun newsV1SourceListRequestConfig(lang: Lang_newsV1SourceList?, type: Type_newsV1SourceList?, status: Status_newsV1SourceList?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (lang != null) {
                    put("lang", listOf(lang.toString()))
                }
                if (type != null) {
                    put("type", listOf(type.toString()))
                }
                if (status != null) {
                    put("status", listOf(status.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/news/v1/source/list",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
