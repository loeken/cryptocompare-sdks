/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import org.openapitools.client.models.Error
import org.openapitools.client.models.GENERICRESPONSE

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class AssetApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://data-api.cryptocompare.com")
        }
    }

    /**
     * 
     * 
     * @param address 
     * @param chainSymbol 
     * @param groups  (optional, default to "")
     * @return GENERICRESPONSE
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun assetV1DataByAddress(address: kotlin.String, chainSymbol: kotlin.String, groups: kotlin.String? = "") : GENERICRESPONSE {
        val localVarResponse = assetV1DataByAddressWithHttpInfo(address = address, chainSymbol = chainSymbol, groups = groups)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GENERICRESPONSE
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param address 
     * @param chainSymbol 
     * @param groups  (optional, default to "")
     * @return ApiResponse<GENERICRESPONSE?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun assetV1DataByAddressWithHttpInfo(address: kotlin.String, chainSymbol: kotlin.String, groups: kotlin.String?) : ApiResponse<GENERICRESPONSE?> {
        val localVariableConfig = assetV1DataByAddressRequestConfig(address = address, chainSymbol = chainSymbol, groups = groups)

        return request<Unit, GENERICRESPONSE>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation assetV1DataByAddress
     *
     * @param address 
     * @param chainSymbol 
     * @param groups  (optional, default to "")
     * @return RequestConfig
     */
    fun assetV1DataByAddressRequestConfig(address: kotlin.String, chainSymbol: kotlin.String, groups: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("address", listOf(address.toString()))
                put("chain_symbol", listOf(chainSymbol.toString()))
                if (groups != null) {
                    put("groups", listOf(groups.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/asset/v1/data/by/address",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param assetId The asset id you are interested in
     * @param groups  (optional, default to "")
     * @return GENERICRESPONSE
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun assetV1DataById(assetId: kotlin.Int, groups: kotlin.String? = "") : GENERICRESPONSE {
        val localVarResponse = assetV1DataByIdWithHttpInfo(assetId = assetId, groups = groups)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GENERICRESPONSE
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param assetId The asset id you are interested in
     * @param groups  (optional, default to "")
     * @return ApiResponse<GENERICRESPONSE?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun assetV1DataByIdWithHttpInfo(assetId: kotlin.Int, groups: kotlin.String?) : ApiResponse<GENERICRESPONSE?> {
        val localVariableConfig = assetV1DataByIdRequestConfig(assetId = assetId, groups = groups)

        return request<Unit, GENERICRESPONSE>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation assetV1DataById
     *
     * @param assetId The asset id you are interested in
     * @param groups  (optional, default to "")
     * @return RequestConfig
     */
    fun assetV1DataByIdRequestConfig(assetId: kotlin.Int, groups: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("asset_id", listOf(assetId.toString()))
                if (groups != null) {
                    put("groups", listOf(groups.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/asset/v1/data/by/id",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param assetSymbol The asset symbol you are interested in
     * @param groups  (optional, default to "")
     * @return GENERICRESPONSE
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun assetV1DataBySymbol(assetSymbol: kotlin.String, groups: kotlin.String? = "") : GENERICRESPONSE {
        val localVarResponse = assetV1DataBySymbolWithHttpInfo(assetSymbol = assetSymbol, groups = groups)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GENERICRESPONSE
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param assetSymbol The asset symbol you are interested in
     * @param groups  (optional, default to "")
     * @return ApiResponse<GENERICRESPONSE?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun assetV1DataBySymbolWithHttpInfo(assetSymbol: kotlin.String, groups: kotlin.String?) : ApiResponse<GENERICRESPONSE?> {
        val localVariableConfig = assetV1DataBySymbolRequestConfig(assetSymbol = assetSymbol, groups = groups)

        return request<Unit, GENERICRESPONSE>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation assetV1DataBySymbol
     *
     * @param assetSymbol The asset symbol you are interested in
     * @param groups  (optional, default to "")
     * @return RequestConfig
     */
    fun assetV1DataBySymbolRequestConfig(assetSymbol: kotlin.String, groups: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("asset_symbol", listOf(assetSymbol.toString()))
                if (groups != null) {
                    put("groups", listOf(groups.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/asset/v1/data/by/symbol",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter sortBy
     */
     enum class SortBy_assetV1TopList(val value: kotlin.String) {
         @Json(name = "CREATED_ON") cREATEDON("CREATED_ON"),
         @Json(name = "UPDATED_ON") uPDATEDON("UPDATED_ON"),
         @Json(name = "SYMBOL") sYMBOL("SYMBOL")
     }

    /**
     * enum for parameter sortDirection
     */
     enum class SortDirection_assetV1TopList(val value: kotlin.String) {
         @Json(name = "DESC") dESC("DESC"),
         @Json(name = "ASC") aSC("ASC")
     }

    /**
     * 
     * 
     * @param page The page number for the request to get {page_size} coins at the time. (optional, default to 1)
     * @param pageSize The number of items returned per page (optional, default to 100)
     * @param assetType The asset class/type (optional, default to "")
     * @param sortBy Sort by field ( CREATED_ON,UPDATED_ON,SYMBOL ) (optional, default to CREATED_ON)
     * @param sortDirection Sort direction ( DESC,ASC ) (optional, default to DESC)
     * @param groups  (optional, default to "")
     * @return GENERICRESPONSE
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun assetV1TopList(page: kotlin.Int? = 1, pageSize: kotlin.Int? = 100, assetType: kotlin.String? = "", sortBy: SortBy_assetV1TopList? = SortBy_assetV1TopList.cREATEDON, sortDirection: SortDirection_assetV1TopList? = SortDirection_assetV1TopList.dESC, groups: kotlin.String? = "") : GENERICRESPONSE {
        val localVarResponse = assetV1TopListWithHttpInfo(page = page, pageSize = pageSize, assetType = assetType, sortBy = sortBy, sortDirection = sortDirection, groups = groups)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GENERICRESPONSE
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param page The page number for the request to get {page_size} coins at the time. (optional, default to 1)
     * @param pageSize The number of items returned per page (optional, default to 100)
     * @param assetType The asset class/type (optional, default to "")
     * @param sortBy Sort by field ( CREATED_ON,UPDATED_ON,SYMBOL ) (optional, default to CREATED_ON)
     * @param sortDirection Sort direction ( DESC,ASC ) (optional, default to DESC)
     * @param groups  (optional, default to "")
     * @return ApiResponse<GENERICRESPONSE?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun assetV1TopListWithHttpInfo(page: kotlin.Int?, pageSize: kotlin.Int?, assetType: kotlin.String?, sortBy: SortBy_assetV1TopList?, sortDirection: SortDirection_assetV1TopList?, groups: kotlin.String?) : ApiResponse<GENERICRESPONSE?> {
        val localVariableConfig = assetV1TopListRequestConfig(page = page, pageSize = pageSize, assetType = assetType, sortBy = sortBy, sortDirection = sortDirection, groups = groups)

        return request<Unit, GENERICRESPONSE>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation assetV1TopList
     *
     * @param page The page number for the request to get {page_size} coins at the time. (optional, default to 1)
     * @param pageSize The number of items returned per page (optional, default to 100)
     * @param assetType The asset class/type (optional, default to "")
     * @param sortBy Sort by field ( CREATED_ON,UPDATED_ON,SYMBOL ) (optional, default to CREATED_ON)
     * @param sortDirection Sort direction ( DESC,ASC ) (optional, default to DESC)
     * @param groups  (optional, default to "")
     * @return RequestConfig
     */
    fun assetV1TopListRequestConfig(page: kotlin.Int?, pageSize: kotlin.Int?, assetType: kotlin.String?, sortBy: SortBy_assetV1TopList?, sortDirection: SortDirection_assetV1TopList?, groups: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (pageSize != null) {
                    put("page_size", listOf(pageSize.toString()))
                }
                if (assetType != null) {
                    put("asset_type", listOf(assetType.toString()))
                }
                if (sortBy != null) {
                    put("sort_by", listOf(sortBy.toString()))
                }
                if (sortDirection != null) {
                    put("sort_direction", listOf(sortDirection.toString()))
                }
                if (groups != null) {
                    put("groups", listOf(groups.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/asset/v1/top/list",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
