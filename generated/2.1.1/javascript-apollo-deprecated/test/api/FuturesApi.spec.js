/**
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 * CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: data@cryptocompare.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  }
}(this, function(expect, CryptoCompareMarketIndexReferenceDataNewsAndOverviewMetrcisApiForTheCryptocurrencyIndustry) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CryptoCompareMarketIndexReferenceDataNewsAndOverviewMetrcisApiForTheCryptocurrencyIndustry.FuturesApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('FuturesApi', function() {
    describe('futuresV1HistoricalDays', function() {
      it('should call futuresV1HistoricalDays successfully', function(done) {
        //uncomment below and update the code to test futuresV1HistoricalDays
        //instance.futuresV1HistoricalDays(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('futuresV1HistoricalFundingRateDays', function() {
      it('should call futuresV1HistoricalFundingRateDays successfully', function(done) {
        //uncomment below and update the code to test futuresV1HistoricalFundingRateDays
        //instance.futuresV1HistoricalFundingRateDays(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('futuresV1HistoricalFundingRateHours', function() {
      it('should call futuresV1HistoricalFundingRateHours successfully', function(done) {
        //uncomment below and update the code to test futuresV1HistoricalFundingRateHours
        //instance.futuresV1HistoricalFundingRateHours(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('futuresV1HistoricalFundingRateMessages', function() {
      it('should call futuresV1HistoricalFundingRateMessages successfully', function(done) {
        //uncomment below and update the code to test futuresV1HistoricalFundingRateMessages
        //instance.futuresV1HistoricalFundingRateMessages(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('futuresV1HistoricalFundingRateMessagesHour', function() {
      it('should call futuresV1HistoricalFundingRateMessagesHour successfully', function(done) {
        //uncomment below and update the code to test futuresV1HistoricalFundingRateMessagesHour
        //instance.futuresV1HistoricalFundingRateMessagesHour(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('futuresV1HistoricalFundingRateMinutes', function() {
      it('should call futuresV1HistoricalFundingRateMinutes successfully', function(done) {
        //uncomment below and update the code to test futuresV1HistoricalFundingRateMinutes
        //instance.futuresV1HistoricalFundingRateMinutes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('futuresV1HistoricalHours', function() {
      it('should call futuresV1HistoricalHours successfully', function(done) {
        //uncomment below and update the code to test futuresV1HistoricalHours
        //instance.futuresV1HistoricalHours(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('futuresV1HistoricalMinutes', function() {
      it('should call futuresV1HistoricalMinutes successfully', function(done) {
        //uncomment below and update the code to test futuresV1HistoricalMinutes
        //instance.futuresV1HistoricalMinutes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('futuresV1HistoricalOpenInterestDays', function() {
      it('should call futuresV1HistoricalOpenInterestDays successfully', function(done) {
        //uncomment below and update the code to test futuresV1HistoricalOpenInterestDays
        //instance.futuresV1HistoricalOpenInterestDays(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('futuresV1HistoricalOpenInterestHours', function() {
      it('should call futuresV1HistoricalOpenInterestHours successfully', function(done) {
        //uncomment below and update the code to test futuresV1HistoricalOpenInterestHours
        //instance.futuresV1HistoricalOpenInterestHours(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('futuresV1HistoricalOpenInterestMessages', function() {
      it('should call futuresV1HistoricalOpenInterestMessages successfully', function(done) {
        //uncomment below and update the code to test futuresV1HistoricalOpenInterestMessages
        //instance.futuresV1HistoricalOpenInterestMessages(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('futuresV1HistoricalOpenInterestMessagesHour', function() {
      it('should call futuresV1HistoricalOpenInterestMessagesHour successfully', function(done) {
        //uncomment below and update the code to test futuresV1HistoricalOpenInterestMessagesHour
        //instance.futuresV1HistoricalOpenInterestMessagesHour(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('futuresV1HistoricalOpenInterestMinutes', function() {
      it('should call futuresV1HistoricalOpenInterestMinutes successfully', function(done) {
        //uncomment below and update the code to test futuresV1HistoricalOpenInterestMinutes
        //instance.futuresV1HistoricalOpenInterestMinutes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('futuresV1HistoricalTrades', function() {
      it('should call futuresV1HistoricalTrades successfully', function(done) {
        //uncomment below and update the code to test futuresV1HistoricalTrades
        //instance.futuresV1HistoricalTrades(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('futuresV1HistoricalTradesHour', function() {
      it('should call futuresV1HistoricalTradesHour successfully', function(done) {
        //uncomment below and update the code to test futuresV1HistoricalTradesHour
        //instance.futuresV1HistoricalTradesHour(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('futuresV1LatestFundingRateTick', function() {
      it('should call futuresV1LatestFundingRateTick successfully', function(done) {
        //uncomment below and update the code to test futuresV1LatestFundingRateTick
        //instance.futuresV1LatestFundingRateTick(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('futuresV1LatestInstrumentMetadata', function() {
      it('should call futuresV1LatestInstrumentMetadata successfully', function(done) {
        //uncomment below and update the code to test futuresV1LatestInstrumentMetadata
        //instance.futuresV1LatestInstrumentMetadata(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('futuresV1LatestOpenInterestTick', function() {
      it('should call futuresV1LatestOpenInterestTick successfully', function(done) {
        //uncomment below and update the code to test futuresV1LatestOpenInterestTick
        //instance.futuresV1LatestOpenInterestTick(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('futuresV1LatestTick', function() {
      it('should call futuresV1LatestTick successfully', function(done) {
        //uncomment below and update the code to test futuresV1LatestTick
        //instance.futuresV1LatestTick(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('futuresV1Markets', function() {
      it('should call futuresV1Markets successfully', function(done) {
        //uncomment below and update the code to test futuresV1Markets
        //instance.futuresV1Markets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('futuresV1MarketsInstruments', function() {
      it('should call futuresV1MarketsInstruments successfully', function(done) {
        //uncomment below and update the code to test futuresV1MarketsInstruments
        //instance.futuresV1MarketsInstruments(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('futuresV1MarketsInstrumentsUnmapped', function() {
      it('should call futuresV1MarketsInstrumentsUnmapped successfully', function(done) {
        //uncomment below and update the code to test futuresV1MarketsInstrumentsUnmapped
        //instance.futuresV1MarketsInstrumentsUnmapped(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('indexV1HistoricalDays', function() {
      it('should call indexV1HistoricalDays successfully', function(done) {
        //uncomment below and update the code to test indexV1HistoricalDays
        //instance.indexV1HistoricalDays(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('indexV1HistoricalHours', function() {
      it('should call indexV1HistoricalHours successfully', function(done) {
        //uncomment below and update the code to test indexV1HistoricalHours
        //instance.indexV1HistoricalHours(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('indexV1HistoricalMessages', function() {
      it('should call indexV1HistoricalMessages successfully', function(done) {
        //uncomment below and update the code to test indexV1HistoricalMessages
        //instance.indexV1HistoricalMessages(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('indexV1HistoricalMessagesHour', function() {
      it('should call indexV1HistoricalMessagesHour successfully', function(done) {
        //uncomment below and update the code to test indexV1HistoricalMessagesHour
        //instance.indexV1HistoricalMessagesHour(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('indexV1HistoricalMinutes', function() {
      it('should call indexV1HistoricalMinutes successfully', function(done) {
        //uncomment below and update the code to test indexV1HistoricalMinutes
        //instance.indexV1HistoricalMinutes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('indexV1LatestInstrumentMetadata', function() {
      it('should call indexV1LatestInstrumentMetadata successfully', function(done) {
        //uncomment below and update the code to test indexV1LatestInstrumentMetadata
        //instance.indexV1LatestInstrumentMetadata(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('indexV1LatestTick', function() {
      it('should call indexV1LatestTick successfully', function(done) {
        //uncomment below and update the code to test indexV1LatestTick
        //instance.indexV1LatestTick(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('indexV1Markets', function() {
      it('should call indexV1Markets successfully', function(done) {
        //uncomment below and update the code to test indexV1Markets
        //instance.indexV1Markets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('indexV1MarketsInstruments', function() {
      it('should call indexV1MarketsInstruments successfully', function(done) {
        //uncomment below and update the code to test indexV1MarketsInstruments
        //instance.indexV1MarketsInstruments(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('indexV1MarketsInstrumentsUnmapped', function() {
      it('should call indexV1MarketsInstrumentsUnmapped successfully', function(done) {
        //uncomment below and update the code to test indexV1MarketsInstrumentsUnmapped
        //instance.indexV1MarketsInstrumentsUnmapped(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
