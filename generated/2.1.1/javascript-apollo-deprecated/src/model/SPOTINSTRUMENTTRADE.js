/**
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 * CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: data@cryptocompare.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SPOTINSTRUMENTTRADE model module.
 * @module model/SPOTINSTRUMENTTRADE
 * @version 2.1.1
 */
class SPOTINSTRUMENTTRADE {
    /**
     * @member {String} BASE
     * @type {String}
     */
    BASE;
    /**
     * @member {Number} CCSEQ
     * @type {Number}
     */
    CCSEQ;
    /**
     * @member {String} ID
     * @type {String}
     */
    ID;
    /**
     * @member {String} INSTRUMENT
     * @type {String}
     */
    INSTRUMENT;
    /**
     * @member {String} MAPPED_INSTRUMENT
     * @type {String}
     */
    MAPPED_INSTRUMENT;
    /**
     * @member {String} MARKET
     * @type {String}
     */
    MARKET;
    /**
     * @member {Number} PRICE
     * @type {Number}
     */
    PRICE;
    /**
     * @member {Number} QUANTITY
     * @type {Number}
     */
    QUANTITY;
    /**
     * @member {String} QUOTE
     * @type {String}
     */
    QUOTE;
    /**
     * @member {Number} QUOTE_QUANTITY
     * @type {Number}
     */
    QUOTE_QUANTITY;
    /**
     * @member {Number} RECEIVED_TIMESTAMP
     * @type {Number}
     */
    RECEIVED_TIMESTAMP;
    /**
     * @member {Number} RECEIVED_TIMESTAMP_NS
     * @type {Number}
     */
    RECEIVED_TIMESTAMP_NS;
    /**
     * @member {String} SIDE
     * @type {String}
     */
    SIDE;
    /**
     * @member {String} SOURCE
     * @type {String}
     */
    SOURCE;
    /**
     * @member {Number} TIMESTAMP
     * @type {Number}
     */
    TIMESTAMP;
    /**
     * @member {Number} TIMESTAMP_NS
     * @type {Number}
     */
    TIMESTAMP_NS;
    /**
     * @member {String} TYPE
     * @type {String}
     */
    TYPE;

    

    /**
     * Constructs a new <code>SPOTINSTRUMENTTRADE</code>.
     * @alias module:model/SPOTINSTRUMENTTRADE
     */
    constructor() { 
        
        SPOTINSTRUMENTTRADE.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SPOTINSTRUMENTTRADE</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SPOTINSTRUMENTTRADE} obj Optional instance to populate.
     * @return {module:model/SPOTINSTRUMENTTRADE} The populated <code>SPOTINSTRUMENTTRADE</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SPOTINSTRUMENTTRADE();

            if (data.hasOwnProperty('BASE')) {
                obj['BASE'] = ApiClient.convertToType(data['BASE'], 'String');
            }
            if (data.hasOwnProperty('CCSEQ')) {
                obj['CCSEQ'] = ApiClient.convertToType(data['CCSEQ'], 'Number');
            }
            if (data.hasOwnProperty('ID')) {
                obj['ID'] = ApiClient.convertToType(data['ID'], 'String');
            }
            if (data.hasOwnProperty('INSTRUMENT')) {
                obj['INSTRUMENT'] = ApiClient.convertToType(data['INSTRUMENT'], 'String');
            }
            if (data.hasOwnProperty('MAPPED_INSTRUMENT')) {
                obj['MAPPED_INSTRUMENT'] = ApiClient.convertToType(data['MAPPED_INSTRUMENT'], 'String');
            }
            if (data.hasOwnProperty('MARKET')) {
                obj['MARKET'] = ApiClient.convertToType(data['MARKET'], 'String');
            }
            if (data.hasOwnProperty('PRICE')) {
                obj['PRICE'] = ApiClient.convertToType(data['PRICE'], 'Number');
            }
            if (data.hasOwnProperty('QUANTITY')) {
                obj['QUANTITY'] = ApiClient.convertToType(data['QUANTITY'], 'Number');
            }
            if (data.hasOwnProperty('QUOTE')) {
                obj['QUOTE'] = ApiClient.convertToType(data['QUOTE'], 'String');
            }
            if (data.hasOwnProperty('QUOTE_QUANTITY')) {
                obj['QUOTE_QUANTITY'] = ApiClient.convertToType(data['QUOTE_QUANTITY'], 'Number');
            }
            if (data.hasOwnProperty('RECEIVED_TIMESTAMP')) {
                obj['RECEIVED_TIMESTAMP'] = ApiClient.convertToType(data['RECEIVED_TIMESTAMP'], 'Number');
            }
            if (data.hasOwnProperty('RECEIVED_TIMESTAMP_NS')) {
                obj['RECEIVED_TIMESTAMP_NS'] = ApiClient.convertToType(data['RECEIVED_TIMESTAMP_NS'], 'Number');
            }
            if (data.hasOwnProperty('SIDE')) {
                obj['SIDE'] = ApiClient.convertToType(data['SIDE'], 'String');
            }
            if (data.hasOwnProperty('SOURCE')) {
                obj['SOURCE'] = ApiClient.convertToType(data['SOURCE'], 'String');
            }
            if (data.hasOwnProperty('TIMESTAMP')) {
                obj['TIMESTAMP'] = ApiClient.convertToType(data['TIMESTAMP'], 'Number');
            }
            if (data.hasOwnProperty('TIMESTAMP_NS')) {
                obj['TIMESTAMP_NS'] = ApiClient.convertToType(data['TIMESTAMP_NS'], 'Number');
            }
            if (data.hasOwnProperty('TYPE')) {
                obj['TYPE'] = ApiClient.convertToType(data['TYPE'], 'String');
            }
        }
        return obj;
    }
}



export default SPOTINSTRUMENTTRADE;

