#
# CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
# CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
# Version: 2.1.1
# Contact: data@cryptocompare.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER BASE
The mapped from asset (base / symbol/ coin). Only available on instruments that have been mapped (e.g. BTC).
.PARAMETER CCSEQ
Our internal sequence number for this trade, this is unique per market / exchange and trading pair. Should always be increasing by 1 for each new trade we discover, not in chronological order.
.PARAMETER ID
The trade ID as reported by the market / exchange. If the exchange does not provide a trade ID, this will be the timestamp of the trade + a number from 0 - 999. This preserves uniqueness, assuming there would never be more than 999 trades in any given second.
.PARAMETER INSTRUMENT
The unmapped instrument ID as given by the exchange (e.g. BTCUSD, BTC_USD, XBT-ZUSD, BTC-USD).
.PARAMETER MAPPEDINSTRUMENT
The mapped instrument ID, as derived from our mapping rules. This takes the form: ""BASE-QUOTE"". Only available on instruments that have been mapped (e.g. BTC-USD).
.PARAMETER MARKET
The market / exchange under consideration (e.g. Coinbase, Kraken, etc.).
.PARAMETER PRICE
The price in the to instrument (quote / counter symbol / coin) of the trade. For a BTC-USD trade, this is how much was paid for one BTC in USD. For futures, this will be the price of the contract.
.PARAMETER QUANTITY
The volume of the trade, given in the from instrument (base symbol / coin/ contract). For a spot BTC-USD trade, this is how much BTC was traded at the trade price. For a futures BTCUSDPERP, this is the BTC equivalent for the contracts traded.
.PARAMETER QUOTE
The mapped to asset (quote / counter symbol / coin). Only available on instruments that have been mapped (e.g. USD).
.PARAMETER QUOTEQUANTITY
The volume of the trade, given in the to instrument (quote / counter symbol / coin). This is equivalent to QUANTITY * PRICE. E.g. for a BTC-USD trade, this is how much USD was paid in total for the volume of BTC traded. For futures this is the quote currency equivalent for the contracts traded.
.PARAMETER RECEIVEDTIMESTAMP
The timestamp in seconds that the trade was received. This varies from the trade taking place on the market by a few millisconds to a few seconds depending on the market / exchange API options / rate limits.
.PARAMETER RECEIVEDTIMESTAMPNS
The nanosecond part of the received timestamp.
.PARAMETER SIDE
The side of the trade: SELL, BUY or UNKNOWN. If the exchange / api does not provide a side, ""UNKNOWN"" will be returned.
.PARAMETER SOURCE
The source of the trade update: POLLING, STREAMING, GO, BLOB etc.
.PARAMETER TIMESTAMP
The timestamp in seconds as reported by the market / exchange or the received timestamp if the market / exchange does not provide one.
.PARAMETER TIMESTAMPNS
The nanosecond part of the reported timestamp.
.PARAMETER TYPE
The type of the message.
.OUTPUTS

SPOTINSTRUMENTTRADE<PSCustomObject>
#>

function Initialize-SPOTINSTRUMENTTRADE {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${BASE},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${CCSEQ},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ID},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${INSTRUMENT},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MAPPEDINSTRUMENT},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MARKET},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${PRICE},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${QUANTITY},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${QUOTE},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${QUOTEQUANTITY},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${RECEIVEDTIMESTAMP},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${RECEIVEDTIMESTAMPNS},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SIDE},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SOURCE},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${TIMESTAMP},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${TIMESTAMPNS},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TYPE}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => SPOTINSTRUMENTTRADE' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "BASE" = ${BASE}
            "CCSEQ" = ${CCSEQ}
            "ID" = ${ID}
            "INSTRUMENT" = ${INSTRUMENT}
            "MAPPED_INSTRUMENT" = ${MAPPEDINSTRUMENT}
            "MARKET" = ${MARKET}
            "PRICE" = ${PRICE}
            "QUANTITY" = ${QUANTITY}
            "QUOTE" = ${QUOTE}
            "QUOTE_QUANTITY" = ${QUOTEQUANTITY}
            "RECEIVED_TIMESTAMP" = ${RECEIVEDTIMESTAMP}
            "RECEIVED_TIMESTAMP_NS" = ${RECEIVEDTIMESTAMPNS}
            "SIDE" = ${SIDE}
            "SOURCE" = ${SOURCE}
            "TIMESTAMP" = ${TIMESTAMP}
            "TIMESTAMP_NS" = ${TIMESTAMPNS}
            "TYPE" = ${TYPE}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to SPOTINSTRUMENTTRADE<PSCustomObject>

.DESCRIPTION

Convert from JSON to SPOTINSTRUMENTTRADE<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

SPOTINSTRUMENTTRADE<PSCustomObject>
#>
function ConvertFrom-JsonToSPOTINSTRUMENTTRADE {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => SPOTINSTRUMENTTRADE' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in SPOTINSTRUMENTTRADE
        $AllProperties = ("BASE", "CCSEQ", "ID", "INSTRUMENT", "MAPPED_INSTRUMENT", "MARKET", "PRICE", "QUANTITY", "QUOTE", "QUOTE_QUANTITY", "RECEIVED_TIMESTAMP", "RECEIVED_TIMESTAMP_NS", "SIDE", "SOURCE", "TIMESTAMP", "TIMESTAMP_NS", "TYPE")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "BASE"))) { #optional property not found
            $BASE = $null
        } else {
            $BASE = $JsonParameters.PSobject.Properties["BASE"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "CCSEQ"))) { #optional property not found
            $CCSEQ = $null
        } else {
            $CCSEQ = $JsonParameters.PSobject.Properties["CCSEQ"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ID"))) { #optional property not found
            $ID = $null
        } else {
            $ID = $JsonParameters.PSobject.Properties["ID"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "INSTRUMENT"))) { #optional property not found
            $INSTRUMENT = $null
        } else {
            $INSTRUMENT = $JsonParameters.PSobject.Properties["INSTRUMENT"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "MAPPED_INSTRUMENT"))) { #optional property not found
            $MAPPEDINSTRUMENT = $null
        } else {
            $MAPPEDINSTRUMENT = $JsonParameters.PSobject.Properties["MAPPED_INSTRUMENT"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "MARKET"))) { #optional property not found
            $MARKET = $null
        } else {
            $MARKET = $JsonParameters.PSobject.Properties["MARKET"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PRICE"))) { #optional property not found
            $PRICE = $null
        } else {
            $PRICE = $JsonParameters.PSobject.Properties["PRICE"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "QUANTITY"))) { #optional property not found
            $QUANTITY = $null
        } else {
            $QUANTITY = $JsonParameters.PSobject.Properties["QUANTITY"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "QUOTE"))) { #optional property not found
            $QUOTE = $null
        } else {
            $QUOTE = $JsonParameters.PSobject.Properties["QUOTE"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "QUOTE_QUANTITY"))) { #optional property not found
            $QUOTEQUANTITY = $null
        } else {
            $QUOTEQUANTITY = $JsonParameters.PSobject.Properties["QUOTE_QUANTITY"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "RECEIVED_TIMESTAMP"))) { #optional property not found
            $RECEIVEDTIMESTAMP = $null
        } else {
            $RECEIVEDTIMESTAMP = $JsonParameters.PSobject.Properties["RECEIVED_TIMESTAMP"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "RECEIVED_TIMESTAMP_NS"))) { #optional property not found
            $RECEIVEDTIMESTAMPNS = $null
        } else {
            $RECEIVEDTIMESTAMPNS = $JsonParameters.PSobject.Properties["RECEIVED_TIMESTAMP_NS"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SIDE"))) { #optional property not found
            $SIDE = $null
        } else {
            $SIDE = $JsonParameters.PSobject.Properties["SIDE"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SOURCE"))) { #optional property not found
            $SOURCE = $null
        } else {
            $SOURCE = $JsonParameters.PSobject.Properties["SOURCE"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "TIMESTAMP"))) { #optional property not found
            $TIMESTAMP = $null
        } else {
            $TIMESTAMP = $JsonParameters.PSobject.Properties["TIMESTAMP"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "TIMESTAMP_NS"))) { #optional property not found
            $TIMESTAMPNS = $null
        } else {
            $TIMESTAMPNS = $JsonParameters.PSobject.Properties["TIMESTAMP_NS"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "TYPE"))) { #optional property not found
            $TYPE = $null
        } else {
            $TYPE = $JsonParameters.PSobject.Properties["TYPE"].value
        }

        $PSO = [PSCustomObject]@{
            "BASE" = ${BASE}
            "CCSEQ" = ${CCSEQ}
            "ID" = ${ID}
            "INSTRUMENT" = ${INSTRUMENT}
            "MAPPED_INSTRUMENT" = ${MAPPEDINSTRUMENT}
            "MARKET" = ${MARKET}
            "PRICE" = ${PRICE}
            "QUANTITY" = ${QUANTITY}
            "QUOTE" = ${QUOTE}
            "QUOTE_QUANTITY" = ${QUOTEQUANTITY}
            "RECEIVED_TIMESTAMP" = ${RECEIVEDTIMESTAMP}
            "RECEIVED_TIMESTAMP_NS" = ${RECEIVEDTIMESTAMPNS}
            "SIDE" = ${SIDE}
            "SOURCE" = ${SOURCE}
            "TIMESTAMP" = ${TIMESTAMP}
            "TIMESTAMP_NS" = ${TIMESTAMPNS}
            "TYPE" = ${TYPE}
        }

        return $PSO
    }

}

