#
# CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
# CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
# Version: 2.1.1
# Contact: data@cryptocompare.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER BASE
The mapped from asset (base / symbol/ coin) (e.g. BTC). Only available on instruments that have mapping.
.PARAMETER CLOSE
The price of the last trade in this time period. If there were no trades in the time period, the open price will be given.
.PARAMETER FIRSTTRADEPRICE
The price of the first trade in the time period. This is only available when there is at least one trade in the time period.
.PARAMETER FIRSTTRADETIMESTAMP
The timestamp, in seconds, of the first trade in this time perio. This is only available when there is at least one trade in the time period.
.PARAMETER HIGH
The highest trade price in the time period. If there were no trades in the time period, the open price will be given.
.PARAMETER HIGHTRADEPRICE
The highest value of the trades in the time period. This is only available when there is at least one trade in the time period.
.PARAMETER HIGHTRADETIMESTAMP
The timestamp, in seconds, of the highest trade in the time period. This is only available when there is at least one trade in the time period.
.PARAMETER INSTRUMENT
The unmapped instrument ID
.PARAMETER LASTTRADEPRICE
The last trade price in the time period. This is only available when there is at least one trade in the time period.
.PARAMETER LASTTRADETIMESTAMP
The timestamp, in seconds, of the last trade in this time period. This is only available when there is at least one trade in the time period.
.PARAMETER LOW
The lowest trade price in the time period. If there were no trades in the time period, the open price will be given.
.PARAMETER LOWTRADEPRICE
The lowest value of the trades in the time period. This is only available when there is at least one trade in the time period.
.PARAMETER LOWTRADETIMESTAMP
The timestamp, in seconds, of the lowest trade in the time period. This is only available when there is at least one trade in the time period.
.PARAMETER MAPPEDINSTRUMENT
The instrument ID, as derived from our mapping rules. This takes the form ""BASE-QUOTE"" (e.g. BTC-USD). Only available on instruments that have been mapped.
.PARAMETER MARKET
The market / exchange under consideration (e.g. gemini, kraken, coinbase, etc).
.PARAMETER OPEN
The open price for the historical period, this is based on the closest trade before the period start.
.PARAMETER QUOTE
The mapped to asset (quote / counter symbol / coin) (e.g. USD). Only available on instruments that have mapping.
.PARAMETER QUOTEVOLUME
The sum of all the trade volumes in the To asset (quote/counter symbol/coin) for the time period. If there were no trades in the time period, 0 will be returned.
.PARAMETER QUOTEVOLUMEBUY
The sum of all the BUY trade volumes in the to asset (quote/counter symbol/coin) for the time period.
.PARAMETER QUOTEVOLUMESELL
The sum of all the SELL trade volumes in the To asset (quote/counter symbol/coin) for the time period.
.PARAMETER QUOTEVOLUMEUNKNOWN
The sum of all the UNKNOWN trade volumes in the To asset (quote/counter symbol/coin) for the time period.
.PARAMETER TIMESTAMP
The timestamp in seconds of the beginning of the histo period. For minute it would be every minute at the beginning of the minute, for hour it would be the start of the hour and for daily it is 00:00 GMT.
.PARAMETER TOTALTRADES
The total number of trades seen in this time period. If there were no trades in the time period, 0 will be returned.
.PARAMETER TOTALTRADESBUY
The total number of BUY trades seen in this time period. If there were no trades in the time period, 0 will be returned.
.PARAMETER TOTALTRADESSELL
The total number of SELL trades seen in this time period. If there were no trades in the time period, 0 will be returned.
.PARAMETER TOTALTRADESUNKNOWN
The total number of UNKNOWN trades seen in this time period. If there were no trades in the time period, 0 will be returned.
.PARAMETER TYPE
The type of the message.
.PARAMETER UNIT
The unit of the historical period update: MINUTE for minute, HOUR for hour and DAY for day.
.PARAMETER VOLUME
The sum of all the trade volumes in the from asset (base symbol / coin) for the time period. If there were no trades in the time period, 0 will be returned.
.PARAMETER VOLUMEBUY
The sum of all the BUY trade volumes in the from asset (base symbol / coin) for the time period.
.PARAMETER VOLUMESELL
The sum of all the SELL trade volumes in the from asset (base symbol / coin) for the time period.
.PARAMETER VOLUMEUNKNOWN
The sum of all the UNKNOWN trade volumes in the from asset (base symbol / coin) for the time period.
.OUTPUTS

SPOTINSTRUMENTHISTODATA<PSCustomObject>
#>

function Initialize-SPOTINSTRUMENTHISTODATA {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${BASE},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${CLOSE},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${FIRSTTRADEPRICE},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${FIRSTTRADETIMESTAMP},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${HIGH},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${HIGHTRADEPRICE},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${HIGHTRADETIMESTAMP},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${INSTRUMENT},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${LASTTRADEPRICE},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${LASTTRADETIMESTAMP},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${LOW},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${LOWTRADEPRICE},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${LOWTRADETIMESTAMP},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MAPPEDINSTRUMENT},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MARKET},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${OPEN},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${QUOTE},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${QUOTEVOLUME},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${QUOTEVOLUMEBUY},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${QUOTEVOLUMESELL},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${QUOTEVOLUMEUNKNOWN},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${TIMESTAMP},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${TOTALTRADES},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${TOTALTRADESBUY},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${TOTALTRADESSELL},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${TOTALTRADESUNKNOWN},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TYPE},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UNIT},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${VOLUME},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${VOLUMEBUY},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${VOLUMESELL},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${VOLUMEUNKNOWN}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => SPOTINSTRUMENTHISTODATA' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "BASE" = ${BASE}
            "CLOSE" = ${CLOSE}
            "FIRST_TRADE_PRICE" = ${FIRSTTRADEPRICE}
            "FIRST_TRADE_TIMESTAMP" = ${FIRSTTRADETIMESTAMP}
            "HIGH" = ${HIGH}
            "HIGH_TRADE_PRICE" = ${HIGHTRADEPRICE}
            "HIGH_TRADE_TIMESTAMP" = ${HIGHTRADETIMESTAMP}
            "INSTRUMENT" = ${INSTRUMENT}
            "LAST_TRADE_PRICE" = ${LASTTRADEPRICE}
            "LAST_TRADE_TIMESTAMP" = ${LASTTRADETIMESTAMP}
            "LOW" = ${LOW}
            "LOW_TRADE_PRICE" = ${LOWTRADEPRICE}
            "LOW_TRADE_TIMESTAMP" = ${LOWTRADETIMESTAMP}
            "MAPPED_INSTRUMENT" = ${MAPPEDINSTRUMENT}
            "MARKET" = ${MARKET}
            "OPEN" = ${OPEN}
            "QUOTE" = ${QUOTE}
            "QUOTE_VOLUME" = ${QUOTEVOLUME}
            "QUOTE_VOLUME_BUY" = ${QUOTEVOLUMEBUY}
            "QUOTE_VOLUME_SELL" = ${QUOTEVOLUMESELL}
            "QUOTE_VOLUME_UNKNOWN" = ${QUOTEVOLUMEUNKNOWN}
            "TIMESTAMP" = ${TIMESTAMP}
            "TOTAL_TRADES" = ${TOTALTRADES}
            "TOTAL_TRADES_BUY" = ${TOTALTRADESBUY}
            "TOTAL_TRADES_SELL" = ${TOTALTRADESSELL}
            "TOTAL_TRADES_UNKNOWN" = ${TOTALTRADESUNKNOWN}
            "TYPE" = ${TYPE}
            "UNIT" = ${UNIT}
            "VOLUME" = ${VOLUME}
            "VOLUME_BUY" = ${VOLUMEBUY}
            "VOLUME_SELL" = ${VOLUMESELL}
            "VOLUME_UNKNOWN" = ${VOLUMEUNKNOWN}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to SPOTINSTRUMENTHISTODATA<PSCustomObject>

.DESCRIPTION

Convert from JSON to SPOTINSTRUMENTHISTODATA<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

SPOTINSTRUMENTHISTODATA<PSCustomObject>
#>
function ConvertFrom-JsonToSPOTINSTRUMENTHISTODATA {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => SPOTINSTRUMENTHISTODATA' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in SPOTINSTRUMENTHISTODATA
        $AllProperties = ("BASE", "CLOSE", "FIRST_TRADE_PRICE", "FIRST_TRADE_TIMESTAMP", "HIGH", "HIGH_TRADE_PRICE", "HIGH_TRADE_TIMESTAMP", "INSTRUMENT", "LAST_TRADE_PRICE", "LAST_TRADE_TIMESTAMP", "LOW", "LOW_TRADE_PRICE", "LOW_TRADE_TIMESTAMP", "MAPPED_INSTRUMENT", "MARKET", "OPEN", "QUOTE", "QUOTE_VOLUME", "QUOTE_VOLUME_BUY", "QUOTE_VOLUME_SELL", "QUOTE_VOLUME_UNKNOWN", "TIMESTAMP", "TOTAL_TRADES", "TOTAL_TRADES_BUY", "TOTAL_TRADES_SELL", "TOTAL_TRADES_UNKNOWN", "TYPE", "UNIT", "VOLUME", "VOLUME_BUY", "VOLUME_SELL", "VOLUME_UNKNOWN")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "BASE"))) { #optional property not found
            $BASE = $null
        } else {
            $BASE = $JsonParameters.PSobject.Properties["BASE"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "CLOSE"))) { #optional property not found
            $CLOSE = $null
        } else {
            $CLOSE = $JsonParameters.PSobject.Properties["CLOSE"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "FIRST_TRADE_PRICE"))) { #optional property not found
            $FIRSTTRADEPRICE = $null
        } else {
            $FIRSTTRADEPRICE = $JsonParameters.PSobject.Properties["FIRST_TRADE_PRICE"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "FIRST_TRADE_TIMESTAMP"))) { #optional property not found
            $FIRSTTRADETIMESTAMP = $null
        } else {
            $FIRSTTRADETIMESTAMP = $JsonParameters.PSobject.Properties["FIRST_TRADE_TIMESTAMP"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "HIGH"))) { #optional property not found
            $HIGH = $null
        } else {
            $HIGH = $JsonParameters.PSobject.Properties["HIGH"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "HIGH_TRADE_PRICE"))) { #optional property not found
            $HIGHTRADEPRICE = $null
        } else {
            $HIGHTRADEPRICE = $JsonParameters.PSobject.Properties["HIGH_TRADE_PRICE"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "HIGH_TRADE_TIMESTAMP"))) { #optional property not found
            $HIGHTRADETIMESTAMP = $null
        } else {
            $HIGHTRADETIMESTAMP = $JsonParameters.PSobject.Properties["HIGH_TRADE_TIMESTAMP"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "INSTRUMENT"))) { #optional property not found
            $INSTRUMENT = $null
        } else {
            $INSTRUMENT = $JsonParameters.PSobject.Properties["INSTRUMENT"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "LAST_TRADE_PRICE"))) { #optional property not found
            $LASTTRADEPRICE = $null
        } else {
            $LASTTRADEPRICE = $JsonParameters.PSobject.Properties["LAST_TRADE_PRICE"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "LAST_TRADE_TIMESTAMP"))) { #optional property not found
            $LASTTRADETIMESTAMP = $null
        } else {
            $LASTTRADETIMESTAMP = $JsonParameters.PSobject.Properties["LAST_TRADE_TIMESTAMP"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "LOW"))) { #optional property not found
            $LOW = $null
        } else {
            $LOW = $JsonParameters.PSobject.Properties["LOW"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "LOW_TRADE_PRICE"))) { #optional property not found
            $LOWTRADEPRICE = $null
        } else {
            $LOWTRADEPRICE = $JsonParameters.PSobject.Properties["LOW_TRADE_PRICE"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "LOW_TRADE_TIMESTAMP"))) { #optional property not found
            $LOWTRADETIMESTAMP = $null
        } else {
            $LOWTRADETIMESTAMP = $JsonParameters.PSobject.Properties["LOW_TRADE_TIMESTAMP"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "MAPPED_INSTRUMENT"))) { #optional property not found
            $MAPPEDINSTRUMENT = $null
        } else {
            $MAPPEDINSTRUMENT = $JsonParameters.PSobject.Properties["MAPPED_INSTRUMENT"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "MARKET"))) { #optional property not found
            $MARKET = $null
        } else {
            $MARKET = $JsonParameters.PSobject.Properties["MARKET"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "OPEN"))) { #optional property not found
            $OPEN = $null
        } else {
            $OPEN = $JsonParameters.PSobject.Properties["OPEN"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "QUOTE"))) { #optional property not found
            $QUOTE = $null
        } else {
            $QUOTE = $JsonParameters.PSobject.Properties["QUOTE"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "QUOTE_VOLUME"))) { #optional property not found
            $QUOTEVOLUME = $null
        } else {
            $QUOTEVOLUME = $JsonParameters.PSobject.Properties["QUOTE_VOLUME"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "QUOTE_VOLUME_BUY"))) { #optional property not found
            $QUOTEVOLUMEBUY = $null
        } else {
            $QUOTEVOLUMEBUY = $JsonParameters.PSobject.Properties["QUOTE_VOLUME_BUY"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "QUOTE_VOLUME_SELL"))) { #optional property not found
            $QUOTEVOLUMESELL = $null
        } else {
            $QUOTEVOLUMESELL = $JsonParameters.PSobject.Properties["QUOTE_VOLUME_SELL"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "QUOTE_VOLUME_UNKNOWN"))) { #optional property not found
            $QUOTEVOLUMEUNKNOWN = $null
        } else {
            $QUOTEVOLUMEUNKNOWN = $JsonParameters.PSobject.Properties["QUOTE_VOLUME_UNKNOWN"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "TIMESTAMP"))) { #optional property not found
            $TIMESTAMP = $null
        } else {
            $TIMESTAMP = $JsonParameters.PSobject.Properties["TIMESTAMP"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "TOTAL_TRADES"))) { #optional property not found
            $TOTALTRADES = $null
        } else {
            $TOTALTRADES = $JsonParameters.PSobject.Properties["TOTAL_TRADES"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "TOTAL_TRADES_BUY"))) { #optional property not found
            $TOTALTRADESBUY = $null
        } else {
            $TOTALTRADESBUY = $JsonParameters.PSobject.Properties["TOTAL_TRADES_BUY"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "TOTAL_TRADES_SELL"))) { #optional property not found
            $TOTALTRADESSELL = $null
        } else {
            $TOTALTRADESSELL = $JsonParameters.PSobject.Properties["TOTAL_TRADES_SELL"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "TOTAL_TRADES_UNKNOWN"))) { #optional property not found
            $TOTALTRADESUNKNOWN = $null
        } else {
            $TOTALTRADESUNKNOWN = $JsonParameters.PSobject.Properties["TOTAL_TRADES_UNKNOWN"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "TYPE"))) { #optional property not found
            $TYPE = $null
        } else {
            $TYPE = $JsonParameters.PSobject.Properties["TYPE"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "UNIT"))) { #optional property not found
            $UNIT = $null
        } else {
            $UNIT = $JsonParameters.PSobject.Properties["UNIT"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "VOLUME"))) { #optional property not found
            $VOLUME = $null
        } else {
            $VOLUME = $JsonParameters.PSobject.Properties["VOLUME"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "VOLUME_BUY"))) { #optional property not found
            $VOLUMEBUY = $null
        } else {
            $VOLUMEBUY = $JsonParameters.PSobject.Properties["VOLUME_BUY"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "VOLUME_SELL"))) { #optional property not found
            $VOLUMESELL = $null
        } else {
            $VOLUMESELL = $JsonParameters.PSobject.Properties["VOLUME_SELL"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "VOLUME_UNKNOWN"))) { #optional property not found
            $VOLUMEUNKNOWN = $null
        } else {
            $VOLUMEUNKNOWN = $JsonParameters.PSobject.Properties["VOLUME_UNKNOWN"].value
        }

        $PSO = [PSCustomObject]@{
            "BASE" = ${BASE}
            "CLOSE" = ${CLOSE}
            "FIRST_TRADE_PRICE" = ${FIRSTTRADEPRICE}
            "FIRST_TRADE_TIMESTAMP" = ${FIRSTTRADETIMESTAMP}
            "HIGH" = ${HIGH}
            "HIGH_TRADE_PRICE" = ${HIGHTRADEPRICE}
            "HIGH_TRADE_TIMESTAMP" = ${HIGHTRADETIMESTAMP}
            "INSTRUMENT" = ${INSTRUMENT}
            "LAST_TRADE_PRICE" = ${LASTTRADEPRICE}
            "LAST_TRADE_TIMESTAMP" = ${LASTTRADETIMESTAMP}
            "LOW" = ${LOW}
            "LOW_TRADE_PRICE" = ${LOWTRADEPRICE}
            "LOW_TRADE_TIMESTAMP" = ${LOWTRADETIMESTAMP}
            "MAPPED_INSTRUMENT" = ${MAPPEDINSTRUMENT}
            "MARKET" = ${MARKET}
            "OPEN" = ${OPEN}
            "QUOTE" = ${QUOTE}
            "QUOTE_VOLUME" = ${QUOTEVOLUME}
            "QUOTE_VOLUME_BUY" = ${QUOTEVOLUMEBUY}
            "QUOTE_VOLUME_SELL" = ${QUOTEVOLUMESELL}
            "QUOTE_VOLUME_UNKNOWN" = ${QUOTEVOLUMEUNKNOWN}
            "TIMESTAMP" = ${TIMESTAMP}
            "TOTAL_TRADES" = ${TOTALTRADES}
            "TOTAL_TRADES_BUY" = ${TOTALTRADESBUY}
            "TOTAL_TRADES_SELL" = ${TOTALTRADESSELL}
            "TOTAL_TRADES_UNKNOWN" = ${TOTALTRADESUNKNOWN}
            "TYPE" = ${TYPE}
            "UNIT" = ${UNIT}
            "VOLUME" = ${VOLUME}
            "VOLUME_BUY" = ${VOLUMEBUY}
            "VOLUME_SELL" = ${VOLUMESELL}
            "VOLUME_UNKNOWN" = ${VOLUMEUNKNOWN}
        }

        return $PSO
    }

}

