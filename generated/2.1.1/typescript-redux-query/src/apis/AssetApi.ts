// tslint:disable
/**
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 * CryptoCompare is the world\'s leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: data@cryptocompare.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    GENERICRESPONSE,
    GENERICRESPONSEFromJSON,
    GENERICRESPONSEToJSON,
} from '../models';

export interface AssetV1DataByAddressRequest {
    address: string;
    chainSymbol: string;
    groups?: string;
}

export interface AssetV1DataByIdRequest {
    assetId: number;
    groups?: string;
}

export interface AssetV1DataBySymbolRequest {
    assetSymbol: string;
    groups?: string;
}

export interface AssetV1TopListRequest {
    page?: number;
    pageSize?: number;
    assetType?: string;
    sortBy?: AssetV1TopListSortByEnum;
    sortDirection?: AssetV1TopListSortDirectionEnum;
    groups?: string;
}


/**
 */
function assetV1DataByAddressRaw<T>(requestParameters: AssetV1DataByAddressRequest, requestConfig: runtime.TypedQueryConfig<T, GENERICRESPONSE> = {}): QueryConfig<T> {
    if (requestParameters.address === null || requestParameters.address === undefined) {
        throw new runtime.RequiredError('address','Required parameter requestParameters.address was null or undefined when calling assetV1DataByAddress.');
    }

    if (requestParameters.chainSymbol === null || requestParameters.chainSymbol === undefined) {
        throw new runtime.RequiredError('chainSymbol','Required parameter requestParameters.chainSymbol was null or undefined when calling assetV1DataByAddress.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.address !== undefined) {
        queryParameters['address'] = requestParameters.address;
    }


    if (requestParameters.chainSymbol !== undefined) {
        queryParameters['chain_symbol'] = requestParameters.chainSymbol;
    }


    if (requestParameters.groups !== undefined) {
        queryParameters['groups'] = requestParameters.groups;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/asset/v1/data/by/address`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GENERICRESPONSEFromJSON(body), text);
    }

    return config;
}

/**
*/
export function assetV1DataByAddress<T>(requestParameters: AssetV1DataByAddressRequest, requestConfig?: runtime.TypedQueryConfig<T, GENERICRESPONSE>): QueryConfig<T> {
    return assetV1DataByAddressRaw(requestParameters, requestConfig);
}

/**
 */
function assetV1DataByIdRaw<T>(requestParameters: AssetV1DataByIdRequest, requestConfig: runtime.TypedQueryConfig<T, GENERICRESPONSE> = {}): QueryConfig<T> {
    if (requestParameters.assetId === null || requestParameters.assetId === undefined) {
        throw new runtime.RequiredError('assetId','Required parameter requestParameters.assetId was null or undefined when calling assetV1DataById.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.assetId !== undefined) {
        queryParameters['asset_id'] = requestParameters.assetId;
    }


    if (requestParameters.groups !== undefined) {
        queryParameters['groups'] = requestParameters.groups;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/asset/v1/data/by/id`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GENERICRESPONSEFromJSON(body), text);
    }

    return config;
}

/**
*/
export function assetV1DataById<T>(requestParameters: AssetV1DataByIdRequest, requestConfig?: runtime.TypedQueryConfig<T, GENERICRESPONSE>): QueryConfig<T> {
    return assetV1DataByIdRaw(requestParameters, requestConfig);
}

/**
 */
function assetV1DataBySymbolRaw<T>(requestParameters: AssetV1DataBySymbolRequest, requestConfig: runtime.TypedQueryConfig<T, GENERICRESPONSE> = {}): QueryConfig<T> {
    if (requestParameters.assetSymbol === null || requestParameters.assetSymbol === undefined) {
        throw new runtime.RequiredError('assetSymbol','Required parameter requestParameters.assetSymbol was null or undefined when calling assetV1DataBySymbol.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.assetSymbol !== undefined) {
        queryParameters['asset_symbol'] = requestParameters.assetSymbol;
    }


    if (requestParameters.groups !== undefined) {
        queryParameters['groups'] = requestParameters.groups;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/asset/v1/data/by/symbol`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GENERICRESPONSEFromJSON(body), text);
    }

    return config;
}

/**
*/
export function assetV1DataBySymbol<T>(requestParameters: AssetV1DataBySymbolRequest, requestConfig?: runtime.TypedQueryConfig<T, GENERICRESPONSE>): QueryConfig<T> {
    return assetV1DataBySymbolRaw(requestParameters, requestConfig);
}

/**
 */
function assetV1TopListRaw<T>(requestParameters: AssetV1TopListRequest, requestConfig: runtime.TypedQueryConfig<T, GENERICRESPONSE> = {}): QueryConfig<T> {
    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.page !== undefined) {
        queryParameters['page'] = requestParameters.page;
    }


    if (requestParameters.pageSize !== undefined) {
        queryParameters['page_size'] = requestParameters.pageSize;
    }


    if (requestParameters.assetType !== undefined) {
        queryParameters['asset_type'] = requestParameters.assetType;
    }


    if (requestParameters.sortBy !== undefined) {
        queryParameters['sort_by'] = requestParameters.sortBy;
    }


    if (requestParameters.sortDirection !== undefined) {
        queryParameters['sort_direction'] = requestParameters.sortDirection;
    }


    if (requestParameters.groups !== undefined) {
        queryParameters['groups'] = requestParameters.groups;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/asset/v1/top/list`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GENERICRESPONSEFromJSON(body), text);
    }

    return config;
}

/**
*/
export function assetV1TopList<T>(requestParameters: AssetV1TopListRequest, requestConfig?: runtime.TypedQueryConfig<T, GENERICRESPONSE>): QueryConfig<T> {
    return assetV1TopListRaw(requestParameters, requestConfig);
}


/**
    * @export
    * @enum {string}
    */
export enum AssetV1TopListSortByEnum {
    CreatedOn = 'CREATED_ON',
    UpdatedOn = 'UPDATED_ON',
    Symbol = 'SYMBOL'
}
/**
    * @export
    * @enum {string}
    */
export enum AssetV1TopListSortDirectionEnum {
    Desc = 'DESC',
    Asc = 'ASC'
}
