// tslint:disable
/**
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 * CryptoCompare is the world\'s leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: data@cryptocompare.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    GENERICRESPONSE,
    GENERICRESPONSEFromJSON,
    GENERICRESPONSEToJSON,
} from '../models';

export interface OverviewV1HistoricalMarketcapAllAssetsDaysRequest {
    groups?: Array<string>;
    limit?: number;
    toTs?: number;
    aggregate?: number;
    fill?: boolean;
    responseFormat?: OverviewV1HistoricalMarketcapAllAssetsDaysResponseFormatEnum;
}

export interface OverviewV1HistoricalMarketcapAllAssetsHoursRequest {
    groups?: Array<string>;
    limit?: number;
    toTs?: number;
    aggregate?: number;
    fill?: boolean;
    responseFormat?: OverviewV1HistoricalMarketcapAllAssetsHoursResponseFormatEnum;
}

export interface OverviewV1HistoricalMarketcapFtwAssetsDaysRequest {
    groups?: Array<string>;
    limit?: number;
    toTs?: number;
    aggregate?: number;
    fill?: boolean;
    responseFormat?: OverviewV1HistoricalMarketcapFtwAssetsDaysResponseFormatEnum;
}

export interface OverviewV1HistoricalMarketcapFtwAssetsHoursRequest {
    groups?: Array<string>;
    limit?: number;
    toTs?: number;
    aggregate?: number;
    fill?: boolean;
    responseFormat?: OverviewV1HistoricalMarketcapFtwAssetsHoursResponseFormatEnum;
}

export interface OverviewV1LatestMarketcapAllTickRequest {
    groups?: Array<string>;
}

export interface OverviewV1LatestMarketcapFtwTickRequest {
    groups?: Array<string>;
}


/**
 */
function overviewV1HistoricalMarketcapAllAssetsDaysRaw<T>(requestParameters: OverviewV1HistoricalMarketcapAllAssetsDaysRequest, requestConfig: runtime.TypedQueryConfig<T, GENERICRESPONSE> = {}): QueryConfig<T> {
    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.groups) {
        queryParameters['groups'] = requestParameters.groups?.join(runtime.COLLECTION_FORMATS["csv"]);
    }


    if (requestParameters.limit !== undefined) {
        queryParameters['limit'] = requestParameters.limit;
    }


    if (requestParameters.toTs !== undefined) {
        queryParameters['to_ts'] = requestParameters.toTs;
    }


    if (requestParameters.aggregate !== undefined) {
        queryParameters['aggregate'] = requestParameters.aggregate;
    }


    if (requestParameters.fill !== undefined) {
        queryParameters['fill'] = requestParameters.fill;
    }


    if (requestParameters.responseFormat !== undefined) {
        queryParameters['response_format'] = requestParameters.responseFormat;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/overview/v1/historical/marketcap/all/assets/days`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GENERICRESPONSEFromJSON(body), text);
    }

    return config;
}

/**
*/
export function overviewV1HistoricalMarketcapAllAssetsDays<T>(requestParameters: OverviewV1HistoricalMarketcapAllAssetsDaysRequest, requestConfig?: runtime.TypedQueryConfig<T, GENERICRESPONSE>): QueryConfig<T> {
    return overviewV1HistoricalMarketcapAllAssetsDaysRaw(requestParameters, requestConfig);
}

/**
 */
function overviewV1HistoricalMarketcapAllAssetsHoursRaw<T>(requestParameters: OverviewV1HistoricalMarketcapAllAssetsHoursRequest, requestConfig: runtime.TypedQueryConfig<T, GENERICRESPONSE> = {}): QueryConfig<T> {
    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.groups) {
        queryParameters['groups'] = requestParameters.groups?.join(runtime.COLLECTION_FORMATS["csv"]);
    }


    if (requestParameters.limit !== undefined) {
        queryParameters['limit'] = requestParameters.limit;
    }


    if (requestParameters.toTs !== undefined) {
        queryParameters['to_ts'] = requestParameters.toTs;
    }


    if (requestParameters.aggregate !== undefined) {
        queryParameters['aggregate'] = requestParameters.aggregate;
    }


    if (requestParameters.fill !== undefined) {
        queryParameters['fill'] = requestParameters.fill;
    }


    if (requestParameters.responseFormat !== undefined) {
        queryParameters['response_format'] = requestParameters.responseFormat;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/overview/v1/historical/marketcap/all/assets/hours`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GENERICRESPONSEFromJSON(body), text);
    }

    return config;
}

/**
*/
export function overviewV1HistoricalMarketcapAllAssetsHours<T>(requestParameters: OverviewV1HistoricalMarketcapAllAssetsHoursRequest, requestConfig?: runtime.TypedQueryConfig<T, GENERICRESPONSE>): QueryConfig<T> {
    return overviewV1HistoricalMarketcapAllAssetsHoursRaw(requestParameters, requestConfig);
}

/**
 */
function overviewV1HistoricalMarketcapFtwAssetsDaysRaw<T>(requestParameters: OverviewV1HistoricalMarketcapFtwAssetsDaysRequest, requestConfig: runtime.TypedQueryConfig<T, GENERICRESPONSE> = {}): QueryConfig<T> {
    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.groups) {
        queryParameters['groups'] = requestParameters.groups?.join(runtime.COLLECTION_FORMATS["csv"]);
    }


    if (requestParameters.limit !== undefined) {
        queryParameters['limit'] = requestParameters.limit;
    }


    if (requestParameters.toTs !== undefined) {
        queryParameters['to_ts'] = requestParameters.toTs;
    }


    if (requestParameters.aggregate !== undefined) {
        queryParameters['aggregate'] = requestParameters.aggregate;
    }


    if (requestParameters.fill !== undefined) {
        queryParameters['fill'] = requestParameters.fill;
    }


    if (requestParameters.responseFormat !== undefined) {
        queryParameters['response_format'] = requestParameters.responseFormat;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/overview/v1/historical/marketcap/ftw/assets/days`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GENERICRESPONSEFromJSON(body), text);
    }

    return config;
}

/**
*/
export function overviewV1HistoricalMarketcapFtwAssetsDays<T>(requestParameters: OverviewV1HistoricalMarketcapFtwAssetsDaysRequest, requestConfig?: runtime.TypedQueryConfig<T, GENERICRESPONSE>): QueryConfig<T> {
    return overviewV1HistoricalMarketcapFtwAssetsDaysRaw(requestParameters, requestConfig);
}

/**
 */
function overviewV1HistoricalMarketcapFtwAssetsHoursRaw<T>(requestParameters: OverviewV1HistoricalMarketcapFtwAssetsHoursRequest, requestConfig: runtime.TypedQueryConfig<T, GENERICRESPONSE> = {}): QueryConfig<T> {
    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.groups) {
        queryParameters['groups'] = requestParameters.groups?.join(runtime.COLLECTION_FORMATS["csv"]);
    }


    if (requestParameters.limit !== undefined) {
        queryParameters['limit'] = requestParameters.limit;
    }


    if (requestParameters.toTs !== undefined) {
        queryParameters['to_ts'] = requestParameters.toTs;
    }


    if (requestParameters.aggregate !== undefined) {
        queryParameters['aggregate'] = requestParameters.aggregate;
    }


    if (requestParameters.fill !== undefined) {
        queryParameters['fill'] = requestParameters.fill;
    }


    if (requestParameters.responseFormat !== undefined) {
        queryParameters['response_format'] = requestParameters.responseFormat;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/overview/v1/historical/marketcap/ftw/assets/hours`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GENERICRESPONSEFromJSON(body), text);
    }

    return config;
}

/**
*/
export function overviewV1HistoricalMarketcapFtwAssetsHours<T>(requestParameters: OverviewV1HistoricalMarketcapFtwAssetsHoursRequest, requestConfig?: runtime.TypedQueryConfig<T, GENERICRESPONSE>): QueryConfig<T> {
    return overviewV1HistoricalMarketcapFtwAssetsHoursRaw(requestParameters, requestConfig);
}

/**
 */
function overviewV1LatestMarketcapAllTickRaw<T>(requestParameters: OverviewV1LatestMarketcapAllTickRequest, requestConfig: runtime.TypedQueryConfig<T, GENERICRESPONSE> = {}): QueryConfig<T> {
    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.groups) {
        queryParameters['groups'] = requestParameters.groups?.join(runtime.COLLECTION_FORMATS["csv"]);
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/overview/v1/latest/marketcap/all/tick`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GENERICRESPONSEFromJSON(body), text);
    }

    return config;
}

/**
*/
export function overviewV1LatestMarketcapAllTick<T>(requestParameters: OverviewV1LatestMarketcapAllTickRequest, requestConfig?: runtime.TypedQueryConfig<T, GENERICRESPONSE>): QueryConfig<T> {
    return overviewV1LatestMarketcapAllTickRaw(requestParameters, requestConfig);
}

/**
 */
function overviewV1LatestMarketcapFtwTickRaw<T>(requestParameters: OverviewV1LatestMarketcapFtwTickRequest, requestConfig: runtime.TypedQueryConfig<T, GENERICRESPONSE> = {}): QueryConfig<T> {
    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.groups) {
        queryParameters['groups'] = requestParameters.groups?.join(runtime.COLLECTION_FORMATS["csv"]);
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/overview/v1/latest/marketcap/ftw/tick`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GENERICRESPONSEFromJSON(body), text);
    }

    return config;
}

/**
*/
export function overviewV1LatestMarketcapFtwTick<T>(requestParameters: OverviewV1LatestMarketcapFtwTickRequest, requestConfig?: runtime.TypedQueryConfig<T, GENERICRESPONSE>): QueryConfig<T> {
    return overviewV1LatestMarketcapFtwTickRaw(requestParameters, requestConfig);
}


/**
    * @export
    * @enum {string}
    */
export enum OverviewV1HistoricalMarketcapAllAssetsDaysResponseFormatEnum {
    Json = 'JSON',
    Csv = 'CSV'
}
/**
    * @export
    * @enum {string}
    */
export enum OverviewV1HistoricalMarketcapAllAssetsHoursResponseFormatEnum {
    Json = 'JSON',
    Csv = 'CSV'
}
/**
    * @export
    * @enum {string}
    */
export enum OverviewV1HistoricalMarketcapFtwAssetsDaysResponseFormatEnum {
    Json = 'JSON',
    Csv = 'CSV'
}
/**
    * @export
    * @enum {string}
    */
export enum OverviewV1HistoricalMarketcapFtwAssetsHoursResponseFormatEnum {
    Json = 'JSON',
    Csv = 'CSV'
}
