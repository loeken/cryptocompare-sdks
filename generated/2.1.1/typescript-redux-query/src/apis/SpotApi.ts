// tslint:disable
/**
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 * CryptoCompare is the world\'s leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: data@cryptocompare.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    GENERICRESPONSE,
    GENERICRESPONSEFromJSON,
    GENERICRESPONSEToJSON,
    SPOTINSTRUMENTHISTODATARESPONSE,
    SPOTINSTRUMENTHISTODATARESPONSEFromJSON,
    SPOTINSTRUMENTHISTODATARESPONSEToJSON,
    SPOTINSTRUMENTMARKETDATARESPONSE,
    SPOTINSTRUMENTMARKETDATARESPONSEFromJSON,
    SPOTINSTRUMENTMARKETDATARESPONSEToJSON,
    SPOTINSTRUMENTMETADATARESPONSE,
    SPOTINSTRUMENTMETADATARESPONSEFromJSON,
    SPOTINSTRUMENTMETADATARESPONSEToJSON,
    SPOTINSTRUMENTTRADERESPONSE,
    SPOTINSTRUMENTTRADERESPONSEFromJSON,
    SPOTINSTRUMENTTRADERESPONSEToJSON,
} from '../models';

export interface SpotV1HistoricalDaysRequest {
    market: string;
    instrument: string;
    groups?: Array<string>;
    limit?: number;
    toTs?: number;
    aggregate?: number;
    fill?: boolean;
    mappingPriority?: SpotV1HistoricalDaysMappingPriorityEnum;
    responseFormat?: SpotV1HistoricalDaysResponseFormatEnum;
}

export interface SpotV1HistoricalHoursRequest {
    market: string;
    instrument: string;
    groups?: Array<string>;
    limit?: number;
    toTs?: number;
    aggregate?: number;
    fill?: boolean;
    mappingPriority?: SpotV1HistoricalHoursMappingPriorityEnum;
    responseFormat?: SpotV1HistoricalHoursResponseFormatEnum;
}

export interface SpotV1HistoricalMinutesRequest {
    market: string;
    instrument: string;
    groups?: Array<string>;
    limit?: number;
    toTs?: number;
    aggregate?: number;
    fill?: boolean;
    mappingPriority?: SpotV1HistoricalMinutesMappingPriorityEnum;
    responseFormat?: SpotV1HistoricalMinutesResponseFormatEnum;
}

export interface SpotV1HistoricalOrderbookL2SnapshotMinuteRequest {
    market: string;
    instrument: string;
    minuteTs: number;
    depth?: number;
    mappingPriority?: SpotV1HistoricalOrderbookL2SnapshotMinuteMappingPriorityEnum;
    responseFormat?: SpotV1HistoricalOrderbookL2SnapshotMinuteResponseFormatEnum;
}

export interface SpotV1HistoricalTradesRequest {
    market: string;
    instrument: string;
    afterTs?: number;
    lastCcseq?: number;
    limit?: number;
    mappingPriority?: SpotV1HistoricalTradesMappingPriorityEnum;
    responseFormat?: SpotV1HistoricalTradesResponseFormatEnum;
    return404OnEmptyResponse?: boolean;
}

export interface SpotV1HistoricalTradesHourRequest {
    market: string;
    instrument: string;
    hourTs?: number;
    mappingPriority?: SpotV1HistoricalTradesHourMappingPriorityEnum;
    responseFormat?: SpotV1HistoricalTradesHourResponseFormatEnum;
    return404OnEmptyResponse?: boolean;
}

export interface SpotV1LatestInstrumentMetadataRequest {
    market: string;
    instruments: Array<string>;
    groups?: Array<string>;
    mappingPriority?: SpotV1LatestInstrumentMetadataMappingPriorityEnum;
}

export interface SpotV1LatestTickRequest {
    market: string;
    instruments: Array<string>;
    groups?: Array<string>;
    mappingPriority?: SpotV1LatestTickMappingPriorityEnum;
}

export interface SpotV1MarketsRequest {
    market?: string;
}

export interface SpotV1MarketsInstrumentsRequest {
    market?: string;
    instrument?: string;
    instrumentStatus?: Array<SpotV1MarketsInstrumentsInstrumentStatusEnum>;
}

export interface SpotV1MarketsInstrumentsUnmappedRequest {
    market?: string;
    instrument?: string;
    instrumentStatus?: Array<SpotV1MarketsInstrumentsUnmappedInstrumentStatusEnum>;
}


/**
 */
function spotV1HistoricalDaysRaw<T>(requestParameters: SpotV1HistoricalDaysRequest, requestConfig: runtime.TypedQueryConfig<T, SPOTINSTRUMENTHISTODATARESPONSE> = {}): QueryConfig<T> {
    if (requestParameters.market === null || requestParameters.market === undefined) {
        throw new runtime.RequiredError('market','Required parameter requestParameters.market was null or undefined when calling spotV1HistoricalDays.');
    }

    if (requestParameters.instrument === null || requestParameters.instrument === undefined) {
        throw new runtime.RequiredError('instrument','Required parameter requestParameters.instrument was null or undefined when calling spotV1HistoricalDays.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.market !== undefined) {
        queryParameters['market'] = requestParameters.market;
    }


    if (requestParameters.instrument !== undefined) {
        queryParameters['instrument'] = requestParameters.instrument;
    }


    if (requestParameters.groups) {
        queryParameters['groups'] = requestParameters.groups?.join(runtime.COLLECTION_FORMATS["csv"]);
    }


    if (requestParameters.limit !== undefined) {
        queryParameters['limit'] = requestParameters.limit;
    }


    if (requestParameters.toTs !== undefined) {
        queryParameters['to_ts'] = requestParameters.toTs;
    }


    if (requestParameters.aggregate !== undefined) {
        queryParameters['aggregate'] = requestParameters.aggregate;
    }


    if (requestParameters.fill !== undefined) {
        queryParameters['fill'] = requestParameters.fill;
    }


    if (requestParameters.mappingPriority !== undefined) {
        queryParameters['mapping_priority'] = requestParameters.mappingPriority;
    }


    if (requestParameters.responseFormat !== undefined) {
        queryParameters['response_format'] = requestParameters.responseFormat;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/spot/v1/historical/days`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SPOTINSTRUMENTHISTODATARESPONSEFromJSON(body), text);
    }

    return config;
}

/**
*/
export function spotV1HistoricalDays<T>(requestParameters: SpotV1HistoricalDaysRequest, requestConfig?: runtime.TypedQueryConfig<T, SPOTINSTRUMENTHISTODATARESPONSE>): QueryConfig<T> {
    return spotV1HistoricalDaysRaw(requestParameters, requestConfig);
}

/**
 */
function spotV1HistoricalHoursRaw<T>(requestParameters: SpotV1HistoricalHoursRequest, requestConfig: runtime.TypedQueryConfig<T, SPOTINSTRUMENTHISTODATARESPONSE> = {}): QueryConfig<T> {
    if (requestParameters.market === null || requestParameters.market === undefined) {
        throw new runtime.RequiredError('market','Required parameter requestParameters.market was null or undefined when calling spotV1HistoricalHours.');
    }

    if (requestParameters.instrument === null || requestParameters.instrument === undefined) {
        throw new runtime.RequiredError('instrument','Required parameter requestParameters.instrument was null or undefined when calling spotV1HistoricalHours.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.market !== undefined) {
        queryParameters['market'] = requestParameters.market;
    }


    if (requestParameters.instrument !== undefined) {
        queryParameters['instrument'] = requestParameters.instrument;
    }


    if (requestParameters.groups) {
        queryParameters['groups'] = requestParameters.groups?.join(runtime.COLLECTION_FORMATS["csv"]);
    }


    if (requestParameters.limit !== undefined) {
        queryParameters['limit'] = requestParameters.limit;
    }


    if (requestParameters.toTs !== undefined) {
        queryParameters['to_ts'] = requestParameters.toTs;
    }


    if (requestParameters.aggregate !== undefined) {
        queryParameters['aggregate'] = requestParameters.aggregate;
    }


    if (requestParameters.fill !== undefined) {
        queryParameters['fill'] = requestParameters.fill;
    }


    if (requestParameters.mappingPriority !== undefined) {
        queryParameters['mapping_priority'] = requestParameters.mappingPriority;
    }


    if (requestParameters.responseFormat !== undefined) {
        queryParameters['response_format'] = requestParameters.responseFormat;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/spot/v1/historical/hours`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SPOTINSTRUMENTHISTODATARESPONSEFromJSON(body), text);
    }

    return config;
}

/**
*/
export function spotV1HistoricalHours<T>(requestParameters: SpotV1HistoricalHoursRequest, requestConfig?: runtime.TypedQueryConfig<T, SPOTINSTRUMENTHISTODATARESPONSE>): QueryConfig<T> {
    return spotV1HistoricalHoursRaw(requestParameters, requestConfig);
}

/**
 */
function spotV1HistoricalMinutesRaw<T>(requestParameters: SpotV1HistoricalMinutesRequest, requestConfig: runtime.TypedQueryConfig<T, SPOTINSTRUMENTHISTODATARESPONSE> = {}): QueryConfig<T> {
    if (requestParameters.market === null || requestParameters.market === undefined) {
        throw new runtime.RequiredError('market','Required parameter requestParameters.market was null or undefined when calling spotV1HistoricalMinutes.');
    }

    if (requestParameters.instrument === null || requestParameters.instrument === undefined) {
        throw new runtime.RequiredError('instrument','Required parameter requestParameters.instrument was null or undefined when calling spotV1HistoricalMinutes.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.market !== undefined) {
        queryParameters['market'] = requestParameters.market;
    }


    if (requestParameters.instrument !== undefined) {
        queryParameters['instrument'] = requestParameters.instrument;
    }


    if (requestParameters.groups) {
        queryParameters['groups'] = requestParameters.groups?.join(runtime.COLLECTION_FORMATS["csv"]);
    }


    if (requestParameters.limit !== undefined) {
        queryParameters['limit'] = requestParameters.limit;
    }


    if (requestParameters.toTs !== undefined) {
        queryParameters['to_ts'] = requestParameters.toTs;
    }


    if (requestParameters.aggregate !== undefined) {
        queryParameters['aggregate'] = requestParameters.aggregate;
    }


    if (requestParameters.fill !== undefined) {
        queryParameters['fill'] = requestParameters.fill;
    }


    if (requestParameters.mappingPriority !== undefined) {
        queryParameters['mapping_priority'] = requestParameters.mappingPriority;
    }


    if (requestParameters.responseFormat !== undefined) {
        queryParameters['response_format'] = requestParameters.responseFormat;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/spot/v1/historical/minutes`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SPOTINSTRUMENTHISTODATARESPONSEFromJSON(body), text);
    }

    return config;
}

/**
*/
export function spotV1HistoricalMinutes<T>(requestParameters: SpotV1HistoricalMinutesRequest, requestConfig?: runtime.TypedQueryConfig<T, SPOTINSTRUMENTHISTODATARESPONSE>): QueryConfig<T> {
    return spotV1HistoricalMinutesRaw(requestParameters, requestConfig);
}

/**
 */
function spotV1HistoricalOrderbookL2SnapshotMinuteRaw<T>(requestParameters: SpotV1HistoricalOrderbookL2SnapshotMinuteRequest, requestConfig: runtime.TypedQueryConfig<T, GENERICRESPONSE> = {}): QueryConfig<T> {
    if (requestParameters.market === null || requestParameters.market === undefined) {
        throw new runtime.RequiredError('market','Required parameter requestParameters.market was null or undefined when calling spotV1HistoricalOrderbookL2SnapshotMinute.');
    }

    if (requestParameters.instrument === null || requestParameters.instrument === undefined) {
        throw new runtime.RequiredError('instrument','Required parameter requestParameters.instrument was null or undefined when calling spotV1HistoricalOrderbookL2SnapshotMinute.');
    }

    if (requestParameters.minuteTs === null || requestParameters.minuteTs === undefined) {
        throw new runtime.RequiredError('minuteTs','Required parameter requestParameters.minuteTs was null or undefined when calling spotV1HistoricalOrderbookL2SnapshotMinute.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.market !== undefined) {
        queryParameters['market'] = requestParameters.market;
    }


    if (requestParameters.instrument !== undefined) {
        queryParameters['instrument'] = requestParameters.instrument;
    }


    if (requestParameters.minuteTs !== undefined) {
        queryParameters['minute_ts'] = requestParameters.minuteTs;
    }


    if (requestParameters.depth !== undefined) {
        queryParameters['depth'] = requestParameters.depth;
    }


    if (requestParameters.mappingPriority !== undefined) {
        queryParameters['mapping_priority'] = requestParameters.mappingPriority;
    }


    if (requestParameters.responseFormat !== undefined) {
        queryParameters['response_format'] = requestParameters.responseFormat;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['api_key', 'header'];
    meta.authType = ['api_key', 'query'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/spot/v1/historical/orderbook/l2/snapshot/minute`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GENERICRESPONSEFromJSON(body), text);
    }

    return config;
}

/**
*/
export function spotV1HistoricalOrderbookL2SnapshotMinute<T>(requestParameters: SpotV1HistoricalOrderbookL2SnapshotMinuteRequest, requestConfig?: runtime.TypedQueryConfig<T, GENERICRESPONSE>): QueryConfig<T> {
    return spotV1HistoricalOrderbookL2SnapshotMinuteRaw(requestParameters, requestConfig);
}

/**
 */
function spotV1HistoricalTradesRaw<T>(requestParameters: SpotV1HistoricalTradesRequest, requestConfig: runtime.TypedQueryConfig<T, SPOTINSTRUMENTTRADERESPONSE> = {}): QueryConfig<T> {
    if (requestParameters.market === null || requestParameters.market === undefined) {
        throw new runtime.RequiredError('market','Required parameter requestParameters.market was null or undefined when calling spotV1HistoricalTrades.');
    }

    if (requestParameters.instrument === null || requestParameters.instrument === undefined) {
        throw new runtime.RequiredError('instrument','Required parameter requestParameters.instrument was null or undefined when calling spotV1HistoricalTrades.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.market !== undefined) {
        queryParameters['market'] = requestParameters.market;
    }


    if (requestParameters.instrument !== undefined) {
        queryParameters['instrument'] = requestParameters.instrument;
    }


    if (requestParameters.afterTs !== undefined) {
        queryParameters['after_ts'] = requestParameters.afterTs;
    }


    if (requestParameters.lastCcseq !== undefined) {
        queryParameters['last_ccseq'] = requestParameters.lastCcseq;
    }


    if (requestParameters.limit !== undefined) {
        queryParameters['limit'] = requestParameters.limit;
    }


    if (requestParameters.mappingPriority !== undefined) {
        queryParameters['mapping_priority'] = requestParameters.mappingPriority;
    }


    if (requestParameters.responseFormat !== undefined) {
        queryParameters['response_format'] = requestParameters.responseFormat;
    }


    if (requestParameters.return404OnEmptyResponse !== undefined) {
        queryParameters['return_404_on_empty_response'] = requestParameters.return404OnEmptyResponse;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['api_key', 'header'];
    meta.authType = ['api_key', 'query'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/spot/v1/historical/trades`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SPOTINSTRUMENTTRADERESPONSEFromJSON(body), text);
    }

    return config;
}

/**
*/
export function spotV1HistoricalTrades<T>(requestParameters: SpotV1HistoricalTradesRequest, requestConfig?: runtime.TypedQueryConfig<T, SPOTINSTRUMENTTRADERESPONSE>): QueryConfig<T> {
    return spotV1HistoricalTradesRaw(requestParameters, requestConfig);
}

/**
 */
function spotV1HistoricalTradesHourRaw<T>(requestParameters: SpotV1HistoricalTradesHourRequest, requestConfig: runtime.TypedQueryConfig<T, SPOTINSTRUMENTTRADERESPONSE> = {}): QueryConfig<T> {
    if (requestParameters.market === null || requestParameters.market === undefined) {
        throw new runtime.RequiredError('market','Required parameter requestParameters.market was null or undefined when calling spotV1HistoricalTradesHour.');
    }

    if (requestParameters.instrument === null || requestParameters.instrument === undefined) {
        throw new runtime.RequiredError('instrument','Required parameter requestParameters.instrument was null or undefined when calling spotV1HistoricalTradesHour.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.market !== undefined) {
        queryParameters['market'] = requestParameters.market;
    }


    if (requestParameters.instrument !== undefined) {
        queryParameters['instrument'] = requestParameters.instrument;
    }


    if (requestParameters.hourTs !== undefined) {
        queryParameters['hour_ts'] = requestParameters.hourTs;
    }


    if (requestParameters.mappingPriority !== undefined) {
        queryParameters['mapping_priority'] = requestParameters.mappingPriority;
    }


    if (requestParameters.responseFormat !== undefined) {
        queryParameters['response_format'] = requestParameters.responseFormat;
    }


    if (requestParameters.return404OnEmptyResponse !== undefined) {
        queryParameters['return_404_on_empty_response'] = requestParameters.return404OnEmptyResponse;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['api_key', 'header'];
    meta.authType = ['api_key', 'query'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/spot/v1/historical/trades/hour`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SPOTINSTRUMENTTRADERESPONSEFromJSON(body), text);
    }

    return config;
}

/**
*/
export function spotV1HistoricalTradesHour<T>(requestParameters: SpotV1HistoricalTradesHourRequest, requestConfig?: runtime.TypedQueryConfig<T, SPOTINSTRUMENTTRADERESPONSE>): QueryConfig<T> {
    return spotV1HistoricalTradesHourRaw(requestParameters, requestConfig);
}

/**
 */
function spotV1LatestInstrumentMetadataRaw<T>(requestParameters: SpotV1LatestInstrumentMetadataRequest, requestConfig: runtime.TypedQueryConfig<T, SPOTINSTRUMENTMETADATARESPONSE> = {}): QueryConfig<T> {
    if (requestParameters.market === null || requestParameters.market === undefined) {
        throw new runtime.RequiredError('market','Required parameter requestParameters.market was null or undefined when calling spotV1LatestInstrumentMetadata.');
    }

    if (requestParameters.instruments === null || requestParameters.instruments === undefined) {
        throw new runtime.RequiredError('instruments','Required parameter requestParameters.instruments was null or undefined when calling spotV1LatestInstrumentMetadata.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.market !== undefined) {
        queryParameters['market'] = requestParameters.market;
    }


    if (requestParameters.instruments) {
        queryParameters['instruments'] = requestParameters.instruments?.join(runtime.COLLECTION_FORMATS["csv"]);
    }


    if (requestParameters.groups) {
        queryParameters['groups'] = requestParameters.groups?.join(runtime.COLLECTION_FORMATS["csv"]);
    }


    if (requestParameters.mappingPriority !== undefined) {
        queryParameters['mapping_priority'] = requestParameters.mappingPriority;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/spot/v1/latest/instrument/metadata`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SPOTINSTRUMENTMETADATARESPONSEFromJSON(body), text);
    }

    return config;
}

/**
*/
export function spotV1LatestInstrumentMetadata<T>(requestParameters: SpotV1LatestInstrumentMetadataRequest, requestConfig?: runtime.TypedQueryConfig<T, SPOTINSTRUMENTMETADATARESPONSE>): QueryConfig<T> {
    return spotV1LatestInstrumentMetadataRaw(requestParameters, requestConfig);
}

/**
 */
function spotV1LatestTickRaw<T>(requestParameters: SpotV1LatestTickRequest, requestConfig: runtime.TypedQueryConfig<T, SPOTINSTRUMENTMARKETDATARESPONSE> = {}): QueryConfig<T> {
    if (requestParameters.market === null || requestParameters.market === undefined) {
        throw new runtime.RequiredError('market','Required parameter requestParameters.market was null or undefined when calling spotV1LatestTick.');
    }

    if (requestParameters.instruments === null || requestParameters.instruments === undefined) {
        throw new runtime.RequiredError('instruments','Required parameter requestParameters.instruments was null or undefined when calling spotV1LatestTick.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.market !== undefined) {
        queryParameters['market'] = requestParameters.market;
    }


    if (requestParameters.instruments) {
        queryParameters['instruments'] = requestParameters.instruments?.join(runtime.COLLECTION_FORMATS["csv"]);
    }


    if (requestParameters.groups) {
        queryParameters['groups'] = requestParameters.groups?.join(runtime.COLLECTION_FORMATS["csv"]);
    }


    if (requestParameters.mappingPriority !== undefined) {
        queryParameters['mapping_priority'] = requestParameters.mappingPriority;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/spot/v1/latest/tick`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SPOTINSTRUMENTMARKETDATARESPONSEFromJSON(body), text);
    }

    return config;
}

/**
*/
export function spotV1LatestTick<T>(requestParameters: SpotV1LatestTickRequest, requestConfig?: runtime.TypedQueryConfig<T, SPOTINSTRUMENTMARKETDATARESPONSE>): QueryConfig<T> {
    return spotV1LatestTickRaw(requestParameters, requestConfig);
}

/**
 */
function spotV1MarketsRaw<T>(requestParameters: SpotV1MarketsRequest, requestConfig: runtime.TypedQueryConfig<T, GENERICRESPONSE> = {}): QueryConfig<T> {
    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.market !== undefined) {
        queryParameters['market'] = requestParameters.market;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/spot/v1/markets`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GENERICRESPONSEFromJSON(body), text);
    }

    return config;
}

/**
*/
export function spotV1Markets<T>(requestParameters: SpotV1MarketsRequest, requestConfig?: runtime.TypedQueryConfig<T, GENERICRESPONSE>): QueryConfig<T> {
    return spotV1MarketsRaw(requestParameters, requestConfig);
}

/**
 */
function spotV1MarketsInstrumentsRaw<T>(requestParameters: SpotV1MarketsInstrumentsRequest, requestConfig: runtime.TypedQueryConfig<T, GENERICRESPONSE> = {}): QueryConfig<T> {
    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.market !== undefined) {
        queryParameters['market'] = requestParameters.market;
    }


    if (requestParameters.instrument !== undefined) {
        queryParameters['instrument'] = requestParameters.instrument;
    }


    if (requestParameters.instrumentStatus) {
        queryParameters['instrument_status'] = requestParameters.instrumentStatus?.join(runtime.COLLECTION_FORMATS["csv"]);
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/spot/v1/markets/instruments`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GENERICRESPONSEFromJSON(body), text);
    }

    return config;
}

/**
*/
export function spotV1MarketsInstruments<T>(requestParameters: SpotV1MarketsInstrumentsRequest, requestConfig?: runtime.TypedQueryConfig<T, GENERICRESPONSE>): QueryConfig<T> {
    return spotV1MarketsInstrumentsRaw(requestParameters, requestConfig);
}

/**
 */
function spotV1MarketsInstrumentsUnmappedRaw<T>(requestParameters: SpotV1MarketsInstrumentsUnmappedRequest, requestConfig: runtime.TypedQueryConfig<T, GENERICRESPONSE> = {}): QueryConfig<T> {
    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.market !== undefined) {
        queryParameters['market'] = requestParameters.market;
    }


    if (requestParameters.instrument !== undefined) {
        queryParameters['instrument'] = requestParameters.instrument;
    }


    if (requestParameters.instrumentStatus) {
        queryParameters['instrument_status'] = requestParameters.instrumentStatus?.join(runtime.COLLECTION_FORMATS["csv"]);
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/spot/v1/markets/instruments/unmapped`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GENERICRESPONSEFromJSON(body), text);
    }

    return config;
}

/**
*/
export function spotV1MarketsInstrumentsUnmapped<T>(requestParameters: SpotV1MarketsInstrumentsUnmappedRequest, requestConfig?: runtime.TypedQueryConfig<T, GENERICRESPONSE>): QueryConfig<T> {
    return spotV1MarketsInstrumentsUnmappedRaw(requestParameters, requestConfig);
}


/**
    * @export
    * @enum {string}
    */
export enum SpotV1HistoricalDaysMappingPriorityEnum {
    MappedFirst = 'CHECK_MAPPED_FIRST',
    UnmappedFirst = 'CHECK_UNMAPPED_FIRST'
}
/**
    * @export
    * @enum {string}
    */
export enum SpotV1HistoricalDaysResponseFormatEnum {
    Json = 'JSON',
    Csv = 'CSV'
}
/**
    * @export
    * @enum {string}
    */
export enum SpotV1HistoricalHoursMappingPriorityEnum {
    MappedFirst = 'CHECK_MAPPED_FIRST',
    UnmappedFirst = 'CHECK_UNMAPPED_FIRST'
}
/**
    * @export
    * @enum {string}
    */
export enum SpotV1HistoricalHoursResponseFormatEnum {
    Json = 'JSON',
    Csv = 'CSV'
}
/**
    * @export
    * @enum {string}
    */
export enum SpotV1HistoricalMinutesMappingPriorityEnum {
    MappedFirst = 'CHECK_MAPPED_FIRST',
    UnmappedFirst = 'CHECK_UNMAPPED_FIRST'
}
/**
    * @export
    * @enum {string}
    */
export enum SpotV1HistoricalMinutesResponseFormatEnum {
    Json = 'JSON',
    Csv = 'CSV'
}
/**
    * @export
    * @enum {string}
    */
export enum SpotV1HistoricalOrderbookL2SnapshotMinuteMappingPriorityEnum {
    MappedFirst = 'CHECK_MAPPED_FIRST',
    UnmappedFirst = 'CHECK_UNMAPPED_FIRST'
}
/**
    * @export
    * @enum {string}
    */
export enum SpotV1HistoricalOrderbookL2SnapshotMinuteResponseFormatEnum {
    Json = 'JSON',
    Csv = 'CSV'
}
/**
    * @export
    * @enum {string}
    */
export enum SpotV1HistoricalTradesMappingPriorityEnum {
    MappedFirst = 'CHECK_MAPPED_FIRST',
    UnmappedFirst = 'CHECK_UNMAPPED_FIRST'
}
/**
    * @export
    * @enum {string}
    */
export enum SpotV1HistoricalTradesResponseFormatEnum {
    Json = 'JSON',
    Csv = 'CSV'
}
/**
    * @export
    * @enum {string}
    */
export enum SpotV1HistoricalTradesHourMappingPriorityEnum {
    MappedFirst = 'CHECK_MAPPED_FIRST',
    UnmappedFirst = 'CHECK_UNMAPPED_FIRST'
}
/**
    * @export
    * @enum {string}
    */
export enum SpotV1HistoricalTradesHourResponseFormatEnum {
    Json = 'JSON',
    Csv = 'CSV'
}
/**
    * @export
    * @enum {string}
    */
export enum SpotV1LatestInstrumentMetadataMappingPriorityEnum {
    MappedFirst = 'CHECK_MAPPED_FIRST',
    UnmappedFirst = 'CHECK_UNMAPPED_FIRST'
}
/**
    * @export
    * @enum {string}
    */
export enum SpotV1LatestTickMappingPriorityEnum {
    MappedFirst = 'CHECK_MAPPED_FIRST',
    UnmappedFirst = 'CHECK_UNMAPPED_FIRST'
}
/**
    * @export
    * @enum {string}
    */
export enum SpotV1MarketsInstrumentsInstrumentStatusEnum {
    Active = 'ACTIVE',
    Ignored = 'IGNORED',
    Retired = 'RETIRED',
    Expired = 'EXPIRED'
}
/**
    * @export
    * @enum {string}
    */
export enum SpotV1MarketsInstrumentsUnmappedInstrumentStatusEnum {
    Active = 'ACTIVE',
    Ignored = 'IGNORED',
    Retired = 'RETIRED',
    Expired = 'EXPIRED'
}
