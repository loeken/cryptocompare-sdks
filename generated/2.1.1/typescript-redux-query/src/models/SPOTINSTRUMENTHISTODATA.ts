// tslint:disable
/**
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 * CryptoCompare is the world\'s leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: data@cryptocompare.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface SPOTINSTRUMENTHISTODATA
 */
export interface SPOTINSTRUMENTHISTODATA  {
    /**
     * The mapped from asset (base / symbol/ coin) (e.g. BTC). Only available on instruments that have mapping.
     * @type {string}
     * @memberof SPOTINSTRUMENTHISTODATA
     */
    bASE?: string;
    /**
     * The price of the last trade in this time period. If there were no trades in the time period, the open price will be given.
     * @type {number}
     * @memberof SPOTINSTRUMENTHISTODATA
     */
    cLOSE?: number;
    /**
     * The price of the first trade in the time period. This is only available when there is at least one trade in the time period.
     * @type {number}
     * @memberof SPOTINSTRUMENTHISTODATA
     */
    fIRSTTRADEPRICE?: number;
    /**
     * The timestamp, in seconds, of the first trade in this time perio. This is only available when there is at least one trade in the time period.
     * @type {number}
     * @memberof SPOTINSTRUMENTHISTODATA
     */
    fIRSTTRADETIMESTAMP?: number;
    /**
     * The highest trade price in the time period. If there were no trades in the time period, the open price will be given.
     * @type {number}
     * @memberof SPOTINSTRUMENTHISTODATA
     */
    hIGH?: number;
    /**
     * The highest value of the trades in the time period. This is only available when there is at least one trade in the time period.
     * @type {number}
     * @memberof SPOTINSTRUMENTHISTODATA
     */
    hIGHTRADEPRICE?: number;
    /**
     * The timestamp, in seconds, of the highest trade in the time period. This is only available when there is at least one trade in the time period.
     * @type {number}
     * @memberof SPOTINSTRUMENTHISTODATA
     */
    hIGHTRADETIMESTAMP?: number;
    /**
     * The unmapped instrument ID
     * @type {string}
     * @memberof SPOTINSTRUMENTHISTODATA
     */
    iNSTRUMENT?: string;
    /**
     * The last trade price in the time period. This is only available when there is at least one trade in the time period.
     * @type {number}
     * @memberof SPOTINSTRUMENTHISTODATA
     */
    lASTTRADEPRICE?: number;
    /**
     * The timestamp, in seconds, of the last trade in this time period. This is only available when there is at least one trade in the time period.
     * @type {number}
     * @memberof SPOTINSTRUMENTHISTODATA
     */
    lASTTRADETIMESTAMP?: number;
    /**
     * The lowest trade price in the time period. If there were no trades in the time period, the open price will be given.
     * @type {number}
     * @memberof SPOTINSTRUMENTHISTODATA
     */
    lOW?: number;
    /**
     * The lowest value of the trades in the time period. This is only available when there is at least one trade in the time period.
     * @type {number}
     * @memberof SPOTINSTRUMENTHISTODATA
     */
    lOWTRADEPRICE?: number;
    /**
     * The timestamp, in seconds, of the lowest trade in the time period. This is only available when there is at least one trade in the time period.
     * @type {number}
     * @memberof SPOTINSTRUMENTHISTODATA
     */
    lOWTRADETIMESTAMP?: number;
    /**
     * The instrument ID, as derived from our mapping rules. This takes the form \"BASE-QUOTE\" (e.g. BTC-USD). Only available on instruments that have been mapped.
     * @type {string}
     * @memberof SPOTINSTRUMENTHISTODATA
     */
    mAPPEDINSTRUMENT?: string;
    /**
     * The market / exchange under consideration (e.g. gemini, kraken, coinbase, etc).
     * @type {string}
     * @memberof SPOTINSTRUMENTHISTODATA
     */
    mARKET?: string;
    /**
     * The open price for the historical period, this is based on the closest trade before the period start.
     * @type {number}
     * @memberof SPOTINSTRUMENTHISTODATA
     */
    oPEN?: number;
    /**
     * The mapped to asset (quote / counter symbol / coin) (e.g. USD). Only available on instruments that have mapping.
     * @type {string}
     * @memberof SPOTINSTRUMENTHISTODATA
     */
    qUOTE?: string;
    /**
     * The sum of all the trade volumes in the To asset (quote/counter symbol/coin) for the time period. If there were no trades in the time period, 0 will be returned.
     * @type {number}
     * @memberof SPOTINSTRUMENTHISTODATA
     */
    qUOTEVOLUME?: number;
    /**
     * The sum of all the BUY trade volumes in the to asset (quote/counter symbol/coin) for the time period.
     * @type {number}
     * @memberof SPOTINSTRUMENTHISTODATA
     */
    qUOTEVOLUMEBUY?: number;
    /**
     * The sum of all the SELL trade volumes in the To asset (quote/counter symbol/coin) for the time period.
     * @type {number}
     * @memberof SPOTINSTRUMENTHISTODATA
     */
    qUOTEVOLUMESELL?: number;
    /**
     * The sum of all the UNKNOWN trade volumes in the To asset (quote/counter symbol/coin) for the time period.
     * @type {number}
     * @memberof SPOTINSTRUMENTHISTODATA
     */
    qUOTEVOLUMEUNKNOWN?: number;
    /**
     * The timestamp in seconds of the beginning of the histo period. For minute it would be every minute at the beginning of the minute, for hour it would be the start of the hour and for daily it is 00:00 GMT.
     * @type {number}
     * @memberof SPOTINSTRUMENTHISTODATA
     */
    tIMESTAMP?: number;
    /**
     * The total number of trades seen in this time period. If there were no trades in the time period, 0 will be returned.
     * @type {number}
     * @memberof SPOTINSTRUMENTHISTODATA
     */
    tOTALTRADES?: number;
    /**
     * The total number of BUY trades seen in this time period. If there were no trades in the time period, 0 will be returned.
     * @type {number}
     * @memberof SPOTINSTRUMENTHISTODATA
     */
    tOTALTRADESBUY?: number;
    /**
     * The total number of SELL trades seen in this time period. If there were no trades in the time period, 0 will be returned.
     * @type {number}
     * @memberof SPOTINSTRUMENTHISTODATA
     */
    tOTALTRADESSELL?: number;
    /**
     * The total number of UNKNOWN trades seen in this time period. If there were no trades in the time period, 0 will be returned.
     * @type {number}
     * @memberof SPOTINSTRUMENTHISTODATA
     */
    tOTALTRADESUNKNOWN?: number;
    /**
     * The type of the message.
     * @type {string}
     * @memberof SPOTINSTRUMENTHISTODATA
     */
    tYPE?: string;
    /**
     * The unit of the historical period update: MINUTE for minute, HOUR for hour and DAY for day.
     * @type {string}
     * @memberof SPOTINSTRUMENTHISTODATA
     */
    uNIT?: string;
    /**
     * The sum of all the trade volumes in the from asset (base symbol / coin) for the time period. If there were no trades in the time period, 0 will be returned.
     * @type {number}
     * @memberof SPOTINSTRUMENTHISTODATA
     */
    vOLUME?: number;
    /**
     * The sum of all the BUY trade volumes in the from asset (base symbol / coin) for the time period.
     * @type {number}
     * @memberof SPOTINSTRUMENTHISTODATA
     */
    vOLUMEBUY?: number;
    /**
     * The sum of all the SELL trade volumes in the from asset (base symbol / coin) for the time period.
     * @type {number}
     * @memberof SPOTINSTRUMENTHISTODATA
     */
    vOLUMESELL?: number;
    /**
     * The sum of all the UNKNOWN trade volumes in the from asset (base symbol / coin) for the time period.
     * @type {number}
     * @memberof SPOTINSTRUMENTHISTODATA
     */
    vOLUMEUNKNOWN?: number;
}

export function SPOTINSTRUMENTHISTODATAFromJSON(json: any): SPOTINSTRUMENTHISTODATA {
    return {
        'bASE': !exists(json, 'BASE') ? undefined : json['BASE'],
        'cLOSE': !exists(json, 'CLOSE') ? undefined : json['CLOSE'],
        'fIRSTTRADEPRICE': !exists(json, 'FIRST_TRADE_PRICE') ? undefined : json['FIRST_TRADE_PRICE'],
        'fIRSTTRADETIMESTAMP': !exists(json, 'FIRST_TRADE_TIMESTAMP') ? undefined : json['FIRST_TRADE_TIMESTAMP'],
        'hIGH': !exists(json, 'HIGH') ? undefined : json['HIGH'],
        'hIGHTRADEPRICE': !exists(json, 'HIGH_TRADE_PRICE') ? undefined : json['HIGH_TRADE_PRICE'],
        'hIGHTRADETIMESTAMP': !exists(json, 'HIGH_TRADE_TIMESTAMP') ? undefined : json['HIGH_TRADE_TIMESTAMP'],
        'iNSTRUMENT': !exists(json, 'INSTRUMENT') ? undefined : json['INSTRUMENT'],
        'lASTTRADEPRICE': !exists(json, 'LAST_TRADE_PRICE') ? undefined : json['LAST_TRADE_PRICE'],
        'lASTTRADETIMESTAMP': !exists(json, 'LAST_TRADE_TIMESTAMP') ? undefined : json['LAST_TRADE_TIMESTAMP'],
        'lOW': !exists(json, 'LOW') ? undefined : json['LOW'],
        'lOWTRADEPRICE': !exists(json, 'LOW_TRADE_PRICE') ? undefined : json['LOW_TRADE_PRICE'],
        'lOWTRADETIMESTAMP': !exists(json, 'LOW_TRADE_TIMESTAMP') ? undefined : json['LOW_TRADE_TIMESTAMP'],
        'mAPPEDINSTRUMENT': !exists(json, 'MAPPED_INSTRUMENT') ? undefined : json['MAPPED_INSTRUMENT'],
        'mARKET': !exists(json, 'MARKET') ? undefined : json['MARKET'],
        'oPEN': !exists(json, 'OPEN') ? undefined : json['OPEN'],
        'qUOTE': !exists(json, 'QUOTE') ? undefined : json['QUOTE'],
        'qUOTEVOLUME': !exists(json, 'QUOTE_VOLUME') ? undefined : json['QUOTE_VOLUME'],
        'qUOTEVOLUMEBUY': !exists(json, 'QUOTE_VOLUME_BUY') ? undefined : json['QUOTE_VOLUME_BUY'],
        'qUOTEVOLUMESELL': !exists(json, 'QUOTE_VOLUME_SELL') ? undefined : json['QUOTE_VOLUME_SELL'],
        'qUOTEVOLUMEUNKNOWN': !exists(json, 'QUOTE_VOLUME_UNKNOWN') ? undefined : json['QUOTE_VOLUME_UNKNOWN'],
        'tIMESTAMP': !exists(json, 'TIMESTAMP') ? undefined : json['TIMESTAMP'],
        'tOTALTRADES': !exists(json, 'TOTAL_TRADES') ? undefined : json['TOTAL_TRADES'],
        'tOTALTRADESBUY': !exists(json, 'TOTAL_TRADES_BUY') ? undefined : json['TOTAL_TRADES_BUY'],
        'tOTALTRADESSELL': !exists(json, 'TOTAL_TRADES_SELL') ? undefined : json['TOTAL_TRADES_SELL'],
        'tOTALTRADESUNKNOWN': !exists(json, 'TOTAL_TRADES_UNKNOWN') ? undefined : json['TOTAL_TRADES_UNKNOWN'],
        'tYPE': !exists(json, 'TYPE') ? undefined : json['TYPE'],
        'uNIT': !exists(json, 'UNIT') ? undefined : json['UNIT'],
        'vOLUME': !exists(json, 'VOLUME') ? undefined : json['VOLUME'],
        'vOLUMEBUY': !exists(json, 'VOLUME_BUY') ? undefined : json['VOLUME_BUY'],
        'vOLUMESELL': !exists(json, 'VOLUME_SELL') ? undefined : json['VOLUME_SELL'],
        'vOLUMEUNKNOWN': !exists(json, 'VOLUME_UNKNOWN') ? undefined : json['VOLUME_UNKNOWN'],
    };
}

export function SPOTINSTRUMENTHISTODATAToJSON(value?: SPOTINSTRUMENTHISTODATA): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'BASE': value.bASE,
        'CLOSE': value.cLOSE,
        'FIRST_TRADE_PRICE': value.fIRSTTRADEPRICE,
        'FIRST_TRADE_TIMESTAMP': value.fIRSTTRADETIMESTAMP,
        'HIGH': value.hIGH,
        'HIGH_TRADE_PRICE': value.hIGHTRADEPRICE,
        'HIGH_TRADE_TIMESTAMP': value.hIGHTRADETIMESTAMP,
        'INSTRUMENT': value.iNSTRUMENT,
        'LAST_TRADE_PRICE': value.lASTTRADEPRICE,
        'LAST_TRADE_TIMESTAMP': value.lASTTRADETIMESTAMP,
        'LOW': value.lOW,
        'LOW_TRADE_PRICE': value.lOWTRADEPRICE,
        'LOW_TRADE_TIMESTAMP': value.lOWTRADETIMESTAMP,
        'MAPPED_INSTRUMENT': value.mAPPEDINSTRUMENT,
        'MARKET': value.mARKET,
        'OPEN': value.oPEN,
        'QUOTE': value.qUOTE,
        'QUOTE_VOLUME': value.qUOTEVOLUME,
        'QUOTE_VOLUME_BUY': value.qUOTEVOLUMEBUY,
        'QUOTE_VOLUME_SELL': value.qUOTEVOLUMESELL,
        'QUOTE_VOLUME_UNKNOWN': value.qUOTEVOLUMEUNKNOWN,
        'TIMESTAMP': value.tIMESTAMP,
        'TOTAL_TRADES': value.tOTALTRADES,
        'TOTAL_TRADES_BUY': value.tOTALTRADESBUY,
        'TOTAL_TRADES_SELL': value.tOTALTRADESSELL,
        'TOTAL_TRADES_UNKNOWN': value.tOTALTRADESUNKNOWN,
        'TYPE': value.tYPE,
        'UNIT': value.uNIT,
        'VOLUME': value.vOLUME,
        'VOLUME_BUY': value.vOLUMEBUY,
        'VOLUME_SELL': value.vOLUMESELL,
        'VOLUME_UNKNOWN': value.vOLUMEUNKNOWN,
    };
}


