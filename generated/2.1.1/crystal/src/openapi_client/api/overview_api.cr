# #CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
#
##CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
#
#The version of the OpenAPI document: 2.1.1
#Contact: data@cryptocompare.com
#Generated by: https://openapi-generator.tech
#OpenAPI Generator version: 6.3.0-SNAPSHOT
#

require "uri"

module OpenAPIClient
  class OverviewApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # @return [GENERICRESPONSE]
    def overview_v1_historical_marketcap_all_assets_days(groups : Array(String)?, limit : Int32?, to_ts : Int32?, aggregate : Int32?, fill : Bool?, response_format : String?)
      data, _status_code, _headers = overview_v1_historical_marketcap_all_assets_days_with_http_info(groups, limit, to_ts, aggregate, fill, response_format)
      data
    end

    # @return [Array<(GENERICRESPONSE, Integer, Hash)>] GENERICRESPONSE data, response status code and response headers
    def overview_v1_historical_marketcap_all_assets_days_with_http_info(groups : Array(String)?, limit : Int32?, to_ts : Int32?, aggregate : Int32?, fill : Bool?, response_format : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: OverviewApi.overview_v1_historical_marketcap_all_assets_days ..."}
      end
      if @api_client.config.client_side_validation && !limit.nil? && limit > 2000
        raise ArgumentError.new("invalid value for \"limit\" when calling OverviewApi.overview_v1_historical_marketcap_all_assets_days, must be smaller than or equal to 2000.")
      end

      if @api_client.config.client_side_validation && !limit.nil? && limit < 1
        raise ArgumentError.new("invalid value for \"limit\" when calling OverviewApi.overview_v1_historical_marketcap_all_assets_days, must be greater than or equal to 1.")
      end

      if @api_client.config.client_side_validation && !aggregate.nil? && aggregate > 30
        raise ArgumentError.new("invalid value for \"aggregate\" when calling OverviewApi.overview_v1_historical_marketcap_all_assets_days, must be smaller than or equal to 30.")
      end

      if @api_client.config.client_side_validation && !aggregate.nil? && aggregate < 1
        raise ArgumentError.new("invalid value for \"aggregate\" when calling OverviewApi.overview_v1_historical_marketcap_all_assets_days, must be greater than or equal to 1.")
      end

      allowable_values = ["JSON", "CSV"]
      if @api_client.config.client_side_validation && response_format && !allowable_values.includes?(response_format)
        raise ArgumentError.new("invalid value for \"response_format\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/overview/v1/historical/marketcap/all/assets/days"

      # query parameters
      query_params = Hash(String, String).new
      query_params["groups"] = @api_client.build_collection_param(groups, :csv)
      query_params["limit"] = limit.to_s unless limit.nil?
      query_params["to_ts"] = to_ts.to_s unless to_ts.nil?
      query_params["aggregate"] = aggregate.to_s unless aggregate.nil?
      query_params["fill"] = fill.to_s unless fill.nil?
      query_params["response_format"] = response_format.to_s unless response_format.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "GENERICRESPONSE"

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"OverviewApi.overview_v1_historical_marketcap_all_assets_days",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: OverviewApi#overview_v1_historical_marketcap_all_assets_days\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GENERICRESPONSE.from_json(data), status_code, headers
    end

    # @return [GENERICRESPONSE]
    def overview_v1_historical_marketcap_all_assets_hours(groups : Array(String)?, limit : Int32?, to_ts : Int32?, aggregate : Int32?, fill : Bool?, response_format : String?)
      data, _status_code, _headers = overview_v1_historical_marketcap_all_assets_hours_with_http_info(groups, limit, to_ts, aggregate, fill, response_format)
      data
    end

    # @return [Array<(GENERICRESPONSE, Integer, Hash)>] GENERICRESPONSE data, response status code and response headers
    def overview_v1_historical_marketcap_all_assets_hours_with_http_info(groups : Array(String)?, limit : Int32?, to_ts : Int32?, aggregate : Int32?, fill : Bool?, response_format : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: OverviewApi.overview_v1_historical_marketcap_all_assets_hours ..."}
      end
      if @api_client.config.client_side_validation && !limit.nil? && limit > 2000
        raise ArgumentError.new("invalid value for \"limit\" when calling OverviewApi.overview_v1_historical_marketcap_all_assets_hours, must be smaller than or equal to 2000.")
      end

      if @api_client.config.client_side_validation && !limit.nil? && limit < 1
        raise ArgumentError.new("invalid value for \"limit\" when calling OverviewApi.overview_v1_historical_marketcap_all_assets_hours, must be greater than or equal to 1.")
      end

      if @api_client.config.client_side_validation && !aggregate.nil? && aggregate > 30
        raise ArgumentError.new("invalid value for \"aggregate\" when calling OverviewApi.overview_v1_historical_marketcap_all_assets_hours, must be smaller than or equal to 30.")
      end

      if @api_client.config.client_side_validation && !aggregate.nil? && aggregate < 1
        raise ArgumentError.new("invalid value for \"aggregate\" when calling OverviewApi.overview_v1_historical_marketcap_all_assets_hours, must be greater than or equal to 1.")
      end

      allowable_values = ["JSON", "CSV"]
      if @api_client.config.client_side_validation && response_format && !allowable_values.includes?(response_format)
        raise ArgumentError.new("invalid value for \"response_format\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/overview/v1/historical/marketcap/all/assets/hours"

      # query parameters
      query_params = Hash(String, String).new
      query_params["groups"] = @api_client.build_collection_param(groups, :csv)
      query_params["limit"] = limit.to_s unless limit.nil?
      query_params["to_ts"] = to_ts.to_s unless to_ts.nil?
      query_params["aggregate"] = aggregate.to_s unless aggregate.nil?
      query_params["fill"] = fill.to_s unless fill.nil?
      query_params["response_format"] = response_format.to_s unless response_format.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "GENERICRESPONSE"

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"OverviewApi.overview_v1_historical_marketcap_all_assets_hours",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: OverviewApi#overview_v1_historical_marketcap_all_assets_hours\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GENERICRESPONSE.from_json(data), status_code, headers
    end

    # @return [GENERICRESPONSE]
    def overview_v1_historical_marketcap_ftw_assets_days(groups : Array(String)?, limit : Int32?, to_ts : Int32?, aggregate : Int32?, fill : Bool?, response_format : String?)
      data, _status_code, _headers = overview_v1_historical_marketcap_ftw_assets_days_with_http_info(groups, limit, to_ts, aggregate, fill, response_format)
      data
    end

    # @return [Array<(GENERICRESPONSE, Integer, Hash)>] GENERICRESPONSE data, response status code and response headers
    def overview_v1_historical_marketcap_ftw_assets_days_with_http_info(groups : Array(String)?, limit : Int32?, to_ts : Int32?, aggregate : Int32?, fill : Bool?, response_format : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: OverviewApi.overview_v1_historical_marketcap_ftw_assets_days ..."}
      end
      if @api_client.config.client_side_validation && !limit.nil? && limit > 2000
        raise ArgumentError.new("invalid value for \"limit\" when calling OverviewApi.overview_v1_historical_marketcap_ftw_assets_days, must be smaller than or equal to 2000.")
      end

      if @api_client.config.client_side_validation && !limit.nil? && limit < 1
        raise ArgumentError.new("invalid value for \"limit\" when calling OverviewApi.overview_v1_historical_marketcap_ftw_assets_days, must be greater than or equal to 1.")
      end

      if @api_client.config.client_side_validation && !aggregate.nil? && aggregate > 30
        raise ArgumentError.new("invalid value for \"aggregate\" when calling OverviewApi.overview_v1_historical_marketcap_ftw_assets_days, must be smaller than or equal to 30.")
      end

      if @api_client.config.client_side_validation && !aggregate.nil? && aggregate < 1
        raise ArgumentError.new("invalid value for \"aggregate\" when calling OverviewApi.overview_v1_historical_marketcap_ftw_assets_days, must be greater than or equal to 1.")
      end

      allowable_values = ["JSON", "CSV"]
      if @api_client.config.client_side_validation && response_format && !allowable_values.includes?(response_format)
        raise ArgumentError.new("invalid value for \"response_format\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/overview/v1/historical/marketcap/ftw/assets/days"

      # query parameters
      query_params = Hash(String, String).new
      query_params["groups"] = @api_client.build_collection_param(groups, :csv)
      query_params["limit"] = limit.to_s unless limit.nil?
      query_params["to_ts"] = to_ts.to_s unless to_ts.nil?
      query_params["aggregate"] = aggregate.to_s unless aggregate.nil?
      query_params["fill"] = fill.to_s unless fill.nil?
      query_params["response_format"] = response_format.to_s unless response_format.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "GENERICRESPONSE"

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"OverviewApi.overview_v1_historical_marketcap_ftw_assets_days",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: OverviewApi#overview_v1_historical_marketcap_ftw_assets_days\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GENERICRESPONSE.from_json(data), status_code, headers
    end

    # @return [GENERICRESPONSE]
    def overview_v1_historical_marketcap_ftw_assets_hours(groups : Array(String)?, limit : Int32?, to_ts : Int32?, aggregate : Int32?, fill : Bool?, response_format : String?)
      data, _status_code, _headers = overview_v1_historical_marketcap_ftw_assets_hours_with_http_info(groups, limit, to_ts, aggregate, fill, response_format)
      data
    end

    # @return [Array<(GENERICRESPONSE, Integer, Hash)>] GENERICRESPONSE data, response status code and response headers
    def overview_v1_historical_marketcap_ftw_assets_hours_with_http_info(groups : Array(String)?, limit : Int32?, to_ts : Int32?, aggregate : Int32?, fill : Bool?, response_format : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: OverviewApi.overview_v1_historical_marketcap_ftw_assets_hours ..."}
      end
      if @api_client.config.client_side_validation && !limit.nil? && limit > 2000
        raise ArgumentError.new("invalid value for \"limit\" when calling OverviewApi.overview_v1_historical_marketcap_ftw_assets_hours, must be smaller than or equal to 2000.")
      end

      if @api_client.config.client_side_validation && !limit.nil? && limit < 1
        raise ArgumentError.new("invalid value for \"limit\" when calling OverviewApi.overview_v1_historical_marketcap_ftw_assets_hours, must be greater than or equal to 1.")
      end

      if @api_client.config.client_side_validation && !aggregate.nil? && aggregate > 30
        raise ArgumentError.new("invalid value for \"aggregate\" when calling OverviewApi.overview_v1_historical_marketcap_ftw_assets_hours, must be smaller than or equal to 30.")
      end

      if @api_client.config.client_side_validation && !aggregate.nil? && aggregate < 1
        raise ArgumentError.new("invalid value for \"aggregate\" when calling OverviewApi.overview_v1_historical_marketcap_ftw_assets_hours, must be greater than or equal to 1.")
      end

      allowable_values = ["JSON", "CSV"]
      if @api_client.config.client_side_validation && response_format && !allowable_values.includes?(response_format)
        raise ArgumentError.new("invalid value for \"response_format\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/overview/v1/historical/marketcap/ftw/assets/hours"

      # query parameters
      query_params = Hash(String, String).new
      query_params["groups"] = @api_client.build_collection_param(groups, :csv)
      query_params["limit"] = limit.to_s unless limit.nil?
      query_params["to_ts"] = to_ts.to_s unless to_ts.nil?
      query_params["aggregate"] = aggregate.to_s unless aggregate.nil?
      query_params["fill"] = fill.to_s unless fill.nil?
      query_params["response_format"] = response_format.to_s unless response_format.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "GENERICRESPONSE"

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"OverviewApi.overview_v1_historical_marketcap_ftw_assets_hours",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: OverviewApi#overview_v1_historical_marketcap_ftw_assets_hours\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GENERICRESPONSE.from_json(data), status_code, headers
    end

    # @return [GENERICRESPONSE]
    def overview_v1_latest_marketcap_all_tick(groups : Array(String)?)
      data, _status_code, _headers = overview_v1_latest_marketcap_all_tick_with_http_info(groups)
      data
    end

    # @return [Array<(GENERICRESPONSE, Integer, Hash)>] GENERICRESPONSE data, response status code and response headers
    def overview_v1_latest_marketcap_all_tick_with_http_info(groups : Array(String)?)
      if @api_client.config.debugging
        Log.debug {"Calling API: OverviewApi.overview_v1_latest_marketcap_all_tick ..."}
      end
      # resource path
      local_var_path = "/overview/v1/latest/marketcap/all/tick"

      # query parameters
      query_params = Hash(String, String).new
      query_params["groups"] = @api_client.build_collection_param(groups, :csv)

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "GENERICRESPONSE"

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"OverviewApi.overview_v1_latest_marketcap_all_tick",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: OverviewApi#overview_v1_latest_marketcap_all_tick\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GENERICRESPONSE.from_json(data), status_code, headers
    end

    # @return [GENERICRESPONSE]
    def overview_v1_latest_marketcap_ftw_tick(groups : Array(String)?)
      data, _status_code, _headers = overview_v1_latest_marketcap_ftw_tick_with_http_info(groups)
      data
    end

    # @return [Array<(GENERICRESPONSE, Integer, Hash)>] GENERICRESPONSE data, response status code and response headers
    def overview_v1_latest_marketcap_ftw_tick_with_http_info(groups : Array(String)?)
      if @api_client.config.debugging
        Log.debug {"Calling API: OverviewApi.overview_v1_latest_marketcap_ftw_tick ..."}
      end
      # resource path
      local_var_path = "/overview/v1/latest/marketcap/ftw/tick"

      # query parameters
      query_params = Hash(String, String).new
      query_params["groups"] = @api_client.build_collection_param(groups, :csv)

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "GENERICRESPONSE"

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"OverviewApi.overview_v1_latest_marketcap_ftw_tick",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: OverviewApi#overview_v1_latest_marketcap_ftw_tick\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GENERICRESPONSE.from_json(data), status_code, headers
    end
  end
end
