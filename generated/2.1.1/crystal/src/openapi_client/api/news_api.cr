# #CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
#
##CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
#
#The version of the OpenAPI document: 2.1.1
#Contact: data@cryptocompare.com
#Generated by: https://openapi-generator.tech
#OpenAPI Generator version: 6.3.0-SNAPSHOT
#

require "uri"

module OpenAPIClient
  class NewsApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # @return [GENERICRESPONSE]
    def news_v1_article_list(source_ids : Array(String)?, lang : String?, categories : Array(String)?, exclude_categories : Array(String)?, to_ts : Int32?)
      data, _status_code, _headers = news_v1_article_list_with_http_info(source_ids, lang, categories, exclude_categories, to_ts)
      data
    end

    # @return [Array<(GENERICRESPONSE, Integer, Hash)>] GENERICRESPONSE data, response status code and response headers
    def news_v1_article_list_with_http_info(source_ids : Array(String)?, lang : String?, categories : Array(String)?, exclude_categories : Array(String)?, to_ts : Int32?)
      if @api_client.config.debugging
        Log.debug {"Calling API: NewsApi.news_v1_article_list ..."}
      end
      allowable_values = ["EN", "ES", "PT", ""]
      if @api_client.config.client_side_validation && lang && !allowable_values.includes?(lang)
        raise ArgumentError.new("invalid value for \"lang\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !lang.nil? && lang.to_s.size < 1
        raise ArgumentError.new("invalid value for \"lang\" when calling NewsApi.news_v1_article_list, the character length must be great than or equal to 1.")
      end

      allowable_values = ["1INCH", "AAVE", "ADA", "ALGO", "ALTCOIN", "ASIA", "ATOM", "AVAX", "AXS", "BAL", "BAT", "BCH", "BLOCKCHAIN", "BTC", "BUSINESS", "COMMODITY", "COMP", "CRV", "DASH", "DOGE", "DOT", "ENJ", "ETC", "ETH", "EXCHANGE", "FIAT", "FIL", "FTM", "ICO", "KNC", "LINK", "LRC", "LTC", "LUNA", "LUNC", "MANA", "MARKET", "MATIC", "MINING", "MKR", "REGULATION", "REN", "SAND", "SHIB", "SNX", "SOL", "SPONSORED", "SUSHI", "TECHNOLOGY", "TRADING", "TRX", "UMA", "UNI", "USDT", "WALLET", "XLM", "XMR", "XRP", "XTZ", "YFI", "ZEC", "ZRX", ""]
      if @api_client.config.client_side_validation && categories && categories.all? { |item| allowable_values.includes?(item) }
        raise ArgumentError.new("invalid value for \"categories\", must include one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && categories.nil? && categories.size > 200
        raise ArgumentError.new("invalid value for \"categories\" when calling NewsApi.news_v1_article_list, number of items must be less than or equal to 200.")
      end

      allowable_values = ["1INCH", "AAVE", "ADA", "ALGO", "ALTCOIN", "ASIA", "ATOM", "AVAX", "AXS", "BAL", "BAT", "BCH", "BLOCKCHAIN", "BTC", "BUSINESS", "COMMODITY", "COMP", "CRV", "DASH", "DOGE", "DOT", "ENJ", "ETC", "ETH", "EXCHANGE", "FIAT", "FIL", "FTM", "ICO", "KNC", "LINK", "LRC", "LTC", "LUNA", "LUNC", "MANA", "MARKET", "MATIC", "MINING", "MKR", "REGULATION", "REN", "SAND", "SHIB", "SNX", "SOL", "SPONSORED", "SUSHI", "TECHNOLOGY", "TRADING", "TRX", "UMA", "UNI", "USDT", "WALLET", "XLM", "XMR", "XRP", "XTZ", "YFI", "ZEC", "ZRX", ""]
      if @api_client.config.client_side_validation && exclude_categories && exclude_categories.all? { |item| allowable_values.includes?(item) }
        raise ArgumentError.new("invalid value for \"exclude_categories\", must include one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && exclude_categories.nil? && exclude_categories.size > 200
        raise ArgumentError.new("invalid value for \"exclude_categories\" when calling NewsApi.news_v1_article_list, number of items must be less than or equal to 200.")
      end

      # resource path
      local_var_path = "/news/v1/article/list"

      # query parameters
      query_params = Hash(String, String).new
      query_params["source_ids"] = @api_client.build_collection_param(source_ids, :csv)
      query_params["lang"] = lang.to_s unless lang.nil?
      query_params["categories"] = @api_client.build_collection_param(categories, :csv)
      query_params["exclude_categories"] = @api_client.build_collection_param(exclude_categories, :csv)
      query_params["to_ts"] = to_ts.to_s unless to_ts.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "GENERICRESPONSE"

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"NewsApi.news_v1_article_list",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: NewsApi#news_v1_article_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GENERICRESPONSE.from_json(data), status_code, headers
    end

    # @return [GENERICRESPONSE]
    def news_v1_category_list()
      data, _status_code, _headers = news_v1_category_list_with_http_info()
      data
    end

    # @return [Array<(GENERICRESPONSE, Integer, Hash)>] GENERICRESPONSE data, response status code and response headers
    def news_v1_category_list_with_http_info()
      if @api_client.config.debugging
        Log.debug {"Calling API: NewsApi.news_v1_category_list ..."}
      end
      # resource path
      local_var_path = "/news/v1/category/list"

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "GENERICRESPONSE"

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"NewsApi.news_v1_category_list",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: NewsApi#news_v1_category_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GENERICRESPONSE.from_json(data), status_code, headers
    end

    # @return [GENERICRESPONSE]
    def news_v1_source_list(lang : String?, _type : String?, status : String?)
      data, _status_code, _headers = news_v1_source_list_with_http_info(lang, _type, status)
      data
    end

    # @return [Array<(GENERICRESPONSE, Integer, Hash)>] GENERICRESPONSE data, response status code and response headers
    def news_v1_source_list_with_http_info(lang : String?, _type : String?, status : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: NewsApi.news_v1_source_list ..."}
      end
      allowable_values = ["EN", "ES", "PT", ""]
      if @api_client.config.client_side_validation && lang && !allowable_values.includes?(lang)
        raise ArgumentError.new("invalid value for \"lang\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !lang.nil? && lang.to_s.size < 1
        raise ArgumentError.new("invalid value for \"lang\" when calling NewsApi.news_v1_source_list, the character length must be great than or equal to 1.")
      end

      allowable_values = ["RSS", "API", "TWITTER", ""]
      if @api_client.config.client_side_validation && _type && !allowable_values.includes?(_type)
        raise ArgumentError.new("invalid value for \"_type\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !_type.nil? && _type.to_s.size < 1
        raise ArgumentError.new("invalid value for \"_type\" when calling NewsApi.news_v1_source_list, the character length must be great than or equal to 1.")
      end

      allowable_values = ["ACTIVE", "INACTIVE", ""]
      if @api_client.config.client_side_validation && status && !allowable_values.includes?(status)
        raise ArgumentError.new("invalid value for \"status\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !status.nil? && status.to_s.size < 1
        raise ArgumentError.new("invalid value for \"status\" when calling NewsApi.news_v1_source_list, the character length must be great than or equal to 1.")
      end

      # resource path
      local_var_path = "/news/v1/source/list"

      # query parameters
      query_params = Hash(String, String).new
      query_params["lang"] = lang.to_s unless lang.nil?
      query_params["type"] = _type.to_s unless _type.nil?
      query_params["status"] = status.to_s unless status.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "GENERICRESPONSE"

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"NewsApi.news_v1_source_list",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: NewsApi#news_v1_source_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GENERICRESPONSE.from_json(data), status_code, headers
    end
  end
end
