# #CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
#
##CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
#
#The version of the OpenAPI document: 2.1.1
#Contact: data@cryptocompare.com
#Generated by: https://openapi-generator.tech
#OpenAPI Generator version: 6.3.0-SNAPSHOT
#

require "uri"

module OpenAPIClient
  class SpotApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # @param market [String] The exchange to obtain data from
    # @param instrument [String] The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
    # @return [SPOTINSTRUMENTHISTODATARESPONSE]
    def spot_v1_historical_days(market : String, instrument : String, groups : Array(String)?, limit : Int32?, to_ts : Int32?, aggregate : Int32?, fill : Bool?, mapping_priority : String?, response_format : String?)
      data, _status_code, _headers = spot_v1_historical_days_with_http_info(market, instrument, groups, limit, to_ts, aggregate, fill, mapping_priority, response_format)
      data
    end

    # @param market [String] The exchange to obtain data from
    # @param instrument [String] The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
    # @return [Array<(SPOTINSTRUMENTHISTODATARESPONSE, Integer, Hash)>] SPOTINSTRUMENTHISTODATARESPONSE data, response status code and response headers
    def spot_v1_historical_days_with_http_info(market : String, instrument : String, groups : Array(String)?, limit : Int32?, to_ts : Int32?, aggregate : Int32?, fill : Bool?, mapping_priority : String?, response_format : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: SpotApi.spot_v1_historical_days ..."}
      end
      # verify the required parameter "market" is set
      if @api_client.config.client_side_validation && market.nil?
        raise ArgumentError.new("Missing the required parameter 'market' when calling SpotApi.spot_v1_historical_days")
      end
      if @api_client.config.client_side_validation && market.to_s.size > 30
        raise ArgumentError.new("invalid value for \"market\" when calling SpotApi.spot_v1_historical_days, the character length must be smaller than or equal to 30.")
      end

      if @api_client.config.client_side_validation && market.to_s.size < 2
        raise ArgumentError.new("invalid value for \"market\" when calling SpotApi.spot_v1_historical_days, the character length must be great than or equal to 2.")
      end

      # verify the required parameter "instrument" is set
      if @api_client.config.client_side_validation && instrument.nil?
        raise ArgumentError.new("Missing the required parameter 'instrument' when calling SpotApi.spot_v1_historical_days")
      end
      if @api_client.config.client_side_validation && instrument.to_s.size > 500
        raise ArgumentError.new("invalid value for \"instrument\" when calling SpotApi.spot_v1_historical_days, the character length must be smaller than or equal to 500.")
      end

      if @api_client.config.client_side_validation && instrument.to_s.size < 1
        raise ArgumentError.new("invalid value for \"instrument\" when calling SpotApi.spot_v1_historical_days, the character length must be great than or equal to 1.")
      end

      if @api_client.config.client_side_validation && !limit.nil? && limit > 5000
        raise ArgumentError.new("invalid value for \"limit\" when calling SpotApi.spot_v1_historical_days, must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !limit.nil? && limit < 1
        raise ArgumentError.new("invalid value for \"limit\" when calling SpotApi.spot_v1_historical_days, must be greater than or equal to 1.")
      end

      if @api_client.config.client_side_validation && !aggregate.nil? && aggregate > 30
        raise ArgumentError.new("invalid value for \"aggregate\" when calling SpotApi.spot_v1_historical_days, must be smaller than or equal to 30.")
      end

      if @api_client.config.client_side_validation && !aggregate.nil? && aggregate < 1
        raise ArgumentError.new("invalid value for \"aggregate\" when calling SpotApi.spot_v1_historical_days, must be greater than or equal to 1.")
      end

      allowable_values = ["CHECK_MAPPED_FIRST", "CHECK_UNMAPPED_FIRST"]
      if @api_client.config.client_side_validation && mapping_priority && !allowable_values.includes?(mapping_priority)
        raise ArgumentError.new("invalid value for \"mapping_priority\", must be one of #{allowable_values}")
      end
      allowable_values = ["JSON", "CSV"]
      if @api_client.config.client_side_validation && response_format && !allowable_values.includes?(response_format)
        raise ArgumentError.new("invalid value for \"response_format\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/spot/v1/historical/days"

      # query parameters
      query_params = Hash(String, String).new
      query_params["market"] = market.to_s unless market.nil?
      query_params["instrument"] = instrument.to_s unless instrument.nil?
      query_params["groups"] = @api_client.build_collection_param(groups, :csv)
      query_params["limit"] = limit.to_s unless limit.nil?
      query_params["to_ts"] = to_ts.to_s unless to_ts.nil?
      query_params["aggregate"] = aggregate.to_s unless aggregate.nil?
      query_params["fill"] = fill.to_s unless fill.nil?
      query_params["mapping_priority"] = mapping_priority.to_s unless mapping_priority.nil?
      query_params["response_format"] = response_format.to_s unless response_format.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "SPOTINSTRUMENTHISTODATARESPONSE"

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"SpotApi.spot_v1_historical_days",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: SpotApi#spot_v1_historical_days\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return SPOTINSTRUMENTHISTODATARESPONSE.from_json(data), status_code, headers
    end

    # @param market [String] The exchange to obtain data from
    # @param instrument [String] The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
    # @return [SPOTINSTRUMENTHISTODATARESPONSE]
    def spot_v1_historical_hours(market : String, instrument : String, groups : Array(String)?, limit : Int32?, to_ts : Int32?, aggregate : Int32?, fill : Bool?, mapping_priority : String?, response_format : String?)
      data, _status_code, _headers = spot_v1_historical_hours_with_http_info(market, instrument, groups, limit, to_ts, aggregate, fill, mapping_priority, response_format)
      data
    end

    # @param market [String] The exchange to obtain data from
    # @param instrument [String] The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
    # @return [Array<(SPOTINSTRUMENTHISTODATARESPONSE, Integer, Hash)>] SPOTINSTRUMENTHISTODATARESPONSE data, response status code and response headers
    def spot_v1_historical_hours_with_http_info(market : String, instrument : String, groups : Array(String)?, limit : Int32?, to_ts : Int32?, aggregate : Int32?, fill : Bool?, mapping_priority : String?, response_format : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: SpotApi.spot_v1_historical_hours ..."}
      end
      # verify the required parameter "market" is set
      if @api_client.config.client_side_validation && market.nil?
        raise ArgumentError.new("Missing the required parameter 'market' when calling SpotApi.spot_v1_historical_hours")
      end
      if @api_client.config.client_side_validation && market.to_s.size > 30
        raise ArgumentError.new("invalid value for \"market\" when calling SpotApi.spot_v1_historical_hours, the character length must be smaller than or equal to 30.")
      end

      if @api_client.config.client_side_validation && market.to_s.size < 2
        raise ArgumentError.new("invalid value for \"market\" when calling SpotApi.spot_v1_historical_hours, the character length must be great than or equal to 2.")
      end

      # verify the required parameter "instrument" is set
      if @api_client.config.client_side_validation && instrument.nil?
        raise ArgumentError.new("Missing the required parameter 'instrument' when calling SpotApi.spot_v1_historical_hours")
      end
      if @api_client.config.client_side_validation && instrument.to_s.size > 500
        raise ArgumentError.new("invalid value for \"instrument\" when calling SpotApi.spot_v1_historical_hours, the character length must be smaller than or equal to 500.")
      end

      if @api_client.config.client_side_validation && instrument.to_s.size < 1
        raise ArgumentError.new("invalid value for \"instrument\" when calling SpotApi.spot_v1_historical_hours, the character length must be great than or equal to 1.")
      end

      if @api_client.config.client_side_validation && !limit.nil? && limit > 2000
        raise ArgumentError.new("invalid value for \"limit\" when calling SpotApi.spot_v1_historical_hours, must be smaller than or equal to 2000.")
      end

      if @api_client.config.client_side_validation && !limit.nil? && limit < 1
        raise ArgumentError.new("invalid value for \"limit\" when calling SpotApi.spot_v1_historical_hours, must be greater than or equal to 1.")
      end

      if @api_client.config.client_side_validation && !aggregate.nil? && aggregate > 30
        raise ArgumentError.new("invalid value for \"aggregate\" when calling SpotApi.spot_v1_historical_hours, must be smaller than or equal to 30.")
      end

      if @api_client.config.client_side_validation && !aggregate.nil? && aggregate < 1
        raise ArgumentError.new("invalid value for \"aggregate\" when calling SpotApi.spot_v1_historical_hours, must be greater than or equal to 1.")
      end

      allowable_values = ["CHECK_MAPPED_FIRST", "CHECK_UNMAPPED_FIRST"]
      if @api_client.config.client_side_validation && mapping_priority && !allowable_values.includes?(mapping_priority)
        raise ArgumentError.new("invalid value for \"mapping_priority\", must be one of #{allowable_values}")
      end
      allowable_values = ["JSON", "CSV"]
      if @api_client.config.client_side_validation && response_format && !allowable_values.includes?(response_format)
        raise ArgumentError.new("invalid value for \"response_format\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/spot/v1/historical/hours"

      # query parameters
      query_params = Hash(String, String).new
      query_params["market"] = market.to_s unless market.nil?
      query_params["instrument"] = instrument.to_s unless instrument.nil?
      query_params["groups"] = @api_client.build_collection_param(groups, :csv)
      query_params["limit"] = limit.to_s unless limit.nil?
      query_params["to_ts"] = to_ts.to_s unless to_ts.nil?
      query_params["aggregate"] = aggregate.to_s unless aggregate.nil?
      query_params["fill"] = fill.to_s unless fill.nil?
      query_params["mapping_priority"] = mapping_priority.to_s unless mapping_priority.nil?
      query_params["response_format"] = response_format.to_s unless response_format.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "SPOTINSTRUMENTHISTODATARESPONSE"

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"SpotApi.spot_v1_historical_hours",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: SpotApi#spot_v1_historical_hours\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return SPOTINSTRUMENTHISTODATARESPONSE.from_json(data), status_code, headers
    end

    # @param market [String] The exchange to obtain data from
    # @param instrument [String] The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
    # @return [SPOTINSTRUMENTHISTODATARESPONSE]
    def spot_v1_historical_minutes(market : String, instrument : String, groups : Array(String)?, limit : Int32?, to_ts : Int32?, aggregate : Int32?, fill : Bool?, mapping_priority : String?, response_format : String?)
      data, _status_code, _headers = spot_v1_historical_minutes_with_http_info(market, instrument, groups, limit, to_ts, aggregate, fill, mapping_priority, response_format)
      data
    end

    # @param market [String] The exchange to obtain data from
    # @param instrument [String] The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
    # @return [Array<(SPOTINSTRUMENTHISTODATARESPONSE, Integer, Hash)>] SPOTINSTRUMENTHISTODATARESPONSE data, response status code and response headers
    def spot_v1_historical_minutes_with_http_info(market : String, instrument : String, groups : Array(String)?, limit : Int32?, to_ts : Int32?, aggregate : Int32?, fill : Bool?, mapping_priority : String?, response_format : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: SpotApi.spot_v1_historical_minutes ..."}
      end
      # verify the required parameter "market" is set
      if @api_client.config.client_side_validation && market.nil?
        raise ArgumentError.new("Missing the required parameter 'market' when calling SpotApi.spot_v1_historical_minutes")
      end
      if @api_client.config.client_side_validation && market.to_s.size > 30
        raise ArgumentError.new("invalid value for \"market\" when calling SpotApi.spot_v1_historical_minutes, the character length must be smaller than or equal to 30.")
      end

      if @api_client.config.client_side_validation && market.to_s.size < 2
        raise ArgumentError.new("invalid value for \"market\" when calling SpotApi.spot_v1_historical_minutes, the character length must be great than or equal to 2.")
      end

      # verify the required parameter "instrument" is set
      if @api_client.config.client_side_validation && instrument.nil?
        raise ArgumentError.new("Missing the required parameter 'instrument' when calling SpotApi.spot_v1_historical_minutes")
      end
      if @api_client.config.client_side_validation && instrument.to_s.size > 500
        raise ArgumentError.new("invalid value for \"instrument\" when calling SpotApi.spot_v1_historical_minutes, the character length must be smaller than or equal to 500.")
      end

      if @api_client.config.client_side_validation && instrument.to_s.size < 1
        raise ArgumentError.new("invalid value for \"instrument\" when calling SpotApi.spot_v1_historical_minutes, the character length must be great than or equal to 1.")
      end

      if @api_client.config.client_side_validation && !limit.nil? && limit > 2000
        raise ArgumentError.new("invalid value for \"limit\" when calling SpotApi.spot_v1_historical_minutes, must be smaller than or equal to 2000.")
      end

      if @api_client.config.client_side_validation && !limit.nil? && limit < 1
        raise ArgumentError.new("invalid value for \"limit\" when calling SpotApi.spot_v1_historical_minutes, must be greater than or equal to 1.")
      end

      if @api_client.config.client_side_validation && !aggregate.nil? && aggregate > 30
        raise ArgumentError.new("invalid value for \"aggregate\" when calling SpotApi.spot_v1_historical_minutes, must be smaller than or equal to 30.")
      end

      if @api_client.config.client_side_validation && !aggregate.nil? && aggregate < 1
        raise ArgumentError.new("invalid value for \"aggregate\" when calling SpotApi.spot_v1_historical_minutes, must be greater than or equal to 1.")
      end

      allowable_values = ["CHECK_MAPPED_FIRST", "CHECK_UNMAPPED_FIRST"]
      if @api_client.config.client_side_validation && mapping_priority && !allowable_values.includes?(mapping_priority)
        raise ArgumentError.new("invalid value for \"mapping_priority\", must be one of #{allowable_values}")
      end
      allowable_values = ["JSON", "CSV"]
      if @api_client.config.client_side_validation && response_format && !allowable_values.includes?(response_format)
        raise ArgumentError.new("invalid value for \"response_format\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/spot/v1/historical/minutes"

      # query parameters
      query_params = Hash(String, String).new
      query_params["market"] = market.to_s unless market.nil?
      query_params["instrument"] = instrument.to_s unless instrument.nil?
      query_params["groups"] = @api_client.build_collection_param(groups, :csv)
      query_params["limit"] = limit.to_s unless limit.nil?
      query_params["to_ts"] = to_ts.to_s unless to_ts.nil?
      query_params["aggregate"] = aggregate.to_s unless aggregate.nil?
      query_params["fill"] = fill.to_s unless fill.nil?
      query_params["mapping_priority"] = mapping_priority.to_s unless mapping_priority.nil?
      query_params["response_format"] = response_format.to_s unless response_format.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "SPOTINSTRUMENTHISTODATARESPONSE"

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"SpotApi.spot_v1_historical_minutes",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: SpotApi#spot_v1_historical_minutes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return SPOTINSTRUMENTHISTODATARESPONSE.from_json(data), status_code, headers
    end

    # @param market [String] The exchange to obtain data from
    # @param instrument [String] The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
    # @param minute_ts [Int32] Unix timestamp in seconds for the minute of the orderbook snapshot you are interested in. You can pass any timestamp within a minute but we will round it down the the full minute timestmap and return the orderbook l2 snapshot at that minute.
    # @return [GENERICRESPONSE]
    def spot_v1_historical_orderbook_l2_snapshot_minute(market : String, instrument : String, minute_ts : Int32, depth : Int32?, mapping_priority : String?, response_format : String?)
      data, _status_code, _headers = spot_v1_historical_orderbook_l2_snapshot_minute_with_http_info(market, instrument, minute_ts, depth, mapping_priority, response_format)
      data
    end

    # @param market [String] The exchange to obtain data from
    # @param instrument [String] The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
    # @param minute_ts [Int32] Unix timestamp in seconds for the minute of the orderbook snapshot you are interested in. You can pass any timestamp within a minute but we will round it down the the full minute timestmap and return the orderbook l2 snapshot at that minute.
    # @return [Array<(GENERICRESPONSE, Integer, Hash)>] GENERICRESPONSE data, response status code and response headers
    def spot_v1_historical_orderbook_l2_snapshot_minute_with_http_info(market : String, instrument : String, minute_ts : Int32, depth : Int32?, mapping_priority : String?, response_format : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: SpotApi.spot_v1_historical_orderbook_l2_snapshot_minute ..."}
      end
      # verify the required parameter "market" is set
      if @api_client.config.client_side_validation && market.nil?
        raise ArgumentError.new("Missing the required parameter 'market' when calling SpotApi.spot_v1_historical_orderbook_l2_snapshot_minute")
      end
      if @api_client.config.client_side_validation && market.to_s.size > 30
        raise ArgumentError.new("invalid value for \"market\" when calling SpotApi.spot_v1_historical_orderbook_l2_snapshot_minute, the character length must be smaller than or equal to 30.")
      end

      if @api_client.config.client_side_validation && market.to_s.size < 2
        raise ArgumentError.new("invalid value for \"market\" when calling SpotApi.spot_v1_historical_orderbook_l2_snapshot_minute, the character length must be great than or equal to 2.")
      end

      # verify the required parameter "instrument" is set
      if @api_client.config.client_side_validation && instrument.nil?
        raise ArgumentError.new("Missing the required parameter 'instrument' when calling SpotApi.spot_v1_historical_orderbook_l2_snapshot_minute")
      end
      if @api_client.config.client_side_validation && instrument.to_s.size > 500
        raise ArgumentError.new("invalid value for \"instrument\" when calling SpotApi.spot_v1_historical_orderbook_l2_snapshot_minute, the character length must be smaller than or equal to 500.")
      end

      if @api_client.config.client_side_validation && instrument.to_s.size < 1
        raise ArgumentError.new("invalid value for \"instrument\" when calling SpotApi.spot_v1_historical_orderbook_l2_snapshot_minute, the character length must be great than or equal to 1.")
      end

      # verify the required parameter "minute_ts" is set
      if @api_client.config.client_side_validation && minute_ts.nil?
        raise ArgumentError.new("Missing the required parameter 'minute_ts' when calling SpotApi.spot_v1_historical_orderbook_l2_snapshot_minute")
      end
      if @api_client.config.client_side_validation && !depth.nil? && depth > 20000
        raise ArgumentError.new("invalid value for \"depth\" when calling SpotApi.spot_v1_historical_orderbook_l2_snapshot_minute, must be smaller than or equal to 20000.")
      end

      if @api_client.config.client_side_validation && !depth.nil? && depth < 1
        raise ArgumentError.new("invalid value for \"depth\" when calling SpotApi.spot_v1_historical_orderbook_l2_snapshot_minute, must be greater than or equal to 1.")
      end

      allowable_values = ["CHECK_MAPPED_FIRST", "CHECK_UNMAPPED_FIRST"]
      if @api_client.config.client_side_validation && mapping_priority && !allowable_values.includes?(mapping_priority)
        raise ArgumentError.new("invalid value for \"mapping_priority\", must be one of #{allowable_values}")
      end
      allowable_values = ["JSON", "CSV"]
      if @api_client.config.client_side_validation && response_format && !allowable_values.includes?(response_format)
        raise ArgumentError.new("invalid value for \"response_format\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/spot/v1/historical/orderbook/l2/snapshot/minute"

      # query parameters
      query_params = Hash(String, String).new
      query_params["market"] = market.to_s unless market.nil?
      query_params["instrument"] = instrument.to_s unless instrument.nil?
      query_params["minute_ts"] = minute_ts.to_s unless minute_ts.nil?
      query_params["depth"] = depth.to_s unless depth.nil?
      query_params["mapping_priority"] = mapping_priority.to_s unless mapping_priority.nil?
      query_params["response_format"] = response_format.to_s unless response_format.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "GENERICRESPONSE"

      # auth_names
      auth_names = ["api_key_header", "api_key_query"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"SpotApi.spot_v1_historical_orderbook_l2_snapshot_minute",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: SpotApi#spot_v1_historical_orderbook_l2_snapshot_minute\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GENERICRESPONSE.from_json(data), status_code, headers
    end

    # @param market [String] The exchange to obtain data from
    # @param instrument [String] The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
    # @return [SPOTINSTRUMENTTRADERESPONSE]
    def spot_v1_historical_trades(market : String, instrument : String, after_ts : Int32?, last_ccseq : Int32?, limit : Int32?, mapping_priority : String?, response_format : String?, return_404_on_empty_response : Bool?)
      data, _status_code, _headers = spot_v1_historical_trades_with_http_info(market, instrument, after_ts, last_ccseq, limit, mapping_priority, response_format, return_404_on_empty_response)
      data
    end

    # @param market [String] The exchange to obtain data from
    # @param instrument [String] The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
    # @return [Array<(SPOTINSTRUMENTTRADERESPONSE, Integer, Hash)>] SPOTINSTRUMENTTRADERESPONSE data, response status code and response headers
    def spot_v1_historical_trades_with_http_info(market : String, instrument : String, after_ts : Int32?, last_ccseq : Int32?, limit : Int32?, mapping_priority : String?, response_format : String?, return_404_on_empty_response : Bool?)
      if @api_client.config.debugging
        Log.debug {"Calling API: SpotApi.spot_v1_historical_trades ..."}
      end
      # verify the required parameter "market" is set
      if @api_client.config.client_side_validation && market.nil?
        raise ArgumentError.new("Missing the required parameter 'market' when calling SpotApi.spot_v1_historical_trades")
      end
      if @api_client.config.client_side_validation && market.to_s.size > 30
        raise ArgumentError.new("invalid value for \"market\" when calling SpotApi.spot_v1_historical_trades, the character length must be smaller than or equal to 30.")
      end

      if @api_client.config.client_side_validation && market.to_s.size < 2
        raise ArgumentError.new("invalid value for \"market\" when calling SpotApi.spot_v1_historical_trades, the character length must be great than or equal to 2.")
      end

      # verify the required parameter "instrument" is set
      if @api_client.config.client_side_validation && instrument.nil?
        raise ArgumentError.new("Missing the required parameter 'instrument' when calling SpotApi.spot_v1_historical_trades")
      end
      if @api_client.config.client_side_validation && instrument.to_s.size > 500
        raise ArgumentError.new("invalid value for \"instrument\" when calling SpotApi.spot_v1_historical_trades, the character length must be smaller than or equal to 500.")
      end

      if @api_client.config.client_side_validation && instrument.to_s.size < 1
        raise ArgumentError.new("invalid value for \"instrument\" when calling SpotApi.spot_v1_historical_trades, the character length must be great than or equal to 1.")
      end

      if @api_client.config.client_side_validation && !after_ts.nil? && after_ts < 0
        raise ArgumentError.new("invalid value for \"after_ts\" when calling SpotApi.spot_v1_historical_trades, must be greater than or equal to 0.")
      end

      if @api_client.config.client_side_validation && !last_ccseq.nil? && last_ccseq < 0
        raise ArgumentError.new("invalid value for \"last_ccseq\" when calling SpotApi.spot_v1_historical_trades, must be greater than or equal to 0.")
      end

      if @api_client.config.client_side_validation && !limit.nil? && limit > 5000
        raise ArgumentError.new("invalid value for \"limit\" when calling SpotApi.spot_v1_historical_trades, must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !limit.nil? && limit < 1
        raise ArgumentError.new("invalid value for \"limit\" when calling SpotApi.spot_v1_historical_trades, must be greater than or equal to 1.")
      end

      allowable_values = ["CHECK_MAPPED_FIRST", "CHECK_UNMAPPED_FIRST"]
      if @api_client.config.client_side_validation && mapping_priority && !allowable_values.includes?(mapping_priority)
        raise ArgumentError.new("invalid value for \"mapping_priority\", must be one of #{allowable_values}")
      end
      allowable_values = ["JSON", "CSV"]
      if @api_client.config.client_side_validation && response_format && !allowable_values.includes?(response_format)
        raise ArgumentError.new("invalid value for \"response_format\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/spot/v1/historical/trades"

      # query parameters
      query_params = Hash(String, String).new
      query_params["market"] = market.to_s unless market.nil?
      query_params["instrument"] = instrument.to_s unless instrument.nil?
      query_params["after_ts"] = after_ts.to_s unless after_ts.nil?
      query_params["last_ccseq"] = last_ccseq.to_s unless last_ccseq.nil?
      query_params["limit"] = limit.to_s unless limit.nil?
      query_params["mapping_priority"] = mapping_priority.to_s unless mapping_priority.nil?
      query_params["response_format"] = response_format.to_s unless response_format.nil?
      query_params["return_404_on_empty_response"] = return_404_on_empty_response.to_s unless return_404_on_empty_response.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "SPOTINSTRUMENTTRADERESPONSE"

      # auth_names
      auth_names = ["api_key_header", "api_key_query"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"SpotApi.spot_v1_historical_trades",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: SpotApi#spot_v1_historical_trades\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return SPOTINSTRUMENTTRADERESPONSE.from_json(data), status_code, headers
    end

    # @param market [String] The exchange to obtain data from
    # @param instrument [String] The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
    # @return [SPOTINSTRUMENTTRADERESPONSE]
    def spot_v1_historical_trades_hour(market : String, instrument : String, hour_ts : Int32?, mapping_priority : String?, response_format : String?, return_404_on_empty_response : Bool?)
      data, _status_code, _headers = spot_v1_historical_trades_hour_with_http_info(market, instrument, hour_ts, mapping_priority, response_format, return_404_on_empty_response)
      data
    end

    # @param market [String] The exchange to obtain data from
    # @param instrument [String] The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
    # @return [Array<(SPOTINSTRUMENTTRADERESPONSE, Integer, Hash)>] SPOTINSTRUMENTTRADERESPONSE data, response status code and response headers
    def spot_v1_historical_trades_hour_with_http_info(market : String, instrument : String, hour_ts : Int32?, mapping_priority : String?, response_format : String?, return_404_on_empty_response : Bool?)
      if @api_client.config.debugging
        Log.debug {"Calling API: SpotApi.spot_v1_historical_trades_hour ..."}
      end
      # verify the required parameter "market" is set
      if @api_client.config.client_side_validation && market.nil?
        raise ArgumentError.new("Missing the required parameter 'market' when calling SpotApi.spot_v1_historical_trades_hour")
      end
      if @api_client.config.client_side_validation && market.to_s.size > 30
        raise ArgumentError.new("invalid value for \"market\" when calling SpotApi.spot_v1_historical_trades_hour, the character length must be smaller than or equal to 30.")
      end

      if @api_client.config.client_side_validation && market.to_s.size < 2
        raise ArgumentError.new("invalid value for \"market\" when calling SpotApi.spot_v1_historical_trades_hour, the character length must be great than or equal to 2.")
      end

      # verify the required parameter "instrument" is set
      if @api_client.config.client_side_validation && instrument.nil?
        raise ArgumentError.new("Missing the required parameter 'instrument' when calling SpotApi.spot_v1_historical_trades_hour")
      end
      if @api_client.config.client_side_validation && instrument.to_s.size > 500
        raise ArgumentError.new("invalid value for \"instrument\" when calling SpotApi.spot_v1_historical_trades_hour, the character length must be smaller than or equal to 500.")
      end

      if @api_client.config.client_side_validation && instrument.to_s.size < 1
        raise ArgumentError.new("invalid value for \"instrument\" when calling SpotApi.spot_v1_historical_trades_hour, the character length must be great than or equal to 1.")
      end

      if @api_client.config.client_side_validation && !hour_ts.nil? && hour_ts < 0
        raise ArgumentError.new("invalid value for \"hour_ts\" when calling SpotApi.spot_v1_historical_trades_hour, must be greater than or equal to 0.")
      end

      allowable_values = ["CHECK_MAPPED_FIRST", "CHECK_UNMAPPED_FIRST"]
      if @api_client.config.client_side_validation && mapping_priority && !allowable_values.includes?(mapping_priority)
        raise ArgumentError.new("invalid value for \"mapping_priority\", must be one of #{allowable_values}")
      end
      allowable_values = ["JSON", "CSV"]
      if @api_client.config.client_side_validation && response_format && !allowable_values.includes?(response_format)
        raise ArgumentError.new("invalid value for \"response_format\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/spot/v1/historical/trades/hour"

      # query parameters
      query_params = Hash(String, String).new
      query_params["market"] = market.to_s unless market.nil?
      query_params["instrument"] = instrument.to_s unless instrument.nil?
      query_params["hour_ts"] = hour_ts.to_s unless hour_ts.nil?
      query_params["mapping_priority"] = mapping_priority.to_s unless mapping_priority.nil?
      query_params["response_format"] = response_format.to_s unless response_format.nil?
      query_params["return_404_on_empty_response"] = return_404_on_empty_response.to_s unless return_404_on_empty_response.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "SPOTINSTRUMENTTRADERESPONSE"

      # auth_names
      auth_names = ["api_key_header", "api_key_query"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"SpotApi.spot_v1_historical_trades_hour",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: SpotApi#spot_v1_historical_trades_hour\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return SPOTINSTRUMENTTRADERESPONSE.from_json(data), status_code, headers
    end

    # @param market [String] The exchange to obtain data from
    # @param instruments [Array(String)] A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.
    # @return [SPOTINSTRUMENTMETADATARESPONSE]
    def spot_v1_latest_instrument_metadata(market : String, instruments : Array(String), groups : Array(String)?, mapping_priority : String?)
      data, _status_code, _headers = spot_v1_latest_instrument_metadata_with_http_info(market, instruments, groups, mapping_priority)
      data
    end

    # @param market [String] The exchange to obtain data from
    # @param instruments [Array(String)] A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.
    # @return [Array<(SPOTINSTRUMENTMETADATARESPONSE, Integer, Hash)>] SPOTINSTRUMENTMETADATARESPONSE data, response status code and response headers
    def spot_v1_latest_instrument_metadata_with_http_info(market : String, instruments : Array(String), groups : Array(String)?, mapping_priority : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: SpotApi.spot_v1_latest_instrument_metadata ..."}
      end
      # verify the required parameter "market" is set
      if @api_client.config.client_side_validation && market.nil?
        raise ArgumentError.new("Missing the required parameter 'market' when calling SpotApi.spot_v1_latest_instrument_metadata")
      end
      if @api_client.config.client_side_validation && market.to_s.size > 30
        raise ArgumentError.new("invalid value for \"market\" when calling SpotApi.spot_v1_latest_instrument_metadata, the character length must be smaller than or equal to 30.")
      end

      if @api_client.config.client_side_validation && market.to_s.size < 2
        raise ArgumentError.new("invalid value for \"market\" when calling SpotApi.spot_v1_latest_instrument_metadata, the character length must be great than or equal to 2.")
      end

      # verify the required parameter "instruments" is set
      if @api_client.config.client_side_validation && instruments.nil?
        raise ArgumentError.new("Missing the required parameter 'instruments' when calling SpotApi.spot_v1_latest_instrument_metadata")
      end
      if @api_client.config.client_side_validation && instruments.size > 25
        raise ArgumentError.new("invalid value for \"instruments\" when calling SpotApi.spot_v1_latest_instrument_metadata, number of items must be less than or equal to 25.")
      end

      if @api_client.config.client_side_validation && instruments.size < 1
        raise ArgumentError.new("invalid value for \"instruments\" when calling SpotApi.spot_v1_latest_instrument_metadata, number of items must be greater than or equal to 1.")
      end

      allowable_values = ["CHECK_MAPPED_FIRST", "CHECK_UNMAPPED_FIRST"]
      if @api_client.config.client_side_validation && mapping_priority && !allowable_values.includes?(mapping_priority)
        raise ArgumentError.new("invalid value for \"mapping_priority\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/spot/v1/latest/instrument/metadata"

      # query parameters
      query_params = Hash(String, String).new
      query_params["market"] = market.to_s unless market.nil?
      query_params["instruments"] = @api_client.build_collection_param(instruments, :csv)
      query_params["groups"] = @api_client.build_collection_param(groups, :csv)
      query_params["mapping_priority"] = mapping_priority.to_s unless mapping_priority.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "SPOTINSTRUMENTMETADATARESPONSE"

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"SpotApi.spot_v1_latest_instrument_metadata",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: SpotApi#spot_v1_latest_instrument_metadata\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return SPOTINSTRUMENTMETADATARESPONSE.from_json(data), status_code, headers
    end

    # @param market [String] The exchange to obtain data from
    # @param instruments [Array(String)] A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.
    # @return [SPOTINSTRUMENTMARKETDATARESPONSE]
    def spot_v1_latest_tick(market : String, instruments : Array(String), groups : Array(String)?, mapping_priority : String?)
      data, _status_code, _headers = spot_v1_latest_tick_with_http_info(market, instruments, groups, mapping_priority)
      data
    end

    # @param market [String] The exchange to obtain data from
    # @param instruments [Array(String)] A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.
    # @return [Array<(SPOTINSTRUMENTMARKETDATARESPONSE, Integer, Hash)>] SPOTINSTRUMENTMARKETDATARESPONSE data, response status code and response headers
    def spot_v1_latest_tick_with_http_info(market : String, instruments : Array(String), groups : Array(String)?, mapping_priority : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: SpotApi.spot_v1_latest_tick ..."}
      end
      # verify the required parameter "market" is set
      if @api_client.config.client_side_validation && market.nil?
        raise ArgumentError.new("Missing the required parameter 'market' when calling SpotApi.spot_v1_latest_tick")
      end
      if @api_client.config.client_side_validation && market.to_s.size > 30
        raise ArgumentError.new("invalid value for \"market\" when calling SpotApi.spot_v1_latest_tick, the character length must be smaller than or equal to 30.")
      end

      if @api_client.config.client_side_validation && market.to_s.size < 2
        raise ArgumentError.new("invalid value for \"market\" when calling SpotApi.spot_v1_latest_tick, the character length must be great than or equal to 2.")
      end

      # verify the required parameter "instruments" is set
      if @api_client.config.client_side_validation && instruments.nil?
        raise ArgumentError.new("Missing the required parameter 'instruments' when calling SpotApi.spot_v1_latest_tick")
      end
      if @api_client.config.client_side_validation && instruments.size > 25
        raise ArgumentError.new("invalid value for \"instruments\" when calling SpotApi.spot_v1_latest_tick, number of items must be less than or equal to 25.")
      end

      if @api_client.config.client_side_validation && instruments.size < 1
        raise ArgumentError.new("invalid value for \"instruments\" when calling SpotApi.spot_v1_latest_tick, number of items must be greater than or equal to 1.")
      end

      allowable_values = ["CHECK_MAPPED_FIRST", "CHECK_UNMAPPED_FIRST"]
      if @api_client.config.client_side_validation && mapping_priority && !allowable_values.includes?(mapping_priority)
        raise ArgumentError.new("invalid value for \"mapping_priority\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/spot/v1/latest/tick"

      # query parameters
      query_params = Hash(String, String).new
      query_params["market"] = market.to_s unless market.nil?
      query_params["instruments"] = @api_client.build_collection_param(instruments, :csv)
      query_params["groups"] = @api_client.build_collection_param(groups, :csv)
      query_params["mapping_priority"] = mapping_priority.to_s unless mapping_priority.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "SPOTINSTRUMENTMARKETDATARESPONSE"

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"SpotApi.spot_v1_latest_tick",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: SpotApi#spot_v1_latest_tick\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return SPOTINSTRUMENTMARKETDATARESPONSE.from_json(data), status_code, headers
    end

    # @return [GENERICRESPONSE]
    def spot_v1_markets(market : String?)
      data, _status_code, _headers = spot_v1_markets_with_http_info(market)
      data
    end

    # @return [Array<(GENERICRESPONSE, Integer, Hash)>] GENERICRESPONSE data, response status code and response headers
    def spot_v1_markets_with_http_info(market : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: SpotApi.spot_v1_markets ..."}
      end
      if @api_client.config.client_side_validation && !market.nil? && market.to_s.size > 30
        raise ArgumentError.new("invalid value for \"market\" when calling SpotApi.spot_v1_markets, the character length must be smaller than or equal to 30.")
      end

      if @api_client.config.client_side_validation && !market.nil? && market.to_s.size < 0
        raise ArgumentError.new("invalid value for \"market\" when calling SpotApi.spot_v1_markets, the character length must be great than or equal to 0.")
      end

      # resource path
      local_var_path = "/spot/v1/markets"

      # query parameters
      query_params = Hash(String, String).new
      query_params["market"] = market.to_s unless market.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "GENERICRESPONSE"

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"SpotApi.spot_v1_markets",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: SpotApi#spot_v1_markets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GENERICRESPONSE.from_json(data), status_code, headers
    end

    # @return [GENERICRESPONSE]
    def spot_v1_markets_instruments(market : String?, instrument : String?, instrument_status : Array(String)?)
      data, _status_code, _headers = spot_v1_markets_instruments_with_http_info(market, instrument, instrument_status)
      data
    end

    # @return [Array<(GENERICRESPONSE, Integer, Hash)>] GENERICRESPONSE data, response status code and response headers
    def spot_v1_markets_instruments_with_http_info(market : String?, instrument : String?, instrument_status : Array(String)?)
      if @api_client.config.debugging
        Log.debug {"Calling API: SpotApi.spot_v1_markets_instruments ..."}
      end
      if @api_client.config.client_side_validation && !market.nil? && market.to_s.size > 30
        raise ArgumentError.new("invalid value for \"market\" when calling SpotApi.spot_v1_markets_instruments, the character length must be smaller than or equal to 30.")
      end

      if @api_client.config.client_side_validation && !market.nil? && market.to_s.size < 0
        raise ArgumentError.new("invalid value for \"market\" when calling SpotApi.spot_v1_markets_instruments, the character length must be great than or equal to 0.")
      end

      if @api_client.config.client_side_validation && !instrument.nil? && instrument.to_s.size > 30
        raise ArgumentError.new("invalid value for \"instrument\" when calling SpotApi.spot_v1_markets_instruments, the character length must be smaller than or equal to 30.")
      end

      if @api_client.config.client_side_validation && !instrument.nil? && instrument.to_s.size < 0
        raise ArgumentError.new("invalid value for \"instrument\" when calling SpotApi.spot_v1_markets_instruments, the character length must be great than or equal to 0.")
      end

      allowable_values = ["ACTIVE", "IGNORED", "RETIRED", "EXPIRED"]
      if @api_client.config.client_side_validation && instrument_status && instrument_status.all? { |item| allowable_values.includes?(item) }
        raise ArgumentError.new("invalid value for \"instrument_status\", must include one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/spot/v1/markets/instruments"

      # query parameters
      query_params = Hash(String, String).new
      query_params["market"] = market.to_s unless market.nil?
      query_params["instrument"] = instrument.to_s unless instrument.nil?
      query_params["instrument_status"] = @api_client.build_collection_param(instrument_status, :csv)

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "GENERICRESPONSE"

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"SpotApi.spot_v1_markets_instruments",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: SpotApi#spot_v1_markets_instruments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GENERICRESPONSE.from_json(data), status_code, headers
    end

    # @return [GENERICRESPONSE]
    def spot_v1_markets_instruments_unmapped(market : String?, instrument : String?, instrument_status : Array(String)?)
      data, _status_code, _headers = spot_v1_markets_instruments_unmapped_with_http_info(market, instrument, instrument_status)
      data
    end

    # @return [Array<(GENERICRESPONSE, Integer, Hash)>] GENERICRESPONSE data, response status code and response headers
    def spot_v1_markets_instruments_unmapped_with_http_info(market : String?, instrument : String?, instrument_status : Array(String)?)
      if @api_client.config.debugging
        Log.debug {"Calling API: SpotApi.spot_v1_markets_instruments_unmapped ..."}
      end
      if @api_client.config.client_side_validation && !market.nil? && market.to_s.size > 30
        raise ArgumentError.new("invalid value for \"market\" when calling SpotApi.spot_v1_markets_instruments_unmapped, the character length must be smaller than or equal to 30.")
      end

      if @api_client.config.client_side_validation && !market.nil? && market.to_s.size < 0
        raise ArgumentError.new("invalid value for \"market\" when calling SpotApi.spot_v1_markets_instruments_unmapped, the character length must be great than or equal to 0.")
      end

      if @api_client.config.client_side_validation && !instrument.nil? && instrument.to_s.size > 300
        raise ArgumentError.new("invalid value for \"instrument\" when calling SpotApi.spot_v1_markets_instruments_unmapped, the character length must be smaller than or equal to 300.")
      end

      if @api_client.config.client_side_validation && !instrument.nil? && instrument.to_s.size < 0
        raise ArgumentError.new("invalid value for \"instrument\" when calling SpotApi.spot_v1_markets_instruments_unmapped, the character length must be great than or equal to 0.")
      end

      allowable_values = ["ACTIVE", "IGNORED", "RETIRED", "EXPIRED"]
      if @api_client.config.client_side_validation && instrument_status && instrument_status.all? { |item| allowable_values.includes?(item) }
        raise ArgumentError.new("invalid value for \"instrument_status\", must include one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/spot/v1/markets/instruments/unmapped"

      # query parameters
      query_params = Hash(String, String).new
      query_params["market"] = market.to_s unless market.nil?
      query_params["instrument"] = instrument.to_s unless instrument.nil?
      query_params["instrument_status"] = @api_client.build_collection_param(instrument_status, :csv)

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "GENERICRESPONSE"

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"SpotApi.spot_v1_markets_instruments_unmapped",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: SpotApi#spot_v1_markets_instruments_unmapped\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GENERICRESPONSE.from_json(data), status_code, headers
    end
  end
end
