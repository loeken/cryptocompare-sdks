/**
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 * CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: data@cryptocompare.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api

import java.text.SimpleDateFormat

import org.openapitools.client.model.Error
import org.openapitools.client.model.GENERICRESPONSE
import org.openapitools.client.{ApiInvoker, ApiException}

import collection.mutable
import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart
import com.wordnik.swagger.client._
import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._
import javax.ws.rs.core.Response.Status.Family

import java.net.URI
import java.io.File
import java.util.Date
import java.util.TimeZone
import javax.ws.rs.core.{MediaType, Response}

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.collection.mutable.HashMap
import scala.util.{Failure, Success, Try}

import org.json4s._

class ReferenceRatesApi(
  val defBasePath: String = "https://data-api.cryptocompare.com",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new ReferenceRatesApiAsyncHelper(client, config)

  /**
   * 
   * 
   *
   * @param market The exchange to obtain data from 
   * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. 
   * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME (optional, default to [])
   * @param limit The number of data points to return (optional, default to 30)
   * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
   * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
   * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
   * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
   * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
   * @return GENERICRESPONSE
   */
  def indexCcV1HistoricalDays(market: String, instrument: String, groups: Option[List[String]] = None, limit: Option[Integer] = None, toTs: Option[Integer] = None, aggregate: Option[Integer] = None, fill: Option[Boolean] = None, mappingPriority: Option[String] = None, responseFormat: Option[String] = None): Option[GENERICRESPONSE] = {
    val await = Try(Await.result(indexCcV1HistoricalDaysAsync(market, instrument, groups, limit, toTs, aggregate, fill, mappingPriority, responseFormat), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * 
   *
   * @param market The exchange to obtain data from 
   * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. 
   * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME (optional, default to [])
   * @param limit The number of data points to return (optional, default to 30)
   * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
   * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
   * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
   * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
   * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
   * @return Future(GENERICRESPONSE)
   */
  def indexCcV1HistoricalDaysAsync(market: String, instrument: String, groups: Option[List[String]] = None, limit: Option[Integer] = None, toTs: Option[Integer] = None, aggregate: Option[Integer] = None, fill: Option[Boolean] = None, mappingPriority: Option[String] = None, responseFormat: Option[String] = None): Future[GENERICRESPONSE] = {
      helper.indexCcV1HistoricalDays(market, instrument, groups, limit, toTs, aggregate, fill, mappingPriority, responseFormat)
  }

  /**
   * 
   * 
   *
   * @param market The exchange to obtain data from 
   * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. 
   * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME (optional, default to [])
   * @param limit The number of data points to return (optional, default to 30)
   * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
   * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
   * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
   * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
   * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
   * @return GENERICRESPONSE
   */
  def indexCcV1HistoricalHours(market: String, instrument: String, groups: Option[List[String]] = None, limit: Option[Integer] = None, toTs: Option[Integer] = None, aggregate: Option[Integer] = None, fill: Option[Boolean] = None, mappingPriority: Option[String] = None, responseFormat: Option[String] = None): Option[GENERICRESPONSE] = {
    val await = Try(Await.result(indexCcV1HistoricalHoursAsync(market, instrument, groups, limit, toTs, aggregate, fill, mappingPriority, responseFormat), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * 
   *
   * @param market The exchange to obtain data from 
   * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. 
   * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME (optional, default to [])
   * @param limit The number of data points to return (optional, default to 30)
   * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
   * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
   * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
   * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
   * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
   * @return Future(GENERICRESPONSE)
   */
  def indexCcV1HistoricalHoursAsync(market: String, instrument: String, groups: Option[List[String]] = None, limit: Option[Integer] = None, toTs: Option[Integer] = None, aggregate: Option[Integer] = None, fill: Option[Boolean] = None, mappingPriority: Option[String] = None, responseFormat: Option[String] = None): Future[GENERICRESPONSE] = {
      helper.indexCcV1HistoricalHours(market, instrument, groups, limit, toTs, aggregate, fill, mappingPriority, responseFormat)
  }

  /**
   * 
   * 
   *
   * @param market The exchange to obtain data from 
   * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. 
   * @param afterTs Unix timestamp in seconds of the earliest index message in the response (optional)
   * @param lastCcseq The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request. (optional, default to 0)
   * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
   * @param limit The maximum number of index messages to return (optional, default to 100)
   * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
   * @param return404OnEmptyResponse If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)
   * @return GENERICRESPONSE
   */
  def indexCcV1HistoricalMessages(market: String, instrument: String, afterTs: Option[Integer] = None, lastCcseq: Option[Integer] = None, mappingPriority: Option[String] = None, limit: Option[Integer] = None, responseFormat: Option[String] = None, return404OnEmptyResponse: Option[Boolean] = None): Option[GENERICRESPONSE] = {
    val await = Try(Await.result(indexCcV1HistoricalMessagesAsync(market, instrument, afterTs, lastCcseq, mappingPriority, limit, responseFormat, return404OnEmptyResponse), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * 
   *
   * @param market The exchange to obtain data from 
   * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. 
   * @param afterTs Unix timestamp in seconds of the earliest index message in the response (optional)
   * @param lastCcseq The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request. (optional, default to 0)
   * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
   * @param limit The maximum number of index messages to return (optional, default to 100)
   * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
   * @param return404OnEmptyResponse If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)
   * @return Future(GENERICRESPONSE)
   */
  def indexCcV1HistoricalMessagesAsync(market: String, instrument: String, afterTs: Option[Integer] = None, lastCcseq: Option[Integer] = None, mappingPriority: Option[String] = None, limit: Option[Integer] = None, responseFormat: Option[String] = None, return404OnEmptyResponse: Option[Boolean] = None): Future[GENERICRESPONSE] = {
      helper.indexCcV1HistoricalMessages(market, instrument, afterTs, lastCcseq, mappingPriority, limit, responseFormat, return404OnEmptyResponse)
  }

  /**
   * 
   * 
   *
   * @param market The exchange to obtain data from 
   * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. 
   * @param hourTs Unix timestamp in seconds for the hour containing the index updates you are interested in. You can pass any timestamp in the hour but we will round it down the the full hour timestmap and return all index updates in that hour. (optional)
   * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
   * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
   * @param return404OnEmptyResponse If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)
   * @return GENERICRESPONSE
   */
  def indexCcV1HistoricalMessagesHour(market: String, instrument: String, hourTs: Option[Integer] = None, mappingPriority: Option[String] = None, responseFormat: Option[String] = None, return404OnEmptyResponse: Option[Boolean] = None): Option[GENERICRESPONSE] = {
    val await = Try(Await.result(indexCcV1HistoricalMessagesHourAsync(market, instrument, hourTs, mappingPriority, responseFormat, return404OnEmptyResponse), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * 
   *
   * @param market The exchange to obtain data from 
   * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. 
   * @param hourTs Unix timestamp in seconds for the hour containing the index updates you are interested in. You can pass any timestamp in the hour but we will round it down the the full hour timestmap and return all index updates in that hour. (optional)
   * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
   * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
   * @param return404OnEmptyResponse If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)
   * @return Future(GENERICRESPONSE)
   */
  def indexCcV1HistoricalMessagesHourAsync(market: String, instrument: String, hourTs: Option[Integer] = None, mappingPriority: Option[String] = None, responseFormat: Option[String] = None, return404OnEmptyResponse: Option[Boolean] = None): Future[GENERICRESPONSE] = {
      helper.indexCcV1HistoricalMessagesHour(market, instrument, hourTs, mappingPriority, responseFormat, return404OnEmptyResponse)
  }

  /**
   * 
   * 
   *
   * @param market The exchange to obtain data from 
   * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. 
   * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME (optional, default to [])
   * @param limit The number of data points to return (optional, default to 30)
   * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
   * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
   * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
   * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
   * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
   * @return GENERICRESPONSE
   */
  def indexCcV1HistoricalMinutes(market: String, instrument: String, groups: Option[List[String]] = None, limit: Option[Integer] = None, toTs: Option[Integer] = None, aggregate: Option[Integer] = None, fill: Option[Boolean] = None, mappingPriority: Option[String] = None, responseFormat: Option[String] = None): Option[GENERICRESPONSE] = {
    val await = Try(Await.result(indexCcV1HistoricalMinutesAsync(market, instrument, groups, limit, toTs, aggregate, fill, mappingPriority, responseFormat), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * 
   *
   * @param market The exchange to obtain data from 
   * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. 
   * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME (optional, default to [])
   * @param limit The number of data points to return (optional, default to 30)
   * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
   * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
   * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
   * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
   * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
   * @return Future(GENERICRESPONSE)
   */
  def indexCcV1HistoricalMinutesAsync(market: String, instrument: String, groups: Option[List[String]] = None, limit: Option[Integer] = None, toTs: Option[Integer] = None, aggregate: Option[Integer] = None, fill: Option[Boolean] = None, mappingPriority: Option[String] = None, responseFormat: Option[String] = None): Future[GENERICRESPONSE] = {
      helper.indexCcV1HistoricalMinutes(market, instrument, groups, limit, toTs, aggregate, fill, mappingPriority, responseFormat)
  }

  /**
   * 
   * 
   *
   * @param market The exchange to obtain data from 
   * @param instruments A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first. 
   * @param groups When requesting metadata entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: STATUS,INTERNAL,GENERAL,MIGRATION,SOURCE (optional, default to [])
   * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
   * @return GENERICRESPONSE
   */
  def indexCcV1LatestInstrumentMetadata(market: String, instruments: List[String], groups: Option[List[String]] = None, mappingPriority: Option[String] = None): Option[GENERICRESPONSE] = {
    val await = Try(Await.result(indexCcV1LatestInstrumentMetadataAsync(market, instruments, groups, mappingPriority), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * 
   *
   * @param market The exchange to obtain data from 
   * @param instruments A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first. 
   * @param groups When requesting metadata entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: STATUS,INTERNAL,GENERAL,MIGRATION,SOURCE (optional, default to [])
   * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
   * @return Future(GENERICRESPONSE)
   */
  def indexCcV1LatestInstrumentMetadataAsync(market: String, instruments: List[String], groups: Option[List[String]] = None, mappingPriority: Option[String] = None): Future[GENERICRESPONSE] = {
      helper.indexCcV1LatestInstrumentMetadata(market, instruments, groups, mappingPriority)
  }

  /**
   * 
   * 
   *
   * @param market The exchange to obtain data from 
   * @param instruments A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first. 
   * @param groups When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME (optional, default to [])
   * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
   * @return GENERICRESPONSE
   */
  def indexCcV1LatestTick(market: String, instruments: List[String], groups: Option[List[String]] = None, mappingPriority: Option[String] = None): Option[GENERICRESPONSE] = {
    val await = Try(Await.result(indexCcV1LatestTickAsync(market, instruments, groups, mappingPriority), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * 
   *
   * @param market The exchange to obtain data from 
   * @param instruments A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first. 
   * @param groups When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME (optional, default to [])
   * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
   * @return Future(GENERICRESPONSE)
   */
  def indexCcV1LatestTickAsync(market: String, instruments: List[String], groups: Option[List[String]] = None, mappingPriority: Option[String] = None): Future[GENERICRESPONSE] = {
      helper.indexCcV1LatestTick(market, instruments, groups, mappingPriority)
  }

  /**
   * 
   * 
   *
   * @param market The exchange to obtain data from (optional, default to )
   * @return GENERICRESPONSE
   */
  def indexCcV1Markets(market: Option[String] = None): Option[GENERICRESPONSE] = {
    val await = Try(Await.result(indexCcV1MarketsAsync(market), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * 
   *
   * @param market The exchange to obtain data from (optional, default to )
   * @return Future(GENERICRESPONSE)
   */
  def indexCcV1MarketsAsync(market: Option[String] = None): Future[GENERICRESPONSE] = {
      helper.indexCcV1Markets(market)
  }

  /**
   * 
   * 
   *
   * @param market The exchange to obtain data from (optional, default to )
   * @param instrument The mapped instrument to retrieve on a specific market. (optional, default to )
   * @param instrumentStatus The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED (optional, default to [])
   * @return GENERICRESPONSE
   */
  def indexCcV1MarketsInstruments(market: Option[String] = None, instrument: Option[String] = None, instrumentStatus: Option[List[String]] = None): Option[GENERICRESPONSE] = {
    val await = Try(Await.result(indexCcV1MarketsInstrumentsAsync(market, instrument, instrumentStatus), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * 
   *
   * @param market The exchange to obtain data from (optional, default to )
   * @param instrument The mapped instrument to retrieve on a specific market. (optional, default to )
   * @param instrumentStatus The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED (optional, default to [])
   * @return Future(GENERICRESPONSE)
   */
  def indexCcV1MarketsInstrumentsAsync(market: Option[String] = None, instrument: Option[String] = None, instrumentStatus: Option[List[String]] = None): Future[GENERICRESPONSE] = {
      helper.indexCcV1MarketsInstruments(market, instrument, instrumentStatus)
  }

  /**
   * 
   * 
   *
   * @param market The exchange to obtain data from (optional, default to )
   * @param instrument The unmapped instrument to retrieve on a specific market. (optional, default to )
   * @param instrumentStatus The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED (optional, default to [])
   * @return GENERICRESPONSE
   */
  def indexCcV1MarketsInstrumentsUnmapped(market: Option[String] = None, instrument: Option[String] = None, instrumentStatus: Option[List[String]] = None): Option[GENERICRESPONSE] = {
    val await = Try(Await.result(indexCcV1MarketsInstrumentsUnmappedAsync(market, instrument, instrumentStatus), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * 
   *
   * @param market The exchange to obtain data from (optional, default to )
   * @param instrument The unmapped instrument to retrieve on a specific market. (optional, default to )
   * @param instrumentStatus The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED (optional, default to [])
   * @return Future(GENERICRESPONSE)
   */
  def indexCcV1MarketsInstrumentsUnmappedAsync(market: Option[String] = None, instrument: Option[String] = None, instrumentStatus: Option[List[String]] = None): Future[GENERICRESPONSE] = {
      helper.indexCcV1MarketsInstrumentsUnmapped(market, instrument, instrumentStatus)
  }

}

class ReferenceRatesApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def indexCcV1HistoricalDays(market: String,
    instrument: String,
    groups: Option[List[String]] = None,
    limit: Option[Integer] = None,
    toTs: Option[Integer] = None,
    aggregate: Option[Integer] = None,
    fill: Option[Boolean] = None,
    mappingPriority: Option[String] = None,
    responseFormat: Option[String] = None
    )(implicit reader: ClientResponseReader[GENERICRESPONSE]): Future[GENERICRESPONSE] = {
    // create path and map variables
    val path = (addFmt("/index/cc/v1/historical/days"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (market == null) throw new Exception("Missing required parameter 'market' when calling ReferenceRatesApi->indexCcV1HistoricalDays")

    if (instrument == null) throw new Exception("Missing required parameter 'instrument' when calling ReferenceRatesApi->indexCcV1HistoricalDays")

    queryParams += "market" -> market.toString
    queryParams += "instrument" -> instrument.toString
    groups match {
      case Some(param) => queryParams += "groups" -> param.toString
      case _ => queryParams
    }
    limit match {
      case Some(param) => queryParams += "limit" -> param.toString
      case _ => queryParams
    }
    toTs match {
      case Some(param) => queryParams += "to_ts" -> param.toString
      case _ => queryParams
    }
    aggregate match {
      case Some(param) => queryParams += "aggregate" -> param.toString
      case _ => queryParams
    }
    fill match {
      case Some(param) => queryParams += "fill" -> param.toString
      case _ => queryParams
    }
    mappingPriority match {
      case Some(param) => queryParams += "mapping_priority" -> param.toString
      case _ => queryParams
    }
    responseFormat match {
      case Some(param) => queryParams += "response_format" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def indexCcV1HistoricalHours(market: String,
    instrument: String,
    groups: Option[List[String]] = None,
    limit: Option[Integer] = None,
    toTs: Option[Integer] = None,
    aggregate: Option[Integer] = None,
    fill: Option[Boolean] = None,
    mappingPriority: Option[String] = None,
    responseFormat: Option[String] = None
    )(implicit reader: ClientResponseReader[GENERICRESPONSE]): Future[GENERICRESPONSE] = {
    // create path and map variables
    val path = (addFmt("/index/cc/v1/historical/hours"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (market == null) throw new Exception("Missing required parameter 'market' when calling ReferenceRatesApi->indexCcV1HistoricalHours")

    if (instrument == null) throw new Exception("Missing required parameter 'instrument' when calling ReferenceRatesApi->indexCcV1HistoricalHours")

    queryParams += "market" -> market.toString
    queryParams += "instrument" -> instrument.toString
    groups match {
      case Some(param) => queryParams += "groups" -> param.toString
      case _ => queryParams
    }
    limit match {
      case Some(param) => queryParams += "limit" -> param.toString
      case _ => queryParams
    }
    toTs match {
      case Some(param) => queryParams += "to_ts" -> param.toString
      case _ => queryParams
    }
    aggregate match {
      case Some(param) => queryParams += "aggregate" -> param.toString
      case _ => queryParams
    }
    fill match {
      case Some(param) => queryParams += "fill" -> param.toString
      case _ => queryParams
    }
    mappingPriority match {
      case Some(param) => queryParams += "mapping_priority" -> param.toString
      case _ => queryParams
    }
    responseFormat match {
      case Some(param) => queryParams += "response_format" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def indexCcV1HistoricalMessages(market: String,
    instrument: String,
    afterTs: Option[Integer] = None,
    lastCcseq: Option[Integer] = None,
    mappingPriority: Option[String] = None,
    limit: Option[Integer] = None,
    responseFormat: Option[String] = None,
    return404OnEmptyResponse: Option[Boolean] = None
    )(implicit reader: ClientResponseReader[GENERICRESPONSE]): Future[GENERICRESPONSE] = {
    // create path and map variables
    val path = (addFmt("/index/cc/v1/historical/messages"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (market == null) throw new Exception("Missing required parameter 'market' when calling ReferenceRatesApi->indexCcV1HistoricalMessages")

    if (instrument == null) throw new Exception("Missing required parameter 'instrument' when calling ReferenceRatesApi->indexCcV1HistoricalMessages")

    queryParams += "market" -> market.toString
    queryParams += "instrument" -> instrument.toString
    afterTs match {
      case Some(param) => queryParams += "after_ts" -> param.toString
      case _ => queryParams
    }
    lastCcseq match {
      case Some(param) => queryParams += "last_ccseq" -> param.toString
      case _ => queryParams
    }
    mappingPriority match {
      case Some(param) => queryParams += "mapping_priority" -> param.toString
      case _ => queryParams
    }
    limit match {
      case Some(param) => queryParams += "limit" -> param.toString
      case _ => queryParams
    }
    responseFormat match {
      case Some(param) => queryParams += "response_format" -> param.toString
      case _ => queryParams
    }
    return404OnEmptyResponse match {
      case Some(param) => queryParams += "return_404_on_empty_response" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def indexCcV1HistoricalMessagesHour(market: String,
    instrument: String,
    hourTs: Option[Integer] = None,
    mappingPriority: Option[String] = None,
    responseFormat: Option[String] = None,
    return404OnEmptyResponse: Option[Boolean] = None
    )(implicit reader: ClientResponseReader[GENERICRESPONSE]): Future[GENERICRESPONSE] = {
    // create path and map variables
    val path = (addFmt("/index/cc/v1/historical/messages/hour"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (market == null) throw new Exception("Missing required parameter 'market' when calling ReferenceRatesApi->indexCcV1HistoricalMessagesHour")

    if (instrument == null) throw new Exception("Missing required parameter 'instrument' when calling ReferenceRatesApi->indexCcV1HistoricalMessagesHour")

    queryParams += "market" -> market.toString
    queryParams += "instrument" -> instrument.toString
    hourTs match {
      case Some(param) => queryParams += "hour_ts" -> param.toString
      case _ => queryParams
    }
    mappingPriority match {
      case Some(param) => queryParams += "mapping_priority" -> param.toString
      case _ => queryParams
    }
    responseFormat match {
      case Some(param) => queryParams += "response_format" -> param.toString
      case _ => queryParams
    }
    return404OnEmptyResponse match {
      case Some(param) => queryParams += "return_404_on_empty_response" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def indexCcV1HistoricalMinutes(market: String,
    instrument: String,
    groups: Option[List[String]] = None,
    limit: Option[Integer] = None,
    toTs: Option[Integer] = None,
    aggregate: Option[Integer] = None,
    fill: Option[Boolean] = None,
    mappingPriority: Option[String] = None,
    responseFormat: Option[String] = None
    )(implicit reader: ClientResponseReader[GENERICRESPONSE]): Future[GENERICRESPONSE] = {
    // create path and map variables
    val path = (addFmt("/index/cc/v1/historical/minutes"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (market == null) throw new Exception("Missing required parameter 'market' when calling ReferenceRatesApi->indexCcV1HistoricalMinutes")

    if (instrument == null) throw new Exception("Missing required parameter 'instrument' when calling ReferenceRatesApi->indexCcV1HistoricalMinutes")

    queryParams += "market" -> market.toString
    queryParams += "instrument" -> instrument.toString
    groups match {
      case Some(param) => queryParams += "groups" -> param.toString
      case _ => queryParams
    }
    limit match {
      case Some(param) => queryParams += "limit" -> param.toString
      case _ => queryParams
    }
    toTs match {
      case Some(param) => queryParams += "to_ts" -> param.toString
      case _ => queryParams
    }
    aggregate match {
      case Some(param) => queryParams += "aggregate" -> param.toString
      case _ => queryParams
    }
    fill match {
      case Some(param) => queryParams += "fill" -> param.toString
      case _ => queryParams
    }
    mappingPriority match {
      case Some(param) => queryParams += "mapping_priority" -> param.toString
      case _ => queryParams
    }
    responseFormat match {
      case Some(param) => queryParams += "response_format" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def indexCcV1LatestInstrumentMetadata(market: String,
    instruments: List[String],
    groups: Option[List[String]] = None,
    mappingPriority: Option[String] = None
    )(implicit reader: ClientResponseReader[GENERICRESPONSE]): Future[GENERICRESPONSE] = {
    // create path and map variables
    val path = (addFmt("/index/cc/v1/latest/instrument/metadata"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (market == null) throw new Exception("Missing required parameter 'market' when calling ReferenceRatesApi->indexCcV1LatestInstrumentMetadata")

    if (instruments == null) throw new Exception("Missing required parameter 'instruments' when calling ReferenceRatesApi->indexCcV1LatestInstrumentMetadata")
    queryParams += "market" -> market.toString
    queryParams += "instruments" -> instruments.toString
    groups match {
      case Some(param) => queryParams += "groups" -> param.toString
      case _ => queryParams
    }
    mappingPriority match {
      case Some(param) => queryParams += "mapping_priority" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def indexCcV1LatestTick(market: String,
    instruments: List[String],
    groups: Option[List[String]] = None,
    mappingPriority: Option[String] = None
    )(implicit reader: ClientResponseReader[GENERICRESPONSE]): Future[GENERICRESPONSE] = {
    // create path and map variables
    val path = (addFmt("/index/cc/v1/latest/tick"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (market == null) throw new Exception("Missing required parameter 'market' when calling ReferenceRatesApi->indexCcV1LatestTick")

    if (instruments == null) throw new Exception("Missing required parameter 'instruments' when calling ReferenceRatesApi->indexCcV1LatestTick")
    queryParams += "market" -> market.toString
    queryParams += "instruments" -> instruments.toString
    groups match {
      case Some(param) => queryParams += "groups" -> param.toString
      case _ => queryParams
    }
    mappingPriority match {
      case Some(param) => queryParams += "mapping_priority" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def indexCcV1Markets(market: Option[String] = None
    )(implicit reader: ClientResponseReader[GENERICRESPONSE]): Future[GENERICRESPONSE] = {
    // create path and map variables
    val path = (addFmt("/index/cc/v1/markets"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    market match {
      case Some(param) => queryParams += "market" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def indexCcV1MarketsInstruments(market: Option[String] = None,
    instrument: Option[String] = None,
    instrumentStatus: Option[List[String]] = None
    )(implicit reader: ClientResponseReader[GENERICRESPONSE]): Future[GENERICRESPONSE] = {
    // create path and map variables
    val path = (addFmt("/index/cc/v1/markets/instruments"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    market match {
      case Some(param) => queryParams += "market" -> param.toString
      case _ => queryParams
    }
    instrument match {
      case Some(param) => queryParams += "instrument" -> param.toString
      case _ => queryParams
    }
    instrumentStatus match {
      case Some(param) => queryParams += "instrument_status" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def indexCcV1MarketsInstrumentsUnmapped(market: Option[String] = None,
    instrument: Option[String] = None,
    instrumentStatus: Option[List[String]] = None
    )(implicit reader: ClientResponseReader[GENERICRESPONSE]): Future[GENERICRESPONSE] = {
    // create path and map variables
    val path = (addFmt("/index/cc/v1/markets/instruments/unmapped"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    market match {
      case Some(param) => queryParams += "market" -> param.toString
      case _ => queryParams
    }
    instrument match {
      case Some(param) => queryParams += "instrument" -> param.toString
      case _ => queryParams
    }
    instrumentStatus match {
      case Some(param) => queryParams += "instrument_status" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }


}
