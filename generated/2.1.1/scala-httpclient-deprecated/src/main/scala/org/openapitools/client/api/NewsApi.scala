/**
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 * CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: data@cryptocompare.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api

import java.text.SimpleDateFormat

import org.openapitools.client.model.Error
import org.openapitools.client.model.GENERICRESPONSE
import org.openapitools.client.{ApiInvoker, ApiException}

import collection.mutable
import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart
import com.wordnik.swagger.client._
import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._
import javax.ws.rs.core.Response.Status.Family

import java.net.URI
import java.io.File
import java.util.Date
import java.util.TimeZone
import javax.ws.rs.core.{MediaType, Response}

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.collection.mutable.HashMap
import scala.util.{Failure, Success, Try}

import org.json4s._

class NewsApi(
  val defBasePath: String = "https://data-api.cryptocompare.com",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new NewsApiAsyncHelper(client, config)

  /**
   * 
   * 
   *
   * @param sourceIds Get articles from specific sources; either by their ids or keys (optional, default to [""])
   * @param lang The article Preferred language - English (EN), Portuguese (PT), Espanol (ES) (optional, default to EN)
   * @param categories News article categories to return (optional, default to [""])
   * @param excludeCategories News article categories to exclude from results (optional, default to [""])
   * @param toTs Articles published on or before this timestamp (optional, default to -1)
   * @return GENERICRESPONSE
   */
  def newsV1ArticleList(sourceIds: Option[List[String]] = None, lang: Option[String] = None, categories: Option[List[String]] = None, excludeCategories: Option[List[String]] = None, toTs: Option[Integer] = None): Option[GENERICRESPONSE] = {
    val await = Try(Await.result(newsV1ArticleListAsync(sourceIds, lang, categories, excludeCategories, toTs), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * 
   *
   * @param sourceIds Get articles from specific sources; either by their ids or keys (optional, default to [""])
   * @param lang The article Preferred language - English (EN), Portuguese (PT), Espanol (ES) (optional, default to EN)
   * @param categories News article categories to return (optional, default to [""])
   * @param excludeCategories News article categories to exclude from results (optional, default to [""])
   * @param toTs Articles published on or before this timestamp (optional, default to -1)
   * @return Future(GENERICRESPONSE)
   */
  def newsV1ArticleListAsync(sourceIds: Option[List[String]] = None, lang: Option[String] = None, categories: Option[List[String]] = None, excludeCategories: Option[List[String]] = None, toTs: Option[Integer] = None): Future[GENERICRESPONSE] = {
      helper.newsV1ArticleList(sourceIds, lang, categories, excludeCategories, toTs)
  }

  /**
   * 
   * 
   *
   * @return GENERICRESPONSE
   */
  def newsV1CategoryList(): Option[GENERICRESPONSE] = {
    val await = Try(Await.result(newsV1CategoryListAsync(), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * 
   *
   * @return Future(GENERICRESPONSE)
   */
  def newsV1CategoryListAsync(): Future[GENERICRESPONSE] = {
      helper.newsV1CategoryList()
  }

  /**
   * 
   * 
   *
   * @param lang The article source Preferred language - English (EN), Portuguese (PT), Espanol (ES) (optional, default to EN)
   * @param `type` RSS, API, TWITTER (optional, default to RSS)
   * @param status The status for the  article source entry. Allowed values: ACTIVE, INACTIVE (optional, default to ACTIVE)
   * @return GENERICRESPONSE
   */
  def newsV1SourceList(lang: Option[String] = None, `type`: Option[String] = None, status: Option[String] = None): Option[GENERICRESPONSE] = {
    val await = Try(Await.result(newsV1SourceListAsync(lang, `type`, status), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * 
   *
   * @param lang The article source Preferred language - English (EN), Portuguese (PT), Espanol (ES) (optional, default to EN)
   * @param `type` RSS, API, TWITTER (optional, default to RSS)
   * @param status The status for the  article source entry. Allowed values: ACTIVE, INACTIVE (optional, default to ACTIVE)
   * @return Future(GENERICRESPONSE)
   */
  def newsV1SourceListAsync(lang: Option[String] = None, `type`: Option[String] = None, status: Option[String] = None): Future[GENERICRESPONSE] = {
      helper.newsV1SourceList(lang, `type`, status)
  }

}

class NewsApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def newsV1ArticleList(sourceIds: Option[List[String]] = None,
    lang: Option[String] = None,
    categories: Option[List[String]] = None,
    excludeCategories: Option[List[String]] = None,
    toTs: Option[Integer] = None
    )(implicit reader: ClientResponseReader[GENERICRESPONSE]): Future[GENERICRESPONSE] = {
    // create path and map variables
    val path = (addFmt("/news/v1/article/list"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    sourceIds match {
      case Some(param) => queryParams += "source_ids" -> param.toString
      case _ => queryParams
    }
    lang match {
      case Some(param) => queryParams += "lang" -> param.toString
      case _ => queryParams
    }
    categories match {
      case Some(param) => queryParams += "categories" -> param.toString
      case _ => queryParams
    }
    excludeCategories match {
      case Some(param) => queryParams += "exclude_categories" -> param.toString
      case _ => queryParams
    }
    toTs match {
      case Some(param) => queryParams += "to_ts" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def newsV1CategoryList()(implicit reader: ClientResponseReader[GENERICRESPONSE]): Future[GENERICRESPONSE] = {
    // create path and map variables
    val path = (addFmt("/news/v1/category/list"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def newsV1SourceList(lang: Option[String] = None,
    `type`: Option[String] = None,
    status: Option[String] = None
    )(implicit reader: ClientResponseReader[GENERICRESPONSE]): Future[GENERICRESPONSE] = {
    // create path and map variables
    val path = (addFmt("/news/v1/source/list"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    lang match {
      case Some(param) => queryParams += "lang" -> param.toString
      case _ => queryParams
    }
    `type` match {
      case Some(param) => queryParams += "type" -> param.toString
      case _ => queryParams
    }
    status match {
      case Some(param) => queryParams += "status" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }


}
