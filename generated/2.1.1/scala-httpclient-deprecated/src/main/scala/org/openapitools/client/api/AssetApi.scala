/**
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 * CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: data@cryptocompare.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api

import java.text.SimpleDateFormat

import org.openapitools.client.model.Error
import org.openapitools.client.model.GENERICRESPONSE
import org.openapitools.client.{ApiInvoker, ApiException}

import collection.mutable
import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart
import com.wordnik.swagger.client._
import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._
import javax.ws.rs.core.Response.Status.Family

import java.net.URI
import java.io.File
import java.util.Date
import java.util.TimeZone
import javax.ws.rs.core.{MediaType, Response}

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.collection.mutable.HashMap
import scala.util.{Failure, Success, Try}

import org.json4s._

class AssetApi(
  val defBasePath: String = "https://data-api.cryptocompare.com",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new AssetApiAsyncHelper(client, config)

  /**
   * 
   * 
   *
   * @param address  
   * @param chainSymbol  
   * @param groups  (optional, default to )
   * @return GENERICRESPONSE
   */
  def assetV1DataByAddress(address: String, chainSymbol: String, groups: Option[String] = None): Option[GENERICRESPONSE] = {
    val await = Try(Await.result(assetV1DataByAddressAsync(address, chainSymbol, groups), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * 
   *
   * @param address  
   * @param chainSymbol  
   * @param groups  (optional, default to )
   * @return Future(GENERICRESPONSE)
   */
  def assetV1DataByAddressAsync(address: String, chainSymbol: String, groups: Option[String] = None): Future[GENERICRESPONSE] = {
      helper.assetV1DataByAddress(address, chainSymbol, groups)
  }

  /**
   * 
   * 
   *
   * @param assetId The asset id you are interested in 
   * @param groups  (optional, default to )
   * @return GENERICRESPONSE
   */
  def assetV1DataById(assetId: Integer, groups: Option[String] = None): Option[GENERICRESPONSE] = {
    val await = Try(Await.result(assetV1DataByIdAsync(assetId, groups), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * 
   *
   * @param assetId The asset id you are interested in 
   * @param groups  (optional, default to )
   * @return Future(GENERICRESPONSE)
   */
  def assetV1DataByIdAsync(assetId: Integer, groups: Option[String] = None): Future[GENERICRESPONSE] = {
      helper.assetV1DataById(assetId, groups)
  }

  /**
   * 
   * 
   *
   * @param assetSymbol The asset symbol you are interested in 
   * @param groups  (optional, default to )
   * @return GENERICRESPONSE
   */
  def assetV1DataBySymbol(assetSymbol: String, groups: Option[String] = None): Option[GENERICRESPONSE] = {
    val await = Try(Await.result(assetV1DataBySymbolAsync(assetSymbol, groups), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * 
   *
   * @param assetSymbol The asset symbol you are interested in 
   * @param groups  (optional, default to )
   * @return Future(GENERICRESPONSE)
   */
  def assetV1DataBySymbolAsync(assetSymbol: String, groups: Option[String] = None): Future[GENERICRESPONSE] = {
      helper.assetV1DataBySymbol(assetSymbol, groups)
  }

  /**
   * 
   * 
   *
   * @param page The page number for the request to get {page_size} coins at the time. (optional, default to 1)
   * @param pageSize The number of items returned per page (optional, default to 100)
   * @param assetType The asset class/type (optional, default to )
   * @param sortBy Sort by field ( CREATED_ON,UPDATED_ON,SYMBOL ) (optional, default to CREATED_ON)
   * @param sortDirection Sort direction ( DESC,ASC ) (optional, default to DESC)
   * @param groups  (optional, default to )
   * @return GENERICRESPONSE
   */
  def assetV1TopList(page: Option[Integer] = None, pageSize: Option[Integer] = None, assetType: Option[String] = None, sortBy: Option[String] = None, sortDirection: Option[String] = None, groups: Option[String] = None): Option[GENERICRESPONSE] = {
    val await = Try(Await.result(assetV1TopListAsync(page, pageSize, assetType, sortBy, sortDirection, groups), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * 
   *
   * @param page The page number for the request to get {page_size} coins at the time. (optional, default to 1)
   * @param pageSize The number of items returned per page (optional, default to 100)
   * @param assetType The asset class/type (optional, default to )
   * @param sortBy Sort by field ( CREATED_ON,UPDATED_ON,SYMBOL ) (optional, default to CREATED_ON)
   * @param sortDirection Sort direction ( DESC,ASC ) (optional, default to DESC)
   * @param groups  (optional, default to )
   * @return Future(GENERICRESPONSE)
   */
  def assetV1TopListAsync(page: Option[Integer] = None, pageSize: Option[Integer] = None, assetType: Option[String] = None, sortBy: Option[String] = None, sortDirection: Option[String] = None, groups: Option[String] = None): Future[GENERICRESPONSE] = {
      helper.assetV1TopList(page, pageSize, assetType, sortBy, sortDirection, groups)
  }

}

class AssetApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def assetV1DataByAddress(address: String,
    chainSymbol: String,
    groups: Option[String] = None
    )(implicit reader: ClientResponseReader[GENERICRESPONSE]): Future[GENERICRESPONSE] = {
    // create path and map variables
    val path = (addFmt("/asset/v1/data/by/address"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (address == null) throw new Exception("Missing required parameter 'address' when calling AssetApi->assetV1DataByAddress")

    if (chainSymbol == null) throw new Exception("Missing required parameter 'chainSymbol' when calling AssetApi->assetV1DataByAddress")

    queryParams += "address" -> address.toString
    queryParams += "chain_symbol" -> chainSymbol.toString
    groups match {
      case Some(param) => queryParams += "groups" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def assetV1DataById(assetId: Integer,
    groups: Option[String] = None
    )(implicit reader: ClientResponseReader[GENERICRESPONSE]): Future[GENERICRESPONSE] = {
    // create path and map variables
    val path = (addFmt("/asset/v1/data/by/id"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    queryParams += "asset_id" -> assetId.toString
    groups match {
      case Some(param) => queryParams += "groups" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def assetV1DataBySymbol(assetSymbol: String,
    groups: Option[String] = None
    )(implicit reader: ClientResponseReader[GENERICRESPONSE]): Future[GENERICRESPONSE] = {
    // create path and map variables
    val path = (addFmt("/asset/v1/data/by/symbol"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (assetSymbol == null) throw new Exception("Missing required parameter 'assetSymbol' when calling AssetApi->assetV1DataBySymbol")

    queryParams += "asset_symbol" -> assetSymbol.toString
    groups match {
      case Some(param) => queryParams += "groups" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def assetV1TopList(page: Option[Integer] = None,
    pageSize: Option[Integer] = None,
    assetType: Option[String] = None,
    sortBy: Option[String] = None,
    sortDirection: Option[String] = None,
    groups: Option[String] = None
    )(implicit reader: ClientResponseReader[GENERICRESPONSE]): Future[GENERICRESPONSE] = {
    // create path and map variables
    val path = (addFmt("/asset/v1/top/list"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    page match {
      case Some(param) => queryParams += "page" -> param.toString
      case _ => queryParams
    }
    pageSize match {
      case Some(param) => queryParams += "page_size" -> param.toString
      case _ => queryParams
    }
    assetType match {
      case Some(param) => queryParams += "asset_type" -> param.toString
      case _ => queryParams
    }
    sortBy match {
      case Some(param) => queryParams += "sort_by" -> param.toString
      case _ => queryParams
    }
    sortDirection match {
      case Some(param) => queryParams += "sort_direction" -> param.toString
      case _ => queryParams
    }
    groups match {
      case Some(param) => queryParams += "groups" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }


}
