/**
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 * CryptoCompare is the world\'s leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: data@cryptocompare.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';

import { map } from 'rxjs/operators';
import IHttpClient from '../IHttpClient';
import { inject, injectable } from 'inversify';
import { IAPIConfiguration } from '../IAPIConfiguration';
import { Headers } from '../Headers';
import HttpResponse from '../HttpResponse';

import { GENERICRESPONSE } from '../model/gENERICRESPONSE';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class FuturesService {
    private basePath: string = 'https://data-api.cryptocompare.com';

    constructor(@inject('IApiHttpClient') private httpClient: IHttpClient,
        @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME
     * @param limit The number of data points to return
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV
     
     */
    public futuresV1HistoricalDays(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', observe?: 'body', headers?: Headers): Observable<GENERICRESPONSE>;
    public futuresV1HistoricalDays(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', observe?: 'response', headers?: Headers): Observable<HttpResponse<GENERICRESPONSE>>;
    public futuresV1HistoricalDays(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (market === null || market === undefined){
            throw new Error('Required parameter market was null or undefined when calling futuresV1HistoricalDays.');
        }

        if (instrument === null || instrument === undefined){
            throw new Error('Required parameter instrument was null or undefined when calling futuresV1HistoricalDays.');
        }

        let queryParameters: string[] = [];
        if (market !== undefined) {
            queryParameters.push('market='+encodeURIComponent(String(market)));
        }
        if (instrument !== undefined) {
            queryParameters.push('instrument='+encodeURIComponent(String(instrument)));
        }
        if (groups) {
            queryParameters.push('groups='+encodeURIComponent(groups.join(COLLECTION_FORMATS['csv'])));
        }
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }
        if (toTs !== undefined) {
            queryParameters.push('toTs='+encodeURIComponent(String(toTs)));
        }
        if (aggregate !== undefined) {
            queryParameters.push('aggregate='+encodeURIComponent(String(aggregate)));
        }
        if (fill !== undefined) {
            queryParameters.push('fill='+encodeURIComponent(String(fill)));
        }
        if (mappingPriority !== undefined) {
            queryParameters.push('mappingPriority='+encodeURIComponent(String(mappingPriority)));
        }
        if (responseFormat !== undefined) {
            queryParameters.push('responseFormat='+encodeURIComponent(String(responseFormat)));
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<GENERICRESPONSE>> = this.httpClient.get(`${this.basePath}/futures/v1/historical/days?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GENERICRESPONSE>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,OHLC,OHLC_MESSAGE,MESSAGE
     * @param limit The number of data points to return
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV
     
     */
    public futuresV1HistoricalFundingRateDays(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', observe?: 'body', headers?: Headers): Observable<GENERICRESPONSE>;
    public futuresV1HistoricalFundingRateDays(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', observe?: 'response', headers?: Headers): Observable<HttpResponse<GENERICRESPONSE>>;
    public futuresV1HistoricalFundingRateDays(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (market === null || market === undefined){
            throw new Error('Required parameter market was null or undefined when calling futuresV1HistoricalFundingRateDays.');
        }

        if (instrument === null || instrument === undefined){
            throw new Error('Required parameter instrument was null or undefined when calling futuresV1HistoricalFundingRateDays.');
        }

        let queryParameters: string[] = [];
        if (market !== undefined) {
            queryParameters.push('market='+encodeURIComponent(String(market)));
        }
        if (instrument !== undefined) {
            queryParameters.push('instrument='+encodeURIComponent(String(instrument)));
        }
        if (groups) {
            queryParameters.push('groups='+encodeURIComponent(groups.join(COLLECTION_FORMATS['csv'])));
        }
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }
        if (toTs !== undefined) {
            queryParameters.push('toTs='+encodeURIComponent(String(toTs)));
        }
        if (aggregate !== undefined) {
            queryParameters.push('aggregate='+encodeURIComponent(String(aggregate)));
        }
        if (fill !== undefined) {
            queryParameters.push('fill='+encodeURIComponent(String(fill)));
        }
        if (mappingPriority !== undefined) {
            queryParameters.push('mappingPriority='+encodeURIComponent(String(mappingPriority)));
        }
        if (responseFormat !== undefined) {
            queryParameters.push('responseFormat='+encodeURIComponent(String(responseFormat)));
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<GENERICRESPONSE>> = this.httpClient.get(`${this.basePath}/futures/v1/historical/funding-rate/days?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GENERICRESPONSE>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,OHLC,OHLC_MESSAGE,MESSAGE
     * @param limit The number of data points to return
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV
     
     */
    public futuresV1HistoricalFundingRateHours(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', observe?: 'body', headers?: Headers): Observable<GENERICRESPONSE>;
    public futuresV1HistoricalFundingRateHours(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', observe?: 'response', headers?: Headers): Observable<HttpResponse<GENERICRESPONSE>>;
    public futuresV1HistoricalFundingRateHours(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (market === null || market === undefined){
            throw new Error('Required parameter market was null or undefined when calling futuresV1HistoricalFundingRateHours.');
        }

        if (instrument === null || instrument === undefined){
            throw new Error('Required parameter instrument was null or undefined when calling futuresV1HistoricalFundingRateHours.');
        }

        let queryParameters: string[] = [];
        if (market !== undefined) {
            queryParameters.push('market='+encodeURIComponent(String(market)));
        }
        if (instrument !== undefined) {
            queryParameters.push('instrument='+encodeURIComponent(String(instrument)));
        }
        if (groups) {
            queryParameters.push('groups='+encodeURIComponent(groups.join(COLLECTION_FORMATS['csv'])));
        }
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }
        if (toTs !== undefined) {
            queryParameters.push('toTs='+encodeURIComponent(String(toTs)));
        }
        if (aggregate !== undefined) {
            queryParameters.push('aggregate='+encodeURIComponent(String(aggregate)));
        }
        if (fill !== undefined) {
            queryParameters.push('fill='+encodeURIComponent(String(fill)));
        }
        if (mappingPriority !== undefined) {
            queryParameters.push('mappingPriority='+encodeURIComponent(String(mappingPriority)));
        }
        if (responseFormat !== undefined) {
            queryParameters.push('responseFormat='+encodeURIComponent(String(responseFormat)));
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<GENERICRESPONSE>> = this.httpClient.get(`${this.basePath}/futures/v1/historical/funding-rate/hours?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GENERICRESPONSE>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param afterTs Unix timestamp in seconds of the earliest funding rate message in the response
     * @param lastCcseq The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request.
     * @param limit The maximum number of funding rate messages to return
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV
     * @param return404OnEmptyResponse If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.
     
     */
    public futuresV1HistoricalFundingRateMessages(market: string, instrument: string, afterTs?: number, lastCcseq?: number, limit?: number, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', return404OnEmptyResponse?: boolean, observe?: 'body', headers?: Headers): Observable<GENERICRESPONSE>;
    public futuresV1HistoricalFundingRateMessages(market: string, instrument: string, afterTs?: number, lastCcseq?: number, limit?: number, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', return404OnEmptyResponse?: boolean, observe?: 'response', headers?: Headers): Observable<HttpResponse<GENERICRESPONSE>>;
    public futuresV1HistoricalFundingRateMessages(market: string, instrument: string, afterTs?: number, lastCcseq?: number, limit?: number, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', return404OnEmptyResponse?: boolean, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (market === null || market === undefined){
            throw new Error('Required parameter market was null or undefined when calling futuresV1HistoricalFundingRateMessages.');
        }

        if (instrument === null || instrument === undefined){
            throw new Error('Required parameter instrument was null or undefined when calling futuresV1HistoricalFundingRateMessages.');
        }

        let queryParameters: string[] = [];
        if (market !== undefined) {
            queryParameters.push('market='+encodeURIComponent(String(market)));
        }
        if (instrument !== undefined) {
            queryParameters.push('instrument='+encodeURIComponent(String(instrument)));
        }
        if (afterTs !== undefined) {
            queryParameters.push('afterTs='+encodeURIComponent(String(afterTs)));
        }
        if (lastCcseq !== undefined) {
            queryParameters.push('lastCcseq='+encodeURIComponent(String(lastCcseq)));
        }
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }
        if (mappingPriority !== undefined) {
            queryParameters.push('mappingPriority='+encodeURIComponent(String(mappingPriority)));
        }
        if (responseFormat !== undefined) {
            queryParameters.push('responseFormat='+encodeURIComponent(String(responseFormat)));
        }
        if (return404OnEmptyResponse !== undefined) {
            queryParameters.push('return404OnEmptyResponse='+encodeURIComponent(String(return404OnEmptyResponse)));
        }

        // authentication (api_key_header) required
        if (this.APIConfiguration.apiKeys && this.APIConfiguration.apiKeys['authorization']) {
            headers['authorization'] = this.APIConfiguration.apiKeys['authorization'];
        }
        // authentication (api_key_query) required
        if (this.APIConfiguration.apiKeys && this.APIConfiguration.apiKeys['api_key']) {
            queryParameters.push('='+encodeURIComponent(String(this.APIConfiguration.apiKeys['api_key'])));
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<GENERICRESPONSE>> = this.httpClient.get(`${this.basePath}/futures/v1/historical/funding-rate-messages?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GENERICRESPONSE>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param hourTs Unix timestamp in seconds for the hour containing the funding rate updates you are interested in. You can pass any timestamp in the hour but we will round it down the the full hour timestmap and return all funding rate updates in that hour.
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV
     * @param return404OnEmptyResponse If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.
     
     */
    public futuresV1HistoricalFundingRateMessagesHour(market: string, instrument: string, hourTs?: number, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', return404OnEmptyResponse?: boolean, observe?: 'body', headers?: Headers): Observable<GENERICRESPONSE>;
    public futuresV1HistoricalFundingRateMessagesHour(market: string, instrument: string, hourTs?: number, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', return404OnEmptyResponse?: boolean, observe?: 'response', headers?: Headers): Observable<HttpResponse<GENERICRESPONSE>>;
    public futuresV1HistoricalFundingRateMessagesHour(market: string, instrument: string, hourTs?: number, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', return404OnEmptyResponse?: boolean, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (market === null || market === undefined){
            throw new Error('Required parameter market was null or undefined when calling futuresV1HistoricalFundingRateMessagesHour.');
        }

        if (instrument === null || instrument === undefined){
            throw new Error('Required parameter instrument was null or undefined when calling futuresV1HistoricalFundingRateMessagesHour.');
        }

        let queryParameters: string[] = [];
        if (market !== undefined) {
            queryParameters.push('market='+encodeURIComponent(String(market)));
        }
        if (instrument !== undefined) {
            queryParameters.push('instrument='+encodeURIComponent(String(instrument)));
        }
        if (hourTs !== undefined) {
            queryParameters.push('hourTs='+encodeURIComponent(String(hourTs)));
        }
        if (mappingPriority !== undefined) {
            queryParameters.push('mappingPriority='+encodeURIComponent(String(mappingPriority)));
        }
        if (responseFormat !== undefined) {
            queryParameters.push('responseFormat='+encodeURIComponent(String(responseFormat)));
        }
        if (return404OnEmptyResponse !== undefined) {
            queryParameters.push('return404OnEmptyResponse='+encodeURIComponent(String(return404OnEmptyResponse)));
        }

        // authentication (api_key_header) required
        if (this.APIConfiguration.apiKeys && this.APIConfiguration.apiKeys['authorization']) {
            headers['authorization'] = this.APIConfiguration.apiKeys['authorization'];
        }
        // authentication (api_key_query) required
        if (this.APIConfiguration.apiKeys && this.APIConfiguration.apiKeys['api_key']) {
            queryParameters.push('='+encodeURIComponent(String(this.APIConfiguration.apiKeys['api_key'])));
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<GENERICRESPONSE>> = this.httpClient.get(`${this.basePath}/futures/v1/historical/funding-rate-messages/hour?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GENERICRESPONSE>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,OHLC,OHLC_MESSAGE,MESSAGE
     * @param limit The number of data points to return
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV
     
     */
    public futuresV1HistoricalFundingRateMinutes(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', observe?: 'body', headers?: Headers): Observable<GENERICRESPONSE>;
    public futuresV1HistoricalFundingRateMinutes(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', observe?: 'response', headers?: Headers): Observable<HttpResponse<GENERICRESPONSE>>;
    public futuresV1HistoricalFundingRateMinutes(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (market === null || market === undefined){
            throw new Error('Required parameter market was null or undefined when calling futuresV1HistoricalFundingRateMinutes.');
        }

        if (instrument === null || instrument === undefined){
            throw new Error('Required parameter instrument was null or undefined when calling futuresV1HistoricalFundingRateMinutes.');
        }

        let queryParameters: string[] = [];
        if (market !== undefined) {
            queryParameters.push('market='+encodeURIComponent(String(market)));
        }
        if (instrument !== undefined) {
            queryParameters.push('instrument='+encodeURIComponent(String(instrument)));
        }
        if (groups) {
            queryParameters.push('groups='+encodeURIComponent(groups.join(COLLECTION_FORMATS['csv'])));
        }
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }
        if (toTs !== undefined) {
            queryParameters.push('toTs='+encodeURIComponent(String(toTs)));
        }
        if (aggregate !== undefined) {
            queryParameters.push('aggregate='+encodeURIComponent(String(aggregate)));
        }
        if (fill !== undefined) {
            queryParameters.push('fill='+encodeURIComponent(String(fill)));
        }
        if (mappingPriority !== undefined) {
            queryParameters.push('mappingPriority='+encodeURIComponent(String(mappingPriority)));
        }
        if (responseFormat !== undefined) {
            queryParameters.push('responseFormat='+encodeURIComponent(String(responseFormat)));
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<GENERICRESPONSE>> = this.httpClient.get(`${this.basePath}/futures/v1/historical/funding-rate/minutes?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GENERICRESPONSE>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME
     * @param limit The number of data points to return
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV
     
     */
    public futuresV1HistoricalHours(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', observe?: 'body', headers?: Headers): Observable<GENERICRESPONSE>;
    public futuresV1HistoricalHours(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', observe?: 'response', headers?: Headers): Observable<HttpResponse<GENERICRESPONSE>>;
    public futuresV1HistoricalHours(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (market === null || market === undefined){
            throw new Error('Required parameter market was null or undefined when calling futuresV1HistoricalHours.');
        }

        if (instrument === null || instrument === undefined){
            throw new Error('Required parameter instrument was null or undefined when calling futuresV1HistoricalHours.');
        }

        let queryParameters: string[] = [];
        if (market !== undefined) {
            queryParameters.push('market='+encodeURIComponent(String(market)));
        }
        if (instrument !== undefined) {
            queryParameters.push('instrument='+encodeURIComponent(String(instrument)));
        }
        if (groups) {
            queryParameters.push('groups='+encodeURIComponent(groups.join(COLLECTION_FORMATS['csv'])));
        }
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }
        if (toTs !== undefined) {
            queryParameters.push('toTs='+encodeURIComponent(String(toTs)));
        }
        if (aggregate !== undefined) {
            queryParameters.push('aggregate='+encodeURIComponent(String(aggregate)));
        }
        if (fill !== undefined) {
            queryParameters.push('fill='+encodeURIComponent(String(fill)));
        }
        if (mappingPriority !== undefined) {
            queryParameters.push('mappingPriority='+encodeURIComponent(String(mappingPriority)));
        }
        if (responseFormat !== undefined) {
            queryParameters.push('responseFormat='+encodeURIComponent(String(responseFormat)));
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<GENERICRESPONSE>> = this.httpClient.get(`${this.basePath}/futures/v1/historical/hours?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GENERICRESPONSE>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME
     * @param limit The number of data points to return
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV
     
     */
    public futuresV1HistoricalMinutes(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', observe?: 'body', headers?: Headers): Observable<GENERICRESPONSE>;
    public futuresV1HistoricalMinutes(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', observe?: 'response', headers?: Headers): Observable<HttpResponse<GENERICRESPONSE>>;
    public futuresV1HistoricalMinutes(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (market === null || market === undefined){
            throw new Error('Required parameter market was null or undefined when calling futuresV1HistoricalMinutes.');
        }

        if (instrument === null || instrument === undefined){
            throw new Error('Required parameter instrument was null or undefined when calling futuresV1HistoricalMinutes.');
        }

        let queryParameters: string[] = [];
        if (market !== undefined) {
            queryParameters.push('market='+encodeURIComponent(String(market)));
        }
        if (instrument !== undefined) {
            queryParameters.push('instrument='+encodeURIComponent(String(instrument)));
        }
        if (groups) {
            queryParameters.push('groups='+encodeURIComponent(groups.join(COLLECTION_FORMATS['csv'])));
        }
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }
        if (toTs !== undefined) {
            queryParameters.push('toTs='+encodeURIComponent(String(toTs)));
        }
        if (aggregate !== undefined) {
            queryParameters.push('aggregate='+encodeURIComponent(String(aggregate)));
        }
        if (fill !== undefined) {
            queryParameters.push('fill='+encodeURIComponent(String(fill)));
        }
        if (mappingPriority !== undefined) {
            queryParameters.push('mappingPriority='+encodeURIComponent(String(mappingPriority)));
        }
        if (responseFormat !== undefined) {
            queryParameters.push('responseFormat='+encodeURIComponent(String(responseFormat)));
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<GENERICRESPONSE>> = this.httpClient.get(`${this.basePath}/futures/v1/historical/minutes?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GENERICRESPONSE>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_MESSAGE,MESSAGE
     * @param limit The number of data points to return
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV
     
     */
    public futuresV1HistoricalOpenInterestDays(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', observe?: 'body', headers?: Headers): Observable<GENERICRESPONSE>;
    public futuresV1HistoricalOpenInterestDays(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', observe?: 'response', headers?: Headers): Observable<HttpResponse<GENERICRESPONSE>>;
    public futuresV1HistoricalOpenInterestDays(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (market === null || market === undefined){
            throw new Error('Required parameter market was null or undefined when calling futuresV1HistoricalOpenInterestDays.');
        }

        if (instrument === null || instrument === undefined){
            throw new Error('Required parameter instrument was null or undefined when calling futuresV1HistoricalOpenInterestDays.');
        }

        let queryParameters: string[] = [];
        if (market !== undefined) {
            queryParameters.push('market='+encodeURIComponent(String(market)));
        }
        if (instrument !== undefined) {
            queryParameters.push('instrument='+encodeURIComponent(String(instrument)));
        }
        if (groups) {
            queryParameters.push('groups='+encodeURIComponent(groups.join(COLLECTION_FORMATS['csv'])));
        }
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }
        if (toTs !== undefined) {
            queryParameters.push('toTs='+encodeURIComponent(String(toTs)));
        }
        if (aggregate !== undefined) {
            queryParameters.push('aggregate='+encodeURIComponent(String(aggregate)));
        }
        if (fill !== undefined) {
            queryParameters.push('fill='+encodeURIComponent(String(fill)));
        }
        if (mappingPriority !== undefined) {
            queryParameters.push('mappingPriority='+encodeURIComponent(String(mappingPriority)));
        }
        if (responseFormat !== undefined) {
            queryParameters.push('responseFormat='+encodeURIComponent(String(responseFormat)));
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<GENERICRESPONSE>> = this.httpClient.get(`${this.basePath}/futures/v1/historical/open-interest/days?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GENERICRESPONSE>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_MESSAGE,MESSAGE
     * @param limit The number of data points to return
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV
     
     */
    public futuresV1HistoricalOpenInterestHours(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', observe?: 'body', headers?: Headers): Observable<GENERICRESPONSE>;
    public futuresV1HistoricalOpenInterestHours(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', observe?: 'response', headers?: Headers): Observable<HttpResponse<GENERICRESPONSE>>;
    public futuresV1HistoricalOpenInterestHours(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (market === null || market === undefined){
            throw new Error('Required parameter market was null or undefined when calling futuresV1HistoricalOpenInterestHours.');
        }

        if (instrument === null || instrument === undefined){
            throw new Error('Required parameter instrument was null or undefined when calling futuresV1HistoricalOpenInterestHours.');
        }

        let queryParameters: string[] = [];
        if (market !== undefined) {
            queryParameters.push('market='+encodeURIComponent(String(market)));
        }
        if (instrument !== undefined) {
            queryParameters.push('instrument='+encodeURIComponent(String(instrument)));
        }
        if (groups) {
            queryParameters.push('groups='+encodeURIComponent(groups.join(COLLECTION_FORMATS['csv'])));
        }
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }
        if (toTs !== undefined) {
            queryParameters.push('toTs='+encodeURIComponent(String(toTs)));
        }
        if (aggregate !== undefined) {
            queryParameters.push('aggregate='+encodeURIComponent(String(aggregate)));
        }
        if (fill !== undefined) {
            queryParameters.push('fill='+encodeURIComponent(String(fill)));
        }
        if (mappingPriority !== undefined) {
            queryParameters.push('mappingPriority='+encodeURIComponent(String(mappingPriority)));
        }
        if (responseFormat !== undefined) {
            queryParameters.push('responseFormat='+encodeURIComponent(String(responseFormat)));
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<GENERICRESPONSE>> = this.httpClient.get(`${this.basePath}/futures/v1/historical/open-interest/hours?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GENERICRESPONSE>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param afterTs Unix timestamp in seconds of the earliest open interest message in the response
     * @param lastCcseq The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request.
     * @param limit The maximum number of open interest messages to return
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV
     * @param return404OnEmptyResponse If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.
     
     */
    public futuresV1HistoricalOpenInterestMessages(market: string, instrument: string, afterTs?: number, lastCcseq?: number, limit?: number, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', return404OnEmptyResponse?: boolean, observe?: 'body', headers?: Headers): Observable<GENERICRESPONSE>;
    public futuresV1HistoricalOpenInterestMessages(market: string, instrument: string, afterTs?: number, lastCcseq?: number, limit?: number, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', return404OnEmptyResponse?: boolean, observe?: 'response', headers?: Headers): Observable<HttpResponse<GENERICRESPONSE>>;
    public futuresV1HistoricalOpenInterestMessages(market: string, instrument: string, afterTs?: number, lastCcseq?: number, limit?: number, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', return404OnEmptyResponse?: boolean, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (market === null || market === undefined){
            throw new Error('Required parameter market was null or undefined when calling futuresV1HistoricalOpenInterestMessages.');
        }

        if (instrument === null || instrument === undefined){
            throw new Error('Required parameter instrument was null or undefined when calling futuresV1HistoricalOpenInterestMessages.');
        }

        let queryParameters: string[] = [];
        if (market !== undefined) {
            queryParameters.push('market='+encodeURIComponent(String(market)));
        }
        if (instrument !== undefined) {
            queryParameters.push('instrument='+encodeURIComponent(String(instrument)));
        }
        if (afterTs !== undefined) {
            queryParameters.push('afterTs='+encodeURIComponent(String(afterTs)));
        }
        if (lastCcseq !== undefined) {
            queryParameters.push('lastCcseq='+encodeURIComponent(String(lastCcseq)));
        }
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }
        if (mappingPriority !== undefined) {
            queryParameters.push('mappingPriority='+encodeURIComponent(String(mappingPriority)));
        }
        if (responseFormat !== undefined) {
            queryParameters.push('responseFormat='+encodeURIComponent(String(responseFormat)));
        }
        if (return404OnEmptyResponse !== undefined) {
            queryParameters.push('return404OnEmptyResponse='+encodeURIComponent(String(return404OnEmptyResponse)));
        }

        // authentication (api_key_header) required
        if (this.APIConfiguration.apiKeys && this.APIConfiguration.apiKeys['authorization']) {
            headers['authorization'] = this.APIConfiguration.apiKeys['authorization'];
        }
        // authentication (api_key_query) required
        if (this.APIConfiguration.apiKeys && this.APIConfiguration.apiKeys['api_key']) {
            queryParameters.push('='+encodeURIComponent(String(this.APIConfiguration.apiKeys['api_key'])));
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<GENERICRESPONSE>> = this.httpClient.get(`${this.basePath}/futures/v1/historical/open-interest-messages?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GENERICRESPONSE>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param hourTs Unix timestamp in seconds for the hour containing the open interest updates you are interested in. You can pass any timestamp in the hour but we will round it down the the full hour timestmap and return all open interest updates in that hour.
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV
     * @param return404OnEmptyResponse If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.
     
     */
    public futuresV1HistoricalOpenInterestMessagesHour(market: string, instrument: string, hourTs?: number, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', return404OnEmptyResponse?: boolean, observe?: 'body', headers?: Headers): Observable<GENERICRESPONSE>;
    public futuresV1HistoricalOpenInterestMessagesHour(market: string, instrument: string, hourTs?: number, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', return404OnEmptyResponse?: boolean, observe?: 'response', headers?: Headers): Observable<HttpResponse<GENERICRESPONSE>>;
    public futuresV1HistoricalOpenInterestMessagesHour(market: string, instrument: string, hourTs?: number, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', return404OnEmptyResponse?: boolean, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (market === null || market === undefined){
            throw new Error('Required parameter market was null or undefined when calling futuresV1HistoricalOpenInterestMessagesHour.');
        }

        if (instrument === null || instrument === undefined){
            throw new Error('Required parameter instrument was null or undefined when calling futuresV1HistoricalOpenInterestMessagesHour.');
        }

        let queryParameters: string[] = [];
        if (market !== undefined) {
            queryParameters.push('market='+encodeURIComponent(String(market)));
        }
        if (instrument !== undefined) {
            queryParameters.push('instrument='+encodeURIComponent(String(instrument)));
        }
        if (hourTs !== undefined) {
            queryParameters.push('hourTs='+encodeURIComponent(String(hourTs)));
        }
        if (mappingPriority !== undefined) {
            queryParameters.push('mappingPriority='+encodeURIComponent(String(mappingPriority)));
        }
        if (responseFormat !== undefined) {
            queryParameters.push('responseFormat='+encodeURIComponent(String(responseFormat)));
        }
        if (return404OnEmptyResponse !== undefined) {
            queryParameters.push('return404OnEmptyResponse='+encodeURIComponent(String(return404OnEmptyResponse)));
        }

        // authentication (api_key_header) required
        if (this.APIConfiguration.apiKeys && this.APIConfiguration.apiKeys['authorization']) {
            headers['authorization'] = this.APIConfiguration.apiKeys['authorization'];
        }
        // authentication (api_key_query) required
        if (this.APIConfiguration.apiKeys && this.APIConfiguration.apiKeys['api_key']) {
            queryParameters.push('='+encodeURIComponent(String(this.APIConfiguration.apiKeys['api_key'])));
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<GENERICRESPONSE>> = this.httpClient.get(`${this.basePath}/futures/v1/historical/open-interest-messages/hour?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GENERICRESPONSE>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_MESSAGE,MESSAGE
     * @param limit The number of data points to return
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV
     
     */
    public futuresV1HistoricalOpenInterestMinutes(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', observe?: 'body', headers?: Headers): Observable<GENERICRESPONSE>;
    public futuresV1HistoricalOpenInterestMinutes(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', observe?: 'response', headers?: Headers): Observable<HttpResponse<GENERICRESPONSE>>;
    public futuresV1HistoricalOpenInterestMinutes(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (market === null || market === undefined){
            throw new Error('Required parameter market was null or undefined when calling futuresV1HistoricalOpenInterestMinutes.');
        }

        if (instrument === null || instrument === undefined){
            throw new Error('Required parameter instrument was null or undefined when calling futuresV1HistoricalOpenInterestMinutes.');
        }

        let queryParameters: string[] = [];
        if (market !== undefined) {
            queryParameters.push('market='+encodeURIComponent(String(market)));
        }
        if (instrument !== undefined) {
            queryParameters.push('instrument='+encodeURIComponent(String(instrument)));
        }
        if (groups) {
            queryParameters.push('groups='+encodeURIComponent(groups.join(COLLECTION_FORMATS['csv'])));
        }
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }
        if (toTs !== undefined) {
            queryParameters.push('toTs='+encodeURIComponent(String(toTs)));
        }
        if (aggregate !== undefined) {
            queryParameters.push('aggregate='+encodeURIComponent(String(aggregate)));
        }
        if (fill !== undefined) {
            queryParameters.push('fill='+encodeURIComponent(String(fill)));
        }
        if (mappingPriority !== undefined) {
            queryParameters.push('mappingPriority='+encodeURIComponent(String(mappingPriority)));
        }
        if (responseFormat !== undefined) {
            queryParameters.push('responseFormat='+encodeURIComponent(String(responseFormat)));
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<GENERICRESPONSE>> = this.httpClient.get(`${this.basePath}/futures/v1/historical/open-interest/minutes?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GENERICRESPONSE>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param afterTs Unix timestamp in seconds of the earliest trade in the response.
     * @param lastCcseq The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request.
     * @param limit The maximum number of trades to return
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV
     * @param return404OnEmptyResponse If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.
     
     */
    public futuresV1HistoricalTrades(market: string, instrument: string, afterTs?: number, lastCcseq?: number, limit?: number, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', return404OnEmptyResponse?: boolean, observe?: 'body', headers?: Headers): Observable<GENERICRESPONSE>;
    public futuresV1HistoricalTrades(market: string, instrument: string, afterTs?: number, lastCcseq?: number, limit?: number, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', return404OnEmptyResponse?: boolean, observe?: 'response', headers?: Headers): Observable<HttpResponse<GENERICRESPONSE>>;
    public futuresV1HistoricalTrades(market: string, instrument: string, afterTs?: number, lastCcseq?: number, limit?: number, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', return404OnEmptyResponse?: boolean, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (market === null || market === undefined){
            throw new Error('Required parameter market was null or undefined when calling futuresV1HistoricalTrades.');
        }

        if (instrument === null || instrument === undefined){
            throw new Error('Required parameter instrument was null or undefined when calling futuresV1HistoricalTrades.');
        }

        let queryParameters: string[] = [];
        if (market !== undefined) {
            queryParameters.push('market='+encodeURIComponent(String(market)));
        }
        if (instrument !== undefined) {
            queryParameters.push('instrument='+encodeURIComponent(String(instrument)));
        }
        if (afterTs !== undefined) {
            queryParameters.push('afterTs='+encodeURIComponent(String(afterTs)));
        }
        if (lastCcseq !== undefined) {
            queryParameters.push('lastCcseq='+encodeURIComponent(String(lastCcseq)));
        }
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }
        if (mappingPriority !== undefined) {
            queryParameters.push('mappingPriority='+encodeURIComponent(String(mappingPriority)));
        }
        if (responseFormat !== undefined) {
            queryParameters.push('responseFormat='+encodeURIComponent(String(responseFormat)));
        }
        if (return404OnEmptyResponse !== undefined) {
            queryParameters.push('return404OnEmptyResponse='+encodeURIComponent(String(return404OnEmptyResponse)));
        }

        // authentication (api_key_header) required
        if (this.APIConfiguration.apiKeys && this.APIConfiguration.apiKeys['authorization']) {
            headers['authorization'] = this.APIConfiguration.apiKeys['authorization'];
        }
        // authentication (api_key_query) required
        if (this.APIConfiguration.apiKeys && this.APIConfiguration.apiKeys['api_key']) {
            queryParameters.push('='+encodeURIComponent(String(this.APIConfiguration.apiKeys['api_key'])));
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<GENERICRESPONSE>> = this.httpClient.get(`${this.basePath}/futures/v1/historical/trades?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GENERICRESPONSE>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param hourTs Unix timestamp in seconds for the hour containing the trades you are interested in. You can pass any timestamp within an hour but we will round it down the the full hour timestmap and return all trades in that hour.
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV
     * @param return404OnEmptyResponse If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.
     
     */
    public futuresV1HistoricalTradesHour(market: string, instrument: string, hourTs?: number, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', return404OnEmptyResponse?: boolean, observe?: 'body', headers?: Headers): Observable<GENERICRESPONSE>;
    public futuresV1HistoricalTradesHour(market: string, instrument: string, hourTs?: number, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', return404OnEmptyResponse?: boolean, observe?: 'response', headers?: Headers): Observable<HttpResponse<GENERICRESPONSE>>;
    public futuresV1HistoricalTradesHour(market: string, instrument: string, hourTs?: number, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', return404OnEmptyResponse?: boolean, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (market === null || market === undefined){
            throw new Error('Required parameter market was null or undefined when calling futuresV1HistoricalTradesHour.');
        }

        if (instrument === null || instrument === undefined){
            throw new Error('Required parameter instrument was null or undefined when calling futuresV1HistoricalTradesHour.');
        }

        let queryParameters: string[] = [];
        if (market !== undefined) {
            queryParameters.push('market='+encodeURIComponent(String(market)));
        }
        if (instrument !== undefined) {
            queryParameters.push('instrument='+encodeURIComponent(String(instrument)));
        }
        if (hourTs !== undefined) {
            queryParameters.push('hourTs='+encodeURIComponent(String(hourTs)));
        }
        if (mappingPriority !== undefined) {
            queryParameters.push('mappingPriority='+encodeURIComponent(String(mappingPriority)));
        }
        if (responseFormat !== undefined) {
            queryParameters.push('responseFormat='+encodeURIComponent(String(responseFormat)));
        }
        if (return404OnEmptyResponse !== undefined) {
            queryParameters.push('return404OnEmptyResponse='+encodeURIComponent(String(return404OnEmptyResponse)));
        }

        // authentication (api_key_header) required
        if (this.APIConfiguration.apiKeys && this.APIConfiguration.apiKeys['authorization']) {
            headers['authorization'] = this.APIConfiguration.apiKeys['authorization'];
        }
        // authentication (api_key_query) required
        if (this.APIConfiguration.apiKeys && this.APIConfiguration.apiKeys['api_key']) {
            queryParameters.push('='+encodeURIComponent(String(this.APIConfiguration.apiKeys['api_key'])));
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<GENERICRESPONSE>> = this.httpClient.get(`${this.basePath}/futures/v1/historical/trades/hour?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GENERICRESPONSE>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instruments A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
     
     */
    public futuresV1LatestFundingRateTick(market: string, instruments: Array<string>, groups?: Array<string>, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', observe?: 'body', headers?: Headers): Observable<GENERICRESPONSE>;
    public futuresV1LatestFundingRateTick(market: string, instruments: Array<string>, groups?: Array<string>, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', observe?: 'response', headers?: Headers): Observable<HttpResponse<GENERICRESPONSE>>;
    public futuresV1LatestFundingRateTick(market: string, instruments: Array<string>, groups?: Array<string>, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (market === null || market === undefined){
            throw new Error('Required parameter market was null or undefined when calling futuresV1LatestFundingRateTick.');
        }

        if (instruments === null || instruments === undefined){
            throw new Error('Required parameter instruments was null or undefined when calling futuresV1LatestFundingRateTick.');
        }

        let queryParameters: string[] = [];
        if (market !== undefined) {
            queryParameters.push('market='+encodeURIComponent(String(market)));
        }
        if (instruments) {
            queryParameters.push('instruments='+encodeURIComponent(instruments.join(COLLECTION_FORMATS['csv'])));
        }
        if (groups) {
            queryParameters.push('groups='+encodeURIComponent(groups.join(COLLECTION_FORMATS['csv'])));
        }
        if (mappingPriority !== undefined) {
            queryParameters.push('mappingPriority='+encodeURIComponent(String(mappingPriority)));
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<GENERICRESPONSE>> = this.httpClient.get(`${this.basePath}/futures/v1/latest/funding-rate/tick?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GENERICRESPONSE>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instruments A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting metadata entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: STATUS,INTERNAL,GENERAL,MIGRATION,SOURCE
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
     
     */
    public futuresV1LatestInstrumentMetadata(market: string, instruments: Array<string>, groups?: Array<string>, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', observe?: 'body', headers?: Headers): Observable<GENERICRESPONSE>;
    public futuresV1LatestInstrumentMetadata(market: string, instruments: Array<string>, groups?: Array<string>, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', observe?: 'response', headers?: Headers): Observable<HttpResponse<GENERICRESPONSE>>;
    public futuresV1LatestInstrumentMetadata(market: string, instruments: Array<string>, groups?: Array<string>, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (market === null || market === undefined){
            throw new Error('Required parameter market was null or undefined when calling futuresV1LatestInstrumentMetadata.');
        }

        if (instruments === null || instruments === undefined){
            throw new Error('Required parameter instruments was null or undefined when calling futuresV1LatestInstrumentMetadata.');
        }

        let queryParameters: string[] = [];
        if (market !== undefined) {
            queryParameters.push('market='+encodeURIComponent(String(market)));
        }
        if (instruments) {
            queryParameters.push('instruments='+encodeURIComponent(instruments.join(COLLECTION_FORMATS['csv'])));
        }
        if (groups) {
            queryParameters.push('groups='+encodeURIComponent(groups.join(COLLECTION_FORMATS['csv'])));
        }
        if (mappingPriority !== undefined) {
            queryParameters.push('mappingPriority='+encodeURIComponent(String(mappingPriority)));
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<GENERICRESPONSE>> = this.httpClient.get(`${this.basePath}/futures/v1/latest/instrument/metadata?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GENERICRESPONSE>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instruments A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
     
     */
    public futuresV1LatestOpenInterestTick(market: string, instruments: Array<string>, groups?: Array<string>, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', observe?: 'body', headers?: Headers): Observable<GENERICRESPONSE>;
    public futuresV1LatestOpenInterestTick(market: string, instruments: Array<string>, groups?: Array<string>, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', observe?: 'response', headers?: Headers): Observable<HttpResponse<GENERICRESPONSE>>;
    public futuresV1LatestOpenInterestTick(market: string, instruments: Array<string>, groups?: Array<string>, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (market === null || market === undefined){
            throw new Error('Required parameter market was null or undefined when calling futuresV1LatestOpenInterestTick.');
        }

        if (instruments === null || instruments === undefined){
            throw new Error('Required parameter instruments was null or undefined when calling futuresV1LatestOpenInterestTick.');
        }

        let queryParameters: string[] = [];
        if (market !== undefined) {
            queryParameters.push('market='+encodeURIComponent(String(market)));
        }
        if (instruments) {
            queryParameters.push('instruments='+encodeURIComponent(instruments.join(COLLECTION_FORMATS['csv'])));
        }
        if (groups) {
            queryParameters.push('groups='+encodeURIComponent(groups.join(COLLECTION_FORMATS['csv'])));
        }
        if (mappingPriority !== undefined) {
            queryParameters.push('mappingPriority='+encodeURIComponent(String(mappingPriority)));
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<GENERICRESPONSE>> = this.httpClient.get(`${this.basePath}/futures/v1/latest/open-interest/tick?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GENERICRESPONSE>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instruments A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,LAST_UPDATE,TOP_OF_BOOK,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
     
     */
    public futuresV1LatestTick(market: string, instruments: Array<string>, groups?: Array<string>, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', observe?: 'body', headers?: Headers): Observable<GENERICRESPONSE>;
    public futuresV1LatestTick(market: string, instruments: Array<string>, groups?: Array<string>, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', observe?: 'response', headers?: Headers): Observable<HttpResponse<GENERICRESPONSE>>;
    public futuresV1LatestTick(market: string, instruments: Array<string>, groups?: Array<string>, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (market === null || market === undefined){
            throw new Error('Required parameter market was null or undefined when calling futuresV1LatestTick.');
        }

        if (instruments === null || instruments === undefined){
            throw new Error('Required parameter instruments was null or undefined when calling futuresV1LatestTick.');
        }

        let queryParameters: string[] = [];
        if (market !== undefined) {
            queryParameters.push('market='+encodeURIComponent(String(market)));
        }
        if (instruments) {
            queryParameters.push('instruments='+encodeURIComponent(instruments.join(COLLECTION_FORMATS['csv'])));
        }
        if (groups) {
            queryParameters.push('groups='+encodeURIComponent(groups.join(COLLECTION_FORMATS['csv'])));
        }
        if (mappingPriority !== undefined) {
            queryParameters.push('mappingPriority='+encodeURIComponent(String(mappingPriority)));
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<GENERICRESPONSE>> = this.httpClient.get(`${this.basePath}/futures/v1/latest/tick?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GENERICRESPONSE>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * 
     * @param market The exchange to obtain data from
     
     */
    public futuresV1Markets(market?: string, observe?: 'body', headers?: Headers): Observable<GENERICRESPONSE>;
    public futuresV1Markets(market?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<GENERICRESPONSE>>;
    public futuresV1Markets(market?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        let queryParameters: string[] = [];
        if (market !== undefined) {
            queryParameters.push('market='+encodeURIComponent(String(market)));
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<GENERICRESPONSE>> = this.httpClient.get(`${this.basePath}/futures/v1/markets?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GENERICRESPONSE>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instrument The mapped instrument to retrieve on a specific market.
     * @param instrumentStatus The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED
     
     */
    public futuresV1MarketsInstruments(market?: string, instrument?: string, instrumentStatus?: Array<'ACTIVE' | 'IGNORED' | 'RETIRED' | 'EXPIRED'>, observe?: 'body', headers?: Headers): Observable<GENERICRESPONSE>;
    public futuresV1MarketsInstruments(market?: string, instrument?: string, instrumentStatus?: Array<'ACTIVE' | 'IGNORED' | 'RETIRED' | 'EXPIRED'>, observe?: 'response', headers?: Headers): Observable<HttpResponse<GENERICRESPONSE>>;
    public futuresV1MarketsInstruments(market?: string, instrument?: string, instrumentStatus?: Array<'ACTIVE' | 'IGNORED' | 'RETIRED' | 'EXPIRED'>, observe: any = 'body', headers: Headers = {}): Observable<any> {
        let queryParameters: string[] = [];
        if (market !== undefined) {
            queryParameters.push('market='+encodeURIComponent(String(market)));
        }
        if (instrument !== undefined) {
            queryParameters.push('instrument='+encodeURIComponent(String(instrument)));
        }
        if (instrumentStatus) {
            queryParameters.push('instrumentStatus='+encodeURIComponent(instrumentStatus.join(COLLECTION_FORMATS['csv'])));
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<GENERICRESPONSE>> = this.httpClient.get(`${this.basePath}/futures/v1/markets/instruments?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GENERICRESPONSE>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instrument The unmapped instrument to retrieve on a specific market.
     * @param instrumentStatus The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED
     
     */
    public futuresV1MarketsInstrumentsUnmapped(market?: string, instrument?: string, instrumentStatus?: Array<'ACTIVE' | 'IGNORED' | 'RETIRED' | 'EXPIRED'>, observe?: 'body', headers?: Headers): Observable<GENERICRESPONSE>;
    public futuresV1MarketsInstrumentsUnmapped(market?: string, instrument?: string, instrumentStatus?: Array<'ACTIVE' | 'IGNORED' | 'RETIRED' | 'EXPIRED'>, observe?: 'response', headers?: Headers): Observable<HttpResponse<GENERICRESPONSE>>;
    public futuresV1MarketsInstrumentsUnmapped(market?: string, instrument?: string, instrumentStatus?: Array<'ACTIVE' | 'IGNORED' | 'RETIRED' | 'EXPIRED'>, observe: any = 'body', headers: Headers = {}): Observable<any> {
        let queryParameters: string[] = [];
        if (market !== undefined) {
            queryParameters.push('market='+encodeURIComponent(String(market)));
        }
        if (instrument !== undefined) {
            queryParameters.push('instrument='+encodeURIComponent(String(instrument)));
        }
        if (instrumentStatus) {
            queryParameters.push('instrumentStatus='+encodeURIComponent(instrumentStatus.join(COLLECTION_FORMATS['csv'])));
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<GENERICRESPONSE>> = this.httpClient.get(`${this.basePath}/futures/v1/markets/instruments/unmapped?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GENERICRESPONSE>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME
     * @param limit The number of data points to return
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV
     
     */
    public indexV1HistoricalDays(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', observe?: 'body', headers?: Headers): Observable<GENERICRESPONSE>;
    public indexV1HistoricalDays(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', observe?: 'response', headers?: Headers): Observable<HttpResponse<GENERICRESPONSE>>;
    public indexV1HistoricalDays(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (market === null || market === undefined){
            throw new Error('Required parameter market was null or undefined when calling indexV1HistoricalDays.');
        }

        if (instrument === null || instrument === undefined){
            throw new Error('Required parameter instrument was null or undefined when calling indexV1HistoricalDays.');
        }

        let queryParameters: string[] = [];
        if (market !== undefined) {
            queryParameters.push('market='+encodeURIComponent(String(market)));
        }
        if (instrument !== undefined) {
            queryParameters.push('instrument='+encodeURIComponent(String(instrument)));
        }
        if (groups) {
            queryParameters.push('groups='+encodeURIComponent(groups.join(COLLECTION_FORMATS['csv'])));
        }
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }
        if (toTs !== undefined) {
            queryParameters.push('toTs='+encodeURIComponent(String(toTs)));
        }
        if (aggregate !== undefined) {
            queryParameters.push('aggregate='+encodeURIComponent(String(aggregate)));
        }
        if (fill !== undefined) {
            queryParameters.push('fill='+encodeURIComponent(String(fill)));
        }
        if (mappingPriority !== undefined) {
            queryParameters.push('mappingPriority='+encodeURIComponent(String(mappingPriority)));
        }
        if (responseFormat !== undefined) {
            queryParameters.push('responseFormat='+encodeURIComponent(String(responseFormat)));
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<GENERICRESPONSE>> = this.httpClient.get(`${this.basePath}/index/v1/historical/days?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GENERICRESPONSE>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME
     * @param limit The number of data points to return
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV
     
     */
    public indexV1HistoricalHours(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', observe?: 'body', headers?: Headers): Observable<GENERICRESPONSE>;
    public indexV1HistoricalHours(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', observe?: 'response', headers?: Headers): Observable<HttpResponse<GENERICRESPONSE>>;
    public indexV1HistoricalHours(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (market === null || market === undefined){
            throw new Error('Required parameter market was null or undefined when calling indexV1HistoricalHours.');
        }

        if (instrument === null || instrument === undefined){
            throw new Error('Required parameter instrument was null or undefined when calling indexV1HistoricalHours.');
        }

        let queryParameters: string[] = [];
        if (market !== undefined) {
            queryParameters.push('market='+encodeURIComponent(String(market)));
        }
        if (instrument !== undefined) {
            queryParameters.push('instrument='+encodeURIComponent(String(instrument)));
        }
        if (groups) {
            queryParameters.push('groups='+encodeURIComponent(groups.join(COLLECTION_FORMATS['csv'])));
        }
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }
        if (toTs !== undefined) {
            queryParameters.push('toTs='+encodeURIComponent(String(toTs)));
        }
        if (aggregate !== undefined) {
            queryParameters.push('aggregate='+encodeURIComponent(String(aggregate)));
        }
        if (fill !== undefined) {
            queryParameters.push('fill='+encodeURIComponent(String(fill)));
        }
        if (mappingPriority !== undefined) {
            queryParameters.push('mappingPriority='+encodeURIComponent(String(mappingPriority)));
        }
        if (responseFormat !== undefined) {
            queryParameters.push('responseFormat='+encodeURIComponent(String(responseFormat)));
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<GENERICRESPONSE>> = this.httpClient.get(`${this.basePath}/index/v1/historical/hours?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GENERICRESPONSE>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param afterTs Unix timestamp in seconds of the earliest index message in the response
     * @param lastCcseq The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request.
     * @param limit The maximum number of index messages to return
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV
     * @param return404OnEmptyResponse If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.
     
     */
    public indexV1HistoricalMessages(market: string, instrument: string, afterTs?: number, lastCcseq?: number, limit?: number, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', return404OnEmptyResponse?: boolean, observe?: 'body', headers?: Headers): Observable<GENERICRESPONSE>;
    public indexV1HistoricalMessages(market: string, instrument: string, afterTs?: number, lastCcseq?: number, limit?: number, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', return404OnEmptyResponse?: boolean, observe?: 'response', headers?: Headers): Observable<HttpResponse<GENERICRESPONSE>>;
    public indexV1HistoricalMessages(market: string, instrument: string, afterTs?: number, lastCcseq?: number, limit?: number, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', return404OnEmptyResponse?: boolean, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (market === null || market === undefined){
            throw new Error('Required parameter market was null or undefined when calling indexV1HistoricalMessages.');
        }

        if (instrument === null || instrument === undefined){
            throw new Error('Required parameter instrument was null or undefined when calling indexV1HistoricalMessages.');
        }

        let queryParameters: string[] = [];
        if (market !== undefined) {
            queryParameters.push('market='+encodeURIComponent(String(market)));
        }
        if (instrument !== undefined) {
            queryParameters.push('instrument='+encodeURIComponent(String(instrument)));
        }
        if (afterTs !== undefined) {
            queryParameters.push('afterTs='+encodeURIComponent(String(afterTs)));
        }
        if (lastCcseq !== undefined) {
            queryParameters.push('lastCcseq='+encodeURIComponent(String(lastCcseq)));
        }
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }
        if (mappingPriority !== undefined) {
            queryParameters.push('mappingPriority='+encodeURIComponent(String(mappingPriority)));
        }
        if (responseFormat !== undefined) {
            queryParameters.push('responseFormat='+encodeURIComponent(String(responseFormat)));
        }
        if (return404OnEmptyResponse !== undefined) {
            queryParameters.push('return404OnEmptyResponse='+encodeURIComponent(String(return404OnEmptyResponse)));
        }

        // authentication (api_key_header) required
        if (this.APIConfiguration.apiKeys && this.APIConfiguration.apiKeys['authorization']) {
            headers['authorization'] = this.APIConfiguration.apiKeys['authorization'];
        }
        // authentication (api_key_query) required
        if (this.APIConfiguration.apiKeys && this.APIConfiguration.apiKeys['api_key']) {
            queryParameters.push('='+encodeURIComponent(String(this.APIConfiguration.apiKeys['api_key'])));
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<GENERICRESPONSE>> = this.httpClient.get(`${this.basePath}/index/v1/historical/messages?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GENERICRESPONSE>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param hourTs Unix timestamp in seconds for the hour containing the index updates you are interested in. You can pass any timestamp in the hour but we will round it down the the full hour timestmap and return all index updates in that hour.
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV
     * @param return404OnEmptyResponse If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.
     
     */
    public indexV1HistoricalMessagesHour(market: string, instrument: string, hourTs?: number, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', return404OnEmptyResponse?: boolean, observe?: 'body', headers?: Headers): Observable<GENERICRESPONSE>;
    public indexV1HistoricalMessagesHour(market: string, instrument: string, hourTs?: number, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', return404OnEmptyResponse?: boolean, observe?: 'response', headers?: Headers): Observable<HttpResponse<GENERICRESPONSE>>;
    public indexV1HistoricalMessagesHour(market: string, instrument: string, hourTs?: number, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', return404OnEmptyResponse?: boolean, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (market === null || market === undefined){
            throw new Error('Required parameter market was null or undefined when calling indexV1HistoricalMessagesHour.');
        }

        if (instrument === null || instrument === undefined){
            throw new Error('Required parameter instrument was null or undefined when calling indexV1HistoricalMessagesHour.');
        }

        let queryParameters: string[] = [];
        if (market !== undefined) {
            queryParameters.push('market='+encodeURIComponent(String(market)));
        }
        if (instrument !== undefined) {
            queryParameters.push('instrument='+encodeURIComponent(String(instrument)));
        }
        if (hourTs !== undefined) {
            queryParameters.push('hourTs='+encodeURIComponent(String(hourTs)));
        }
        if (mappingPriority !== undefined) {
            queryParameters.push('mappingPriority='+encodeURIComponent(String(mappingPriority)));
        }
        if (responseFormat !== undefined) {
            queryParameters.push('responseFormat='+encodeURIComponent(String(responseFormat)));
        }
        if (return404OnEmptyResponse !== undefined) {
            queryParameters.push('return404OnEmptyResponse='+encodeURIComponent(String(return404OnEmptyResponse)));
        }

        // authentication (api_key_header) required
        if (this.APIConfiguration.apiKeys && this.APIConfiguration.apiKeys['authorization']) {
            headers['authorization'] = this.APIConfiguration.apiKeys['authorization'];
        }
        // authentication (api_key_query) required
        if (this.APIConfiguration.apiKeys && this.APIConfiguration.apiKeys['api_key']) {
            queryParameters.push('='+encodeURIComponent(String(this.APIConfiguration.apiKeys['api_key'])));
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<GENERICRESPONSE>> = this.httpClient.get(`${this.basePath}/index/v1/historical/messages/hour?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GENERICRESPONSE>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME
     * @param limit The number of data points to return
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV
     
     */
    public indexV1HistoricalMinutes(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', observe?: 'body', headers?: Headers): Observable<GENERICRESPONSE>;
    public indexV1HistoricalMinutes(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', observe?: 'response', headers?: Headers): Observable<HttpResponse<GENERICRESPONSE>>;
    public indexV1HistoricalMinutes(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (market === null || market === undefined){
            throw new Error('Required parameter market was null or undefined when calling indexV1HistoricalMinutes.');
        }

        if (instrument === null || instrument === undefined){
            throw new Error('Required parameter instrument was null or undefined when calling indexV1HistoricalMinutes.');
        }

        let queryParameters: string[] = [];
        if (market !== undefined) {
            queryParameters.push('market='+encodeURIComponent(String(market)));
        }
        if (instrument !== undefined) {
            queryParameters.push('instrument='+encodeURIComponent(String(instrument)));
        }
        if (groups) {
            queryParameters.push('groups='+encodeURIComponent(groups.join(COLLECTION_FORMATS['csv'])));
        }
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }
        if (toTs !== undefined) {
            queryParameters.push('toTs='+encodeURIComponent(String(toTs)));
        }
        if (aggregate !== undefined) {
            queryParameters.push('aggregate='+encodeURIComponent(String(aggregate)));
        }
        if (fill !== undefined) {
            queryParameters.push('fill='+encodeURIComponent(String(fill)));
        }
        if (mappingPriority !== undefined) {
            queryParameters.push('mappingPriority='+encodeURIComponent(String(mappingPriority)));
        }
        if (responseFormat !== undefined) {
            queryParameters.push('responseFormat='+encodeURIComponent(String(responseFormat)));
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<GENERICRESPONSE>> = this.httpClient.get(`${this.basePath}/index/v1/historical/minutes?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GENERICRESPONSE>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instruments A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting metadata entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: STATUS,INTERNAL,GENERAL,MIGRATION,SOURCE
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
     
     */
    public indexV1LatestInstrumentMetadata(market: string, instruments: Array<string>, groups?: Array<string>, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', observe?: 'body', headers?: Headers): Observable<GENERICRESPONSE>;
    public indexV1LatestInstrumentMetadata(market: string, instruments: Array<string>, groups?: Array<string>, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', observe?: 'response', headers?: Headers): Observable<HttpResponse<GENERICRESPONSE>>;
    public indexV1LatestInstrumentMetadata(market: string, instruments: Array<string>, groups?: Array<string>, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (market === null || market === undefined){
            throw new Error('Required parameter market was null or undefined when calling indexV1LatestInstrumentMetadata.');
        }

        if (instruments === null || instruments === undefined){
            throw new Error('Required parameter instruments was null or undefined when calling indexV1LatestInstrumentMetadata.');
        }

        let queryParameters: string[] = [];
        if (market !== undefined) {
            queryParameters.push('market='+encodeURIComponent(String(market)));
        }
        if (instruments) {
            queryParameters.push('instruments='+encodeURIComponent(instruments.join(COLLECTION_FORMATS['csv'])));
        }
        if (groups) {
            queryParameters.push('groups='+encodeURIComponent(groups.join(COLLECTION_FORMATS['csv'])));
        }
        if (mappingPriority !== undefined) {
            queryParameters.push('mappingPriority='+encodeURIComponent(String(mappingPriority)));
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<GENERICRESPONSE>> = this.httpClient.get(`${this.basePath}/index/v1/latest/instrument/metadata?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GENERICRESPONSE>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instruments A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.
     * @param groups When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
     
     */
    public indexV1LatestTick(market: string, instruments: Array<string>, groups?: Array<string>, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', observe?: 'body', headers?: Headers): Observable<GENERICRESPONSE>;
    public indexV1LatestTick(market: string, instruments: Array<string>, groups?: Array<string>, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', observe?: 'response', headers?: Headers): Observable<HttpResponse<GENERICRESPONSE>>;
    public indexV1LatestTick(market: string, instruments: Array<string>, groups?: Array<string>, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (market === null || market === undefined){
            throw new Error('Required parameter market was null or undefined when calling indexV1LatestTick.');
        }

        if (instruments === null || instruments === undefined){
            throw new Error('Required parameter instruments was null or undefined when calling indexV1LatestTick.');
        }

        let queryParameters: string[] = [];
        if (market !== undefined) {
            queryParameters.push('market='+encodeURIComponent(String(market)));
        }
        if (instruments) {
            queryParameters.push('instruments='+encodeURIComponent(instruments.join(COLLECTION_FORMATS['csv'])));
        }
        if (groups) {
            queryParameters.push('groups='+encodeURIComponent(groups.join(COLLECTION_FORMATS['csv'])));
        }
        if (mappingPriority !== undefined) {
            queryParameters.push('mappingPriority='+encodeURIComponent(String(mappingPriority)));
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<GENERICRESPONSE>> = this.httpClient.get(`${this.basePath}/index/v1/latest/tick?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GENERICRESPONSE>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * 
     * @param market The exchange to obtain data from
     
     */
    public indexV1Markets(market?: string, observe?: 'body', headers?: Headers): Observable<GENERICRESPONSE>;
    public indexV1Markets(market?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<GENERICRESPONSE>>;
    public indexV1Markets(market?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        let queryParameters: string[] = [];
        if (market !== undefined) {
            queryParameters.push('market='+encodeURIComponent(String(market)));
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<GENERICRESPONSE>> = this.httpClient.get(`${this.basePath}/index/v1/markets?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GENERICRESPONSE>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instrument The mapped instrument to retrieve on a specific market.
     * @param instrumentStatus The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED
     
     */
    public indexV1MarketsInstruments(market?: string, instrument?: string, instrumentStatus?: Array<'ACTIVE' | 'IGNORED' | 'RETIRED' | 'EXPIRED'>, observe?: 'body', headers?: Headers): Observable<GENERICRESPONSE>;
    public indexV1MarketsInstruments(market?: string, instrument?: string, instrumentStatus?: Array<'ACTIVE' | 'IGNORED' | 'RETIRED' | 'EXPIRED'>, observe?: 'response', headers?: Headers): Observable<HttpResponse<GENERICRESPONSE>>;
    public indexV1MarketsInstruments(market?: string, instrument?: string, instrumentStatus?: Array<'ACTIVE' | 'IGNORED' | 'RETIRED' | 'EXPIRED'>, observe: any = 'body', headers: Headers = {}): Observable<any> {
        let queryParameters: string[] = [];
        if (market !== undefined) {
            queryParameters.push('market='+encodeURIComponent(String(market)));
        }
        if (instrument !== undefined) {
            queryParameters.push('instrument='+encodeURIComponent(String(instrument)));
        }
        if (instrumentStatus) {
            queryParameters.push('instrumentStatus='+encodeURIComponent(instrumentStatus.join(COLLECTION_FORMATS['csv'])));
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<GENERICRESPONSE>> = this.httpClient.get(`${this.basePath}/index/v1/markets/instruments?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GENERICRESPONSE>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * 
     * @param market The exchange to obtain data from
     * @param instrument The unmapped instrument to retrieve on a specific market.
     * @param instrumentStatus The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED
     
     */
    public indexV1MarketsInstrumentsUnmapped(market?: string, instrument?: string, instrumentStatus?: Array<'ACTIVE' | 'IGNORED' | 'RETIRED' | 'EXPIRED'>, observe?: 'body', headers?: Headers): Observable<GENERICRESPONSE>;
    public indexV1MarketsInstrumentsUnmapped(market?: string, instrument?: string, instrumentStatus?: Array<'ACTIVE' | 'IGNORED' | 'RETIRED' | 'EXPIRED'>, observe?: 'response', headers?: Headers): Observable<HttpResponse<GENERICRESPONSE>>;
    public indexV1MarketsInstrumentsUnmapped(market?: string, instrument?: string, instrumentStatus?: Array<'ACTIVE' | 'IGNORED' | 'RETIRED' | 'EXPIRED'>, observe: any = 'body', headers: Headers = {}): Observable<any> {
        let queryParameters: string[] = [];
        if (market !== undefined) {
            queryParameters.push('market='+encodeURIComponent(String(market)));
        }
        if (instrument !== undefined) {
            queryParameters.push('instrument='+encodeURIComponent(String(instrument)));
        }
        if (instrumentStatus) {
            queryParameters.push('instrumentStatus='+encodeURIComponent(instrumentStatus.join(COLLECTION_FORMATS['csv'])));
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<GENERICRESPONSE>> = this.httpClient.get(`${this.basePath}/index/v1/markets/instruments/unmapped?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GENERICRESPONSE>(httpResponse.response))
               );
        }
        return response;
    }

}
