// @flow
/* eslint-disable no-use-before-define */
/**
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 * CryptoCompare is the world\'s leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: data@cryptocompare.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH: string = "https://data-api.cryptocompare.com".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 */
export type FetchAPI = {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 */
export type FetchArgs = {
    url: string;
    options: {};
}

/**
 *
 * @export
 */
export type RequestOptions = {
    headers?: {};
    query?: {};
    body?: string | FormData;
}

/**
 * * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name:string = "RequiredError"
    constructor(field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 */
export type Error = {
    /**
     * 
     * @type {Object}
     * @memberof Error
     */
    Data?: Object;
    /**
     * 
     * @type {ErrorErr}
     * @memberof Error
     */
    Err?: ErrorErr;
}

/**
 * 
 * @export
 */
export type ErrorErr = {
    /**
     * A message describing the error
     * @type {string}
     * @memberof ErrorErr
     */
    message?: string;
    /**
     * 
     * @type {ErrorErrOtherInfo}
     * @memberof ErrorErr
     */
    other_info?: ErrorErrOtherInfo;
    /**
     * A public facing error type. If you want to treat a specific error use the type.
     * @type {number}
     * @memberof ErrorErr
     */
    type?: number;
}

/**
 * 
 * @export
 */
export type ErrorErrOtherInfo = {
    /**
     * The parameter that is resposible for the error
     * @type {string}
     * @memberof ErrorErrOtherInfo
     */
    param?: string;
    /**
     * The values resposible for the error
     * @type {Array<string>}
     * @memberof ErrorErrOtherInfo
     */
    values?: Array<string>;
}

/**
 * 
 * @export
 */
export type GENERICRESPONSE = {
    /**
     * 
     * @type {GENERICRESPONSEData}
     * @memberof GENERICRESPONSE
     */
    Data?: GENERICRESPONSEData;
    /**
     * 
     * @type {Object}
     * @memberof GENERICRESPONSE
     */
    Err?: Object;
}

/**
 * 
 * @export
 */
export type GENERICRESPONSEData = {
    /**
     * The endpoint does not have a reponse defined
     * @type {string}
     * @memberof GENERICRESPONSEData
     */
    NO_DATA?: string;
}

/**
 * 
 * @export
 */
export type SPOTINSTRUMENTHISTODATA = {
    /**
     * The mapped from asset (base / symbol/ coin) (e.g. BTC). Only available on instruments that have mapping.
     * @type {string}
     * @memberof SPOTINSTRUMENTHISTODATA
     */
    BASE?: string;
    /**
     * The price of the last trade in this time period. If there were no trades in the time period, the open price will be given.
     * @type {number}
     * @memberof SPOTINSTRUMENTHISTODATA
     */
    CLOSE?: number;
    /**
     * The price of the first trade in the time period. This is only available when there is at least one trade in the time period.
     * @type {number}
     * @memberof SPOTINSTRUMENTHISTODATA
     */
    FIRST_TRADE_PRICE?: number;
    /**
     * The timestamp, in seconds, of the first trade in this time perio. This is only available when there is at least one trade in the time period.
     * @type {number}
     * @memberof SPOTINSTRUMENTHISTODATA
     */
    FIRST_TRADE_TIMESTAMP?: number;
    /**
     * The highest trade price in the time period. If there were no trades in the time period, the open price will be given.
     * @type {number}
     * @memberof SPOTINSTRUMENTHISTODATA
     */
    HIGH?: number;
    /**
     * The highest value of the trades in the time period. This is only available when there is at least one trade in the time period.
     * @type {number}
     * @memberof SPOTINSTRUMENTHISTODATA
     */
    HIGH_TRADE_PRICE?: number;
    /**
     * The timestamp, in seconds, of the highest trade in the time period. This is only available when there is at least one trade in the time period.
     * @type {number}
     * @memberof SPOTINSTRUMENTHISTODATA
     */
    HIGH_TRADE_TIMESTAMP?: number;
    /**
     * The unmapped instrument ID
     * @type {string}
     * @memberof SPOTINSTRUMENTHISTODATA
     */
    INSTRUMENT?: string;
    /**
     * The last trade price in the time period. This is only available when there is at least one trade in the time period.
     * @type {number}
     * @memberof SPOTINSTRUMENTHISTODATA
     */
    LAST_TRADE_PRICE?: number;
    /**
     * The timestamp, in seconds, of the last trade in this time period. This is only available when there is at least one trade in the time period.
     * @type {number}
     * @memberof SPOTINSTRUMENTHISTODATA
     */
    LAST_TRADE_TIMESTAMP?: number;
    /**
     * The lowest trade price in the time period. If there were no trades in the time period, the open price will be given.
     * @type {number}
     * @memberof SPOTINSTRUMENTHISTODATA
     */
    LOW?: number;
    /**
     * The lowest value of the trades in the time period. This is only available when there is at least one trade in the time period.
     * @type {number}
     * @memberof SPOTINSTRUMENTHISTODATA
     */
    LOW_TRADE_PRICE?: number;
    /**
     * The timestamp, in seconds, of the lowest trade in the time period. This is only available when there is at least one trade in the time period.
     * @type {number}
     * @memberof SPOTINSTRUMENTHISTODATA
     */
    LOW_TRADE_TIMESTAMP?: number;
    /**
     * The instrument ID, as derived from our mapping rules. This takes the form \"BASE-QUOTE\" (e.g. BTC-USD). Only available on instruments that have been mapped.
     * @type {string}
     * @memberof SPOTINSTRUMENTHISTODATA
     */
    MAPPED_INSTRUMENT?: string;
    /**
     * The market / exchange under consideration (e.g. gemini, kraken, coinbase, etc).
     * @type {string}
     * @memberof SPOTINSTRUMENTHISTODATA
     */
    MARKET?: string;
    /**
     * The open price for the historical period, this is based on the closest trade before the period start.
     * @type {number}
     * @memberof SPOTINSTRUMENTHISTODATA
     */
    OPEN?: number;
    /**
     * The mapped to asset (quote / counter symbol / coin) (e.g. USD). Only available on instruments that have mapping.
     * @type {string}
     * @memberof SPOTINSTRUMENTHISTODATA
     */
    QUOTE?: string;
    /**
     * The sum of all the trade volumes in the To asset (quote/counter symbol/coin) for the time period. If there were no trades in the time period, 0 will be returned.
     * @type {number}
     * @memberof SPOTINSTRUMENTHISTODATA
     */
    QUOTE_VOLUME?: number;
    /**
     * The sum of all the BUY trade volumes in the to asset (quote/counter symbol/coin) for the time period.
     * @type {number}
     * @memberof SPOTINSTRUMENTHISTODATA
     */
    QUOTE_VOLUME_BUY?: number;
    /**
     * The sum of all the SELL trade volumes in the To asset (quote/counter symbol/coin) for the time period.
     * @type {number}
     * @memberof SPOTINSTRUMENTHISTODATA
     */
    QUOTE_VOLUME_SELL?: number;
    /**
     * The sum of all the UNKNOWN trade volumes in the To asset (quote/counter symbol/coin) for the time period.
     * @type {number}
     * @memberof SPOTINSTRUMENTHISTODATA
     */
    QUOTE_VOLUME_UNKNOWN?: number;
    /**
     * The timestamp in seconds of the beginning of the histo period. For minute it would be every minute at the beginning of the minute, for hour it would be the start of the hour and for daily it is 00:00 GMT.
     * @type {number}
     * @memberof SPOTINSTRUMENTHISTODATA
     */
    TIMESTAMP?: number;
    /**
     * The total number of trades seen in this time period. If there were no trades in the time period, 0 will be returned.
     * @type {number}
     * @memberof SPOTINSTRUMENTHISTODATA
     */
    TOTAL_TRADES?: number;
    /**
     * The total number of BUY trades seen in this time period. If there were no trades in the time period, 0 will be returned.
     * @type {number}
     * @memberof SPOTINSTRUMENTHISTODATA
     */
    TOTAL_TRADES_BUY?: number;
    /**
     * The total number of SELL trades seen in this time period. If there were no trades in the time period, 0 will be returned.
     * @type {number}
     * @memberof SPOTINSTRUMENTHISTODATA
     */
    TOTAL_TRADES_SELL?: number;
    /**
     * The total number of UNKNOWN trades seen in this time period. If there were no trades in the time period, 0 will be returned.
     * @type {number}
     * @memberof SPOTINSTRUMENTHISTODATA
     */
    TOTAL_TRADES_UNKNOWN?: number;
    /**
     * The type of the message.
     * @type {string}
     * @memberof SPOTINSTRUMENTHISTODATA
     */
    TYPE?: string;
    /**
     * The unit of the historical period update: MINUTE for minute, HOUR for hour and DAY for day.
     * @type {string}
     * @memberof SPOTINSTRUMENTHISTODATA
     */
    UNIT?: string;
    /**
     * The sum of all the trade volumes in the from asset (base symbol / coin) for the time period. If there were no trades in the time period, 0 will be returned.
     * @type {number}
     * @memberof SPOTINSTRUMENTHISTODATA
     */
    VOLUME?: number;
    /**
     * The sum of all the BUY trade volumes in the from asset (base symbol / coin) for the time period.
     * @type {number}
     * @memberof SPOTINSTRUMENTHISTODATA
     */
    VOLUME_BUY?: number;
    /**
     * The sum of all the SELL trade volumes in the from asset (base symbol / coin) for the time period.
     * @type {number}
     * @memberof SPOTINSTRUMENTHISTODATA
     */
    VOLUME_SELL?: number;
    /**
     * The sum of all the UNKNOWN trade volumes in the from asset (base symbol / coin) for the time period.
     * @type {number}
     * @memberof SPOTINSTRUMENTHISTODATA
     */
    VOLUME_UNKNOWN?: number;
}

/**
 * 
 * @export
 */
export type SPOTINSTRUMENTHISTODATARESPONSE = {
    /**
     * 
     * @type {Array<SPOTINSTRUMENTHISTODATA>}
     * @memberof SPOTINSTRUMENTHISTODATARESPONSE
     */
    Data?: Array<SPOTINSTRUMENTHISTODATA>;
    /**
     * 
     * @type {Object}
     * @memberof SPOTINSTRUMENTHISTODATARESPONSE
     */
    Err?: Object;
}

/**
 * 
 * @export
 */
export type SPOTINSTRUMENTMARKETDATA = {
    /**
     * The mapped from asset (base / symbol/ coin), e.g. BTC. Only available on instruments that have been mapped.
     * @type {string}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    BASE?: string;
    /**
     * Our internal sequence number for this tick update. This is unique per market / exchange and trading pair / instrument. It will always be increasing by 1 for each new tick update we send.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CCSEQ?: number;
    /**
     * The highest trade price of the current day (00:00:00 GMT/UTC). If there were no updates in the time period, the open price will be given. Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_DAY_HIGH?: number;
    /**
     * The lowest trade price of the current day (00:00:00 GMT/UTC). If there were no updates in the time period, the open price will be given. Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_DAY_LOW?: number;
    /**
     * The open price for the current day, this is based on the closest trade occurring before the start of the current day (00:00:00 GMT/UTC). Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_DAY_OPEN?: number;
    /**
     * The sum of all trade quote quantities from the start of the current day (00:00:00 GMT/UTC) until now. Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_DAY_QUOTE_VOLUME?: number;
    /**
     * The sum of all buy trade quote quantities from the start of the current day (00:00:00 GMT/UTC) until now. Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_DAY_QUOTE_VOLUME_BUY?: number;
    /**
     * The sum of all sell trade quote quantities from the start of the current day (00:00:00 GMT/UTC) until now. Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_DAY_QUOTE_VOLUME_SELL?: number;
    /**
     * The sum of all unknown trade quote quantities from the start of the current day (00:00:00 GMT/UTC) until now. Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_DAY_QUOTE_VOLUME_UNKNOWN?: number;
    /**
     * The total number of trades that have occurred since the start of the current day (00:00:00 GMT/UTC).
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_DAY_TOTAL_TRADES?: number;
    /**
     * The total number of buy trades since the start of the current day (00:00:00 GMT/UTC).
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_DAY_TOTAL_TRADES_BUY?: number;
    /**
     * The total number of sell trades since the start of the current day (00:00:00 GMT/UTC).
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_DAY_TOTAL_TRADES_SELL?: number;
    /**
     * The total number of unknown trades since the start of the current day (00:00:00 GMT/UTC).
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_DAY_TOTAL_TRADES_UNKNOWN?: number;
    /**
     * The sum of all trade quantities from the start of the current day (00:00:00 GMT/UTC) until now. Given in the base asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_DAY_VOLUME?: number;
    /**
     * The sum of all buy trade quantities from the start of the current day (00:00:00 GMT/UTC) until now. Given in the base asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_DAY_VOLUME_BUY?: number;
    /**
     * The sum of all sell trade quantities from the start of the current day (00:00:00 GMT/UTC) until now. Given in the base asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_DAY_VOLUME_SELL?: number;
    /**
     * The sum of all unknown trade quantities from the start of the current day (00:00:00 GMT/UTC) until now. Given in the base asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_DAY_VOLUME_UNKNOWN?: number;
    /**
     * The highest trade price of the current hour. If there were no updates in the time period, the open price will be given. Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_HOUR_HIGH?: number;
    /**
     * The lowest trade price of the current hour. If there were no updates in the time period, the open price will be given. Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_HOUR_LOW?: number;
    /**
     * The open price for the current hour, this is based on the closest trade occurring before the start of the current hour. Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_HOUR_OPEN?: number;
    /**
     * The sum of all trade quote quantities from the start of the current hour until now. Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_HOUR_QUOTE_VOLUME?: number;
    /**
     * The sum of all buy trade quote quantities from the start of the current hour until now. Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_HOUR_QUOTE_VOLUME_BUY?: number;
    /**
     * The sum of all sell trade quote quantities from the start of the current hour until now. Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_HOUR_QUOTE_VOLUME_SELL?: number;
    /**
     * The sum of all unknown trade quote quantities from the start of the current hour until now. Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_HOUR_QUOTE_VOLUME_UNKNOWN?: number;
    /**
     * The total number of trades that have occurred since the start of the current hour.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_HOUR_TOTAL_TRADES?: number;
    /**
     * The total number of buy trades since the start of the current hour.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_HOUR_TOTAL_TRADES_BUY?: number;
    /**
     * The total number of sell trades since the start of the current hour.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_HOUR_TOTAL_TRADES_SELL?: number;
    /**
     * The total number of unknown trades since the start of the current hour.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_HOUR_TOTAL_TRADES_UNKNOWN?: number;
    /**
     * The sum of all trade quantities from the start of the current hour until now. Given in the base asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_HOUR_VOLUME?: number;
    /**
     * The sum of all buy trade quantities from the start of the current hour until now. Given in the base asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_HOUR_VOLUME_BUY?: number;
    /**
     * The sum of all sell trade quantities from the start of the current hour until now. Given in the base asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_HOUR_VOLUME_SELL?: number;
    /**
     * The sum of all trade quote quantities from the start of the current hour until now. Given in the base asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_HOUR_VOLUME_UNKNOWN?: number;
    /**
     * The highest traded price of the month excluding the current day. The period will run from the 1st of the month - 00:00:00 GMT/UTC to the beginning - 00:00:00 GMT/UTC of the current day of the month. If today is the 1st of the month, this value will be CURRENT_MONTH_OPEN. Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_MONTH_HIGH?: number;
    /**
     * The lowest traded price of the month excluding the current day. The period will run from the 1st of the month - 00:00:00 GMT/UTC to the beginning - 00:00:00 GMT/UTC of the current day of the month. If today is the 1st of the month, this value will be CURRENT_MONTH_OPEN. Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_MONTH_LOW?: number;
    /**
     * The price of the closest trade to the 1st day (00:00:00 GMT/UTC) of this month. In a highly liquid market, this would be the last trade that happened on the previous month at (23:59:59 999 GMT/UTC). This will always be supplied and there is no need to do any calculation to get the full monthly value. Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_MONTH_OPEN?: number;
    /**
     * The sum of all trade quote quantities from the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the first of the month, this value will be 0. Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_MONTH_QUOTE_VOLUME?: number;
    /**
     * The sum of all buy trade quote quantities from the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the first of the month, this value will be 0. Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_MONTH_QUOTE_VOLUME_BUY?: number;
    /**
     * The sum of all sell trade quote quantities from the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the first of the month, this value will be 0. Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_MONTH_QUOTE_VOLUME_SELL?: number;
    /**
     * The sum of all unknown trade quote quantities from the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the first of the month, this value will be 0. Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_MONTH_QUOTE_VOLUME_UNKNOWN?: number;
    /**
     * The total number of trades between the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the 1st of the month, this value will be 0.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_MONTH_TOTAL_TRADES?: number;
    /**
     * The total number of buy trades between the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the 1st of the month, this value will be 0.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_MONTH_TOTAL_TRADES_BUY?: number;
    /**
     * The total number of sell trades between the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the 1st of the month, this value will be 0.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_MONTH_TOTAL_TRADES_SELL?: number;
    /**
     * The total number of unknown trades between the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the 1st of the month, this value will be 0.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_MONTH_TOTAL_TRADES_UNKNOWN?: number;
    /**
     * The sum of all trade quantities from the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the first of the month, this value will be 0. Given in the base asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_MONTH_VOLUME?: number;
    /**
     * The sum of all buy trade quantities from the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the first of the month, this value will be 0. Given in the base asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_MONTH_VOLUME_BUY?: number;
    /**
     * The sum of all sell trade quantities from the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the first of the month, this value will be 0. Given in the base asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_MONTH_VOLUME_SELL?: number;
    /**
     * The sum of all unknown trade quantities from the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the first of the month, this value will be 0. Given in the base asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_MONTH_VOLUME_UNKNOWN?: number;
    /**
     * The highest traded price of the week excluding the current day. The period will run from Monday - 00:00:00 GMT/UTC to the beginning - 00:00:00 GMT/UTC of the current day of the week. If today is Monday, this value will be the same as CURRENT_WEEK_OPEN. Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_WEEK_HIGH?: number;
    /**
     * The lowest traded price of the week excluding the current day. The period will run from Monday - 00:00:00 GMT/UTC to the beginning - 00:00:00 GMT/UTC of the current day of the week. If today is Monday, this value will be CURRENT_WEEK_LOW. Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_WEEK_LOW?: number;
    /**
     * The price of the closest trade to Monday (00:00:00 GMT/UTC) of this week. In a highly liquid market, this would be the last trade that happened on the previous Sunday at (23:59:59 999 GMT/UTC). This will always be supplied and there is no need to do any calculation to get the full weekly value. Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_WEEK_OPEN?: number;
    /**
     * The sum of all trade quote quantities from Monday (00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0. Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_WEEK_QUOTE_VOLUME?: number;
    /**
     * The sum of all buy trade quote quantities from Monday (00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0. Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_WEEK_QUOTE_VOLUME_BUY?: number;
    /**
     * The sum of all sell trade quote quantities from Monday (00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0. Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_WEEK_QUOTE_VOLUME_SELL?: number;
    /**
     * The sum of all unknown trade quote quantities from Monday (00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0. Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_WEEK_QUOTE_VOLUME_UNKNOWN?: number;
    /**
     * The total number of trades between Monday (00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_WEEK_TOTAL_TRADES?: number;
    /**
     * The total number of buy trades between Monday (00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_WEEK_TOTAL_TRADES_BUY?: number;
    /**
     * The total number of sell trades between Monday (00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_WEEK_TOTAL_TRADES_SELL?: number;
    /**
     * The total number of unknown trades between Monday (00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_WEEK_TOTAL_TRADES_UNKNOWN?: number;
    /**
     * The sum of all trade quantities from Monday (00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0. Given in the base asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_WEEK_VOLUME?: number;
    /**
     * The sum of all buy trade quantities from Monday (00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0. Given in the base asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_WEEK_VOLUME_BUY?: number;
    /**
     * The sum of all sell trade quantities from Monday (00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0. Given in the base asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_WEEK_VOLUME_SELL?: number;
    /**
     * The sum of all unknown trade quantities from Monday (00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0. Given in the base asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_WEEK_VOLUME_UNKNOWN?: number;
    /**
     * The highest traded price of the year excluding the current day. The period runs from the 1st of January - 00:00:00 GMT/UTC to the beginning - 00:00:00 GMT/UTC of the current day of the year. If today is the 1st of January, this value will be CURRENT_YEAR_OPEN. Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_YEAR_HIGH?: number;
    /**
     * The lowest traded price of the year excluding the current day. The period runs from the 1st of January - 00:00:00 GMT/UTC to the beginning - 00:00:00 GMT/UTC of the current day of the year. If today is the 1st of January, this value will be CURRENT_YEAR_OPEN. Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_YEAR_LOW?: number;
    /**
     * The price of the closest trade to the 1st of January (00:00:00 GMT/UTC) of this year. In a highly liquid market, this would be the last trade that happened on on the 31st of December of the previous year (23:59:59 999 GMT/UTC). This will always be supplied and there is no need to do any calculation to get the full yearly value. Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_YEAR_OPEN?: number;
    /**
     * The sum of all trade quote quantities from the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0. Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_YEAR_QUOTE_VOLUME?: number;
    /**
     * The sum of all buy trade quote quantities from the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0. Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_YEAR_QUOTE_VOLUME_BUY?: number;
    /**
     * The sum of all sell trade quote quantities from the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0. Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_YEAR_QUOTE_VOLUME_SELL?: number;
    /**
     * The sum of all unknown trade quote quantities from the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0. Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_YEAR_QUOTE_VOLUME_UNKNOWN?: number;
    /**
     * The total number of trades between the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_YEAR_TOTAL_TRADES?: number;
    /**
     * The total number of buy trades between the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_YEAR_TOTAL_TRADES_BUY?: number;
    /**
     * The total number of sell trades between the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_YEAR_TOTAL_TRADES_SELL?: number;
    /**
     * The total number of unknown trades between the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_YEAR_TOTAL_TRADES_UNKNOWN?: number;
    /**
     * The sum of all trade quantities from the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0. Given in the base asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_YEAR_VOLUME?: number;
    /**
     * The sum of all buy trade quantities from the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0. Given in the base asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_YEAR_VOLUME_BUY?: number;
    /**
     * The sum of all sell trade quantities from the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0. Given in the base asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_YEAR_VOLUME_SELL?: number;
    /**
     * The sum of all unknown trade quantities from the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0. Given in the base asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    CURRENT_YEAR_VOLUME_UNKNOWN?: number;
    /**
     * The unmapped instrument ID
     * @type {string}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    INSTRUMENT?: string;
    /**
     * The CCSEQ of the latest trade.
     * @type {string}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    LAST_PROCESSED_TRADE_CCSEQ?: string;
    /**
     * The price in the quote asset of the last trade processed, as reported by the market / exchange.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    LAST_PROCESSED_TRADE_PRICE?: number;
    /**
     * The quantity of the last processed trade in the from symbol (base / coin).
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    LAST_PROCESSED_TRADE_QUANTITY?: number;
    /**
     * The  volume of the last processed trade in the to asset / quote.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    LAST_PROCESSED_TRADE_QUOTE_QUANTITY?: number;
    /**
     * The side of the last processed trade.
     * @type {string}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    LAST_PROCESSED_TRADE_SIDE?: string;
    /**
     * The timestamp in seconds that the last trade was processed, as reported by the market / exchange. If the market / exchange does not provide this information, the timestamp that the trade was received will be returned.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    LAST_PROCESSED_TRADE_TS?: number;
    /**
     * The CCSEQ of the latest trade.
     * @type {string}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    LAST_TRADE_CCSEQ?: string;
    /**
     * The ID of the latest trade.
     * @type {string}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    LAST_TRADE_ID?: string;
    /**
     * The quantity of the latest trade in the from symbol (base / coin).
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    LAST_TRADE_QUANTITY?: number;
    /**
     * The volume of the latest trade in the to asset / quote.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    LAST_TRADE_QUOTE_QUANTITY?: number;
    /**
     * The side of the latest trade.
     * @type {string}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    LAST_TRADE_SIDE?: string;
    /**
     * The timestamp of the first trade ever recorded for the instrument
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    LIFETIME_FIRST_TRADE_TS?: number;
    /**
     * The price of the highest trade ever executed for this instrument. Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    LIFETIME_HIGH?: number;
    /**
     * The the timestamp of the highest trade ever executed for this instrument. Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    LIFETIME_HIGH_TS?: number;
    /**
     * The price of the lowest trade ever executed for this instrument. Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    LIFETIME_LOW?: number;
    /**
     * The timestamp of the lowest trade ever executed for this instrument. Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    LIFETIME_LOW_TS?: number;
    /**
     * The price of the first trade of the instrument. Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    LIFETIME_OPEN?: number;
    /**
     * The sum of all trade quote quantities of all the trades of this instrument. Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    LIFETIME_QUOTE_VOLUME?: number;
    /**
     * The sum of all buy trade quote quantities of all the trades of this instrument. Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    LIFETIME_QUOTE_VOLUME_BUY?: number;
    /**
     * The sum of all sell trade quote quantities of all the trades of this instrument. Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    LIFETIME_QUOTE_VOLUME_SELL?: number;
    /**
     * The sum of all unknown trade quote quantities of all the trades of this instrument. Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    LIFETIME_QUOTE_VOLUME_UNKNOWN?: number;
    /**
     * The total number of all trades that have ever been executed for this instrument.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    LIFETIME_TOTAL_TRADES?: number;
    /**
     * The total number of all buy trades that have ever been executed for this instrument.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    LIFETIME_TOTAL_TRADES_BUY?: number;
    /**
     * The total number of all sell trades that have ever been executed for this instrument.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    LIFETIME_TOTAL_TRADES_SELL?: number;
    /**
     * The total number of all unknown trades that have ever been executed for this instrument.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    LIFETIME_TOTAL_TRADES_UNKNOWN?: number;
    /**
     * The sum of all trade quantities of all the trades of this instrument. Given in the base asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    LIFETIME_VOLUME?: number;
    /**
     * The sum of all buy trade quantities of all the trades of this instrument. Given in the base asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    LIFETIME_VOLUME_BUY?: number;
    /**
     * The sum of all sell trade quantities of all the trades of this instrument. Given in the base asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    LIFETIME_VOLUME_SELL?: number;
    /**
     * The sum of all unknown trade quantities of all the trades of this instrument. Given in the base asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    LIFETIME_VOLUME_UNKNOWN?: number;
    /**
     * The mapped instrument ID, derived from our mapping rules. This takes the form: \"BASE-QUOTE\" (e.g. BTC-USD). Only available on instruments that have been mapped.
     * @type {string}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MAPPED_INSTRUMENT?: string;
    /**
     * The market / exchange under consideration (e.g. coinbase, kraken, etc).
     * @type {string}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MARKET?: string;
    /**
     * The  highest traded price of the period. Here, the period runs from 180 days ago up to the beginning of the current day (179 days in total). Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_180_DAY_HIGH?: number;
    /**
     * The lowest traded price of the period. Here, the period runs from 180 days ago up to the beginning of the current day (179 days in total). Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_180_DAY_LOW?: number;
    /**
     * The price of the closest trade to the period start date (179 days + current day - 00:00:00 GMT/UTC to now). This will always be supplied and there is no need to do any calculation to get the full 180 day value. Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_180_DAY_OPEN?: number;
    /**
     * The sum of all trade quote quantities from 180 days ago up to the beginning of the current day (179 days in total). Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_180_DAY_QUOTE_VOLUME?: number;
    /**
     * The sum of all buy trade quote quantities from 180 days ago up to the beginning of the current day (179 days in total). Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_180_DAY_QUOTE_VOLUME_BUY?: number;
    /**
     * The sum of all sell trade quote quantities from 180 days ago up to the beginning of the current day (179 days in total). Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_180_DAY_QUOTE_VOLUME_SELL?: number;
    /**
     * The sum of all unknown trade quote quantities from 180 days ago up to the beginning of the current day (179 days in total). Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_180_DAY_QUOTE_VOLUME_UNKNOWN?: number;
    /**
     * The total number of trades that have occurred in the period from 180 days ago to the beginning (00:00:00 GMT/UTC) of the current day (179 days in total).
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_180_DAY_TOTAL_TRADES?: number;
    /**
     * The total number of buy trades that have occurred in the period from 180 days ago to the beginning (00:00:00 GMT/UTC) of the current day (179 days in total).
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_180_DAY_TOTAL_TRADES_BUY?: number;
    /**
     * The total number of sell trades that have occurred in the period from 180 days ago to the beginning (00:00:00 GMT/UTC) of the current day (179 days in total).
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_180_DAY_TOTAL_TRADES_SELL?: number;
    /**
     * The total number of unknown trades that have occurred in the period from 180 days ago to the beginning (00:00:00 GMT/UTC) of the current day (179 days in total).
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_180_DAY_TOTAL_TRADES_UNKNOWN?: number;
    /**
     * The sum of all trade quantities from 180 days ago up to the beginning of the current day (179 days in total). Given in the base asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_180_DAY_VOLUME?: number;
    /**
     * The sum of all trade quantities from 180 days ago up to the beginning of the current day (179 days in total). Given in the base asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_180_DAY_VOLUME_BUY?: number;
    /**
     * The sum of all sell trade quantities from 180 days ago up to the beginning of the current day (179 days in total). Given in the base asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_180_DAY_VOLUME_SELL?: number;
    /**
     * The sum of all unknown trade quantities from 180 days ago up to the beginning of the current day (179 days in total). Given in the base asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_180_DAY_VOLUME_UNKNOWN?: number;
    /**
     * The highest traded price of the period. Here, the period runs from 24 hours ago up to the beginning of the current hour (23 hours in total). Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_24_HOUR_HIGH?: number;
    /**
     * The lowest traded price of the period. Here, the period runs from 24 hours ago up to the beginning of the current hour (23 hours in total). Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_24_HOUR_LOW?: number;
    /**
     * The price of the closest trade to the period start date (23 hours + current hour ago). This will always be supplied and there is no need to do any calculation to get the full 24 hour value. Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_24_HOUR_OPEN?: number;
    /**
     * The sum of all trade quote quantities from 24 hours ago up to the beginning of the current hour (23 hours in total). Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_24_HOUR_QUOTE_VOLUME?: number;
    /**
     * The sum of all buy trade quote quantities from 24 hours ago up to the beginning of the current hour (23 hours in total). Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_24_HOUR_QUOTE_VOLUME_BUY?: number;
    /**
     * The sum of all sell trade quote quantities from 24 hours ago up to the beginning of the current hour (23 hours in total). Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_24_HOUR_QUOTE_VOLUME_SELL?: number;
    /**
     * The sum of all unknown trade quote quantities from 24 hours ago up to the beginning of the current hour (23 hours in total). Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_24_HOUR_QUOTE_VOLUME_UNKNOWN?: number;
    /**
     * The total number of trades that have occurred in the period running from 24 hours ago to the beginning (xx:00:00) of the current hour (23 hours in total).
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_24_HOUR_TOTAL_TRADES?: number;
    /**
     * The total number of buy trades that have occurred in the period running from 24 hours ago to the beginning (xx:00:00) of the current hour (23 hours in total).
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_24_HOUR_TOTAL_TRADES_BUY?: number;
    /**
     * The total number of sell trades that have occurred in the period running from 24 hours ago to the beginning (xx:00:00) of the current hour (23 hours in total).
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_24_HOUR_TOTAL_TRADES_SELL?: number;
    /**
     * The total number of unknown trades that have occurred in the period running from 24 hours ago to the beginning (xx:00:00) of the current hour (23 hours in total).
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_24_HOUR_TOTAL_TRADES_UNKNOWN?: number;
    /**
     * The sum of all trade quantities from 24 hours ago up to the beginning of the current hour (23 hours in total). Given in the base asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_24_HOUR_VOLUME?: number;
    /**
     * The sum of all buy trade quantities from 24 hours ago up to the beginning of the current hour (23 hours in total). Given in the base asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_24_HOUR_VOLUME_BUY?: number;
    /**
     * The sum of all sell trade quantities from 24 hours ago up to the beginning of the current hour (23 hours in total). Given in the base asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_24_HOUR_VOLUME_SELL?: number;
    /**
     * The sum of all unknown trade quantities from 24 hours ago up to the beginning of the current hour (23 hours in total). Given in the base asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_24_HOUR_VOLUME_UNKNOWN?: number;
    /**
     * The highest traded price of the period. Here, the period runs from 30 days ago up to the beginning of the current day (29 days in total). Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_30_DAY_HIGH?: number;
    /**
     * The lowest traded price of the period. Here, the period runs from 30 days ago up to the beginning of the current day (29 days in total). Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_30_DAY_LOW?: number;
    /**
     * The price of the closest trade to the period start date (29 days + current day - 00:00:00 GMT/UTC to now).  This will always be supplied and there is no need to do any calculation to get the full 30 day value. Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_30_DAY_OPEN?: number;
    /**
     * The sum of all trade quote quantities from 30 days ago up to the beginning of the current day (29 days in total). Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_30_DAY_QUOTE_VOLUME?: number;
    /**
     * The sum of all buy trade quote quantities from 30 days ago up to the beginning of the current day (29 days in total). Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_30_DAY_QUOTE_VOLUME_BUY?: number;
    /**
     * The sum of all sell trade quote quantities from 30 days ago up to the beginning of the current day (29 days in total). Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_30_DAY_QUOTE_VOLUME_SELL?: number;
    /**
     * The sum of all unknown trade quote quantities from 30 days ago up to the beginning of the current day (29 days in total). Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_30_DAY_QUOTE_VOLUME_UNKNOWN?: number;
    /**
     * The total number of trades that have occurred in the period running from 30 days ago to the beginning (00:00:00 GMT/UTC) of the current day (29 days in total).
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_30_DAY_TOTAL_TRADES?: number;
    /**
     * The total number of buy trades that have occurred in the period running from 30 days ago to the beginning (00:00:00 GMT/UTC) of the current day (29 days in total).
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_30_DAY_TOTAL_TRADES_BUY?: number;
    /**
     * The total number of sell trades that have occurred in the period running from 30 days ago to the beginning (00:00:00 GMT/UTC) of the current day (29 days in total).
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_30_DAY_TOTAL_TRADES_SELL?: number;
    /**
     * The total number of unknown trades that have occurred in the period running from 30 days ago to the beginning (00:00:00 GMT/UTC) of the current day (29 days in total).
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_30_DAY_TOTAL_TRADES_UNKNOWN?: number;
    /**
     * The sum of all trade quantities from 30 days ago up to the beginning of the current day (29 days in total). Given in the base asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_30_DAY_VOLUME?: number;
    /**
     * The sum of all buy trade quantities from 30 days ago up to the beginning of the current day (29 days in total). Given in the base asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_30_DAY_VOLUME_BUY?: number;
    /**
     * The sum of all sell trade quantities from 30 days ago up to the beginning of the current day (29 days in total). Given in the base asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_30_DAY_VOLUME_SELL?: number;
    /**
     * The sum of all unknown trade quantities from 30 days ago up to the beginning of the current day (29 days in total). Given in the base asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_30_DAY_VOLUME_UNKNOWN?: number;
    /**
     * The highest price of the period. Here, the period runs from 365 days ago up to the beginning of the current day (364 days in total). Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_365_DAY_HIGH?: number;
    /**
     * The lowest traded price of the period. Here, the period runs from 365 days ago up to the beginning of the current day (364 days in total). Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_365_DAY_LOW?: number;
    /**
     * The price of the closest trade to the period start date (364 days + current day - 00:00:00 GMT/UTC to now).  This will always be supplied and there is no need to do any calculation to get the full 365 day value. Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_365_DAY_OPEN?: number;
    /**
     * The sum of all trade quote quantities from 365 days ago up to the beginning of the current day (364 days in total). Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_365_DAY_QUOTE_VOLUME?: number;
    /**
     * The sum of all buy trade quote quantities from 365 days ago up to the beginning of the current day (364 days in total). Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_365_DAY_QUOTE_VOLUME_BUY?: number;
    /**
     * The sum of all sell trade quote quantities from 365 days ago up to the beginning of the current day (364 days in total). Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_365_DAY_QUOTE_VOLUME_SELL?: number;
    /**
     * The sum of all unknown trade quote quantities from 365 days ago up to the beginning of the current day (364 days in total). Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_365_DAY_QUOTE_VOLUME_UNKNOWN?: number;
    /**
     * The total number of trades that have occurred during the period running from 365 days ago to the beginning (00:00:00 GMT/UTC) of the current day (364 days in total).
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_365_DAY_TOTAL_TRADES?: number;
    /**
     * The total number of buy trades that have occurred during the period running from 365 days ago to the beginning (00:00:00 GMT/UTC) of the current day (364 days in total).
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_365_DAY_TOTAL_TRADES_BUY?: number;
    /**
     * The total number of sell trades that have occurred during the period running from 365 days ago to the beginning (00:00:00 GMT/UTC) of the current day (364 days in total).
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_365_DAY_TOTAL_TRADES_SELL?: number;
    /**
     * The total number of unknown trades that have occurred during the period running from 365 days ago to the beginning (00:00:00 GMT/UTC) of the current day (364 days in total).
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_365_DAY_TOTAL_TRADES_UNKNOWN?: number;
    /**
     * The sum of all trade quantities from 365 days ago up to the beginning of the current day (364 days in total). Given in the base asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_365_DAY_VOLUME?: number;
    /**
     * The sum of all trade quantities from 365 days ago up to the beginning of the current day (364 days in total). Given in the base asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_365_DAY_VOLUME_BUY?: number;
    /**
     * The sum of all sell trade quantities from 365 days ago up to the beginning of the current day (364 days in total). Given in the base asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_365_DAY_VOLUME_SELL?: number;
    /**
     * The sum of all unknown trade quantities from 365 days ago up to the beginning of the current day (364 days in total). Given in the base asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_365_DAY_VOLUME_UNKNOWN?: number;
    /**
     * The highest traded price of the period. Here, the period runs from 7 days ago up to the beginning of the current day (6 days in total). Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_7_DAY_HIGH?: number;
    /**
     * The lowest traded price of the period. Here, the period runs from 7 days ago up to the beginning of the current day (6 days in total). Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_7_DAY_LOW?: number;
    /**
     * The price of the closest trade to the period start date (6 days + current day - 00:00:00 GMT/UTC to now). This will always be supplied and there is no need to do any calculation to get the full 7 day value. Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_7_DAY_OPEN?: number;
    /**
     * The sum of all trade quote quantities from 7 days ago up to the beginning of the current day (6 days in total). Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_7_DAY_QUOTE_VOLUME?: number;
    /**
     * The sum of all buy trade quote quantities from 7 days ago up to the beginning of the current day (6 days in total). Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_7_DAY_QUOTE_VOLUME_BUY?: number;
    /**
     * The sum of all sell trade quote quantities from 7 days ago up to the beginning of the current day (6 days in total). Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_7_DAY_QUOTE_VOLUME_SELL?: number;
    /**
     * The sum of all unknown trade quote quantities from 7 days ago up to the beginning of the current day (6 days in total). Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_7_DAY_QUOTE_VOLUME_UNKNOWN?: number;
    /**
     * The total number of trades that have occurred in the period running from 7 days ago to the beginning (00:00:00 GMT/UTC) of the current day (6 days in total).
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_7_DAY_TOTAL_TRADES?: number;
    /**
     * The total number of buy trades that have occurred in the period running from 7 days ago to the beginning (00:00:00 GMT/UTC) of the current day (6 days in total).
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_7_DAY_TOTAL_TRADES_BUY?: number;
    /**
     * The total number of sell trades that have occurred in the period running from 7 days ago to the beginning (00:00:00 GMT/UTC) of the current day (6 days in total).
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_7_DAY_TOTAL_TRADES_SELL?: number;
    /**
     * The total number of unknown trades that have occurred in the period running from 7 days ago to the beginning (00:00:00 GMT/UTC) of the current day (6 days in total).
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_7_DAY_TOTAL_TRADES_UNKNOWN?: number;
    /**
     * The sum of all trade quantities from 7 days ago up to the beginning of the current day (6 days in total). Given in the base asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_7_DAY_VOLUME?: number;
    /**
     * The sum of all buy trade quantities from 7 days ago up to the beginning of the current day (6 days in total). Given in the base asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_7_DAY_VOLUME_BUY?: number;
    /**
     * The sum of all sell trade quantities from 7 days ago up to the beginning of the current day (6 days in total). Given in the base asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_7_DAY_VOLUME_SELL?: number;
    /**
     * The sum of all unknown trade quantities from 7 days ago up to the beginning of the current day (6 days in total). Given in the base asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_7_DAY_VOLUME_UNKNOWN?: number;
    /**
     * The highest value between the MOVING_90_DAY_OPEN and the highest traded price of the period. Here, the period runs from 90 days ago up to the beginning of the current day (89 days in total). Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_90_DAY_HIGH?: number;
    /**
     * The lowest traded price of the period. Here, the period runs from 90 days ago up to the beginning of the current day (89 days in total). Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_90_DAY_LOW?: number;
    /**
     * The price of the closest trade to the period start date (89 days + current day - 00:00:00 GMT/UTC to now).  This will always be supplied and there is no need to do any calculation to get the full 90 day value. Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_90_DAY_OPEN?: number;
    /**
     * The sum of all trade quote quantities from 90 days ago up to the beginning of the current day (89 days in total). Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_90_DAY_QUOTE_VOLUME?: number;
    /**
     * The sum of all buy trade quote quantities from 90 days ago up to the beginning of the current day (89 days in total). Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_90_DAY_QUOTE_VOLUME_BUY?: number;
    /**
     * The sum of all sell trade quote quantities from 90 days ago up to the beginning of the current day (89 days in total). Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_90_DAY_QUOTE_VOLUME_SELL?: number;
    /**
     * The sum of all unknown trade quote quantities from 90 days ago up to the beginning of the current day (89 days in total). Given in the quote asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_90_DAY_QUOTE_VOLUME_UNKNOWN?: number;
    /**
     * The total number of trades that have occurred in the period running from 90 days ago to the beginning (00:00:00 GMT/UTC) of the current day (89 days in total).
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_90_DAY_TOTAL_TRADES?: number;
    /**
     * The total number of buy trades that have occurred in the period running from 90 days ago to the beginning (00:00:00 GMT/UTC) of the current day (89 days in total).
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_90_DAY_TOTAL_TRADES_BUY?: number;
    /**
     * The total number of sell trades that have occurred in the period running from 90 days ago to the beginning (00:00:00 GMT/UTC) of the current day (89 days in total).
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_90_DAY_TOTAL_TRADES_SELL?: number;
    /**
     * The total number of unknown trades that have occurred in the period running from 90 days ago to the beginning (00:00:00 GMT/UTC) of the current day (89 days in total).
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_90_DAY_TOTAL_TRADES_UNKNOWN?: number;
    /**
     * The sum of all trade quantities from 90 days ago up to the beginning of the current day (89 days in total). Given in the base asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_90_DAY_VOLUME?: number;
    /**
     * The sum of all trade quantities from 90 days ago up to the beginning of the current day (89 days in total). Given in the base asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_90_DAY_VOLUME_BUY?: number;
    /**
     * The sum of all sell trade quantities from 90 days ago up to the beginning of the current day (89 days in total). Given in the base asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_90_DAY_VOLUME_SELL?: number;
    /**
     * The sum of all unknown trade quantities from 90 days ago up to the beginning of the current day (89 days in total). Given in the base asset.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    MOVING_90_DAY_VOLUME_UNKNOWN?: number;
    /**
     * The price in the to asset (quote / number symbol / coin) of the latest trade. I.e. for a BTC-USD trade, how much was paid for one BTC in USD).
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    PRICE?: number;
    /**
     * The flag indicating whether the price has increased, decreased, or not changed
     * @type {string}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    PRICE_FLAG?: string;
    /**
     * The timestamp in seconds as reported by the market / exchange. If the market /exchange does not provide this information, the received timestamp will be returned.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    PRICE_LAST_UPDATE_TS?: number;
    /**
     * The mapped to asset (quote / counter symbol / coin), e.g. USD. Only available on instruments that have been mapped.
     * @type {string}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    QUOTE?: string;
    /**
     * The timestamp in seconds of the last time the top ask was updated, as reported by the market / exchange. If the market / exchange does not provide this information, the received timestamp will be returned.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    TOP_ASK_LAST_UPDATE_TS?: number;
    /**
     * The price of the top ask in the to asset (quote / numberer symbol / coin). For a BTC-USD order book, this will be the best price someone is willing to sell some BTC in USD, as quoted for 1 full BTC.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    TOP_ASK_PRICE?: number;
    /**
     * The quantity of the top ask in the from asset (base / coin). For a BTC-USD order book, this will be the amount of BTC a person is willing to sell at the best price.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    TOP_ASK_QUANTITY?: number;
    /**
     * The timestamp in seconds of the last time the top bid was updated, as reported by the market / exchange. If the market / exchange does not provide this information, the received timestamp will be returned.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    TOP_BID_LAST_UPDATE_TS?: number;
    /**
     * The price of the top bid in the to asset (quote / numberer symbol / coin). For a BTC-USD order book, this will be the highest price a person is willing to pay for some BTC in USD, as quoted for 1 full BTC.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    TOP_BID_PRICE?: number;
    /**
     * The quantity of the top bid in the from asset (base / coin). For a BTC-USD order book , this will be the amount of BTC someone is willing to buy at the best price.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    TOP_BID_QUANTITY?: number;
    /**
     * The type of the message.
     * @type {string}
     * @memberof SPOTINSTRUMENTMARKETDATA
     */
    TYPE?: string;
}

/**
 * 
 * @export
 */
export type SPOTINSTRUMENTMARKETDATARESPONSE = {
    /**
     * 
     * @type {{ [key: string]: SPOTINSTRUMENTMARKETDATA; }}
     * @memberof SPOTINSTRUMENTMARKETDATARESPONSE
     */
    Data?: { [key: string]: SPOTINSTRUMENTMARKETDATA; };
    /**
     * 
     * @type {SPOTINSTRUMENTMARKETDATARESPONSEErr}
     * @memberof SPOTINSTRUMENTMARKETDATARESPONSE
     */
    Err?: SPOTINSTRUMENTMARKETDATARESPONSEErr;
}

/**
 * 
 * @export
 */
export type SPOTINSTRUMENTMARKETDATARESPONSEErr = {
    /**
     * A message describing the error
     * @type {string}
     * @memberof SPOTINSTRUMENTMARKETDATARESPONSEErr
     */
    message?: string;
    /**
     * 
     * @type {SPOTINSTRUMENTMARKETDATARESPONSEErrOtherInfo}
     * @memberof SPOTINSTRUMENTMARKETDATARESPONSEErr
     */
    other_info?: SPOTINSTRUMENTMARKETDATARESPONSEErrOtherInfo;
    /**
     * A public facing error type. If you want to treat a specific error use the type.
     * @type {number}
     * @memberof SPOTINSTRUMENTMARKETDATARESPONSEErr
     */
    type?: number;
}

/**
 * 
 * @export
 */
export type SPOTINSTRUMENTMARKETDATARESPONSEErrOtherInfo = {
    /**
     * The parameter that is resposible for the error
     * @type {string}
     * @memberof SPOTINSTRUMENTMARKETDATARESPONSEErrOtherInfo
     */
    param?: string;
    /**
     * The values resposible for the error
     * @type {Array<string>}
     * @memberof SPOTINSTRUMENTMARKETDATARESPONSEErrOtherInfo
     */
    values?: Array<string>;
}

/**
 * 
 * @export
 */
export type SPOTINSTRUMENTMETADATA = {
    /**
     * This is the first time instrument was seen on instrumentListSourceType BLOB.
     * @type {number}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    FIRST_SEEN_ON_BLOB_TS?: number;
    /**
     * This is the first time instrument was seen on instrumentListSourceType FIX.
     * @type {number}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    FIRST_SEEN_ON_FIX_TS?: number;
    /**
     * This is the first time instrument was seen on instrumentListSourceType HARDCODED.
     * @type {number}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    FIRST_SEEN_ON_HARDCODED_TS?: number;
    /**
     * This is the first time instrument was seen on instrumentListSourceType INDEX_COMPOSITION.
     * @type {number}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    FIRST_SEEN_ON_INDEX_COMPOSITION_TS?: number;
    /**
     * This is the first time instrument was seen on instrumentListSourceType NSQ.
     * @type {number}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    FIRST_SEEN_ON_NSQ_TS?: number;
    /**
     * This is the first time instrument was seen on instrumentListSourceType POLLING.
     * @type {number}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    FIRST_SEEN_ON_POLLING_TS?: number;
    /**
     * This is the first time instrument was seen on instrumentListSourceType STREAMING.
     * @type {number}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    FIRST_SEEN_ON_STREAMING_TS?: number;
    /**
     * This is the first TRADE_SPOT that we have seen on the specific source type in internal format.
     * @type {Object}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    FIRST_TRADE_SPOT_FROM_BACKFILL?: Object;
    /**
     * This is the first TRADE_SPOT that we have seen on the specific source type in external format.
     * @type {Object}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    FIRST_TRADE_SPOT_FROM_BACKFILL_EXTERNAL?: Object;
    /**
     * This is the first TRADE_SPOT that we have seen on the specific source type in internal format.
     * @type {Object}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    FIRST_TRADE_SPOT_FROM_BLOB?: Object;
    /**
     * This is the first TRADE_SPOT that we have seen on the specific source type in external format.
     * @type {Object}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    FIRST_TRADE_SPOT_FROM_BLOB_EXTERNAL?: Object;
    /**
     * This is the first TRADE_SPOT that we have seen on the specific source type in internal format.
     * @type {Object}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    FIRST_TRADE_SPOT_FROM_CALCULATED?: Object;
    /**
     * This is the first TRADE_SPOT that we have seen on the specific source type in external format.
     * @type {Object}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    FIRST_TRADE_SPOT_FROM_CALCULATED_EXTERNAL?: Object;
    /**
     * This is the first TRADE_SPOT that we have seen on the specific source type in internal format.
     * @type {Object}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    FIRST_TRADE_SPOT_FROM_FIX?: Object;
    /**
     * This is the first TRADE_SPOT that we have seen on the specific source type in external format.
     * @type {Object}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    FIRST_TRADE_SPOT_FROM_FIX_EXTERNAL?: Object;
    /**
     * This is the first TRADE_SPOT that we have seen on the specific source type in internal format.
     * @type {Object}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    FIRST_TRADE_SPOT_FROM_GO?: Object;
    /**
     * This is the first TRADE_SPOT that we have seen on the specific source type in external format.
     * @type {Object}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    FIRST_TRADE_SPOT_FROM_GO_EXTERNAL?: Object;
    /**
     * This is the first TRADE_SPOT that we have seen on the specific source type in internal format.
     * @type {Object}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    FIRST_TRADE_SPOT_FROM_POLLING?: Object;
    /**
     * This is the first TRADE_SPOT that we have seen on the specific source type in external format.
     * @type {Object}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    FIRST_TRADE_SPOT_FROM_POLLING_EXTERNAL?: Object;
    /**
     * This is the first TRADE_SPOT that we have seen on the specific source type in internal format.
     * @type {Object}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    FIRST_TRADE_SPOT_FROM_STREAMING?: Object;
    /**
     * This is the first TRADE_SPOT that we have seen on the specific source type in external format.
     * @type {Object}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    FIRST_TRADE_SPOT_FROM_STREAMING_EXTERNAL?: Object;
    /**
     * The migration destination vm hostname.
     * @type {string}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    HOST_MIGRATION_DESTINATION?: string;
    /**
     * The migration source vm hostname.
     * @type {string}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    HOST_MIGRATION_SOURCE?: string;
    /**
     * The migration status of the symbol, we only poll / stream / connect empty or SETTLED
     * @type {string}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    HOST_MIGRATION_STATUS?: string;
    /**
     * The instrument ID as it is on the exchange with small modifications - we do not allow the following characters inside isntrument ids: ,/&?
     * @type {string}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    INSTRUMENT?: string;
    /**
     * The full data we get from the polling endpoint for this specific instrument. This is a JSON stringified object with different properties per exchange.
     * @type {string}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    INSTRUMENT_EXTERNAL_DATA?: string;
    /**
     * The current mapping information for this instrument
     * @type {Object}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    INSTRUMENT_MAPPING?: Object;
    /**
     * Historical mapping information for this instrument
     * @type {Array<string>}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    INSTRUMENT_MAPPING_HISTORY?: Array<string>;
    /**
     * Where do we get the instrument id / INSTRUMENT_{messageName}_REST_URI / INSTRUMENT_{messageName}_STREAMING_SUBSCRIPTION etc from.
     * @type {string}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    INSTRUMENT_SOURCE_BACKFILL?: string;
    /**
     * Where do we get the instrument id / INSTRUMENT_{messageName}_REST_URI / INSTRUMENT_{messageName}_STREAMING_SUBSCRIPTION etc from.
     * @type {string}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    INSTRUMENT_SOURCE_BLOB?: string;
    /**
     * Where do we get the instrument id / INSTRUMENT_{messageName}_REST_URI / INSTRUMENT_{messageName}_STREAMING_SUBSCRIPTION etc from.
     * @type {string}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    INSTRUMENT_SOURCE_CALCULATED?: string;
    /**
     * Where do we get the instrument id / INSTRUMENT_{messageName}_REST_URI / INSTRUMENT_{messageName}_STREAMING_SUBSCRIPTION etc from.
     * @type {string}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    INSTRUMENT_SOURCE_FIX?: string;
    /**
     * Where do we get the instrument id / INSTRUMENT_{messageName}_REST_URI / INSTRUMENT_{messageName}_STREAMING_SUBSCRIPTION etc from.
     * @type {string}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    INSTRUMENT_SOURCE_GO?: string;
    /**
     * Where do we get the instrument id / INSTRUMENT_{messageName}_REST_URI / INSTRUMENT_{messageName}_STREAMING_SUBSCRIPTION etc from.
     * @type {string}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    INSTRUMENT_SOURCE_POLLING?: string;
    /**
     * Where do we get the instrument id / INSTRUMENT_{messageName}_REST_URI / INSTRUMENT_{messageName}_STREAMING_SUBSCRIPTION etc from.
     * @type {string}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    INSTRUMENT_SOURCE_STREAMING?: string;
    /**
     * The status of the symbol, we only poll / stream / connect to the ACTIVE ones, for the RETIRED / IGNORED / EXPIRED  one we no longer query for data.
     * @type {string}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    INSTRUMENT_STATUS?: string;
    /**
     * The last proxied REST request we sent to the proxy swarm to get TRADE_SPOT for the instrument.
     * @type {Object}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    INSTRUMENT_TRADE_SPOT_FROM_BACKFILL_LAST_PROXIED_REST_REQUEST?: Object;
    /**
     * The last time we sent a request to the proxy swarm to get TRADE_SPOT for the instrument.
     * @type {number}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    INSTRUMENT_TRADE_SPOT_FROM_BACKFILL_REST_URI_LAST_REQUEST_TS?: number;
    /**
     * The last time we received a request from the proxy swarm with TRADE_SPOT for this instrument.
     * @type {number}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    INSTRUMENT_TRADE_SPOT_FROM_BACKFILL_REST_URI_LAST_RESPONSE_TS?: number;
    /**
     * The next time we expect to make a request for TRADE_SPOT on this instrument.
     * @type {number}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    INSTRUMENT_TRADE_SPOT_FROM_BACKFILL_REST_URI_NEXT_REQUEST_TS?: number;
    /**
     * The last proxied REST request we sent to the proxy swarm to get TRADE_SPOT for the instrument.
     * @type {Object}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    INSTRUMENT_TRADE_SPOT_FROM_BLOB_LAST_PROXIED_REST_REQUEST?: Object;
    /**
     * The last time we sent a request to the proxy swarm to get TRADE_SPOT for the instrument.
     * @type {number}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    INSTRUMENT_TRADE_SPOT_FROM_BLOB_REST_URI_LAST_REQUEST_TS?: number;
    /**
     * The last time we received a request from the proxy swarm with TRADE_SPOT for this instrument.
     * @type {number}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    INSTRUMENT_TRADE_SPOT_FROM_BLOB_REST_URI_LAST_RESPONSE_TS?: number;
    /**
     * The next time we expect to make a request for TRADE_SPOT on this instrument.
     * @type {number}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    INSTRUMENT_TRADE_SPOT_FROM_BLOB_REST_URI_NEXT_REQUEST_TS?: number;
    /**
     * The last proxied REST request we sent to the proxy swarm to get TRADE_SPOT for the instrument.
     * @type {Object}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    INSTRUMENT_TRADE_SPOT_FROM_CALCULATED_LAST_PROXIED_REST_REQUEST?: Object;
    /**
     * The last time we sent a request to the proxy swarm to get TRADE_SPOT for the instrument.
     * @type {number}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    INSTRUMENT_TRADE_SPOT_FROM_CALCULATED_REST_URI_LAST_REQUEST_TS?: number;
    /**
     * The last time we received a request from the proxy swarm with TRADE_SPOT for this instrument.
     * @type {number}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    INSTRUMENT_TRADE_SPOT_FROM_CALCULATED_REST_URI_LAST_RESPONSE_TS?: number;
    /**
     * The next time we expect to make a request for TRADE_SPOT on this instrument.
     * @type {number}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    INSTRUMENT_TRADE_SPOT_FROM_CALCULATED_REST_URI_NEXT_REQUEST_TS?: number;
    /**
     * The last proxied REST request we sent to the proxy swarm to get TRADE_SPOT for the instrument.
     * @type {Object}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    INSTRUMENT_TRADE_SPOT_FROM_FIX_LAST_PROXIED_REST_REQUEST?: Object;
    /**
     * The last time we sent a request to the proxy swarm to get TRADE_SPOT for the instrument.
     * @type {number}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    INSTRUMENT_TRADE_SPOT_FROM_FIX_REST_URI_LAST_REQUEST_TS?: number;
    /**
     * The last time we received a request from the proxy swarm with TRADE_SPOT for this instrument.
     * @type {number}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    INSTRUMENT_TRADE_SPOT_FROM_FIX_REST_URI_LAST_RESPONSE_TS?: number;
    /**
     * The next time we expect to make a request for TRADE_SPOT on this instrument.
     * @type {number}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    INSTRUMENT_TRADE_SPOT_FROM_FIX_REST_URI_NEXT_REQUEST_TS?: number;
    /**
     * The last proxied REST request we sent to the proxy swarm to get TRADE_SPOT for the instrument.
     * @type {Object}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    INSTRUMENT_TRADE_SPOT_FROM_GO_LAST_PROXIED_REST_REQUEST?: Object;
    /**
     * The last time we sent a request to the proxy swarm to get TRADE_SPOT for the instrument.
     * @type {number}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    INSTRUMENT_TRADE_SPOT_FROM_GO_REST_URI_LAST_REQUEST_TS?: number;
    /**
     * The last time we received a request from the proxy swarm with TRADE_SPOT for this instrument.
     * @type {number}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    INSTRUMENT_TRADE_SPOT_FROM_GO_REST_URI_LAST_RESPONSE_TS?: number;
    /**
     * The next time we expect to make a request for TRADE_SPOT on this instrument.
     * @type {number}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    INSTRUMENT_TRADE_SPOT_FROM_GO_REST_URI_NEXT_REQUEST_TS?: number;
    /**
     * The last proxied REST request we sent to the proxy swarm to get TRADE_SPOT for the instrument.
     * @type {Object}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    INSTRUMENT_TRADE_SPOT_FROM_POLLING_LAST_PROXIED_REST_REQUEST?: Object;
    /**
     * The last time we sent a request to the proxy swarm to get TRADE_SPOT for the instrument.
     * @type {number}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    INSTRUMENT_TRADE_SPOT_FROM_POLLING_REST_URI_LAST_REQUEST_TS?: number;
    /**
     * The last time we received a request from the proxy swarm with TRADE_SPOT for this instrument.
     * @type {number}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    INSTRUMENT_TRADE_SPOT_FROM_POLLING_REST_URI_LAST_RESPONSE_TS?: number;
    /**
     * The next time we expect to make a request for TRADE_SPOT on this instrument.
     * @type {number}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    INSTRUMENT_TRADE_SPOT_FROM_POLLING_REST_URI_NEXT_REQUEST_TS?: number;
    /**
     * The last proxied REST request we sent to the proxy swarm to get TRADE_SPOT for the instrument.
     * @type {Object}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    INSTRUMENT_TRADE_SPOT_FROM_STREAMING_LAST_PROXIED_REST_REQUEST?: Object;
    /**
     * The last time we sent a request to the proxy swarm to get TRADE_SPOT for the instrument.
     * @type {number}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    INSTRUMENT_TRADE_SPOT_FROM_STREAMING_REST_URI_LAST_REQUEST_TS?: number;
    /**
     * The last time we received a request from the proxy swarm with TRADE_SPOT for this instrument.
     * @type {number}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    INSTRUMENT_TRADE_SPOT_FROM_STREAMING_REST_URI_LAST_RESPONSE_TS?: number;
    /**
     * The next time we expect to make a request for TRADE_SPOT on this instrument.
     * @type {number}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    INSTRUMENT_TRADE_SPOT_FROM_STREAMING_REST_URI_NEXT_REQUEST_TS?: number;
    /**
     * This flags the exchange instrument as in ready to consume TRADE_SPOT via a streaming integration.
     * @type {boolean}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    INSTRUMENT_TRADE_SPOT_IS_READY_FOR_STREAMING_INTEGRATION?: boolean;
    /**
     * This is used to build up the request in some cases, this is where we put the id we use when querying for TRADE_SPOT.
     * @type {string}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    INSTRUMENT_TRADE_SPOT_REST_URI?: string;
    /**
     * The URL we send to the proxy swarm to get TRADE_SPOT for the instrument.
     * @type {string}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    INSTRUMENT_TRADE_SPOT_REST_URL?: string;
    /**
     * This is used to build up the subscription in some cases, this is where we put the id we use when subscribing for TRADE_SPOT on this instrument.
     * @type {string}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    INSTRUMENT_TRADE_SPOT_STREAMING_SUBSCRIPTION?: string;
    /**
     * The timestamp last encountered where the batch of trades from TRADES_SPOT all occured at the same time. This is an issue when making the next request that requires polling by timestamp as a start/from parameter
     * @type {number}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    LAST_CONCURRENT_BATCH_OF_TRADES_SPOT_MS?: number;
    /**
     * This is the last time instrument was seen on instrumentListSourceType BLOB.
     * @type {number}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    LAST_SEEN_ON_BLOB_TS?: number;
    /**
     * This is the last time instrument was seen on instrumentListSourceType FIX.
     * @type {number}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    LAST_SEEN_ON_FIX_TS?: number;
    /**
     * This is the last time instrument was seen on instrumentListSourceType HARDCODED.
     * @type {number}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    LAST_SEEN_ON_HARDCODED_TS?: number;
    /**
     * This is the last time instrument was seen on instrumentListSourceType INDEX_COMPOSITION.
     * @type {number}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    LAST_SEEN_ON_INDEX_COMPOSITION_TS?: number;
    /**
     * This is the last time instrument was seen on instrumentListSourceType NSQ.
     * @type {number}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    LAST_SEEN_ON_NSQ_TS?: number;
    /**
     * This is the last time instrument was seen on instrumentListSourceType POLLING.
     * @type {number}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    LAST_SEEN_ON_POLLING_TS?: number;
    /**
     * This is the last time instrument was seen on instrumentListSourceType STREAMING.
     * @type {number}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    LAST_SEEN_ON_STREAMING_TS?: number;
    /**
     * This is the last TRADE_SPOT that we have seen on the specific source type in internal format.
     * @type {Object}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    LAST_TRADE_SPOT_FROM_BACKFILL?: Object;
    /**
     * This is the last TRADE_SPOT that we have seen on the specific trade source in external format.
     * @type {Object}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    LAST_TRADE_SPOT_FROM_BACKFILL_EXTERNAL?: Object;
    /**
     * This is the last TRADE_SPOT that we have seen on the specific source type in internal format.
     * @type {Object}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    LAST_TRADE_SPOT_FROM_BLOB?: Object;
    /**
     * This is the last TRADE_SPOT that we have seen on the specific trade source in external format.
     * @type {Object}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    LAST_TRADE_SPOT_FROM_BLOB_EXTERNAL?: Object;
    /**
     * This is the last TRADE_SPOT that we have seen on the specific source type in internal format.
     * @type {Object}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    LAST_TRADE_SPOT_FROM_CALCULATED?: Object;
    /**
     * This is the last TRADE_SPOT that we have seen on the specific trade source in external format.
     * @type {Object}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    LAST_TRADE_SPOT_FROM_CALCULATED_EXTERNAL?: Object;
    /**
     * This is the last TRADE_SPOT that we have seen on the specific source type in internal format.
     * @type {Object}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    LAST_TRADE_SPOT_FROM_FIX?: Object;
    /**
     * This is the last TRADE_SPOT that we have seen on the specific trade source in external format.
     * @type {Object}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    LAST_TRADE_SPOT_FROM_FIX_EXTERNAL?: Object;
    /**
     * This is the last TRADE_SPOT that we have seen on the specific source type in internal format.
     * @type {Object}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    LAST_TRADE_SPOT_FROM_GO?: Object;
    /**
     * This is the last TRADE_SPOT that we have seen on the specific trade source in external format.
     * @type {Object}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    LAST_TRADE_SPOT_FROM_GO_EXTERNAL?: Object;
    /**
     * This is the last TRADE_SPOT that we have seen on the specific source type in internal format.
     * @type {Object}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    LAST_TRADE_SPOT_FROM_POLLING?: Object;
    /**
     * This is the last TRADE_SPOT that we have seen on the specific trade source in external format.
     * @type {Object}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    LAST_TRADE_SPOT_FROM_POLLING_EXTERNAL?: Object;
    /**
     * This is the last TRADE_SPOT that we have seen on the specific source type in internal format.
     * @type {Object}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    LAST_TRADE_SPOT_FROM_STREAMING?: Object;
    /**
     * This is the last TRADE_SPOT that we have seen on the specific trade source in external format.
     * @type {Object}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    LAST_TRADE_SPOT_FROM_STREAMING_EXTERNAL?: Object;
    /**
     * The version of metadata, used for version conversions/migrates.
     * @type {number}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    METADATA_VERSION?: number;
    /**
     * This states the status of blob migration for this intrument on this exchange.
     * @type {string}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    PROCESSING_TRADES_FROM_BLOB_STATUS?: string;
    /**
     * This is both the CCSEQ and the total TRADES_SPOT we have processed on this instrument
     * @type {number}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    TOTAL_TRADES_SPOT?: number;
    /**
     * This is any extra helper TRADE_SPOT data that we would need for creating polling requests or subscribing with non standard information and anything that is very specific to one exchange API/Integration and it does not fit any of the other existing fields and is definitly only updated or written in only one service.
     * @type {Object}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    UNSTRUCTURED_TRADE_SPOT_FROM_BACKFILL_INTERNAL_DATA?: Object;
    /**
     * This is any extra helper TRADE_SPOT data that we would need for creating polling requests or subscribing with non standard information and anything that is very specific to one exchange API/Integration and it does not fit any of the other existing fields and is definitly only updated or written in only one service.
     * @type {Object}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    UNSTRUCTURED_TRADE_SPOT_FROM_BLOB_INTERNAL_DATA?: Object;
    /**
     * This is any extra helper TRADE_SPOT data that we would need for creating polling requests or subscribing with non standard information and anything that is very specific to one exchange API/Integration and it does not fit any of the other existing fields and is definitly only updated or written in only one service.
     * @type {Object}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    UNSTRUCTURED_TRADE_SPOT_FROM_CALCULATED_INTERNAL_DATA?: Object;
    /**
     * This is any extra helper TRADE_SPOT data that we would need for creating polling requests or subscribing with non standard information and anything that is very specific to one exchange API/Integration and it does not fit any of the other existing fields and is definitly only updated or written in only one service.
     * @type {Object}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    UNSTRUCTURED_TRADE_SPOT_FROM_FIX_INTERNAL_DATA?: Object;
    /**
     * This is any extra helper TRADE_SPOT data that we would need for creating polling requests or subscribing with non standard information and anything that is very specific to one exchange API/Integration and it does not fit any of the other existing fields and is definitly only updated or written in only one service.
     * @type {Object}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    UNSTRUCTURED_TRADE_SPOT_FROM_GO_INTERNAL_DATA?: Object;
    /**
     * This is any extra helper TRADE_SPOT data that we would need for creating polling requests or subscribing with non standard information and anything that is very specific to one exchange API/Integration and it does not fit any of the other existing fields and is definitly only updated or written in only one service.
     * @type {Object}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    UNSTRUCTURED_TRADE_SPOT_FROM_POLLING_INTERNAL_DATA?: Object;
    /**
     * This is any extra helper TRADE_SPOT data that we would need for creating polling requests or subscribing with non standard information and anything that is very specific to one exchange API/Integration and it does not fit any of the other existing fields and is definitly only updated or written in only one service.
     * @type {Object}
     * @memberof SPOTINSTRUMENTMETADATA
     */
    UNSTRUCTURED_TRADE_SPOT_FROM_STREAMING_INTERNAL_DATA?: Object;
}

/**
 * 
 * @export
 */
export type SPOTINSTRUMENTMETADATARESPONSE = {
    /**
     * 
     * @type {{ [key: string]: SPOTINSTRUMENTMETADATA; }}
     * @memberof SPOTINSTRUMENTMETADATARESPONSE
     */
    Data?: { [key: string]: SPOTINSTRUMENTMETADATA; };
    /**
     * 
     * @type {SPOTINSTRUMENTMARKETDATARESPONSEErr}
     * @memberof SPOTINSTRUMENTMETADATARESPONSE
     */
    Err?: SPOTINSTRUMENTMARKETDATARESPONSEErr;
}

/**
 * 
 * @export
 */
export type SPOTINSTRUMENTTRADE = {
    /**
     * The mapped from asset (base / symbol/ coin). Only available on instruments that have been mapped (e.g. BTC).
     * @type {string}
     * @memberof SPOTINSTRUMENTTRADE
     */
    BASE?: string;
    /**
     * Our internal sequence number for this trade, this is unique per market / exchange and trading pair. Should always be increasing by 1 for each new trade we discover, not in chronological order.
     * @type {number}
     * @memberof SPOTINSTRUMENTTRADE
     */
    CCSEQ?: number;
    /**
     * The trade ID as reported by the market / exchange. If the exchange does not provide a trade ID, this will be the timestamp of the trade + a number from 0 - 999. This preserves uniqueness, assuming there would never be more than 999 trades in any given second.
     * @type {string}
     * @memberof SPOTINSTRUMENTTRADE
     */
    ID?: string;
    /**
     * The unmapped instrument ID as given by the exchange (e.g. BTCUSD, BTC_USD, XBT-ZUSD, BTC-USD).
     * @type {string}
     * @memberof SPOTINSTRUMENTTRADE
     */
    INSTRUMENT?: string;
    /**
     * The mapped instrument ID, as derived from our mapping rules. This takes the form: \"BASE-QUOTE\". Only available on instruments that have been mapped (e.g. BTC-USD).
     * @type {string}
     * @memberof SPOTINSTRUMENTTRADE
     */
    MAPPED_INSTRUMENT?: string;
    /**
     * The market / exchange under consideration (e.g. Coinbase, Kraken, etc.).
     * @type {string}
     * @memberof SPOTINSTRUMENTTRADE
     */
    MARKET?: string;
    /**
     * The price in the to instrument (quote / counter symbol / coin) of the trade. For a BTC-USD trade, this is how much was paid for one BTC in USD. For futures, this will be the price of the contract.
     * @type {number}
     * @memberof SPOTINSTRUMENTTRADE
     */
    PRICE?: number;
    /**
     * The volume of the trade, given in the from instrument (base symbol / coin/ contract). For a spot BTC-USD trade, this is how much BTC was traded at the trade price. For a futures BTCUSDPERP, this is the BTC equivalent for the contracts traded.
     * @type {number}
     * @memberof SPOTINSTRUMENTTRADE
     */
    QUANTITY?: number;
    /**
     * The mapped to asset (quote / counter symbol / coin). Only available on instruments that have been mapped (e.g. USD).
     * @type {string}
     * @memberof SPOTINSTRUMENTTRADE
     */
    QUOTE?: string;
    /**
     * The volume of the trade, given in the to instrument (quote / counter symbol / coin). This is equivalent to QUANTITY * PRICE. E.g. for a BTC-USD trade, this is how much USD was paid in total for the volume of BTC traded. For futures this is the quote currency equivalent for the contracts traded.
     * @type {number}
     * @memberof SPOTINSTRUMENTTRADE
     */
    QUOTE_QUANTITY?: number;
    /**
     * The timestamp in seconds that the trade was received. This varies from the trade taking place on the market by a few millisconds to a few seconds depending on the market / exchange API options / rate limits.
     * @type {number}
     * @memberof SPOTINSTRUMENTTRADE
     */
    RECEIVED_TIMESTAMP?: number;
    /**
     * The nanosecond part of the received timestamp.
     * @type {number}
     * @memberof SPOTINSTRUMENTTRADE
     */
    RECEIVED_TIMESTAMP_NS?: number;
    /**
     * The side of the trade: SELL, BUY or UNKNOWN. If the exchange / api does not provide a side, \"UNKNOWN\" will be returned.
     * @type {string}
     * @memberof SPOTINSTRUMENTTRADE
     */
    SIDE?: string;
    /**
     * The source of the trade update: POLLING, STREAMING, GO, BLOB etc.
     * @type {string}
     * @memberof SPOTINSTRUMENTTRADE
     */
    SOURCE?: string;
    /**
     * The timestamp in seconds as reported by the market / exchange or the received timestamp if the market / exchange does not provide one.
     * @type {number}
     * @memberof SPOTINSTRUMENTTRADE
     */
    TIMESTAMP?: number;
    /**
     * The nanosecond part of the reported timestamp.
     * @type {number}
     * @memberof SPOTINSTRUMENTTRADE
     */
    TIMESTAMP_NS?: number;
    /**
     * The type of the message.
     * @type {string}
     * @memberof SPOTINSTRUMENTTRADE
     */
    TYPE?: string;
}

/**
 * 
 * @export
 */
export type SPOTINSTRUMENTTRADERESPONSE = {
    /**
     * 
     * @type {Array<SPOTINSTRUMENTTRADE>}
     * @memberof SPOTINSTRUMENTTRADERESPONSE
     */
    Data?: Array<SPOTINSTRUMENTTRADE>;
    /**
     * 
     * @type {Object}
     * @memberof SPOTINSTRUMENTTRADERESPONSE
     */
    Err?: Object;
}



/**
 * AssetApi - fetch parameter creator
 * @export
 */
export const AssetApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @throws {RequiredError}
         */
        assetV1DataByAddress(address: string, chainSymbol: string, groups?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'address' is not null or undefined
            if (address === null || address === undefined) {
                throw new RequiredError('address','Required parameter address was null or undefined when calling assetV1DataByAddress.');
            }
            // verify required parameter 'chainSymbol' is not null or undefined
            if (chainSymbol === null || chainSymbol === undefined) {
                throw new RequiredError('chainSymbol','Required parameter chainSymbol was null or undefined when calling assetV1DataByAddress.');
            }
            const localVarPath = `/asset/v1/data/by/address`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (address !== undefined) {
                localVarQueryParameter['address'] = ((address:any):string);
            }

            if (chainSymbol !== undefined) {
                localVarQueryParameter['chain_symbol'] = ((chainSymbol:any):string);
            }

            if (groups !== undefined) {
                localVarQueryParameter['groups'] = ((groups:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        assetV1DataById(assetId: number, groups?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'assetId' is not null or undefined
            if (assetId === null || assetId === undefined) {
                throw new RequiredError('assetId','Required parameter assetId was null or undefined when calling assetV1DataById.');
            }
            const localVarPath = `/asset/v1/data/by/id`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (assetId !== undefined) {
                localVarQueryParameter['asset_id'] = ((assetId:any):string);
            }

            if (groups !== undefined) {
                localVarQueryParameter['groups'] = ((groups:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        assetV1DataBySymbol(assetSymbol: string, groups?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'assetSymbol' is not null or undefined
            if (assetSymbol === null || assetSymbol === undefined) {
                throw new RequiredError('assetSymbol','Required parameter assetSymbol was null or undefined when calling assetV1DataBySymbol.');
            }
            const localVarPath = `/asset/v1/data/by/symbol`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (assetSymbol !== undefined) {
                localVarQueryParameter['asset_symbol'] = ((assetSymbol:any):string);
            }

            if (groups !== undefined) {
                localVarQueryParameter['groups'] = ((groups:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        assetV1TopList(page?: number, pageSize?: number, assetType?: string, sortBy?: 'CREATED_ON' | 'UPDATED_ON' | 'SYMBOL', sortDirection?: 'DESC' | 'ASC', groups?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/asset/v1/top/list`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (page !== undefined) {
                localVarQueryParameter['page'] = ((page:any):string);
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = ((pageSize:any):string);
            }

            if (assetType !== undefined) {
                localVarQueryParameter['asset_type'] = ((assetType:any):string);
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = ((sortBy:any):string);
            }

            if (sortDirection !== undefined) {
                localVarQueryParameter['sort_direction'] = ((sortDirection:any):string);
            }

            if (groups !== undefined) {
                localVarQueryParameter['groups'] = ((groups:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type AssetApiType = { 
    assetV1DataByAddress(address: string, chainSymbol: string, groups?: string, options?: RequestOptions): Promise<GENERICRESPONSE>,

    assetV1DataById(assetId: number, groups?: string, options?: RequestOptions): Promise<GENERICRESPONSE>,

    assetV1DataBySymbol(assetSymbol: string, groups?: string, options?: RequestOptions): Promise<GENERICRESPONSE>,

    assetV1TopList(page?: number, pageSize?: number, assetType?: string, sortBy?: 'CREATED_ON' | 'UPDATED_ON' | 'SYMBOL', sortDirection?: 'DESC' | 'ASC', groups?: string, options?: RequestOptions): Promise<GENERICRESPONSE>,
}

/**
 * AssetApi - factory function to inject configuration 
 * @export
 */
export const AssetApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): AssetApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * 
         * @throws {RequiredError}
         */
        assetV1DataByAddress(address: string, chainSymbol: string, groups?: string, options?: RequestOptions = {}): Promise<GENERICRESPONSE> {
            const localVarFetchArgs = AssetApiFetchParamCreator(configuration).assetV1DataByAddress(address, chainSymbol, groups, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        assetV1DataById(assetId: number, groups?: string, options?: RequestOptions = {}): Promise<GENERICRESPONSE> {
            const localVarFetchArgs = AssetApiFetchParamCreator(configuration).assetV1DataById(assetId, groups, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        assetV1DataBySymbol(assetSymbol: string, groups?: string, options?: RequestOptions = {}): Promise<GENERICRESPONSE> {
            const localVarFetchArgs = AssetApiFetchParamCreator(configuration).assetV1DataBySymbol(assetSymbol, groups, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        assetV1TopList(page?: number, pageSize?: number, assetType?: string, sortBy?: 'CREATED_ON' | 'UPDATED_ON' | 'SYMBOL', sortDirection?: 'DESC' | 'ASC', groups?: string, options?: RequestOptions = {}): Promise<GENERICRESPONSE> {
            const localVarFetchArgs = AssetApiFetchParamCreator(configuration).assetV1TopList(page, pageSize, assetType, sortBy, sortDirection, groups, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * FuturesApi - fetch parameter creator
 * @export
 */
export const FuturesApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @throws {RequiredError}
         */
        futuresV1HistoricalDays(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', options: RequestOptions): FetchArgs {
            // verify required parameter 'market' is not null or undefined
            if (market === null || market === undefined) {
                throw new RequiredError('market','Required parameter market was null or undefined when calling futuresV1HistoricalDays.');
            }
            // verify required parameter 'instrument' is not null or undefined
            if (instrument === null || instrument === undefined) {
                throw new RequiredError('instrument','Required parameter instrument was null or undefined when calling futuresV1HistoricalDays.');
            }
            const localVarPath = `/futures/v1/historical/days`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (market !== undefined) {
                localVarQueryParameter['market'] = ((market:any):string);
            }

            if (instrument !== undefined) {
                localVarQueryParameter['instrument'] = ((instrument:any):string);
            }

            if (groups) {
                localVarQueryParameter['groups'] = groups.join(COLLECTION_FORMATS["csv"]);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (toTs !== undefined) {
                localVarQueryParameter['to_ts'] = ((toTs:any):string);
            }

            if (aggregate !== undefined) {
                localVarQueryParameter['aggregate'] = ((aggregate:any):string);
            }

            if (fill !== undefined) {
                localVarQueryParameter['fill'] = ((fill:any):string);
            }

            if (mappingPriority !== undefined) {
                localVarQueryParameter['mapping_priority'] = ((mappingPriority:any):string);
            }

            if (responseFormat !== undefined) {
                localVarQueryParameter['response_format'] = ((responseFormat:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        futuresV1HistoricalFundingRateDays(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', options: RequestOptions): FetchArgs {
            // verify required parameter 'market' is not null or undefined
            if (market === null || market === undefined) {
                throw new RequiredError('market','Required parameter market was null or undefined when calling futuresV1HistoricalFundingRateDays.');
            }
            // verify required parameter 'instrument' is not null or undefined
            if (instrument === null || instrument === undefined) {
                throw new RequiredError('instrument','Required parameter instrument was null or undefined when calling futuresV1HistoricalFundingRateDays.');
            }
            const localVarPath = `/futures/v1/historical/funding-rate/days`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (market !== undefined) {
                localVarQueryParameter['market'] = ((market:any):string);
            }

            if (instrument !== undefined) {
                localVarQueryParameter['instrument'] = ((instrument:any):string);
            }

            if (groups) {
                localVarQueryParameter['groups'] = groups.join(COLLECTION_FORMATS["csv"]);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (toTs !== undefined) {
                localVarQueryParameter['to_ts'] = ((toTs:any):string);
            }

            if (aggregate !== undefined) {
                localVarQueryParameter['aggregate'] = ((aggregate:any):string);
            }

            if (fill !== undefined) {
                localVarQueryParameter['fill'] = ((fill:any):string);
            }

            if (mappingPriority !== undefined) {
                localVarQueryParameter['mapping_priority'] = ((mappingPriority:any):string);
            }

            if (responseFormat !== undefined) {
                localVarQueryParameter['response_format'] = ((responseFormat:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        futuresV1HistoricalFundingRateHours(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', options: RequestOptions): FetchArgs {
            // verify required parameter 'market' is not null or undefined
            if (market === null || market === undefined) {
                throw new RequiredError('market','Required parameter market was null or undefined when calling futuresV1HistoricalFundingRateHours.');
            }
            // verify required parameter 'instrument' is not null or undefined
            if (instrument === null || instrument === undefined) {
                throw new RequiredError('instrument','Required parameter instrument was null or undefined when calling futuresV1HistoricalFundingRateHours.');
            }
            const localVarPath = `/futures/v1/historical/funding-rate/hours`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (market !== undefined) {
                localVarQueryParameter['market'] = ((market:any):string);
            }

            if (instrument !== undefined) {
                localVarQueryParameter['instrument'] = ((instrument:any):string);
            }

            if (groups) {
                localVarQueryParameter['groups'] = groups.join(COLLECTION_FORMATS["csv"]);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (toTs !== undefined) {
                localVarQueryParameter['to_ts'] = ((toTs:any):string);
            }

            if (aggregate !== undefined) {
                localVarQueryParameter['aggregate'] = ((aggregate:any):string);
            }

            if (fill !== undefined) {
                localVarQueryParameter['fill'] = ((fill:any):string);
            }

            if (mappingPriority !== undefined) {
                localVarQueryParameter['mapping_priority'] = ((mappingPriority:any):string);
            }

            if (responseFormat !== undefined) {
                localVarQueryParameter['response_format'] = ((responseFormat:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        futuresV1HistoricalFundingRateMessages(market: string, instrument: string, afterTs?: number, lastCcseq?: number, limit?: number, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', return404OnEmptyResponse?: boolean, options: RequestOptions): FetchArgs {
            // verify required parameter 'market' is not null or undefined
            if (market === null || market === undefined) {
                throw new RequiredError('market','Required parameter market was null or undefined when calling futuresV1HistoricalFundingRateMessages.');
            }
            // verify required parameter 'instrument' is not null or undefined
            if (instrument === null || instrument === undefined) {
                throw new RequiredError('instrument','Required parameter instrument was null or undefined when calling futuresV1HistoricalFundingRateMessages.');
            }
            const localVarPath = `/futures/v1/historical/funding-rate-messages`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication api_key_header required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["authorization"] = localVarApiKeyValue;
            }

            // authentication api_key_query required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (market !== undefined) {
                localVarQueryParameter['market'] = ((market:any):string);
            }

            if (instrument !== undefined) {
                localVarQueryParameter['instrument'] = ((instrument:any):string);
            }

            if (afterTs !== undefined) {
                localVarQueryParameter['after_ts'] = ((afterTs:any):string);
            }

            if (lastCcseq !== undefined) {
                localVarQueryParameter['last_ccseq'] = ((lastCcseq:any):string);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (mappingPriority !== undefined) {
                localVarQueryParameter['mapping_priority'] = ((mappingPriority:any):string);
            }

            if (responseFormat !== undefined) {
                localVarQueryParameter['response_format'] = ((responseFormat:any):string);
            }

            if (return404OnEmptyResponse !== undefined) {
                localVarQueryParameter['return_404_on_empty_response'] = ((return404OnEmptyResponse:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        futuresV1HistoricalFundingRateMessagesHour(market: string, instrument: string, hourTs?: number, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', return404OnEmptyResponse?: boolean, options: RequestOptions): FetchArgs {
            // verify required parameter 'market' is not null or undefined
            if (market === null || market === undefined) {
                throw new RequiredError('market','Required parameter market was null or undefined when calling futuresV1HistoricalFundingRateMessagesHour.');
            }
            // verify required parameter 'instrument' is not null or undefined
            if (instrument === null || instrument === undefined) {
                throw new RequiredError('instrument','Required parameter instrument was null or undefined when calling futuresV1HistoricalFundingRateMessagesHour.');
            }
            const localVarPath = `/futures/v1/historical/funding-rate-messages/hour`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication api_key_header required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["authorization"] = localVarApiKeyValue;
            }

            // authentication api_key_query required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (market !== undefined) {
                localVarQueryParameter['market'] = ((market:any):string);
            }

            if (instrument !== undefined) {
                localVarQueryParameter['instrument'] = ((instrument:any):string);
            }

            if (hourTs !== undefined) {
                localVarQueryParameter['hour_ts'] = ((hourTs:any):string);
            }

            if (mappingPriority !== undefined) {
                localVarQueryParameter['mapping_priority'] = ((mappingPriority:any):string);
            }

            if (responseFormat !== undefined) {
                localVarQueryParameter['response_format'] = ((responseFormat:any):string);
            }

            if (return404OnEmptyResponse !== undefined) {
                localVarQueryParameter['return_404_on_empty_response'] = ((return404OnEmptyResponse:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        futuresV1HistoricalFundingRateMinutes(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', options: RequestOptions): FetchArgs {
            // verify required parameter 'market' is not null or undefined
            if (market === null || market === undefined) {
                throw new RequiredError('market','Required parameter market was null or undefined when calling futuresV1HistoricalFundingRateMinutes.');
            }
            // verify required parameter 'instrument' is not null or undefined
            if (instrument === null || instrument === undefined) {
                throw new RequiredError('instrument','Required parameter instrument was null or undefined when calling futuresV1HistoricalFundingRateMinutes.');
            }
            const localVarPath = `/futures/v1/historical/funding-rate/minutes`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (market !== undefined) {
                localVarQueryParameter['market'] = ((market:any):string);
            }

            if (instrument !== undefined) {
                localVarQueryParameter['instrument'] = ((instrument:any):string);
            }

            if (groups) {
                localVarQueryParameter['groups'] = groups.join(COLLECTION_FORMATS["csv"]);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (toTs !== undefined) {
                localVarQueryParameter['to_ts'] = ((toTs:any):string);
            }

            if (aggregate !== undefined) {
                localVarQueryParameter['aggregate'] = ((aggregate:any):string);
            }

            if (fill !== undefined) {
                localVarQueryParameter['fill'] = ((fill:any):string);
            }

            if (mappingPriority !== undefined) {
                localVarQueryParameter['mapping_priority'] = ((mappingPriority:any):string);
            }

            if (responseFormat !== undefined) {
                localVarQueryParameter['response_format'] = ((responseFormat:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        futuresV1HistoricalHours(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', options: RequestOptions): FetchArgs {
            // verify required parameter 'market' is not null or undefined
            if (market === null || market === undefined) {
                throw new RequiredError('market','Required parameter market was null or undefined when calling futuresV1HistoricalHours.');
            }
            // verify required parameter 'instrument' is not null or undefined
            if (instrument === null || instrument === undefined) {
                throw new RequiredError('instrument','Required parameter instrument was null or undefined when calling futuresV1HistoricalHours.');
            }
            const localVarPath = `/futures/v1/historical/hours`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (market !== undefined) {
                localVarQueryParameter['market'] = ((market:any):string);
            }

            if (instrument !== undefined) {
                localVarQueryParameter['instrument'] = ((instrument:any):string);
            }

            if (groups) {
                localVarQueryParameter['groups'] = groups.join(COLLECTION_FORMATS["csv"]);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (toTs !== undefined) {
                localVarQueryParameter['to_ts'] = ((toTs:any):string);
            }

            if (aggregate !== undefined) {
                localVarQueryParameter['aggregate'] = ((aggregate:any):string);
            }

            if (fill !== undefined) {
                localVarQueryParameter['fill'] = ((fill:any):string);
            }

            if (mappingPriority !== undefined) {
                localVarQueryParameter['mapping_priority'] = ((mappingPriority:any):string);
            }

            if (responseFormat !== undefined) {
                localVarQueryParameter['response_format'] = ((responseFormat:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        futuresV1HistoricalMinutes(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', options: RequestOptions): FetchArgs {
            // verify required parameter 'market' is not null or undefined
            if (market === null || market === undefined) {
                throw new RequiredError('market','Required parameter market was null or undefined when calling futuresV1HistoricalMinutes.');
            }
            // verify required parameter 'instrument' is not null or undefined
            if (instrument === null || instrument === undefined) {
                throw new RequiredError('instrument','Required parameter instrument was null or undefined when calling futuresV1HistoricalMinutes.');
            }
            const localVarPath = `/futures/v1/historical/minutes`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (market !== undefined) {
                localVarQueryParameter['market'] = ((market:any):string);
            }

            if (instrument !== undefined) {
                localVarQueryParameter['instrument'] = ((instrument:any):string);
            }

            if (groups) {
                localVarQueryParameter['groups'] = groups.join(COLLECTION_FORMATS["csv"]);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (toTs !== undefined) {
                localVarQueryParameter['to_ts'] = ((toTs:any):string);
            }

            if (aggregate !== undefined) {
                localVarQueryParameter['aggregate'] = ((aggregate:any):string);
            }

            if (fill !== undefined) {
                localVarQueryParameter['fill'] = ((fill:any):string);
            }

            if (mappingPriority !== undefined) {
                localVarQueryParameter['mapping_priority'] = ((mappingPriority:any):string);
            }

            if (responseFormat !== undefined) {
                localVarQueryParameter['response_format'] = ((responseFormat:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        futuresV1HistoricalOpenInterestDays(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', options: RequestOptions): FetchArgs {
            // verify required parameter 'market' is not null or undefined
            if (market === null || market === undefined) {
                throw new RequiredError('market','Required parameter market was null or undefined when calling futuresV1HistoricalOpenInterestDays.');
            }
            // verify required parameter 'instrument' is not null or undefined
            if (instrument === null || instrument === undefined) {
                throw new RequiredError('instrument','Required parameter instrument was null or undefined when calling futuresV1HistoricalOpenInterestDays.');
            }
            const localVarPath = `/futures/v1/historical/open-interest/days`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (market !== undefined) {
                localVarQueryParameter['market'] = ((market:any):string);
            }

            if (instrument !== undefined) {
                localVarQueryParameter['instrument'] = ((instrument:any):string);
            }

            if (groups) {
                localVarQueryParameter['groups'] = groups.join(COLLECTION_FORMATS["csv"]);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (toTs !== undefined) {
                localVarQueryParameter['to_ts'] = ((toTs:any):string);
            }

            if (aggregate !== undefined) {
                localVarQueryParameter['aggregate'] = ((aggregate:any):string);
            }

            if (fill !== undefined) {
                localVarQueryParameter['fill'] = ((fill:any):string);
            }

            if (mappingPriority !== undefined) {
                localVarQueryParameter['mapping_priority'] = ((mappingPriority:any):string);
            }

            if (responseFormat !== undefined) {
                localVarQueryParameter['response_format'] = ((responseFormat:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        futuresV1HistoricalOpenInterestHours(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', options: RequestOptions): FetchArgs {
            // verify required parameter 'market' is not null or undefined
            if (market === null || market === undefined) {
                throw new RequiredError('market','Required parameter market was null or undefined when calling futuresV1HistoricalOpenInterestHours.');
            }
            // verify required parameter 'instrument' is not null or undefined
            if (instrument === null || instrument === undefined) {
                throw new RequiredError('instrument','Required parameter instrument was null or undefined when calling futuresV1HistoricalOpenInterestHours.');
            }
            const localVarPath = `/futures/v1/historical/open-interest/hours`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (market !== undefined) {
                localVarQueryParameter['market'] = ((market:any):string);
            }

            if (instrument !== undefined) {
                localVarQueryParameter['instrument'] = ((instrument:any):string);
            }

            if (groups) {
                localVarQueryParameter['groups'] = groups.join(COLLECTION_FORMATS["csv"]);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (toTs !== undefined) {
                localVarQueryParameter['to_ts'] = ((toTs:any):string);
            }

            if (aggregate !== undefined) {
                localVarQueryParameter['aggregate'] = ((aggregate:any):string);
            }

            if (fill !== undefined) {
                localVarQueryParameter['fill'] = ((fill:any):string);
            }

            if (mappingPriority !== undefined) {
                localVarQueryParameter['mapping_priority'] = ((mappingPriority:any):string);
            }

            if (responseFormat !== undefined) {
                localVarQueryParameter['response_format'] = ((responseFormat:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        futuresV1HistoricalOpenInterestMessages(market: string, instrument: string, afterTs?: number, lastCcseq?: number, limit?: number, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', return404OnEmptyResponse?: boolean, options: RequestOptions): FetchArgs {
            // verify required parameter 'market' is not null or undefined
            if (market === null || market === undefined) {
                throw new RequiredError('market','Required parameter market was null or undefined when calling futuresV1HistoricalOpenInterestMessages.');
            }
            // verify required parameter 'instrument' is not null or undefined
            if (instrument === null || instrument === undefined) {
                throw new RequiredError('instrument','Required parameter instrument was null or undefined when calling futuresV1HistoricalOpenInterestMessages.');
            }
            const localVarPath = `/futures/v1/historical/open-interest-messages`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication api_key_header required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["authorization"] = localVarApiKeyValue;
            }

            // authentication api_key_query required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (market !== undefined) {
                localVarQueryParameter['market'] = ((market:any):string);
            }

            if (instrument !== undefined) {
                localVarQueryParameter['instrument'] = ((instrument:any):string);
            }

            if (afterTs !== undefined) {
                localVarQueryParameter['after_ts'] = ((afterTs:any):string);
            }

            if (lastCcseq !== undefined) {
                localVarQueryParameter['last_ccseq'] = ((lastCcseq:any):string);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (mappingPriority !== undefined) {
                localVarQueryParameter['mapping_priority'] = ((mappingPriority:any):string);
            }

            if (responseFormat !== undefined) {
                localVarQueryParameter['response_format'] = ((responseFormat:any):string);
            }

            if (return404OnEmptyResponse !== undefined) {
                localVarQueryParameter['return_404_on_empty_response'] = ((return404OnEmptyResponse:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        futuresV1HistoricalOpenInterestMessagesHour(market: string, instrument: string, hourTs?: number, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', return404OnEmptyResponse?: boolean, options: RequestOptions): FetchArgs {
            // verify required parameter 'market' is not null or undefined
            if (market === null || market === undefined) {
                throw new RequiredError('market','Required parameter market was null or undefined when calling futuresV1HistoricalOpenInterestMessagesHour.');
            }
            // verify required parameter 'instrument' is not null or undefined
            if (instrument === null || instrument === undefined) {
                throw new RequiredError('instrument','Required parameter instrument was null or undefined when calling futuresV1HistoricalOpenInterestMessagesHour.');
            }
            const localVarPath = `/futures/v1/historical/open-interest-messages/hour`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication api_key_header required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["authorization"] = localVarApiKeyValue;
            }

            // authentication api_key_query required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (market !== undefined) {
                localVarQueryParameter['market'] = ((market:any):string);
            }

            if (instrument !== undefined) {
                localVarQueryParameter['instrument'] = ((instrument:any):string);
            }

            if (hourTs !== undefined) {
                localVarQueryParameter['hour_ts'] = ((hourTs:any):string);
            }

            if (mappingPriority !== undefined) {
                localVarQueryParameter['mapping_priority'] = ((mappingPriority:any):string);
            }

            if (responseFormat !== undefined) {
                localVarQueryParameter['response_format'] = ((responseFormat:any):string);
            }

            if (return404OnEmptyResponse !== undefined) {
                localVarQueryParameter['return_404_on_empty_response'] = ((return404OnEmptyResponse:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        futuresV1HistoricalOpenInterestMinutes(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', options: RequestOptions): FetchArgs {
            // verify required parameter 'market' is not null or undefined
            if (market === null || market === undefined) {
                throw new RequiredError('market','Required parameter market was null or undefined when calling futuresV1HistoricalOpenInterestMinutes.');
            }
            // verify required parameter 'instrument' is not null or undefined
            if (instrument === null || instrument === undefined) {
                throw new RequiredError('instrument','Required parameter instrument was null or undefined when calling futuresV1HistoricalOpenInterestMinutes.');
            }
            const localVarPath = `/futures/v1/historical/open-interest/minutes`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (market !== undefined) {
                localVarQueryParameter['market'] = ((market:any):string);
            }

            if (instrument !== undefined) {
                localVarQueryParameter['instrument'] = ((instrument:any):string);
            }

            if (groups) {
                localVarQueryParameter['groups'] = groups.join(COLLECTION_FORMATS["csv"]);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (toTs !== undefined) {
                localVarQueryParameter['to_ts'] = ((toTs:any):string);
            }

            if (aggregate !== undefined) {
                localVarQueryParameter['aggregate'] = ((aggregate:any):string);
            }

            if (fill !== undefined) {
                localVarQueryParameter['fill'] = ((fill:any):string);
            }

            if (mappingPriority !== undefined) {
                localVarQueryParameter['mapping_priority'] = ((mappingPriority:any):string);
            }

            if (responseFormat !== undefined) {
                localVarQueryParameter['response_format'] = ((responseFormat:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        futuresV1HistoricalTrades(market: string, instrument: string, afterTs?: number, lastCcseq?: number, limit?: number, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', return404OnEmptyResponse?: boolean, options: RequestOptions): FetchArgs {
            // verify required parameter 'market' is not null or undefined
            if (market === null || market === undefined) {
                throw new RequiredError('market','Required parameter market was null or undefined when calling futuresV1HistoricalTrades.');
            }
            // verify required parameter 'instrument' is not null or undefined
            if (instrument === null || instrument === undefined) {
                throw new RequiredError('instrument','Required parameter instrument was null or undefined when calling futuresV1HistoricalTrades.');
            }
            const localVarPath = `/futures/v1/historical/trades`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication api_key_header required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["authorization"] = localVarApiKeyValue;
            }

            // authentication api_key_query required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (market !== undefined) {
                localVarQueryParameter['market'] = ((market:any):string);
            }

            if (instrument !== undefined) {
                localVarQueryParameter['instrument'] = ((instrument:any):string);
            }

            if (afterTs !== undefined) {
                localVarQueryParameter['after_ts'] = ((afterTs:any):string);
            }

            if (lastCcseq !== undefined) {
                localVarQueryParameter['last_ccseq'] = ((lastCcseq:any):string);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (mappingPriority !== undefined) {
                localVarQueryParameter['mapping_priority'] = ((mappingPriority:any):string);
            }

            if (responseFormat !== undefined) {
                localVarQueryParameter['response_format'] = ((responseFormat:any):string);
            }

            if (return404OnEmptyResponse !== undefined) {
                localVarQueryParameter['return_404_on_empty_response'] = ((return404OnEmptyResponse:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        futuresV1HistoricalTradesHour(market: string, instrument: string, hourTs?: number, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', return404OnEmptyResponse?: boolean, options: RequestOptions): FetchArgs {
            // verify required parameter 'market' is not null or undefined
            if (market === null || market === undefined) {
                throw new RequiredError('market','Required parameter market was null or undefined when calling futuresV1HistoricalTradesHour.');
            }
            // verify required parameter 'instrument' is not null or undefined
            if (instrument === null || instrument === undefined) {
                throw new RequiredError('instrument','Required parameter instrument was null or undefined when calling futuresV1HistoricalTradesHour.');
            }
            const localVarPath = `/futures/v1/historical/trades/hour`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication api_key_header required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["authorization"] = localVarApiKeyValue;
            }

            // authentication api_key_query required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (market !== undefined) {
                localVarQueryParameter['market'] = ((market:any):string);
            }

            if (instrument !== undefined) {
                localVarQueryParameter['instrument'] = ((instrument:any):string);
            }

            if (hourTs !== undefined) {
                localVarQueryParameter['hour_ts'] = ((hourTs:any):string);
            }

            if (mappingPriority !== undefined) {
                localVarQueryParameter['mapping_priority'] = ((mappingPriority:any):string);
            }

            if (responseFormat !== undefined) {
                localVarQueryParameter['response_format'] = ((responseFormat:any):string);
            }

            if (return404OnEmptyResponse !== undefined) {
                localVarQueryParameter['return_404_on_empty_response'] = ((return404OnEmptyResponse:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        futuresV1LatestFundingRateTick(market: string, instruments: Array<string>, groups?: Array<string>, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', options: RequestOptions): FetchArgs {
            // verify required parameter 'market' is not null or undefined
            if (market === null || market === undefined) {
                throw new RequiredError('market','Required parameter market was null or undefined when calling futuresV1LatestFundingRateTick.');
            }
            // verify required parameter 'instruments' is not null or undefined
            if (instruments === null || instruments === undefined) {
                throw new RequiredError('instruments','Required parameter instruments was null or undefined when calling futuresV1LatestFundingRateTick.');
            }
            const localVarPath = `/futures/v1/latest/funding-rate/tick`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (market !== undefined) {
                localVarQueryParameter['market'] = ((market:any):string);
            }

            if (instruments) {
                localVarQueryParameter['instruments'] = instruments.join(COLLECTION_FORMATS["csv"]);
            }

            if (groups) {
                localVarQueryParameter['groups'] = groups.join(COLLECTION_FORMATS["csv"]);
            }

            if (mappingPriority !== undefined) {
                localVarQueryParameter['mapping_priority'] = ((mappingPriority:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        futuresV1LatestInstrumentMetadata(market: string, instruments: Array<string>, groups?: Array<string>, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', options: RequestOptions): FetchArgs {
            // verify required parameter 'market' is not null or undefined
            if (market === null || market === undefined) {
                throw new RequiredError('market','Required parameter market was null or undefined when calling futuresV1LatestInstrumentMetadata.');
            }
            // verify required parameter 'instruments' is not null or undefined
            if (instruments === null || instruments === undefined) {
                throw new RequiredError('instruments','Required parameter instruments was null or undefined when calling futuresV1LatestInstrumentMetadata.');
            }
            const localVarPath = `/futures/v1/latest/instrument/metadata`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (market !== undefined) {
                localVarQueryParameter['market'] = ((market:any):string);
            }

            if (instruments) {
                localVarQueryParameter['instruments'] = instruments.join(COLLECTION_FORMATS["csv"]);
            }

            if (groups) {
                localVarQueryParameter['groups'] = groups.join(COLLECTION_FORMATS["csv"]);
            }

            if (mappingPriority !== undefined) {
                localVarQueryParameter['mapping_priority'] = ((mappingPriority:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        futuresV1LatestOpenInterestTick(market: string, instruments: Array<string>, groups?: Array<string>, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', options: RequestOptions): FetchArgs {
            // verify required parameter 'market' is not null or undefined
            if (market === null || market === undefined) {
                throw new RequiredError('market','Required parameter market was null or undefined when calling futuresV1LatestOpenInterestTick.');
            }
            // verify required parameter 'instruments' is not null or undefined
            if (instruments === null || instruments === undefined) {
                throw new RequiredError('instruments','Required parameter instruments was null or undefined when calling futuresV1LatestOpenInterestTick.');
            }
            const localVarPath = `/futures/v1/latest/open-interest/tick`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (market !== undefined) {
                localVarQueryParameter['market'] = ((market:any):string);
            }

            if (instruments) {
                localVarQueryParameter['instruments'] = instruments.join(COLLECTION_FORMATS["csv"]);
            }

            if (groups) {
                localVarQueryParameter['groups'] = groups.join(COLLECTION_FORMATS["csv"]);
            }

            if (mappingPriority !== undefined) {
                localVarQueryParameter['mapping_priority'] = ((mappingPriority:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        futuresV1LatestTick(market: string, instruments: Array<string>, groups?: Array<string>, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', options: RequestOptions): FetchArgs {
            // verify required parameter 'market' is not null or undefined
            if (market === null || market === undefined) {
                throw new RequiredError('market','Required parameter market was null or undefined when calling futuresV1LatestTick.');
            }
            // verify required parameter 'instruments' is not null or undefined
            if (instruments === null || instruments === undefined) {
                throw new RequiredError('instruments','Required parameter instruments was null or undefined when calling futuresV1LatestTick.');
            }
            const localVarPath = `/futures/v1/latest/tick`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (market !== undefined) {
                localVarQueryParameter['market'] = ((market:any):string);
            }

            if (instruments) {
                localVarQueryParameter['instruments'] = instruments.join(COLLECTION_FORMATS["csv"]);
            }

            if (groups) {
                localVarQueryParameter['groups'] = groups.join(COLLECTION_FORMATS["csv"]);
            }

            if (mappingPriority !== undefined) {
                localVarQueryParameter['mapping_priority'] = ((mappingPriority:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        futuresV1Markets(market?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/futures/v1/markets`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (market !== undefined) {
                localVarQueryParameter['market'] = ((market:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        futuresV1MarketsInstruments(market?: string, instrument?: string, instrumentStatus?: Array<'ACTIVE' | 'IGNORED' | 'RETIRED' | 'EXPIRED'>, options: RequestOptions): FetchArgs {
            const localVarPath = `/futures/v1/markets/instruments`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (market !== undefined) {
                localVarQueryParameter['market'] = ((market:any):string);
            }

            if (instrument !== undefined) {
                localVarQueryParameter['instrument'] = ((instrument:any):string);
            }

            if (instrumentStatus) {
                localVarQueryParameter['instrument_status'] = instrumentStatus.join(COLLECTION_FORMATS["csv"]);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        futuresV1MarketsInstrumentsUnmapped(market?: string, instrument?: string, instrumentStatus?: Array<'ACTIVE' | 'IGNORED' | 'RETIRED' | 'EXPIRED'>, options: RequestOptions): FetchArgs {
            const localVarPath = `/futures/v1/markets/instruments/unmapped`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (market !== undefined) {
                localVarQueryParameter['market'] = ((market:any):string);
            }

            if (instrument !== undefined) {
                localVarQueryParameter['instrument'] = ((instrument:any):string);
            }

            if (instrumentStatus) {
                localVarQueryParameter['instrument_status'] = instrumentStatus.join(COLLECTION_FORMATS["csv"]);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        indexV1HistoricalDays(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', options: RequestOptions): FetchArgs {
            // verify required parameter 'market' is not null or undefined
            if (market === null || market === undefined) {
                throw new RequiredError('market','Required parameter market was null or undefined when calling indexV1HistoricalDays.');
            }
            // verify required parameter 'instrument' is not null or undefined
            if (instrument === null || instrument === undefined) {
                throw new RequiredError('instrument','Required parameter instrument was null or undefined when calling indexV1HistoricalDays.');
            }
            const localVarPath = `/index/v1/historical/days`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (market !== undefined) {
                localVarQueryParameter['market'] = ((market:any):string);
            }

            if (instrument !== undefined) {
                localVarQueryParameter['instrument'] = ((instrument:any):string);
            }

            if (groups) {
                localVarQueryParameter['groups'] = groups.join(COLLECTION_FORMATS["csv"]);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (toTs !== undefined) {
                localVarQueryParameter['to_ts'] = ((toTs:any):string);
            }

            if (aggregate !== undefined) {
                localVarQueryParameter['aggregate'] = ((aggregate:any):string);
            }

            if (fill !== undefined) {
                localVarQueryParameter['fill'] = ((fill:any):string);
            }

            if (mappingPriority !== undefined) {
                localVarQueryParameter['mapping_priority'] = ((mappingPriority:any):string);
            }

            if (responseFormat !== undefined) {
                localVarQueryParameter['response_format'] = ((responseFormat:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        indexV1HistoricalHours(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', options: RequestOptions): FetchArgs {
            // verify required parameter 'market' is not null or undefined
            if (market === null || market === undefined) {
                throw new RequiredError('market','Required parameter market was null or undefined when calling indexV1HistoricalHours.');
            }
            // verify required parameter 'instrument' is not null or undefined
            if (instrument === null || instrument === undefined) {
                throw new RequiredError('instrument','Required parameter instrument was null or undefined when calling indexV1HistoricalHours.');
            }
            const localVarPath = `/index/v1/historical/hours`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (market !== undefined) {
                localVarQueryParameter['market'] = ((market:any):string);
            }

            if (instrument !== undefined) {
                localVarQueryParameter['instrument'] = ((instrument:any):string);
            }

            if (groups) {
                localVarQueryParameter['groups'] = groups.join(COLLECTION_FORMATS["csv"]);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (toTs !== undefined) {
                localVarQueryParameter['to_ts'] = ((toTs:any):string);
            }

            if (aggregate !== undefined) {
                localVarQueryParameter['aggregate'] = ((aggregate:any):string);
            }

            if (fill !== undefined) {
                localVarQueryParameter['fill'] = ((fill:any):string);
            }

            if (mappingPriority !== undefined) {
                localVarQueryParameter['mapping_priority'] = ((mappingPriority:any):string);
            }

            if (responseFormat !== undefined) {
                localVarQueryParameter['response_format'] = ((responseFormat:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        indexV1HistoricalMessages(market: string, instrument: string, afterTs?: number, lastCcseq?: number, limit?: number, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', return404OnEmptyResponse?: boolean, options: RequestOptions): FetchArgs {
            // verify required parameter 'market' is not null or undefined
            if (market === null || market === undefined) {
                throw new RequiredError('market','Required parameter market was null or undefined when calling indexV1HistoricalMessages.');
            }
            // verify required parameter 'instrument' is not null or undefined
            if (instrument === null || instrument === undefined) {
                throw new RequiredError('instrument','Required parameter instrument was null or undefined when calling indexV1HistoricalMessages.');
            }
            const localVarPath = `/index/v1/historical/messages`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication api_key_header required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["authorization"] = localVarApiKeyValue;
            }

            // authentication api_key_query required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (market !== undefined) {
                localVarQueryParameter['market'] = ((market:any):string);
            }

            if (instrument !== undefined) {
                localVarQueryParameter['instrument'] = ((instrument:any):string);
            }

            if (afterTs !== undefined) {
                localVarQueryParameter['after_ts'] = ((afterTs:any):string);
            }

            if (lastCcseq !== undefined) {
                localVarQueryParameter['last_ccseq'] = ((lastCcseq:any):string);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (mappingPriority !== undefined) {
                localVarQueryParameter['mapping_priority'] = ((mappingPriority:any):string);
            }

            if (responseFormat !== undefined) {
                localVarQueryParameter['response_format'] = ((responseFormat:any):string);
            }

            if (return404OnEmptyResponse !== undefined) {
                localVarQueryParameter['return_404_on_empty_response'] = ((return404OnEmptyResponse:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        indexV1HistoricalMessagesHour(market: string, instrument: string, hourTs?: number, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', return404OnEmptyResponse?: boolean, options: RequestOptions): FetchArgs {
            // verify required parameter 'market' is not null or undefined
            if (market === null || market === undefined) {
                throw new RequiredError('market','Required parameter market was null or undefined when calling indexV1HistoricalMessagesHour.');
            }
            // verify required parameter 'instrument' is not null or undefined
            if (instrument === null || instrument === undefined) {
                throw new RequiredError('instrument','Required parameter instrument was null or undefined when calling indexV1HistoricalMessagesHour.');
            }
            const localVarPath = `/index/v1/historical/messages/hour`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication api_key_header required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["authorization"] = localVarApiKeyValue;
            }

            // authentication api_key_query required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (market !== undefined) {
                localVarQueryParameter['market'] = ((market:any):string);
            }

            if (instrument !== undefined) {
                localVarQueryParameter['instrument'] = ((instrument:any):string);
            }

            if (hourTs !== undefined) {
                localVarQueryParameter['hour_ts'] = ((hourTs:any):string);
            }

            if (mappingPriority !== undefined) {
                localVarQueryParameter['mapping_priority'] = ((mappingPriority:any):string);
            }

            if (responseFormat !== undefined) {
                localVarQueryParameter['response_format'] = ((responseFormat:any):string);
            }

            if (return404OnEmptyResponse !== undefined) {
                localVarQueryParameter['return_404_on_empty_response'] = ((return404OnEmptyResponse:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        indexV1HistoricalMinutes(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', options: RequestOptions): FetchArgs {
            // verify required parameter 'market' is not null or undefined
            if (market === null || market === undefined) {
                throw new RequiredError('market','Required parameter market was null or undefined when calling indexV1HistoricalMinutes.');
            }
            // verify required parameter 'instrument' is not null or undefined
            if (instrument === null || instrument === undefined) {
                throw new RequiredError('instrument','Required parameter instrument was null or undefined when calling indexV1HistoricalMinutes.');
            }
            const localVarPath = `/index/v1/historical/minutes`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (market !== undefined) {
                localVarQueryParameter['market'] = ((market:any):string);
            }

            if (instrument !== undefined) {
                localVarQueryParameter['instrument'] = ((instrument:any):string);
            }

            if (groups) {
                localVarQueryParameter['groups'] = groups.join(COLLECTION_FORMATS["csv"]);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (toTs !== undefined) {
                localVarQueryParameter['to_ts'] = ((toTs:any):string);
            }

            if (aggregate !== undefined) {
                localVarQueryParameter['aggregate'] = ((aggregate:any):string);
            }

            if (fill !== undefined) {
                localVarQueryParameter['fill'] = ((fill:any):string);
            }

            if (mappingPriority !== undefined) {
                localVarQueryParameter['mapping_priority'] = ((mappingPriority:any):string);
            }

            if (responseFormat !== undefined) {
                localVarQueryParameter['response_format'] = ((responseFormat:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        indexV1LatestInstrumentMetadata(market: string, instruments: Array<string>, groups?: Array<string>, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', options: RequestOptions): FetchArgs {
            // verify required parameter 'market' is not null or undefined
            if (market === null || market === undefined) {
                throw new RequiredError('market','Required parameter market was null or undefined when calling indexV1LatestInstrumentMetadata.');
            }
            // verify required parameter 'instruments' is not null or undefined
            if (instruments === null || instruments === undefined) {
                throw new RequiredError('instruments','Required parameter instruments was null or undefined when calling indexV1LatestInstrumentMetadata.');
            }
            const localVarPath = `/index/v1/latest/instrument/metadata`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (market !== undefined) {
                localVarQueryParameter['market'] = ((market:any):string);
            }

            if (instruments) {
                localVarQueryParameter['instruments'] = instruments.join(COLLECTION_FORMATS["csv"]);
            }

            if (groups) {
                localVarQueryParameter['groups'] = groups.join(COLLECTION_FORMATS["csv"]);
            }

            if (mappingPriority !== undefined) {
                localVarQueryParameter['mapping_priority'] = ((mappingPriority:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        indexV1LatestTick(market: string, instruments: Array<string>, groups?: Array<string>, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', options: RequestOptions): FetchArgs {
            // verify required parameter 'market' is not null or undefined
            if (market === null || market === undefined) {
                throw new RequiredError('market','Required parameter market was null or undefined when calling indexV1LatestTick.');
            }
            // verify required parameter 'instruments' is not null or undefined
            if (instruments === null || instruments === undefined) {
                throw new RequiredError('instruments','Required parameter instruments was null or undefined when calling indexV1LatestTick.');
            }
            const localVarPath = `/index/v1/latest/tick`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (market !== undefined) {
                localVarQueryParameter['market'] = ((market:any):string);
            }

            if (instruments) {
                localVarQueryParameter['instruments'] = instruments.join(COLLECTION_FORMATS["csv"]);
            }

            if (groups) {
                localVarQueryParameter['groups'] = groups.join(COLLECTION_FORMATS["csv"]);
            }

            if (mappingPriority !== undefined) {
                localVarQueryParameter['mapping_priority'] = ((mappingPriority:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        indexV1Markets(market?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/index/v1/markets`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (market !== undefined) {
                localVarQueryParameter['market'] = ((market:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        indexV1MarketsInstruments(market?: string, instrument?: string, instrumentStatus?: Array<'ACTIVE' | 'IGNORED' | 'RETIRED' | 'EXPIRED'>, options: RequestOptions): FetchArgs {
            const localVarPath = `/index/v1/markets/instruments`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (market !== undefined) {
                localVarQueryParameter['market'] = ((market:any):string);
            }

            if (instrument !== undefined) {
                localVarQueryParameter['instrument'] = ((instrument:any):string);
            }

            if (instrumentStatus) {
                localVarQueryParameter['instrument_status'] = instrumentStatus.join(COLLECTION_FORMATS["csv"]);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        indexV1MarketsInstrumentsUnmapped(market?: string, instrument?: string, instrumentStatus?: Array<'ACTIVE' | 'IGNORED' | 'RETIRED' | 'EXPIRED'>, options: RequestOptions): FetchArgs {
            const localVarPath = `/index/v1/markets/instruments/unmapped`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (market !== undefined) {
                localVarQueryParameter['market'] = ((market:any):string);
            }

            if (instrument !== undefined) {
                localVarQueryParameter['instrument'] = ((instrument:any):string);
            }

            if (instrumentStatus) {
                localVarQueryParameter['instrument_status'] = instrumentStatus.join(COLLECTION_FORMATS["csv"]);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type FuturesApiType = { 
    futuresV1HistoricalDays(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', options?: RequestOptions): Promise<GENERICRESPONSE>,

    futuresV1HistoricalFundingRateDays(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', options?: RequestOptions): Promise<GENERICRESPONSE>,

    futuresV1HistoricalFundingRateHours(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', options?: RequestOptions): Promise<GENERICRESPONSE>,

    futuresV1HistoricalFundingRateMessages(market: string, instrument: string, afterTs?: number, lastCcseq?: number, limit?: number, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', return404OnEmptyResponse?: boolean, options?: RequestOptions): Promise<GENERICRESPONSE>,

    futuresV1HistoricalFundingRateMessagesHour(market: string, instrument: string, hourTs?: number, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', return404OnEmptyResponse?: boolean, options?: RequestOptions): Promise<GENERICRESPONSE>,

    futuresV1HistoricalFundingRateMinutes(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', options?: RequestOptions): Promise<GENERICRESPONSE>,

    futuresV1HistoricalHours(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', options?: RequestOptions): Promise<GENERICRESPONSE>,

    futuresV1HistoricalMinutes(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', options?: RequestOptions): Promise<GENERICRESPONSE>,

    futuresV1HistoricalOpenInterestDays(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', options?: RequestOptions): Promise<GENERICRESPONSE>,

    futuresV1HistoricalOpenInterestHours(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', options?: RequestOptions): Promise<GENERICRESPONSE>,

    futuresV1HistoricalOpenInterestMessages(market: string, instrument: string, afterTs?: number, lastCcseq?: number, limit?: number, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', return404OnEmptyResponse?: boolean, options?: RequestOptions): Promise<GENERICRESPONSE>,

    futuresV1HistoricalOpenInterestMessagesHour(market: string, instrument: string, hourTs?: number, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', return404OnEmptyResponse?: boolean, options?: RequestOptions): Promise<GENERICRESPONSE>,

    futuresV1HistoricalOpenInterestMinutes(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', options?: RequestOptions): Promise<GENERICRESPONSE>,

    futuresV1HistoricalTrades(market: string, instrument: string, afterTs?: number, lastCcseq?: number, limit?: number, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', return404OnEmptyResponse?: boolean, options?: RequestOptions): Promise<GENERICRESPONSE>,

    futuresV1HistoricalTradesHour(market: string, instrument: string, hourTs?: number, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', return404OnEmptyResponse?: boolean, options?: RequestOptions): Promise<GENERICRESPONSE>,

    futuresV1LatestFundingRateTick(market: string, instruments: Array<string>, groups?: Array<string>, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', options?: RequestOptions): Promise<GENERICRESPONSE>,

    futuresV1LatestInstrumentMetadata(market: string, instruments: Array<string>, groups?: Array<string>, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', options?: RequestOptions): Promise<GENERICRESPONSE>,

    futuresV1LatestOpenInterestTick(market: string, instruments: Array<string>, groups?: Array<string>, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', options?: RequestOptions): Promise<GENERICRESPONSE>,

    futuresV1LatestTick(market: string, instruments: Array<string>, groups?: Array<string>, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', options?: RequestOptions): Promise<GENERICRESPONSE>,

    futuresV1Markets(market?: string, options?: RequestOptions): Promise<GENERICRESPONSE>,

    futuresV1MarketsInstruments(market?: string, instrument?: string, instrumentStatus?: Array<'ACTIVE' | 'IGNORED' | 'RETIRED' | 'EXPIRED'>, options?: RequestOptions): Promise<GENERICRESPONSE>,

    futuresV1MarketsInstrumentsUnmapped(market?: string, instrument?: string, instrumentStatus?: Array<'ACTIVE' | 'IGNORED' | 'RETIRED' | 'EXPIRED'>, options?: RequestOptions): Promise<GENERICRESPONSE>,

    indexV1HistoricalDays(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', options?: RequestOptions): Promise<GENERICRESPONSE>,

    indexV1HistoricalHours(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', options?: RequestOptions): Promise<GENERICRESPONSE>,

    indexV1HistoricalMessages(market: string, instrument: string, afterTs?: number, lastCcseq?: number, limit?: number, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', return404OnEmptyResponse?: boolean, options?: RequestOptions): Promise<GENERICRESPONSE>,

    indexV1HistoricalMessagesHour(market: string, instrument: string, hourTs?: number, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', return404OnEmptyResponse?: boolean, options?: RequestOptions): Promise<GENERICRESPONSE>,

    indexV1HistoricalMinutes(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', options?: RequestOptions): Promise<GENERICRESPONSE>,

    indexV1LatestInstrumentMetadata(market: string, instruments: Array<string>, groups?: Array<string>, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', options?: RequestOptions): Promise<GENERICRESPONSE>,

    indexV1LatestTick(market: string, instruments: Array<string>, groups?: Array<string>, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', options?: RequestOptions): Promise<GENERICRESPONSE>,

    indexV1Markets(market?: string, options?: RequestOptions): Promise<GENERICRESPONSE>,

    indexV1MarketsInstruments(market?: string, instrument?: string, instrumentStatus?: Array<'ACTIVE' | 'IGNORED' | 'RETIRED' | 'EXPIRED'>, options?: RequestOptions): Promise<GENERICRESPONSE>,

    indexV1MarketsInstrumentsUnmapped(market?: string, instrument?: string, instrumentStatus?: Array<'ACTIVE' | 'IGNORED' | 'RETIRED' | 'EXPIRED'>, options?: RequestOptions): Promise<GENERICRESPONSE>,
}

/**
 * FuturesApi - factory function to inject configuration 
 * @export
 */
export const FuturesApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): FuturesApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * 
         * @throws {RequiredError}
         */
        futuresV1HistoricalDays(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', options?: RequestOptions = {}): Promise<GENERICRESPONSE> {
            const localVarFetchArgs = FuturesApiFetchParamCreator(configuration).futuresV1HistoricalDays(market, instrument, groups, limit, toTs, aggregate, fill, mappingPriority, responseFormat, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        futuresV1HistoricalFundingRateDays(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', options?: RequestOptions = {}): Promise<GENERICRESPONSE> {
            const localVarFetchArgs = FuturesApiFetchParamCreator(configuration).futuresV1HistoricalFundingRateDays(market, instrument, groups, limit, toTs, aggregate, fill, mappingPriority, responseFormat, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        futuresV1HistoricalFundingRateHours(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', options?: RequestOptions = {}): Promise<GENERICRESPONSE> {
            const localVarFetchArgs = FuturesApiFetchParamCreator(configuration).futuresV1HistoricalFundingRateHours(market, instrument, groups, limit, toTs, aggregate, fill, mappingPriority, responseFormat, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        futuresV1HistoricalFundingRateMessages(market: string, instrument: string, afterTs?: number, lastCcseq?: number, limit?: number, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', return404OnEmptyResponse?: boolean, options?: RequestOptions = {}): Promise<GENERICRESPONSE> {
            const localVarFetchArgs = FuturesApiFetchParamCreator(configuration).futuresV1HistoricalFundingRateMessages(market, instrument, afterTs, lastCcseq, limit, mappingPriority, responseFormat, return404OnEmptyResponse, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        futuresV1HistoricalFundingRateMessagesHour(market: string, instrument: string, hourTs?: number, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', return404OnEmptyResponse?: boolean, options?: RequestOptions = {}): Promise<GENERICRESPONSE> {
            const localVarFetchArgs = FuturesApiFetchParamCreator(configuration).futuresV1HistoricalFundingRateMessagesHour(market, instrument, hourTs, mappingPriority, responseFormat, return404OnEmptyResponse, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        futuresV1HistoricalFundingRateMinutes(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', options?: RequestOptions = {}): Promise<GENERICRESPONSE> {
            const localVarFetchArgs = FuturesApiFetchParamCreator(configuration).futuresV1HistoricalFundingRateMinutes(market, instrument, groups, limit, toTs, aggregate, fill, mappingPriority, responseFormat, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        futuresV1HistoricalHours(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', options?: RequestOptions = {}): Promise<GENERICRESPONSE> {
            const localVarFetchArgs = FuturesApiFetchParamCreator(configuration).futuresV1HistoricalHours(market, instrument, groups, limit, toTs, aggregate, fill, mappingPriority, responseFormat, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        futuresV1HistoricalMinutes(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', options?: RequestOptions = {}): Promise<GENERICRESPONSE> {
            const localVarFetchArgs = FuturesApiFetchParamCreator(configuration).futuresV1HistoricalMinutes(market, instrument, groups, limit, toTs, aggregate, fill, mappingPriority, responseFormat, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        futuresV1HistoricalOpenInterestDays(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', options?: RequestOptions = {}): Promise<GENERICRESPONSE> {
            const localVarFetchArgs = FuturesApiFetchParamCreator(configuration).futuresV1HistoricalOpenInterestDays(market, instrument, groups, limit, toTs, aggregate, fill, mappingPriority, responseFormat, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        futuresV1HistoricalOpenInterestHours(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', options?: RequestOptions = {}): Promise<GENERICRESPONSE> {
            const localVarFetchArgs = FuturesApiFetchParamCreator(configuration).futuresV1HistoricalOpenInterestHours(market, instrument, groups, limit, toTs, aggregate, fill, mappingPriority, responseFormat, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        futuresV1HistoricalOpenInterestMessages(market: string, instrument: string, afterTs?: number, lastCcseq?: number, limit?: number, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', return404OnEmptyResponse?: boolean, options?: RequestOptions = {}): Promise<GENERICRESPONSE> {
            const localVarFetchArgs = FuturesApiFetchParamCreator(configuration).futuresV1HistoricalOpenInterestMessages(market, instrument, afterTs, lastCcseq, limit, mappingPriority, responseFormat, return404OnEmptyResponse, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        futuresV1HistoricalOpenInterestMessagesHour(market: string, instrument: string, hourTs?: number, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', return404OnEmptyResponse?: boolean, options?: RequestOptions = {}): Promise<GENERICRESPONSE> {
            const localVarFetchArgs = FuturesApiFetchParamCreator(configuration).futuresV1HistoricalOpenInterestMessagesHour(market, instrument, hourTs, mappingPriority, responseFormat, return404OnEmptyResponse, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        futuresV1HistoricalOpenInterestMinutes(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', options?: RequestOptions = {}): Promise<GENERICRESPONSE> {
            const localVarFetchArgs = FuturesApiFetchParamCreator(configuration).futuresV1HistoricalOpenInterestMinutes(market, instrument, groups, limit, toTs, aggregate, fill, mappingPriority, responseFormat, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        futuresV1HistoricalTrades(market: string, instrument: string, afterTs?: number, lastCcseq?: number, limit?: number, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', return404OnEmptyResponse?: boolean, options?: RequestOptions = {}): Promise<GENERICRESPONSE> {
            const localVarFetchArgs = FuturesApiFetchParamCreator(configuration).futuresV1HistoricalTrades(market, instrument, afterTs, lastCcseq, limit, mappingPriority, responseFormat, return404OnEmptyResponse, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        futuresV1HistoricalTradesHour(market: string, instrument: string, hourTs?: number, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', return404OnEmptyResponse?: boolean, options?: RequestOptions = {}): Promise<GENERICRESPONSE> {
            const localVarFetchArgs = FuturesApiFetchParamCreator(configuration).futuresV1HistoricalTradesHour(market, instrument, hourTs, mappingPriority, responseFormat, return404OnEmptyResponse, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        futuresV1LatestFundingRateTick(market: string, instruments: Array<string>, groups?: Array<string>, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', options?: RequestOptions = {}): Promise<GENERICRESPONSE> {
            const localVarFetchArgs = FuturesApiFetchParamCreator(configuration).futuresV1LatestFundingRateTick(market, instruments, groups, mappingPriority, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        futuresV1LatestInstrumentMetadata(market: string, instruments: Array<string>, groups?: Array<string>, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', options?: RequestOptions = {}): Promise<GENERICRESPONSE> {
            const localVarFetchArgs = FuturesApiFetchParamCreator(configuration).futuresV1LatestInstrumentMetadata(market, instruments, groups, mappingPriority, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        futuresV1LatestOpenInterestTick(market: string, instruments: Array<string>, groups?: Array<string>, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', options?: RequestOptions = {}): Promise<GENERICRESPONSE> {
            const localVarFetchArgs = FuturesApiFetchParamCreator(configuration).futuresV1LatestOpenInterestTick(market, instruments, groups, mappingPriority, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        futuresV1LatestTick(market: string, instruments: Array<string>, groups?: Array<string>, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', options?: RequestOptions = {}): Promise<GENERICRESPONSE> {
            const localVarFetchArgs = FuturesApiFetchParamCreator(configuration).futuresV1LatestTick(market, instruments, groups, mappingPriority, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        futuresV1Markets(market?: string, options?: RequestOptions = {}): Promise<GENERICRESPONSE> {
            const localVarFetchArgs = FuturesApiFetchParamCreator(configuration).futuresV1Markets(market, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        futuresV1MarketsInstruments(market?: string, instrument?: string, instrumentStatus?: Array<'ACTIVE' | 'IGNORED' | 'RETIRED' | 'EXPIRED'>, options?: RequestOptions = {}): Promise<GENERICRESPONSE> {
            const localVarFetchArgs = FuturesApiFetchParamCreator(configuration).futuresV1MarketsInstruments(market, instrument, instrumentStatus, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        futuresV1MarketsInstrumentsUnmapped(market?: string, instrument?: string, instrumentStatus?: Array<'ACTIVE' | 'IGNORED' | 'RETIRED' | 'EXPIRED'>, options?: RequestOptions = {}): Promise<GENERICRESPONSE> {
            const localVarFetchArgs = FuturesApiFetchParamCreator(configuration).futuresV1MarketsInstrumentsUnmapped(market, instrument, instrumentStatus, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        indexV1HistoricalDays(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', options?: RequestOptions = {}): Promise<GENERICRESPONSE> {
            const localVarFetchArgs = FuturesApiFetchParamCreator(configuration).indexV1HistoricalDays(market, instrument, groups, limit, toTs, aggregate, fill, mappingPriority, responseFormat, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        indexV1HistoricalHours(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', options?: RequestOptions = {}): Promise<GENERICRESPONSE> {
            const localVarFetchArgs = FuturesApiFetchParamCreator(configuration).indexV1HistoricalHours(market, instrument, groups, limit, toTs, aggregate, fill, mappingPriority, responseFormat, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        indexV1HistoricalMessages(market: string, instrument: string, afterTs?: number, lastCcseq?: number, limit?: number, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', return404OnEmptyResponse?: boolean, options?: RequestOptions = {}): Promise<GENERICRESPONSE> {
            const localVarFetchArgs = FuturesApiFetchParamCreator(configuration).indexV1HistoricalMessages(market, instrument, afterTs, lastCcseq, limit, mappingPriority, responseFormat, return404OnEmptyResponse, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        indexV1HistoricalMessagesHour(market: string, instrument: string, hourTs?: number, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', return404OnEmptyResponse?: boolean, options?: RequestOptions = {}): Promise<GENERICRESPONSE> {
            const localVarFetchArgs = FuturesApiFetchParamCreator(configuration).indexV1HistoricalMessagesHour(market, instrument, hourTs, mappingPriority, responseFormat, return404OnEmptyResponse, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        indexV1HistoricalMinutes(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', options?: RequestOptions = {}): Promise<GENERICRESPONSE> {
            const localVarFetchArgs = FuturesApiFetchParamCreator(configuration).indexV1HistoricalMinutes(market, instrument, groups, limit, toTs, aggregate, fill, mappingPriority, responseFormat, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        indexV1LatestInstrumentMetadata(market: string, instruments: Array<string>, groups?: Array<string>, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', options?: RequestOptions = {}): Promise<GENERICRESPONSE> {
            const localVarFetchArgs = FuturesApiFetchParamCreator(configuration).indexV1LatestInstrumentMetadata(market, instruments, groups, mappingPriority, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        indexV1LatestTick(market: string, instruments: Array<string>, groups?: Array<string>, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', options?: RequestOptions = {}): Promise<GENERICRESPONSE> {
            const localVarFetchArgs = FuturesApiFetchParamCreator(configuration).indexV1LatestTick(market, instruments, groups, mappingPriority, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        indexV1Markets(market?: string, options?: RequestOptions = {}): Promise<GENERICRESPONSE> {
            const localVarFetchArgs = FuturesApiFetchParamCreator(configuration).indexV1Markets(market, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        indexV1MarketsInstruments(market?: string, instrument?: string, instrumentStatus?: Array<'ACTIVE' | 'IGNORED' | 'RETIRED' | 'EXPIRED'>, options?: RequestOptions = {}): Promise<GENERICRESPONSE> {
            const localVarFetchArgs = FuturesApiFetchParamCreator(configuration).indexV1MarketsInstruments(market, instrument, instrumentStatus, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        indexV1MarketsInstrumentsUnmapped(market?: string, instrument?: string, instrumentStatus?: Array<'ACTIVE' | 'IGNORED' | 'RETIRED' | 'EXPIRED'>, options?: RequestOptions = {}): Promise<GENERICRESPONSE> {
            const localVarFetchArgs = FuturesApiFetchParamCreator(configuration).indexV1MarketsInstrumentsUnmapped(market, instrument, instrumentStatus, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * NewsApi - fetch parameter creator
 * @export
 */
export const NewsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @throws {RequiredError}
         */
        newsV1ArticleList(sourceIds?: Array<string>, lang?: 'EN' | 'ES' | 'PT' | '', categories?: Array<'1INCH' | 'AAVE' | 'ADA' | 'ALGO' | 'ALTCOIN' | 'ASIA' | 'ATOM' | 'AVAX' | 'AXS' | 'BAL' | 'BAT' | 'BCH' | 'BLOCKCHAIN' | 'BTC' | 'BUSINESS' | 'COMMODITY' | 'COMP' | 'CRV' | 'DASH' | 'DOGE' | 'DOT' | 'ENJ' | 'ETC' | 'ETH' | 'EXCHANGE' | 'FIAT' | 'FIL' | 'FTM' | 'ICO' | 'KNC' | 'LINK' | 'LRC' | 'LTC' | 'LUNA' | 'LUNC' | 'MANA' | 'MARKET' | 'MATIC' | 'MINING' | 'MKR' | 'REGULATION' | 'REN' | 'SAND' | 'SHIB' | 'SNX' | 'SOL' | 'SPONSORED' | 'SUSHI' | 'TECHNOLOGY' | 'TRADING' | 'TRX' | 'UMA' | 'UNI' | 'USDT' | 'WALLET' | 'XLM' | 'XMR' | 'XRP' | 'XTZ' | 'YFI' | 'ZEC' | 'ZRX' | ''>, excludeCategories?: Array<'1INCH' | 'AAVE' | 'ADA' | 'ALGO' | 'ALTCOIN' | 'ASIA' | 'ATOM' | 'AVAX' | 'AXS' | 'BAL' | 'BAT' | 'BCH' | 'BLOCKCHAIN' | 'BTC' | 'BUSINESS' | 'COMMODITY' | 'COMP' | 'CRV' | 'DASH' | 'DOGE' | 'DOT' | 'ENJ' | 'ETC' | 'ETH' | 'EXCHANGE' | 'FIAT' | 'FIL' | 'FTM' | 'ICO' | 'KNC' | 'LINK' | 'LRC' | 'LTC' | 'LUNA' | 'LUNC' | 'MANA' | 'MARKET' | 'MATIC' | 'MINING' | 'MKR' | 'REGULATION' | 'REN' | 'SAND' | 'SHIB' | 'SNX' | 'SOL' | 'SPONSORED' | 'SUSHI' | 'TECHNOLOGY' | 'TRADING' | 'TRX' | 'UMA' | 'UNI' | 'USDT' | 'WALLET' | 'XLM' | 'XMR' | 'XRP' | 'XTZ' | 'YFI' | 'ZEC' | 'ZRX' | ''>, toTs?: number, options: RequestOptions): FetchArgs {
            const localVarPath = `/news/v1/article/list`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (sourceIds) {
                localVarQueryParameter['source_ids'] = sourceIds.join(COLLECTION_FORMATS["csv"]);
            }

            if (lang !== undefined) {
                localVarQueryParameter['lang'] = ((lang:any):string);
            }

            if (categories) {
                localVarQueryParameter['categories'] = categories.join(COLLECTION_FORMATS["csv"]);
            }

            if (excludeCategories) {
                localVarQueryParameter['exclude_categories'] = excludeCategories.join(COLLECTION_FORMATS["csv"]);
            }

            if (toTs !== undefined) {
                localVarQueryParameter['to_ts'] = ((toTs:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        newsV1CategoryList(options: RequestOptions): FetchArgs {
            const localVarPath = `/news/v1/category/list`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        newsV1SourceList(lang?: 'EN' | 'ES' | 'PT' | '', type?: 'RSS' | 'API' | 'TWITTER' | '', status?: 'ACTIVE' | 'INACTIVE' | '', options: RequestOptions): FetchArgs {
            const localVarPath = `/news/v1/source/list`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (lang !== undefined) {
                localVarQueryParameter['lang'] = ((lang:any):string);
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = ((type:any):string);
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = ((status:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type NewsApiType = { 
    newsV1ArticleList(sourceIds?: Array<string>, lang?: 'EN' | 'ES' | 'PT' | '', categories?: Array<'1INCH' | 'AAVE' | 'ADA' | 'ALGO' | 'ALTCOIN' | 'ASIA' | 'ATOM' | 'AVAX' | 'AXS' | 'BAL' | 'BAT' | 'BCH' | 'BLOCKCHAIN' | 'BTC' | 'BUSINESS' | 'COMMODITY' | 'COMP' | 'CRV' | 'DASH' | 'DOGE' | 'DOT' | 'ENJ' | 'ETC' | 'ETH' | 'EXCHANGE' | 'FIAT' | 'FIL' | 'FTM' | 'ICO' | 'KNC' | 'LINK' | 'LRC' | 'LTC' | 'LUNA' | 'LUNC' | 'MANA' | 'MARKET' | 'MATIC' | 'MINING' | 'MKR' | 'REGULATION' | 'REN' | 'SAND' | 'SHIB' | 'SNX' | 'SOL' | 'SPONSORED' | 'SUSHI' | 'TECHNOLOGY' | 'TRADING' | 'TRX' | 'UMA' | 'UNI' | 'USDT' | 'WALLET' | 'XLM' | 'XMR' | 'XRP' | 'XTZ' | 'YFI' | 'ZEC' | 'ZRX' | ''>, excludeCategories?: Array<'1INCH' | 'AAVE' | 'ADA' | 'ALGO' | 'ALTCOIN' | 'ASIA' | 'ATOM' | 'AVAX' | 'AXS' | 'BAL' | 'BAT' | 'BCH' | 'BLOCKCHAIN' | 'BTC' | 'BUSINESS' | 'COMMODITY' | 'COMP' | 'CRV' | 'DASH' | 'DOGE' | 'DOT' | 'ENJ' | 'ETC' | 'ETH' | 'EXCHANGE' | 'FIAT' | 'FIL' | 'FTM' | 'ICO' | 'KNC' | 'LINK' | 'LRC' | 'LTC' | 'LUNA' | 'LUNC' | 'MANA' | 'MARKET' | 'MATIC' | 'MINING' | 'MKR' | 'REGULATION' | 'REN' | 'SAND' | 'SHIB' | 'SNX' | 'SOL' | 'SPONSORED' | 'SUSHI' | 'TECHNOLOGY' | 'TRADING' | 'TRX' | 'UMA' | 'UNI' | 'USDT' | 'WALLET' | 'XLM' | 'XMR' | 'XRP' | 'XTZ' | 'YFI' | 'ZEC' | 'ZRX' | ''>, toTs?: number, options?: RequestOptions): Promise<GENERICRESPONSE>,

    newsV1CategoryList(options?: RequestOptions): Promise<GENERICRESPONSE>,

    newsV1SourceList(lang?: 'EN' | 'ES' | 'PT' | '', type?: 'RSS' | 'API' | 'TWITTER' | '', status?: 'ACTIVE' | 'INACTIVE' | '', options?: RequestOptions): Promise<GENERICRESPONSE>,
}

/**
 * NewsApi - factory function to inject configuration 
 * @export
 */
export const NewsApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): NewsApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * 
         * @throws {RequiredError}
         */
        newsV1ArticleList(sourceIds?: Array<string>, lang?: 'EN' | 'ES' | 'PT' | '', categories?: Array<'1INCH' | 'AAVE' | 'ADA' | 'ALGO' | 'ALTCOIN' | 'ASIA' | 'ATOM' | 'AVAX' | 'AXS' | 'BAL' | 'BAT' | 'BCH' | 'BLOCKCHAIN' | 'BTC' | 'BUSINESS' | 'COMMODITY' | 'COMP' | 'CRV' | 'DASH' | 'DOGE' | 'DOT' | 'ENJ' | 'ETC' | 'ETH' | 'EXCHANGE' | 'FIAT' | 'FIL' | 'FTM' | 'ICO' | 'KNC' | 'LINK' | 'LRC' | 'LTC' | 'LUNA' | 'LUNC' | 'MANA' | 'MARKET' | 'MATIC' | 'MINING' | 'MKR' | 'REGULATION' | 'REN' | 'SAND' | 'SHIB' | 'SNX' | 'SOL' | 'SPONSORED' | 'SUSHI' | 'TECHNOLOGY' | 'TRADING' | 'TRX' | 'UMA' | 'UNI' | 'USDT' | 'WALLET' | 'XLM' | 'XMR' | 'XRP' | 'XTZ' | 'YFI' | 'ZEC' | 'ZRX' | ''>, excludeCategories?: Array<'1INCH' | 'AAVE' | 'ADA' | 'ALGO' | 'ALTCOIN' | 'ASIA' | 'ATOM' | 'AVAX' | 'AXS' | 'BAL' | 'BAT' | 'BCH' | 'BLOCKCHAIN' | 'BTC' | 'BUSINESS' | 'COMMODITY' | 'COMP' | 'CRV' | 'DASH' | 'DOGE' | 'DOT' | 'ENJ' | 'ETC' | 'ETH' | 'EXCHANGE' | 'FIAT' | 'FIL' | 'FTM' | 'ICO' | 'KNC' | 'LINK' | 'LRC' | 'LTC' | 'LUNA' | 'LUNC' | 'MANA' | 'MARKET' | 'MATIC' | 'MINING' | 'MKR' | 'REGULATION' | 'REN' | 'SAND' | 'SHIB' | 'SNX' | 'SOL' | 'SPONSORED' | 'SUSHI' | 'TECHNOLOGY' | 'TRADING' | 'TRX' | 'UMA' | 'UNI' | 'USDT' | 'WALLET' | 'XLM' | 'XMR' | 'XRP' | 'XTZ' | 'YFI' | 'ZEC' | 'ZRX' | ''>, toTs?: number, options?: RequestOptions = {}): Promise<GENERICRESPONSE> {
            const localVarFetchArgs = NewsApiFetchParamCreator(configuration).newsV1ArticleList(sourceIds, lang, categories, excludeCategories, toTs, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        newsV1CategoryList(options?: RequestOptions = {}): Promise<GENERICRESPONSE> {
            const localVarFetchArgs = NewsApiFetchParamCreator(configuration).newsV1CategoryList(options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        newsV1SourceList(lang?: 'EN' | 'ES' | 'PT' | '', type?: 'RSS' | 'API' | 'TWITTER' | '', status?: 'ACTIVE' | 'INACTIVE' | '', options?: RequestOptions = {}): Promise<GENERICRESPONSE> {
            const localVarFetchArgs = NewsApiFetchParamCreator(configuration).newsV1SourceList(lang, type, status, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * OverviewApi - fetch parameter creator
 * @export
 */
export const OverviewApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @throws {RequiredError}
         */
        overviewV1HistoricalMarketcapAllAssetsDays(groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, responseFormat?: 'JSON' | 'CSV', options: RequestOptions): FetchArgs {
            const localVarPath = `/overview/v1/historical/marketcap/all/assets/days`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (groups) {
                localVarQueryParameter['groups'] = groups.join(COLLECTION_FORMATS["csv"]);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (toTs !== undefined) {
                localVarQueryParameter['to_ts'] = ((toTs:any):string);
            }

            if (aggregate !== undefined) {
                localVarQueryParameter['aggregate'] = ((aggregate:any):string);
            }

            if (fill !== undefined) {
                localVarQueryParameter['fill'] = ((fill:any):string);
            }

            if (responseFormat !== undefined) {
                localVarQueryParameter['response_format'] = ((responseFormat:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        overviewV1HistoricalMarketcapAllAssetsHours(groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, responseFormat?: 'JSON' | 'CSV', options: RequestOptions): FetchArgs {
            const localVarPath = `/overview/v1/historical/marketcap/all/assets/hours`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (groups) {
                localVarQueryParameter['groups'] = groups.join(COLLECTION_FORMATS["csv"]);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (toTs !== undefined) {
                localVarQueryParameter['to_ts'] = ((toTs:any):string);
            }

            if (aggregate !== undefined) {
                localVarQueryParameter['aggregate'] = ((aggregate:any):string);
            }

            if (fill !== undefined) {
                localVarQueryParameter['fill'] = ((fill:any):string);
            }

            if (responseFormat !== undefined) {
                localVarQueryParameter['response_format'] = ((responseFormat:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        overviewV1HistoricalMarketcapFtwAssetsDays(groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, responseFormat?: 'JSON' | 'CSV', options: RequestOptions): FetchArgs {
            const localVarPath = `/overview/v1/historical/marketcap/ftw/assets/days`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (groups) {
                localVarQueryParameter['groups'] = groups.join(COLLECTION_FORMATS["csv"]);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (toTs !== undefined) {
                localVarQueryParameter['to_ts'] = ((toTs:any):string);
            }

            if (aggregate !== undefined) {
                localVarQueryParameter['aggregate'] = ((aggregate:any):string);
            }

            if (fill !== undefined) {
                localVarQueryParameter['fill'] = ((fill:any):string);
            }

            if (responseFormat !== undefined) {
                localVarQueryParameter['response_format'] = ((responseFormat:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        overviewV1HistoricalMarketcapFtwAssetsHours(groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, responseFormat?: 'JSON' | 'CSV', options: RequestOptions): FetchArgs {
            const localVarPath = `/overview/v1/historical/marketcap/ftw/assets/hours`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (groups) {
                localVarQueryParameter['groups'] = groups.join(COLLECTION_FORMATS["csv"]);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (toTs !== undefined) {
                localVarQueryParameter['to_ts'] = ((toTs:any):string);
            }

            if (aggregate !== undefined) {
                localVarQueryParameter['aggregate'] = ((aggregate:any):string);
            }

            if (fill !== undefined) {
                localVarQueryParameter['fill'] = ((fill:any):string);
            }

            if (responseFormat !== undefined) {
                localVarQueryParameter['response_format'] = ((responseFormat:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        overviewV1LatestMarketcapAllTick(groups?: Array<string>, options: RequestOptions): FetchArgs {
            const localVarPath = `/overview/v1/latest/marketcap/all/tick`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (groups) {
                localVarQueryParameter['groups'] = groups.join(COLLECTION_FORMATS["csv"]);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        overviewV1LatestMarketcapFtwTick(groups?: Array<string>, options: RequestOptions): FetchArgs {
            const localVarPath = `/overview/v1/latest/marketcap/ftw/tick`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (groups) {
                localVarQueryParameter['groups'] = groups.join(COLLECTION_FORMATS["csv"]);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type OverviewApiType = { 
    overviewV1HistoricalMarketcapAllAssetsDays(groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, responseFormat?: 'JSON' | 'CSV', options?: RequestOptions): Promise<GENERICRESPONSE>,

    overviewV1HistoricalMarketcapAllAssetsHours(groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, responseFormat?: 'JSON' | 'CSV', options?: RequestOptions): Promise<GENERICRESPONSE>,

    overviewV1HistoricalMarketcapFtwAssetsDays(groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, responseFormat?: 'JSON' | 'CSV', options?: RequestOptions): Promise<GENERICRESPONSE>,

    overviewV1HistoricalMarketcapFtwAssetsHours(groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, responseFormat?: 'JSON' | 'CSV', options?: RequestOptions): Promise<GENERICRESPONSE>,

    overviewV1LatestMarketcapAllTick(groups?: Array<string>, options?: RequestOptions): Promise<GENERICRESPONSE>,

    overviewV1LatestMarketcapFtwTick(groups?: Array<string>, options?: RequestOptions): Promise<GENERICRESPONSE>,
}

/**
 * OverviewApi - factory function to inject configuration 
 * @export
 */
export const OverviewApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): OverviewApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * 
         * @throws {RequiredError}
         */
        overviewV1HistoricalMarketcapAllAssetsDays(groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, responseFormat?: 'JSON' | 'CSV', options?: RequestOptions = {}): Promise<GENERICRESPONSE> {
            const localVarFetchArgs = OverviewApiFetchParamCreator(configuration).overviewV1HistoricalMarketcapAllAssetsDays(groups, limit, toTs, aggregate, fill, responseFormat, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        overviewV1HistoricalMarketcapAllAssetsHours(groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, responseFormat?: 'JSON' | 'CSV', options?: RequestOptions = {}): Promise<GENERICRESPONSE> {
            const localVarFetchArgs = OverviewApiFetchParamCreator(configuration).overviewV1HistoricalMarketcapAllAssetsHours(groups, limit, toTs, aggregate, fill, responseFormat, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        overviewV1HistoricalMarketcapFtwAssetsDays(groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, responseFormat?: 'JSON' | 'CSV', options?: RequestOptions = {}): Promise<GENERICRESPONSE> {
            const localVarFetchArgs = OverviewApiFetchParamCreator(configuration).overviewV1HistoricalMarketcapFtwAssetsDays(groups, limit, toTs, aggregate, fill, responseFormat, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        overviewV1HistoricalMarketcapFtwAssetsHours(groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, responseFormat?: 'JSON' | 'CSV', options?: RequestOptions = {}): Promise<GENERICRESPONSE> {
            const localVarFetchArgs = OverviewApiFetchParamCreator(configuration).overviewV1HistoricalMarketcapFtwAssetsHours(groups, limit, toTs, aggregate, fill, responseFormat, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        overviewV1LatestMarketcapAllTick(groups?: Array<string>, options?: RequestOptions = {}): Promise<GENERICRESPONSE> {
            const localVarFetchArgs = OverviewApiFetchParamCreator(configuration).overviewV1LatestMarketcapAllTick(groups, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        overviewV1LatestMarketcapFtwTick(groups?: Array<string>, options?: RequestOptions = {}): Promise<GENERICRESPONSE> {
            const localVarFetchArgs = OverviewApiFetchParamCreator(configuration).overviewV1LatestMarketcapFtwTick(groups, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * ReferenceRatesApi - fetch parameter creator
 * @export
 */
export const ReferenceRatesApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @throws {RequiredError}
         */
        indexCcV1HistoricalDays(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', options: RequestOptions): FetchArgs {
            // verify required parameter 'market' is not null or undefined
            if (market === null || market === undefined) {
                throw new RequiredError('market','Required parameter market was null or undefined when calling indexCcV1HistoricalDays.');
            }
            // verify required parameter 'instrument' is not null or undefined
            if (instrument === null || instrument === undefined) {
                throw new RequiredError('instrument','Required parameter instrument was null or undefined when calling indexCcV1HistoricalDays.');
            }
            const localVarPath = `/index/cc/v1/historical/days`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (market !== undefined) {
                localVarQueryParameter['market'] = ((market:any):string);
            }

            if (instrument !== undefined) {
                localVarQueryParameter['instrument'] = ((instrument:any):string);
            }

            if (groups) {
                localVarQueryParameter['groups'] = groups.join(COLLECTION_FORMATS["csv"]);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (toTs !== undefined) {
                localVarQueryParameter['to_ts'] = ((toTs:any):string);
            }

            if (aggregate !== undefined) {
                localVarQueryParameter['aggregate'] = ((aggregate:any):string);
            }

            if (fill !== undefined) {
                localVarQueryParameter['fill'] = ((fill:any):string);
            }

            if (mappingPriority !== undefined) {
                localVarQueryParameter['mapping_priority'] = ((mappingPriority:any):string);
            }

            if (responseFormat !== undefined) {
                localVarQueryParameter['response_format'] = ((responseFormat:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        indexCcV1HistoricalHours(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', options: RequestOptions): FetchArgs {
            // verify required parameter 'market' is not null or undefined
            if (market === null || market === undefined) {
                throw new RequiredError('market','Required parameter market was null or undefined when calling indexCcV1HistoricalHours.');
            }
            // verify required parameter 'instrument' is not null or undefined
            if (instrument === null || instrument === undefined) {
                throw new RequiredError('instrument','Required parameter instrument was null or undefined when calling indexCcV1HistoricalHours.');
            }
            const localVarPath = `/index/cc/v1/historical/hours`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (market !== undefined) {
                localVarQueryParameter['market'] = ((market:any):string);
            }

            if (instrument !== undefined) {
                localVarQueryParameter['instrument'] = ((instrument:any):string);
            }

            if (groups) {
                localVarQueryParameter['groups'] = groups.join(COLLECTION_FORMATS["csv"]);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (toTs !== undefined) {
                localVarQueryParameter['to_ts'] = ((toTs:any):string);
            }

            if (aggregate !== undefined) {
                localVarQueryParameter['aggregate'] = ((aggregate:any):string);
            }

            if (fill !== undefined) {
                localVarQueryParameter['fill'] = ((fill:any):string);
            }

            if (mappingPriority !== undefined) {
                localVarQueryParameter['mapping_priority'] = ((mappingPriority:any):string);
            }

            if (responseFormat !== undefined) {
                localVarQueryParameter['response_format'] = ((responseFormat:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        indexCcV1HistoricalMessages(market: string, instrument: string, afterTs?: number, lastCcseq?: number, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', limit?: number, responseFormat?: 'JSON' | 'CSV', return404OnEmptyResponse?: boolean, options: RequestOptions): FetchArgs {
            // verify required parameter 'market' is not null or undefined
            if (market === null || market === undefined) {
                throw new RequiredError('market','Required parameter market was null or undefined when calling indexCcV1HistoricalMessages.');
            }
            // verify required parameter 'instrument' is not null or undefined
            if (instrument === null || instrument === undefined) {
                throw new RequiredError('instrument','Required parameter instrument was null or undefined when calling indexCcV1HistoricalMessages.');
            }
            const localVarPath = `/index/cc/v1/historical/messages`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication api_key_header required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["authorization"] = localVarApiKeyValue;
            }

            // authentication api_key_query required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (market !== undefined) {
                localVarQueryParameter['market'] = ((market:any):string);
            }

            if (instrument !== undefined) {
                localVarQueryParameter['instrument'] = ((instrument:any):string);
            }

            if (afterTs !== undefined) {
                localVarQueryParameter['after_ts'] = ((afterTs:any):string);
            }

            if (lastCcseq !== undefined) {
                localVarQueryParameter['last_ccseq'] = ((lastCcseq:any):string);
            }

            if (mappingPriority !== undefined) {
                localVarQueryParameter['mapping_priority'] = ((mappingPriority:any):string);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (responseFormat !== undefined) {
                localVarQueryParameter['response_format'] = ((responseFormat:any):string);
            }

            if (return404OnEmptyResponse !== undefined) {
                localVarQueryParameter['return_404_on_empty_response'] = ((return404OnEmptyResponse:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        indexCcV1HistoricalMessagesHour(market: string, instrument: string, hourTs?: number, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', return404OnEmptyResponse?: boolean, options: RequestOptions): FetchArgs {
            // verify required parameter 'market' is not null or undefined
            if (market === null || market === undefined) {
                throw new RequiredError('market','Required parameter market was null or undefined when calling indexCcV1HistoricalMessagesHour.');
            }
            // verify required parameter 'instrument' is not null or undefined
            if (instrument === null || instrument === undefined) {
                throw new RequiredError('instrument','Required parameter instrument was null or undefined when calling indexCcV1HistoricalMessagesHour.');
            }
            const localVarPath = `/index/cc/v1/historical/messages/hour`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication api_key_header required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["authorization"] = localVarApiKeyValue;
            }

            // authentication api_key_query required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (market !== undefined) {
                localVarQueryParameter['market'] = ((market:any):string);
            }

            if (instrument !== undefined) {
                localVarQueryParameter['instrument'] = ((instrument:any):string);
            }

            if (hourTs !== undefined) {
                localVarQueryParameter['hour_ts'] = ((hourTs:any):string);
            }

            if (mappingPriority !== undefined) {
                localVarQueryParameter['mapping_priority'] = ((mappingPriority:any):string);
            }

            if (responseFormat !== undefined) {
                localVarQueryParameter['response_format'] = ((responseFormat:any):string);
            }

            if (return404OnEmptyResponse !== undefined) {
                localVarQueryParameter['return_404_on_empty_response'] = ((return404OnEmptyResponse:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        indexCcV1HistoricalMinutes(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', options: RequestOptions): FetchArgs {
            // verify required parameter 'market' is not null or undefined
            if (market === null || market === undefined) {
                throw new RequiredError('market','Required parameter market was null or undefined when calling indexCcV1HistoricalMinutes.');
            }
            // verify required parameter 'instrument' is not null or undefined
            if (instrument === null || instrument === undefined) {
                throw new RequiredError('instrument','Required parameter instrument was null or undefined when calling indexCcV1HistoricalMinutes.');
            }
            const localVarPath = `/index/cc/v1/historical/minutes`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (market !== undefined) {
                localVarQueryParameter['market'] = ((market:any):string);
            }

            if (instrument !== undefined) {
                localVarQueryParameter['instrument'] = ((instrument:any):string);
            }

            if (groups) {
                localVarQueryParameter['groups'] = groups.join(COLLECTION_FORMATS["csv"]);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (toTs !== undefined) {
                localVarQueryParameter['to_ts'] = ((toTs:any):string);
            }

            if (aggregate !== undefined) {
                localVarQueryParameter['aggregate'] = ((aggregate:any):string);
            }

            if (fill !== undefined) {
                localVarQueryParameter['fill'] = ((fill:any):string);
            }

            if (mappingPriority !== undefined) {
                localVarQueryParameter['mapping_priority'] = ((mappingPriority:any):string);
            }

            if (responseFormat !== undefined) {
                localVarQueryParameter['response_format'] = ((responseFormat:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        indexCcV1LatestInstrumentMetadata(market: string, instruments: Array<string>, groups?: Array<string>, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', options: RequestOptions): FetchArgs {
            // verify required parameter 'market' is not null or undefined
            if (market === null || market === undefined) {
                throw new RequiredError('market','Required parameter market was null or undefined when calling indexCcV1LatestInstrumentMetadata.');
            }
            // verify required parameter 'instruments' is not null or undefined
            if (instruments === null || instruments === undefined) {
                throw new RequiredError('instruments','Required parameter instruments was null or undefined when calling indexCcV1LatestInstrumentMetadata.');
            }
            const localVarPath = `/index/cc/v1/latest/instrument/metadata`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (market !== undefined) {
                localVarQueryParameter['market'] = ((market:any):string);
            }

            if (instruments) {
                localVarQueryParameter['instruments'] = instruments.join(COLLECTION_FORMATS["csv"]);
            }

            if (groups) {
                localVarQueryParameter['groups'] = groups.join(COLLECTION_FORMATS["csv"]);
            }

            if (mappingPriority !== undefined) {
                localVarQueryParameter['mapping_priority'] = ((mappingPriority:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        indexCcV1LatestTick(market: string, instruments: Array<string>, groups?: Array<string>, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', options: RequestOptions): FetchArgs {
            // verify required parameter 'market' is not null or undefined
            if (market === null || market === undefined) {
                throw new RequiredError('market','Required parameter market was null or undefined when calling indexCcV1LatestTick.');
            }
            // verify required parameter 'instruments' is not null or undefined
            if (instruments === null || instruments === undefined) {
                throw new RequiredError('instruments','Required parameter instruments was null or undefined when calling indexCcV1LatestTick.');
            }
            const localVarPath = `/index/cc/v1/latest/tick`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (market !== undefined) {
                localVarQueryParameter['market'] = ((market:any):string);
            }

            if (instruments) {
                localVarQueryParameter['instruments'] = instruments.join(COLLECTION_FORMATS["csv"]);
            }

            if (groups) {
                localVarQueryParameter['groups'] = groups.join(COLLECTION_FORMATS["csv"]);
            }

            if (mappingPriority !== undefined) {
                localVarQueryParameter['mapping_priority'] = ((mappingPriority:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        indexCcV1Markets(market?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/index/cc/v1/markets`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (market !== undefined) {
                localVarQueryParameter['market'] = ((market:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        indexCcV1MarketsInstruments(market?: string, instrument?: string, instrumentStatus?: Array<'ACTIVE' | 'IGNORED' | 'RETIRED' | 'EXPIRED'>, options: RequestOptions): FetchArgs {
            const localVarPath = `/index/cc/v1/markets/instruments`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (market !== undefined) {
                localVarQueryParameter['market'] = ((market:any):string);
            }

            if (instrument !== undefined) {
                localVarQueryParameter['instrument'] = ((instrument:any):string);
            }

            if (instrumentStatus) {
                localVarQueryParameter['instrument_status'] = instrumentStatus.join(COLLECTION_FORMATS["csv"]);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        indexCcV1MarketsInstrumentsUnmapped(market?: string, instrument?: string, instrumentStatus?: Array<'ACTIVE' | 'IGNORED' | 'RETIRED' | 'EXPIRED'>, options: RequestOptions): FetchArgs {
            const localVarPath = `/index/cc/v1/markets/instruments/unmapped`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (market !== undefined) {
                localVarQueryParameter['market'] = ((market:any):string);
            }

            if (instrument !== undefined) {
                localVarQueryParameter['instrument'] = ((instrument:any):string);
            }

            if (instrumentStatus) {
                localVarQueryParameter['instrument_status'] = instrumentStatus.join(COLLECTION_FORMATS["csv"]);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type ReferenceRatesApiType = { 
    indexCcV1HistoricalDays(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', options?: RequestOptions): Promise<GENERICRESPONSE>,

    indexCcV1HistoricalHours(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', options?: RequestOptions): Promise<GENERICRESPONSE>,

    indexCcV1HistoricalMessages(market: string, instrument: string, afterTs?: number, lastCcseq?: number, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', limit?: number, responseFormat?: 'JSON' | 'CSV', return404OnEmptyResponse?: boolean, options?: RequestOptions): Promise<GENERICRESPONSE>,

    indexCcV1HistoricalMessagesHour(market: string, instrument: string, hourTs?: number, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', return404OnEmptyResponse?: boolean, options?: RequestOptions): Promise<GENERICRESPONSE>,

    indexCcV1HistoricalMinutes(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', options?: RequestOptions): Promise<GENERICRESPONSE>,

    indexCcV1LatestInstrumentMetadata(market: string, instruments: Array<string>, groups?: Array<string>, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', options?: RequestOptions): Promise<GENERICRESPONSE>,

    indexCcV1LatestTick(market: string, instruments: Array<string>, groups?: Array<string>, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', options?: RequestOptions): Promise<GENERICRESPONSE>,

    indexCcV1Markets(market?: string, options?: RequestOptions): Promise<GENERICRESPONSE>,

    indexCcV1MarketsInstruments(market?: string, instrument?: string, instrumentStatus?: Array<'ACTIVE' | 'IGNORED' | 'RETIRED' | 'EXPIRED'>, options?: RequestOptions): Promise<GENERICRESPONSE>,

    indexCcV1MarketsInstrumentsUnmapped(market?: string, instrument?: string, instrumentStatus?: Array<'ACTIVE' | 'IGNORED' | 'RETIRED' | 'EXPIRED'>, options?: RequestOptions): Promise<GENERICRESPONSE>,
}

/**
 * ReferenceRatesApi - factory function to inject configuration 
 * @export
 */
export const ReferenceRatesApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): ReferenceRatesApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * 
         * @throws {RequiredError}
         */
        indexCcV1HistoricalDays(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', options?: RequestOptions = {}): Promise<GENERICRESPONSE> {
            const localVarFetchArgs = ReferenceRatesApiFetchParamCreator(configuration).indexCcV1HistoricalDays(market, instrument, groups, limit, toTs, aggregate, fill, mappingPriority, responseFormat, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        indexCcV1HistoricalHours(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', options?: RequestOptions = {}): Promise<GENERICRESPONSE> {
            const localVarFetchArgs = ReferenceRatesApiFetchParamCreator(configuration).indexCcV1HistoricalHours(market, instrument, groups, limit, toTs, aggregate, fill, mappingPriority, responseFormat, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        indexCcV1HistoricalMessages(market: string, instrument: string, afterTs?: number, lastCcseq?: number, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', limit?: number, responseFormat?: 'JSON' | 'CSV', return404OnEmptyResponse?: boolean, options?: RequestOptions = {}): Promise<GENERICRESPONSE> {
            const localVarFetchArgs = ReferenceRatesApiFetchParamCreator(configuration).indexCcV1HistoricalMessages(market, instrument, afterTs, lastCcseq, mappingPriority, limit, responseFormat, return404OnEmptyResponse, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        indexCcV1HistoricalMessagesHour(market: string, instrument: string, hourTs?: number, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', return404OnEmptyResponse?: boolean, options?: RequestOptions = {}): Promise<GENERICRESPONSE> {
            const localVarFetchArgs = ReferenceRatesApiFetchParamCreator(configuration).indexCcV1HistoricalMessagesHour(market, instrument, hourTs, mappingPriority, responseFormat, return404OnEmptyResponse, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        indexCcV1HistoricalMinutes(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', options?: RequestOptions = {}): Promise<GENERICRESPONSE> {
            const localVarFetchArgs = ReferenceRatesApiFetchParamCreator(configuration).indexCcV1HistoricalMinutes(market, instrument, groups, limit, toTs, aggregate, fill, mappingPriority, responseFormat, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        indexCcV1LatestInstrumentMetadata(market: string, instruments: Array<string>, groups?: Array<string>, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', options?: RequestOptions = {}): Promise<GENERICRESPONSE> {
            const localVarFetchArgs = ReferenceRatesApiFetchParamCreator(configuration).indexCcV1LatestInstrumentMetadata(market, instruments, groups, mappingPriority, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        indexCcV1LatestTick(market: string, instruments: Array<string>, groups?: Array<string>, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', options?: RequestOptions = {}): Promise<GENERICRESPONSE> {
            const localVarFetchArgs = ReferenceRatesApiFetchParamCreator(configuration).indexCcV1LatestTick(market, instruments, groups, mappingPriority, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        indexCcV1Markets(market?: string, options?: RequestOptions = {}): Promise<GENERICRESPONSE> {
            const localVarFetchArgs = ReferenceRatesApiFetchParamCreator(configuration).indexCcV1Markets(market, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        indexCcV1MarketsInstruments(market?: string, instrument?: string, instrumentStatus?: Array<'ACTIVE' | 'IGNORED' | 'RETIRED' | 'EXPIRED'>, options?: RequestOptions = {}): Promise<GENERICRESPONSE> {
            const localVarFetchArgs = ReferenceRatesApiFetchParamCreator(configuration).indexCcV1MarketsInstruments(market, instrument, instrumentStatus, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        indexCcV1MarketsInstrumentsUnmapped(market?: string, instrument?: string, instrumentStatus?: Array<'ACTIVE' | 'IGNORED' | 'RETIRED' | 'EXPIRED'>, options?: RequestOptions = {}): Promise<GENERICRESPONSE> {
            const localVarFetchArgs = ReferenceRatesApiFetchParamCreator(configuration).indexCcV1MarketsInstrumentsUnmapped(market, instrument, instrumentStatus, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * SpotApi - fetch parameter creator
 * @export
 */
export const SpotApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @throws {RequiredError}
         */
        spotV1HistoricalDays(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', options: RequestOptions): FetchArgs {
            // verify required parameter 'market' is not null or undefined
            if (market === null || market === undefined) {
                throw new RequiredError('market','Required parameter market was null or undefined when calling spotV1HistoricalDays.');
            }
            // verify required parameter 'instrument' is not null or undefined
            if (instrument === null || instrument === undefined) {
                throw new RequiredError('instrument','Required parameter instrument was null or undefined when calling spotV1HistoricalDays.');
            }
            const localVarPath = `/spot/v1/historical/days`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (market !== undefined) {
                localVarQueryParameter['market'] = ((market:any):string);
            }

            if (instrument !== undefined) {
                localVarQueryParameter['instrument'] = ((instrument:any):string);
            }

            if (groups) {
                localVarQueryParameter['groups'] = groups.join(COLLECTION_FORMATS["csv"]);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (toTs !== undefined) {
                localVarQueryParameter['to_ts'] = ((toTs:any):string);
            }

            if (aggregate !== undefined) {
                localVarQueryParameter['aggregate'] = ((aggregate:any):string);
            }

            if (fill !== undefined) {
                localVarQueryParameter['fill'] = ((fill:any):string);
            }

            if (mappingPriority !== undefined) {
                localVarQueryParameter['mapping_priority'] = ((mappingPriority:any):string);
            }

            if (responseFormat !== undefined) {
                localVarQueryParameter['response_format'] = ((responseFormat:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        spotV1HistoricalHours(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', options: RequestOptions): FetchArgs {
            // verify required parameter 'market' is not null or undefined
            if (market === null || market === undefined) {
                throw new RequiredError('market','Required parameter market was null or undefined when calling spotV1HistoricalHours.');
            }
            // verify required parameter 'instrument' is not null or undefined
            if (instrument === null || instrument === undefined) {
                throw new RequiredError('instrument','Required parameter instrument was null or undefined when calling spotV1HistoricalHours.');
            }
            const localVarPath = `/spot/v1/historical/hours`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (market !== undefined) {
                localVarQueryParameter['market'] = ((market:any):string);
            }

            if (instrument !== undefined) {
                localVarQueryParameter['instrument'] = ((instrument:any):string);
            }

            if (groups) {
                localVarQueryParameter['groups'] = groups.join(COLLECTION_FORMATS["csv"]);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (toTs !== undefined) {
                localVarQueryParameter['to_ts'] = ((toTs:any):string);
            }

            if (aggregate !== undefined) {
                localVarQueryParameter['aggregate'] = ((aggregate:any):string);
            }

            if (fill !== undefined) {
                localVarQueryParameter['fill'] = ((fill:any):string);
            }

            if (mappingPriority !== undefined) {
                localVarQueryParameter['mapping_priority'] = ((mappingPriority:any):string);
            }

            if (responseFormat !== undefined) {
                localVarQueryParameter['response_format'] = ((responseFormat:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        spotV1HistoricalMinutes(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', options: RequestOptions): FetchArgs {
            // verify required parameter 'market' is not null or undefined
            if (market === null || market === undefined) {
                throw new RequiredError('market','Required parameter market was null or undefined when calling spotV1HistoricalMinutes.');
            }
            // verify required parameter 'instrument' is not null or undefined
            if (instrument === null || instrument === undefined) {
                throw new RequiredError('instrument','Required parameter instrument was null or undefined when calling spotV1HistoricalMinutes.');
            }
            const localVarPath = `/spot/v1/historical/minutes`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (market !== undefined) {
                localVarQueryParameter['market'] = ((market:any):string);
            }

            if (instrument !== undefined) {
                localVarQueryParameter['instrument'] = ((instrument:any):string);
            }

            if (groups) {
                localVarQueryParameter['groups'] = groups.join(COLLECTION_FORMATS["csv"]);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (toTs !== undefined) {
                localVarQueryParameter['to_ts'] = ((toTs:any):string);
            }

            if (aggregate !== undefined) {
                localVarQueryParameter['aggregate'] = ((aggregate:any):string);
            }

            if (fill !== undefined) {
                localVarQueryParameter['fill'] = ((fill:any):string);
            }

            if (mappingPriority !== undefined) {
                localVarQueryParameter['mapping_priority'] = ((mappingPriority:any):string);
            }

            if (responseFormat !== undefined) {
                localVarQueryParameter['response_format'] = ((responseFormat:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        spotV1HistoricalOrderbookL2SnapshotMinute(market: string, instrument: string, minuteTs: number, depth?: number, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', options: RequestOptions): FetchArgs {
            // verify required parameter 'market' is not null or undefined
            if (market === null || market === undefined) {
                throw new RequiredError('market','Required parameter market was null or undefined when calling spotV1HistoricalOrderbookL2SnapshotMinute.');
            }
            // verify required parameter 'instrument' is not null or undefined
            if (instrument === null || instrument === undefined) {
                throw new RequiredError('instrument','Required parameter instrument was null or undefined when calling spotV1HistoricalOrderbookL2SnapshotMinute.');
            }
            // verify required parameter 'minuteTs' is not null or undefined
            if (minuteTs === null || minuteTs === undefined) {
                throw new RequiredError('minuteTs','Required parameter minuteTs was null or undefined when calling spotV1HistoricalOrderbookL2SnapshotMinute.');
            }
            const localVarPath = `/spot/v1/historical/orderbook/l2/snapshot/minute`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication api_key_header required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["authorization"] = localVarApiKeyValue;
            }

            // authentication api_key_query required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (market !== undefined) {
                localVarQueryParameter['market'] = ((market:any):string);
            }

            if (instrument !== undefined) {
                localVarQueryParameter['instrument'] = ((instrument:any):string);
            }

            if (minuteTs !== undefined) {
                localVarQueryParameter['minute_ts'] = ((minuteTs:any):string);
            }

            if (depth !== undefined) {
                localVarQueryParameter['depth'] = ((depth:any):string);
            }

            if (mappingPriority !== undefined) {
                localVarQueryParameter['mapping_priority'] = ((mappingPriority:any):string);
            }

            if (responseFormat !== undefined) {
                localVarQueryParameter['response_format'] = ((responseFormat:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        spotV1HistoricalTrades(market: string, instrument: string, afterTs?: number, lastCcseq?: number, limit?: number, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', return404OnEmptyResponse?: boolean, options: RequestOptions): FetchArgs {
            // verify required parameter 'market' is not null or undefined
            if (market === null || market === undefined) {
                throw new RequiredError('market','Required parameter market was null or undefined when calling spotV1HistoricalTrades.');
            }
            // verify required parameter 'instrument' is not null or undefined
            if (instrument === null || instrument === undefined) {
                throw new RequiredError('instrument','Required parameter instrument was null or undefined when calling spotV1HistoricalTrades.');
            }
            const localVarPath = `/spot/v1/historical/trades`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication api_key_header required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["authorization"] = localVarApiKeyValue;
            }

            // authentication api_key_query required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (market !== undefined) {
                localVarQueryParameter['market'] = ((market:any):string);
            }

            if (instrument !== undefined) {
                localVarQueryParameter['instrument'] = ((instrument:any):string);
            }

            if (afterTs !== undefined) {
                localVarQueryParameter['after_ts'] = ((afterTs:any):string);
            }

            if (lastCcseq !== undefined) {
                localVarQueryParameter['last_ccseq'] = ((lastCcseq:any):string);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (mappingPriority !== undefined) {
                localVarQueryParameter['mapping_priority'] = ((mappingPriority:any):string);
            }

            if (responseFormat !== undefined) {
                localVarQueryParameter['response_format'] = ((responseFormat:any):string);
            }

            if (return404OnEmptyResponse !== undefined) {
                localVarQueryParameter['return_404_on_empty_response'] = ((return404OnEmptyResponse:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        spotV1HistoricalTradesHour(market: string, instrument: string, hourTs?: number, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', return404OnEmptyResponse?: boolean, options: RequestOptions): FetchArgs {
            // verify required parameter 'market' is not null or undefined
            if (market === null || market === undefined) {
                throw new RequiredError('market','Required parameter market was null or undefined when calling spotV1HistoricalTradesHour.');
            }
            // verify required parameter 'instrument' is not null or undefined
            if (instrument === null || instrument === undefined) {
                throw new RequiredError('instrument','Required parameter instrument was null or undefined when calling spotV1HistoricalTradesHour.');
            }
            const localVarPath = `/spot/v1/historical/trades/hour`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication api_key_header required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["authorization"] = localVarApiKeyValue;
            }

            // authentication api_key_query required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (market !== undefined) {
                localVarQueryParameter['market'] = ((market:any):string);
            }

            if (instrument !== undefined) {
                localVarQueryParameter['instrument'] = ((instrument:any):string);
            }

            if (hourTs !== undefined) {
                localVarQueryParameter['hour_ts'] = ((hourTs:any):string);
            }

            if (mappingPriority !== undefined) {
                localVarQueryParameter['mapping_priority'] = ((mappingPriority:any):string);
            }

            if (responseFormat !== undefined) {
                localVarQueryParameter['response_format'] = ((responseFormat:any):string);
            }

            if (return404OnEmptyResponse !== undefined) {
                localVarQueryParameter['return_404_on_empty_response'] = ((return404OnEmptyResponse:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        spotV1LatestInstrumentMetadata(market: string, instruments: Array<string>, groups?: Array<string>, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', options: RequestOptions): FetchArgs {
            // verify required parameter 'market' is not null or undefined
            if (market === null || market === undefined) {
                throw new RequiredError('market','Required parameter market was null or undefined when calling spotV1LatestInstrumentMetadata.');
            }
            // verify required parameter 'instruments' is not null or undefined
            if (instruments === null || instruments === undefined) {
                throw new RequiredError('instruments','Required parameter instruments was null or undefined when calling spotV1LatestInstrumentMetadata.');
            }
            const localVarPath = `/spot/v1/latest/instrument/metadata`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (market !== undefined) {
                localVarQueryParameter['market'] = ((market:any):string);
            }

            if (instruments) {
                localVarQueryParameter['instruments'] = instruments.join(COLLECTION_FORMATS["csv"]);
            }

            if (groups) {
                localVarQueryParameter['groups'] = groups.join(COLLECTION_FORMATS["csv"]);
            }

            if (mappingPriority !== undefined) {
                localVarQueryParameter['mapping_priority'] = ((mappingPriority:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        spotV1LatestTick(market: string, instruments: Array<string>, groups?: Array<string>, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', options: RequestOptions): FetchArgs {
            // verify required parameter 'market' is not null or undefined
            if (market === null || market === undefined) {
                throw new RequiredError('market','Required parameter market was null or undefined when calling spotV1LatestTick.');
            }
            // verify required parameter 'instruments' is not null or undefined
            if (instruments === null || instruments === undefined) {
                throw new RequiredError('instruments','Required parameter instruments was null or undefined when calling spotV1LatestTick.');
            }
            const localVarPath = `/spot/v1/latest/tick`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (market !== undefined) {
                localVarQueryParameter['market'] = ((market:any):string);
            }

            if (instruments) {
                localVarQueryParameter['instruments'] = instruments.join(COLLECTION_FORMATS["csv"]);
            }

            if (groups) {
                localVarQueryParameter['groups'] = groups.join(COLLECTION_FORMATS["csv"]);
            }

            if (mappingPriority !== undefined) {
                localVarQueryParameter['mapping_priority'] = ((mappingPriority:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        spotV1Markets(market?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/spot/v1/markets`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (market !== undefined) {
                localVarQueryParameter['market'] = ((market:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        spotV1MarketsInstruments(market?: string, instrument?: string, instrumentStatus?: Array<'ACTIVE' | 'IGNORED' | 'RETIRED' | 'EXPIRED'>, options: RequestOptions): FetchArgs {
            const localVarPath = `/spot/v1/markets/instruments`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (market !== undefined) {
                localVarQueryParameter['market'] = ((market:any):string);
            }

            if (instrument !== undefined) {
                localVarQueryParameter['instrument'] = ((instrument:any):string);
            }

            if (instrumentStatus) {
                localVarQueryParameter['instrument_status'] = instrumentStatus.join(COLLECTION_FORMATS["csv"]);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        spotV1MarketsInstrumentsUnmapped(market?: string, instrument?: string, instrumentStatus?: Array<'ACTIVE' | 'IGNORED' | 'RETIRED' | 'EXPIRED'>, options: RequestOptions): FetchArgs {
            const localVarPath = `/spot/v1/markets/instruments/unmapped`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (market !== undefined) {
                localVarQueryParameter['market'] = ((market:any):string);
            }

            if (instrument !== undefined) {
                localVarQueryParameter['instrument'] = ((instrument:any):string);
            }

            if (instrumentStatus) {
                localVarQueryParameter['instrument_status'] = instrumentStatus.join(COLLECTION_FORMATS["csv"]);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type SpotApiType = { 
    spotV1HistoricalDays(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', options?: RequestOptions): Promise<SPOTINSTRUMENTHISTODATARESPONSE>,

    spotV1HistoricalHours(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', options?: RequestOptions): Promise<SPOTINSTRUMENTHISTODATARESPONSE>,

    spotV1HistoricalMinutes(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', options?: RequestOptions): Promise<SPOTINSTRUMENTHISTODATARESPONSE>,

    spotV1HistoricalOrderbookL2SnapshotMinute(market: string, instrument: string, minuteTs: number, depth?: number, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', options?: RequestOptions): Promise<GENERICRESPONSE>,

    spotV1HistoricalTrades(market: string, instrument: string, afterTs?: number, lastCcseq?: number, limit?: number, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', return404OnEmptyResponse?: boolean, options?: RequestOptions): Promise<SPOTINSTRUMENTTRADERESPONSE>,

    spotV1HistoricalTradesHour(market: string, instrument: string, hourTs?: number, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', return404OnEmptyResponse?: boolean, options?: RequestOptions): Promise<SPOTINSTRUMENTTRADERESPONSE>,

    spotV1LatestInstrumentMetadata(market: string, instruments: Array<string>, groups?: Array<string>, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', options?: RequestOptions): Promise<SPOTINSTRUMENTMETADATARESPONSE>,

    spotV1LatestTick(market: string, instruments: Array<string>, groups?: Array<string>, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', options?: RequestOptions): Promise<SPOTINSTRUMENTMARKETDATARESPONSE>,

    spotV1Markets(market?: string, options?: RequestOptions): Promise<GENERICRESPONSE>,

    spotV1MarketsInstruments(market?: string, instrument?: string, instrumentStatus?: Array<'ACTIVE' | 'IGNORED' | 'RETIRED' | 'EXPIRED'>, options?: RequestOptions): Promise<GENERICRESPONSE>,

    spotV1MarketsInstrumentsUnmapped(market?: string, instrument?: string, instrumentStatus?: Array<'ACTIVE' | 'IGNORED' | 'RETIRED' | 'EXPIRED'>, options?: RequestOptions): Promise<GENERICRESPONSE>,
}

/**
 * SpotApi - factory function to inject configuration 
 * @export
 */
export const SpotApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): SpotApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * 
         * @throws {RequiredError}
         */
        spotV1HistoricalDays(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', options?: RequestOptions = {}): Promise<SPOTINSTRUMENTHISTODATARESPONSE> {
            const localVarFetchArgs = SpotApiFetchParamCreator(configuration).spotV1HistoricalDays(market, instrument, groups, limit, toTs, aggregate, fill, mappingPriority, responseFormat, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        spotV1HistoricalHours(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', options?: RequestOptions = {}): Promise<SPOTINSTRUMENTHISTODATARESPONSE> {
            const localVarFetchArgs = SpotApiFetchParamCreator(configuration).spotV1HistoricalHours(market, instrument, groups, limit, toTs, aggregate, fill, mappingPriority, responseFormat, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        spotV1HistoricalMinutes(market: string, instrument: string, groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', options?: RequestOptions = {}): Promise<SPOTINSTRUMENTHISTODATARESPONSE> {
            const localVarFetchArgs = SpotApiFetchParamCreator(configuration).spotV1HistoricalMinutes(market, instrument, groups, limit, toTs, aggregate, fill, mappingPriority, responseFormat, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        spotV1HistoricalOrderbookL2SnapshotMinute(market: string, instrument: string, minuteTs: number, depth?: number, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', options?: RequestOptions = {}): Promise<GENERICRESPONSE> {
            const localVarFetchArgs = SpotApiFetchParamCreator(configuration).spotV1HistoricalOrderbookL2SnapshotMinute(market, instrument, minuteTs, depth, mappingPriority, responseFormat, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        spotV1HistoricalTrades(market: string, instrument: string, afterTs?: number, lastCcseq?: number, limit?: number, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', return404OnEmptyResponse?: boolean, options?: RequestOptions = {}): Promise<SPOTINSTRUMENTTRADERESPONSE> {
            const localVarFetchArgs = SpotApiFetchParamCreator(configuration).spotV1HistoricalTrades(market, instrument, afterTs, lastCcseq, limit, mappingPriority, responseFormat, return404OnEmptyResponse, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        spotV1HistoricalTradesHour(market: string, instrument: string, hourTs?: number, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', responseFormat?: 'JSON' | 'CSV', return404OnEmptyResponse?: boolean, options?: RequestOptions = {}): Promise<SPOTINSTRUMENTTRADERESPONSE> {
            const localVarFetchArgs = SpotApiFetchParamCreator(configuration).spotV1HistoricalTradesHour(market, instrument, hourTs, mappingPriority, responseFormat, return404OnEmptyResponse, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        spotV1LatestInstrumentMetadata(market: string, instruments: Array<string>, groups?: Array<string>, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', options?: RequestOptions = {}): Promise<SPOTINSTRUMENTMETADATARESPONSE> {
            const localVarFetchArgs = SpotApiFetchParamCreator(configuration).spotV1LatestInstrumentMetadata(market, instruments, groups, mappingPriority, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        spotV1LatestTick(market: string, instruments: Array<string>, groups?: Array<string>, mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST', options?: RequestOptions = {}): Promise<SPOTINSTRUMENTMARKETDATARESPONSE> {
            const localVarFetchArgs = SpotApiFetchParamCreator(configuration).spotV1LatestTick(market, instruments, groups, mappingPriority, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        spotV1Markets(market?: string, options?: RequestOptions = {}): Promise<GENERICRESPONSE> {
            const localVarFetchArgs = SpotApiFetchParamCreator(configuration).spotV1Markets(market, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        spotV1MarketsInstruments(market?: string, instrument?: string, instrumentStatus?: Array<'ACTIVE' | 'IGNORED' | 'RETIRED' | 'EXPIRED'>, options?: RequestOptions = {}): Promise<GENERICRESPONSE> {
            const localVarFetchArgs = SpotApiFetchParamCreator(configuration).spotV1MarketsInstruments(market, instrument, instrumentStatus, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        spotV1MarketsInstrumentsUnmapped(market?: string, instrument?: string, instrumentStatus?: Array<'ACTIVE' | 'IGNORED' | 'RETIRED' | 'EXPIRED'>, options?: RequestOptions = {}): Promise<GENERICRESPONSE> {
            const localVarFetchArgs = SpotApiFetchParamCreator(configuration).spotV1MarketsInstrumentsUnmapped(market, instrument, instrumentStatus, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


export type ApiTypes = { 
    AssetApi: AssetApiType,

    FuturesApi: FuturesApiType,

    NewsApi: NewsApiType,

    OverviewApi: OverviewApiType,

    ReferenceRatesApi: ReferenceRatesApiType,

    SpotApi: SpotApiType,
 }
