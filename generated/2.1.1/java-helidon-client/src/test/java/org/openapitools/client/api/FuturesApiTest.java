/**
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 * CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: data@cryptocompare.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.model.Error;
import org.openapitools.client.model.GENERICRESPONSE;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;

import org.eclipse.microprofile.rest.client.RestClientBuilder;

import java.net.URL;
import java.net.MalformedURLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

/**
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry Test
 *
 * API tests for FuturesApi
 */
public class FuturesApiTest {

    private static FuturesApi client;
    private static final String baseUrl = "http://localhost:8080";

    @BeforeAll
    public static void setup() throws MalformedURLException {
        client = RestClientBuilder.newBuilder()
                        .baseUrl(new URL(baseUrl))
                        .register(ApiException.class)
                        .build(FuturesApi.class);
    }

    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void futuresV1HistoricalDaysTest() throws Exception {
        //GENERICRESPONSE response = client.futuresV1HistoricalDays(market, instrument, groups, limit, toTs, aggregate, fill, mappingPriority, responseFormat);
        //assertNotNull(response);
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void futuresV1HistoricalFundingRateDaysTest() throws Exception {
        //GENERICRESPONSE response = client.futuresV1HistoricalFundingRateDays(market, instrument, groups, limit, toTs, aggregate, fill, mappingPriority, responseFormat);
        //assertNotNull(response);
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void futuresV1HistoricalFundingRateHoursTest() throws Exception {
        //GENERICRESPONSE response = client.futuresV1HistoricalFundingRateHours(market, instrument, groups, limit, toTs, aggregate, fill, mappingPriority, responseFormat);
        //assertNotNull(response);
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void futuresV1HistoricalFundingRateMessagesTest() throws Exception {
        //GENERICRESPONSE response = client.futuresV1HistoricalFundingRateMessages(market, instrument, afterTs, lastCcseq, limit, mappingPriority, responseFormat, return404OnEmptyResponse);
        //assertNotNull(response);
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void futuresV1HistoricalFundingRateMessagesHourTest() throws Exception {
        //GENERICRESPONSE response = client.futuresV1HistoricalFundingRateMessagesHour(market, instrument, hourTs, mappingPriority, responseFormat, return404OnEmptyResponse);
        //assertNotNull(response);
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void futuresV1HistoricalFundingRateMinutesTest() throws Exception {
        //GENERICRESPONSE response = client.futuresV1HistoricalFundingRateMinutes(market, instrument, groups, limit, toTs, aggregate, fill, mappingPriority, responseFormat);
        //assertNotNull(response);
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void futuresV1HistoricalHoursTest() throws Exception {
        //GENERICRESPONSE response = client.futuresV1HistoricalHours(market, instrument, groups, limit, toTs, aggregate, fill, mappingPriority, responseFormat);
        //assertNotNull(response);
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void futuresV1HistoricalMinutesTest() throws Exception {
        //GENERICRESPONSE response = client.futuresV1HistoricalMinutes(market, instrument, groups, limit, toTs, aggregate, fill, mappingPriority, responseFormat);
        //assertNotNull(response);
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void futuresV1HistoricalOpenInterestDaysTest() throws Exception {
        //GENERICRESPONSE response = client.futuresV1HistoricalOpenInterestDays(market, instrument, groups, limit, toTs, aggregate, fill, mappingPriority, responseFormat);
        //assertNotNull(response);
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void futuresV1HistoricalOpenInterestHoursTest() throws Exception {
        //GENERICRESPONSE response = client.futuresV1HistoricalOpenInterestHours(market, instrument, groups, limit, toTs, aggregate, fill, mappingPriority, responseFormat);
        //assertNotNull(response);
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void futuresV1HistoricalOpenInterestMessagesTest() throws Exception {
        //GENERICRESPONSE response = client.futuresV1HistoricalOpenInterestMessages(market, instrument, afterTs, lastCcseq, limit, mappingPriority, responseFormat, return404OnEmptyResponse);
        //assertNotNull(response);
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void futuresV1HistoricalOpenInterestMessagesHourTest() throws Exception {
        //GENERICRESPONSE response = client.futuresV1HistoricalOpenInterestMessagesHour(market, instrument, hourTs, mappingPriority, responseFormat, return404OnEmptyResponse);
        //assertNotNull(response);
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void futuresV1HistoricalOpenInterestMinutesTest() throws Exception {
        //GENERICRESPONSE response = client.futuresV1HistoricalOpenInterestMinutes(market, instrument, groups, limit, toTs, aggregate, fill, mappingPriority, responseFormat);
        //assertNotNull(response);
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void futuresV1HistoricalTradesTest() throws Exception {
        //GENERICRESPONSE response = client.futuresV1HistoricalTrades(market, instrument, afterTs, lastCcseq, limit, mappingPriority, responseFormat, return404OnEmptyResponse);
        //assertNotNull(response);
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void futuresV1HistoricalTradesHourTest() throws Exception {
        //GENERICRESPONSE response = client.futuresV1HistoricalTradesHour(market, instrument, hourTs, mappingPriority, responseFormat, return404OnEmptyResponse);
        //assertNotNull(response);
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void futuresV1LatestFundingRateTickTest() throws Exception {
        //GENERICRESPONSE response = client.futuresV1LatestFundingRateTick(market, instruments, groups, mappingPriority);
        //assertNotNull(response);
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void futuresV1LatestInstrumentMetadataTest() throws Exception {
        //GENERICRESPONSE response = client.futuresV1LatestInstrumentMetadata(market, instruments, groups, mappingPriority);
        //assertNotNull(response);
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void futuresV1LatestOpenInterestTickTest() throws Exception {
        //GENERICRESPONSE response = client.futuresV1LatestOpenInterestTick(market, instruments, groups, mappingPriority);
        //assertNotNull(response);
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void futuresV1LatestTickTest() throws Exception {
        //GENERICRESPONSE response = client.futuresV1LatestTick(market, instruments, groups, mappingPriority);
        //assertNotNull(response);
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void futuresV1MarketsTest() throws Exception {
        //GENERICRESPONSE response = client.futuresV1Markets(market);
        //assertNotNull(response);
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void futuresV1MarketsInstrumentsTest() throws Exception {
        //GENERICRESPONSE response = client.futuresV1MarketsInstruments(market, instrument, instrumentStatus);
        //assertNotNull(response);
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void futuresV1MarketsInstrumentsUnmappedTest() throws Exception {
        //GENERICRESPONSE response = client.futuresV1MarketsInstrumentsUnmapped(market, instrument, instrumentStatus);
        //assertNotNull(response);
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void indexV1HistoricalDaysTest() throws Exception {
        //GENERICRESPONSE response = client.indexV1HistoricalDays(market, instrument, groups, limit, toTs, aggregate, fill, mappingPriority, responseFormat);
        //assertNotNull(response);
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void indexV1HistoricalHoursTest() throws Exception {
        //GENERICRESPONSE response = client.indexV1HistoricalHours(market, instrument, groups, limit, toTs, aggregate, fill, mappingPriority, responseFormat);
        //assertNotNull(response);
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void indexV1HistoricalMessagesTest() throws Exception {
        //GENERICRESPONSE response = client.indexV1HistoricalMessages(market, instrument, afterTs, lastCcseq, limit, mappingPriority, responseFormat, return404OnEmptyResponse);
        //assertNotNull(response);
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void indexV1HistoricalMessagesHourTest() throws Exception {
        //GENERICRESPONSE response = client.indexV1HistoricalMessagesHour(market, instrument, hourTs, mappingPriority, responseFormat, return404OnEmptyResponse);
        //assertNotNull(response);
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void indexV1HistoricalMinutesTest() throws Exception {
        //GENERICRESPONSE response = client.indexV1HistoricalMinutes(market, instrument, groups, limit, toTs, aggregate, fill, mappingPriority, responseFormat);
        //assertNotNull(response);
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void indexV1LatestInstrumentMetadataTest() throws Exception {
        //GENERICRESPONSE response = client.indexV1LatestInstrumentMetadata(market, instruments, groups, mappingPriority);
        //assertNotNull(response);
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void indexV1LatestTickTest() throws Exception {
        //GENERICRESPONSE response = client.indexV1LatestTick(market, instruments, groups, mappingPriority);
        //assertNotNull(response);
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void indexV1MarketsTest() throws Exception {
        //GENERICRESPONSE response = client.indexV1Markets(market);
        //assertNotNull(response);
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void indexV1MarketsInstrumentsTest() throws Exception {
        //GENERICRESPONSE response = client.indexV1MarketsInstruments(market, instrument, instrumentStatus);
        //assertNotNull(response);
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void indexV1MarketsInstrumentsUnmappedTest() throws Exception {
        //GENERICRESPONSE response = client.indexV1MarketsInstrumentsUnmapped(market, instrument, instrumentStatus);
        //assertNotNull(response);
    }
    
}
