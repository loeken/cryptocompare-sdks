/*
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 *
 * CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: data@cryptocompare.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct SpotInstrumentMetadata {
    /// This is the first time instrument was seen on instrumentListSourceType BLOB.
    #[serde(rename = "FIRST_SEEN_ON_BLOB_TS", skip_serializing_if = "Option::is_none")]
    pub first_seen_on_blob_ts: Option<i32>,
    /// This is the first time instrument was seen on instrumentListSourceType FIX.
    #[serde(rename = "FIRST_SEEN_ON_FIX_TS", skip_serializing_if = "Option::is_none")]
    pub first_seen_on_fix_ts: Option<i32>,
    /// This is the first time instrument was seen on instrumentListSourceType HARDCODED.
    #[serde(rename = "FIRST_SEEN_ON_HARDCODED_TS", skip_serializing_if = "Option::is_none")]
    pub first_seen_on_hardcoded_ts: Option<i32>,
    /// This is the first time instrument was seen on instrumentListSourceType INDEX_COMPOSITION.
    #[serde(rename = "FIRST_SEEN_ON_INDEX_COMPOSITION_TS", skip_serializing_if = "Option::is_none")]
    pub first_seen_on_index_composition_ts: Option<i32>,
    /// This is the first time instrument was seen on instrumentListSourceType NSQ.
    #[serde(rename = "FIRST_SEEN_ON_NSQ_TS", skip_serializing_if = "Option::is_none")]
    pub first_seen_on_nsq_ts: Option<i32>,
    /// This is the first time instrument was seen on instrumentListSourceType POLLING.
    #[serde(rename = "FIRST_SEEN_ON_POLLING_TS", skip_serializing_if = "Option::is_none")]
    pub first_seen_on_polling_ts: Option<i32>,
    /// This is the first time instrument was seen on instrumentListSourceType STREAMING.
    #[serde(rename = "FIRST_SEEN_ON_STREAMING_TS", skip_serializing_if = "Option::is_none")]
    pub first_seen_on_streaming_ts: Option<i32>,
    /// This is the first TRADE_SPOT that we have seen on the specific source type in internal format.
    #[serde(rename = "FIRST_TRADE_SPOT_FROM_BACKFILL", skip_serializing_if = "Option::is_none")]
    pub first_trade_spot_from_backfill: Option<serde_json::Value>,
    /// This is the first TRADE_SPOT that we have seen on the specific source type in external format.
    #[serde(rename = "FIRST_TRADE_SPOT_FROM_BACKFILL_EXTERNAL", skip_serializing_if = "Option::is_none")]
    pub first_trade_spot_from_backfill_external: Option<serde_json::Value>,
    /// This is the first TRADE_SPOT that we have seen on the specific source type in internal format.
    #[serde(rename = "FIRST_TRADE_SPOT_FROM_BLOB", skip_serializing_if = "Option::is_none")]
    pub first_trade_spot_from_blob: Option<serde_json::Value>,
    /// This is the first TRADE_SPOT that we have seen on the specific source type in external format.
    #[serde(rename = "FIRST_TRADE_SPOT_FROM_BLOB_EXTERNAL", skip_serializing_if = "Option::is_none")]
    pub first_trade_spot_from_blob_external: Option<serde_json::Value>,
    /// This is the first TRADE_SPOT that we have seen on the specific source type in internal format.
    #[serde(rename = "FIRST_TRADE_SPOT_FROM_CALCULATED", skip_serializing_if = "Option::is_none")]
    pub first_trade_spot_from_calculated: Option<serde_json::Value>,
    /// This is the first TRADE_SPOT that we have seen on the specific source type in external format.
    #[serde(rename = "FIRST_TRADE_SPOT_FROM_CALCULATED_EXTERNAL", skip_serializing_if = "Option::is_none")]
    pub first_trade_spot_from_calculated_external: Option<serde_json::Value>,
    /// This is the first TRADE_SPOT that we have seen on the specific source type in internal format.
    #[serde(rename = "FIRST_TRADE_SPOT_FROM_FIX", skip_serializing_if = "Option::is_none")]
    pub first_trade_spot_from_fix: Option<serde_json::Value>,
    /// This is the first TRADE_SPOT that we have seen on the specific source type in external format.
    #[serde(rename = "FIRST_TRADE_SPOT_FROM_FIX_EXTERNAL", skip_serializing_if = "Option::is_none")]
    pub first_trade_spot_from_fix_external: Option<serde_json::Value>,
    /// This is the first TRADE_SPOT that we have seen on the specific source type in internal format.
    #[serde(rename = "FIRST_TRADE_SPOT_FROM_GO", skip_serializing_if = "Option::is_none")]
    pub first_trade_spot_from_go: Option<serde_json::Value>,
    /// This is the first TRADE_SPOT that we have seen on the specific source type in external format.
    #[serde(rename = "FIRST_TRADE_SPOT_FROM_GO_EXTERNAL", skip_serializing_if = "Option::is_none")]
    pub first_trade_spot_from_go_external: Option<serde_json::Value>,
    /// This is the first TRADE_SPOT that we have seen on the specific source type in internal format.
    #[serde(rename = "FIRST_TRADE_SPOT_FROM_POLLING", skip_serializing_if = "Option::is_none")]
    pub first_trade_spot_from_polling: Option<serde_json::Value>,
    /// This is the first TRADE_SPOT that we have seen on the specific source type in external format.
    #[serde(rename = "FIRST_TRADE_SPOT_FROM_POLLING_EXTERNAL", skip_serializing_if = "Option::is_none")]
    pub first_trade_spot_from_polling_external: Option<serde_json::Value>,
    /// This is the first TRADE_SPOT that we have seen on the specific source type in internal format.
    #[serde(rename = "FIRST_TRADE_SPOT_FROM_STREAMING", skip_serializing_if = "Option::is_none")]
    pub first_trade_spot_from_streaming: Option<serde_json::Value>,
    /// This is the first TRADE_SPOT that we have seen on the specific source type in external format.
    #[serde(rename = "FIRST_TRADE_SPOT_FROM_STREAMING_EXTERNAL", skip_serializing_if = "Option::is_none")]
    pub first_trade_spot_from_streaming_external: Option<serde_json::Value>,
    /// The migration destination vm hostname.
    #[serde(rename = "HOST_MIGRATION_DESTINATION", skip_serializing_if = "Option::is_none")]
    pub host_migration_destination: Option<String>,
    /// The migration source vm hostname.
    #[serde(rename = "HOST_MIGRATION_SOURCE", skip_serializing_if = "Option::is_none")]
    pub host_migration_source: Option<String>,
    /// The migration status of the symbol, we only poll / stream / connect empty or SETTLED
    #[serde(rename = "HOST_MIGRATION_STATUS", skip_serializing_if = "Option::is_none")]
    pub host_migration_status: Option<String>,
    /// The instrument ID as it is on the exchange with small modifications - we do not allow the following characters inside isntrument ids: ,/&?
    #[serde(rename = "INSTRUMENT", skip_serializing_if = "Option::is_none")]
    pub instrument: Option<String>,
    /// The full data we get from the polling endpoint for this specific instrument. This is a JSON stringified object with different properties per exchange.
    #[serde(rename = "INSTRUMENT_EXTERNAL_DATA", skip_serializing_if = "Option::is_none")]
    pub instrument_external_data: Option<String>,
    /// The current mapping information for this instrument
    #[serde(rename = "INSTRUMENT_MAPPING", skip_serializing_if = "Option::is_none")]
    pub instrument_mapping: Option<serde_json::Value>,
    /// Historical mapping information for this instrument
    #[serde(rename = "INSTRUMENT_MAPPING_HISTORY", skip_serializing_if = "Option::is_none")]
    pub instrument_mapping_history: Option<Vec<String>>,
    /// Where do we get the instrument id / INSTRUMENT_{messageName}_REST_URI / INSTRUMENT_{messageName}_STREAMING_SUBSCRIPTION etc from.
    #[serde(rename = "INSTRUMENT_SOURCE_BACKFILL", skip_serializing_if = "Option::is_none")]
    pub instrument_source_backfill: Option<String>,
    /// Where do we get the instrument id / INSTRUMENT_{messageName}_REST_URI / INSTRUMENT_{messageName}_STREAMING_SUBSCRIPTION etc from.
    #[serde(rename = "INSTRUMENT_SOURCE_BLOB", skip_serializing_if = "Option::is_none")]
    pub instrument_source_blob: Option<String>,
    /// Where do we get the instrument id / INSTRUMENT_{messageName}_REST_URI / INSTRUMENT_{messageName}_STREAMING_SUBSCRIPTION etc from.
    #[serde(rename = "INSTRUMENT_SOURCE_CALCULATED", skip_serializing_if = "Option::is_none")]
    pub instrument_source_calculated: Option<String>,
    /// Where do we get the instrument id / INSTRUMENT_{messageName}_REST_URI / INSTRUMENT_{messageName}_STREAMING_SUBSCRIPTION etc from.
    #[serde(rename = "INSTRUMENT_SOURCE_FIX", skip_serializing_if = "Option::is_none")]
    pub instrument_source_fix: Option<String>,
    /// Where do we get the instrument id / INSTRUMENT_{messageName}_REST_URI / INSTRUMENT_{messageName}_STREAMING_SUBSCRIPTION etc from.
    #[serde(rename = "INSTRUMENT_SOURCE_GO", skip_serializing_if = "Option::is_none")]
    pub instrument_source_go: Option<String>,
    /// Where do we get the instrument id / INSTRUMENT_{messageName}_REST_URI / INSTRUMENT_{messageName}_STREAMING_SUBSCRIPTION etc from.
    #[serde(rename = "INSTRUMENT_SOURCE_POLLING", skip_serializing_if = "Option::is_none")]
    pub instrument_source_polling: Option<String>,
    /// Where do we get the instrument id / INSTRUMENT_{messageName}_REST_URI / INSTRUMENT_{messageName}_STREAMING_SUBSCRIPTION etc from.
    #[serde(rename = "INSTRUMENT_SOURCE_STREAMING", skip_serializing_if = "Option::is_none")]
    pub instrument_source_streaming: Option<String>,
    /// The status of the symbol, we only poll / stream / connect to the ACTIVE ones, for the RETIRED / IGNORED / EXPIRED  one we no longer query for data.
    #[serde(rename = "INSTRUMENT_STATUS", skip_serializing_if = "Option::is_none")]
    pub instrument_status: Option<String>,
    /// The last proxied REST request we sent to the proxy swarm to get TRADE_SPOT for the instrument.
    #[serde(rename = "INSTRUMENT_TRADE_SPOT_FROM_BACKFILL_LAST_PROXIED_REST_REQUEST", skip_serializing_if = "Option::is_none")]
    pub instrument_trade_spot_from_backfill_last_proxied_rest_request: Option<serde_json::Value>,
    /// The last time we sent a request to the proxy swarm to get TRADE_SPOT for the instrument.
    #[serde(rename = "INSTRUMENT_TRADE_SPOT_FROM_BACKFILL_REST_URI_LAST_REQUEST_TS", skip_serializing_if = "Option::is_none")]
    pub instrument_trade_spot_from_backfill_rest_uri_last_request_ts: Option<i32>,
    /// The last time we received a request from the proxy swarm with TRADE_SPOT for this instrument.
    #[serde(rename = "INSTRUMENT_TRADE_SPOT_FROM_BACKFILL_REST_URI_LAST_RESPONSE_TS", skip_serializing_if = "Option::is_none")]
    pub instrument_trade_spot_from_backfill_rest_uri_last_response_ts: Option<i32>,
    /// The next time we expect to make a request for TRADE_SPOT on this instrument.
    #[serde(rename = "INSTRUMENT_TRADE_SPOT_FROM_BACKFILL_REST_URI_NEXT_REQUEST_TS", skip_serializing_if = "Option::is_none")]
    pub instrument_trade_spot_from_backfill_rest_uri_next_request_ts: Option<i32>,
    /// The last proxied REST request we sent to the proxy swarm to get TRADE_SPOT for the instrument.
    #[serde(rename = "INSTRUMENT_TRADE_SPOT_FROM_BLOB_LAST_PROXIED_REST_REQUEST", skip_serializing_if = "Option::is_none")]
    pub instrument_trade_spot_from_blob_last_proxied_rest_request: Option<serde_json::Value>,
    /// The last time we sent a request to the proxy swarm to get TRADE_SPOT for the instrument.
    #[serde(rename = "INSTRUMENT_TRADE_SPOT_FROM_BLOB_REST_URI_LAST_REQUEST_TS", skip_serializing_if = "Option::is_none")]
    pub instrument_trade_spot_from_blob_rest_uri_last_request_ts: Option<i32>,
    /// The last time we received a request from the proxy swarm with TRADE_SPOT for this instrument.
    #[serde(rename = "INSTRUMENT_TRADE_SPOT_FROM_BLOB_REST_URI_LAST_RESPONSE_TS", skip_serializing_if = "Option::is_none")]
    pub instrument_trade_spot_from_blob_rest_uri_last_response_ts: Option<i32>,
    /// The next time we expect to make a request for TRADE_SPOT on this instrument.
    #[serde(rename = "INSTRUMENT_TRADE_SPOT_FROM_BLOB_REST_URI_NEXT_REQUEST_TS", skip_serializing_if = "Option::is_none")]
    pub instrument_trade_spot_from_blob_rest_uri_next_request_ts: Option<i32>,
    /// The last proxied REST request we sent to the proxy swarm to get TRADE_SPOT for the instrument.
    #[serde(rename = "INSTRUMENT_TRADE_SPOT_FROM_CALCULATED_LAST_PROXIED_REST_REQUEST", skip_serializing_if = "Option::is_none")]
    pub instrument_trade_spot_from_calculated_last_proxied_rest_request: Option<serde_json::Value>,
    /// The last time we sent a request to the proxy swarm to get TRADE_SPOT for the instrument.
    #[serde(rename = "INSTRUMENT_TRADE_SPOT_FROM_CALCULATED_REST_URI_LAST_REQUEST_TS", skip_serializing_if = "Option::is_none")]
    pub instrument_trade_spot_from_calculated_rest_uri_last_request_ts: Option<i32>,
    /// The last time we received a request from the proxy swarm with TRADE_SPOT for this instrument.
    #[serde(rename = "INSTRUMENT_TRADE_SPOT_FROM_CALCULATED_REST_URI_LAST_RESPONSE_TS", skip_serializing_if = "Option::is_none")]
    pub instrument_trade_spot_from_calculated_rest_uri_last_response_ts: Option<i32>,
    /// The next time we expect to make a request for TRADE_SPOT on this instrument.
    #[serde(rename = "INSTRUMENT_TRADE_SPOT_FROM_CALCULATED_REST_URI_NEXT_REQUEST_TS", skip_serializing_if = "Option::is_none")]
    pub instrument_trade_spot_from_calculated_rest_uri_next_request_ts: Option<i32>,
    /// The last proxied REST request we sent to the proxy swarm to get TRADE_SPOT for the instrument.
    #[serde(rename = "INSTRUMENT_TRADE_SPOT_FROM_FIX_LAST_PROXIED_REST_REQUEST", skip_serializing_if = "Option::is_none")]
    pub instrument_trade_spot_from_fix_last_proxied_rest_request: Option<serde_json::Value>,
    /// The last time we sent a request to the proxy swarm to get TRADE_SPOT for the instrument.
    #[serde(rename = "INSTRUMENT_TRADE_SPOT_FROM_FIX_REST_URI_LAST_REQUEST_TS", skip_serializing_if = "Option::is_none")]
    pub instrument_trade_spot_from_fix_rest_uri_last_request_ts: Option<i32>,
    /// The last time we received a request from the proxy swarm with TRADE_SPOT for this instrument.
    #[serde(rename = "INSTRUMENT_TRADE_SPOT_FROM_FIX_REST_URI_LAST_RESPONSE_TS", skip_serializing_if = "Option::is_none")]
    pub instrument_trade_spot_from_fix_rest_uri_last_response_ts: Option<i32>,
    /// The next time we expect to make a request for TRADE_SPOT on this instrument.
    #[serde(rename = "INSTRUMENT_TRADE_SPOT_FROM_FIX_REST_URI_NEXT_REQUEST_TS", skip_serializing_if = "Option::is_none")]
    pub instrument_trade_spot_from_fix_rest_uri_next_request_ts: Option<i32>,
    /// The last proxied REST request we sent to the proxy swarm to get TRADE_SPOT for the instrument.
    #[serde(rename = "INSTRUMENT_TRADE_SPOT_FROM_GO_LAST_PROXIED_REST_REQUEST", skip_serializing_if = "Option::is_none")]
    pub instrument_trade_spot_from_go_last_proxied_rest_request: Option<serde_json::Value>,
    /// The last time we sent a request to the proxy swarm to get TRADE_SPOT for the instrument.
    #[serde(rename = "INSTRUMENT_TRADE_SPOT_FROM_GO_REST_URI_LAST_REQUEST_TS", skip_serializing_if = "Option::is_none")]
    pub instrument_trade_spot_from_go_rest_uri_last_request_ts: Option<i32>,
    /// The last time we received a request from the proxy swarm with TRADE_SPOT for this instrument.
    #[serde(rename = "INSTRUMENT_TRADE_SPOT_FROM_GO_REST_URI_LAST_RESPONSE_TS", skip_serializing_if = "Option::is_none")]
    pub instrument_trade_spot_from_go_rest_uri_last_response_ts: Option<i32>,
    /// The next time we expect to make a request for TRADE_SPOT on this instrument.
    #[serde(rename = "INSTRUMENT_TRADE_SPOT_FROM_GO_REST_URI_NEXT_REQUEST_TS", skip_serializing_if = "Option::is_none")]
    pub instrument_trade_spot_from_go_rest_uri_next_request_ts: Option<i32>,
    /// The last proxied REST request we sent to the proxy swarm to get TRADE_SPOT for the instrument.
    #[serde(rename = "INSTRUMENT_TRADE_SPOT_FROM_POLLING_LAST_PROXIED_REST_REQUEST", skip_serializing_if = "Option::is_none")]
    pub instrument_trade_spot_from_polling_last_proxied_rest_request: Option<serde_json::Value>,
    /// The last time we sent a request to the proxy swarm to get TRADE_SPOT for the instrument.
    #[serde(rename = "INSTRUMENT_TRADE_SPOT_FROM_POLLING_REST_URI_LAST_REQUEST_TS", skip_serializing_if = "Option::is_none")]
    pub instrument_trade_spot_from_polling_rest_uri_last_request_ts: Option<i32>,
    /// The last time we received a request from the proxy swarm with TRADE_SPOT for this instrument.
    #[serde(rename = "INSTRUMENT_TRADE_SPOT_FROM_POLLING_REST_URI_LAST_RESPONSE_TS", skip_serializing_if = "Option::is_none")]
    pub instrument_trade_spot_from_polling_rest_uri_last_response_ts: Option<i32>,
    /// The next time we expect to make a request for TRADE_SPOT on this instrument.
    #[serde(rename = "INSTRUMENT_TRADE_SPOT_FROM_POLLING_REST_URI_NEXT_REQUEST_TS", skip_serializing_if = "Option::is_none")]
    pub instrument_trade_spot_from_polling_rest_uri_next_request_ts: Option<i32>,
    /// The last proxied REST request we sent to the proxy swarm to get TRADE_SPOT for the instrument.
    #[serde(rename = "INSTRUMENT_TRADE_SPOT_FROM_STREAMING_LAST_PROXIED_REST_REQUEST", skip_serializing_if = "Option::is_none")]
    pub instrument_trade_spot_from_streaming_last_proxied_rest_request: Option<serde_json::Value>,
    /// The last time we sent a request to the proxy swarm to get TRADE_SPOT for the instrument.
    #[serde(rename = "INSTRUMENT_TRADE_SPOT_FROM_STREAMING_REST_URI_LAST_REQUEST_TS", skip_serializing_if = "Option::is_none")]
    pub instrument_trade_spot_from_streaming_rest_uri_last_request_ts: Option<i32>,
    /// The last time we received a request from the proxy swarm with TRADE_SPOT for this instrument.
    #[serde(rename = "INSTRUMENT_TRADE_SPOT_FROM_STREAMING_REST_URI_LAST_RESPONSE_TS", skip_serializing_if = "Option::is_none")]
    pub instrument_trade_spot_from_streaming_rest_uri_last_response_ts: Option<i32>,
    /// The next time we expect to make a request for TRADE_SPOT on this instrument.
    #[serde(rename = "INSTRUMENT_TRADE_SPOT_FROM_STREAMING_REST_URI_NEXT_REQUEST_TS", skip_serializing_if = "Option::is_none")]
    pub instrument_trade_spot_from_streaming_rest_uri_next_request_ts: Option<i32>,
    /// This flags the exchange instrument as in ready to consume TRADE_SPOT via a streaming integration.
    #[serde(rename = "INSTRUMENT_TRADE_SPOT_IS_READY_FOR_STREAMING_INTEGRATION", skip_serializing_if = "Option::is_none")]
    pub instrument_trade_spot_is_ready_for_streaming_integration: Option<bool>,
    /// This is used to build up the request in some cases, this is where we put the id we use when querying for TRADE_SPOT.
    #[serde(rename = "INSTRUMENT_TRADE_SPOT_REST_URI", skip_serializing_if = "Option::is_none")]
    pub instrument_trade_spot_rest_uri: Option<String>,
    /// The URL we send to the proxy swarm to get TRADE_SPOT for the instrument.
    #[serde(rename = "INSTRUMENT_TRADE_SPOT_REST_URL", skip_serializing_if = "Option::is_none")]
    pub instrument_trade_spot_rest_url: Option<String>,
    /// This is used to build up the subscription in some cases, this is where we put the id we use when subscribing for TRADE_SPOT on this instrument.
    #[serde(rename = "INSTRUMENT_TRADE_SPOT_STREAMING_SUBSCRIPTION", skip_serializing_if = "Option::is_none")]
    pub instrument_trade_spot_streaming_subscription: Option<String>,
    /// The timestamp last encountered where the batch of trades from TRADES_SPOT all occured at the same time. This is an issue when making the next request that requires polling by timestamp as a start/from parameter
    #[serde(rename = "LAST_CONCURRENT_BATCH_OF_TRADES_SPOT_MS", skip_serializing_if = "Option::is_none")]
    pub last_concurrent_batch_of_trades_spot_ms: Option<i32>,
    /// This is the last time instrument was seen on instrumentListSourceType BLOB.
    #[serde(rename = "LAST_SEEN_ON_BLOB_TS", skip_serializing_if = "Option::is_none")]
    pub last_seen_on_blob_ts: Option<i32>,
    /// This is the last time instrument was seen on instrumentListSourceType FIX.
    #[serde(rename = "LAST_SEEN_ON_FIX_TS", skip_serializing_if = "Option::is_none")]
    pub last_seen_on_fix_ts: Option<i32>,
    /// This is the last time instrument was seen on instrumentListSourceType HARDCODED.
    #[serde(rename = "LAST_SEEN_ON_HARDCODED_TS", skip_serializing_if = "Option::is_none")]
    pub last_seen_on_hardcoded_ts: Option<i32>,
    /// This is the last time instrument was seen on instrumentListSourceType INDEX_COMPOSITION.
    #[serde(rename = "LAST_SEEN_ON_INDEX_COMPOSITION_TS", skip_serializing_if = "Option::is_none")]
    pub last_seen_on_index_composition_ts: Option<i32>,
    /// This is the last time instrument was seen on instrumentListSourceType NSQ.
    #[serde(rename = "LAST_SEEN_ON_NSQ_TS", skip_serializing_if = "Option::is_none")]
    pub last_seen_on_nsq_ts: Option<i32>,
    /// This is the last time instrument was seen on instrumentListSourceType POLLING.
    #[serde(rename = "LAST_SEEN_ON_POLLING_TS", skip_serializing_if = "Option::is_none")]
    pub last_seen_on_polling_ts: Option<i32>,
    /// This is the last time instrument was seen on instrumentListSourceType STREAMING.
    #[serde(rename = "LAST_SEEN_ON_STREAMING_TS", skip_serializing_if = "Option::is_none")]
    pub last_seen_on_streaming_ts: Option<i32>,
    /// This is the last TRADE_SPOT that we have seen on the specific source type in internal format.
    #[serde(rename = "LAST_TRADE_SPOT_FROM_BACKFILL", skip_serializing_if = "Option::is_none")]
    pub last_trade_spot_from_backfill: Option<serde_json::Value>,
    /// This is the last TRADE_SPOT that we have seen on the specific trade source in external format.
    #[serde(rename = "LAST_TRADE_SPOT_FROM_BACKFILL_EXTERNAL", skip_serializing_if = "Option::is_none")]
    pub last_trade_spot_from_backfill_external: Option<serde_json::Value>,
    /// This is the last TRADE_SPOT that we have seen on the specific source type in internal format.
    #[serde(rename = "LAST_TRADE_SPOT_FROM_BLOB", skip_serializing_if = "Option::is_none")]
    pub last_trade_spot_from_blob: Option<serde_json::Value>,
    /// This is the last TRADE_SPOT that we have seen on the specific trade source in external format.
    #[serde(rename = "LAST_TRADE_SPOT_FROM_BLOB_EXTERNAL", skip_serializing_if = "Option::is_none")]
    pub last_trade_spot_from_blob_external: Option<serde_json::Value>,
    /// This is the last TRADE_SPOT that we have seen on the specific source type in internal format.
    #[serde(rename = "LAST_TRADE_SPOT_FROM_CALCULATED", skip_serializing_if = "Option::is_none")]
    pub last_trade_spot_from_calculated: Option<serde_json::Value>,
    /// This is the last TRADE_SPOT that we have seen on the specific trade source in external format.
    #[serde(rename = "LAST_TRADE_SPOT_FROM_CALCULATED_EXTERNAL", skip_serializing_if = "Option::is_none")]
    pub last_trade_spot_from_calculated_external: Option<serde_json::Value>,
    /// This is the last TRADE_SPOT that we have seen on the specific source type in internal format.
    #[serde(rename = "LAST_TRADE_SPOT_FROM_FIX", skip_serializing_if = "Option::is_none")]
    pub last_trade_spot_from_fix: Option<serde_json::Value>,
    /// This is the last TRADE_SPOT that we have seen on the specific trade source in external format.
    #[serde(rename = "LAST_TRADE_SPOT_FROM_FIX_EXTERNAL", skip_serializing_if = "Option::is_none")]
    pub last_trade_spot_from_fix_external: Option<serde_json::Value>,
    /// This is the last TRADE_SPOT that we have seen on the specific source type in internal format.
    #[serde(rename = "LAST_TRADE_SPOT_FROM_GO", skip_serializing_if = "Option::is_none")]
    pub last_trade_spot_from_go: Option<serde_json::Value>,
    /// This is the last TRADE_SPOT that we have seen on the specific trade source in external format.
    #[serde(rename = "LAST_TRADE_SPOT_FROM_GO_EXTERNAL", skip_serializing_if = "Option::is_none")]
    pub last_trade_spot_from_go_external: Option<serde_json::Value>,
    /// This is the last TRADE_SPOT that we have seen on the specific source type in internal format.
    #[serde(rename = "LAST_TRADE_SPOT_FROM_POLLING", skip_serializing_if = "Option::is_none")]
    pub last_trade_spot_from_polling: Option<serde_json::Value>,
    /// This is the last TRADE_SPOT that we have seen on the specific trade source in external format.
    #[serde(rename = "LAST_TRADE_SPOT_FROM_POLLING_EXTERNAL", skip_serializing_if = "Option::is_none")]
    pub last_trade_spot_from_polling_external: Option<serde_json::Value>,
    /// This is the last TRADE_SPOT that we have seen on the specific source type in internal format.
    #[serde(rename = "LAST_TRADE_SPOT_FROM_STREAMING", skip_serializing_if = "Option::is_none")]
    pub last_trade_spot_from_streaming: Option<serde_json::Value>,
    /// This is the last TRADE_SPOT that we have seen on the specific trade source in external format.
    #[serde(rename = "LAST_TRADE_SPOT_FROM_STREAMING_EXTERNAL", skip_serializing_if = "Option::is_none")]
    pub last_trade_spot_from_streaming_external: Option<serde_json::Value>,
    /// The version of metadata, used for version conversions/migrates.
    #[serde(rename = "METADATA_VERSION", skip_serializing_if = "Option::is_none")]
    pub metadata_version: Option<i32>,
    /// This states the status of blob migration for this intrument on this exchange.
    #[serde(rename = "PROCESSING_TRADES_FROM_BLOB_STATUS", skip_serializing_if = "Option::is_none")]
    pub processing_trades_from_blob_status: Option<String>,
    /// This is both the CCSEQ and the total TRADES_SPOT we have processed on this instrument
    #[serde(rename = "TOTAL_TRADES_SPOT", skip_serializing_if = "Option::is_none")]
    pub total_trades_spot: Option<i32>,
    /// This is any extra helper TRADE_SPOT data that we would need for creating polling requests or subscribing with non standard information and anything that is very specific to one exchange API/Integration and it does not fit any of the other existing fields and is definitly only updated or written in only one service.
    #[serde(rename = "UNSTRUCTURED_TRADE_SPOT_FROM_BACKFILL_INTERNAL_DATA", skip_serializing_if = "Option::is_none")]
    pub unstructured_trade_spot_from_backfill_internal_data: Option<serde_json::Value>,
    /// This is any extra helper TRADE_SPOT data that we would need for creating polling requests or subscribing with non standard information and anything that is very specific to one exchange API/Integration and it does not fit any of the other existing fields and is definitly only updated or written in only one service.
    #[serde(rename = "UNSTRUCTURED_TRADE_SPOT_FROM_BLOB_INTERNAL_DATA", skip_serializing_if = "Option::is_none")]
    pub unstructured_trade_spot_from_blob_internal_data: Option<serde_json::Value>,
    /// This is any extra helper TRADE_SPOT data that we would need for creating polling requests or subscribing with non standard information and anything that is very specific to one exchange API/Integration and it does not fit any of the other existing fields and is definitly only updated or written in only one service.
    #[serde(rename = "UNSTRUCTURED_TRADE_SPOT_FROM_CALCULATED_INTERNAL_DATA", skip_serializing_if = "Option::is_none")]
    pub unstructured_trade_spot_from_calculated_internal_data: Option<serde_json::Value>,
    /// This is any extra helper TRADE_SPOT data that we would need for creating polling requests or subscribing with non standard information and anything that is very specific to one exchange API/Integration and it does not fit any of the other existing fields and is definitly only updated or written in only one service.
    #[serde(rename = "UNSTRUCTURED_TRADE_SPOT_FROM_FIX_INTERNAL_DATA", skip_serializing_if = "Option::is_none")]
    pub unstructured_trade_spot_from_fix_internal_data: Option<serde_json::Value>,
    /// This is any extra helper TRADE_SPOT data that we would need for creating polling requests or subscribing with non standard information and anything that is very specific to one exchange API/Integration and it does not fit any of the other existing fields and is definitly only updated or written in only one service.
    #[serde(rename = "UNSTRUCTURED_TRADE_SPOT_FROM_GO_INTERNAL_DATA", skip_serializing_if = "Option::is_none")]
    pub unstructured_trade_spot_from_go_internal_data: Option<serde_json::Value>,
    /// This is any extra helper TRADE_SPOT data that we would need for creating polling requests or subscribing with non standard information and anything that is very specific to one exchange API/Integration and it does not fit any of the other existing fields and is definitly only updated or written in only one service.
    #[serde(rename = "UNSTRUCTURED_TRADE_SPOT_FROM_POLLING_INTERNAL_DATA", skip_serializing_if = "Option::is_none")]
    pub unstructured_trade_spot_from_polling_internal_data: Option<serde_json::Value>,
    /// This is any extra helper TRADE_SPOT data that we would need for creating polling requests or subscribing with non standard information and anything that is very specific to one exchange API/Integration and it does not fit any of the other existing fields and is definitly only updated or written in only one service.
    #[serde(rename = "UNSTRUCTURED_TRADE_SPOT_FROM_STREAMING_INTERNAL_DATA", skip_serializing_if = "Option::is_none")]
    pub unstructured_trade_spot_from_streaming_internal_data: Option<serde_json::Value>,
}

impl SpotInstrumentMetadata {
    pub fn new() -> SpotInstrumentMetadata {
        SpotInstrumentMetadata {
            first_seen_on_blob_ts: None,
            first_seen_on_fix_ts: None,
            first_seen_on_hardcoded_ts: None,
            first_seen_on_index_composition_ts: None,
            first_seen_on_nsq_ts: None,
            first_seen_on_polling_ts: None,
            first_seen_on_streaming_ts: None,
            first_trade_spot_from_backfill: None,
            first_trade_spot_from_backfill_external: None,
            first_trade_spot_from_blob: None,
            first_trade_spot_from_blob_external: None,
            first_trade_spot_from_calculated: None,
            first_trade_spot_from_calculated_external: None,
            first_trade_spot_from_fix: None,
            first_trade_spot_from_fix_external: None,
            first_trade_spot_from_go: None,
            first_trade_spot_from_go_external: None,
            first_trade_spot_from_polling: None,
            first_trade_spot_from_polling_external: None,
            first_trade_spot_from_streaming: None,
            first_trade_spot_from_streaming_external: None,
            host_migration_destination: None,
            host_migration_source: None,
            host_migration_status: None,
            instrument: None,
            instrument_external_data: None,
            instrument_mapping: None,
            instrument_mapping_history: None,
            instrument_source_backfill: None,
            instrument_source_blob: None,
            instrument_source_calculated: None,
            instrument_source_fix: None,
            instrument_source_go: None,
            instrument_source_polling: None,
            instrument_source_streaming: None,
            instrument_status: None,
            instrument_trade_spot_from_backfill_last_proxied_rest_request: None,
            instrument_trade_spot_from_backfill_rest_uri_last_request_ts: None,
            instrument_trade_spot_from_backfill_rest_uri_last_response_ts: None,
            instrument_trade_spot_from_backfill_rest_uri_next_request_ts: None,
            instrument_trade_spot_from_blob_last_proxied_rest_request: None,
            instrument_trade_spot_from_blob_rest_uri_last_request_ts: None,
            instrument_trade_spot_from_blob_rest_uri_last_response_ts: None,
            instrument_trade_spot_from_blob_rest_uri_next_request_ts: None,
            instrument_trade_spot_from_calculated_last_proxied_rest_request: None,
            instrument_trade_spot_from_calculated_rest_uri_last_request_ts: None,
            instrument_trade_spot_from_calculated_rest_uri_last_response_ts: None,
            instrument_trade_spot_from_calculated_rest_uri_next_request_ts: None,
            instrument_trade_spot_from_fix_last_proxied_rest_request: None,
            instrument_trade_spot_from_fix_rest_uri_last_request_ts: None,
            instrument_trade_spot_from_fix_rest_uri_last_response_ts: None,
            instrument_trade_spot_from_fix_rest_uri_next_request_ts: None,
            instrument_trade_spot_from_go_last_proxied_rest_request: None,
            instrument_trade_spot_from_go_rest_uri_last_request_ts: None,
            instrument_trade_spot_from_go_rest_uri_last_response_ts: None,
            instrument_trade_spot_from_go_rest_uri_next_request_ts: None,
            instrument_trade_spot_from_polling_last_proxied_rest_request: None,
            instrument_trade_spot_from_polling_rest_uri_last_request_ts: None,
            instrument_trade_spot_from_polling_rest_uri_last_response_ts: None,
            instrument_trade_spot_from_polling_rest_uri_next_request_ts: None,
            instrument_trade_spot_from_streaming_last_proxied_rest_request: None,
            instrument_trade_spot_from_streaming_rest_uri_last_request_ts: None,
            instrument_trade_spot_from_streaming_rest_uri_last_response_ts: None,
            instrument_trade_spot_from_streaming_rest_uri_next_request_ts: None,
            instrument_trade_spot_is_ready_for_streaming_integration: None,
            instrument_trade_spot_rest_uri: None,
            instrument_trade_spot_rest_url: None,
            instrument_trade_spot_streaming_subscription: None,
            last_concurrent_batch_of_trades_spot_ms: None,
            last_seen_on_blob_ts: None,
            last_seen_on_fix_ts: None,
            last_seen_on_hardcoded_ts: None,
            last_seen_on_index_composition_ts: None,
            last_seen_on_nsq_ts: None,
            last_seen_on_polling_ts: None,
            last_seen_on_streaming_ts: None,
            last_trade_spot_from_backfill: None,
            last_trade_spot_from_backfill_external: None,
            last_trade_spot_from_blob: None,
            last_trade_spot_from_blob_external: None,
            last_trade_spot_from_calculated: None,
            last_trade_spot_from_calculated_external: None,
            last_trade_spot_from_fix: None,
            last_trade_spot_from_fix_external: None,
            last_trade_spot_from_go: None,
            last_trade_spot_from_go_external: None,
            last_trade_spot_from_polling: None,
            last_trade_spot_from_polling_external: None,
            last_trade_spot_from_streaming: None,
            last_trade_spot_from_streaming_external: None,
            metadata_version: None,
            processing_trades_from_blob_status: None,
            total_trades_spot: None,
            unstructured_trade_spot_from_backfill_internal_data: None,
            unstructured_trade_spot_from_blob_internal_data: None,
            unstructured_trade_spot_from_calculated_internal_data: None,
            unstructured_trade_spot_from_fix_internal_data: None,
            unstructured_trade_spot_from_go_internal_data: None,
            unstructured_trade_spot_from_polling_internal_data: None,
            unstructured_trade_spot_from_streaming_internal_data: None,
        }
    }
}


