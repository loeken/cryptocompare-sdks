/*
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 *
 * CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: data@cryptocompare.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct SpotInstrumentHistoData {
    /// The mapped from asset (base / symbol/ coin) (e.g. BTC). Only available on instruments that have mapping.
    #[serde(rename = "BASE", skip_serializing_if = "Option::is_none")]
    pub base: Option<String>,
    /// The price of the last trade in this time period. If there were no trades in the time period, the open price will be given.
    #[serde(rename = "CLOSE", skip_serializing_if = "Option::is_none")]
    pub close: Option<i32>,
    /// The price of the first trade in the time period. This is only available when there is at least one trade in the time period.
    #[serde(rename = "FIRST_TRADE_PRICE", skip_serializing_if = "Option::is_none")]
    pub first_trade_price: Option<i32>,
    /// The timestamp, in seconds, of the first trade in this time perio. This is only available when there is at least one trade in the time period.
    #[serde(rename = "FIRST_TRADE_TIMESTAMP", skip_serializing_if = "Option::is_none")]
    pub first_trade_timestamp: Option<i32>,
    /// The highest trade price in the time period. If there were no trades in the time period, the open price will be given.
    #[serde(rename = "HIGH", skip_serializing_if = "Option::is_none")]
    pub high: Option<i32>,
    /// The highest value of the trades in the time period. This is only available when there is at least one trade in the time period.
    #[serde(rename = "HIGH_TRADE_PRICE", skip_serializing_if = "Option::is_none")]
    pub high_trade_price: Option<i32>,
    /// The timestamp, in seconds, of the highest trade in the time period. This is only available when there is at least one trade in the time period.
    #[serde(rename = "HIGH_TRADE_TIMESTAMP", skip_serializing_if = "Option::is_none")]
    pub high_trade_timestamp: Option<i32>,
    /// The unmapped instrument ID
    #[serde(rename = "INSTRUMENT", skip_serializing_if = "Option::is_none")]
    pub instrument: Option<String>,
    /// The last trade price in the time period. This is only available when there is at least one trade in the time period.
    #[serde(rename = "LAST_TRADE_PRICE", skip_serializing_if = "Option::is_none")]
    pub last_trade_price: Option<i32>,
    /// The timestamp, in seconds, of the last trade in this time period. This is only available when there is at least one trade in the time period.
    #[serde(rename = "LAST_TRADE_TIMESTAMP", skip_serializing_if = "Option::is_none")]
    pub last_trade_timestamp: Option<i32>,
    /// The lowest trade price in the time period. If there were no trades in the time period, the open price will be given.
    #[serde(rename = "LOW", skip_serializing_if = "Option::is_none")]
    pub low: Option<i32>,
    /// The lowest value of the trades in the time period. This is only available when there is at least one trade in the time period.
    #[serde(rename = "LOW_TRADE_PRICE", skip_serializing_if = "Option::is_none")]
    pub low_trade_price: Option<i32>,
    /// The timestamp, in seconds, of the lowest trade in the time period. This is only available when there is at least one trade in the time period.
    #[serde(rename = "LOW_TRADE_TIMESTAMP", skip_serializing_if = "Option::is_none")]
    pub low_trade_timestamp: Option<i32>,
    /// The instrument ID, as derived from our mapping rules. This takes the form \"BASE-QUOTE\" (e.g. BTC-USD). Only available on instruments that have been mapped.
    #[serde(rename = "MAPPED_INSTRUMENT", skip_serializing_if = "Option::is_none")]
    pub mapped_instrument: Option<String>,
    /// The market / exchange under consideration (e.g. gemini, kraken, coinbase, etc).
    #[serde(rename = "MARKET", skip_serializing_if = "Option::is_none")]
    pub market: Option<String>,
    /// The open price for the historical period, this is based on the closest trade before the period start.
    #[serde(rename = "OPEN", skip_serializing_if = "Option::is_none")]
    pub open: Option<i32>,
    /// The mapped to asset (quote / counter symbol / coin) (e.g. USD). Only available on instruments that have mapping.
    #[serde(rename = "QUOTE", skip_serializing_if = "Option::is_none")]
    pub quote: Option<String>,
    /// The sum of all the trade volumes in the To asset (quote/counter symbol/coin) for the time period. If there were no trades in the time period, 0 will be returned.
    #[serde(rename = "QUOTE_VOLUME", skip_serializing_if = "Option::is_none")]
    pub quote_volume: Option<i32>,
    /// The sum of all the BUY trade volumes in the to asset (quote/counter symbol/coin) for the time period.
    #[serde(rename = "QUOTE_VOLUME_BUY", skip_serializing_if = "Option::is_none")]
    pub quote_volume_buy: Option<i32>,
    /// The sum of all the SELL trade volumes in the To asset (quote/counter symbol/coin) for the time period.
    #[serde(rename = "QUOTE_VOLUME_SELL", skip_serializing_if = "Option::is_none")]
    pub quote_volume_sell: Option<i32>,
    /// The sum of all the UNKNOWN trade volumes in the To asset (quote/counter symbol/coin) for the time period.
    #[serde(rename = "QUOTE_VOLUME_UNKNOWN", skip_serializing_if = "Option::is_none")]
    pub quote_volume_unknown: Option<i32>,
    /// The timestamp in seconds of the beginning of the histo period. For minute it would be every minute at the beginning of the minute, for hour it would be the start of the hour and for daily it is 00:00 GMT.
    #[serde(rename = "TIMESTAMP", skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<i32>,
    /// The total number of trades seen in this time period. If there were no trades in the time period, 0 will be returned.
    #[serde(rename = "TOTAL_TRADES", skip_serializing_if = "Option::is_none")]
    pub total_trades: Option<i32>,
    /// The total number of BUY trades seen in this time period. If there were no trades in the time period, 0 will be returned.
    #[serde(rename = "TOTAL_TRADES_BUY", skip_serializing_if = "Option::is_none")]
    pub total_trades_buy: Option<i32>,
    /// The total number of SELL trades seen in this time period. If there were no trades in the time period, 0 will be returned.
    #[serde(rename = "TOTAL_TRADES_SELL", skip_serializing_if = "Option::is_none")]
    pub total_trades_sell: Option<i32>,
    /// The total number of UNKNOWN trades seen in this time period. If there were no trades in the time period, 0 will be returned.
    #[serde(rename = "TOTAL_TRADES_UNKNOWN", skip_serializing_if = "Option::is_none")]
    pub total_trades_unknown: Option<i32>,
    /// The type of the message.
    #[serde(rename = "TYPE", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
    /// The unit of the historical period update: MINUTE for minute, HOUR for hour and DAY for day.
    #[serde(rename = "UNIT", skip_serializing_if = "Option::is_none")]
    pub unit: Option<String>,
    /// The sum of all the trade volumes in the from asset (base symbol / coin) for the time period. If there were no trades in the time period, 0 will be returned.
    #[serde(rename = "VOLUME", skip_serializing_if = "Option::is_none")]
    pub volume: Option<i32>,
    /// The sum of all the BUY trade volumes in the from asset (base symbol / coin) for the time period.
    #[serde(rename = "VOLUME_BUY", skip_serializing_if = "Option::is_none")]
    pub volume_buy: Option<i32>,
    /// The sum of all the SELL trade volumes in the from asset (base symbol / coin) for the time period.
    #[serde(rename = "VOLUME_SELL", skip_serializing_if = "Option::is_none")]
    pub volume_sell: Option<i32>,
    /// The sum of all the UNKNOWN trade volumes in the from asset (base symbol / coin) for the time period.
    #[serde(rename = "VOLUME_UNKNOWN", skip_serializing_if = "Option::is_none")]
    pub volume_unknown: Option<i32>,
}

impl SpotInstrumentHistoData {
    pub fn new() -> SpotInstrumentHistoData {
        SpotInstrumentHistoData {
            base: None,
            close: None,
            first_trade_price: None,
            first_trade_timestamp: None,
            high: None,
            high_trade_price: None,
            high_trade_timestamp: None,
            instrument: None,
            last_trade_price: None,
            last_trade_timestamp: None,
            low: None,
            low_trade_price: None,
            low_trade_timestamp: None,
            mapped_instrument: None,
            market: None,
            open: None,
            quote: None,
            quote_volume: None,
            quote_volume_buy: None,
            quote_volume_sell: None,
            quote_volume_unknown: None,
            timestamp: None,
            total_trades: None,
            total_trades_buy: None,
            total_trades_sell: None,
            total_trades_unknown: None,
            r#type: None,
            unit: None,
            volume: None,
            volume_buy: None,
            volume_sell: None,
            volume_unknown: None,
        }
    }
}


