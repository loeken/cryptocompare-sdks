/*
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 *
 * CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: data@cryptocompare.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct SpotInstrumentTrade {
    /// The mapped from asset (base / symbol/ coin). Only available on instruments that have been mapped (e.g. BTC).
    #[serde(rename = "BASE", skip_serializing_if = "Option::is_none")]
    pub base: Option<String>,
    /// Our internal sequence number for this trade, this is unique per market / exchange and trading pair. Should always be increasing by 1 for each new trade we discover, not in chronological order.
    #[serde(rename = "CCSEQ", skip_serializing_if = "Option::is_none")]
    pub ccseq: Option<i32>,
    /// The trade ID as reported by the market / exchange. If the exchange does not provide a trade ID, this will be the timestamp of the trade + a number from 0 - 999. This preserves uniqueness, assuming there would never be more than 999 trades in any given second.
    #[serde(rename = "ID", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The unmapped instrument ID as given by the exchange (e.g. BTCUSD, BTC_USD, XBT-ZUSD, BTC-USD).
    #[serde(rename = "INSTRUMENT", skip_serializing_if = "Option::is_none")]
    pub instrument: Option<String>,
    /// The mapped instrument ID, as derived from our mapping rules. This takes the form: \"BASE-QUOTE\". Only available on instruments that have been mapped (e.g. BTC-USD).
    #[serde(rename = "MAPPED_INSTRUMENT", skip_serializing_if = "Option::is_none")]
    pub mapped_instrument: Option<String>,
    /// The market / exchange under consideration (e.g. Coinbase, Kraken, etc.).
    #[serde(rename = "MARKET", skip_serializing_if = "Option::is_none")]
    pub market: Option<String>,
    /// The price in the to instrument (quote / counter symbol / coin) of the trade. For a BTC-USD trade, this is how much was paid for one BTC in USD. For futures, this will be the price of the contract.
    #[serde(rename = "PRICE", skip_serializing_if = "Option::is_none")]
    pub price: Option<i32>,
    /// The volume of the trade, given in the from instrument (base symbol / coin/ contract). For a spot BTC-USD trade, this is how much BTC was traded at the trade price. For a futures BTCUSDPERP, this is the BTC equivalent for the contracts traded.
    #[serde(rename = "QUANTITY", skip_serializing_if = "Option::is_none")]
    pub quantity: Option<i32>,
    /// The mapped to asset (quote / counter symbol / coin). Only available on instruments that have been mapped (e.g. USD).
    #[serde(rename = "QUOTE", skip_serializing_if = "Option::is_none")]
    pub quote: Option<String>,
    /// The volume of the trade, given in the to instrument (quote / counter symbol / coin). This is equivalent to QUANTITY * PRICE. E.g. for a BTC-USD trade, this is how much USD was paid in total for the volume of BTC traded. For futures this is the quote currency equivalent for the contracts traded.
    #[serde(rename = "QUOTE_QUANTITY", skip_serializing_if = "Option::is_none")]
    pub quote_quantity: Option<i32>,
    /// The timestamp in seconds that the trade was received. This varies from the trade taking place on the market by a few millisconds to a few seconds depending on the market / exchange API options / rate limits.
    #[serde(rename = "RECEIVED_TIMESTAMP", skip_serializing_if = "Option::is_none")]
    pub received_timestamp: Option<i32>,
    /// The nanosecond part of the received timestamp.
    #[serde(rename = "RECEIVED_TIMESTAMP_NS", skip_serializing_if = "Option::is_none")]
    pub received_timestamp_ns: Option<i32>,
    /// The side of the trade: SELL, BUY or UNKNOWN. If the exchange / api does not provide a side, \"UNKNOWN\" will be returned.
    #[serde(rename = "SIDE", skip_serializing_if = "Option::is_none")]
    pub side: Option<String>,
    /// The source of the trade update: POLLING, STREAMING, GO, BLOB etc.
    #[serde(rename = "SOURCE", skip_serializing_if = "Option::is_none")]
    pub source: Option<String>,
    /// The timestamp in seconds as reported by the market / exchange or the received timestamp if the market / exchange does not provide one.
    #[serde(rename = "TIMESTAMP", skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<i32>,
    /// The nanosecond part of the reported timestamp.
    #[serde(rename = "TIMESTAMP_NS", skip_serializing_if = "Option::is_none")]
    pub timestamp_ns: Option<i32>,
    /// The type of the message.
    #[serde(rename = "TYPE", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
}

impl SpotInstrumentTrade {
    pub fn new() -> SpotInstrumentTrade {
        SpotInstrumentTrade {
            base: None,
            ccseq: None,
            id: None,
            instrument: None,
            mapped_instrument: None,
            market: None,
            price: None,
            quantity: None,
            quote: None,
            quote_quantity: None,
            received_timestamp: None,
            received_timestamp_ns: None,
            side: None,
            source: None,
            timestamp: None,
            timestamp_ns: None,
            r#type: None,
        }
    }
}


