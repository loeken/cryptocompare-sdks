/*
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 *
 * CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: data@cryptocompare.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method [`overview_v1_historical_marketcap_all_assets_days`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OverviewV1HistoricalMarketcapAllAssetsDaysError {
    Status400(crate::models::Error),
    Status401(crate::models::Error),
    Status403(crate::models::Error),
    Status404(crate::models::Error),
    Status405(crate::models::Error),
    Status429(crate::models::Error),
    Status500(crate::models::Error),
    Status502(crate::models::Error),
    Status503(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`overview_v1_historical_marketcap_all_assets_hours`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OverviewV1HistoricalMarketcapAllAssetsHoursError {
    Status400(crate::models::Error),
    Status401(crate::models::Error),
    Status403(crate::models::Error),
    Status404(crate::models::Error),
    Status405(crate::models::Error),
    Status429(crate::models::Error),
    Status500(crate::models::Error),
    Status502(crate::models::Error),
    Status503(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`overview_v1_historical_marketcap_ftw_assets_days`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OverviewV1HistoricalMarketcapFtwAssetsDaysError {
    Status400(crate::models::Error),
    Status401(crate::models::Error),
    Status403(crate::models::Error),
    Status404(crate::models::Error),
    Status405(crate::models::Error),
    Status429(crate::models::Error),
    Status500(crate::models::Error),
    Status502(crate::models::Error),
    Status503(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`overview_v1_historical_marketcap_ftw_assets_hours`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OverviewV1HistoricalMarketcapFtwAssetsHoursError {
    Status400(crate::models::Error),
    Status401(crate::models::Error),
    Status403(crate::models::Error),
    Status404(crate::models::Error),
    Status405(crate::models::Error),
    Status429(crate::models::Error),
    Status500(crate::models::Error),
    Status502(crate::models::Error),
    Status503(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`overview_v1_latest_marketcap_all_tick`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OverviewV1LatestMarketcapAllTickError {
    Status400(crate::models::Error),
    Status401(crate::models::Error),
    Status403(crate::models::Error),
    Status404(crate::models::Error),
    Status405(crate::models::Error),
    Status429(crate::models::Error),
    Status500(crate::models::Error),
    Status502(crate::models::Error),
    Status503(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`overview_v1_latest_marketcap_ftw_tick`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OverviewV1LatestMarketcapFtwTickError {
    Status400(crate::models::Error),
    Status401(crate::models::Error),
    Status403(crate::models::Error),
    Status404(crate::models::Error),
    Status405(crate::models::Error),
    Status429(crate::models::Error),
    Status500(crate::models::Error),
    Status502(crate::models::Error),
    Status503(crate::models::Error),
    UnknownValue(serde_json::Value),
}


pub async fn overview_v1_historical_marketcap_all_assets_days(configuration: &configuration::Configuration, groups: Option<Vec<String>>, limit: Option<i32>, to_ts: Option<i32>, aggregate: Option<i32>, fill: Option<bool>, response_format: Option<&str>) -> Result<crate::models::GenericResponse, Error<OverviewV1HistoricalMarketcapAllAssetsDaysError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/overview/v1/historical/marketcap/all/assets/days", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = groups {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("groups".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("groups", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = to_ts {
        local_var_req_builder = local_var_req_builder.query(&[("to_ts", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = aggregate {
        local_var_req_builder = local_var_req_builder.query(&[("aggregate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill {
        local_var_req_builder = local_var_req_builder.query(&[("fill", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = response_format {
        local_var_req_builder = local_var_req_builder.query(&[("response_format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<OverviewV1HistoricalMarketcapAllAssetsDaysError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn overview_v1_historical_marketcap_all_assets_hours(configuration: &configuration::Configuration, groups: Option<Vec<String>>, limit: Option<i32>, to_ts: Option<i32>, aggregate: Option<i32>, fill: Option<bool>, response_format: Option<&str>) -> Result<crate::models::GenericResponse, Error<OverviewV1HistoricalMarketcapAllAssetsHoursError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/overview/v1/historical/marketcap/all/assets/hours", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = groups {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("groups".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("groups", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = to_ts {
        local_var_req_builder = local_var_req_builder.query(&[("to_ts", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = aggregate {
        local_var_req_builder = local_var_req_builder.query(&[("aggregate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill {
        local_var_req_builder = local_var_req_builder.query(&[("fill", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = response_format {
        local_var_req_builder = local_var_req_builder.query(&[("response_format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<OverviewV1HistoricalMarketcapAllAssetsHoursError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn overview_v1_historical_marketcap_ftw_assets_days(configuration: &configuration::Configuration, groups: Option<Vec<String>>, limit: Option<i32>, to_ts: Option<i32>, aggregate: Option<i32>, fill: Option<bool>, response_format: Option<&str>) -> Result<crate::models::GenericResponse, Error<OverviewV1HistoricalMarketcapFtwAssetsDaysError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/overview/v1/historical/marketcap/ftw/assets/days", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = groups {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("groups".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("groups", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = to_ts {
        local_var_req_builder = local_var_req_builder.query(&[("to_ts", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = aggregate {
        local_var_req_builder = local_var_req_builder.query(&[("aggregate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill {
        local_var_req_builder = local_var_req_builder.query(&[("fill", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = response_format {
        local_var_req_builder = local_var_req_builder.query(&[("response_format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<OverviewV1HistoricalMarketcapFtwAssetsDaysError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn overview_v1_historical_marketcap_ftw_assets_hours(configuration: &configuration::Configuration, groups: Option<Vec<String>>, limit: Option<i32>, to_ts: Option<i32>, aggregate: Option<i32>, fill: Option<bool>, response_format: Option<&str>) -> Result<crate::models::GenericResponse, Error<OverviewV1HistoricalMarketcapFtwAssetsHoursError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/overview/v1/historical/marketcap/ftw/assets/hours", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = groups {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("groups".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("groups", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = to_ts {
        local_var_req_builder = local_var_req_builder.query(&[("to_ts", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = aggregate {
        local_var_req_builder = local_var_req_builder.query(&[("aggregate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill {
        local_var_req_builder = local_var_req_builder.query(&[("fill", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = response_format {
        local_var_req_builder = local_var_req_builder.query(&[("response_format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<OverviewV1HistoricalMarketcapFtwAssetsHoursError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn overview_v1_latest_marketcap_all_tick(configuration: &configuration::Configuration, groups: Option<Vec<String>>) -> Result<crate::models::GenericResponse, Error<OverviewV1LatestMarketcapAllTickError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/overview/v1/latest/marketcap/all/tick", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = groups {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("groups".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("groups", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<OverviewV1LatestMarketcapAllTickError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn overview_v1_latest_marketcap_ftw_tick(configuration: &configuration::Configuration, groups: Option<Vec<String>>) -> Result<crate::models::GenericResponse, Error<OverviewV1LatestMarketcapFtwTickError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/overview/v1/latest/marketcap/ftw/tick", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = groups {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("groups".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("groups", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<OverviewV1LatestMarketcapFtwTickError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

