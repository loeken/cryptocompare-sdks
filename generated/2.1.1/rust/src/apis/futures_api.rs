/*
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 *
 * CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: data@cryptocompare.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method [`futures_v1_historical_days`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FuturesV1HistoricalDaysError {
    Status400(crate::models::Error),
    Status401(crate::models::Error),
    Status403(crate::models::Error),
    Status404(crate::models::Error),
    Status405(crate::models::Error),
    Status429(crate::models::Error),
    Status500(crate::models::Error),
    Status502(crate::models::Error),
    Status503(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`futures_v1_historical_funding_rate_days`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FuturesV1HistoricalFundingRateDaysError {
    Status400(crate::models::Error),
    Status401(crate::models::Error),
    Status403(crate::models::Error),
    Status404(crate::models::Error),
    Status405(crate::models::Error),
    Status429(crate::models::Error),
    Status500(crate::models::Error),
    Status502(crate::models::Error),
    Status503(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`futures_v1_historical_funding_rate_hours`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FuturesV1HistoricalFundingRateHoursError {
    Status400(crate::models::Error),
    Status401(crate::models::Error),
    Status403(crate::models::Error),
    Status404(crate::models::Error),
    Status405(crate::models::Error),
    Status429(crate::models::Error),
    Status500(crate::models::Error),
    Status502(crate::models::Error),
    Status503(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`futures_v1_historical_funding_rate_messages`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FuturesV1HistoricalFundingRateMessagesError {
    Status400(crate::models::Error),
    Status401(crate::models::Error),
    Status403(crate::models::Error),
    Status404(crate::models::Error),
    Status405(crate::models::Error),
    Status429(crate::models::Error),
    Status500(crate::models::Error),
    Status502(crate::models::Error),
    Status503(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`futures_v1_historical_funding_rate_messages_hour`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FuturesV1HistoricalFundingRateMessagesHourError {
    Status400(crate::models::Error),
    Status401(crate::models::Error),
    Status403(crate::models::Error),
    Status404(crate::models::Error),
    Status405(crate::models::Error),
    Status429(crate::models::Error),
    Status500(crate::models::Error),
    Status502(crate::models::Error),
    Status503(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`futures_v1_historical_funding_rate_minutes`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FuturesV1HistoricalFundingRateMinutesError {
    Status400(crate::models::Error),
    Status401(crate::models::Error),
    Status403(crate::models::Error),
    Status404(crate::models::Error),
    Status405(crate::models::Error),
    Status429(crate::models::Error),
    Status500(crate::models::Error),
    Status502(crate::models::Error),
    Status503(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`futures_v1_historical_hours`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FuturesV1HistoricalHoursError {
    Status400(crate::models::Error),
    Status401(crate::models::Error),
    Status403(crate::models::Error),
    Status404(crate::models::Error),
    Status405(crate::models::Error),
    Status429(crate::models::Error),
    Status500(crate::models::Error),
    Status502(crate::models::Error),
    Status503(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`futures_v1_historical_minutes`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FuturesV1HistoricalMinutesError {
    Status400(crate::models::Error),
    Status401(crate::models::Error),
    Status403(crate::models::Error),
    Status404(crate::models::Error),
    Status405(crate::models::Error),
    Status429(crate::models::Error),
    Status500(crate::models::Error),
    Status502(crate::models::Error),
    Status503(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`futures_v1_historical_open_interest_days`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FuturesV1HistoricalOpenInterestDaysError {
    Status400(crate::models::Error),
    Status401(crate::models::Error),
    Status403(crate::models::Error),
    Status404(crate::models::Error),
    Status405(crate::models::Error),
    Status429(crate::models::Error),
    Status500(crate::models::Error),
    Status502(crate::models::Error),
    Status503(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`futures_v1_historical_open_interest_hours`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FuturesV1HistoricalOpenInterestHoursError {
    Status400(crate::models::Error),
    Status401(crate::models::Error),
    Status403(crate::models::Error),
    Status404(crate::models::Error),
    Status405(crate::models::Error),
    Status429(crate::models::Error),
    Status500(crate::models::Error),
    Status502(crate::models::Error),
    Status503(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`futures_v1_historical_open_interest_messages`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FuturesV1HistoricalOpenInterestMessagesError {
    Status400(crate::models::Error),
    Status401(crate::models::Error),
    Status403(crate::models::Error),
    Status404(crate::models::Error),
    Status405(crate::models::Error),
    Status429(crate::models::Error),
    Status500(crate::models::Error),
    Status502(crate::models::Error),
    Status503(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`futures_v1_historical_open_interest_messages_hour`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FuturesV1HistoricalOpenInterestMessagesHourError {
    Status400(crate::models::Error),
    Status401(crate::models::Error),
    Status403(crate::models::Error),
    Status404(crate::models::Error),
    Status405(crate::models::Error),
    Status429(crate::models::Error),
    Status500(crate::models::Error),
    Status502(crate::models::Error),
    Status503(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`futures_v1_historical_open_interest_minutes`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FuturesV1HistoricalOpenInterestMinutesError {
    Status400(crate::models::Error),
    Status401(crate::models::Error),
    Status403(crate::models::Error),
    Status404(crate::models::Error),
    Status405(crate::models::Error),
    Status429(crate::models::Error),
    Status500(crate::models::Error),
    Status502(crate::models::Error),
    Status503(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`futures_v1_historical_trades`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FuturesV1HistoricalTradesError {
    Status400(crate::models::Error),
    Status401(crate::models::Error),
    Status403(crate::models::Error),
    Status404(crate::models::Error),
    Status405(crate::models::Error),
    Status429(crate::models::Error),
    Status500(crate::models::Error),
    Status502(crate::models::Error),
    Status503(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`futures_v1_historical_trades_hour`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FuturesV1HistoricalTradesHourError {
    Status400(crate::models::Error),
    Status401(crate::models::Error),
    Status403(crate::models::Error),
    Status404(crate::models::Error),
    Status405(crate::models::Error),
    Status429(crate::models::Error),
    Status500(crate::models::Error),
    Status502(crate::models::Error),
    Status503(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`futures_v1_latest_funding_rate_tick`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FuturesV1LatestFundingRateTickError {
    Status400(crate::models::Error),
    Status401(crate::models::Error),
    Status403(crate::models::Error),
    Status404(crate::models::Error),
    Status405(crate::models::Error),
    Status429(crate::models::Error),
    Status500(crate::models::Error),
    Status502(crate::models::Error),
    Status503(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`futures_v1_latest_instrument_metadata`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FuturesV1LatestInstrumentMetadataError {
    Status400(crate::models::Error),
    Status401(crate::models::Error),
    Status403(crate::models::Error),
    Status404(crate::models::Error),
    Status405(crate::models::Error),
    Status429(crate::models::Error),
    Status500(crate::models::Error),
    Status502(crate::models::Error),
    Status503(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`futures_v1_latest_open_interest_tick`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FuturesV1LatestOpenInterestTickError {
    Status400(crate::models::Error),
    Status401(crate::models::Error),
    Status403(crate::models::Error),
    Status404(crate::models::Error),
    Status405(crate::models::Error),
    Status429(crate::models::Error),
    Status500(crate::models::Error),
    Status502(crate::models::Error),
    Status503(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`futures_v1_latest_tick`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FuturesV1LatestTickError {
    Status400(crate::models::Error),
    Status401(crate::models::Error),
    Status403(crate::models::Error),
    Status404(crate::models::Error),
    Status405(crate::models::Error),
    Status429(crate::models::Error),
    Status500(crate::models::Error),
    Status502(crate::models::Error),
    Status503(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`futures_v1_markets`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FuturesV1MarketsError {
    Status400(crate::models::Error),
    Status401(crate::models::Error),
    Status403(crate::models::Error),
    Status404(crate::models::Error),
    Status405(crate::models::Error),
    Status429(crate::models::Error),
    Status500(crate::models::Error),
    Status502(crate::models::Error),
    Status503(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`futures_v1_markets_instruments`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FuturesV1MarketsInstrumentsError {
    Status400(crate::models::Error),
    Status401(crate::models::Error),
    Status403(crate::models::Error),
    Status404(crate::models::Error),
    Status405(crate::models::Error),
    Status429(crate::models::Error),
    Status500(crate::models::Error),
    Status502(crate::models::Error),
    Status503(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`futures_v1_markets_instruments_unmapped`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FuturesV1MarketsInstrumentsUnmappedError {
    Status400(crate::models::Error),
    Status401(crate::models::Error),
    Status403(crate::models::Error),
    Status404(crate::models::Error),
    Status405(crate::models::Error),
    Status429(crate::models::Error),
    Status500(crate::models::Error),
    Status502(crate::models::Error),
    Status503(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`index_v1_historical_days`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum IndexV1HistoricalDaysError {
    Status400(crate::models::Error),
    Status401(crate::models::Error),
    Status403(crate::models::Error),
    Status404(crate::models::Error),
    Status405(crate::models::Error),
    Status429(crate::models::Error),
    Status500(crate::models::Error),
    Status502(crate::models::Error),
    Status503(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`index_v1_historical_hours`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum IndexV1HistoricalHoursError {
    Status400(crate::models::Error),
    Status401(crate::models::Error),
    Status403(crate::models::Error),
    Status404(crate::models::Error),
    Status405(crate::models::Error),
    Status429(crate::models::Error),
    Status500(crate::models::Error),
    Status502(crate::models::Error),
    Status503(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`index_v1_historical_messages`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum IndexV1HistoricalMessagesError {
    Status400(crate::models::Error),
    Status401(crate::models::Error),
    Status403(crate::models::Error),
    Status404(crate::models::Error),
    Status405(crate::models::Error),
    Status429(crate::models::Error),
    Status500(crate::models::Error),
    Status502(crate::models::Error),
    Status503(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`index_v1_historical_messages_hour`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum IndexV1HistoricalMessagesHourError {
    Status400(crate::models::Error),
    Status401(crate::models::Error),
    Status403(crate::models::Error),
    Status404(crate::models::Error),
    Status405(crate::models::Error),
    Status429(crate::models::Error),
    Status500(crate::models::Error),
    Status502(crate::models::Error),
    Status503(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`index_v1_historical_minutes`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum IndexV1HistoricalMinutesError {
    Status400(crate::models::Error),
    Status401(crate::models::Error),
    Status403(crate::models::Error),
    Status404(crate::models::Error),
    Status405(crate::models::Error),
    Status429(crate::models::Error),
    Status500(crate::models::Error),
    Status502(crate::models::Error),
    Status503(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`index_v1_latest_instrument_metadata`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum IndexV1LatestInstrumentMetadataError {
    Status400(crate::models::Error),
    Status401(crate::models::Error),
    Status403(crate::models::Error),
    Status404(crate::models::Error),
    Status405(crate::models::Error),
    Status429(crate::models::Error),
    Status500(crate::models::Error),
    Status502(crate::models::Error),
    Status503(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`index_v1_latest_tick`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum IndexV1LatestTickError {
    Status400(crate::models::Error),
    Status401(crate::models::Error),
    Status403(crate::models::Error),
    Status404(crate::models::Error),
    Status405(crate::models::Error),
    Status429(crate::models::Error),
    Status500(crate::models::Error),
    Status502(crate::models::Error),
    Status503(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`index_v1_markets`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum IndexV1MarketsError {
    Status400(crate::models::Error),
    Status401(crate::models::Error),
    Status403(crate::models::Error),
    Status404(crate::models::Error),
    Status405(crate::models::Error),
    Status429(crate::models::Error),
    Status500(crate::models::Error),
    Status502(crate::models::Error),
    Status503(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`index_v1_markets_instruments`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum IndexV1MarketsInstrumentsError {
    Status400(crate::models::Error),
    Status401(crate::models::Error),
    Status403(crate::models::Error),
    Status404(crate::models::Error),
    Status405(crate::models::Error),
    Status429(crate::models::Error),
    Status500(crate::models::Error),
    Status502(crate::models::Error),
    Status503(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`index_v1_markets_instruments_unmapped`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum IndexV1MarketsInstrumentsUnmappedError {
    Status400(crate::models::Error),
    Status401(crate::models::Error),
    Status403(crate::models::Error),
    Status404(crate::models::Error),
    Status405(crate::models::Error),
    Status429(crate::models::Error),
    Status500(crate::models::Error),
    Status502(crate::models::Error),
    Status503(crate::models::Error),
    UnknownValue(serde_json::Value),
}


pub async fn futures_v1_historical_days(configuration: &configuration::Configuration, market: &str, instrument: &str, groups: Option<Vec<String>>, limit: Option<i32>, to_ts: Option<i32>, aggregate: Option<i32>, fill: Option<bool>, mapping_priority: Option<&str>, response_format: Option<&str>) -> Result<crate::models::GenericResponse, Error<FuturesV1HistoricalDaysError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/futures/v1/historical/days", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("market", &market.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("instrument", &instrument.to_string())]);
    if let Some(ref local_var_str) = groups {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("groups".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("groups", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = to_ts {
        local_var_req_builder = local_var_req_builder.query(&[("to_ts", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = aggregate {
        local_var_req_builder = local_var_req_builder.query(&[("aggregate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill {
        local_var_req_builder = local_var_req_builder.query(&[("fill", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mapping_priority {
        local_var_req_builder = local_var_req_builder.query(&[("mapping_priority", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = response_format {
        local_var_req_builder = local_var_req_builder.query(&[("response_format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<FuturesV1HistoricalDaysError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn futures_v1_historical_funding_rate_days(configuration: &configuration::Configuration, market: &str, instrument: &str, groups: Option<Vec<String>>, limit: Option<i32>, to_ts: Option<i32>, aggregate: Option<i32>, fill: Option<bool>, mapping_priority: Option<&str>, response_format: Option<&str>) -> Result<crate::models::GenericResponse, Error<FuturesV1HistoricalFundingRateDaysError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/futures/v1/historical/funding-rate/days", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("market", &market.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("instrument", &instrument.to_string())]);
    if let Some(ref local_var_str) = groups {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("groups".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("groups", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = to_ts {
        local_var_req_builder = local_var_req_builder.query(&[("to_ts", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = aggregate {
        local_var_req_builder = local_var_req_builder.query(&[("aggregate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill {
        local_var_req_builder = local_var_req_builder.query(&[("fill", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mapping_priority {
        local_var_req_builder = local_var_req_builder.query(&[("mapping_priority", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = response_format {
        local_var_req_builder = local_var_req_builder.query(&[("response_format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<FuturesV1HistoricalFundingRateDaysError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn futures_v1_historical_funding_rate_hours(configuration: &configuration::Configuration, market: &str, instrument: &str, groups: Option<Vec<String>>, limit: Option<i32>, to_ts: Option<i32>, aggregate: Option<i32>, fill: Option<bool>, mapping_priority: Option<&str>, response_format: Option<&str>) -> Result<crate::models::GenericResponse, Error<FuturesV1HistoricalFundingRateHoursError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/futures/v1/historical/funding-rate/hours", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("market", &market.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("instrument", &instrument.to_string())]);
    if let Some(ref local_var_str) = groups {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("groups".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("groups", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = to_ts {
        local_var_req_builder = local_var_req_builder.query(&[("to_ts", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = aggregate {
        local_var_req_builder = local_var_req_builder.query(&[("aggregate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill {
        local_var_req_builder = local_var_req_builder.query(&[("fill", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mapping_priority {
        local_var_req_builder = local_var_req_builder.query(&[("mapping_priority", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = response_format {
        local_var_req_builder = local_var_req_builder.query(&[("response_format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<FuturesV1HistoricalFundingRateHoursError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn futures_v1_historical_funding_rate_messages(configuration: &configuration::Configuration, market: &str, instrument: &str, after_ts: Option<i32>, last_ccseq: Option<i32>, limit: Option<i32>, mapping_priority: Option<&str>, response_format: Option<&str>, return_404_on_empty_response: Option<bool>) -> Result<crate::models::GenericResponse, Error<FuturesV1HistoricalFundingRateMessagesError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/futures/v1/historical/funding-rate-messages", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("market", &market.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("instrument", &instrument.to_string())]);
    if let Some(ref local_var_str) = after_ts {
        local_var_req_builder = local_var_req_builder.query(&[("after_ts", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_ccseq {
        local_var_req_builder = local_var_req_builder.query(&[("last_ccseq", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mapping_priority {
        local_var_req_builder = local_var_req_builder.query(&[("mapping_priority", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = response_format {
        local_var_req_builder = local_var_req_builder.query(&[("response_format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = return_404_on_empty_response {
        local_var_req_builder = local_var_req_builder.query(&[("return_404_on_empty_response", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("api_key", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<FuturesV1HistoricalFundingRateMessagesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn futures_v1_historical_funding_rate_messages_hour(configuration: &configuration::Configuration, market: &str, instrument: &str, hour_ts: Option<i32>, mapping_priority: Option<&str>, response_format: Option<&str>, return_404_on_empty_response: Option<bool>) -> Result<crate::models::GenericResponse, Error<FuturesV1HistoricalFundingRateMessagesHourError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/futures/v1/historical/funding-rate-messages/hour", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("market", &market.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("instrument", &instrument.to_string())]);
    if let Some(ref local_var_str) = hour_ts {
        local_var_req_builder = local_var_req_builder.query(&[("hour_ts", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mapping_priority {
        local_var_req_builder = local_var_req_builder.query(&[("mapping_priority", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = response_format {
        local_var_req_builder = local_var_req_builder.query(&[("response_format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = return_404_on_empty_response {
        local_var_req_builder = local_var_req_builder.query(&[("return_404_on_empty_response", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("api_key", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<FuturesV1HistoricalFundingRateMessagesHourError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn futures_v1_historical_funding_rate_minutes(configuration: &configuration::Configuration, market: &str, instrument: &str, groups: Option<Vec<String>>, limit: Option<i32>, to_ts: Option<i32>, aggregate: Option<i32>, fill: Option<bool>, mapping_priority: Option<&str>, response_format: Option<&str>) -> Result<crate::models::GenericResponse, Error<FuturesV1HistoricalFundingRateMinutesError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/futures/v1/historical/funding-rate/minutes", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("market", &market.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("instrument", &instrument.to_string())]);
    if let Some(ref local_var_str) = groups {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("groups".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("groups", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = to_ts {
        local_var_req_builder = local_var_req_builder.query(&[("to_ts", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = aggregate {
        local_var_req_builder = local_var_req_builder.query(&[("aggregate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill {
        local_var_req_builder = local_var_req_builder.query(&[("fill", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mapping_priority {
        local_var_req_builder = local_var_req_builder.query(&[("mapping_priority", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = response_format {
        local_var_req_builder = local_var_req_builder.query(&[("response_format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<FuturesV1HistoricalFundingRateMinutesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn futures_v1_historical_hours(configuration: &configuration::Configuration, market: &str, instrument: &str, groups: Option<Vec<String>>, limit: Option<i32>, to_ts: Option<i32>, aggregate: Option<i32>, fill: Option<bool>, mapping_priority: Option<&str>, response_format: Option<&str>) -> Result<crate::models::GenericResponse, Error<FuturesV1HistoricalHoursError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/futures/v1/historical/hours", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("market", &market.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("instrument", &instrument.to_string())]);
    if let Some(ref local_var_str) = groups {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("groups".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("groups", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = to_ts {
        local_var_req_builder = local_var_req_builder.query(&[("to_ts", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = aggregate {
        local_var_req_builder = local_var_req_builder.query(&[("aggregate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill {
        local_var_req_builder = local_var_req_builder.query(&[("fill", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mapping_priority {
        local_var_req_builder = local_var_req_builder.query(&[("mapping_priority", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = response_format {
        local_var_req_builder = local_var_req_builder.query(&[("response_format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<FuturesV1HistoricalHoursError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn futures_v1_historical_minutes(configuration: &configuration::Configuration, market: &str, instrument: &str, groups: Option<Vec<String>>, limit: Option<i32>, to_ts: Option<i32>, aggregate: Option<i32>, fill: Option<bool>, mapping_priority: Option<&str>, response_format: Option<&str>) -> Result<crate::models::GenericResponse, Error<FuturesV1HistoricalMinutesError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/futures/v1/historical/minutes", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("market", &market.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("instrument", &instrument.to_string())]);
    if let Some(ref local_var_str) = groups {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("groups".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("groups", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = to_ts {
        local_var_req_builder = local_var_req_builder.query(&[("to_ts", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = aggregate {
        local_var_req_builder = local_var_req_builder.query(&[("aggregate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill {
        local_var_req_builder = local_var_req_builder.query(&[("fill", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mapping_priority {
        local_var_req_builder = local_var_req_builder.query(&[("mapping_priority", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = response_format {
        local_var_req_builder = local_var_req_builder.query(&[("response_format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<FuturesV1HistoricalMinutesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn futures_v1_historical_open_interest_days(configuration: &configuration::Configuration, market: &str, instrument: &str, groups: Option<Vec<String>>, limit: Option<i32>, to_ts: Option<i32>, aggregate: Option<i32>, fill: Option<bool>, mapping_priority: Option<&str>, response_format: Option<&str>) -> Result<crate::models::GenericResponse, Error<FuturesV1HistoricalOpenInterestDaysError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/futures/v1/historical/open-interest/days", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("market", &market.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("instrument", &instrument.to_string())]);
    if let Some(ref local_var_str) = groups {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("groups".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("groups", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = to_ts {
        local_var_req_builder = local_var_req_builder.query(&[("to_ts", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = aggregate {
        local_var_req_builder = local_var_req_builder.query(&[("aggregate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill {
        local_var_req_builder = local_var_req_builder.query(&[("fill", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mapping_priority {
        local_var_req_builder = local_var_req_builder.query(&[("mapping_priority", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = response_format {
        local_var_req_builder = local_var_req_builder.query(&[("response_format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<FuturesV1HistoricalOpenInterestDaysError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn futures_v1_historical_open_interest_hours(configuration: &configuration::Configuration, market: &str, instrument: &str, groups: Option<Vec<String>>, limit: Option<i32>, to_ts: Option<i32>, aggregate: Option<i32>, fill: Option<bool>, mapping_priority: Option<&str>, response_format: Option<&str>) -> Result<crate::models::GenericResponse, Error<FuturesV1HistoricalOpenInterestHoursError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/futures/v1/historical/open-interest/hours", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("market", &market.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("instrument", &instrument.to_string())]);
    if let Some(ref local_var_str) = groups {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("groups".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("groups", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = to_ts {
        local_var_req_builder = local_var_req_builder.query(&[("to_ts", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = aggregate {
        local_var_req_builder = local_var_req_builder.query(&[("aggregate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill {
        local_var_req_builder = local_var_req_builder.query(&[("fill", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mapping_priority {
        local_var_req_builder = local_var_req_builder.query(&[("mapping_priority", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = response_format {
        local_var_req_builder = local_var_req_builder.query(&[("response_format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<FuturesV1HistoricalOpenInterestHoursError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn futures_v1_historical_open_interest_messages(configuration: &configuration::Configuration, market: &str, instrument: &str, after_ts: Option<i32>, last_ccseq: Option<i32>, limit: Option<i32>, mapping_priority: Option<&str>, response_format: Option<&str>, return_404_on_empty_response: Option<bool>) -> Result<crate::models::GenericResponse, Error<FuturesV1HistoricalOpenInterestMessagesError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/futures/v1/historical/open-interest-messages", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("market", &market.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("instrument", &instrument.to_string())]);
    if let Some(ref local_var_str) = after_ts {
        local_var_req_builder = local_var_req_builder.query(&[("after_ts", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_ccseq {
        local_var_req_builder = local_var_req_builder.query(&[("last_ccseq", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mapping_priority {
        local_var_req_builder = local_var_req_builder.query(&[("mapping_priority", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = response_format {
        local_var_req_builder = local_var_req_builder.query(&[("response_format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = return_404_on_empty_response {
        local_var_req_builder = local_var_req_builder.query(&[("return_404_on_empty_response", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("api_key", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<FuturesV1HistoricalOpenInterestMessagesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn futures_v1_historical_open_interest_messages_hour(configuration: &configuration::Configuration, market: &str, instrument: &str, hour_ts: Option<i32>, mapping_priority: Option<&str>, response_format: Option<&str>, return_404_on_empty_response: Option<bool>) -> Result<crate::models::GenericResponse, Error<FuturesV1HistoricalOpenInterestMessagesHourError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/futures/v1/historical/open-interest-messages/hour", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("market", &market.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("instrument", &instrument.to_string())]);
    if let Some(ref local_var_str) = hour_ts {
        local_var_req_builder = local_var_req_builder.query(&[("hour_ts", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mapping_priority {
        local_var_req_builder = local_var_req_builder.query(&[("mapping_priority", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = response_format {
        local_var_req_builder = local_var_req_builder.query(&[("response_format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = return_404_on_empty_response {
        local_var_req_builder = local_var_req_builder.query(&[("return_404_on_empty_response", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("api_key", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<FuturesV1HistoricalOpenInterestMessagesHourError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn futures_v1_historical_open_interest_minutes(configuration: &configuration::Configuration, market: &str, instrument: &str, groups: Option<Vec<String>>, limit: Option<i32>, to_ts: Option<i32>, aggregate: Option<i32>, fill: Option<bool>, mapping_priority: Option<&str>, response_format: Option<&str>) -> Result<crate::models::GenericResponse, Error<FuturesV1HistoricalOpenInterestMinutesError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/futures/v1/historical/open-interest/minutes", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("market", &market.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("instrument", &instrument.to_string())]);
    if let Some(ref local_var_str) = groups {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("groups".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("groups", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = to_ts {
        local_var_req_builder = local_var_req_builder.query(&[("to_ts", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = aggregate {
        local_var_req_builder = local_var_req_builder.query(&[("aggregate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill {
        local_var_req_builder = local_var_req_builder.query(&[("fill", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mapping_priority {
        local_var_req_builder = local_var_req_builder.query(&[("mapping_priority", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = response_format {
        local_var_req_builder = local_var_req_builder.query(&[("response_format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<FuturesV1HistoricalOpenInterestMinutesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn futures_v1_historical_trades(configuration: &configuration::Configuration, market: &str, instrument: &str, after_ts: Option<i32>, last_ccseq: Option<i32>, limit: Option<i32>, mapping_priority: Option<&str>, response_format: Option<&str>, return_404_on_empty_response: Option<bool>) -> Result<crate::models::GenericResponse, Error<FuturesV1HistoricalTradesError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/futures/v1/historical/trades", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("market", &market.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("instrument", &instrument.to_string())]);
    if let Some(ref local_var_str) = after_ts {
        local_var_req_builder = local_var_req_builder.query(&[("after_ts", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_ccseq {
        local_var_req_builder = local_var_req_builder.query(&[("last_ccseq", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mapping_priority {
        local_var_req_builder = local_var_req_builder.query(&[("mapping_priority", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = response_format {
        local_var_req_builder = local_var_req_builder.query(&[("response_format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = return_404_on_empty_response {
        local_var_req_builder = local_var_req_builder.query(&[("return_404_on_empty_response", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("api_key", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<FuturesV1HistoricalTradesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn futures_v1_historical_trades_hour(configuration: &configuration::Configuration, market: &str, instrument: &str, hour_ts: Option<i32>, mapping_priority: Option<&str>, response_format: Option<&str>, return_404_on_empty_response: Option<bool>) -> Result<crate::models::GenericResponse, Error<FuturesV1HistoricalTradesHourError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/futures/v1/historical/trades/hour", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("market", &market.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("instrument", &instrument.to_string())]);
    if let Some(ref local_var_str) = hour_ts {
        local_var_req_builder = local_var_req_builder.query(&[("hour_ts", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mapping_priority {
        local_var_req_builder = local_var_req_builder.query(&[("mapping_priority", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = response_format {
        local_var_req_builder = local_var_req_builder.query(&[("response_format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = return_404_on_empty_response {
        local_var_req_builder = local_var_req_builder.query(&[("return_404_on_empty_response", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("api_key", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<FuturesV1HistoricalTradesHourError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn futures_v1_latest_funding_rate_tick(configuration: &configuration::Configuration, market: &str, instruments: Vec<String>, groups: Option<Vec<String>>, mapping_priority: Option<&str>) -> Result<crate::models::GenericResponse, Error<FuturesV1LatestFundingRateTickError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/futures/v1/latest/funding-rate/tick", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("market", &market.to_string())]);
    local_var_req_builder = match "csv" {
        "multi" => local_var_req_builder.query(&instruments.into_iter().map(|p| ("instruments".to_owned(), p)).collect::<Vec<(std::string::String, std::string::String)>>()),
        _ => local_var_req_builder.query(&[("instruments", &instruments.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
    };
    if let Some(ref local_var_str) = groups {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("groups".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("groups", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = mapping_priority {
        local_var_req_builder = local_var_req_builder.query(&[("mapping_priority", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<FuturesV1LatestFundingRateTickError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn futures_v1_latest_instrument_metadata(configuration: &configuration::Configuration, market: &str, instruments: Vec<String>, groups: Option<Vec<String>>, mapping_priority: Option<&str>) -> Result<crate::models::GenericResponse, Error<FuturesV1LatestInstrumentMetadataError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/futures/v1/latest/instrument/metadata", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("market", &market.to_string())]);
    local_var_req_builder = match "csv" {
        "multi" => local_var_req_builder.query(&instruments.into_iter().map(|p| ("instruments".to_owned(), p)).collect::<Vec<(std::string::String, std::string::String)>>()),
        _ => local_var_req_builder.query(&[("instruments", &instruments.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
    };
    if let Some(ref local_var_str) = groups {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("groups".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("groups", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = mapping_priority {
        local_var_req_builder = local_var_req_builder.query(&[("mapping_priority", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<FuturesV1LatestInstrumentMetadataError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn futures_v1_latest_open_interest_tick(configuration: &configuration::Configuration, market: &str, instruments: Vec<String>, groups: Option<Vec<String>>, mapping_priority: Option<&str>) -> Result<crate::models::GenericResponse, Error<FuturesV1LatestOpenInterestTickError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/futures/v1/latest/open-interest/tick", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("market", &market.to_string())]);
    local_var_req_builder = match "csv" {
        "multi" => local_var_req_builder.query(&instruments.into_iter().map(|p| ("instruments".to_owned(), p)).collect::<Vec<(std::string::String, std::string::String)>>()),
        _ => local_var_req_builder.query(&[("instruments", &instruments.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
    };
    if let Some(ref local_var_str) = groups {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("groups".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("groups", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = mapping_priority {
        local_var_req_builder = local_var_req_builder.query(&[("mapping_priority", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<FuturesV1LatestOpenInterestTickError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn futures_v1_latest_tick(configuration: &configuration::Configuration, market: &str, instruments: Vec<String>, groups: Option<Vec<String>>, mapping_priority: Option<&str>) -> Result<crate::models::GenericResponse, Error<FuturesV1LatestTickError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/futures/v1/latest/tick", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("market", &market.to_string())]);
    local_var_req_builder = match "csv" {
        "multi" => local_var_req_builder.query(&instruments.into_iter().map(|p| ("instruments".to_owned(), p)).collect::<Vec<(std::string::String, std::string::String)>>()),
        _ => local_var_req_builder.query(&[("instruments", &instruments.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
    };
    if let Some(ref local_var_str) = groups {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("groups".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("groups", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = mapping_priority {
        local_var_req_builder = local_var_req_builder.query(&[("mapping_priority", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<FuturesV1LatestTickError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn futures_v1_markets(configuration: &configuration::Configuration, market: Option<&str>) -> Result<crate::models::GenericResponse, Error<FuturesV1MarketsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/futures/v1/markets", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = market {
        local_var_req_builder = local_var_req_builder.query(&[("market", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<FuturesV1MarketsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn futures_v1_markets_instruments(configuration: &configuration::Configuration, market: Option<&str>, instrument: Option<&str>, instrument_status: Option<Vec<String>>) -> Result<crate::models::GenericResponse, Error<FuturesV1MarketsInstrumentsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/futures/v1/markets/instruments", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = market {
        local_var_req_builder = local_var_req_builder.query(&[("market", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = instrument {
        local_var_req_builder = local_var_req_builder.query(&[("instrument", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = instrument_status {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("instrument_status".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("instrument_status", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<FuturesV1MarketsInstrumentsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn futures_v1_markets_instruments_unmapped(configuration: &configuration::Configuration, market: Option<&str>, instrument: Option<&str>, instrument_status: Option<Vec<String>>) -> Result<crate::models::GenericResponse, Error<FuturesV1MarketsInstrumentsUnmappedError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/futures/v1/markets/instruments/unmapped", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = market {
        local_var_req_builder = local_var_req_builder.query(&[("market", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = instrument {
        local_var_req_builder = local_var_req_builder.query(&[("instrument", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = instrument_status {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("instrument_status".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("instrument_status", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<FuturesV1MarketsInstrumentsUnmappedError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn index_v1_historical_days(configuration: &configuration::Configuration, market: &str, instrument: &str, groups: Option<Vec<String>>, limit: Option<i32>, to_ts: Option<i32>, aggregate: Option<i32>, fill: Option<bool>, mapping_priority: Option<&str>, response_format: Option<&str>) -> Result<crate::models::GenericResponse, Error<IndexV1HistoricalDaysError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/index/v1/historical/days", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("market", &market.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("instrument", &instrument.to_string())]);
    if let Some(ref local_var_str) = groups {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("groups".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("groups", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = to_ts {
        local_var_req_builder = local_var_req_builder.query(&[("to_ts", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = aggregate {
        local_var_req_builder = local_var_req_builder.query(&[("aggregate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill {
        local_var_req_builder = local_var_req_builder.query(&[("fill", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mapping_priority {
        local_var_req_builder = local_var_req_builder.query(&[("mapping_priority", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = response_format {
        local_var_req_builder = local_var_req_builder.query(&[("response_format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<IndexV1HistoricalDaysError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn index_v1_historical_hours(configuration: &configuration::Configuration, market: &str, instrument: &str, groups: Option<Vec<String>>, limit: Option<i32>, to_ts: Option<i32>, aggregate: Option<i32>, fill: Option<bool>, mapping_priority: Option<&str>, response_format: Option<&str>) -> Result<crate::models::GenericResponse, Error<IndexV1HistoricalHoursError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/index/v1/historical/hours", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("market", &market.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("instrument", &instrument.to_string())]);
    if let Some(ref local_var_str) = groups {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("groups".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("groups", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = to_ts {
        local_var_req_builder = local_var_req_builder.query(&[("to_ts", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = aggregate {
        local_var_req_builder = local_var_req_builder.query(&[("aggregate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill {
        local_var_req_builder = local_var_req_builder.query(&[("fill", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mapping_priority {
        local_var_req_builder = local_var_req_builder.query(&[("mapping_priority", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = response_format {
        local_var_req_builder = local_var_req_builder.query(&[("response_format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<IndexV1HistoricalHoursError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn index_v1_historical_messages(configuration: &configuration::Configuration, market: &str, instrument: &str, after_ts: Option<i32>, last_ccseq: Option<i32>, limit: Option<i32>, mapping_priority: Option<&str>, response_format: Option<&str>, return_404_on_empty_response: Option<bool>) -> Result<crate::models::GenericResponse, Error<IndexV1HistoricalMessagesError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/index/v1/historical/messages", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("market", &market.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("instrument", &instrument.to_string())]);
    if let Some(ref local_var_str) = after_ts {
        local_var_req_builder = local_var_req_builder.query(&[("after_ts", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_ccseq {
        local_var_req_builder = local_var_req_builder.query(&[("last_ccseq", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mapping_priority {
        local_var_req_builder = local_var_req_builder.query(&[("mapping_priority", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = response_format {
        local_var_req_builder = local_var_req_builder.query(&[("response_format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = return_404_on_empty_response {
        local_var_req_builder = local_var_req_builder.query(&[("return_404_on_empty_response", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("api_key", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<IndexV1HistoricalMessagesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn index_v1_historical_messages_hour(configuration: &configuration::Configuration, market: &str, instrument: &str, hour_ts: Option<i32>, mapping_priority: Option<&str>, response_format: Option<&str>, return_404_on_empty_response: Option<bool>) -> Result<crate::models::GenericResponse, Error<IndexV1HistoricalMessagesHourError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/index/v1/historical/messages/hour", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("market", &market.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("instrument", &instrument.to_string())]);
    if let Some(ref local_var_str) = hour_ts {
        local_var_req_builder = local_var_req_builder.query(&[("hour_ts", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mapping_priority {
        local_var_req_builder = local_var_req_builder.query(&[("mapping_priority", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = response_format {
        local_var_req_builder = local_var_req_builder.query(&[("response_format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = return_404_on_empty_response {
        local_var_req_builder = local_var_req_builder.query(&[("return_404_on_empty_response", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("api_key", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<IndexV1HistoricalMessagesHourError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn index_v1_historical_minutes(configuration: &configuration::Configuration, market: &str, instrument: &str, groups: Option<Vec<String>>, limit: Option<i32>, to_ts: Option<i32>, aggregate: Option<i32>, fill: Option<bool>, mapping_priority: Option<&str>, response_format: Option<&str>) -> Result<crate::models::GenericResponse, Error<IndexV1HistoricalMinutesError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/index/v1/historical/minutes", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("market", &market.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("instrument", &instrument.to_string())]);
    if let Some(ref local_var_str) = groups {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("groups".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("groups", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = to_ts {
        local_var_req_builder = local_var_req_builder.query(&[("to_ts", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = aggregate {
        local_var_req_builder = local_var_req_builder.query(&[("aggregate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill {
        local_var_req_builder = local_var_req_builder.query(&[("fill", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mapping_priority {
        local_var_req_builder = local_var_req_builder.query(&[("mapping_priority", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = response_format {
        local_var_req_builder = local_var_req_builder.query(&[("response_format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<IndexV1HistoricalMinutesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn index_v1_latest_instrument_metadata(configuration: &configuration::Configuration, market: &str, instruments: Vec<String>, groups: Option<Vec<String>>, mapping_priority: Option<&str>) -> Result<crate::models::GenericResponse, Error<IndexV1LatestInstrumentMetadataError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/index/v1/latest/instrument/metadata", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("market", &market.to_string())]);
    local_var_req_builder = match "csv" {
        "multi" => local_var_req_builder.query(&instruments.into_iter().map(|p| ("instruments".to_owned(), p)).collect::<Vec<(std::string::String, std::string::String)>>()),
        _ => local_var_req_builder.query(&[("instruments", &instruments.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
    };
    if let Some(ref local_var_str) = groups {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("groups".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("groups", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = mapping_priority {
        local_var_req_builder = local_var_req_builder.query(&[("mapping_priority", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<IndexV1LatestInstrumentMetadataError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn index_v1_latest_tick(configuration: &configuration::Configuration, market: &str, instruments: Vec<String>, groups: Option<Vec<String>>, mapping_priority: Option<&str>) -> Result<crate::models::GenericResponse, Error<IndexV1LatestTickError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/index/v1/latest/tick", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("market", &market.to_string())]);
    local_var_req_builder = match "csv" {
        "multi" => local_var_req_builder.query(&instruments.into_iter().map(|p| ("instruments".to_owned(), p)).collect::<Vec<(std::string::String, std::string::String)>>()),
        _ => local_var_req_builder.query(&[("instruments", &instruments.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
    };
    if let Some(ref local_var_str) = groups {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("groups".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("groups", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = mapping_priority {
        local_var_req_builder = local_var_req_builder.query(&[("mapping_priority", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<IndexV1LatestTickError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn index_v1_markets(configuration: &configuration::Configuration, market: Option<&str>) -> Result<crate::models::GenericResponse, Error<IndexV1MarketsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/index/v1/markets", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = market {
        local_var_req_builder = local_var_req_builder.query(&[("market", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<IndexV1MarketsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn index_v1_markets_instruments(configuration: &configuration::Configuration, market: Option<&str>, instrument: Option<&str>, instrument_status: Option<Vec<String>>) -> Result<crate::models::GenericResponse, Error<IndexV1MarketsInstrumentsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/index/v1/markets/instruments", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = market {
        local_var_req_builder = local_var_req_builder.query(&[("market", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = instrument {
        local_var_req_builder = local_var_req_builder.query(&[("instrument", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = instrument_status {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("instrument_status".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("instrument_status", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<IndexV1MarketsInstrumentsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn index_v1_markets_instruments_unmapped(configuration: &configuration::Configuration, market: Option<&str>, instrument: Option<&str>, instrument_status: Option<Vec<String>>) -> Result<crate::models::GenericResponse, Error<IndexV1MarketsInstrumentsUnmappedError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/index/v1/markets/instruments/unmapped", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = market {
        local_var_req_builder = local_var_req_builder.query(&[("market", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = instrument {
        local_var_req_builder = local_var_req_builder.query(&[("instrument", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = instrument_status {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("instrument_status".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("instrument_status", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<IndexV1MarketsInstrumentsUnmappedError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

