/*
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 *
 * CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: data@cryptocompare.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAssetApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"></param>
        /// <param name="chainSymbol"></param>
        /// <param name="groups"> (optional, default to &quot;&quot;)</param>
        /// <returns>GENERICRESPONSE</returns>
        GENERICRESPONSE AssetV1DataByAddress (string address, string chainSymbol, string groups = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"></param>
        /// <param name="chainSymbol"></param>
        /// <param name="groups"> (optional, default to &quot;&quot;)</param>
        /// <returns>ApiResponse of GENERICRESPONSE</returns>
        ApiResponse<GENERICRESPONSE> AssetV1DataByAddressWithHttpInfo (string address, string chainSymbol, string groups = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The asset id you are interested in</param>
        /// <param name="groups"> (optional, default to &quot;&quot;)</param>
        /// <returns>GENERICRESPONSE</returns>
        GENERICRESPONSE AssetV1DataById (int assetId, string groups = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The asset id you are interested in</param>
        /// <param name="groups"> (optional, default to &quot;&quot;)</param>
        /// <returns>ApiResponse of GENERICRESPONSE</returns>
        ApiResponse<GENERICRESPONSE> AssetV1DataByIdWithHttpInfo (int assetId, string groups = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetSymbol">The asset symbol you are interested in</param>
        /// <param name="groups"> (optional, default to &quot;&quot;)</param>
        /// <returns>GENERICRESPONSE</returns>
        GENERICRESPONSE AssetV1DataBySymbol (string assetSymbol, string groups = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetSymbol">The asset symbol you are interested in</param>
        /// <param name="groups"> (optional, default to &quot;&quot;)</param>
        /// <returns>ApiResponse of GENERICRESPONSE</returns>
        ApiResponse<GENERICRESPONSE> AssetV1DataBySymbolWithHttpInfo (string assetSymbol, string groups = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number for the request to get {page_size} coins at the time. (optional, default to 1)</param>
        /// <param name="pageSize">The number of items returned per page (optional, default to 100)</param>
        /// <param name="assetType">The asset class/type (optional, default to &quot;&quot;)</param>
        /// <param name="sortBy">Sort by field ( CREATED_ON,UPDATED_ON,SYMBOL ) (optional, default to CREATED_ON)</param>
        /// <param name="sortDirection">Sort direction ( DESC,ASC ) (optional, default to DESC)</param>
        /// <param name="groups"> (optional, default to &quot;&quot;)</param>
        /// <returns>GENERICRESPONSE</returns>
        GENERICRESPONSE AssetV1TopList (int? page = default(int?), int? pageSize = default(int?), string assetType = default(string), string sortBy = default(string), string sortDirection = default(string), string groups = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number for the request to get {page_size} coins at the time. (optional, default to 1)</param>
        /// <param name="pageSize">The number of items returned per page (optional, default to 100)</param>
        /// <param name="assetType">The asset class/type (optional, default to &quot;&quot;)</param>
        /// <param name="sortBy">Sort by field ( CREATED_ON,UPDATED_ON,SYMBOL ) (optional, default to CREATED_ON)</param>
        /// <param name="sortDirection">Sort direction ( DESC,ASC ) (optional, default to DESC)</param>
        /// <param name="groups"> (optional, default to &quot;&quot;)</param>
        /// <returns>ApiResponse of GENERICRESPONSE</returns>
        ApiResponse<GENERICRESPONSE> AssetV1TopListWithHttpInfo (int? page = default(int?), int? pageSize = default(int?), string assetType = default(string), string sortBy = default(string), string sortDirection = default(string), string groups = default(string));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"></param>
        /// <param name="chainSymbol"></param>
        /// <param name="groups"> (optional, default to &quot;&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GENERICRESPONSE</returns>
        System.Threading.Tasks.Task<GENERICRESPONSE> AssetV1DataByAddressAsync (string address, string chainSymbol, string groups = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"></param>
        /// <param name="chainSymbol"></param>
        /// <param name="groups"> (optional, default to &quot;&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GENERICRESPONSE)</returns>
        System.Threading.Tasks.Task<ApiResponse<GENERICRESPONSE>> AssetV1DataByAddressWithHttpInfoAsync (string address, string chainSymbol, string groups = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The asset id you are interested in</param>
        /// <param name="groups"> (optional, default to &quot;&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GENERICRESPONSE</returns>
        System.Threading.Tasks.Task<GENERICRESPONSE> AssetV1DataByIdAsync (int assetId, string groups = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The asset id you are interested in</param>
        /// <param name="groups"> (optional, default to &quot;&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GENERICRESPONSE)</returns>
        System.Threading.Tasks.Task<ApiResponse<GENERICRESPONSE>> AssetV1DataByIdWithHttpInfoAsync (int assetId, string groups = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetSymbol">The asset symbol you are interested in</param>
        /// <param name="groups"> (optional, default to &quot;&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GENERICRESPONSE</returns>
        System.Threading.Tasks.Task<GENERICRESPONSE> AssetV1DataBySymbolAsync (string assetSymbol, string groups = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetSymbol">The asset symbol you are interested in</param>
        /// <param name="groups"> (optional, default to &quot;&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GENERICRESPONSE)</returns>
        System.Threading.Tasks.Task<ApiResponse<GENERICRESPONSE>> AssetV1DataBySymbolWithHttpInfoAsync (string assetSymbol, string groups = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number for the request to get {page_size} coins at the time. (optional, default to 1)</param>
        /// <param name="pageSize">The number of items returned per page (optional, default to 100)</param>
        /// <param name="assetType">The asset class/type (optional, default to &quot;&quot;)</param>
        /// <param name="sortBy">Sort by field ( CREATED_ON,UPDATED_ON,SYMBOL ) (optional, default to CREATED_ON)</param>
        /// <param name="sortDirection">Sort direction ( DESC,ASC ) (optional, default to DESC)</param>
        /// <param name="groups"> (optional, default to &quot;&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GENERICRESPONSE</returns>
        System.Threading.Tasks.Task<GENERICRESPONSE> AssetV1TopListAsync (int? page = default(int?), int? pageSize = default(int?), string assetType = default(string), string sortBy = default(string), string sortDirection = default(string), string groups = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number for the request to get {page_size} coins at the time. (optional, default to 1)</param>
        /// <param name="pageSize">The number of items returned per page (optional, default to 100)</param>
        /// <param name="assetType">The asset class/type (optional, default to &quot;&quot;)</param>
        /// <param name="sortBy">Sort by field ( CREATED_ON,UPDATED_ON,SYMBOL ) (optional, default to CREATED_ON)</param>
        /// <param name="sortDirection">Sort direction ( DESC,ASC ) (optional, default to DESC)</param>
        /// <param name="groups"> (optional, default to &quot;&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GENERICRESPONSE)</returns>
        System.Threading.Tasks.Task<ApiResponse<GENERICRESPONSE>> AssetV1TopListWithHttpInfoAsync (int? page = default(int?), int? pageSize = default(int?), string assetType = default(string), string sortBy = default(string), string sortDirection = default(string), string groups = default(string), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AssetApi : IAssetApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AssetApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetApi"/> class
        /// </summary>
        /// <returns></returns>
        public AssetApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AssetApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"></param>
        /// <param name="chainSymbol"></param>
        /// <param name="groups"> (optional, default to &quot;&quot;)</param>
        /// <returns>GENERICRESPONSE</returns>
        public GENERICRESPONSE AssetV1DataByAddress (string address, string chainSymbol, string groups = default(string))
        {
             ApiResponse<GENERICRESPONSE> localVarResponse = AssetV1DataByAddressWithHttpInfo(address, chainSymbol, groups);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"></param>
        /// <param name="chainSymbol"></param>
        /// <param name="groups"> (optional, default to &quot;&quot;)</param>
        /// <returns>ApiResponse of GENERICRESPONSE</returns>
        public ApiResponse<GENERICRESPONSE> AssetV1DataByAddressWithHttpInfo (string address, string chainSymbol, string groups = default(string))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling AssetApi->AssetV1DataByAddress");
            // verify the required parameter 'chainSymbol' is set
            if (chainSymbol == null)
                throw new ApiException(400, "Missing required parameter 'chainSymbol' when calling AssetApi->AssetV1DataByAddress");

            var localVarPath = "/asset/v1/data/by/address";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "address", address)); // query parameter
            if (chainSymbol != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "chain_symbol", chainSymbol)); // query parameter
            if (groups != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "groups", groups)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssetV1DataByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GENERICRESPONSE>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GENERICRESPONSE) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GENERICRESPONSE)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"></param>
        /// <param name="chainSymbol"></param>
        /// <param name="groups"> (optional, default to &quot;&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GENERICRESPONSE</returns>
        public async System.Threading.Tasks.Task<GENERICRESPONSE> AssetV1DataByAddressAsync (string address, string chainSymbol, string groups = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GENERICRESPONSE> localVarResponse = await AssetV1DataByAddressWithHttpInfoAsync(address, chainSymbol, groups, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"></param>
        /// <param name="chainSymbol"></param>
        /// <param name="groups"> (optional, default to &quot;&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GENERICRESPONSE)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GENERICRESPONSE>> AssetV1DataByAddressWithHttpInfoAsync (string address, string chainSymbol, string groups = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling AssetApi->AssetV1DataByAddress");
            // verify the required parameter 'chainSymbol' is set
            if (chainSymbol == null)
                throw new ApiException(400, "Missing required parameter 'chainSymbol' when calling AssetApi->AssetV1DataByAddress");

            var localVarPath = "/asset/v1/data/by/address";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "address", address)); // query parameter
            if (chainSymbol != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "chain_symbol", chainSymbol)); // query parameter
            if (groups != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "groups", groups)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssetV1DataByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GENERICRESPONSE>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GENERICRESPONSE) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GENERICRESPONSE)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The asset id you are interested in</param>
        /// <param name="groups"> (optional, default to &quot;&quot;)</param>
        /// <returns>GENERICRESPONSE</returns>
        public GENERICRESPONSE AssetV1DataById (int assetId, string groups = default(string))
        {
             ApiResponse<GENERICRESPONSE> localVarResponse = AssetV1DataByIdWithHttpInfo(assetId, groups);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The asset id you are interested in</param>
        /// <param name="groups"> (optional, default to &quot;&quot;)</param>
        /// <returns>ApiResponse of GENERICRESPONSE</returns>
        public ApiResponse<GENERICRESPONSE> AssetV1DataByIdWithHttpInfo (int assetId, string groups = default(string))
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->AssetV1DataById");

            var localVarPath = "/asset/v1/data/by/id";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asset_id", assetId)); // query parameter
            if (groups != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "groups", groups)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssetV1DataById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GENERICRESPONSE>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GENERICRESPONSE) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GENERICRESPONSE)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The asset id you are interested in</param>
        /// <param name="groups"> (optional, default to &quot;&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GENERICRESPONSE</returns>
        public async System.Threading.Tasks.Task<GENERICRESPONSE> AssetV1DataByIdAsync (int assetId, string groups = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GENERICRESPONSE> localVarResponse = await AssetV1DataByIdWithHttpInfoAsync(assetId, groups, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The asset id you are interested in</param>
        /// <param name="groups"> (optional, default to &quot;&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GENERICRESPONSE)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GENERICRESPONSE>> AssetV1DataByIdWithHttpInfoAsync (int assetId, string groups = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->AssetV1DataById");

            var localVarPath = "/asset/v1/data/by/id";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asset_id", assetId)); // query parameter
            if (groups != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "groups", groups)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssetV1DataById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GENERICRESPONSE>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GENERICRESPONSE) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GENERICRESPONSE)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetSymbol">The asset symbol you are interested in</param>
        /// <param name="groups"> (optional, default to &quot;&quot;)</param>
        /// <returns>GENERICRESPONSE</returns>
        public GENERICRESPONSE AssetV1DataBySymbol (string assetSymbol, string groups = default(string))
        {
             ApiResponse<GENERICRESPONSE> localVarResponse = AssetV1DataBySymbolWithHttpInfo(assetSymbol, groups);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetSymbol">The asset symbol you are interested in</param>
        /// <param name="groups"> (optional, default to &quot;&quot;)</param>
        /// <returns>ApiResponse of GENERICRESPONSE</returns>
        public ApiResponse<GENERICRESPONSE> AssetV1DataBySymbolWithHttpInfo (string assetSymbol, string groups = default(string))
        {
            // verify the required parameter 'assetSymbol' is set
            if (assetSymbol == null)
                throw new ApiException(400, "Missing required parameter 'assetSymbol' when calling AssetApi->AssetV1DataBySymbol");

            var localVarPath = "/asset/v1/data/by/symbol";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetSymbol != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asset_symbol", assetSymbol)); // query parameter
            if (groups != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "groups", groups)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssetV1DataBySymbol", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GENERICRESPONSE>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GENERICRESPONSE) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GENERICRESPONSE)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetSymbol">The asset symbol you are interested in</param>
        /// <param name="groups"> (optional, default to &quot;&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GENERICRESPONSE</returns>
        public async System.Threading.Tasks.Task<GENERICRESPONSE> AssetV1DataBySymbolAsync (string assetSymbol, string groups = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GENERICRESPONSE> localVarResponse = await AssetV1DataBySymbolWithHttpInfoAsync(assetSymbol, groups, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetSymbol">The asset symbol you are interested in</param>
        /// <param name="groups"> (optional, default to &quot;&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GENERICRESPONSE)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GENERICRESPONSE>> AssetV1DataBySymbolWithHttpInfoAsync (string assetSymbol, string groups = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'assetSymbol' is set
            if (assetSymbol == null)
                throw new ApiException(400, "Missing required parameter 'assetSymbol' when calling AssetApi->AssetV1DataBySymbol");

            var localVarPath = "/asset/v1/data/by/symbol";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetSymbol != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asset_symbol", assetSymbol)); // query parameter
            if (groups != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "groups", groups)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssetV1DataBySymbol", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GENERICRESPONSE>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GENERICRESPONSE) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GENERICRESPONSE)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number for the request to get {page_size} coins at the time. (optional, default to 1)</param>
        /// <param name="pageSize">The number of items returned per page (optional, default to 100)</param>
        /// <param name="assetType">The asset class/type (optional, default to &quot;&quot;)</param>
        /// <param name="sortBy">Sort by field ( CREATED_ON,UPDATED_ON,SYMBOL ) (optional, default to CREATED_ON)</param>
        /// <param name="sortDirection">Sort direction ( DESC,ASC ) (optional, default to DESC)</param>
        /// <param name="groups"> (optional, default to &quot;&quot;)</param>
        /// <returns>GENERICRESPONSE</returns>
        public GENERICRESPONSE AssetV1TopList (int? page = default(int?), int? pageSize = default(int?), string assetType = default(string), string sortBy = default(string), string sortDirection = default(string), string groups = default(string))
        {
             ApiResponse<GENERICRESPONSE> localVarResponse = AssetV1TopListWithHttpInfo(page, pageSize, assetType, sortBy, sortDirection, groups);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number for the request to get {page_size} coins at the time. (optional, default to 1)</param>
        /// <param name="pageSize">The number of items returned per page (optional, default to 100)</param>
        /// <param name="assetType">The asset class/type (optional, default to &quot;&quot;)</param>
        /// <param name="sortBy">Sort by field ( CREATED_ON,UPDATED_ON,SYMBOL ) (optional, default to CREATED_ON)</param>
        /// <param name="sortDirection">Sort direction ( DESC,ASC ) (optional, default to DESC)</param>
        /// <param name="groups"> (optional, default to &quot;&quot;)</param>
        /// <returns>ApiResponse of GENERICRESPONSE</returns>
        public ApiResponse<GENERICRESPONSE> AssetV1TopListWithHttpInfo (int? page = default(int?), int? pageSize = default(int?), string assetType = default(string), string sortBy = default(string), string sortDirection = default(string), string groups = default(string))
        {

            var localVarPath = "/asset/v1/top/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page_size", pageSize)); // query parameter
            if (assetType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asset_type", assetType)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_by", sortBy)); // query parameter
            if (sortDirection != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_direction", sortDirection)); // query parameter
            if (groups != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "groups", groups)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssetV1TopList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GENERICRESPONSE>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GENERICRESPONSE) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GENERICRESPONSE)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number for the request to get {page_size} coins at the time. (optional, default to 1)</param>
        /// <param name="pageSize">The number of items returned per page (optional, default to 100)</param>
        /// <param name="assetType">The asset class/type (optional, default to &quot;&quot;)</param>
        /// <param name="sortBy">Sort by field ( CREATED_ON,UPDATED_ON,SYMBOL ) (optional, default to CREATED_ON)</param>
        /// <param name="sortDirection">Sort direction ( DESC,ASC ) (optional, default to DESC)</param>
        /// <param name="groups"> (optional, default to &quot;&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GENERICRESPONSE</returns>
        public async System.Threading.Tasks.Task<GENERICRESPONSE> AssetV1TopListAsync (int? page = default(int?), int? pageSize = default(int?), string assetType = default(string), string sortBy = default(string), string sortDirection = default(string), string groups = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GENERICRESPONSE> localVarResponse = await AssetV1TopListWithHttpInfoAsync(page, pageSize, assetType, sortBy, sortDirection, groups, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number for the request to get {page_size} coins at the time. (optional, default to 1)</param>
        /// <param name="pageSize">The number of items returned per page (optional, default to 100)</param>
        /// <param name="assetType">The asset class/type (optional, default to &quot;&quot;)</param>
        /// <param name="sortBy">Sort by field ( CREATED_ON,UPDATED_ON,SYMBOL ) (optional, default to CREATED_ON)</param>
        /// <param name="sortDirection">Sort direction ( DESC,ASC ) (optional, default to DESC)</param>
        /// <param name="groups"> (optional, default to &quot;&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GENERICRESPONSE)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GENERICRESPONSE>> AssetV1TopListWithHttpInfoAsync (int? page = default(int?), int? pageSize = default(int?), string assetType = default(string), string sortBy = default(string), string sortDirection = default(string), string groups = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/asset/v1/top/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page_size", pageSize)); // query parameter
            if (assetType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asset_type", assetType)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_by", sortBy)); // query parameter
            if (sortDirection != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_direction", sortDirection)); // query parameter
            if (groups != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "groups", groups)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssetV1TopList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GENERICRESPONSE>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GENERICRESPONSE) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GENERICRESPONSE)));
        }

    }
}
