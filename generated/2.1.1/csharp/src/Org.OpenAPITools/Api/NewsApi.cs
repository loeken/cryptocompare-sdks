/*
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 *
 * CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: data@cryptocompare.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INewsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceIds">Get articles from specific sources; either by their ids or keys (optional)</param>
        /// <param name="lang">The article Preferred language - English (EN), Portuguese (PT), Espanol (ES) (optional, default to EN)</param>
        /// <param name="categories">News article categories to return (optional)</param>
        /// <param name="excludeCategories">News article categories to exclude from results (optional)</param>
        /// <param name="toTs">Articles published on or before this timestamp (optional, default to -1)</param>
        /// <returns>GENERICRESPONSE</returns>
        GENERICRESPONSE NewsV1ArticleList (List<string> sourceIds = default(List<string>), string lang = default(string), List<string> categories = default(List<string>), List<string> excludeCategories = default(List<string>), int? toTs = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceIds">Get articles from specific sources; either by their ids or keys (optional)</param>
        /// <param name="lang">The article Preferred language - English (EN), Portuguese (PT), Espanol (ES) (optional, default to EN)</param>
        /// <param name="categories">News article categories to return (optional)</param>
        /// <param name="excludeCategories">News article categories to exclude from results (optional)</param>
        /// <param name="toTs">Articles published on or before this timestamp (optional, default to -1)</param>
        /// <returns>ApiResponse of GENERICRESPONSE</returns>
        ApiResponse<GENERICRESPONSE> NewsV1ArticleListWithHttpInfo (List<string> sourceIds = default(List<string>), string lang = default(string), List<string> categories = default(List<string>), List<string> excludeCategories = default(List<string>), int? toTs = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GENERICRESPONSE</returns>
        GENERICRESPONSE NewsV1CategoryList ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GENERICRESPONSE</returns>
        ApiResponse<GENERICRESPONSE> NewsV1CategoryListWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lang">The article source Preferred language - English (EN), Portuguese (PT), Espanol (ES) (optional, default to EN)</param>
        /// <param name="type">RSS, API, TWITTER (optional, default to RSS)</param>
        /// <param name="status">The status for the  article source entry. Allowed values: ACTIVE, INACTIVE (optional, default to ACTIVE)</param>
        /// <returns>GENERICRESPONSE</returns>
        GENERICRESPONSE NewsV1SourceList (string lang = default(string), string type = default(string), string status = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lang">The article source Preferred language - English (EN), Portuguese (PT), Espanol (ES) (optional, default to EN)</param>
        /// <param name="type">RSS, API, TWITTER (optional, default to RSS)</param>
        /// <param name="status">The status for the  article source entry. Allowed values: ACTIVE, INACTIVE (optional, default to ACTIVE)</param>
        /// <returns>ApiResponse of GENERICRESPONSE</returns>
        ApiResponse<GENERICRESPONSE> NewsV1SourceListWithHttpInfo (string lang = default(string), string type = default(string), string status = default(string));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceIds">Get articles from specific sources; either by their ids or keys (optional)</param>
        /// <param name="lang">The article Preferred language - English (EN), Portuguese (PT), Espanol (ES) (optional, default to EN)</param>
        /// <param name="categories">News article categories to return (optional)</param>
        /// <param name="excludeCategories">News article categories to exclude from results (optional)</param>
        /// <param name="toTs">Articles published on or before this timestamp (optional, default to -1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GENERICRESPONSE</returns>
        System.Threading.Tasks.Task<GENERICRESPONSE> NewsV1ArticleListAsync (List<string> sourceIds = default(List<string>), string lang = default(string), List<string> categories = default(List<string>), List<string> excludeCategories = default(List<string>), int? toTs = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceIds">Get articles from specific sources; either by their ids or keys (optional)</param>
        /// <param name="lang">The article Preferred language - English (EN), Portuguese (PT), Espanol (ES) (optional, default to EN)</param>
        /// <param name="categories">News article categories to return (optional)</param>
        /// <param name="excludeCategories">News article categories to exclude from results (optional)</param>
        /// <param name="toTs">Articles published on or before this timestamp (optional, default to -1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GENERICRESPONSE)</returns>
        System.Threading.Tasks.Task<ApiResponse<GENERICRESPONSE>> NewsV1ArticleListWithHttpInfoAsync (List<string> sourceIds = default(List<string>), string lang = default(string), List<string> categories = default(List<string>), List<string> excludeCategories = default(List<string>), int? toTs = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GENERICRESPONSE</returns>
        System.Threading.Tasks.Task<GENERICRESPONSE> NewsV1CategoryListAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GENERICRESPONSE)</returns>
        System.Threading.Tasks.Task<ApiResponse<GENERICRESPONSE>> NewsV1CategoryListWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lang">The article source Preferred language - English (EN), Portuguese (PT), Espanol (ES) (optional, default to EN)</param>
        /// <param name="type">RSS, API, TWITTER (optional, default to RSS)</param>
        /// <param name="status">The status for the  article source entry. Allowed values: ACTIVE, INACTIVE (optional, default to ACTIVE)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GENERICRESPONSE</returns>
        System.Threading.Tasks.Task<GENERICRESPONSE> NewsV1SourceListAsync (string lang = default(string), string type = default(string), string status = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lang">The article source Preferred language - English (EN), Portuguese (PT), Espanol (ES) (optional, default to EN)</param>
        /// <param name="type">RSS, API, TWITTER (optional, default to RSS)</param>
        /// <param name="status">The status for the  article source entry. Allowed values: ACTIVE, INACTIVE (optional, default to ACTIVE)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GENERICRESPONSE)</returns>
        System.Threading.Tasks.Task<ApiResponse<GENERICRESPONSE>> NewsV1SourceListWithHttpInfoAsync (string lang = default(string), string type = default(string), string status = default(string), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class NewsApi : INewsApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="NewsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NewsApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NewsApi"/> class
        /// </summary>
        /// <returns></returns>
        public NewsApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NewsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public NewsApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceIds">Get articles from specific sources; either by their ids or keys (optional)</param>
        /// <param name="lang">The article Preferred language - English (EN), Portuguese (PT), Espanol (ES) (optional, default to EN)</param>
        /// <param name="categories">News article categories to return (optional)</param>
        /// <param name="excludeCategories">News article categories to exclude from results (optional)</param>
        /// <param name="toTs">Articles published on or before this timestamp (optional, default to -1)</param>
        /// <returns>GENERICRESPONSE</returns>
        public GENERICRESPONSE NewsV1ArticleList (List<string> sourceIds = default(List<string>), string lang = default(string), List<string> categories = default(List<string>), List<string> excludeCategories = default(List<string>), int? toTs = default(int?))
        {
             ApiResponse<GENERICRESPONSE> localVarResponse = NewsV1ArticleListWithHttpInfo(sourceIds, lang, categories, excludeCategories, toTs);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceIds">Get articles from specific sources; either by their ids or keys (optional)</param>
        /// <param name="lang">The article Preferred language - English (EN), Portuguese (PT), Espanol (ES) (optional, default to EN)</param>
        /// <param name="categories">News article categories to return (optional)</param>
        /// <param name="excludeCategories">News article categories to exclude from results (optional)</param>
        /// <param name="toTs">Articles published on or before this timestamp (optional, default to -1)</param>
        /// <returns>ApiResponse of GENERICRESPONSE</returns>
        public ApiResponse<GENERICRESPONSE> NewsV1ArticleListWithHttpInfo (List<string> sourceIds = default(List<string>), string lang = default(string), List<string> categories = default(List<string>), List<string> excludeCategories = default(List<string>), int? toTs = default(int?))
        {

            var localVarPath = "/news/v1/article/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sourceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "source_ids", sourceIds)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (categories != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "categories", categories)); // query parameter
            if (excludeCategories != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "exclude_categories", excludeCategories)); // query parameter
            if (toTs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to_ts", toTs)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NewsV1ArticleList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GENERICRESPONSE>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GENERICRESPONSE) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GENERICRESPONSE)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceIds">Get articles from specific sources; either by their ids or keys (optional)</param>
        /// <param name="lang">The article Preferred language - English (EN), Portuguese (PT), Espanol (ES) (optional, default to EN)</param>
        /// <param name="categories">News article categories to return (optional)</param>
        /// <param name="excludeCategories">News article categories to exclude from results (optional)</param>
        /// <param name="toTs">Articles published on or before this timestamp (optional, default to -1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GENERICRESPONSE</returns>
        public async System.Threading.Tasks.Task<GENERICRESPONSE> NewsV1ArticleListAsync (List<string> sourceIds = default(List<string>), string lang = default(string), List<string> categories = default(List<string>), List<string> excludeCategories = default(List<string>), int? toTs = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GENERICRESPONSE> localVarResponse = await NewsV1ArticleListWithHttpInfoAsync(sourceIds, lang, categories, excludeCategories, toTs, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceIds">Get articles from specific sources; either by their ids or keys (optional)</param>
        /// <param name="lang">The article Preferred language - English (EN), Portuguese (PT), Espanol (ES) (optional, default to EN)</param>
        /// <param name="categories">News article categories to return (optional)</param>
        /// <param name="excludeCategories">News article categories to exclude from results (optional)</param>
        /// <param name="toTs">Articles published on or before this timestamp (optional, default to -1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GENERICRESPONSE)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GENERICRESPONSE>> NewsV1ArticleListWithHttpInfoAsync (List<string> sourceIds = default(List<string>), string lang = default(string), List<string> categories = default(List<string>), List<string> excludeCategories = default(List<string>), int? toTs = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/news/v1/article/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sourceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "source_ids", sourceIds)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (categories != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "categories", categories)); // query parameter
            if (excludeCategories != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "exclude_categories", excludeCategories)); // query parameter
            if (toTs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to_ts", toTs)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NewsV1ArticleList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GENERICRESPONSE>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GENERICRESPONSE) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GENERICRESPONSE)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GENERICRESPONSE</returns>
        public GENERICRESPONSE NewsV1CategoryList ()
        {
             ApiResponse<GENERICRESPONSE> localVarResponse = NewsV1CategoryListWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GENERICRESPONSE</returns>
        public ApiResponse<GENERICRESPONSE> NewsV1CategoryListWithHttpInfo ()
        {

            var localVarPath = "/news/v1/category/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NewsV1CategoryList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GENERICRESPONSE>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GENERICRESPONSE) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GENERICRESPONSE)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GENERICRESPONSE</returns>
        public async System.Threading.Tasks.Task<GENERICRESPONSE> NewsV1CategoryListAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GENERICRESPONSE> localVarResponse = await NewsV1CategoryListWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GENERICRESPONSE)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GENERICRESPONSE>> NewsV1CategoryListWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/news/v1/category/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NewsV1CategoryList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GENERICRESPONSE>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GENERICRESPONSE) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GENERICRESPONSE)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lang">The article source Preferred language - English (EN), Portuguese (PT), Espanol (ES) (optional, default to EN)</param>
        /// <param name="type">RSS, API, TWITTER (optional, default to RSS)</param>
        /// <param name="status">The status for the  article source entry. Allowed values: ACTIVE, INACTIVE (optional, default to ACTIVE)</param>
        /// <returns>GENERICRESPONSE</returns>
        public GENERICRESPONSE NewsV1SourceList (string lang = default(string), string type = default(string), string status = default(string))
        {
             ApiResponse<GENERICRESPONSE> localVarResponse = NewsV1SourceListWithHttpInfo(lang, type, status);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lang">The article source Preferred language - English (EN), Portuguese (PT), Espanol (ES) (optional, default to EN)</param>
        /// <param name="type">RSS, API, TWITTER (optional, default to RSS)</param>
        /// <param name="status">The status for the  article source entry. Allowed values: ACTIVE, INACTIVE (optional, default to ACTIVE)</param>
        /// <returns>ApiResponse of GENERICRESPONSE</returns>
        public ApiResponse<GENERICRESPONSE> NewsV1SourceListWithHttpInfo (string lang = default(string), string type = default(string), string status = default(string))
        {

            var localVarPath = "/news/v1/source/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NewsV1SourceList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GENERICRESPONSE>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GENERICRESPONSE) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GENERICRESPONSE)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lang">The article source Preferred language - English (EN), Portuguese (PT), Espanol (ES) (optional, default to EN)</param>
        /// <param name="type">RSS, API, TWITTER (optional, default to RSS)</param>
        /// <param name="status">The status for the  article source entry. Allowed values: ACTIVE, INACTIVE (optional, default to ACTIVE)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GENERICRESPONSE</returns>
        public async System.Threading.Tasks.Task<GENERICRESPONSE> NewsV1SourceListAsync (string lang = default(string), string type = default(string), string status = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GENERICRESPONSE> localVarResponse = await NewsV1SourceListWithHttpInfoAsync(lang, type, status, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lang">The article source Preferred language - English (EN), Portuguese (PT), Espanol (ES) (optional, default to EN)</param>
        /// <param name="type">RSS, API, TWITTER (optional, default to RSS)</param>
        /// <param name="status">The status for the  article source entry. Allowed values: ACTIVE, INACTIVE (optional, default to ACTIVE)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GENERICRESPONSE)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GENERICRESPONSE>> NewsV1SourceListWithHttpInfoAsync (string lang = default(string), string type = default(string), string status = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/news/v1/source/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NewsV1SourceList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GENERICRESPONSE>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GENERICRESPONSE) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GENERICRESPONSE)));
        }

    }
}
