/*
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 *
 * CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: data@cryptocompare.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing FuturesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class FuturesApiTests
    {
        private FuturesApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new FuturesApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of FuturesApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' FuturesApi
            //Assert.IsInstanceOf(typeof(FuturesApi), instance);
        }

        
        /// <summary>
        /// Test FuturesV1HistoricalDays
        /// </summary>
        [Test]
        public void FuturesV1HistoricalDaysTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string market = null;
            //string instrument = null;
            //List<string> groups = null;
            //int? limit = null;
            //int? toTs = null;
            //int? aggregate = null;
            //bool? fill = null;
            //string mappingPriority = null;
            //string responseFormat = null;
            //var response = instance.FuturesV1HistoricalDays(market, instrument, groups, limit, toTs, aggregate, fill, mappingPriority, responseFormat);
            //Assert.IsInstanceOf(typeof(GENERICRESPONSE), response, "response is GENERICRESPONSE");
        }
        
        /// <summary>
        /// Test FuturesV1HistoricalFundingRateDays
        /// </summary>
        [Test]
        public void FuturesV1HistoricalFundingRateDaysTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string market = null;
            //string instrument = null;
            //List<string> groups = null;
            //int? limit = null;
            //int? toTs = null;
            //int? aggregate = null;
            //bool? fill = null;
            //string mappingPriority = null;
            //string responseFormat = null;
            //var response = instance.FuturesV1HistoricalFundingRateDays(market, instrument, groups, limit, toTs, aggregate, fill, mappingPriority, responseFormat);
            //Assert.IsInstanceOf(typeof(GENERICRESPONSE), response, "response is GENERICRESPONSE");
        }
        
        /// <summary>
        /// Test FuturesV1HistoricalFundingRateHours
        /// </summary>
        [Test]
        public void FuturesV1HistoricalFundingRateHoursTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string market = null;
            //string instrument = null;
            //List<string> groups = null;
            //int? limit = null;
            //int? toTs = null;
            //int? aggregate = null;
            //bool? fill = null;
            //string mappingPriority = null;
            //string responseFormat = null;
            //var response = instance.FuturesV1HistoricalFundingRateHours(market, instrument, groups, limit, toTs, aggregate, fill, mappingPriority, responseFormat);
            //Assert.IsInstanceOf(typeof(GENERICRESPONSE), response, "response is GENERICRESPONSE");
        }
        
        /// <summary>
        /// Test FuturesV1HistoricalFundingRateMessages
        /// </summary>
        [Test]
        public void FuturesV1HistoricalFundingRateMessagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string market = null;
            //string instrument = null;
            //int? afterTs = null;
            //int? lastCcseq = null;
            //int? limit = null;
            //string mappingPriority = null;
            //string responseFormat = null;
            //bool? return404OnEmptyResponse = null;
            //var response = instance.FuturesV1HistoricalFundingRateMessages(market, instrument, afterTs, lastCcseq, limit, mappingPriority, responseFormat, return404OnEmptyResponse);
            //Assert.IsInstanceOf(typeof(GENERICRESPONSE), response, "response is GENERICRESPONSE");
        }
        
        /// <summary>
        /// Test FuturesV1HistoricalFundingRateMessagesHour
        /// </summary>
        [Test]
        public void FuturesV1HistoricalFundingRateMessagesHourTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string market = null;
            //string instrument = null;
            //int? hourTs = null;
            //string mappingPriority = null;
            //string responseFormat = null;
            //bool? return404OnEmptyResponse = null;
            //var response = instance.FuturesV1HistoricalFundingRateMessagesHour(market, instrument, hourTs, mappingPriority, responseFormat, return404OnEmptyResponse);
            //Assert.IsInstanceOf(typeof(GENERICRESPONSE), response, "response is GENERICRESPONSE");
        }
        
        /// <summary>
        /// Test FuturesV1HistoricalFundingRateMinutes
        /// </summary>
        [Test]
        public void FuturesV1HistoricalFundingRateMinutesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string market = null;
            //string instrument = null;
            //List<string> groups = null;
            //int? limit = null;
            //int? toTs = null;
            //int? aggregate = null;
            //bool? fill = null;
            //string mappingPriority = null;
            //string responseFormat = null;
            //var response = instance.FuturesV1HistoricalFundingRateMinutes(market, instrument, groups, limit, toTs, aggregate, fill, mappingPriority, responseFormat);
            //Assert.IsInstanceOf(typeof(GENERICRESPONSE), response, "response is GENERICRESPONSE");
        }
        
        /// <summary>
        /// Test FuturesV1HistoricalHours
        /// </summary>
        [Test]
        public void FuturesV1HistoricalHoursTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string market = null;
            //string instrument = null;
            //List<string> groups = null;
            //int? limit = null;
            //int? toTs = null;
            //int? aggregate = null;
            //bool? fill = null;
            //string mappingPriority = null;
            //string responseFormat = null;
            //var response = instance.FuturesV1HistoricalHours(market, instrument, groups, limit, toTs, aggregate, fill, mappingPriority, responseFormat);
            //Assert.IsInstanceOf(typeof(GENERICRESPONSE), response, "response is GENERICRESPONSE");
        }
        
        /// <summary>
        /// Test FuturesV1HistoricalMinutes
        /// </summary>
        [Test]
        public void FuturesV1HistoricalMinutesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string market = null;
            //string instrument = null;
            //List<string> groups = null;
            //int? limit = null;
            //int? toTs = null;
            //int? aggregate = null;
            //bool? fill = null;
            //string mappingPriority = null;
            //string responseFormat = null;
            //var response = instance.FuturesV1HistoricalMinutes(market, instrument, groups, limit, toTs, aggregate, fill, mappingPriority, responseFormat);
            //Assert.IsInstanceOf(typeof(GENERICRESPONSE), response, "response is GENERICRESPONSE");
        }
        
        /// <summary>
        /// Test FuturesV1HistoricalOpenInterestDays
        /// </summary>
        [Test]
        public void FuturesV1HistoricalOpenInterestDaysTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string market = null;
            //string instrument = null;
            //List<string> groups = null;
            //int? limit = null;
            //int? toTs = null;
            //int? aggregate = null;
            //bool? fill = null;
            //string mappingPriority = null;
            //string responseFormat = null;
            //var response = instance.FuturesV1HistoricalOpenInterestDays(market, instrument, groups, limit, toTs, aggregate, fill, mappingPriority, responseFormat);
            //Assert.IsInstanceOf(typeof(GENERICRESPONSE), response, "response is GENERICRESPONSE");
        }
        
        /// <summary>
        /// Test FuturesV1HistoricalOpenInterestHours
        /// </summary>
        [Test]
        public void FuturesV1HistoricalOpenInterestHoursTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string market = null;
            //string instrument = null;
            //List<string> groups = null;
            //int? limit = null;
            //int? toTs = null;
            //int? aggregate = null;
            //bool? fill = null;
            //string mappingPriority = null;
            //string responseFormat = null;
            //var response = instance.FuturesV1HistoricalOpenInterestHours(market, instrument, groups, limit, toTs, aggregate, fill, mappingPriority, responseFormat);
            //Assert.IsInstanceOf(typeof(GENERICRESPONSE), response, "response is GENERICRESPONSE");
        }
        
        /// <summary>
        /// Test FuturesV1HistoricalOpenInterestMessages
        /// </summary>
        [Test]
        public void FuturesV1HistoricalOpenInterestMessagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string market = null;
            //string instrument = null;
            //int? afterTs = null;
            //int? lastCcseq = null;
            //int? limit = null;
            //string mappingPriority = null;
            //string responseFormat = null;
            //bool? return404OnEmptyResponse = null;
            //var response = instance.FuturesV1HistoricalOpenInterestMessages(market, instrument, afterTs, lastCcseq, limit, mappingPriority, responseFormat, return404OnEmptyResponse);
            //Assert.IsInstanceOf(typeof(GENERICRESPONSE), response, "response is GENERICRESPONSE");
        }
        
        /// <summary>
        /// Test FuturesV1HistoricalOpenInterestMessagesHour
        /// </summary>
        [Test]
        public void FuturesV1HistoricalOpenInterestMessagesHourTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string market = null;
            //string instrument = null;
            //int? hourTs = null;
            //string mappingPriority = null;
            //string responseFormat = null;
            //bool? return404OnEmptyResponse = null;
            //var response = instance.FuturesV1HistoricalOpenInterestMessagesHour(market, instrument, hourTs, mappingPriority, responseFormat, return404OnEmptyResponse);
            //Assert.IsInstanceOf(typeof(GENERICRESPONSE), response, "response is GENERICRESPONSE");
        }
        
        /// <summary>
        /// Test FuturesV1HistoricalOpenInterestMinutes
        /// </summary>
        [Test]
        public void FuturesV1HistoricalOpenInterestMinutesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string market = null;
            //string instrument = null;
            //List<string> groups = null;
            //int? limit = null;
            //int? toTs = null;
            //int? aggregate = null;
            //bool? fill = null;
            //string mappingPriority = null;
            //string responseFormat = null;
            //var response = instance.FuturesV1HistoricalOpenInterestMinutes(market, instrument, groups, limit, toTs, aggregate, fill, mappingPriority, responseFormat);
            //Assert.IsInstanceOf(typeof(GENERICRESPONSE), response, "response is GENERICRESPONSE");
        }
        
        /// <summary>
        /// Test FuturesV1HistoricalTrades
        /// </summary>
        [Test]
        public void FuturesV1HistoricalTradesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string market = null;
            //string instrument = null;
            //int? afterTs = null;
            //int? lastCcseq = null;
            //int? limit = null;
            //string mappingPriority = null;
            //string responseFormat = null;
            //bool? return404OnEmptyResponse = null;
            //var response = instance.FuturesV1HistoricalTrades(market, instrument, afterTs, lastCcseq, limit, mappingPriority, responseFormat, return404OnEmptyResponse);
            //Assert.IsInstanceOf(typeof(GENERICRESPONSE), response, "response is GENERICRESPONSE");
        }
        
        /// <summary>
        /// Test FuturesV1HistoricalTradesHour
        /// </summary>
        [Test]
        public void FuturesV1HistoricalTradesHourTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string market = null;
            //string instrument = null;
            //int? hourTs = null;
            //string mappingPriority = null;
            //string responseFormat = null;
            //bool? return404OnEmptyResponse = null;
            //var response = instance.FuturesV1HistoricalTradesHour(market, instrument, hourTs, mappingPriority, responseFormat, return404OnEmptyResponse);
            //Assert.IsInstanceOf(typeof(GENERICRESPONSE), response, "response is GENERICRESPONSE");
        }
        
        /// <summary>
        /// Test FuturesV1LatestFundingRateTick
        /// </summary>
        [Test]
        public void FuturesV1LatestFundingRateTickTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string market = null;
            //List<string> instruments = null;
            //List<string> groups = null;
            //string mappingPriority = null;
            //var response = instance.FuturesV1LatestFundingRateTick(market, instruments, groups, mappingPriority);
            //Assert.IsInstanceOf(typeof(GENERICRESPONSE), response, "response is GENERICRESPONSE");
        }
        
        /// <summary>
        /// Test FuturesV1LatestInstrumentMetadata
        /// </summary>
        [Test]
        public void FuturesV1LatestInstrumentMetadataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string market = null;
            //List<string> instruments = null;
            //List<string> groups = null;
            //string mappingPriority = null;
            //var response = instance.FuturesV1LatestInstrumentMetadata(market, instruments, groups, mappingPriority);
            //Assert.IsInstanceOf(typeof(GENERICRESPONSE), response, "response is GENERICRESPONSE");
        }
        
        /// <summary>
        /// Test FuturesV1LatestOpenInterestTick
        /// </summary>
        [Test]
        public void FuturesV1LatestOpenInterestTickTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string market = null;
            //List<string> instruments = null;
            //List<string> groups = null;
            //string mappingPriority = null;
            //var response = instance.FuturesV1LatestOpenInterestTick(market, instruments, groups, mappingPriority);
            //Assert.IsInstanceOf(typeof(GENERICRESPONSE), response, "response is GENERICRESPONSE");
        }
        
        /// <summary>
        /// Test FuturesV1LatestTick
        /// </summary>
        [Test]
        public void FuturesV1LatestTickTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string market = null;
            //List<string> instruments = null;
            //List<string> groups = null;
            //string mappingPriority = null;
            //var response = instance.FuturesV1LatestTick(market, instruments, groups, mappingPriority);
            //Assert.IsInstanceOf(typeof(GENERICRESPONSE), response, "response is GENERICRESPONSE");
        }
        
        /// <summary>
        /// Test FuturesV1Markets
        /// </summary>
        [Test]
        public void FuturesV1MarketsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string market = null;
            //var response = instance.FuturesV1Markets(market);
            //Assert.IsInstanceOf(typeof(GENERICRESPONSE), response, "response is GENERICRESPONSE");
        }
        
        /// <summary>
        /// Test FuturesV1MarketsInstruments
        /// </summary>
        [Test]
        public void FuturesV1MarketsInstrumentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string market = null;
            //string instrument = null;
            //List<string> instrumentStatus = null;
            //var response = instance.FuturesV1MarketsInstruments(market, instrument, instrumentStatus);
            //Assert.IsInstanceOf(typeof(GENERICRESPONSE), response, "response is GENERICRESPONSE");
        }
        
        /// <summary>
        /// Test FuturesV1MarketsInstrumentsUnmapped
        /// </summary>
        [Test]
        public void FuturesV1MarketsInstrumentsUnmappedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string market = null;
            //string instrument = null;
            //List<string> instrumentStatus = null;
            //var response = instance.FuturesV1MarketsInstrumentsUnmapped(market, instrument, instrumentStatus);
            //Assert.IsInstanceOf(typeof(GENERICRESPONSE), response, "response is GENERICRESPONSE");
        }
        
        /// <summary>
        /// Test IndexV1HistoricalDays
        /// </summary>
        [Test]
        public void IndexV1HistoricalDaysTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string market = null;
            //string instrument = null;
            //List<string> groups = null;
            //int? limit = null;
            //int? toTs = null;
            //int? aggregate = null;
            //bool? fill = null;
            //string mappingPriority = null;
            //string responseFormat = null;
            //var response = instance.IndexV1HistoricalDays(market, instrument, groups, limit, toTs, aggregate, fill, mappingPriority, responseFormat);
            //Assert.IsInstanceOf(typeof(GENERICRESPONSE), response, "response is GENERICRESPONSE");
        }
        
        /// <summary>
        /// Test IndexV1HistoricalHours
        /// </summary>
        [Test]
        public void IndexV1HistoricalHoursTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string market = null;
            //string instrument = null;
            //List<string> groups = null;
            //int? limit = null;
            //int? toTs = null;
            //int? aggregate = null;
            //bool? fill = null;
            //string mappingPriority = null;
            //string responseFormat = null;
            //var response = instance.IndexV1HistoricalHours(market, instrument, groups, limit, toTs, aggregate, fill, mappingPriority, responseFormat);
            //Assert.IsInstanceOf(typeof(GENERICRESPONSE), response, "response is GENERICRESPONSE");
        }
        
        /// <summary>
        /// Test IndexV1HistoricalMessages
        /// </summary>
        [Test]
        public void IndexV1HistoricalMessagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string market = null;
            //string instrument = null;
            //int? afterTs = null;
            //int? lastCcseq = null;
            //int? limit = null;
            //string mappingPriority = null;
            //string responseFormat = null;
            //bool? return404OnEmptyResponse = null;
            //var response = instance.IndexV1HistoricalMessages(market, instrument, afterTs, lastCcseq, limit, mappingPriority, responseFormat, return404OnEmptyResponse);
            //Assert.IsInstanceOf(typeof(GENERICRESPONSE), response, "response is GENERICRESPONSE");
        }
        
        /// <summary>
        /// Test IndexV1HistoricalMessagesHour
        /// </summary>
        [Test]
        public void IndexV1HistoricalMessagesHourTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string market = null;
            //string instrument = null;
            //int? hourTs = null;
            //string mappingPriority = null;
            //string responseFormat = null;
            //bool? return404OnEmptyResponse = null;
            //var response = instance.IndexV1HistoricalMessagesHour(market, instrument, hourTs, mappingPriority, responseFormat, return404OnEmptyResponse);
            //Assert.IsInstanceOf(typeof(GENERICRESPONSE), response, "response is GENERICRESPONSE");
        }
        
        /// <summary>
        /// Test IndexV1HistoricalMinutes
        /// </summary>
        [Test]
        public void IndexV1HistoricalMinutesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string market = null;
            //string instrument = null;
            //List<string> groups = null;
            //int? limit = null;
            //int? toTs = null;
            //int? aggregate = null;
            //bool? fill = null;
            //string mappingPriority = null;
            //string responseFormat = null;
            //var response = instance.IndexV1HistoricalMinutes(market, instrument, groups, limit, toTs, aggregate, fill, mappingPriority, responseFormat);
            //Assert.IsInstanceOf(typeof(GENERICRESPONSE), response, "response is GENERICRESPONSE");
        }
        
        /// <summary>
        /// Test IndexV1LatestInstrumentMetadata
        /// </summary>
        [Test]
        public void IndexV1LatestInstrumentMetadataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string market = null;
            //List<string> instruments = null;
            //List<string> groups = null;
            //string mappingPriority = null;
            //var response = instance.IndexV1LatestInstrumentMetadata(market, instruments, groups, mappingPriority);
            //Assert.IsInstanceOf(typeof(GENERICRESPONSE), response, "response is GENERICRESPONSE");
        }
        
        /// <summary>
        /// Test IndexV1LatestTick
        /// </summary>
        [Test]
        public void IndexV1LatestTickTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string market = null;
            //List<string> instruments = null;
            //List<string> groups = null;
            //string mappingPriority = null;
            //var response = instance.IndexV1LatestTick(market, instruments, groups, mappingPriority);
            //Assert.IsInstanceOf(typeof(GENERICRESPONSE), response, "response is GENERICRESPONSE");
        }
        
        /// <summary>
        /// Test IndexV1Markets
        /// </summary>
        [Test]
        public void IndexV1MarketsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string market = null;
            //var response = instance.IndexV1Markets(market);
            //Assert.IsInstanceOf(typeof(GENERICRESPONSE), response, "response is GENERICRESPONSE");
        }
        
        /// <summary>
        /// Test IndexV1MarketsInstruments
        /// </summary>
        [Test]
        public void IndexV1MarketsInstrumentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string market = null;
            //string instrument = null;
            //List<string> instrumentStatus = null;
            //var response = instance.IndexV1MarketsInstruments(market, instrument, instrumentStatus);
            //Assert.IsInstanceOf(typeof(GENERICRESPONSE), response, "response is GENERICRESPONSE");
        }
        
        /// <summary>
        /// Test IndexV1MarketsInstrumentsUnmapped
        /// </summary>
        [Test]
        public void IndexV1MarketsInstrumentsUnmappedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string market = null;
            //string instrument = null;
            //List<string> instrumentStatus = null;
            //var response = instance.IndexV1MarketsInstrumentsUnmapped(market, instrument, instrumentStatus);
            //Assert.IsInstanceOf(typeof(GENERICRESPONSE), response, "response is GENERICRESPONSE");
        }
        
    }

}
