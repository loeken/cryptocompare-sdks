#include <map>
#include <cstdlib>
#include <glib-object.h>
#include <json-glib/json-glib.h>
#include "Helpers.h"


#include "SPOT_INSTRUMENT_MARKET_DATA.h"

using namespace std;
using namespace Tizen::ArtikCloud;

SPOT_INSTRUMENT_MARKET_DATA::SPOT_INSTRUMENT_MARKET_DATA()
{
	//__init();
}

SPOT_INSTRUMENT_MARKET_DATA::~SPOT_INSTRUMENT_MARKET_DATA()
{
	//__cleanup();
}

void
SPOT_INSTRUMENT_MARKET_DATA::__init()
{
	//bASE = std::string();
	//cCSEQ = int(0);
	//cURRENT_DAY_HIGH = int(0);
	//cURRENT_DAY_LOW = int(0);
	//cURRENT_DAY_OPEN = int(0);
	//cURRENT_DAY_QUOTE_VOLUME = int(0);
	//cURRENT_DAY_QUOTE_VOLUME_BUY = int(0);
	//cURRENT_DAY_QUOTE_VOLUME_SELL = int(0);
	//cURRENT_DAY_QUOTE_VOLUME_UNKNOWN = int(0);
	//cURRENT_DAY_TOTAL_TRADES = int(0);
	//cURRENT_DAY_TOTAL_TRADES_BUY = int(0);
	//cURRENT_DAY_TOTAL_TRADES_SELL = int(0);
	//cURRENT_DAY_TOTAL_TRADES_UNKNOWN = int(0);
	//cURRENT_DAY_VOLUME = int(0);
	//cURRENT_DAY_VOLUME_BUY = int(0);
	//cURRENT_DAY_VOLUME_SELL = int(0);
	//cURRENT_DAY_VOLUME_UNKNOWN = int(0);
	//cURRENT_HOUR_HIGH = int(0);
	//cURRENT_HOUR_LOW = int(0);
	//cURRENT_HOUR_OPEN = int(0);
	//cURRENT_HOUR_QUOTE_VOLUME = int(0);
	//cURRENT_HOUR_QUOTE_VOLUME_BUY = int(0);
	//cURRENT_HOUR_QUOTE_VOLUME_SELL = int(0);
	//cURRENT_HOUR_QUOTE_VOLUME_UNKNOWN = int(0);
	//cURRENT_HOUR_TOTAL_TRADES = int(0);
	//cURRENT_HOUR_TOTAL_TRADES_BUY = int(0);
	//cURRENT_HOUR_TOTAL_TRADES_SELL = int(0);
	//cURRENT_HOUR_TOTAL_TRADES_UNKNOWN = int(0);
	//cURRENT_HOUR_VOLUME = int(0);
	//cURRENT_HOUR_VOLUME_BUY = int(0);
	//cURRENT_HOUR_VOLUME_SELL = int(0);
	//cURRENT_HOUR_VOLUME_UNKNOWN = int(0);
	//cURRENT_MONTH_HIGH = int(0);
	//cURRENT_MONTH_LOW = int(0);
	//cURRENT_MONTH_OPEN = int(0);
	//cURRENT_MONTH_QUOTE_VOLUME = int(0);
	//cURRENT_MONTH_QUOTE_VOLUME_BUY = int(0);
	//cURRENT_MONTH_QUOTE_VOLUME_SELL = int(0);
	//cURRENT_MONTH_QUOTE_VOLUME_UNKNOWN = int(0);
	//cURRENT_MONTH_TOTAL_TRADES = int(0);
	//cURRENT_MONTH_TOTAL_TRADES_BUY = int(0);
	//cURRENT_MONTH_TOTAL_TRADES_SELL = int(0);
	//cURRENT_MONTH_TOTAL_TRADES_UNKNOWN = int(0);
	//cURRENT_MONTH_VOLUME = int(0);
	//cURRENT_MONTH_VOLUME_BUY = int(0);
	//cURRENT_MONTH_VOLUME_SELL = int(0);
	//cURRENT_MONTH_VOLUME_UNKNOWN = int(0);
	//cURRENT_WEEK_HIGH = int(0);
	//cURRENT_WEEK_LOW = int(0);
	//cURRENT_WEEK_OPEN = int(0);
	//cURRENT_WEEK_QUOTE_VOLUME = int(0);
	//cURRENT_WEEK_QUOTE_VOLUME_BUY = int(0);
	//cURRENT_WEEK_QUOTE_VOLUME_SELL = int(0);
	//cURRENT_WEEK_QUOTE_VOLUME_UNKNOWN = int(0);
	//cURRENT_WEEK_TOTAL_TRADES = int(0);
	//cURRENT_WEEK_TOTAL_TRADES_BUY = int(0);
	//cURRENT_WEEK_TOTAL_TRADES_SELL = int(0);
	//cURRENT_WEEK_TOTAL_TRADES_UNKNOWN = int(0);
	//cURRENT_WEEK_VOLUME = int(0);
	//cURRENT_WEEK_VOLUME_BUY = int(0);
	//cURRENT_WEEK_VOLUME_SELL = int(0);
	//cURRENT_WEEK_VOLUME_UNKNOWN = int(0);
	//cURRENT_YEAR_HIGH = int(0);
	//cURRENT_YEAR_LOW = int(0);
	//cURRENT_YEAR_OPEN = int(0);
	//cURRENT_YEAR_QUOTE_VOLUME = int(0);
	//cURRENT_YEAR_QUOTE_VOLUME_BUY = int(0);
	//cURRENT_YEAR_QUOTE_VOLUME_SELL = int(0);
	//cURRENT_YEAR_QUOTE_VOLUME_UNKNOWN = int(0);
	//cURRENT_YEAR_TOTAL_TRADES = int(0);
	//cURRENT_YEAR_TOTAL_TRADES_BUY = int(0);
	//cURRENT_YEAR_TOTAL_TRADES_SELL = int(0);
	//cURRENT_YEAR_TOTAL_TRADES_UNKNOWN = int(0);
	//cURRENT_YEAR_VOLUME = int(0);
	//cURRENT_YEAR_VOLUME_BUY = int(0);
	//cURRENT_YEAR_VOLUME_SELL = int(0);
	//cURRENT_YEAR_VOLUME_UNKNOWN = int(0);
	//iNSTRUMENT = std::string();
	//lAST_PROCESSED_TRADE_CCSEQ = std::string();
	//lAST_PROCESSED_TRADE_PRICE = int(0);
	//lAST_PROCESSED_TRADE_QUANTITY = int(0);
	//lAST_PROCESSED_TRADE_QUOTE_QUANTITY = int(0);
	//lAST_PROCESSED_TRADE_SIDE = std::string();
	//lAST_PROCESSED_TRADE_TS = int(0);
	//lAST_TRADE_CCSEQ = std::string();
	//lAST_TRADE_ID = std::string();
	//lAST_TRADE_QUANTITY = int(0);
	//lAST_TRADE_QUOTE_QUANTITY = int(0);
	//lAST_TRADE_SIDE = std::string();
	//lIFETIME_FIRST_TRADE_TS = int(0);
	//lIFETIME_HIGH = int(0);
	//lIFETIME_HIGH_TS = int(0);
	//lIFETIME_LOW = int(0);
	//lIFETIME_LOW_TS = int(0);
	//lIFETIME_OPEN = int(0);
	//lIFETIME_QUOTE_VOLUME = int(0);
	//lIFETIME_QUOTE_VOLUME_BUY = int(0);
	//lIFETIME_QUOTE_VOLUME_SELL = int(0);
	//lIFETIME_QUOTE_VOLUME_UNKNOWN = int(0);
	//lIFETIME_TOTAL_TRADES = int(0);
	//lIFETIME_TOTAL_TRADES_BUY = int(0);
	//lIFETIME_TOTAL_TRADES_SELL = int(0);
	//lIFETIME_TOTAL_TRADES_UNKNOWN = int(0);
	//lIFETIME_VOLUME = int(0);
	//lIFETIME_VOLUME_BUY = int(0);
	//lIFETIME_VOLUME_SELL = int(0);
	//lIFETIME_VOLUME_UNKNOWN = int(0);
	//mAPPED_INSTRUMENT = std::string();
	//mARKET = std::string();
	//mOVING_180_DAY_HIGH = int(0);
	//mOVING_180_DAY_LOW = int(0);
	//mOVING_180_DAY_OPEN = int(0);
	//mOVING_180_DAY_QUOTE_VOLUME = int(0);
	//mOVING_180_DAY_QUOTE_VOLUME_BUY = int(0);
	//mOVING_180_DAY_QUOTE_VOLUME_SELL = int(0);
	//mOVING_180_DAY_QUOTE_VOLUME_UNKNOWN = int(0);
	//mOVING_180_DAY_TOTAL_TRADES = int(0);
	//mOVING_180_DAY_TOTAL_TRADES_BUY = int(0);
	//mOVING_180_DAY_TOTAL_TRADES_SELL = int(0);
	//mOVING_180_DAY_TOTAL_TRADES_UNKNOWN = int(0);
	//mOVING_180_DAY_VOLUME = int(0);
	//mOVING_180_DAY_VOLUME_BUY = int(0);
	//mOVING_180_DAY_VOLUME_SELL = int(0);
	//mOVING_180_DAY_VOLUME_UNKNOWN = int(0);
	//mOVING_24_HOUR_HIGH = int(0);
	//mOVING_24_HOUR_LOW = int(0);
	//mOVING_24_HOUR_OPEN = int(0);
	//mOVING_24_HOUR_QUOTE_VOLUME = int(0);
	//mOVING_24_HOUR_QUOTE_VOLUME_BUY = int(0);
	//mOVING_24_HOUR_QUOTE_VOLUME_SELL = int(0);
	//mOVING_24_HOUR_QUOTE_VOLUME_UNKNOWN = int(0);
	//mOVING_24_HOUR_TOTAL_TRADES = int(0);
	//mOVING_24_HOUR_TOTAL_TRADES_BUY = int(0);
	//mOVING_24_HOUR_TOTAL_TRADES_SELL = int(0);
	//mOVING_24_HOUR_TOTAL_TRADES_UNKNOWN = int(0);
	//mOVING_24_HOUR_VOLUME = int(0);
	//mOVING_24_HOUR_VOLUME_BUY = int(0);
	//mOVING_24_HOUR_VOLUME_SELL = int(0);
	//mOVING_24_HOUR_VOLUME_UNKNOWN = int(0);
	//mOVING_30_DAY_HIGH = int(0);
	//mOVING_30_DAY_LOW = int(0);
	//mOVING_30_DAY_OPEN = int(0);
	//mOVING_30_DAY_QUOTE_VOLUME = int(0);
	//mOVING_30_DAY_QUOTE_VOLUME_BUY = int(0);
	//mOVING_30_DAY_QUOTE_VOLUME_SELL = int(0);
	//mOVING_30_DAY_QUOTE_VOLUME_UNKNOWN = int(0);
	//mOVING_30_DAY_TOTAL_TRADES = int(0);
	//mOVING_30_DAY_TOTAL_TRADES_BUY = int(0);
	//mOVING_30_DAY_TOTAL_TRADES_SELL = int(0);
	//mOVING_30_DAY_TOTAL_TRADES_UNKNOWN = int(0);
	//mOVING_30_DAY_VOLUME = int(0);
	//mOVING_30_DAY_VOLUME_BUY = int(0);
	//mOVING_30_DAY_VOLUME_SELL = int(0);
	//mOVING_30_DAY_VOLUME_UNKNOWN = int(0);
	//mOVING_365_DAY_HIGH = int(0);
	//mOVING_365_DAY_LOW = int(0);
	//mOVING_365_DAY_OPEN = int(0);
	//mOVING_365_DAY_QUOTE_VOLUME = int(0);
	//mOVING_365_DAY_QUOTE_VOLUME_BUY = int(0);
	//mOVING_365_DAY_QUOTE_VOLUME_SELL = int(0);
	//mOVING_365_DAY_QUOTE_VOLUME_UNKNOWN = int(0);
	//mOVING_365_DAY_TOTAL_TRADES = int(0);
	//mOVING_365_DAY_TOTAL_TRADES_BUY = int(0);
	//mOVING_365_DAY_TOTAL_TRADES_SELL = int(0);
	//mOVING_365_DAY_TOTAL_TRADES_UNKNOWN = int(0);
	//mOVING_365_DAY_VOLUME = int(0);
	//mOVING_365_DAY_VOLUME_BUY = int(0);
	//mOVING_365_DAY_VOLUME_SELL = int(0);
	//mOVING_365_DAY_VOLUME_UNKNOWN = int(0);
	//mOVING_7_DAY_HIGH = int(0);
	//mOVING_7_DAY_LOW = int(0);
	//mOVING_7_DAY_OPEN = int(0);
	//mOVING_7_DAY_QUOTE_VOLUME = int(0);
	//mOVING_7_DAY_QUOTE_VOLUME_BUY = int(0);
	//mOVING_7_DAY_QUOTE_VOLUME_SELL = int(0);
	//mOVING_7_DAY_QUOTE_VOLUME_UNKNOWN = int(0);
	//mOVING_7_DAY_TOTAL_TRADES = int(0);
	//mOVING_7_DAY_TOTAL_TRADES_BUY = int(0);
	//mOVING_7_DAY_TOTAL_TRADES_SELL = int(0);
	//mOVING_7_DAY_TOTAL_TRADES_UNKNOWN = int(0);
	//mOVING_7_DAY_VOLUME = int(0);
	//mOVING_7_DAY_VOLUME_BUY = int(0);
	//mOVING_7_DAY_VOLUME_SELL = int(0);
	//mOVING_7_DAY_VOLUME_UNKNOWN = int(0);
	//mOVING_90_DAY_HIGH = int(0);
	//mOVING_90_DAY_LOW = int(0);
	//mOVING_90_DAY_OPEN = int(0);
	//mOVING_90_DAY_QUOTE_VOLUME = int(0);
	//mOVING_90_DAY_QUOTE_VOLUME_BUY = int(0);
	//mOVING_90_DAY_QUOTE_VOLUME_SELL = int(0);
	//mOVING_90_DAY_QUOTE_VOLUME_UNKNOWN = int(0);
	//mOVING_90_DAY_TOTAL_TRADES = int(0);
	//mOVING_90_DAY_TOTAL_TRADES_BUY = int(0);
	//mOVING_90_DAY_TOTAL_TRADES_SELL = int(0);
	//mOVING_90_DAY_TOTAL_TRADES_UNKNOWN = int(0);
	//mOVING_90_DAY_VOLUME = int(0);
	//mOVING_90_DAY_VOLUME_BUY = int(0);
	//mOVING_90_DAY_VOLUME_SELL = int(0);
	//mOVING_90_DAY_VOLUME_UNKNOWN = int(0);
	//pRICE = int(0);
	//pRICE_FLAG = std::string();
	//pRICE_LAST_UPDATE_TS = int(0);
	//qUOTE = std::string();
	//tOP_ASK_LAST_UPDATE_TS = int(0);
	//tOP_ASK_PRICE = int(0);
	//tOP_ASK_QUANTITY = int(0);
	//tOP_BID_LAST_UPDATE_TS = int(0);
	//tOP_BID_PRICE = int(0);
	//tOP_BID_QUANTITY = int(0);
	//tYPE = std::string();
}

void
SPOT_INSTRUMENT_MARKET_DATA::__cleanup()
{
	//if(bASE != NULL) {
	//
	//delete bASE;
	//bASE = NULL;
	//}
	//if(cCSEQ != NULL) {
	//
	//delete cCSEQ;
	//cCSEQ = NULL;
	//}
	//if(cURRENT_DAY_HIGH != NULL) {
	//
	//delete cURRENT_DAY_HIGH;
	//cURRENT_DAY_HIGH = NULL;
	//}
	//if(cURRENT_DAY_LOW != NULL) {
	//
	//delete cURRENT_DAY_LOW;
	//cURRENT_DAY_LOW = NULL;
	//}
	//if(cURRENT_DAY_OPEN != NULL) {
	//
	//delete cURRENT_DAY_OPEN;
	//cURRENT_DAY_OPEN = NULL;
	//}
	//if(cURRENT_DAY_QUOTE_VOLUME != NULL) {
	//
	//delete cURRENT_DAY_QUOTE_VOLUME;
	//cURRENT_DAY_QUOTE_VOLUME = NULL;
	//}
	//if(cURRENT_DAY_QUOTE_VOLUME_BUY != NULL) {
	//
	//delete cURRENT_DAY_QUOTE_VOLUME_BUY;
	//cURRENT_DAY_QUOTE_VOLUME_BUY = NULL;
	//}
	//if(cURRENT_DAY_QUOTE_VOLUME_SELL != NULL) {
	//
	//delete cURRENT_DAY_QUOTE_VOLUME_SELL;
	//cURRENT_DAY_QUOTE_VOLUME_SELL = NULL;
	//}
	//if(cURRENT_DAY_QUOTE_VOLUME_UNKNOWN != NULL) {
	//
	//delete cURRENT_DAY_QUOTE_VOLUME_UNKNOWN;
	//cURRENT_DAY_QUOTE_VOLUME_UNKNOWN = NULL;
	//}
	//if(cURRENT_DAY_TOTAL_TRADES != NULL) {
	//
	//delete cURRENT_DAY_TOTAL_TRADES;
	//cURRENT_DAY_TOTAL_TRADES = NULL;
	//}
	//if(cURRENT_DAY_TOTAL_TRADES_BUY != NULL) {
	//
	//delete cURRENT_DAY_TOTAL_TRADES_BUY;
	//cURRENT_DAY_TOTAL_TRADES_BUY = NULL;
	//}
	//if(cURRENT_DAY_TOTAL_TRADES_SELL != NULL) {
	//
	//delete cURRENT_DAY_TOTAL_TRADES_SELL;
	//cURRENT_DAY_TOTAL_TRADES_SELL = NULL;
	//}
	//if(cURRENT_DAY_TOTAL_TRADES_UNKNOWN != NULL) {
	//
	//delete cURRENT_DAY_TOTAL_TRADES_UNKNOWN;
	//cURRENT_DAY_TOTAL_TRADES_UNKNOWN = NULL;
	//}
	//if(cURRENT_DAY_VOLUME != NULL) {
	//
	//delete cURRENT_DAY_VOLUME;
	//cURRENT_DAY_VOLUME = NULL;
	//}
	//if(cURRENT_DAY_VOLUME_BUY != NULL) {
	//
	//delete cURRENT_DAY_VOLUME_BUY;
	//cURRENT_DAY_VOLUME_BUY = NULL;
	//}
	//if(cURRENT_DAY_VOLUME_SELL != NULL) {
	//
	//delete cURRENT_DAY_VOLUME_SELL;
	//cURRENT_DAY_VOLUME_SELL = NULL;
	//}
	//if(cURRENT_DAY_VOLUME_UNKNOWN != NULL) {
	//
	//delete cURRENT_DAY_VOLUME_UNKNOWN;
	//cURRENT_DAY_VOLUME_UNKNOWN = NULL;
	//}
	//if(cURRENT_HOUR_HIGH != NULL) {
	//
	//delete cURRENT_HOUR_HIGH;
	//cURRENT_HOUR_HIGH = NULL;
	//}
	//if(cURRENT_HOUR_LOW != NULL) {
	//
	//delete cURRENT_HOUR_LOW;
	//cURRENT_HOUR_LOW = NULL;
	//}
	//if(cURRENT_HOUR_OPEN != NULL) {
	//
	//delete cURRENT_HOUR_OPEN;
	//cURRENT_HOUR_OPEN = NULL;
	//}
	//if(cURRENT_HOUR_QUOTE_VOLUME != NULL) {
	//
	//delete cURRENT_HOUR_QUOTE_VOLUME;
	//cURRENT_HOUR_QUOTE_VOLUME = NULL;
	//}
	//if(cURRENT_HOUR_QUOTE_VOLUME_BUY != NULL) {
	//
	//delete cURRENT_HOUR_QUOTE_VOLUME_BUY;
	//cURRENT_HOUR_QUOTE_VOLUME_BUY = NULL;
	//}
	//if(cURRENT_HOUR_QUOTE_VOLUME_SELL != NULL) {
	//
	//delete cURRENT_HOUR_QUOTE_VOLUME_SELL;
	//cURRENT_HOUR_QUOTE_VOLUME_SELL = NULL;
	//}
	//if(cURRENT_HOUR_QUOTE_VOLUME_UNKNOWN != NULL) {
	//
	//delete cURRENT_HOUR_QUOTE_VOLUME_UNKNOWN;
	//cURRENT_HOUR_QUOTE_VOLUME_UNKNOWN = NULL;
	//}
	//if(cURRENT_HOUR_TOTAL_TRADES != NULL) {
	//
	//delete cURRENT_HOUR_TOTAL_TRADES;
	//cURRENT_HOUR_TOTAL_TRADES = NULL;
	//}
	//if(cURRENT_HOUR_TOTAL_TRADES_BUY != NULL) {
	//
	//delete cURRENT_HOUR_TOTAL_TRADES_BUY;
	//cURRENT_HOUR_TOTAL_TRADES_BUY = NULL;
	//}
	//if(cURRENT_HOUR_TOTAL_TRADES_SELL != NULL) {
	//
	//delete cURRENT_HOUR_TOTAL_TRADES_SELL;
	//cURRENT_HOUR_TOTAL_TRADES_SELL = NULL;
	//}
	//if(cURRENT_HOUR_TOTAL_TRADES_UNKNOWN != NULL) {
	//
	//delete cURRENT_HOUR_TOTAL_TRADES_UNKNOWN;
	//cURRENT_HOUR_TOTAL_TRADES_UNKNOWN = NULL;
	//}
	//if(cURRENT_HOUR_VOLUME != NULL) {
	//
	//delete cURRENT_HOUR_VOLUME;
	//cURRENT_HOUR_VOLUME = NULL;
	//}
	//if(cURRENT_HOUR_VOLUME_BUY != NULL) {
	//
	//delete cURRENT_HOUR_VOLUME_BUY;
	//cURRENT_HOUR_VOLUME_BUY = NULL;
	//}
	//if(cURRENT_HOUR_VOLUME_SELL != NULL) {
	//
	//delete cURRENT_HOUR_VOLUME_SELL;
	//cURRENT_HOUR_VOLUME_SELL = NULL;
	//}
	//if(cURRENT_HOUR_VOLUME_UNKNOWN != NULL) {
	//
	//delete cURRENT_HOUR_VOLUME_UNKNOWN;
	//cURRENT_HOUR_VOLUME_UNKNOWN = NULL;
	//}
	//if(cURRENT_MONTH_HIGH != NULL) {
	//
	//delete cURRENT_MONTH_HIGH;
	//cURRENT_MONTH_HIGH = NULL;
	//}
	//if(cURRENT_MONTH_LOW != NULL) {
	//
	//delete cURRENT_MONTH_LOW;
	//cURRENT_MONTH_LOW = NULL;
	//}
	//if(cURRENT_MONTH_OPEN != NULL) {
	//
	//delete cURRENT_MONTH_OPEN;
	//cURRENT_MONTH_OPEN = NULL;
	//}
	//if(cURRENT_MONTH_QUOTE_VOLUME != NULL) {
	//
	//delete cURRENT_MONTH_QUOTE_VOLUME;
	//cURRENT_MONTH_QUOTE_VOLUME = NULL;
	//}
	//if(cURRENT_MONTH_QUOTE_VOLUME_BUY != NULL) {
	//
	//delete cURRENT_MONTH_QUOTE_VOLUME_BUY;
	//cURRENT_MONTH_QUOTE_VOLUME_BUY = NULL;
	//}
	//if(cURRENT_MONTH_QUOTE_VOLUME_SELL != NULL) {
	//
	//delete cURRENT_MONTH_QUOTE_VOLUME_SELL;
	//cURRENT_MONTH_QUOTE_VOLUME_SELL = NULL;
	//}
	//if(cURRENT_MONTH_QUOTE_VOLUME_UNKNOWN != NULL) {
	//
	//delete cURRENT_MONTH_QUOTE_VOLUME_UNKNOWN;
	//cURRENT_MONTH_QUOTE_VOLUME_UNKNOWN = NULL;
	//}
	//if(cURRENT_MONTH_TOTAL_TRADES != NULL) {
	//
	//delete cURRENT_MONTH_TOTAL_TRADES;
	//cURRENT_MONTH_TOTAL_TRADES = NULL;
	//}
	//if(cURRENT_MONTH_TOTAL_TRADES_BUY != NULL) {
	//
	//delete cURRENT_MONTH_TOTAL_TRADES_BUY;
	//cURRENT_MONTH_TOTAL_TRADES_BUY = NULL;
	//}
	//if(cURRENT_MONTH_TOTAL_TRADES_SELL != NULL) {
	//
	//delete cURRENT_MONTH_TOTAL_TRADES_SELL;
	//cURRENT_MONTH_TOTAL_TRADES_SELL = NULL;
	//}
	//if(cURRENT_MONTH_TOTAL_TRADES_UNKNOWN != NULL) {
	//
	//delete cURRENT_MONTH_TOTAL_TRADES_UNKNOWN;
	//cURRENT_MONTH_TOTAL_TRADES_UNKNOWN = NULL;
	//}
	//if(cURRENT_MONTH_VOLUME != NULL) {
	//
	//delete cURRENT_MONTH_VOLUME;
	//cURRENT_MONTH_VOLUME = NULL;
	//}
	//if(cURRENT_MONTH_VOLUME_BUY != NULL) {
	//
	//delete cURRENT_MONTH_VOLUME_BUY;
	//cURRENT_MONTH_VOLUME_BUY = NULL;
	//}
	//if(cURRENT_MONTH_VOLUME_SELL != NULL) {
	//
	//delete cURRENT_MONTH_VOLUME_SELL;
	//cURRENT_MONTH_VOLUME_SELL = NULL;
	//}
	//if(cURRENT_MONTH_VOLUME_UNKNOWN != NULL) {
	//
	//delete cURRENT_MONTH_VOLUME_UNKNOWN;
	//cURRENT_MONTH_VOLUME_UNKNOWN = NULL;
	//}
	//if(cURRENT_WEEK_HIGH != NULL) {
	//
	//delete cURRENT_WEEK_HIGH;
	//cURRENT_WEEK_HIGH = NULL;
	//}
	//if(cURRENT_WEEK_LOW != NULL) {
	//
	//delete cURRENT_WEEK_LOW;
	//cURRENT_WEEK_LOW = NULL;
	//}
	//if(cURRENT_WEEK_OPEN != NULL) {
	//
	//delete cURRENT_WEEK_OPEN;
	//cURRENT_WEEK_OPEN = NULL;
	//}
	//if(cURRENT_WEEK_QUOTE_VOLUME != NULL) {
	//
	//delete cURRENT_WEEK_QUOTE_VOLUME;
	//cURRENT_WEEK_QUOTE_VOLUME = NULL;
	//}
	//if(cURRENT_WEEK_QUOTE_VOLUME_BUY != NULL) {
	//
	//delete cURRENT_WEEK_QUOTE_VOLUME_BUY;
	//cURRENT_WEEK_QUOTE_VOLUME_BUY = NULL;
	//}
	//if(cURRENT_WEEK_QUOTE_VOLUME_SELL != NULL) {
	//
	//delete cURRENT_WEEK_QUOTE_VOLUME_SELL;
	//cURRENT_WEEK_QUOTE_VOLUME_SELL = NULL;
	//}
	//if(cURRENT_WEEK_QUOTE_VOLUME_UNKNOWN != NULL) {
	//
	//delete cURRENT_WEEK_QUOTE_VOLUME_UNKNOWN;
	//cURRENT_WEEK_QUOTE_VOLUME_UNKNOWN = NULL;
	//}
	//if(cURRENT_WEEK_TOTAL_TRADES != NULL) {
	//
	//delete cURRENT_WEEK_TOTAL_TRADES;
	//cURRENT_WEEK_TOTAL_TRADES = NULL;
	//}
	//if(cURRENT_WEEK_TOTAL_TRADES_BUY != NULL) {
	//
	//delete cURRENT_WEEK_TOTAL_TRADES_BUY;
	//cURRENT_WEEK_TOTAL_TRADES_BUY = NULL;
	//}
	//if(cURRENT_WEEK_TOTAL_TRADES_SELL != NULL) {
	//
	//delete cURRENT_WEEK_TOTAL_TRADES_SELL;
	//cURRENT_WEEK_TOTAL_TRADES_SELL = NULL;
	//}
	//if(cURRENT_WEEK_TOTAL_TRADES_UNKNOWN != NULL) {
	//
	//delete cURRENT_WEEK_TOTAL_TRADES_UNKNOWN;
	//cURRENT_WEEK_TOTAL_TRADES_UNKNOWN = NULL;
	//}
	//if(cURRENT_WEEK_VOLUME != NULL) {
	//
	//delete cURRENT_WEEK_VOLUME;
	//cURRENT_WEEK_VOLUME = NULL;
	//}
	//if(cURRENT_WEEK_VOLUME_BUY != NULL) {
	//
	//delete cURRENT_WEEK_VOLUME_BUY;
	//cURRENT_WEEK_VOLUME_BUY = NULL;
	//}
	//if(cURRENT_WEEK_VOLUME_SELL != NULL) {
	//
	//delete cURRENT_WEEK_VOLUME_SELL;
	//cURRENT_WEEK_VOLUME_SELL = NULL;
	//}
	//if(cURRENT_WEEK_VOLUME_UNKNOWN != NULL) {
	//
	//delete cURRENT_WEEK_VOLUME_UNKNOWN;
	//cURRENT_WEEK_VOLUME_UNKNOWN = NULL;
	//}
	//if(cURRENT_YEAR_HIGH != NULL) {
	//
	//delete cURRENT_YEAR_HIGH;
	//cURRENT_YEAR_HIGH = NULL;
	//}
	//if(cURRENT_YEAR_LOW != NULL) {
	//
	//delete cURRENT_YEAR_LOW;
	//cURRENT_YEAR_LOW = NULL;
	//}
	//if(cURRENT_YEAR_OPEN != NULL) {
	//
	//delete cURRENT_YEAR_OPEN;
	//cURRENT_YEAR_OPEN = NULL;
	//}
	//if(cURRENT_YEAR_QUOTE_VOLUME != NULL) {
	//
	//delete cURRENT_YEAR_QUOTE_VOLUME;
	//cURRENT_YEAR_QUOTE_VOLUME = NULL;
	//}
	//if(cURRENT_YEAR_QUOTE_VOLUME_BUY != NULL) {
	//
	//delete cURRENT_YEAR_QUOTE_VOLUME_BUY;
	//cURRENT_YEAR_QUOTE_VOLUME_BUY = NULL;
	//}
	//if(cURRENT_YEAR_QUOTE_VOLUME_SELL != NULL) {
	//
	//delete cURRENT_YEAR_QUOTE_VOLUME_SELL;
	//cURRENT_YEAR_QUOTE_VOLUME_SELL = NULL;
	//}
	//if(cURRENT_YEAR_QUOTE_VOLUME_UNKNOWN != NULL) {
	//
	//delete cURRENT_YEAR_QUOTE_VOLUME_UNKNOWN;
	//cURRENT_YEAR_QUOTE_VOLUME_UNKNOWN = NULL;
	//}
	//if(cURRENT_YEAR_TOTAL_TRADES != NULL) {
	//
	//delete cURRENT_YEAR_TOTAL_TRADES;
	//cURRENT_YEAR_TOTAL_TRADES = NULL;
	//}
	//if(cURRENT_YEAR_TOTAL_TRADES_BUY != NULL) {
	//
	//delete cURRENT_YEAR_TOTAL_TRADES_BUY;
	//cURRENT_YEAR_TOTAL_TRADES_BUY = NULL;
	//}
	//if(cURRENT_YEAR_TOTAL_TRADES_SELL != NULL) {
	//
	//delete cURRENT_YEAR_TOTAL_TRADES_SELL;
	//cURRENT_YEAR_TOTAL_TRADES_SELL = NULL;
	//}
	//if(cURRENT_YEAR_TOTAL_TRADES_UNKNOWN != NULL) {
	//
	//delete cURRENT_YEAR_TOTAL_TRADES_UNKNOWN;
	//cURRENT_YEAR_TOTAL_TRADES_UNKNOWN = NULL;
	//}
	//if(cURRENT_YEAR_VOLUME != NULL) {
	//
	//delete cURRENT_YEAR_VOLUME;
	//cURRENT_YEAR_VOLUME = NULL;
	//}
	//if(cURRENT_YEAR_VOLUME_BUY != NULL) {
	//
	//delete cURRENT_YEAR_VOLUME_BUY;
	//cURRENT_YEAR_VOLUME_BUY = NULL;
	//}
	//if(cURRENT_YEAR_VOLUME_SELL != NULL) {
	//
	//delete cURRENT_YEAR_VOLUME_SELL;
	//cURRENT_YEAR_VOLUME_SELL = NULL;
	//}
	//if(cURRENT_YEAR_VOLUME_UNKNOWN != NULL) {
	//
	//delete cURRENT_YEAR_VOLUME_UNKNOWN;
	//cURRENT_YEAR_VOLUME_UNKNOWN = NULL;
	//}
	//if(iNSTRUMENT != NULL) {
	//
	//delete iNSTRUMENT;
	//iNSTRUMENT = NULL;
	//}
	//if(lAST_PROCESSED_TRADE_CCSEQ != NULL) {
	//
	//delete lAST_PROCESSED_TRADE_CCSEQ;
	//lAST_PROCESSED_TRADE_CCSEQ = NULL;
	//}
	//if(lAST_PROCESSED_TRADE_PRICE != NULL) {
	//
	//delete lAST_PROCESSED_TRADE_PRICE;
	//lAST_PROCESSED_TRADE_PRICE = NULL;
	//}
	//if(lAST_PROCESSED_TRADE_QUANTITY != NULL) {
	//
	//delete lAST_PROCESSED_TRADE_QUANTITY;
	//lAST_PROCESSED_TRADE_QUANTITY = NULL;
	//}
	//if(lAST_PROCESSED_TRADE_QUOTE_QUANTITY != NULL) {
	//
	//delete lAST_PROCESSED_TRADE_QUOTE_QUANTITY;
	//lAST_PROCESSED_TRADE_QUOTE_QUANTITY = NULL;
	//}
	//if(lAST_PROCESSED_TRADE_SIDE != NULL) {
	//
	//delete lAST_PROCESSED_TRADE_SIDE;
	//lAST_PROCESSED_TRADE_SIDE = NULL;
	//}
	//if(lAST_PROCESSED_TRADE_TS != NULL) {
	//
	//delete lAST_PROCESSED_TRADE_TS;
	//lAST_PROCESSED_TRADE_TS = NULL;
	//}
	//if(lAST_TRADE_CCSEQ != NULL) {
	//
	//delete lAST_TRADE_CCSEQ;
	//lAST_TRADE_CCSEQ = NULL;
	//}
	//if(lAST_TRADE_ID != NULL) {
	//
	//delete lAST_TRADE_ID;
	//lAST_TRADE_ID = NULL;
	//}
	//if(lAST_TRADE_QUANTITY != NULL) {
	//
	//delete lAST_TRADE_QUANTITY;
	//lAST_TRADE_QUANTITY = NULL;
	//}
	//if(lAST_TRADE_QUOTE_QUANTITY != NULL) {
	//
	//delete lAST_TRADE_QUOTE_QUANTITY;
	//lAST_TRADE_QUOTE_QUANTITY = NULL;
	//}
	//if(lAST_TRADE_SIDE != NULL) {
	//
	//delete lAST_TRADE_SIDE;
	//lAST_TRADE_SIDE = NULL;
	//}
	//if(lIFETIME_FIRST_TRADE_TS != NULL) {
	//
	//delete lIFETIME_FIRST_TRADE_TS;
	//lIFETIME_FIRST_TRADE_TS = NULL;
	//}
	//if(lIFETIME_HIGH != NULL) {
	//
	//delete lIFETIME_HIGH;
	//lIFETIME_HIGH = NULL;
	//}
	//if(lIFETIME_HIGH_TS != NULL) {
	//
	//delete lIFETIME_HIGH_TS;
	//lIFETIME_HIGH_TS = NULL;
	//}
	//if(lIFETIME_LOW != NULL) {
	//
	//delete lIFETIME_LOW;
	//lIFETIME_LOW = NULL;
	//}
	//if(lIFETIME_LOW_TS != NULL) {
	//
	//delete lIFETIME_LOW_TS;
	//lIFETIME_LOW_TS = NULL;
	//}
	//if(lIFETIME_OPEN != NULL) {
	//
	//delete lIFETIME_OPEN;
	//lIFETIME_OPEN = NULL;
	//}
	//if(lIFETIME_QUOTE_VOLUME != NULL) {
	//
	//delete lIFETIME_QUOTE_VOLUME;
	//lIFETIME_QUOTE_VOLUME = NULL;
	//}
	//if(lIFETIME_QUOTE_VOLUME_BUY != NULL) {
	//
	//delete lIFETIME_QUOTE_VOLUME_BUY;
	//lIFETIME_QUOTE_VOLUME_BUY = NULL;
	//}
	//if(lIFETIME_QUOTE_VOLUME_SELL != NULL) {
	//
	//delete lIFETIME_QUOTE_VOLUME_SELL;
	//lIFETIME_QUOTE_VOLUME_SELL = NULL;
	//}
	//if(lIFETIME_QUOTE_VOLUME_UNKNOWN != NULL) {
	//
	//delete lIFETIME_QUOTE_VOLUME_UNKNOWN;
	//lIFETIME_QUOTE_VOLUME_UNKNOWN = NULL;
	//}
	//if(lIFETIME_TOTAL_TRADES != NULL) {
	//
	//delete lIFETIME_TOTAL_TRADES;
	//lIFETIME_TOTAL_TRADES = NULL;
	//}
	//if(lIFETIME_TOTAL_TRADES_BUY != NULL) {
	//
	//delete lIFETIME_TOTAL_TRADES_BUY;
	//lIFETIME_TOTAL_TRADES_BUY = NULL;
	//}
	//if(lIFETIME_TOTAL_TRADES_SELL != NULL) {
	//
	//delete lIFETIME_TOTAL_TRADES_SELL;
	//lIFETIME_TOTAL_TRADES_SELL = NULL;
	//}
	//if(lIFETIME_TOTAL_TRADES_UNKNOWN != NULL) {
	//
	//delete lIFETIME_TOTAL_TRADES_UNKNOWN;
	//lIFETIME_TOTAL_TRADES_UNKNOWN = NULL;
	//}
	//if(lIFETIME_VOLUME != NULL) {
	//
	//delete lIFETIME_VOLUME;
	//lIFETIME_VOLUME = NULL;
	//}
	//if(lIFETIME_VOLUME_BUY != NULL) {
	//
	//delete lIFETIME_VOLUME_BUY;
	//lIFETIME_VOLUME_BUY = NULL;
	//}
	//if(lIFETIME_VOLUME_SELL != NULL) {
	//
	//delete lIFETIME_VOLUME_SELL;
	//lIFETIME_VOLUME_SELL = NULL;
	//}
	//if(lIFETIME_VOLUME_UNKNOWN != NULL) {
	//
	//delete lIFETIME_VOLUME_UNKNOWN;
	//lIFETIME_VOLUME_UNKNOWN = NULL;
	//}
	//if(mAPPED_INSTRUMENT != NULL) {
	//
	//delete mAPPED_INSTRUMENT;
	//mAPPED_INSTRUMENT = NULL;
	//}
	//if(mARKET != NULL) {
	//
	//delete mARKET;
	//mARKET = NULL;
	//}
	//if(mOVING_180_DAY_HIGH != NULL) {
	//
	//delete mOVING_180_DAY_HIGH;
	//mOVING_180_DAY_HIGH = NULL;
	//}
	//if(mOVING_180_DAY_LOW != NULL) {
	//
	//delete mOVING_180_DAY_LOW;
	//mOVING_180_DAY_LOW = NULL;
	//}
	//if(mOVING_180_DAY_OPEN != NULL) {
	//
	//delete mOVING_180_DAY_OPEN;
	//mOVING_180_DAY_OPEN = NULL;
	//}
	//if(mOVING_180_DAY_QUOTE_VOLUME != NULL) {
	//
	//delete mOVING_180_DAY_QUOTE_VOLUME;
	//mOVING_180_DAY_QUOTE_VOLUME = NULL;
	//}
	//if(mOVING_180_DAY_QUOTE_VOLUME_BUY != NULL) {
	//
	//delete mOVING_180_DAY_QUOTE_VOLUME_BUY;
	//mOVING_180_DAY_QUOTE_VOLUME_BUY = NULL;
	//}
	//if(mOVING_180_DAY_QUOTE_VOLUME_SELL != NULL) {
	//
	//delete mOVING_180_DAY_QUOTE_VOLUME_SELL;
	//mOVING_180_DAY_QUOTE_VOLUME_SELL = NULL;
	//}
	//if(mOVING_180_DAY_QUOTE_VOLUME_UNKNOWN != NULL) {
	//
	//delete mOVING_180_DAY_QUOTE_VOLUME_UNKNOWN;
	//mOVING_180_DAY_QUOTE_VOLUME_UNKNOWN = NULL;
	//}
	//if(mOVING_180_DAY_TOTAL_TRADES != NULL) {
	//
	//delete mOVING_180_DAY_TOTAL_TRADES;
	//mOVING_180_DAY_TOTAL_TRADES = NULL;
	//}
	//if(mOVING_180_DAY_TOTAL_TRADES_BUY != NULL) {
	//
	//delete mOVING_180_DAY_TOTAL_TRADES_BUY;
	//mOVING_180_DAY_TOTAL_TRADES_BUY = NULL;
	//}
	//if(mOVING_180_DAY_TOTAL_TRADES_SELL != NULL) {
	//
	//delete mOVING_180_DAY_TOTAL_TRADES_SELL;
	//mOVING_180_DAY_TOTAL_TRADES_SELL = NULL;
	//}
	//if(mOVING_180_DAY_TOTAL_TRADES_UNKNOWN != NULL) {
	//
	//delete mOVING_180_DAY_TOTAL_TRADES_UNKNOWN;
	//mOVING_180_DAY_TOTAL_TRADES_UNKNOWN = NULL;
	//}
	//if(mOVING_180_DAY_VOLUME != NULL) {
	//
	//delete mOVING_180_DAY_VOLUME;
	//mOVING_180_DAY_VOLUME = NULL;
	//}
	//if(mOVING_180_DAY_VOLUME_BUY != NULL) {
	//
	//delete mOVING_180_DAY_VOLUME_BUY;
	//mOVING_180_DAY_VOLUME_BUY = NULL;
	//}
	//if(mOVING_180_DAY_VOLUME_SELL != NULL) {
	//
	//delete mOVING_180_DAY_VOLUME_SELL;
	//mOVING_180_DAY_VOLUME_SELL = NULL;
	//}
	//if(mOVING_180_DAY_VOLUME_UNKNOWN != NULL) {
	//
	//delete mOVING_180_DAY_VOLUME_UNKNOWN;
	//mOVING_180_DAY_VOLUME_UNKNOWN = NULL;
	//}
	//if(mOVING_24_HOUR_HIGH != NULL) {
	//
	//delete mOVING_24_HOUR_HIGH;
	//mOVING_24_HOUR_HIGH = NULL;
	//}
	//if(mOVING_24_HOUR_LOW != NULL) {
	//
	//delete mOVING_24_HOUR_LOW;
	//mOVING_24_HOUR_LOW = NULL;
	//}
	//if(mOVING_24_HOUR_OPEN != NULL) {
	//
	//delete mOVING_24_HOUR_OPEN;
	//mOVING_24_HOUR_OPEN = NULL;
	//}
	//if(mOVING_24_HOUR_QUOTE_VOLUME != NULL) {
	//
	//delete mOVING_24_HOUR_QUOTE_VOLUME;
	//mOVING_24_HOUR_QUOTE_VOLUME = NULL;
	//}
	//if(mOVING_24_HOUR_QUOTE_VOLUME_BUY != NULL) {
	//
	//delete mOVING_24_HOUR_QUOTE_VOLUME_BUY;
	//mOVING_24_HOUR_QUOTE_VOLUME_BUY = NULL;
	//}
	//if(mOVING_24_HOUR_QUOTE_VOLUME_SELL != NULL) {
	//
	//delete mOVING_24_HOUR_QUOTE_VOLUME_SELL;
	//mOVING_24_HOUR_QUOTE_VOLUME_SELL = NULL;
	//}
	//if(mOVING_24_HOUR_QUOTE_VOLUME_UNKNOWN != NULL) {
	//
	//delete mOVING_24_HOUR_QUOTE_VOLUME_UNKNOWN;
	//mOVING_24_HOUR_QUOTE_VOLUME_UNKNOWN = NULL;
	//}
	//if(mOVING_24_HOUR_TOTAL_TRADES != NULL) {
	//
	//delete mOVING_24_HOUR_TOTAL_TRADES;
	//mOVING_24_HOUR_TOTAL_TRADES = NULL;
	//}
	//if(mOVING_24_HOUR_TOTAL_TRADES_BUY != NULL) {
	//
	//delete mOVING_24_HOUR_TOTAL_TRADES_BUY;
	//mOVING_24_HOUR_TOTAL_TRADES_BUY = NULL;
	//}
	//if(mOVING_24_HOUR_TOTAL_TRADES_SELL != NULL) {
	//
	//delete mOVING_24_HOUR_TOTAL_TRADES_SELL;
	//mOVING_24_HOUR_TOTAL_TRADES_SELL = NULL;
	//}
	//if(mOVING_24_HOUR_TOTAL_TRADES_UNKNOWN != NULL) {
	//
	//delete mOVING_24_HOUR_TOTAL_TRADES_UNKNOWN;
	//mOVING_24_HOUR_TOTAL_TRADES_UNKNOWN = NULL;
	//}
	//if(mOVING_24_HOUR_VOLUME != NULL) {
	//
	//delete mOVING_24_HOUR_VOLUME;
	//mOVING_24_HOUR_VOLUME = NULL;
	//}
	//if(mOVING_24_HOUR_VOLUME_BUY != NULL) {
	//
	//delete mOVING_24_HOUR_VOLUME_BUY;
	//mOVING_24_HOUR_VOLUME_BUY = NULL;
	//}
	//if(mOVING_24_HOUR_VOLUME_SELL != NULL) {
	//
	//delete mOVING_24_HOUR_VOLUME_SELL;
	//mOVING_24_HOUR_VOLUME_SELL = NULL;
	//}
	//if(mOVING_24_HOUR_VOLUME_UNKNOWN != NULL) {
	//
	//delete mOVING_24_HOUR_VOLUME_UNKNOWN;
	//mOVING_24_HOUR_VOLUME_UNKNOWN = NULL;
	//}
	//if(mOVING_30_DAY_HIGH != NULL) {
	//
	//delete mOVING_30_DAY_HIGH;
	//mOVING_30_DAY_HIGH = NULL;
	//}
	//if(mOVING_30_DAY_LOW != NULL) {
	//
	//delete mOVING_30_DAY_LOW;
	//mOVING_30_DAY_LOW = NULL;
	//}
	//if(mOVING_30_DAY_OPEN != NULL) {
	//
	//delete mOVING_30_DAY_OPEN;
	//mOVING_30_DAY_OPEN = NULL;
	//}
	//if(mOVING_30_DAY_QUOTE_VOLUME != NULL) {
	//
	//delete mOVING_30_DAY_QUOTE_VOLUME;
	//mOVING_30_DAY_QUOTE_VOLUME = NULL;
	//}
	//if(mOVING_30_DAY_QUOTE_VOLUME_BUY != NULL) {
	//
	//delete mOVING_30_DAY_QUOTE_VOLUME_BUY;
	//mOVING_30_DAY_QUOTE_VOLUME_BUY = NULL;
	//}
	//if(mOVING_30_DAY_QUOTE_VOLUME_SELL != NULL) {
	//
	//delete mOVING_30_DAY_QUOTE_VOLUME_SELL;
	//mOVING_30_DAY_QUOTE_VOLUME_SELL = NULL;
	//}
	//if(mOVING_30_DAY_QUOTE_VOLUME_UNKNOWN != NULL) {
	//
	//delete mOVING_30_DAY_QUOTE_VOLUME_UNKNOWN;
	//mOVING_30_DAY_QUOTE_VOLUME_UNKNOWN = NULL;
	//}
	//if(mOVING_30_DAY_TOTAL_TRADES != NULL) {
	//
	//delete mOVING_30_DAY_TOTAL_TRADES;
	//mOVING_30_DAY_TOTAL_TRADES = NULL;
	//}
	//if(mOVING_30_DAY_TOTAL_TRADES_BUY != NULL) {
	//
	//delete mOVING_30_DAY_TOTAL_TRADES_BUY;
	//mOVING_30_DAY_TOTAL_TRADES_BUY = NULL;
	//}
	//if(mOVING_30_DAY_TOTAL_TRADES_SELL != NULL) {
	//
	//delete mOVING_30_DAY_TOTAL_TRADES_SELL;
	//mOVING_30_DAY_TOTAL_TRADES_SELL = NULL;
	//}
	//if(mOVING_30_DAY_TOTAL_TRADES_UNKNOWN != NULL) {
	//
	//delete mOVING_30_DAY_TOTAL_TRADES_UNKNOWN;
	//mOVING_30_DAY_TOTAL_TRADES_UNKNOWN = NULL;
	//}
	//if(mOVING_30_DAY_VOLUME != NULL) {
	//
	//delete mOVING_30_DAY_VOLUME;
	//mOVING_30_DAY_VOLUME = NULL;
	//}
	//if(mOVING_30_DAY_VOLUME_BUY != NULL) {
	//
	//delete mOVING_30_DAY_VOLUME_BUY;
	//mOVING_30_DAY_VOLUME_BUY = NULL;
	//}
	//if(mOVING_30_DAY_VOLUME_SELL != NULL) {
	//
	//delete mOVING_30_DAY_VOLUME_SELL;
	//mOVING_30_DAY_VOLUME_SELL = NULL;
	//}
	//if(mOVING_30_DAY_VOLUME_UNKNOWN != NULL) {
	//
	//delete mOVING_30_DAY_VOLUME_UNKNOWN;
	//mOVING_30_DAY_VOLUME_UNKNOWN = NULL;
	//}
	//if(mOVING_365_DAY_HIGH != NULL) {
	//
	//delete mOVING_365_DAY_HIGH;
	//mOVING_365_DAY_HIGH = NULL;
	//}
	//if(mOVING_365_DAY_LOW != NULL) {
	//
	//delete mOVING_365_DAY_LOW;
	//mOVING_365_DAY_LOW = NULL;
	//}
	//if(mOVING_365_DAY_OPEN != NULL) {
	//
	//delete mOVING_365_DAY_OPEN;
	//mOVING_365_DAY_OPEN = NULL;
	//}
	//if(mOVING_365_DAY_QUOTE_VOLUME != NULL) {
	//
	//delete mOVING_365_DAY_QUOTE_VOLUME;
	//mOVING_365_DAY_QUOTE_VOLUME = NULL;
	//}
	//if(mOVING_365_DAY_QUOTE_VOLUME_BUY != NULL) {
	//
	//delete mOVING_365_DAY_QUOTE_VOLUME_BUY;
	//mOVING_365_DAY_QUOTE_VOLUME_BUY = NULL;
	//}
	//if(mOVING_365_DAY_QUOTE_VOLUME_SELL != NULL) {
	//
	//delete mOVING_365_DAY_QUOTE_VOLUME_SELL;
	//mOVING_365_DAY_QUOTE_VOLUME_SELL = NULL;
	//}
	//if(mOVING_365_DAY_QUOTE_VOLUME_UNKNOWN != NULL) {
	//
	//delete mOVING_365_DAY_QUOTE_VOLUME_UNKNOWN;
	//mOVING_365_DAY_QUOTE_VOLUME_UNKNOWN = NULL;
	//}
	//if(mOVING_365_DAY_TOTAL_TRADES != NULL) {
	//
	//delete mOVING_365_DAY_TOTAL_TRADES;
	//mOVING_365_DAY_TOTAL_TRADES = NULL;
	//}
	//if(mOVING_365_DAY_TOTAL_TRADES_BUY != NULL) {
	//
	//delete mOVING_365_DAY_TOTAL_TRADES_BUY;
	//mOVING_365_DAY_TOTAL_TRADES_BUY = NULL;
	//}
	//if(mOVING_365_DAY_TOTAL_TRADES_SELL != NULL) {
	//
	//delete mOVING_365_DAY_TOTAL_TRADES_SELL;
	//mOVING_365_DAY_TOTAL_TRADES_SELL = NULL;
	//}
	//if(mOVING_365_DAY_TOTAL_TRADES_UNKNOWN != NULL) {
	//
	//delete mOVING_365_DAY_TOTAL_TRADES_UNKNOWN;
	//mOVING_365_DAY_TOTAL_TRADES_UNKNOWN = NULL;
	//}
	//if(mOVING_365_DAY_VOLUME != NULL) {
	//
	//delete mOVING_365_DAY_VOLUME;
	//mOVING_365_DAY_VOLUME = NULL;
	//}
	//if(mOVING_365_DAY_VOLUME_BUY != NULL) {
	//
	//delete mOVING_365_DAY_VOLUME_BUY;
	//mOVING_365_DAY_VOLUME_BUY = NULL;
	//}
	//if(mOVING_365_DAY_VOLUME_SELL != NULL) {
	//
	//delete mOVING_365_DAY_VOLUME_SELL;
	//mOVING_365_DAY_VOLUME_SELL = NULL;
	//}
	//if(mOVING_365_DAY_VOLUME_UNKNOWN != NULL) {
	//
	//delete mOVING_365_DAY_VOLUME_UNKNOWN;
	//mOVING_365_DAY_VOLUME_UNKNOWN = NULL;
	//}
	//if(mOVING_7_DAY_HIGH != NULL) {
	//
	//delete mOVING_7_DAY_HIGH;
	//mOVING_7_DAY_HIGH = NULL;
	//}
	//if(mOVING_7_DAY_LOW != NULL) {
	//
	//delete mOVING_7_DAY_LOW;
	//mOVING_7_DAY_LOW = NULL;
	//}
	//if(mOVING_7_DAY_OPEN != NULL) {
	//
	//delete mOVING_7_DAY_OPEN;
	//mOVING_7_DAY_OPEN = NULL;
	//}
	//if(mOVING_7_DAY_QUOTE_VOLUME != NULL) {
	//
	//delete mOVING_7_DAY_QUOTE_VOLUME;
	//mOVING_7_DAY_QUOTE_VOLUME = NULL;
	//}
	//if(mOVING_7_DAY_QUOTE_VOLUME_BUY != NULL) {
	//
	//delete mOVING_7_DAY_QUOTE_VOLUME_BUY;
	//mOVING_7_DAY_QUOTE_VOLUME_BUY = NULL;
	//}
	//if(mOVING_7_DAY_QUOTE_VOLUME_SELL != NULL) {
	//
	//delete mOVING_7_DAY_QUOTE_VOLUME_SELL;
	//mOVING_7_DAY_QUOTE_VOLUME_SELL = NULL;
	//}
	//if(mOVING_7_DAY_QUOTE_VOLUME_UNKNOWN != NULL) {
	//
	//delete mOVING_7_DAY_QUOTE_VOLUME_UNKNOWN;
	//mOVING_7_DAY_QUOTE_VOLUME_UNKNOWN = NULL;
	//}
	//if(mOVING_7_DAY_TOTAL_TRADES != NULL) {
	//
	//delete mOVING_7_DAY_TOTAL_TRADES;
	//mOVING_7_DAY_TOTAL_TRADES = NULL;
	//}
	//if(mOVING_7_DAY_TOTAL_TRADES_BUY != NULL) {
	//
	//delete mOVING_7_DAY_TOTAL_TRADES_BUY;
	//mOVING_7_DAY_TOTAL_TRADES_BUY = NULL;
	//}
	//if(mOVING_7_DAY_TOTAL_TRADES_SELL != NULL) {
	//
	//delete mOVING_7_DAY_TOTAL_TRADES_SELL;
	//mOVING_7_DAY_TOTAL_TRADES_SELL = NULL;
	//}
	//if(mOVING_7_DAY_TOTAL_TRADES_UNKNOWN != NULL) {
	//
	//delete mOVING_7_DAY_TOTAL_TRADES_UNKNOWN;
	//mOVING_7_DAY_TOTAL_TRADES_UNKNOWN = NULL;
	//}
	//if(mOVING_7_DAY_VOLUME != NULL) {
	//
	//delete mOVING_7_DAY_VOLUME;
	//mOVING_7_DAY_VOLUME = NULL;
	//}
	//if(mOVING_7_DAY_VOLUME_BUY != NULL) {
	//
	//delete mOVING_7_DAY_VOLUME_BUY;
	//mOVING_7_DAY_VOLUME_BUY = NULL;
	//}
	//if(mOVING_7_DAY_VOLUME_SELL != NULL) {
	//
	//delete mOVING_7_DAY_VOLUME_SELL;
	//mOVING_7_DAY_VOLUME_SELL = NULL;
	//}
	//if(mOVING_7_DAY_VOLUME_UNKNOWN != NULL) {
	//
	//delete mOVING_7_DAY_VOLUME_UNKNOWN;
	//mOVING_7_DAY_VOLUME_UNKNOWN = NULL;
	//}
	//if(mOVING_90_DAY_HIGH != NULL) {
	//
	//delete mOVING_90_DAY_HIGH;
	//mOVING_90_DAY_HIGH = NULL;
	//}
	//if(mOVING_90_DAY_LOW != NULL) {
	//
	//delete mOVING_90_DAY_LOW;
	//mOVING_90_DAY_LOW = NULL;
	//}
	//if(mOVING_90_DAY_OPEN != NULL) {
	//
	//delete mOVING_90_DAY_OPEN;
	//mOVING_90_DAY_OPEN = NULL;
	//}
	//if(mOVING_90_DAY_QUOTE_VOLUME != NULL) {
	//
	//delete mOVING_90_DAY_QUOTE_VOLUME;
	//mOVING_90_DAY_QUOTE_VOLUME = NULL;
	//}
	//if(mOVING_90_DAY_QUOTE_VOLUME_BUY != NULL) {
	//
	//delete mOVING_90_DAY_QUOTE_VOLUME_BUY;
	//mOVING_90_DAY_QUOTE_VOLUME_BUY = NULL;
	//}
	//if(mOVING_90_DAY_QUOTE_VOLUME_SELL != NULL) {
	//
	//delete mOVING_90_DAY_QUOTE_VOLUME_SELL;
	//mOVING_90_DAY_QUOTE_VOLUME_SELL = NULL;
	//}
	//if(mOVING_90_DAY_QUOTE_VOLUME_UNKNOWN != NULL) {
	//
	//delete mOVING_90_DAY_QUOTE_VOLUME_UNKNOWN;
	//mOVING_90_DAY_QUOTE_VOLUME_UNKNOWN = NULL;
	//}
	//if(mOVING_90_DAY_TOTAL_TRADES != NULL) {
	//
	//delete mOVING_90_DAY_TOTAL_TRADES;
	//mOVING_90_DAY_TOTAL_TRADES = NULL;
	//}
	//if(mOVING_90_DAY_TOTAL_TRADES_BUY != NULL) {
	//
	//delete mOVING_90_DAY_TOTAL_TRADES_BUY;
	//mOVING_90_DAY_TOTAL_TRADES_BUY = NULL;
	//}
	//if(mOVING_90_DAY_TOTAL_TRADES_SELL != NULL) {
	//
	//delete mOVING_90_DAY_TOTAL_TRADES_SELL;
	//mOVING_90_DAY_TOTAL_TRADES_SELL = NULL;
	//}
	//if(mOVING_90_DAY_TOTAL_TRADES_UNKNOWN != NULL) {
	//
	//delete mOVING_90_DAY_TOTAL_TRADES_UNKNOWN;
	//mOVING_90_DAY_TOTAL_TRADES_UNKNOWN = NULL;
	//}
	//if(mOVING_90_DAY_VOLUME != NULL) {
	//
	//delete mOVING_90_DAY_VOLUME;
	//mOVING_90_DAY_VOLUME = NULL;
	//}
	//if(mOVING_90_DAY_VOLUME_BUY != NULL) {
	//
	//delete mOVING_90_DAY_VOLUME_BUY;
	//mOVING_90_DAY_VOLUME_BUY = NULL;
	//}
	//if(mOVING_90_DAY_VOLUME_SELL != NULL) {
	//
	//delete mOVING_90_DAY_VOLUME_SELL;
	//mOVING_90_DAY_VOLUME_SELL = NULL;
	//}
	//if(mOVING_90_DAY_VOLUME_UNKNOWN != NULL) {
	//
	//delete mOVING_90_DAY_VOLUME_UNKNOWN;
	//mOVING_90_DAY_VOLUME_UNKNOWN = NULL;
	//}
	//if(pRICE != NULL) {
	//
	//delete pRICE;
	//pRICE = NULL;
	//}
	//if(pRICE_FLAG != NULL) {
	//
	//delete pRICE_FLAG;
	//pRICE_FLAG = NULL;
	//}
	//if(pRICE_LAST_UPDATE_TS != NULL) {
	//
	//delete pRICE_LAST_UPDATE_TS;
	//pRICE_LAST_UPDATE_TS = NULL;
	//}
	//if(qUOTE != NULL) {
	//
	//delete qUOTE;
	//qUOTE = NULL;
	//}
	//if(tOP_ASK_LAST_UPDATE_TS != NULL) {
	//
	//delete tOP_ASK_LAST_UPDATE_TS;
	//tOP_ASK_LAST_UPDATE_TS = NULL;
	//}
	//if(tOP_ASK_PRICE != NULL) {
	//
	//delete tOP_ASK_PRICE;
	//tOP_ASK_PRICE = NULL;
	//}
	//if(tOP_ASK_QUANTITY != NULL) {
	//
	//delete tOP_ASK_QUANTITY;
	//tOP_ASK_QUANTITY = NULL;
	//}
	//if(tOP_BID_LAST_UPDATE_TS != NULL) {
	//
	//delete tOP_BID_LAST_UPDATE_TS;
	//tOP_BID_LAST_UPDATE_TS = NULL;
	//}
	//if(tOP_BID_PRICE != NULL) {
	//
	//delete tOP_BID_PRICE;
	//tOP_BID_PRICE = NULL;
	//}
	//if(tOP_BID_QUANTITY != NULL) {
	//
	//delete tOP_BID_QUANTITY;
	//tOP_BID_QUANTITY = NULL;
	//}
	//if(tYPE != NULL) {
	//
	//delete tYPE;
	//tYPE = NULL;
	//}
	//
}

void
SPOT_INSTRUMENT_MARKET_DATA::fromJson(char* jsonStr)
{
	JsonObject *pJsonObject = json_node_get_object(json_from_string(jsonStr,NULL));
	JsonNode *node;
	const gchar *bASEKey = "BASE";
	node = json_object_get_member(pJsonObject, bASEKey);
	if (node !=NULL) {
	

		if (isprimitive("std::string")) {
			jsonToValue(&bASE, node, "std::string", "");
		} else {
			
		}
	}
	const gchar *cCSEQKey = "CCSEQ";
	node = json_object_get_member(pJsonObject, cCSEQKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cCSEQ, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_DAY_HIGHKey = "CURRENT_DAY_HIGH";
	node = json_object_get_member(pJsonObject, cURRENT_DAY_HIGHKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_DAY_HIGH, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_DAY_LOWKey = "CURRENT_DAY_LOW";
	node = json_object_get_member(pJsonObject, cURRENT_DAY_LOWKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_DAY_LOW, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_DAY_OPENKey = "CURRENT_DAY_OPEN";
	node = json_object_get_member(pJsonObject, cURRENT_DAY_OPENKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_DAY_OPEN, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_DAY_QUOTE_VOLUMEKey = "CURRENT_DAY_QUOTE_VOLUME";
	node = json_object_get_member(pJsonObject, cURRENT_DAY_QUOTE_VOLUMEKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_DAY_QUOTE_VOLUME, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_DAY_QUOTE_VOLUME_BUYKey = "CURRENT_DAY_QUOTE_VOLUME_BUY";
	node = json_object_get_member(pJsonObject, cURRENT_DAY_QUOTE_VOLUME_BUYKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_DAY_QUOTE_VOLUME_BUY, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_DAY_QUOTE_VOLUME_SELLKey = "CURRENT_DAY_QUOTE_VOLUME_SELL";
	node = json_object_get_member(pJsonObject, cURRENT_DAY_QUOTE_VOLUME_SELLKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_DAY_QUOTE_VOLUME_SELL, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_DAY_QUOTE_VOLUME_UNKNOWNKey = "CURRENT_DAY_QUOTE_VOLUME_UNKNOWN";
	node = json_object_get_member(pJsonObject, cURRENT_DAY_QUOTE_VOLUME_UNKNOWNKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_DAY_QUOTE_VOLUME_UNKNOWN, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_DAY_TOTAL_TRADESKey = "CURRENT_DAY_TOTAL_TRADES";
	node = json_object_get_member(pJsonObject, cURRENT_DAY_TOTAL_TRADESKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_DAY_TOTAL_TRADES, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_DAY_TOTAL_TRADES_BUYKey = "CURRENT_DAY_TOTAL_TRADES_BUY";
	node = json_object_get_member(pJsonObject, cURRENT_DAY_TOTAL_TRADES_BUYKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_DAY_TOTAL_TRADES_BUY, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_DAY_TOTAL_TRADES_SELLKey = "CURRENT_DAY_TOTAL_TRADES_SELL";
	node = json_object_get_member(pJsonObject, cURRENT_DAY_TOTAL_TRADES_SELLKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_DAY_TOTAL_TRADES_SELL, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_DAY_TOTAL_TRADES_UNKNOWNKey = "CURRENT_DAY_TOTAL_TRADES_UNKNOWN";
	node = json_object_get_member(pJsonObject, cURRENT_DAY_TOTAL_TRADES_UNKNOWNKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_DAY_TOTAL_TRADES_UNKNOWN, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_DAY_VOLUMEKey = "CURRENT_DAY_VOLUME";
	node = json_object_get_member(pJsonObject, cURRENT_DAY_VOLUMEKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_DAY_VOLUME, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_DAY_VOLUME_BUYKey = "CURRENT_DAY_VOLUME_BUY";
	node = json_object_get_member(pJsonObject, cURRENT_DAY_VOLUME_BUYKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_DAY_VOLUME_BUY, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_DAY_VOLUME_SELLKey = "CURRENT_DAY_VOLUME_SELL";
	node = json_object_get_member(pJsonObject, cURRENT_DAY_VOLUME_SELLKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_DAY_VOLUME_SELL, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_DAY_VOLUME_UNKNOWNKey = "CURRENT_DAY_VOLUME_UNKNOWN";
	node = json_object_get_member(pJsonObject, cURRENT_DAY_VOLUME_UNKNOWNKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_DAY_VOLUME_UNKNOWN, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_HOUR_HIGHKey = "CURRENT_HOUR_HIGH";
	node = json_object_get_member(pJsonObject, cURRENT_HOUR_HIGHKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_HOUR_HIGH, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_HOUR_LOWKey = "CURRENT_HOUR_LOW";
	node = json_object_get_member(pJsonObject, cURRENT_HOUR_LOWKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_HOUR_LOW, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_HOUR_OPENKey = "CURRENT_HOUR_OPEN";
	node = json_object_get_member(pJsonObject, cURRENT_HOUR_OPENKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_HOUR_OPEN, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_HOUR_QUOTE_VOLUMEKey = "CURRENT_HOUR_QUOTE_VOLUME";
	node = json_object_get_member(pJsonObject, cURRENT_HOUR_QUOTE_VOLUMEKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_HOUR_QUOTE_VOLUME, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_HOUR_QUOTE_VOLUME_BUYKey = "CURRENT_HOUR_QUOTE_VOLUME_BUY";
	node = json_object_get_member(pJsonObject, cURRENT_HOUR_QUOTE_VOLUME_BUYKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_HOUR_QUOTE_VOLUME_BUY, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_HOUR_QUOTE_VOLUME_SELLKey = "CURRENT_HOUR_QUOTE_VOLUME_SELL";
	node = json_object_get_member(pJsonObject, cURRENT_HOUR_QUOTE_VOLUME_SELLKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_HOUR_QUOTE_VOLUME_SELL, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_HOUR_QUOTE_VOLUME_UNKNOWNKey = "CURRENT_HOUR_QUOTE_VOLUME_UNKNOWN";
	node = json_object_get_member(pJsonObject, cURRENT_HOUR_QUOTE_VOLUME_UNKNOWNKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_HOUR_QUOTE_VOLUME_UNKNOWN, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_HOUR_TOTAL_TRADESKey = "CURRENT_HOUR_TOTAL_TRADES";
	node = json_object_get_member(pJsonObject, cURRENT_HOUR_TOTAL_TRADESKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_HOUR_TOTAL_TRADES, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_HOUR_TOTAL_TRADES_BUYKey = "CURRENT_HOUR_TOTAL_TRADES_BUY";
	node = json_object_get_member(pJsonObject, cURRENT_HOUR_TOTAL_TRADES_BUYKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_HOUR_TOTAL_TRADES_BUY, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_HOUR_TOTAL_TRADES_SELLKey = "CURRENT_HOUR_TOTAL_TRADES_SELL";
	node = json_object_get_member(pJsonObject, cURRENT_HOUR_TOTAL_TRADES_SELLKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_HOUR_TOTAL_TRADES_SELL, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_HOUR_TOTAL_TRADES_UNKNOWNKey = "CURRENT_HOUR_TOTAL_TRADES_UNKNOWN";
	node = json_object_get_member(pJsonObject, cURRENT_HOUR_TOTAL_TRADES_UNKNOWNKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_HOUR_TOTAL_TRADES_UNKNOWN, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_HOUR_VOLUMEKey = "CURRENT_HOUR_VOLUME";
	node = json_object_get_member(pJsonObject, cURRENT_HOUR_VOLUMEKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_HOUR_VOLUME, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_HOUR_VOLUME_BUYKey = "CURRENT_HOUR_VOLUME_BUY";
	node = json_object_get_member(pJsonObject, cURRENT_HOUR_VOLUME_BUYKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_HOUR_VOLUME_BUY, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_HOUR_VOLUME_SELLKey = "CURRENT_HOUR_VOLUME_SELL";
	node = json_object_get_member(pJsonObject, cURRENT_HOUR_VOLUME_SELLKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_HOUR_VOLUME_SELL, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_HOUR_VOLUME_UNKNOWNKey = "CURRENT_HOUR_VOLUME_UNKNOWN";
	node = json_object_get_member(pJsonObject, cURRENT_HOUR_VOLUME_UNKNOWNKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_HOUR_VOLUME_UNKNOWN, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_MONTH_HIGHKey = "CURRENT_MONTH_HIGH";
	node = json_object_get_member(pJsonObject, cURRENT_MONTH_HIGHKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_MONTH_HIGH, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_MONTH_LOWKey = "CURRENT_MONTH_LOW";
	node = json_object_get_member(pJsonObject, cURRENT_MONTH_LOWKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_MONTH_LOW, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_MONTH_OPENKey = "CURRENT_MONTH_OPEN";
	node = json_object_get_member(pJsonObject, cURRENT_MONTH_OPENKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_MONTH_OPEN, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_MONTH_QUOTE_VOLUMEKey = "CURRENT_MONTH_QUOTE_VOLUME";
	node = json_object_get_member(pJsonObject, cURRENT_MONTH_QUOTE_VOLUMEKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_MONTH_QUOTE_VOLUME, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_MONTH_QUOTE_VOLUME_BUYKey = "CURRENT_MONTH_QUOTE_VOLUME_BUY";
	node = json_object_get_member(pJsonObject, cURRENT_MONTH_QUOTE_VOLUME_BUYKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_MONTH_QUOTE_VOLUME_BUY, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_MONTH_QUOTE_VOLUME_SELLKey = "CURRENT_MONTH_QUOTE_VOLUME_SELL";
	node = json_object_get_member(pJsonObject, cURRENT_MONTH_QUOTE_VOLUME_SELLKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_MONTH_QUOTE_VOLUME_SELL, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_MONTH_QUOTE_VOLUME_UNKNOWNKey = "CURRENT_MONTH_QUOTE_VOLUME_UNKNOWN";
	node = json_object_get_member(pJsonObject, cURRENT_MONTH_QUOTE_VOLUME_UNKNOWNKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_MONTH_QUOTE_VOLUME_UNKNOWN, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_MONTH_TOTAL_TRADESKey = "CURRENT_MONTH_TOTAL_TRADES";
	node = json_object_get_member(pJsonObject, cURRENT_MONTH_TOTAL_TRADESKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_MONTH_TOTAL_TRADES, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_MONTH_TOTAL_TRADES_BUYKey = "CURRENT_MONTH_TOTAL_TRADES_BUY";
	node = json_object_get_member(pJsonObject, cURRENT_MONTH_TOTAL_TRADES_BUYKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_MONTH_TOTAL_TRADES_BUY, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_MONTH_TOTAL_TRADES_SELLKey = "CURRENT_MONTH_TOTAL_TRADES_SELL";
	node = json_object_get_member(pJsonObject, cURRENT_MONTH_TOTAL_TRADES_SELLKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_MONTH_TOTAL_TRADES_SELL, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_MONTH_TOTAL_TRADES_UNKNOWNKey = "CURRENT_MONTH_TOTAL_TRADES_UNKNOWN";
	node = json_object_get_member(pJsonObject, cURRENT_MONTH_TOTAL_TRADES_UNKNOWNKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_MONTH_TOTAL_TRADES_UNKNOWN, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_MONTH_VOLUMEKey = "CURRENT_MONTH_VOLUME";
	node = json_object_get_member(pJsonObject, cURRENT_MONTH_VOLUMEKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_MONTH_VOLUME, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_MONTH_VOLUME_BUYKey = "CURRENT_MONTH_VOLUME_BUY";
	node = json_object_get_member(pJsonObject, cURRENT_MONTH_VOLUME_BUYKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_MONTH_VOLUME_BUY, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_MONTH_VOLUME_SELLKey = "CURRENT_MONTH_VOLUME_SELL";
	node = json_object_get_member(pJsonObject, cURRENT_MONTH_VOLUME_SELLKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_MONTH_VOLUME_SELL, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_MONTH_VOLUME_UNKNOWNKey = "CURRENT_MONTH_VOLUME_UNKNOWN";
	node = json_object_get_member(pJsonObject, cURRENT_MONTH_VOLUME_UNKNOWNKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_MONTH_VOLUME_UNKNOWN, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_WEEK_HIGHKey = "CURRENT_WEEK_HIGH";
	node = json_object_get_member(pJsonObject, cURRENT_WEEK_HIGHKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_WEEK_HIGH, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_WEEK_LOWKey = "CURRENT_WEEK_LOW";
	node = json_object_get_member(pJsonObject, cURRENT_WEEK_LOWKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_WEEK_LOW, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_WEEK_OPENKey = "CURRENT_WEEK_OPEN";
	node = json_object_get_member(pJsonObject, cURRENT_WEEK_OPENKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_WEEK_OPEN, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_WEEK_QUOTE_VOLUMEKey = "CURRENT_WEEK_QUOTE_VOLUME";
	node = json_object_get_member(pJsonObject, cURRENT_WEEK_QUOTE_VOLUMEKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_WEEK_QUOTE_VOLUME, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_WEEK_QUOTE_VOLUME_BUYKey = "CURRENT_WEEK_QUOTE_VOLUME_BUY";
	node = json_object_get_member(pJsonObject, cURRENT_WEEK_QUOTE_VOLUME_BUYKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_WEEK_QUOTE_VOLUME_BUY, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_WEEK_QUOTE_VOLUME_SELLKey = "CURRENT_WEEK_QUOTE_VOLUME_SELL";
	node = json_object_get_member(pJsonObject, cURRENT_WEEK_QUOTE_VOLUME_SELLKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_WEEK_QUOTE_VOLUME_SELL, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_WEEK_QUOTE_VOLUME_UNKNOWNKey = "CURRENT_WEEK_QUOTE_VOLUME_UNKNOWN";
	node = json_object_get_member(pJsonObject, cURRENT_WEEK_QUOTE_VOLUME_UNKNOWNKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_WEEK_QUOTE_VOLUME_UNKNOWN, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_WEEK_TOTAL_TRADESKey = "CURRENT_WEEK_TOTAL_TRADES";
	node = json_object_get_member(pJsonObject, cURRENT_WEEK_TOTAL_TRADESKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_WEEK_TOTAL_TRADES, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_WEEK_TOTAL_TRADES_BUYKey = "CURRENT_WEEK_TOTAL_TRADES_BUY";
	node = json_object_get_member(pJsonObject, cURRENT_WEEK_TOTAL_TRADES_BUYKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_WEEK_TOTAL_TRADES_BUY, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_WEEK_TOTAL_TRADES_SELLKey = "CURRENT_WEEK_TOTAL_TRADES_SELL";
	node = json_object_get_member(pJsonObject, cURRENT_WEEK_TOTAL_TRADES_SELLKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_WEEK_TOTAL_TRADES_SELL, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_WEEK_TOTAL_TRADES_UNKNOWNKey = "CURRENT_WEEK_TOTAL_TRADES_UNKNOWN";
	node = json_object_get_member(pJsonObject, cURRENT_WEEK_TOTAL_TRADES_UNKNOWNKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_WEEK_TOTAL_TRADES_UNKNOWN, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_WEEK_VOLUMEKey = "CURRENT_WEEK_VOLUME";
	node = json_object_get_member(pJsonObject, cURRENT_WEEK_VOLUMEKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_WEEK_VOLUME, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_WEEK_VOLUME_BUYKey = "CURRENT_WEEK_VOLUME_BUY";
	node = json_object_get_member(pJsonObject, cURRENT_WEEK_VOLUME_BUYKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_WEEK_VOLUME_BUY, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_WEEK_VOLUME_SELLKey = "CURRENT_WEEK_VOLUME_SELL";
	node = json_object_get_member(pJsonObject, cURRENT_WEEK_VOLUME_SELLKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_WEEK_VOLUME_SELL, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_WEEK_VOLUME_UNKNOWNKey = "CURRENT_WEEK_VOLUME_UNKNOWN";
	node = json_object_get_member(pJsonObject, cURRENT_WEEK_VOLUME_UNKNOWNKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_WEEK_VOLUME_UNKNOWN, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_YEAR_HIGHKey = "CURRENT_YEAR_HIGH";
	node = json_object_get_member(pJsonObject, cURRENT_YEAR_HIGHKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_YEAR_HIGH, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_YEAR_LOWKey = "CURRENT_YEAR_LOW";
	node = json_object_get_member(pJsonObject, cURRENT_YEAR_LOWKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_YEAR_LOW, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_YEAR_OPENKey = "CURRENT_YEAR_OPEN";
	node = json_object_get_member(pJsonObject, cURRENT_YEAR_OPENKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_YEAR_OPEN, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_YEAR_QUOTE_VOLUMEKey = "CURRENT_YEAR_QUOTE_VOLUME";
	node = json_object_get_member(pJsonObject, cURRENT_YEAR_QUOTE_VOLUMEKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_YEAR_QUOTE_VOLUME, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_YEAR_QUOTE_VOLUME_BUYKey = "CURRENT_YEAR_QUOTE_VOLUME_BUY";
	node = json_object_get_member(pJsonObject, cURRENT_YEAR_QUOTE_VOLUME_BUYKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_YEAR_QUOTE_VOLUME_BUY, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_YEAR_QUOTE_VOLUME_SELLKey = "CURRENT_YEAR_QUOTE_VOLUME_SELL";
	node = json_object_get_member(pJsonObject, cURRENT_YEAR_QUOTE_VOLUME_SELLKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_YEAR_QUOTE_VOLUME_SELL, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_YEAR_QUOTE_VOLUME_UNKNOWNKey = "CURRENT_YEAR_QUOTE_VOLUME_UNKNOWN";
	node = json_object_get_member(pJsonObject, cURRENT_YEAR_QUOTE_VOLUME_UNKNOWNKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_YEAR_QUOTE_VOLUME_UNKNOWN, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_YEAR_TOTAL_TRADESKey = "CURRENT_YEAR_TOTAL_TRADES";
	node = json_object_get_member(pJsonObject, cURRENT_YEAR_TOTAL_TRADESKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_YEAR_TOTAL_TRADES, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_YEAR_TOTAL_TRADES_BUYKey = "CURRENT_YEAR_TOTAL_TRADES_BUY";
	node = json_object_get_member(pJsonObject, cURRENT_YEAR_TOTAL_TRADES_BUYKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_YEAR_TOTAL_TRADES_BUY, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_YEAR_TOTAL_TRADES_SELLKey = "CURRENT_YEAR_TOTAL_TRADES_SELL";
	node = json_object_get_member(pJsonObject, cURRENT_YEAR_TOTAL_TRADES_SELLKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_YEAR_TOTAL_TRADES_SELL, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_YEAR_TOTAL_TRADES_UNKNOWNKey = "CURRENT_YEAR_TOTAL_TRADES_UNKNOWN";
	node = json_object_get_member(pJsonObject, cURRENT_YEAR_TOTAL_TRADES_UNKNOWNKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_YEAR_TOTAL_TRADES_UNKNOWN, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_YEAR_VOLUMEKey = "CURRENT_YEAR_VOLUME";
	node = json_object_get_member(pJsonObject, cURRENT_YEAR_VOLUMEKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_YEAR_VOLUME, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_YEAR_VOLUME_BUYKey = "CURRENT_YEAR_VOLUME_BUY";
	node = json_object_get_member(pJsonObject, cURRENT_YEAR_VOLUME_BUYKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_YEAR_VOLUME_BUY, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_YEAR_VOLUME_SELLKey = "CURRENT_YEAR_VOLUME_SELL";
	node = json_object_get_member(pJsonObject, cURRENT_YEAR_VOLUME_SELLKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_YEAR_VOLUME_SELL, node, "int", "");
		} else {
			
		}
	}
	const gchar *cURRENT_YEAR_VOLUME_UNKNOWNKey = "CURRENT_YEAR_VOLUME_UNKNOWN";
	node = json_object_get_member(pJsonObject, cURRENT_YEAR_VOLUME_UNKNOWNKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&cURRENT_YEAR_VOLUME_UNKNOWN, node, "int", "");
		} else {
			
		}
	}
	const gchar *iNSTRUMENTKey = "INSTRUMENT";
	node = json_object_get_member(pJsonObject, iNSTRUMENTKey);
	if (node !=NULL) {
	

		if (isprimitive("std::string")) {
			jsonToValue(&iNSTRUMENT, node, "std::string", "");
		} else {
			
		}
	}
	const gchar *lAST_PROCESSED_TRADE_CCSEQKey = "LAST_PROCESSED_TRADE_CCSEQ";
	node = json_object_get_member(pJsonObject, lAST_PROCESSED_TRADE_CCSEQKey);
	if (node !=NULL) {
	

		if (isprimitive("std::string")) {
			jsonToValue(&lAST_PROCESSED_TRADE_CCSEQ, node, "std::string", "");
		} else {
			
		}
	}
	const gchar *lAST_PROCESSED_TRADE_PRICEKey = "LAST_PROCESSED_TRADE_PRICE";
	node = json_object_get_member(pJsonObject, lAST_PROCESSED_TRADE_PRICEKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&lAST_PROCESSED_TRADE_PRICE, node, "int", "");
		} else {
			
		}
	}
	const gchar *lAST_PROCESSED_TRADE_QUANTITYKey = "LAST_PROCESSED_TRADE_QUANTITY";
	node = json_object_get_member(pJsonObject, lAST_PROCESSED_TRADE_QUANTITYKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&lAST_PROCESSED_TRADE_QUANTITY, node, "int", "");
		} else {
			
		}
	}
	const gchar *lAST_PROCESSED_TRADE_QUOTE_QUANTITYKey = "LAST_PROCESSED_TRADE_QUOTE_QUANTITY";
	node = json_object_get_member(pJsonObject, lAST_PROCESSED_TRADE_QUOTE_QUANTITYKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&lAST_PROCESSED_TRADE_QUOTE_QUANTITY, node, "int", "");
		} else {
			
		}
	}
	const gchar *lAST_PROCESSED_TRADE_SIDEKey = "LAST_PROCESSED_TRADE_SIDE";
	node = json_object_get_member(pJsonObject, lAST_PROCESSED_TRADE_SIDEKey);
	if (node !=NULL) {
	

		if (isprimitive("std::string")) {
			jsonToValue(&lAST_PROCESSED_TRADE_SIDE, node, "std::string", "");
		} else {
			
		}
	}
	const gchar *lAST_PROCESSED_TRADE_TSKey = "LAST_PROCESSED_TRADE_TS";
	node = json_object_get_member(pJsonObject, lAST_PROCESSED_TRADE_TSKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&lAST_PROCESSED_TRADE_TS, node, "int", "");
		} else {
			
		}
	}
	const gchar *lAST_TRADE_CCSEQKey = "LAST_TRADE_CCSEQ";
	node = json_object_get_member(pJsonObject, lAST_TRADE_CCSEQKey);
	if (node !=NULL) {
	

		if (isprimitive("std::string")) {
			jsonToValue(&lAST_TRADE_CCSEQ, node, "std::string", "");
		} else {
			
		}
	}
	const gchar *lAST_TRADE_IDKey = "LAST_TRADE_ID";
	node = json_object_get_member(pJsonObject, lAST_TRADE_IDKey);
	if (node !=NULL) {
	

		if (isprimitive("std::string")) {
			jsonToValue(&lAST_TRADE_ID, node, "std::string", "");
		} else {
			
		}
	}
	const gchar *lAST_TRADE_QUANTITYKey = "LAST_TRADE_QUANTITY";
	node = json_object_get_member(pJsonObject, lAST_TRADE_QUANTITYKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&lAST_TRADE_QUANTITY, node, "int", "");
		} else {
			
		}
	}
	const gchar *lAST_TRADE_QUOTE_QUANTITYKey = "LAST_TRADE_QUOTE_QUANTITY";
	node = json_object_get_member(pJsonObject, lAST_TRADE_QUOTE_QUANTITYKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&lAST_TRADE_QUOTE_QUANTITY, node, "int", "");
		} else {
			
		}
	}
	const gchar *lAST_TRADE_SIDEKey = "LAST_TRADE_SIDE";
	node = json_object_get_member(pJsonObject, lAST_TRADE_SIDEKey);
	if (node !=NULL) {
	

		if (isprimitive("std::string")) {
			jsonToValue(&lAST_TRADE_SIDE, node, "std::string", "");
		} else {
			
		}
	}
	const gchar *lIFETIME_FIRST_TRADE_TSKey = "LIFETIME_FIRST_TRADE_TS";
	node = json_object_get_member(pJsonObject, lIFETIME_FIRST_TRADE_TSKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&lIFETIME_FIRST_TRADE_TS, node, "int", "");
		} else {
			
		}
	}
	const gchar *lIFETIME_HIGHKey = "LIFETIME_HIGH";
	node = json_object_get_member(pJsonObject, lIFETIME_HIGHKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&lIFETIME_HIGH, node, "int", "");
		} else {
			
		}
	}
	const gchar *lIFETIME_HIGH_TSKey = "LIFETIME_HIGH_TS";
	node = json_object_get_member(pJsonObject, lIFETIME_HIGH_TSKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&lIFETIME_HIGH_TS, node, "int", "");
		} else {
			
		}
	}
	const gchar *lIFETIME_LOWKey = "LIFETIME_LOW";
	node = json_object_get_member(pJsonObject, lIFETIME_LOWKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&lIFETIME_LOW, node, "int", "");
		} else {
			
		}
	}
	const gchar *lIFETIME_LOW_TSKey = "LIFETIME_LOW_TS";
	node = json_object_get_member(pJsonObject, lIFETIME_LOW_TSKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&lIFETIME_LOW_TS, node, "int", "");
		} else {
			
		}
	}
	const gchar *lIFETIME_OPENKey = "LIFETIME_OPEN";
	node = json_object_get_member(pJsonObject, lIFETIME_OPENKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&lIFETIME_OPEN, node, "int", "");
		} else {
			
		}
	}
	const gchar *lIFETIME_QUOTE_VOLUMEKey = "LIFETIME_QUOTE_VOLUME";
	node = json_object_get_member(pJsonObject, lIFETIME_QUOTE_VOLUMEKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&lIFETIME_QUOTE_VOLUME, node, "int", "");
		} else {
			
		}
	}
	const gchar *lIFETIME_QUOTE_VOLUME_BUYKey = "LIFETIME_QUOTE_VOLUME_BUY";
	node = json_object_get_member(pJsonObject, lIFETIME_QUOTE_VOLUME_BUYKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&lIFETIME_QUOTE_VOLUME_BUY, node, "int", "");
		} else {
			
		}
	}
	const gchar *lIFETIME_QUOTE_VOLUME_SELLKey = "LIFETIME_QUOTE_VOLUME_SELL";
	node = json_object_get_member(pJsonObject, lIFETIME_QUOTE_VOLUME_SELLKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&lIFETIME_QUOTE_VOLUME_SELL, node, "int", "");
		} else {
			
		}
	}
	const gchar *lIFETIME_QUOTE_VOLUME_UNKNOWNKey = "LIFETIME_QUOTE_VOLUME_UNKNOWN";
	node = json_object_get_member(pJsonObject, lIFETIME_QUOTE_VOLUME_UNKNOWNKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&lIFETIME_QUOTE_VOLUME_UNKNOWN, node, "int", "");
		} else {
			
		}
	}
	const gchar *lIFETIME_TOTAL_TRADESKey = "LIFETIME_TOTAL_TRADES";
	node = json_object_get_member(pJsonObject, lIFETIME_TOTAL_TRADESKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&lIFETIME_TOTAL_TRADES, node, "int", "");
		} else {
			
		}
	}
	const gchar *lIFETIME_TOTAL_TRADES_BUYKey = "LIFETIME_TOTAL_TRADES_BUY";
	node = json_object_get_member(pJsonObject, lIFETIME_TOTAL_TRADES_BUYKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&lIFETIME_TOTAL_TRADES_BUY, node, "int", "");
		} else {
			
		}
	}
	const gchar *lIFETIME_TOTAL_TRADES_SELLKey = "LIFETIME_TOTAL_TRADES_SELL";
	node = json_object_get_member(pJsonObject, lIFETIME_TOTAL_TRADES_SELLKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&lIFETIME_TOTAL_TRADES_SELL, node, "int", "");
		} else {
			
		}
	}
	const gchar *lIFETIME_TOTAL_TRADES_UNKNOWNKey = "LIFETIME_TOTAL_TRADES_UNKNOWN";
	node = json_object_get_member(pJsonObject, lIFETIME_TOTAL_TRADES_UNKNOWNKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&lIFETIME_TOTAL_TRADES_UNKNOWN, node, "int", "");
		} else {
			
		}
	}
	const gchar *lIFETIME_VOLUMEKey = "LIFETIME_VOLUME";
	node = json_object_get_member(pJsonObject, lIFETIME_VOLUMEKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&lIFETIME_VOLUME, node, "int", "");
		} else {
			
		}
	}
	const gchar *lIFETIME_VOLUME_BUYKey = "LIFETIME_VOLUME_BUY";
	node = json_object_get_member(pJsonObject, lIFETIME_VOLUME_BUYKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&lIFETIME_VOLUME_BUY, node, "int", "");
		} else {
			
		}
	}
	const gchar *lIFETIME_VOLUME_SELLKey = "LIFETIME_VOLUME_SELL";
	node = json_object_get_member(pJsonObject, lIFETIME_VOLUME_SELLKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&lIFETIME_VOLUME_SELL, node, "int", "");
		} else {
			
		}
	}
	const gchar *lIFETIME_VOLUME_UNKNOWNKey = "LIFETIME_VOLUME_UNKNOWN";
	node = json_object_get_member(pJsonObject, lIFETIME_VOLUME_UNKNOWNKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&lIFETIME_VOLUME_UNKNOWN, node, "int", "");
		} else {
			
		}
	}
	const gchar *mAPPED_INSTRUMENTKey = "MAPPED_INSTRUMENT";
	node = json_object_get_member(pJsonObject, mAPPED_INSTRUMENTKey);
	if (node !=NULL) {
	

		if (isprimitive("std::string")) {
			jsonToValue(&mAPPED_INSTRUMENT, node, "std::string", "");
		} else {
			
		}
	}
	const gchar *mARKETKey = "MARKET";
	node = json_object_get_member(pJsonObject, mARKETKey);
	if (node !=NULL) {
	

		if (isprimitive("std::string")) {
			jsonToValue(&mARKET, node, "std::string", "");
		} else {
			
		}
	}
	const gchar *mOVING_180_DAY_HIGHKey = "MOVING_180_DAY_HIGH";
	node = json_object_get_member(pJsonObject, mOVING_180_DAY_HIGHKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_180_DAY_HIGH, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_180_DAY_LOWKey = "MOVING_180_DAY_LOW";
	node = json_object_get_member(pJsonObject, mOVING_180_DAY_LOWKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_180_DAY_LOW, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_180_DAY_OPENKey = "MOVING_180_DAY_OPEN";
	node = json_object_get_member(pJsonObject, mOVING_180_DAY_OPENKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_180_DAY_OPEN, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_180_DAY_QUOTE_VOLUMEKey = "MOVING_180_DAY_QUOTE_VOLUME";
	node = json_object_get_member(pJsonObject, mOVING_180_DAY_QUOTE_VOLUMEKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_180_DAY_QUOTE_VOLUME, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_180_DAY_QUOTE_VOLUME_BUYKey = "MOVING_180_DAY_QUOTE_VOLUME_BUY";
	node = json_object_get_member(pJsonObject, mOVING_180_DAY_QUOTE_VOLUME_BUYKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_180_DAY_QUOTE_VOLUME_BUY, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_180_DAY_QUOTE_VOLUME_SELLKey = "MOVING_180_DAY_QUOTE_VOLUME_SELL";
	node = json_object_get_member(pJsonObject, mOVING_180_DAY_QUOTE_VOLUME_SELLKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_180_DAY_QUOTE_VOLUME_SELL, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_180_DAY_QUOTE_VOLUME_UNKNOWNKey = "MOVING_180_DAY_QUOTE_VOLUME_UNKNOWN";
	node = json_object_get_member(pJsonObject, mOVING_180_DAY_QUOTE_VOLUME_UNKNOWNKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_180_DAY_QUOTE_VOLUME_UNKNOWN, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_180_DAY_TOTAL_TRADESKey = "MOVING_180_DAY_TOTAL_TRADES";
	node = json_object_get_member(pJsonObject, mOVING_180_DAY_TOTAL_TRADESKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_180_DAY_TOTAL_TRADES, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_180_DAY_TOTAL_TRADES_BUYKey = "MOVING_180_DAY_TOTAL_TRADES_BUY";
	node = json_object_get_member(pJsonObject, mOVING_180_DAY_TOTAL_TRADES_BUYKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_180_DAY_TOTAL_TRADES_BUY, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_180_DAY_TOTAL_TRADES_SELLKey = "MOVING_180_DAY_TOTAL_TRADES_SELL";
	node = json_object_get_member(pJsonObject, mOVING_180_DAY_TOTAL_TRADES_SELLKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_180_DAY_TOTAL_TRADES_SELL, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_180_DAY_TOTAL_TRADES_UNKNOWNKey = "MOVING_180_DAY_TOTAL_TRADES_UNKNOWN";
	node = json_object_get_member(pJsonObject, mOVING_180_DAY_TOTAL_TRADES_UNKNOWNKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_180_DAY_TOTAL_TRADES_UNKNOWN, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_180_DAY_VOLUMEKey = "MOVING_180_DAY_VOLUME";
	node = json_object_get_member(pJsonObject, mOVING_180_DAY_VOLUMEKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_180_DAY_VOLUME, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_180_DAY_VOLUME_BUYKey = "MOVING_180_DAY_VOLUME_BUY";
	node = json_object_get_member(pJsonObject, mOVING_180_DAY_VOLUME_BUYKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_180_DAY_VOLUME_BUY, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_180_DAY_VOLUME_SELLKey = "MOVING_180_DAY_VOLUME_SELL";
	node = json_object_get_member(pJsonObject, mOVING_180_DAY_VOLUME_SELLKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_180_DAY_VOLUME_SELL, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_180_DAY_VOLUME_UNKNOWNKey = "MOVING_180_DAY_VOLUME_UNKNOWN";
	node = json_object_get_member(pJsonObject, mOVING_180_DAY_VOLUME_UNKNOWNKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_180_DAY_VOLUME_UNKNOWN, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_24_HOUR_HIGHKey = "MOVING_24_HOUR_HIGH";
	node = json_object_get_member(pJsonObject, mOVING_24_HOUR_HIGHKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_24_HOUR_HIGH, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_24_HOUR_LOWKey = "MOVING_24_HOUR_LOW";
	node = json_object_get_member(pJsonObject, mOVING_24_HOUR_LOWKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_24_HOUR_LOW, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_24_HOUR_OPENKey = "MOVING_24_HOUR_OPEN";
	node = json_object_get_member(pJsonObject, mOVING_24_HOUR_OPENKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_24_HOUR_OPEN, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_24_HOUR_QUOTE_VOLUMEKey = "MOVING_24_HOUR_QUOTE_VOLUME";
	node = json_object_get_member(pJsonObject, mOVING_24_HOUR_QUOTE_VOLUMEKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_24_HOUR_QUOTE_VOLUME, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_24_HOUR_QUOTE_VOLUME_BUYKey = "MOVING_24_HOUR_QUOTE_VOLUME_BUY";
	node = json_object_get_member(pJsonObject, mOVING_24_HOUR_QUOTE_VOLUME_BUYKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_24_HOUR_QUOTE_VOLUME_BUY, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_24_HOUR_QUOTE_VOLUME_SELLKey = "MOVING_24_HOUR_QUOTE_VOLUME_SELL";
	node = json_object_get_member(pJsonObject, mOVING_24_HOUR_QUOTE_VOLUME_SELLKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_24_HOUR_QUOTE_VOLUME_SELL, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_24_HOUR_QUOTE_VOLUME_UNKNOWNKey = "MOVING_24_HOUR_QUOTE_VOLUME_UNKNOWN";
	node = json_object_get_member(pJsonObject, mOVING_24_HOUR_QUOTE_VOLUME_UNKNOWNKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_24_HOUR_QUOTE_VOLUME_UNKNOWN, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_24_HOUR_TOTAL_TRADESKey = "MOVING_24_HOUR_TOTAL_TRADES";
	node = json_object_get_member(pJsonObject, mOVING_24_HOUR_TOTAL_TRADESKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_24_HOUR_TOTAL_TRADES, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_24_HOUR_TOTAL_TRADES_BUYKey = "MOVING_24_HOUR_TOTAL_TRADES_BUY";
	node = json_object_get_member(pJsonObject, mOVING_24_HOUR_TOTAL_TRADES_BUYKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_24_HOUR_TOTAL_TRADES_BUY, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_24_HOUR_TOTAL_TRADES_SELLKey = "MOVING_24_HOUR_TOTAL_TRADES_SELL";
	node = json_object_get_member(pJsonObject, mOVING_24_HOUR_TOTAL_TRADES_SELLKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_24_HOUR_TOTAL_TRADES_SELL, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_24_HOUR_TOTAL_TRADES_UNKNOWNKey = "MOVING_24_HOUR_TOTAL_TRADES_UNKNOWN";
	node = json_object_get_member(pJsonObject, mOVING_24_HOUR_TOTAL_TRADES_UNKNOWNKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_24_HOUR_TOTAL_TRADES_UNKNOWN, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_24_HOUR_VOLUMEKey = "MOVING_24_HOUR_VOLUME";
	node = json_object_get_member(pJsonObject, mOVING_24_HOUR_VOLUMEKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_24_HOUR_VOLUME, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_24_HOUR_VOLUME_BUYKey = "MOVING_24_HOUR_VOLUME_BUY";
	node = json_object_get_member(pJsonObject, mOVING_24_HOUR_VOLUME_BUYKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_24_HOUR_VOLUME_BUY, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_24_HOUR_VOLUME_SELLKey = "MOVING_24_HOUR_VOLUME_SELL";
	node = json_object_get_member(pJsonObject, mOVING_24_HOUR_VOLUME_SELLKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_24_HOUR_VOLUME_SELL, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_24_HOUR_VOLUME_UNKNOWNKey = "MOVING_24_HOUR_VOLUME_UNKNOWN";
	node = json_object_get_member(pJsonObject, mOVING_24_HOUR_VOLUME_UNKNOWNKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_24_HOUR_VOLUME_UNKNOWN, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_30_DAY_HIGHKey = "MOVING_30_DAY_HIGH";
	node = json_object_get_member(pJsonObject, mOVING_30_DAY_HIGHKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_30_DAY_HIGH, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_30_DAY_LOWKey = "MOVING_30_DAY_LOW";
	node = json_object_get_member(pJsonObject, mOVING_30_DAY_LOWKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_30_DAY_LOW, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_30_DAY_OPENKey = "MOVING_30_DAY_OPEN";
	node = json_object_get_member(pJsonObject, mOVING_30_DAY_OPENKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_30_DAY_OPEN, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_30_DAY_QUOTE_VOLUMEKey = "MOVING_30_DAY_QUOTE_VOLUME";
	node = json_object_get_member(pJsonObject, mOVING_30_DAY_QUOTE_VOLUMEKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_30_DAY_QUOTE_VOLUME, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_30_DAY_QUOTE_VOLUME_BUYKey = "MOVING_30_DAY_QUOTE_VOLUME_BUY";
	node = json_object_get_member(pJsonObject, mOVING_30_DAY_QUOTE_VOLUME_BUYKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_30_DAY_QUOTE_VOLUME_BUY, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_30_DAY_QUOTE_VOLUME_SELLKey = "MOVING_30_DAY_QUOTE_VOLUME_SELL";
	node = json_object_get_member(pJsonObject, mOVING_30_DAY_QUOTE_VOLUME_SELLKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_30_DAY_QUOTE_VOLUME_SELL, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_30_DAY_QUOTE_VOLUME_UNKNOWNKey = "MOVING_30_DAY_QUOTE_VOLUME_UNKNOWN";
	node = json_object_get_member(pJsonObject, mOVING_30_DAY_QUOTE_VOLUME_UNKNOWNKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_30_DAY_QUOTE_VOLUME_UNKNOWN, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_30_DAY_TOTAL_TRADESKey = "MOVING_30_DAY_TOTAL_TRADES";
	node = json_object_get_member(pJsonObject, mOVING_30_DAY_TOTAL_TRADESKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_30_DAY_TOTAL_TRADES, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_30_DAY_TOTAL_TRADES_BUYKey = "MOVING_30_DAY_TOTAL_TRADES_BUY";
	node = json_object_get_member(pJsonObject, mOVING_30_DAY_TOTAL_TRADES_BUYKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_30_DAY_TOTAL_TRADES_BUY, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_30_DAY_TOTAL_TRADES_SELLKey = "MOVING_30_DAY_TOTAL_TRADES_SELL";
	node = json_object_get_member(pJsonObject, mOVING_30_DAY_TOTAL_TRADES_SELLKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_30_DAY_TOTAL_TRADES_SELL, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_30_DAY_TOTAL_TRADES_UNKNOWNKey = "MOVING_30_DAY_TOTAL_TRADES_UNKNOWN";
	node = json_object_get_member(pJsonObject, mOVING_30_DAY_TOTAL_TRADES_UNKNOWNKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_30_DAY_TOTAL_TRADES_UNKNOWN, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_30_DAY_VOLUMEKey = "MOVING_30_DAY_VOLUME";
	node = json_object_get_member(pJsonObject, mOVING_30_DAY_VOLUMEKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_30_DAY_VOLUME, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_30_DAY_VOLUME_BUYKey = "MOVING_30_DAY_VOLUME_BUY";
	node = json_object_get_member(pJsonObject, mOVING_30_DAY_VOLUME_BUYKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_30_DAY_VOLUME_BUY, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_30_DAY_VOLUME_SELLKey = "MOVING_30_DAY_VOLUME_SELL";
	node = json_object_get_member(pJsonObject, mOVING_30_DAY_VOLUME_SELLKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_30_DAY_VOLUME_SELL, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_30_DAY_VOLUME_UNKNOWNKey = "MOVING_30_DAY_VOLUME_UNKNOWN";
	node = json_object_get_member(pJsonObject, mOVING_30_DAY_VOLUME_UNKNOWNKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_30_DAY_VOLUME_UNKNOWN, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_365_DAY_HIGHKey = "MOVING_365_DAY_HIGH";
	node = json_object_get_member(pJsonObject, mOVING_365_DAY_HIGHKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_365_DAY_HIGH, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_365_DAY_LOWKey = "MOVING_365_DAY_LOW";
	node = json_object_get_member(pJsonObject, mOVING_365_DAY_LOWKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_365_DAY_LOW, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_365_DAY_OPENKey = "MOVING_365_DAY_OPEN";
	node = json_object_get_member(pJsonObject, mOVING_365_DAY_OPENKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_365_DAY_OPEN, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_365_DAY_QUOTE_VOLUMEKey = "MOVING_365_DAY_QUOTE_VOLUME";
	node = json_object_get_member(pJsonObject, mOVING_365_DAY_QUOTE_VOLUMEKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_365_DAY_QUOTE_VOLUME, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_365_DAY_QUOTE_VOLUME_BUYKey = "MOVING_365_DAY_QUOTE_VOLUME_BUY";
	node = json_object_get_member(pJsonObject, mOVING_365_DAY_QUOTE_VOLUME_BUYKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_365_DAY_QUOTE_VOLUME_BUY, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_365_DAY_QUOTE_VOLUME_SELLKey = "MOVING_365_DAY_QUOTE_VOLUME_SELL";
	node = json_object_get_member(pJsonObject, mOVING_365_DAY_QUOTE_VOLUME_SELLKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_365_DAY_QUOTE_VOLUME_SELL, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_365_DAY_QUOTE_VOLUME_UNKNOWNKey = "MOVING_365_DAY_QUOTE_VOLUME_UNKNOWN";
	node = json_object_get_member(pJsonObject, mOVING_365_DAY_QUOTE_VOLUME_UNKNOWNKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_365_DAY_QUOTE_VOLUME_UNKNOWN, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_365_DAY_TOTAL_TRADESKey = "MOVING_365_DAY_TOTAL_TRADES";
	node = json_object_get_member(pJsonObject, mOVING_365_DAY_TOTAL_TRADESKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_365_DAY_TOTAL_TRADES, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_365_DAY_TOTAL_TRADES_BUYKey = "MOVING_365_DAY_TOTAL_TRADES_BUY";
	node = json_object_get_member(pJsonObject, mOVING_365_DAY_TOTAL_TRADES_BUYKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_365_DAY_TOTAL_TRADES_BUY, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_365_DAY_TOTAL_TRADES_SELLKey = "MOVING_365_DAY_TOTAL_TRADES_SELL";
	node = json_object_get_member(pJsonObject, mOVING_365_DAY_TOTAL_TRADES_SELLKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_365_DAY_TOTAL_TRADES_SELL, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_365_DAY_TOTAL_TRADES_UNKNOWNKey = "MOVING_365_DAY_TOTAL_TRADES_UNKNOWN";
	node = json_object_get_member(pJsonObject, mOVING_365_DAY_TOTAL_TRADES_UNKNOWNKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_365_DAY_TOTAL_TRADES_UNKNOWN, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_365_DAY_VOLUMEKey = "MOVING_365_DAY_VOLUME";
	node = json_object_get_member(pJsonObject, mOVING_365_DAY_VOLUMEKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_365_DAY_VOLUME, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_365_DAY_VOLUME_BUYKey = "MOVING_365_DAY_VOLUME_BUY";
	node = json_object_get_member(pJsonObject, mOVING_365_DAY_VOLUME_BUYKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_365_DAY_VOLUME_BUY, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_365_DAY_VOLUME_SELLKey = "MOVING_365_DAY_VOLUME_SELL";
	node = json_object_get_member(pJsonObject, mOVING_365_DAY_VOLUME_SELLKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_365_DAY_VOLUME_SELL, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_365_DAY_VOLUME_UNKNOWNKey = "MOVING_365_DAY_VOLUME_UNKNOWN";
	node = json_object_get_member(pJsonObject, mOVING_365_DAY_VOLUME_UNKNOWNKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_365_DAY_VOLUME_UNKNOWN, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_7_DAY_HIGHKey = "MOVING_7_DAY_HIGH";
	node = json_object_get_member(pJsonObject, mOVING_7_DAY_HIGHKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_7_DAY_HIGH, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_7_DAY_LOWKey = "MOVING_7_DAY_LOW";
	node = json_object_get_member(pJsonObject, mOVING_7_DAY_LOWKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_7_DAY_LOW, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_7_DAY_OPENKey = "MOVING_7_DAY_OPEN";
	node = json_object_get_member(pJsonObject, mOVING_7_DAY_OPENKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_7_DAY_OPEN, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_7_DAY_QUOTE_VOLUMEKey = "MOVING_7_DAY_QUOTE_VOLUME";
	node = json_object_get_member(pJsonObject, mOVING_7_DAY_QUOTE_VOLUMEKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_7_DAY_QUOTE_VOLUME, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_7_DAY_QUOTE_VOLUME_BUYKey = "MOVING_7_DAY_QUOTE_VOLUME_BUY";
	node = json_object_get_member(pJsonObject, mOVING_7_DAY_QUOTE_VOLUME_BUYKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_7_DAY_QUOTE_VOLUME_BUY, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_7_DAY_QUOTE_VOLUME_SELLKey = "MOVING_7_DAY_QUOTE_VOLUME_SELL";
	node = json_object_get_member(pJsonObject, mOVING_7_DAY_QUOTE_VOLUME_SELLKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_7_DAY_QUOTE_VOLUME_SELL, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_7_DAY_QUOTE_VOLUME_UNKNOWNKey = "MOVING_7_DAY_QUOTE_VOLUME_UNKNOWN";
	node = json_object_get_member(pJsonObject, mOVING_7_DAY_QUOTE_VOLUME_UNKNOWNKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_7_DAY_QUOTE_VOLUME_UNKNOWN, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_7_DAY_TOTAL_TRADESKey = "MOVING_7_DAY_TOTAL_TRADES";
	node = json_object_get_member(pJsonObject, mOVING_7_DAY_TOTAL_TRADESKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_7_DAY_TOTAL_TRADES, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_7_DAY_TOTAL_TRADES_BUYKey = "MOVING_7_DAY_TOTAL_TRADES_BUY";
	node = json_object_get_member(pJsonObject, mOVING_7_DAY_TOTAL_TRADES_BUYKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_7_DAY_TOTAL_TRADES_BUY, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_7_DAY_TOTAL_TRADES_SELLKey = "MOVING_7_DAY_TOTAL_TRADES_SELL";
	node = json_object_get_member(pJsonObject, mOVING_7_DAY_TOTAL_TRADES_SELLKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_7_DAY_TOTAL_TRADES_SELL, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_7_DAY_TOTAL_TRADES_UNKNOWNKey = "MOVING_7_DAY_TOTAL_TRADES_UNKNOWN";
	node = json_object_get_member(pJsonObject, mOVING_7_DAY_TOTAL_TRADES_UNKNOWNKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_7_DAY_TOTAL_TRADES_UNKNOWN, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_7_DAY_VOLUMEKey = "MOVING_7_DAY_VOLUME";
	node = json_object_get_member(pJsonObject, mOVING_7_DAY_VOLUMEKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_7_DAY_VOLUME, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_7_DAY_VOLUME_BUYKey = "MOVING_7_DAY_VOLUME_BUY";
	node = json_object_get_member(pJsonObject, mOVING_7_DAY_VOLUME_BUYKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_7_DAY_VOLUME_BUY, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_7_DAY_VOLUME_SELLKey = "MOVING_7_DAY_VOLUME_SELL";
	node = json_object_get_member(pJsonObject, mOVING_7_DAY_VOLUME_SELLKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_7_DAY_VOLUME_SELL, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_7_DAY_VOLUME_UNKNOWNKey = "MOVING_7_DAY_VOLUME_UNKNOWN";
	node = json_object_get_member(pJsonObject, mOVING_7_DAY_VOLUME_UNKNOWNKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_7_DAY_VOLUME_UNKNOWN, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_90_DAY_HIGHKey = "MOVING_90_DAY_HIGH";
	node = json_object_get_member(pJsonObject, mOVING_90_DAY_HIGHKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_90_DAY_HIGH, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_90_DAY_LOWKey = "MOVING_90_DAY_LOW";
	node = json_object_get_member(pJsonObject, mOVING_90_DAY_LOWKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_90_DAY_LOW, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_90_DAY_OPENKey = "MOVING_90_DAY_OPEN";
	node = json_object_get_member(pJsonObject, mOVING_90_DAY_OPENKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_90_DAY_OPEN, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_90_DAY_QUOTE_VOLUMEKey = "MOVING_90_DAY_QUOTE_VOLUME";
	node = json_object_get_member(pJsonObject, mOVING_90_DAY_QUOTE_VOLUMEKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_90_DAY_QUOTE_VOLUME, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_90_DAY_QUOTE_VOLUME_BUYKey = "MOVING_90_DAY_QUOTE_VOLUME_BUY";
	node = json_object_get_member(pJsonObject, mOVING_90_DAY_QUOTE_VOLUME_BUYKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_90_DAY_QUOTE_VOLUME_BUY, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_90_DAY_QUOTE_VOLUME_SELLKey = "MOVING_90_DAY_QUOTE_VOLUME_SELL";
	node = json_object_get_member(pJsonObject, mOVING_90_DAY_QUOTE_VOLUME_SELLKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_90_DAY_QUOTE_VOLUME_SELL, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_90_DAY_QUOTE_VOLUME_UNKNOWNKey = "MOVING_90_DAY_QUOTE_VOLUME_UNKNOWN";
	node = json_object_get_member(pJsonObject, mOVING_90_DAY_QUOTE_VOLUME_UNKNOWNKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_90_DAY_QUOTE_VOLUME_UNKNOWN, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_90_DAY_TOTAL_TRADESKey = "MOVING_90_DAY_TOTAL_TRADES";
	node = json_object_get_member(pJsonObject, mOVING_90_DAY_TOTAL_TRADESKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_90_DAY_TOTAL_TRADES, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_90_DAY_TOTAL_TRADES_BUYKey = "MOVING_90_DAY_TOTAL_TRADES_BUY";
	node = json_object_get_member(pJsonObject, mOVING_90_DAY_TOTAL_TRADES_BUYKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_90_DAY_TOTAL_TRADES_BUY, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_90_DAY_TOTAL_TRADES_SELLKey = "MOVING_90_DAY_TOTAL_TRADES_SELL";
	node = json_object_get_member(pJsonObject, mOVING_90_DAY_TOTAL_TRADES_SELLKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_90_DAY_TOTAL_TRADES_SELL, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_90_DAY_TOTAL_TRADES_UNKNOWNKey = "MOVING_90_DAY_TOTAL_TRADES_UNKNOWN";
	node = json_object_get_member(pJsonObject, mOVING_90_DAY_TOTAL_TRADES_UNKNOWNKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_90_DAY_TOTAL_TRADES_UNKNOWN, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_90_DAY_VOLUMEKey = "MOVING_90_DAY_VOLUME";
	node = json_object_get_member(pJsonObject, mOVING_90_DAY_VOLUMEKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_90_DAY_VOLUME, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_90_DAY_VOLUME_BUYKey = "MOVING_90_DAY_VOLUME_BUY";
	node = json_object_get_member(pJsonObject, mOVING_90_DAY_VOLUME_BUYKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_90_DAY_VOLUME_BUY, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_90_DAY_VOLUME_SELLKey = "MOVING_90_DAY_VOLUME_SELL";
	node = json_object_get_member(pJsonObject, mOVING_90_DAY_VOLUME_SELLKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_90_DAY_VOLUME_SELL, node, "int", "");
		} else {
			
		}
	}
	const gchar *mOVING_90_DAY_VOLUME_UNKNOWNKey = "MOVING_90_DAY_VOLUME_UNKNOWN";
	node = json_object_get_member(pJsonObject, mOVING_90_DAY_VOLUME_UNKNOWNKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&mOVING_90_DAY_VOLUME_UNKNOWN, node, "int", "");
		} else {
			
		}
	}
	const gchar *pRICEKey = "PRICE";
	node = json_object_get_member(pJsonObject, pRICEKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&pRICE, node, "int", "");
		} else {
			
		}
	}
	const gchar *pRICE_FLAGKey = "PRICE_FLAG";
	node = json_object_get_member(pJsonObject, pRICE_FLAGKey);
	if (node !=NULL) {
	

		if (isprimitive("std::string")) {
			jsonToValue(&pRICE_FLAG, node, "std::string", "");
		} else {
			
		}
	}
	const gchar *pRICE_LAST_UPDATE_TSKey = "PRICE_LAST_UPDATE_TS";
	node = json_object_get_member(pJsonObject, pRICE_LAST_UPDATE_TSKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&pRICE_LAST_UPDATE_TS, node, "int", "");
		} else {
			
		}
	}
	const gchar *qUOTEKey = "QUOTE";
	node = json_object_get_member(pJsonObject, qUOTEKey);
	if (node !=NULL) {
	

		if (isprimitive("std::string")) {
			jsonToValue(&qUOTE, node, "std::string", "");
		} else {
			
		}
	}
	const gchar *tOP_ASK_LAST_UPDATE_TSKey = "TOP_ASK_LAST_UPDATE_TS";
	node = json_object_get_member(pJsonObject, tOP_ASK_LAST_UPDATE_TSKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&tOP_ASK_LAST_UPDATE_TS, node, "int", "");
		} else {
			
		}
	}
	const gchar *tOP_ASK_PRICEKey = "TOP_ASK_PRICE";
	node = json_object_get_member(pJsonObject, tOP_ASK_PRICEKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&tOP_ASK_PRICE, node, "int", "");
		} else {
			
		}
	}
	const gchar *tOP_ASK_QUANTITYKey = "TOP_ASK_QUANTITY";
	node = json_object_get_member(pJsonObject, tOP_ASK_QUANTITYKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&tOP_ASK_QUANTITY, node, "int", "");
		} else {
			
		}
	}
	const gchar *tOP_BID_LAST_UPDATE_TSKey = "TOP_BID_LAST_UPDATE_TS";
	node = json_object_get_member(pJsonObject, tOP_BID_LAST_UPDATE_TSKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&tOP_BID_LAST_UPDATE_TS, node, "int", "");
		} else {
			
		}
	}
	const gchar *tOP_BID_PRICEKey = "TOP_BID_PRICE";
	node = json_object_get_member(pJsonObject, tOP_BID_PRICEKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&tOP_BID_PRICE, node, "int", "");
		} else {
			
		}
	}
	const gchar *tOP_BID_QUANTITYKey = "TOP_BID_QUANTITY";
	node = json_object_get_member(pJsonObject, tOP_BID_QUANTITYKey);
	if (node !=NULL) {
	

		if (isprimitive("int")) {
			jsonToValue(&tOP_BID_QUANTITY, node, "int", "");
		} else {
			
		}
	}
	const gchar *tYPEKey = "TYPE";
	node = json_object_get_member(pJsonObject, tYPEKey);
	if (node !=NULL) {
	

		if (isprimitive("std::string")) {
			jsonToValue(&tYPE, node, "std::string", "");
		} else {
			
		}
	}
}

SPOT_INSTRUMENT_MARKET_DATA::SPOT_INSTRUMENT_MARKET_DATA(char* json)
{
	this->fromJson(json);
}

char*
SPOT_INSTRUMENT_MARKET_DATA::toJson()
{
	JsonObject *pJsonObject = json_object_new();
	JsonNode *node;
	if (isprimitive("std::string")) {
		std::string obj = getBASE();
		node = converttoJson(&obj, "std::string", "");
	}
	else {
		
	}
	const gchar *bASEKey = "BASE";
	json_object_set_member(pJsonObject, bASEKey, node);
	if (isprimitive("int")) {
		int obj = getCCSEQ();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cCSEQKey = "CCSEQ";
	json_object_set_member(pJsonObject, cCSEQKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTDAYHIGH();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_DAY_HIGHKey = "CURRENT_DAY_HIGH";
	json_object_set_member(pJsonObject, cURRENT_DAY_HIGHKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTDAYLOW();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_DAY_LOWKey = "CURRENT_DAY_LOW";
	json_object_set_member(pJsonObject, cURRENT_DAY_LOWKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTDAYOPEN();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_DAY_OPENKey = "CURRENT_DAY_OPEN";
	json_object_set_member(pJsonObject, cURRENT_DAY_OPENKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTDAYQUOTEVOLUME();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_DAY_QUOTE_VOLUMEKey = "CURRENT_DAY_QUOTE_VOLUME";
	json_object_set_member(pJsonObject, cURRENT_DAY_QUOTE_VOLUMEKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTDAYQUOTEVOLUMEBUY();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_DAY_QUOTE_VOLUME_BUYKey = "CURRENT_DAY_QUOTE_VOLUME_BUY";
	json_object_set_member(pJsonObject, cURRENT_DAY_QUOTE_VOLUME_BUYKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTDAYQUOTEVOLUMESELL();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_DAY_QUOTE_VOLUME_SELLKey = "CURRENT_DAY_QUOTE_VOLUME_SELL";
	json_object_set_member(pJsonObject, cURRENT_DAY_QUOTE_VOLUME_SELLKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTDAYQUOTEVOLUMEUNKNOWN();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_DAY_QUOTE_VOLUME_UNKNOWNKey = "CURRENT_DAY_QUOTE_VOLUME_UNKNOWN";
	json_object_set_member(pJsonObject, cURRENT_DAY_QUOTE_VOLUME_UNKNOWNKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTDAYTOTALTRADES();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_DAY_TOTAL_TRADESKey = "CURRENT_DAY_TOTAL_TRADES";
	json_object_set_member(pJsonObject, cURRENT_DAY_TOTAL_TRADESKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTDAYTOTALTRADESBUY();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_DAY_TOTAL_TRADES_BUYKey = "CURRENT_DAY_TOTAL_TRADES_BUY";
	json_object_set_member(pJsonObject, cURRENT_DAY_TOTAL_TRADES_BUYKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTDAYTOTALTRADESSELL();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_DAY_TOTAL_TRADES_SELLKey = "CURRENT_DAY_TOTAL_TRADES_SELL";
	json_object_set_member(pJsonObject, cURRENT_DAY_TOTAL_TRADES_SELLKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTDAYTOTALTRADESUNKNOWN();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_DAY_TOTAL_TRADES_UNKNOWNKey = "CURRENT_DAY_TOTAL_TRADES_UNKNOWN";
	json_object_set_member(pJsonObject, cURRENT_DAY_TOTAL_TRADES_UNKNOWNKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTDAYVOLUME();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_DAY_VOLUMEKey = "CURRENT_DAY_VOLUME";
	json_object_set_member(pJsonObject, cURRENT_DAY_VOLUMEKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTDAYVOLUMEBUY();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_DAY_VOLUME_BUYKey = "CURRENT_DAY_VOLUME_BUY";
	json_object_set_member(pJsonObject, cURRENT_DAY_VOLUME_BUYKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTDAYVOLUMESELL();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_DAY_VOLUME_SELLKey = "CURRENT_DAY_VOLUME_SELL";
	json_object_set_member(pJsonObject, cURRENT_DAY_VOLUME_SELLKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTDAYVOLUMEUNKNOWN();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_DAY_VOLUME_UNKNOWNKey = "CURRENT_DAY_VOLUME_UNKNOWN";
	json_object_set_member(pJsonObject, cURRENT_DAY_VOLUME_UNKNOWNKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTHOURHIGH();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_HOUR_HIGHKey = "CURRENT_HOUR_HIGH";
	json_object_set_member(pJsonObject, cURRENT_HOUR_HIGHKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTHOURLOW();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_HOUR_LOWKey = "CURRENT_HOUR_LOW";
	json_object_set_member(pJsonObject, cURRENT_HOUR_LOWKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTHOUROPEN();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_HOUR_OPENKey = "CURRENT_HOUR_OPEN";
	json_object_set_member(pJsonObject, cURRENT_HOUR_OPENKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTHOURQUOTEVOLUME();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_HOUR_QUOTE_VOLUMEKey = "CURRENT_HOUR_QUOTE_VOLUME";
	json_object_set_member(pJsonObject, cURRENT_HOUR_QUOTE_VOLUMEKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTHOURQUOTEVOLUMEBUY();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_HOUR_QUOTE_VOLUME_BUYKey = "CURRENT_HOUR_QUOTE_VOLUME_BUY";
	json_object_set_member(pJsonObject, cURRENT_HOUR_QUOTE_VOLUME_BUYKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTHOURQUOTEVOLUMESELL();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_HOUR_QUOTE_VOLUME_SELLKey = "CURRENT_HOUR_QUOTE_VOLUME_SELL";
	json_object_set_member(pJsonObject, cURRENT_HOUR_QUOTE_VOLUME_SELLKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTHOURQUOTEVOLUMEUNKNOWN();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_HOUR_QUOTE_VOLUME_UNKNOWNKey = "CURRENT_HOUR_QUOTE_VOLUME_UNKNOWN";
	json_object_set_member(pJsonObject, cURRENT_HOUR_QUOTE_VOLUME_UNKNOWNKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTHOURTOTALTRADES();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_HOUR_TOTAL_TRADESKey = "CURRENT_HOUR_TOTAL_TRADES";
	json_object_set_member(pJsonObject, cURRENT_HOUR_TOTAL_TRADESKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTHOURTOTALTRADESBUY();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_HOUR_TOTAL_TRADES_BUYKey = "CURRENT_HOUR_TOTAL_TRADES_BUY";
	json_object_set_member(pJsonObject, cURRENT_HOUR_TOTAL_TRADES_BUYKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTHOURTOTALTRADESSELL();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_HOUR_TOTAL_TRADES_SELLKey = "CURRENT_HOUR_TOTAL_TRADES_SELL";
	json_object_set_member(pJsonObject, cURRENT_HOUR_TOTAL_TRADES_SELLKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTHOURTOTALTRADESUNKNOWN();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_HOUR_TOTAL_TRADES_UNKNOWNKey = "CURRENT_HOUR_TOTAL_TRADES_UNKNOWN";
	json_object_set_member(pJsonObject, cURRENT_HOUR_TOTAL_TRADES_UNKNOWNKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTHOURVOLUME();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_HOUR_VOLUMEKey = "CURRENT_HOUR_VOLUME";
	json_object_set_member(pJsonObject, cURRENT_HOUR_VOLUMEKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTHOURVOLUMEBUY();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_HOUR_VOLUME_BUYKey = "CURRENT_HOUR_VOLUME_BUY";
	json_object_set_member(pJsonObject, cURRENT_HOUR_VOLUME_BUYKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTHOURVOLUMESELL();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_HOUR_VOLUME_SELLKey = "CURRENT_HOUR_VOLUME_SELL";
	json_object_set_member(pJsonObject, cURRENT_HOUR_VOLUME_SELLKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTHOURVOLUMEUNKNOWN();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_HOUR_VOLUME_UNKNOWNKey = "CURRENT_HOUR_VOLUME_UNKNOWN";
	json_object_set_member(pJsonObject, cURRENT_HOUR_VOLUME_UNKNOWNKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTMONTHHIGH();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_MONTH_HIGHKey = "CURRENT_MONTH_HIGH";
	json_object_set_member(pJsonObject, cURRENT_MONTH_HIGHKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTMONTHLOW();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_MONTH_LOWKey = "CURRENT_MONTH_LOW";
	json_object_set_member(pJsonObject, cURRENT_MONTH_LOWKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTMONTHOPEN();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_MONTH_OPENKey = "CURRENT_MONTH_OPEN";
	json_object_set_member(pJsonObject, cURRENT_MONTH_OPENKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTMONTHQUOTEVOLUME();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_MONTH_QUOTE_VOLUMEKey = "CURRENT_MONTH_QUOTE_VOLUME";
	json_object_set_member(pJsonObject, cURRENT_MONTH_QUOTE_VOLUMEKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTMONTHQUOTEVOLUMEBUY();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_MONTH_QUOTE_VOLUME_BUYKey = "CURRENT_MONTH_QUOTE_VOLUME_BUY";
	json_object_set_member(pJsonObject, cURRENT_MONTH_QUOTE_VOLUME_BUYKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTMONTHQUOTEVOLUMESELL();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_MONTH_QUOTE_VOLUME_SELLKey = "CURRENT_MONTH_QUOTE_VOLUME_SELL";
	json_object_set_member(pJsonObject, cURRENT_MONTH_QUOTE_VOLUME_SELLKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTMONTHQUOTEVOLUMEUNKNOWN();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_MONTH_QUOTE_VOLUME_UNKNOWNKey = "CURRENT_MONTH_QUOTE_VOLUME_UNKNOWN";
	json_object_set_member(pJsonObject, cURRENT_MONTH_QUOTE_VOLUME_UNKNOWNKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTMONTHTOTALTRADES();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_MONTH_TOTAL_TRADESKey = "CURRENT_MONTH_TOTAL_TRADES";
	json_object_set_member(pJsonObject, cURRENT_MONTH_TOTAL_TRADESKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTMONTHTOTALTRADESBUY();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_MONTH_TOTAL_TRADES_BUYKey = "CURRENT_MONTH_TOTAL_TRADES_BUY";
	json_object_set_member(pJsonObject, cURRENT_MONTH_TOTAL_TRADES_BUYKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTMONTHTOTALTRADESSELL();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_MONTH_TOTAL_TRADES_SELLKey = "CURRENT_MONTH_TOTAL_TRADES_SELL";
	json_object_set_member(pJsonObject, cURRENT_MONTH_TOTAL_TRADES_SELLKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTMONTHTOTALTRADESUNKNOWN();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_MONTH_TOTAL_TRADES_UNKNOWNKey = "CURRENT_MONTH_TOTAL_TRADES_UNKNOWN";
	json_object_set_member(pJsonObject, cURRENT_MONTH_TOTAL_TRADES_UNKNOWNKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTMONTHVOLUME();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_MONTH_VOLUMEKey = "CURRENT_MONTH_VOLUME";
	json_object_set_member(pJsonObject, cURRENT_MONTH_VOLUMEKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTMONTHVOLUMEBUY();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_MONTH_VOLUME_BUYKey = "CURRENT_MONTH_VOLUME_BUY";
	json_object_set_member(pJsonObject, cURRENT_MONTH_VOLUME_BUYKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTMONTHVOLUMESELL();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_MONTH_VOLUME_SELLKey = "CURRENT_MONTH_VOLUME_SELL";
	json_object_set_member(pJsonObject, cURRENT_MONTH_VOLUME_SELLKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTMONTHVOLUMEUNKNOWN();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_MONTH_VOLUME_UNKNOWNKey = "CURRENT_MONTH_VOLUME_UNKNOWN";
	json_object_set_member(pJsonObject, cURRENT_MONTH_VOLUME_UNKNOWNKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTWEEKHIGH();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_WEEK_HIGHKey = "CURRENT_WEEK_HIGH";
	json_object_set_member(pJsonObject, cURRENT_WEEK_HIGHKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTWEEKLOW();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_WEEK_LOWKey = "CURRENT_WEEK_LOW";
	json_object_set_member(pJsonObject, cURRENT_WEEK_LOWKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTWEEKOPEN();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_WEEK_OPENKey = "CURRENT_WEEK_OPEN";
	json_object_set_member(pJsonObject, cURRENT_WEEK_OPENKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTWEEKQUOTEVOLUME();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_WEEK_QUOTE_VOLUMEKey = "CURRENT_WEEK_QUOTE_VOLUME";
	json_object_set_member(pJsonObject, cURRENT_WEEK_QUOTE_VOLUMEKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTWEEKQUOTEVOLUMEBUY();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_WEEK_QUOTE_VOLUME_BUYKey = "CURRENT_WEEK_QUOTE_VOLUME_BUY";
	json_object_set_member(pJsonObject, cURRENT_WEEK_QUOTE_VOLUME_BUYKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTWEEKQUOTEVOLUMESELL();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_WEEK_QUOTE_VOLUME_SELLKey = "CURRENT_WEEK_QUOTE_VOLUME_SELL";
	json_object_set_member(pJsonObject, cURRENT_WEEK_QUOTE_VOLUME_SELLKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTWEEKQUOTEVOLUMEUNKNOWN();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_WEEK_QUOTE_VOLUME_UNKNOWNKey = "CURRENT_WEEK_QUOTE_VOLUME_UNKNOWN";
	json_object_set_member(pJsonObject, cURRENT_WEEK_QUOTE_VOLUME_UNKNOWNKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTWEEKTOTALTRADES();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_WEEK_TOTAL_TRADESKey = "CURRENT_WEEK_TOTAL_TRADES";
	json_object_set_member(pJsonObject, cURRENT_WEEK_TOTAL_TRADESKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTWEEKTOTALTRADESBUY();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_WEEK_TOTAL_TRADES_BUYKey = "CURRENT_WEEK_TOTAL_TRADES_BUY";
	json_object_set_member(pJsonObject, cURRENT_WEEK_TOTAL_TRADES_BUYKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTWEEKTOTALTRADESSELL();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_WEEK_TOTAL_TRADES_SELLKey = "CURRENT_WEEK_TOTAL_TRADES_SELL";
	json_object_set_member(pJsonObject, cURRENT_WEEK_TOTAL_TRADES_SELLKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTWEEKTOTALTRADESUNKNOWN();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_WEEK_TOTAL_TRADES_UNKNOWNKey = "CURRENT_WEEK_TOTAL_TRADES_UNKNOWN";
	json_object_set_member(pJsonObject, cURRENT_WEEK_TOTAL_TRADES_UNKNOWNKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTWEEKVOLUME();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_WEEK_VOLUMEKey = "CURRENT_WEEK_VOLUME";
	json_object_set_member(pJsonObject, cURRENT_WEEK_VOLUMEKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTWEEKVOLUMEBUY();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_WEEK_VOLUME_BUYKey = "CURRENT_WEEK_VOLUME_BUY";
	json_object_set_member(pJsonObject, cURRENT_WEEK_VOLUME_BUYKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTWEEKVOLUMESELL();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_WEEK_VOLUME_SELLKey = "CURRENT_WEEK_VOLUME_SELL";
	json_object_set_member(pJsonObject, cURRENT_WEEK_VOLUME_SELLKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTWEEKVOLUMEUNKNOWN();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_WEEK_VOLUME_UNKNOWNKey = "CURRENT_WEEK_VOLUME_UNKNOWN";
	json_object_set_member(pJsonObject, cURRENT_WEEK_VOLUME_UNKNOWNKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTYEARHIGH();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_YEAR_HIGHKey = "CURRENT_YEAR_HIGH";
	json_object_set_member(pJsonObject, cURRENT_YEAR_HIGHKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTYEARLOW();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_YEAR_LOWKey = "CURRENT_YEAR_LOW";
	json_object_set_member(pJsonObject, cURRENT_YEAR_LOWKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTYEAROPEN();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_YEAR_OPENKey = "CURRENT_YEAR_OPEN";
	json_object_set_member(pJsonObject, cURRENT_YEAR_OPENKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTYEARQUOTEVOLUME();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_YEAR_QUOTE_VOLUMEKey = "CURRENT_YEAR_QUOTE_VOLUME";
	json_object_set_member(pJsonObject, cURRENT_YEAR_QUOTE_VOLUMEKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTYEARQUOTEVOLUMEBUY();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_YEAR_QUOTE_VOLUME_BUYKey = "CURRENT_YEAR_QUOTE_VOLUME_BUY";
	json_object_set_member(pJsonObject, cURRENT_YEAR_QUOTE_VOLUME_BUYKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTYEARQUOTEVOLUMESELL();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_YEAR_QUOTE_VOLUME_SELLKey = "CURRENT_YEAR_QUOTE_VOLUME_SELL";
	json_object_set_member(pJsonObject, cURRENT_YEAR_QUOTE_VOLUME_SELLKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTYEARQUOTEVOLUMEUNKNOWN();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_YEAR_QUOTE_VOLUME_UNKNOWNKey = "CURRENT_YEAR_QUOTE_VOLUME_UNKNOWN";
	json_object_set_member(pJsonObject, cURRENT_YEAR_QUOTE_VOLUME_UNKNOWNKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTYEARTOTALTRADES();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_YEAR_TOTAL_TRADESKey = "CURRENT_YEAR_TOTAL_TRADES";
	json_object_set_member(pJsonObject, cURRENT_YEAR_TOTAL_TRADESKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTYEARTOTALTRADESBUY();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_YEAR_TOTAL_TRADES_BUYKey = "CURRENT_YEAR_TOTAL_TRADES_BUY";
	json_object_set_member(pJsonObject, cURRENT_YEAR_TOTAL_TRADES_BUYKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTYEARTOTALTRADESSELL();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_YEAR_TOTAL_TRADES_SELLKey = "CURRENT_YEAR_TOTAL_TRADES_SELL";
	json_object_set_member(pJsonObject, cURRENT_YEAR_TOTAL_TRADES_SELLKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTYEARTOTALTRADESUNKNOWN();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_YEAR_TOTAL_TRADES_UNKNOWNKey = "CURRENT_YEAR_TOTAL_TRADES_UNKNOWN";
	json_object_set_member(pJsonObject, cURRENT_YEAR_TOTAL_TRADES_UNKNOWNKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTYEARVOLUME();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_YEAR_VOLUMEKey = "CURRENT_YEAR_VOLUME";
	json_object_set_member(pJsonObject, cURRENT_YEAR_VOLUMEKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTYEARVOLUMEBUY();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_YEAR_VOLUME_BUYKey = "CURRENT_YEAR_VOLUME_BUY";
	json_object_set_member(pJsonObject, cURRENT_YEAR_VOLUME_BUYKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTYEARVOLUMESELL();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_YEAR_VOLUME_SELLKey = "CURRENT_YEAR_VOLUME_SELL";
	json_object_set_member(pJsonObject, cURRENT_YEAR_VOLUME_SELLKey, node);
	if (isprimitive("int")) {
		int obj = getCURRENTYEARVOLUMEUNKNOWN();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *cURRENT_YEAR_VOLUME_UNKNOWNKey = "CURRENT_YEAR_VOLUME_UNKNOWN";
	json_object_set_member(pJsonObject, cURRENT_YEAR_VOLUME_UNKNOWNKey, node);
	if (isprimitive("std::string")) {
		std::string obj = getINSTRUMENT();
		node = converttoJson(&obj, "std::string", "");
	}
	else {
		
	}
	const gchar *iNSTRUMENTKey = "INSTRUMENT";
	json_object_set_member(pJsonObject, iNSTRUMENTKey, node);
	if (isprimitive("std::string")) {
		std::string obj = getLASTPROCESSEDTRADECCSEQ();
		node = converttoJson(&obj, "std::string", "");
	}
	else {
		
	}
	const gchar *lAST_PROCESSED_TRADE_CCSEQKey = "LAST_PROCESSED_TRADE_CCSEQ";
	json_object_set_member(pJsonObject, lAST_PROCESSED_TRADE_CCSEQKey, node);
	if (isprimitive("int")) {
		int obj = getLASTPROCESSEDTRADEPRICE();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *lAST_PROCESSED_TRADE_PRICEKey = "LAST_PROCESSED_TRADE_PRICE";
	json_object_set_member(pJsonObject, lAST_PROCESSED_TRADE_PRICEKey, node);
	if (isprimitive("int")) {
		int obj = getLASTPROCESSEDTRADEQUANTITY();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *lAST_PROCESSED_TRADE_QUANTITYKey = "LAST_PROCESSED_TRADE_QUANTITY";
	json_object_set_member(pJsonObject, lAST_PROCESSED_TRADE_QUANTITYKey, node);
	if (isprimitive("int")) {
		int obj = getLASTPROCESSEDTRADEQUOTEQUANTITY();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *lAST_PROCESSED_TRADE_QUOTE_QUANTITYKey = "LAST_PROCESSED_TRADE_QUOTE_QUANTITY";
	json_object_set_member(pJsonObject, lAST_PROCESSED_TRADE_QUOTE_QUANTITYKey, node);
	if (isprimitive("std::string")) {
		std::string obj = getLASTPROCESSEDTRADESIDE();
		node = converttoJson(&obj, "std::string", "");
	}
	else {
		
	}
	const gchar *lAST_PROCESSED_TRADE_SIDEKey = "LAST_PROCESSED_TRADE_SIDE";
	json_object_set_member(pJsonObject, lAST_PROCESSED_TRADE_SIDEKey, node);
	if (isprimitive("int")) {
		int obj = getLASTPROCESSEDTRADETS();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *lAST_PROCESSED_TRADE_TSKey = "LAST_PROCESSED_TRADE_TS";
	json_object_set_member(pJsonObject, lAST_PROCESSED_TRADE_TSKey, node);
	if (isprimitive("std::string")) {
		std::string obj = getLASTTRADECCSEQ();
		node = converttoJson(&obj, "std::string", "");
	}
	else {
		
	}
	const gchar *lAST_TRADE_CCSEQKey = "LAST_TRADE_CCSEQ";
	json_object_set_member(pJsonObject, lAST_TRADE_CCSEQKey, node);
	if (isprimitive("std::string")) {
		std::string obj = getLASTTRADEID();
		node = converttoJson(&obj, "std::string", "");
	}
	else {
		
	}
	const gchar *lAST_TRADE_IDKey = "LAST_TRADE_ID";
	json_object_set_member(pJsonObject, lAST_TRADE_IDKey, node);
	if (isprimitive("int")) {
		int obj = getLASTTRADEQUANTITY();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *lAST_TRADE_QUANTITYKey = "LAST_TRADE_QUANTITY";
	json_object_set_member(pJsonObject, lAST_TRADE_QUANTITYKey, node);
	if (isprimitive("int")) {
		int obj = getLASTTRADEQUOTEQUANTITY();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *lAST_TRADE_QUOTE_QUANTITYKey = "LAST_TRADE_QUOTE_QUANTITY";
	json_object_set_member(pJsonObject, lAST_TRADE_QUOTE_QUANTITYKey, node);
	if (isprimitive("std::string")) {
		std::string obj = getLASTTRADESIDE();
		node = converttoJson(&obj, "std::string", "");
	}
	else {
		
	}
	const gchar *lAST_TRADE_SIDEKey = "LAST_TRADE_SIDE";
	json_object_set_member(pJsonObject, lAST_TRADE_SIDEKey, node);
	if (isprimitive("int")) {
		int obj = getLIFETIMEFIRSTTRADETS();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *lIFETIME_FIRST_TRADE_TSKey = "LIFETIME_FIRST_TRADE_TS";
	json_object_set_member(pJsonObject, lIFETIME_FIRST_TRADE_TSKey, node);
	if (isprimitive("int")) {
		int obj = getLIFETIMEHIGH();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *lIFETIME_HIGHKey = "LIFETIME_HIGH";
	json_object_set_member(pJsonObject, lIFETIME_HIGHKey, node);
	if (isprimitive("int")) {
		int obj = getLIFETIMEHIGHTS();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *lIFETIME_HIGH_TSKey = "LIFETIME_HIGH_TS";
	json_object_set_member(pJsonObject, lIFETIME_HIGH_TSKey, node);
	if (isprimitive("int")) {
		int obj = getLIFETIMELOW();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *lIFETIME_LOWKey = "LIFETIME_LOW";
	json_object_set_member(pJsonObject, lIFETIME_LOWKey, node);
	if (isprimitive("int")) {
		int obj = getLIFETIMELOWTS();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *lIFETIME_LOW_TSKey = "LIFETIME_LOW_TS";
	json_object_set_member(pJsonObject, lIFETIME_LOW_TSKey, node);
	if (isprimitive("int")) {
		int obj = getLIFETIMEOPEN();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *lIFETIME_OPENKey = "LIFETIME_OPEN";
	json_object_set_member(pJsonObject, lIFETIME_OPENKey, node);
	if (isprimitive("int")) {
		int obj = getLIFETIMEQUOTEVOLUME();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *lIFETIME_QUOTE_VOLUMEKey = "LIFETIME_QUOTE_VOLUME";
	json_object_set_member(pJsonObject, lIFETIME_QUOTE_VOLUMEKey, node);
	if (isprimitive("int")) {
		int obj = getLIFETIMEQUOTEVOLUMEBUY();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *lIFETIME_QUOTE_VOLUME_BUYKey = "LIFETIME_QUOTE_VOLUME_BUY";
	json_object_set_member(pJsonObject, lIFETIME_QUOTE_VOLUME_BUYKey, node);
	if (isprimitive("int")) {
		int obj = getLIFETIMEQUOTEVOLUMESELL();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *lIFETIME_QUOTE_VOLUME_SELLKey = "LIFETIME_QUOTE_VOLUME_SELL";
	json_object_set_member(pJsonObject, lIFETIME_QUOTE_VOLUME_SELLKey, node);
	if (isprimitive("int")) {
		int obj = getLIFETIMEQUOTEVOLUMEUNKNOWN();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *lIFETIME_QUOTE_VOLUME_UNKNOWNKey = "LIFETIME_QUOTE_VOLUME_UNKNOWN";
	json_object_set_member(pJsonObject, lIFETIME_QUOTE_VOLUME_UNKNOWNKey, node);
	if (isprimitive("int")) {
		int obj = getLIFETIMETOTALTRADES();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *lIFETIME_TOTAL_TRADESKey = "LIFETIME_TOTAL_TRADES";
	json_object_set_member(pJsonObject, lIFETIME_TOTAL_TRADESKey, node);
	if (isprimitive("int")) {
		int obj = getLIFETIMETOTALTRADESBUY();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *lIFETIME_TOTAL_TRADES_BUYKey = "LIFETIME_TOTAL_TRADES_BUY";
	json_object_set_member(pJsonObject, lIFETIME_TOTAL_TRADES_BUYKey, node);
	if (isprimitive("int")) {
		int obj = getLIFETIMETOTALTRADESSELL();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *lIFETIME_TOTAL_TRADES_SELLKey = "LIFETIME_TOTAL_TRADES_SELL";
	json_object_set_member(pJsonObject, lIFETIME_TOTAL_TRADES_SELLKey, node);
	if (isprimitive("int")) {
		int obj = getLIFETIMETOTALTRADESUNKNOWN();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *lIFETIME_TOTAL_TRADES_UNKNOWNKey = "LIFETIME_TOTAL_TRADES_UNKNOWN";
	json_object_set_member(pJsonObject, lIFETIME_TOTAL_TRADES_UNKNOWNKey, node);
	if (isprimitive("int")) {
		int obj = getLIFETIMEVOLUME();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *lIFETIME_VOLUMEKey = "LIFETIME_VOLUME";
	json_object_set_member(pJsonObject, lIFETIME_VOLUMEKey, node);
	if (isprimitive("int")) {
		int obj = getLIFETIMEVOLUMEBUY();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *lIFETIME_VOLUME_BUYKey = "LIFETIME_VOLUME_BUY";
	json_object_set_member(pJsonObject, lIFETIME_VOLUME_BUYKey, node);
	if (isprimitive("int")) {
		int obj = getLIFETIMEVOLUMESELL();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *lIFETIME_VOLUME_SELLKey = "LIFETIME_VOLUME_SELL";
	json_object_set_member(pJsonObject, lIFETIME_VOLUME_SELLKey, node);
	if (isprimitive("int")) {
		int obj = getLIFETIMEVOLUMEUNKNOWN();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *lIFETIME_VOLUME_UNKNOWNKey = "LIFETIME_VOLUME_UNKNOWN";
	json_object_set_member(pJsonObject, lIFETIME_VOLUME_UNKNOWNKey, node);
	if (isprimitive("std::string")) {
		std::string obj = getMAPPEDINSTRUMENT();
		node = converttoJson(&obj, "std::string", "");
	}
	else {
		
	}
	const gchar *mAPPED_INSTRUMENTKey = "MAPPED_INSTRUMENT";
	json_object_set_member(pJsonObject, mAPPED_INSTRUMENTKey, node);
	if (isprimitive("std::string")) {
		std::string obj = getMARKET();
		node = converttoJson(&obj, "std::string", "");
	}
	else {
		
	}
	const gchar *mARKETKey = "MARKET";
	json_object_set_member(pJsonObject, mARKETKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING180DAYHIGH();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_180_DAY_HIGHKey = "MOVING_180_DAY_HIGH";
	json_object_set_member(pJsonObject, mOVING_180_DAY_HIGHKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING180DAYLOW();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_180_DAY_LOWKey = "MOVING_180_DAY_LOW";
	json_object_set_member(pJsonObject, mOVING_180_DAY_LOWKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING180DAYOPEN();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_180_DAY_OPENKey = "MOVING_180_DAY_OPEN";
	json_object_set_member(pJsonObject, mOVING_180_DAY_OPENKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING180DAYQUOTEVOLUME();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_180_DAY_QUOTE_VOLUMEKey = "MOVING_180_DAY_QUOTE_VOLUME";
	json_object_set_member(pJsonObject, mOVING_180_DAY_QUOTE_VOLUMEKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING180DAYQUOTEVOLUMEBUY();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_180_DAY_QUOTE_VOLUME_BUYKey = "MOVING_180_DAY_QUOTE_VOLUME_BUY";
	json_object_set_member(pJsonObject, mOVING_180_DAY_QUOTE_VOLUME_BUYKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING180DAYQUOTEVOLUMESELL();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_180_DAY_QUOTE_VOLUME_SELLKey = "MOVING_180_DAY_QUOTE_VOLUME_SELL";
	json_object_set_member(pJsonObject, mOVING_180_DAY_QUOTE_VOLUME_SELLKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING180DAYQUOTEVOLUMEUNKNOWN();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_180_DAY_QUOTE_VOLUME_UNKNOWNKey = "MOVING_180_DAY_QUOTE_VOLUME_UNKNOWN";
	json_object_set_member(pJsonObject, mOVING_180_DAY_QUOTE_VOLUME_UNKNOWNKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING180DAYTOTALTRADES();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_180_DAY_TOTAL_TRADESKey = "MOVING_180_DAY_TOTAL_TRADES";
	json_object_set_member(pJsonObject, mOVING_180_DAY_TOTAL_TRADESKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING180DAYTOTALTRADESBUY();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_180_DAY_TOTAL_TRADES_BUYKey = "MOVING_180_DAY_TOTAL_TRADES_BUY";
	json_object_set_member(pJsonObject, mOVING_180_DAY_TOTAL_TRADES_BUYKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING180DAYTOTALTRADESSELL();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_180_DAY_TOTAL_TRADES_SELLKey = "MOVING_180_DAY_TOTAL_TRADES_SELL";
	json_object_set_member(pJsonObject, mOVING_180_DAY_TOTAL_TRADES_SELLKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING180DAYTOTALTRADESUNKNOWN();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_180_DAY_TOTAL_TRADES_UNKNOWNKey = "MOVING_180_DAY_TOTAL_TRADES_UNKNOWN";
	json_object_set_member(pJsonObject, mOVING_180_DAY_TOTAL_TRADES_UNKNOWNKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING180DAYVOLUME();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_180_DAY_VOLUMEKey = "MOVING_180_DAY_VOLUME";
	json_object_set_member(pJsonObject, mOVING_180_DAY_VOLUMEKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING180DAYVOLUMEBUY();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_180_DAY_VOLUME_BUYKey = "MOVING_180_DAY_VOLUME_BUY";
	json_object_set_member(pJsonObject, mOVING_180_DAY_VOLUME_BUYKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING180DAYVOLUMESELL();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_180_DAY_VOLUME_SELLKey = "MOVING_180_DAY_VOLUME_SELL";
	json_object_set_member(pJsonObject, mOVING_180_DAY_VOLUME_SELLKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING180DAYVOLUMEUNKNOWN();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_180_DAY_VOLUME_UNKNOWNKey = "MOVING_180_DAY_VOLUME_UNKNOWN";
	json_object_set_member(pJsonObject, mOVING_180_DAY_VOLUME_UNKNOWNKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING24HOURHIGH();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_24_HOUR_HIGHKey = "MOVING_24_HOUR_HIGH";
	json_object_set_member(pJsonObject, mOVING_24_HOUR_HIGHKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING24HOURLOW();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_24_HOUR_LOWKey = "MOVING_24_HOUR_LOW";
	json_object_set_member(pJsonObject, mOVING_24_HOUR_LOWKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING24HOUROPEN();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_24_HOUR_OPENKey = "MOVING_24_HOUR_OPEN";
	json_object_set_member(pJsonObject, mOVING_24_HOUR_OPENKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING24HOURQUOTEVOLUME();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_24_HOUR_QUOTE_VOLUMEKey = "MOVING_24_HOUR_QUOTE_VOLUME";
	json_object_set_member(pJsonObject, mOVING_24_HOUR_QUOTE_VOLUMEKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING24HOURQUOTEVOLUMEBUY();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_24_HOUR_QUOTE_VOLUME_BUYKey = "MOVING_24_HOUR_QUOTE_VOLUME_BUY";
	json_object_set_member(pJsonObject, mOVING_24_HOUR_QUOTE_VOLUME_BUYKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING24HOURQUOTEVOLUMESELL();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_24_HOUR_QUOTE_VOLUME_SELLKey = "MOVING_24_HOUR_QUOTE_VOLUME_SELL";
	json_object_set_member(pJsonObject, mOVING_24_HOUR_QUOTE_VOLUME_SELLKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING24HOURQUOTEVOLUMEUNKNOWN();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_24_HOUR_QUOTE_VOLUME_UNKNOWNKey = "MOVING_24_HOUR_QUOTE_VOLUME_UNKNOWN";
	json_object_set_member(pJsonObject, mOVING_24_HOUR_QUOTE_VOLUME_UNKNOWNKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING24HOURTOTALTRADES();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_24_HOUR_TOTAL_TRADESKey = "MOVING_24_HOUR_TOTAL_TRADES";
	json_object_set_member(pJsonObject, mOVING_24_HOUR_TOTAL_TRADESKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING24HOURTOTALTRADESBUY();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_24_HOUR_TOTAL_TRADES_BUYKey = "MOVING_24_HOUR_TOTAL_TRADES_BUY";
	json_object_set_member(pJsonObject, mOVING_24_HOUR_TOTAL_TRADES_BUYKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING24HOURTOTALTRADESSELL();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_24_HOUR_TOTAL_TRADES_SELLKey = "MOVING_24_HOUR_TOTAL_TRADES_SELL";
	json_object_set_member(pJsonObject, mOVING_24_HOUR_TOTAL_TRADES_SELLKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING24HOURTOTALTRADESUNKNOWN();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_24_HOUR_TOTAL_TRADES_UNKNOWNKey = "MOVING_24_HOUR_TOTAL_TRADES_UNKNOWN";
	json_object_set_member(pJsonObject, mOVING_24_HOUR_TOTAL_TRADES_UNKNOWNKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING24HOURVOLUME();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_24_HOUR_VOLUMEKey = "MOVING_24_HOUR_VOLUME";
	json_object_set_member(pJsonObject, mOVING_24_HOUR_VOLUMEKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING24HOURVOLUMEBUY();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_24_HOUR_VOLUME_BUYKey = "MOVING_24_HOUR_VOLUME_BUY";
	json_object_set_member(pJsonObject, mOVING_24_HOUR_VOLUME_BUYKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING24HOURVOLUMESELL();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_24_HOUR_VOLUME_SELLKey = "MOVING_24_HOUR_VOLUME_SELL";
	json_object_set_member(pJsonObject, mOVING_24_HOUR_VOLUME_SELLKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING24HOURVOLUMEUNKNOWN();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_24_HOUR_VOLUME_UNKNOWNKey = "MOVING_24_HOUR_VOLUME_UNKNOWN";
	json_object_set_member(pJsonObject, mOVING_24_HOUR_VOLUME_UNKNOWNKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING30DAYHIGH();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_30_DAY_HIGHKey = "MOVING_30_DAY_HIGH";
	json_object_set_member(pJsonObject, mOVING_30_DAY_HIGHKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING30DAYLOW();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_30_DAY_LOWKey = "MOVING_30_DAY_LOW";
	json_object_set_member(pJsonObject, mOVING_30_DAY_LOWKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING30DAYOPEN();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_30_DAY_OPENKey = "MOVING_30_DAY_OPEN";
	json_object_set_member(pJsonObject, mOVING_30_DAY_OPENKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING30DAYQUOTEVOLUME();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_30_DAY_QUOTE_VOLUMEKey = "MOVING_30_DAY_QUOTE_VOLUME";
	json_object_set_member(pJsonObject, mOVING_30_DAY_QUOTE_VOLUMEKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING30DAYQUOTEVOLUMEBUY();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_30_DAY_QUOTE_VOLUME_BUYKey = "MOVING_30_DAY_QUOTE_VOLUME_BUY";
	json_object_set_member(pJsonObject, mOVING_30_DAY_QUOTE_VOLUME_BUYKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING30DAYQUOTEVOLUMESELL();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_30_DAY_QUOTE_VOLUME_SELLKey = "MOVING_30_DAY_QUOTE_VOLUME_SELL";
	json_object_set_member(pJsonObject, mOVING_30_DAY_QUOTE_VOLUME_SELLKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING30DAYQUOTEVOLUMEUNKNOWN();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_30_DAY_QUOTE_VOLUME_UNKNOWNKey = "MOVING_30_DAY_QUOTE_VOLUME_UNKNOWN";
	json_object_set_member(pJsonObject, mOVING_30_DAY_QUOTE_VOLUME_UNKNOWNKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING30DAYTOTALTRADES();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_30_DAY_TOTAL_TRADESKey = "MOVING_30_DAY_TOTAL_TRADES";
	json_object_set_member(pJsonObject, mOVING_30_DAY_TOTAL_TRADESKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING30DAYTOTALTRADESBUY();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_30_DAY_TOTAL_TRADES_BUYKey = "MOVING_30_DAY_TOTAL_TRADES_BUY";
	json_object_set_member(pJsonObject, mOVING_30_DAY_TOTAL_TRADES_BUYKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING30DAYTOTALTRADESSELL();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_30_DAY_TOTAL_TRADES_SELLKey = "MOVING_30_DAY_TOTAL_TRADES_SELL";
	json_object_set_member(pJsonObject, mOVING_30_DAY_TOTAL_TRADES_SELLKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING30DAYTOTALTRADESUNKNOWN();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_30_DAY_TOTAL_TRADES_UNKNOWNKey = "MOVING_30_DAY_TOTAL_TRADES_UNKNOWN";
	json_object_set_member(pJsonObject, mOVING_30_DAY_TOTAL_TRADES_UNKNOWNKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING30DAYVOLUME();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_30_DAY_VOLUMEKey = "MOVING_30_DAY_VOLUME";
	json_object_set_member(pJsonObject, mOVING_30_DAY_VOLUMEKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING30DAYVOLUMEBUY();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_30_DAY_VOLUME_BUYKey = "MOVING_30_DAY_VOLUME_BUY";
	json_object_set_member(pJsonObject, mOVING_30_DAY_VOLUME_BUYKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING30DAYVOLUMESELL();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_30_DAY_VOLUME_SELLKey = "MOVING_30_DAY_VOLUME_SELL";
	json_object_set_member(pJsonObject, mOVING_30_DAY_VOLUME_SELLKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING30DAYVOLUMEUNKNOWN();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_30_DAY_VOLUME_UNKNOWNKey = "MOVING_30_DAY_VOLUME_UNKNOWN";
	json_object_set_member(pJsonObject, mOVING_30_DAY_VOLUME_UNKNOWNKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING365DAYHIGH();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_365_DAY_HIGHKey = "MOVING_365_DAY_HIGH";
	json_object_set_member(pJsonObject, mOVING_365_DAY_HIGHKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING365DAYLOW();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_365_DAY_LOWKey = "MOVING_365_DAY_LOW";
	json_object_set_member(pJsonObject, mOVING_365_DAY_LOWKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING365DAYOPEN();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_365_DAY_OPENKey = "MOVING_365_DAY_OPEN";
	json_object_set_member(pJsonObject, mOVING_365_DAY_OPENKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING365DAYQUOTEVOLUME();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_365_DAY_QUOTE_VOLUMEKey = "MOVING_365_DAY_QUOTE_VOLUME";
	json_object_set_member(pJsonObject, mOVING_365_DAY_QUOTE_VOLUMEKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING365DAYQUOTEVOLUMEBUY();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_365_DAY_QUOTE_VOLUME_BUYKey = "MOVING_365_DAY_QUOTE_VOLUME_BUY";
	json_object_set_member(pJsonObject, mOVING_365_DAY_QUOTE_VOLUME_BUYKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING365DAYQUOTEVOLUMESELL();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_365_DAY_QUOTE_VOLUME_SELLKey = "MOVING_365_DAY_QUOTE_VOLUME_SELL";
	json_object_set_member(pJsonObject, mOVING_365_DAY_QUOTE_VOLUME_SELLKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING365DAYQUOTEVOLUMEUNKNOWN();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_365_DAY_QUOTE_VOLUME_UNKNOWNKey = "MOVING_365_DAY_QUOTE_VOLUME_UNKNOWN";
	json_object_set_member(pJsonObject, mOVING_365_DAY_QUOTE_VOLUME_UNKNOWNKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING365DAYTOTALTRADES();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_365_DAY_TOTAL_TRADESKey = "MOVING_365_DAY_TOTAL_TRADES";
	json_object_set_member(pJsonObject, mOVING_365_DAY_TOTAL_TRADESKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING365DAYTOTALTRADESBUY();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_365_DAY_TOTAL_TRADES_BUYKey = "MOVING_365_DAY_TOTAL_TRADES_BUY";
	json_object_set_member(pJsonObject, mOVING_365_DAY_TOTAL_TRADES_BUYKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING365DAYTOTALTRADESSELL();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_365_DAY_TOTAL_TRADES_SELLKey = "MOVING_365_DAY_TOTAL_TRADES_SELL";
	json_object_set_member(pJsonObject, mOVING_365_DAY_TOTAL_TRADES_SELLKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING365DAYTOTALTRADESUNKNOWN();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_365_DAY_TOTAL_TRADES_UNKNOWNKey = "MOVING_365_DAY_TOTAL_TRADES_UNKNOWN";
	json_object_set_member(pJsonObject, mOVING_365_DAY_TOTAL_TRADES_UNKNOWNKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING365DAYVOLUME();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_365_DAY_VOLUMEKey = "MOVING_365_DAY_VOLUME";
	json_object_set_member(pJsonObject, mOVING_365_DAY_VOLUMEKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING365DAYVOLUMEBUY();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_365_DAY_VOLUME_BUYKey = "MOVING_365_DAY_VOLUME_BUY";
	json_object_set_member(pJsonObject, mOVING_365_DAY_VOLUME_BUYKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING365DAYVOLUMESELL();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_365_DAY_VOLUME_SELLKey = "MOVING_365_DAY_VOLUME_SELL";
	json_object_set_member(pJsonObject, mOVING_365_DAY_VOLUME_SELLKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING365DAYVOLUMEUNKNOWN();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_365_DAY_VOLUME_UNKNOWNKey = "MOVING_365_DAY_VOLUME_UNKNOWN";
	json_object_set_member(pJsonObject, mOVING_365_DAY_VOLUME_UNKNOWNKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING7DAYHIGH();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_7_DAY_HIGHKey = "MOVING_7_DAY_HIGH";
	json_object_set_member(pJsonObject, mOVING_7_DAY_HIGHKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING7DAYLOW();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_7_DAY_LOWKey = "MOVING_7_DAY_LOW";
	json_object_set_member(pJsonObject, mOVING_7_DAY_LOWKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING7DAYOPEN();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_7_DAY_OPENKey = "MOVING_7_DAY_OPEN";
	json_object_set_member(pJsonObject, mOVING_7_DAY_OPENKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING7DAYQUOTEVOLUME();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_7_DAY_QUOTE_VOLUMEKey = "MOVING_7_DAY_QUOTE_VOLUME";
	json_object_set_member(pJsonObject, mOVING_7_DAY_QUOTE_VOLUMEKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING7DAYQUOTEVOLUMEBUY();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_7_DAY_QUOTE_VOLUME_BUYKey = "MOVING_7_DAY_QUOTE_VOLUME_BUY";
	json_object_set_member(pJsonObject, mOVING_7_DAY_QUOTE_VOLUME_BUYKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING7DAYQUOTEVOLUMESELL();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_7_DAY_QUOTE_VOLUME_SELLKey = "MOVING_7_DAY_QUOTE_VOLUME_SELL";
	json_object_set_member(pJsonObject, mOVING_7_DAY_QUOTE_VOLUME_SELLKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING7DAYQUOTEVOLUMEUNKNOWN();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_7_DAY_QUOTE_VOLUME_UNKNOWNKey = "MOVING_7_DAY_QUOTE_VOLUME_UNKNOWN";
	json_object_set_member(pJsonObject, mOVING_7_DAY_QUOTE_VOLUME_UNKNOWNKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING7DAYTOTALTRADES();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_7_DAY_TOTAL_TRADESKey = "MOVING_7_DAY_TOTAL_TRADES";
	json_object_set_member(pJsonObject, mOVING_7_DAY_TOTAL_TRADESKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING7DAYTOTALTRADESBUY();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_7_DAY_TOTAL_TRADES_BUYKey = "MOVING_7_DAY_TOTAL_TRADES_BUY";
	json_object_set_member(pJsonObject, mOVING_7_DAY_TOTAL_TRADES_BUYKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING7DAYTOTALTRADESSELL();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_7_DAY_TOTAL_TRADES_SELLKey = "MOVING_7_DAY_TOTAL_TRADES_SELL";
	json_object_set_member(pJsonObject, mOVING_7_DAY_TOTAL_TRADES_SELLKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING7DAYTOTALTRADESUNKNOWN();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_7_DAY_TOTAL_TRADES_UNKNOWNKey = "MOVING_7_DAY_TOTAL_TRADES_UNKNOWN";
	json_object_set_member(pJsonObject, mOVING_7_DAY_TOTAL_TRADES_UNKNOWNKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING7DAYVOLUME();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_7_DAY_VOLUMEKey = "MOVING_7_DAY_VOLUME";
	json_object_set_member(pJsonObject, mOVING_7_DAY_VOLUMEKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING7DAYVOLUMEBUY();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_7_DAY_VOLUME_BUYKey = "MOVING_7_DAY_VOLUME_BUY";
	json_object_set_member(pJsonObject, mOVING_7_DAY_VOLUME_BUYKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING7DAYVOLUMESELL();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_7_DAY_VOLUME_SELLKey = "MOVING_7_DAY_VOLUME_SELL";
	json_object_set_member(pJsonObject, mOVING_7_DAY_VOLUME_SELLKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING7DAYVOLUMEUNKNOWN();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_7_DAY_VOLUME_UNKNOWNKey = "MOVING_7_DAY_VOLUME_UNKNOWN";
	json_object_set_member(pJsonObject, mOVING_7_DAY_VOLUME_UNKNOWNKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING90DAYHIGH();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_90_DAY_HIGHKey = "MOVING_90_DAY_HIGH";
	json_object_set_member(pJsonObject, mOVING_90_DAY_HIGHKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING90DAYLOW();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_90_DAY_LOWKey = "MOVING_90_DAY_LOW";
	json_object_set_member(pJsonObject, mOVING_90_DAY_LOWKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING90DAYOPEN();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_90_DAY_OPENKey = "MOVING_90_DAY_OPEN";
	json_object_set_member(pJsonObject, mOVING_90_DAY_OPENKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING90DAYQUOTEVOLUME();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_90_DAY_QUOTE_VOLUMEKey = "MOVING_90_DAY_QUOTE_VOLUME";
	json_object_set_member(pJsonObject, mOVING_90_DAY_QUOTE_VOLUMEKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING90DAYQUOTEVOLUMEBUY();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_90_DAY_QUOTE_VOLUME_BUYKey = "MOVING_90_DAY_QUOTE_VOLUME_BUY";
	json_object_set_member(pJsonObject, mOVING_90_DAY_QUOTE_VOLUME_BUYKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING90DAYQUOTEVOLUMESELL();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_90_DAY_QUOTE_VOLUME_SELLKey = "MOVING_90_DAY_QUOTE_VOLUME_SELL";
	json_object_set_member(pJsonObject, mOVING_90_DAY_QUOTE_VOLUME_SELLKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING90DAYQUOTEVOLUMEUNKNOWN();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_90_DAY_QUOTE_VOLUME_UNKNOWNKey = "MOVING_90_DAY_QUOTE_VOLUME_UNKNOWN";
	json_object_set_member(pJsonObject, mOVING_90_DAY_QUOTE_VOLUME_UNKNOWNKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING90DAYTOTALTRADES();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_90_DAY_TOTAL_TRADESKey = "MOVING_90_DAY_TOTAL_TRADES";
	json_object_set_member(pJsonObject, mOVING_90_DAY_TOTAL_TRADESKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING90DAYTOTALTRADESBUY();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_90_DAY_TOTAL_TRADES_BUYKey = "MOVING_90_DAY_TOTAL_TRADES_BUY";
	json_object_set_member(pJsonObject, mOVING_90_DAY_TOTAL_TRADES_BUYKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING90DAYTOTALTRADESSELL();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_90_DAY_TOTAL_TRADES_SELLKey = "MOVING_90_DAY_TOTAL_TRADES_SELL";
	json_object_set_member(pJsonObject, mOVING_90_DAY_TOTAL_TRADES_SELLKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING90DAYTOTALTRADESUNKNOWN();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_90_DAY_TOTAL_TRADES_UNKNOWNKey = "MOVING_90_DAY_TOTAL_TRADES_UNKNOWN";
	json_object_set_member(pJsonObject, mOVING_90_DAY_TOTAL_TRADES_UNKNOWNKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING90DAYVOLUME();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_90_DAY_VOLUMEKey = "MOVING_90_DAY_VOLUME";
	json_object_set_member(pJsonObject, mOVING_90_DAY_VOLUMEKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING90DAYVOLUMEBUY();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_90_DAY_VOLUME_BUYKey = "MOVING_90_DAY_VOLUME_BUY";
	json_object_set_member(pJsonObject, mOVING_90_DAY_VOLUME_BUYKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING90DAYVOLUMESELL();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_90_DAY_VOLUME_SELLKey = "MOVING_90_DAY_VOLUME_SELL";
	json_object_set_member(pJsonObject, mOVING_90_DAY_VOLUME_SELLKey, node);
	if (isprimitive("int")) {
		int obj = getMOVING90DAYVOLUMEUNKNOWN();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *mOVING_90_DAY_VOLUME_UNKNOWNKey = "MOVING_90_DAY_VOLUME_UNKNOWN";
	json_object_set_member(pJsonObject, mOVING_90_DAY_VOLUME_UNKNOWNKey, node);
	if (isprimitive("int")) {
		int obj = getPRICE();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *pRICEKey = "PRICE";
	json_object_set_member(pJsonObject, pRICEKey, node);
	if (isprimitive("std::string")) {
		std::string obj = getPRICEFLAG();
		node = converttoJson(&obj, "std::string", "");
	}
	else {
		
	}
	const gchar *pRICE_FLAGKey = "PRICE_FLAG";
	json_object_set_member(pJsonObject, pRICE_FLAGKey, node);
	if (isprimitive("int")) {
		int obj = getPRICELASTUPDATETS();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *pRICE_LAST_UPDATE_TSKey = "PRICE_LAST_UPDATE_TS";
	json_object_set_member(pJsonObject, pRICE_LAST_UPDATE_TSKey, node);
	if (isprimitive("std::string")) {
		std::string obj = getQUOTE();
		node = converttoJson(&obj, "std::string", "");
	}
	else {
		
	}
	const gchar *qUOTEKey = "QUOTE";
	json_object_set_member(pJsonObject, qUOTEKey, node);
	if (isprimitive("int")) {
		int obj = getTOPASKLASTUPDATETS();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *tOP_ASK_LAST_UPDATE_TSKey = "TOP_ASK_LAST_UPDATE_TS";
	json_object_set_member(pJsonObject, tOP_ASK_LAST_UPDATE_TSKey, node);
	if (isprimitive("int")) {
		int obj = getTOPASKPRICE();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *tOP_ASK_PRICEKey = "TOP_ASK_PRICE";
	json_object_set_member(pJsonObject, tOP_ASK_PRICEKey, node);
	if (isprimitive("int")) {
		int obj = getTOPASKQUANTITY();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *tOP_ASK_QUANTITYKey = "TOP_ASK_QUANTITY";
	json_object_set_member(pJsonObject, tOP_ASK_QUANTITYKey, node);
	if (isprimitive("int")) {
		int obj = getTOPBIDLASTUPDATETS();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *tOP_BID_LAST_UPDATE_TSKey = "TOP_BID_LAST_UPDATE_TS";
	json_object_set_member(pJsonObject, tOP_BID_LAST_UPDATE_TSKey, node);
	if (isprimitive("int")) {
		int obj = getTOPBIDPRICE();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *tOP_BID_PRICEKey = "TOP_BID_PRICE";
	json_object_set_member(pJsonObject, tOP_BID_PRICEKey, node);
	if (isprimitive("int")) {
		int obj = getTOPBIDQUANTITY();
		node = converttoJson(&obj, "int", "");
	}
	else {
		
	}
	const gchar *tOP_BID_QUANTITYKey = "TOP_BID_QUANTITY";
	json_object_set_member(pJsonObject, tOP_BID_QUANTITYKey, node);
	if (isprimitive("std::string")) {
		std::string obj = getTYPE();
		node = converttoJson(&obj, "std::string", "");
	}
	else {
		
	}
	const gchar *tYPEKey = "TYPE";
	json_object_set_member(pJsonObject, tYPEKey, node);
	node = json_node_alloc();
	json_node_init(node, JSON_NODE_OBJECT);
	json_node_take_object(node, pJsonObject);
	char * ret = json_to_string(node, false);
	json_node_free(node);
	return ret;
}

std::string
SPOT_INSTRUMENT_MARKET_DATA::getBASE()
{
	return bASE;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setBASE(std::string  bASE)
{
	this->bASE = bASE;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCCSEQ()
{
	return cCSEQ;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCCSEQ(int  cCSEQ)
{
	this->cCSEQ = cCSEQ;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTDAYHIGH()
{
	return cURRENT_DAY_HIGH;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTDAYHIGH(int  cURRENT_DAY_HIGH)
{
	this->cURRENT_DAY_HIGH = cURRENT_DAY_HIGH;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTDAYLOW()
{
	return cURRENT_DAY_LOW;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTDAYLOW(int  cURRENT_DAY_LOW)
{
	this->cURRENT_DAY_LOW = cURRENT_DAY_LOW;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTDAYOPEN()
{
	return cURRENT_DAY_OPEN;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTDAYOPEN(int  cURRENT_DAY_OPEN)
{
	this->cURRENT_DAY_OPEN = cURRENT_DAY_OPEN;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTDAYQUOTEVOLUME()
{
	return cURRENT_DAY_QUOTE_VOLUME;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTDAYQUOTEVOLUME(int  cURRENT_DAY_QUOTE_VOLUME)
{
	this->cURRENT_DAY_QUOTE_VOLUME = cURRENT_DAY_QUOTE_VOLUME;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTDAYQUOTEVOLUMEBUY()
{
	return cURRENT_DAY_QUOTE_VOLUME_BUY;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTDAYQUOTEVOLUMEBUY(int  cURRENT_DAY_QUOTE_VOLUME_BUY)
{
	this->cURRENT_DAY_QUOTE_VOLUME_BUY = cURRENT_DAY_QUOTE_VOLUME_BUY;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTDAYQUOTEVOLUMESELL()
{
	return cURRENT_DAY_QUOTE_VOLUME_SELL;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTDAYQUOTEVOLUMESELL(int  cURRENT_DAY_QUOTE_VOLUME_SELL)
{
	this->cURRENT_DAY_QUOTE_VOLUME_SELL = cURRENT_DAY_QUOTE_VOLUME_SELL;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTDAYQUOTEVOLUMEUNKNOWN()
{
	return cURRENT_DAY_QUOTE_VOLUME_UNKNOWN;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTDAYQUOTEVOLUMEUNKNOWN(int  cURRENT_DAY_QUOTE_VOLUME_UNKNOWN)
{
	this->cURRENT_DAY_QUOTE_VOLUME_UNKNOWN = cURRENT_DAY_QUOTE_VOLUME_UNKNOWN;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTDAYTOTALTRADES()
{
	return cURRENT_DAY_TOTAL_TRADES;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTDAYTOTALTRADES(int  cURRENT_DAY_TOTAL_TRADES)
{
	this->cURRENT_DAY_TOTAL_TRADES = cURRENT_DAY_TOTAL_TRADES;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTDAYTOTALTRADESBUY()
{
	return cURRENT_DAY_TOTAL_TRADES_BUY;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTDAYTOTALTRADESBUY(int  cURRENT_DAY_TOTAL_TRADES_BUY)
{
	this->cURRENT_DAY_TOTAL_TRADES_BUY = cURRENT_DAY_TOTAL_TRADES_BUY;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTDAYTOTALTRADESSELL()
{
	return cURRENT_DAY_TOTAL_TRADES_SELL;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTDAYTOTALTRADESSELL(int  cURRENT_DAY_TOTAL_TRADES_SELL)
{
	this->cURRENT_DAY_TOTAL_TRADES_SELL = cURRENT_DAY_TOTAL_TRADES_SELL;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTDAYTOTALTRADESUNKNOWN()
{
	return cURRENT_DAY_TOTAL_TRADES_UNKNOWN;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTDAYTOTALTRADESUNKNOWN(int  cURRENT_DAY_TOTAL_TRADES_UNKNOWN)
{
	this->cURRENT_DAY_TOTAL_TRADES_UNKNOWN = cURRENT_DAY_TOTAL_TRADES_UNKNOWN;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTDAYVOLUME()
{
	return cURRENT_DAY_VOLUME;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTDAYVOLUME(int  cURRENT_DAY_VOLUME)
{
	this->cURRENT_DAY_VOLUME = cURRENT_DAY_VOLUME;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTDAYVOLUMEBUY()
{
	return cURRENT_DAY_VOLUME_BUY;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTDAYVOLUMEBUY(int  cURRENT_DAY_VOLUME_BUY)
{
	this->cURRENT_DAY_VOLUME_BUY = cURRENT_DAY_VOLUME_BUY;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTDAYVOLUMESELL()
{
	return cURRENT_DAY_VOLUME_SELL;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTDAYVOLUMESELL(int  cURRENT_DAY_VOLUME_SELL)
{
	this->cURRENT_DAY_VOLUME_SELL = cURRENT_DAY_VOLUME_SELL;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTDAYVOLUMEUNKNOWN()
{
	return cURRENT_DAY_VOLUME_UNKNOWN;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTDAYVOLUMEUNKNOWN(int  cURRENT_DAY_VOLUME_UNKNOWN)
{
	this->cURRENT_DAY_VOLUME_UNKNOWN = cURRENT_DAY_VOLUME_UNKNOWN;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTHOURHIGH()
{
	return cURRENT_HOUR_HIGH;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTHOURHIGH(int  cURRENT_HOUR_HIGH)
{
	this->cURRENT_HOUR_HIGH = cURRENT_HOUR_HIGH;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTHOURLOW()
{
	return cURRENT_HOUR_LOW;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTHOURLOW(int  cURRENT_HOUR_LOW)
{
	this->cURRENT_HOUR_LOW = cURRENT_HOUR_LOW;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTHOUROPEN()
{
	return cURRENT_HOUR_OPEN;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTHOUROPEN(int  cURRENT_HOUR_OPEN)
{
	this->cURRENT_HOUR_OPEN = cURRENT_HOUR_OPEN;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTHOURQUOTEVOLUME()
{
	return cURRENT_HOUR_QUOTE_VOLUME;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTHOURQUOTEVOLUME(int  cURRENT_HOUR_QUOTE_VOLUME)
{
	this->cURRENT_HOUR_QUOTE_VOLUME = cURRENT_HOUR_QUOTE_VOLUME;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTHOURQUOTEVOLUMEBUY()
{
	return cURRENT_HOUR_QUOTE_VOLUME_BUY;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTHOURQUOTEVOLUMEBUY(int  cURRENT_HOUR_QUOTE_VOLUME_BUY)
{
	this->cURRENT_HOUR_QUOTE_VOLUME_BUY = cURRENT_HOUR_QUOTE_VOLUME_BUY;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTHOURQUOTEVOLUMESELL()
{
	return cURRENT_HOUR_QUOTE_VOLUME_SELL;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTHOURQUOTEVOLUMESELL(int  cURRENT_HOUR_QUOTE_VOLUME_SELL)
{
	this->cURRENT_HOUR_QUOTE_VOLUME_SELL = cURRENT_HOUR_QUOTE_VOLUME_SELL;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTHOURQUOTEVOLUMEUNKNOWN()
{
	return cURRENT_HOUR_QUOTE_VOLUME_UNKNOWN;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTHOURQUOTEVOLUMEUNKNOWN(int  cURRENT_HOUR_QUOTE_VOLUME_UNKNOWN)
{
	this->cURRENT_HOUR_QUOTE_VOLUME_UNKNOWN = cURRENT_HOUR_QUOTE_VOLUME_UNKNOWN;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTHOURTOTALTRADES()
{
	return cURRENT_HOUR_TOTAL_TRADES;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTHOURTOTALTRADES(int  cURRENT_HOUR_TOTAL_TRADES)
{
	this->cURRENT_HOUR_TOTAL_TRADES = cURRENT_HOUR_TOTAL_TRADES;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTHOURTOTALTRADESBUY()
{
	return cURRENT_HOUR_TOTAL_TRADES_BUY;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTHOURTOTALTRADESBUY(int  cURRENT_HOUR_TOTAL_TRADES_BUY)
{
	this->cURRENT_HOUR_TOTAL_TRADES_BUY = cURRENT_HOUR_TOTAL_TRADES_BUY;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTHOURTOTALTRADESSELL()
{
	return cURRENT_HOUR_TOTAL_TRADES_SELL;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTHOURTOTALTRADESSELL(int  cURRENT_HOUR_TOTAL_TRADES_SELL)
{
	this->cURRENT_HOUR_TOTAL_TRADES_SELL = cURRENT_HOUR_TOTAL_TRADES_SELL;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTHOURTOTALTRADESUNKNOWN()
{
	return cURRENT_HOUR_TOTAL_TRADES_UNKNOWN;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTHOURTOTALTRADESUNKNOWN(int  cURRENT_HOUR_TOTAL_TRADES_UNKNOWN)
{
	this->cURRENT_HOUR_TOTAL_TRADES_UNKNOWN = cURRENT_HOUR_TOTAL_TRADES_UNKNOWN;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTHOURVOLUME()
{
	return cURRENT_HOUR_VOLUME;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTHOURVOLUME(int  cURRENT_HOUR_VOLUME)
{
	this->cURRENT_HOUR_VOLUME = cURRENT_HOUR_VOLUME;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTHOURVOLUMEBUY()
{
	return cURRENT_HOUR_VOLUME_BUY;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTHOURVOLUMEBUY(int  cURRENT_HOUR_VOLUME_BUY)
{
	this->cURRENT_HOUR_VOLUME_BUY = cURRENT_HOUR_VOLUME_BUY;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTHOURVOLUMESELL()
{
	return cURRENT_HOUR_VOLUME_SELL;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTHOURVOLUMESELL(int  cURRENT_HOUR_VOLUME_SELL)
{
	this->cURRENT_HOUR_VOLUME_SELL = cURRENT_HOUR_VOLUME_SELL;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTHOURVOLUMEUNKNOWN()
{
	return cURRENT_HOUR_VOLUME_UNKNOWN;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTHOURVOLUMEUNKNOWN(int  cURRENT_HOUR_VOLUME_UNKNOWN)
{
	this->cURRENT_HOUR_VOLUME_UNKNOWN = cURRENT_HOUR_VOLUME_UNKNOWN;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTMONTHHIGH()
{
	return cURRENT_MONTH_HIGH;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTMONTHHIGH(int  cURRENT_MONTH_HIGH)
{
	this->cURRENT_MONTH_HIGH = cURRENT_MONTH_HIGH;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTMONTHLOW()
{
	return cURRENT_MONTH_LOW;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTMONTHLOW(int  cURRENT_MONTH_LOW)
{
	this->cURRENT_MONTH_LOW = cURRENT_MONTH_LOW;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTMONTHOPEN()
{
	return cURRENT_MONTH_OPEN;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTMONTHOPEN(int  cURRENT_MONTH_OPEN)
{
	this->cURRENT_MONTH_OPEN = cURRENT_MONTH_OPEN;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTMONTHQUOTEVOLUME()
{
	return cURRENT_MONTH_QUOTE_VOLUME;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTMONTHQUOTEVOLUME(int  cURRENT_MONTH_QUOTE_VOLUME)
{
	this->cURRENT_MONTH_QUOTE_VOLUME = cURRENT_MONTH_QUOTE_VOLUME;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTMONTHQUOTEVOLUMEBUY()
{
	return cURRENT_MONTH_QUOTE_VOLUME_BUY;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTMONTHQUOTEVOLUMEBUY(int  cURRENT_MONTH_QUOTE_VOLUME_BUY)
{
	this->cURRENT_MONTH_QUOTE_VOLUME_BUY = cURRENT_MONTH_QUOTE_VOLUME_BUY;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTMONTHQUOTEVOLUMESELL()
{
	return cURRENT_MONTH_QUOTE_VOLUME_SELL;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTMONTHQUOTEVOLUMESELL(int  cURRENT_MONTH_QUOTE_VOLUME_SELL)
{
	this->cURRENT_MONTH_QUOTE_VOLUME_SELL = cURRENT_MONTH_QUOTE_VOLUME_SELL;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTMONTHQUOTEVOLUMEUNKNOWN()
{
	return cURRENT_MONTH_QUOTE_VOLUME_UNKNOWN;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTMONTHQUOTEVOLUMEUNKNOWN(int  cURRENT_MONTH_QUOTE_VOLUME_UNKNOWN)
{
	this->cURRENT_MONTH_QUOTE_VOLUME_UNKNOWN = cURRENT_MONTH_QUOTE_VOLUME_UNKNOWN;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTMONTHTOTALTRADES()
{
	return cURRENT_MONTH_TOTAL_TRADES;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTMONTHTOTALTRADES(int  cURRENT_MONTH_TOTAL_TRADES)
{
	this->cURRENT_MONTH_TOTAL_TRADES = cURRENT_MONTH_TOTAL_TRADES;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTMONTHTOTALTRADESBUY()
{
	return cURRENT_MONTH_TOTAL_TRADES_BUY;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTMONTHTOTALTRADESBUY(int  cURRENT_MONTH_TOTAL_TRADES_BUY)
{
	this->cURRENT_MONTH_TOTAL_TRADES_BUY = cURRENT_MONTH_TOTAL_TRADES_BUY;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTMONTHTOTALTRADESSELL()
{
	return cURRENT_MONTH_TOTAL_TRADES_SELL;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTMONTHTOTALTRADESSELL(int  cURRENT_MONTH_TOTAL_TRADES_SELL)
{
	this->cURRENT_MONTH_TOTAL_TRADES_SELL = cURRENT_MONTH_TOTAL_TRADES_SELL;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTMONTHTOTALTRADESUNKNOWN()
{
	return cURRENT_MONTH_TOTAL_TRADES_UNKNOWN;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTMONTHTOTALTRADESUNKNOWN(int  cURRENT_MONTH_TOTAL_TRADES_UNKNOWN)
{
	this->cURRENT_MONTH_TOTAL_TRADES_UNKNOWN = cURRENT_MONTH_TOTAL_TRADES_UNKNOWN;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTMONTHVOLUME()
{
	return cURRENT_MONTH_VOLUME;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTMONTHVOLUME(int  cURRENT_MONTH_VOLUME)
{
	this->cURRENT_MONTH_VOLUME = cURRENT_MONTH_VOLUME;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTMONTHVOLUMEBUY()
{
	return cURRENT_MONTH_VOLUME_BUY;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTMONTHVOLUMEBUY(int  cURRENT_MONTH_VOLUME_BUY)
{
	this->cURRENT_MONTH_VOLUME_BUY = cURRENT_MONTH_VOLUME_BUY;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTMONTHVOLUMESELL()
{
	return cURRENT_MONTH_VOLUME_SELL;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTMONTHVOLUMESELL(int  cURRENT_MONTH_VOLUME_SELL)
{
	this->cURRENT_MONTH_VOLUME_SELL = cURRENT_MONTH_VOLUME_SELL;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTMONTHVOLUMEUNKNOWN()
{
	return cURRENT_MONTH_VOLUME_UNKNOWN;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTMONTHVOLUMEUNKNOWN(int  cURRENT_MONTH_VOLUME_UNKNOWN)
{
	this->cURRENT_MONTH_VOLUME_UNKNOWN = cURRENT_MONTH_VOLUME_UNKNOWN;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTWEEKHIGH()
{
	return cURRENT_WEEK_HIGH;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTWEEKHIGH(int  cURRENT_WEEK_HIGH)
{
	this->cURRENT_WEEK_HIGH = cURRENT_WEEK_HIGH;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTWEEKLOW()
{
	return cURRENT_WEEK_LOW;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTWEEKLOW(int  cURRENT_WEEK_LOW)
{
	this->cURRENT_WEEK_LOW = cURRENT_WEEK_LOW;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTWEEKOPEN()
{
	return cURRENT_WEEK_OPEN;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTWEEKOPEN(int  cURRENT_WEEK_OPEN)
{
	this->cURRENT_WEEK_OPEN = cURRENT_WEEK_OPEN;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTWEEKQUOTEVOLUME()
{
	return cURRENT_WEEK_QUOTE_VOLUME;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTWEEKQUOTEVOLUME(int  cURRENT_WEEK_QUOTE_VOLUME)
{
	this->cURRENT_WEEK_QUOTE_VOLUME = cURRENT_WEEK_QUOTE_VOLUME;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTWEEKQUOTEVOLUMEBUY()
{
	return cURRENT_WEEK_QUOTE_VOLUME_BUY;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTWEEKQUOTEVOLUMEBUY(int  cURRENT_WEEK_QUOTE_VOLUME_BUY)
{
	this->cURRENT_WEEK_QUOTE_VOLUME_BUY = cURRENT_WEEK_QUOTE_VOLUME_BUY;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTWEEKQUOTEVOLUMESELL()
{
	return cURRENT_WEEK_QUOTE_VOLUME_SELL;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTWEEKQUOTEVOLUMESELL(int  cURRENT_WEEK_QUOTE_VOLUME_SELL)
{
	this->cURRENT_WEEK_QUOTE_VOLUME_SELL = cURRENT_WEEK_QUOTE_VOLUME_SELL;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTWEEKQUOTEVOLUMEUNKNOWN()
{
	return cURRENT_WEEK_QUOTE_VOLUME_UNKNOWN;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTWEEKQUOTEVOLUMEUNKNOWN(int  cURRENT_WEEK_QUOTE_VOLUME_UNKNOWN)
{
	this->cURRENT_WEEK_QUOTE_VOLUME_UNKNOWN = cURRENT_WEEK_QUOTE_VOLUME_UNKNOWN;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTWEEKTOTALTRADES()
{
	return cURRENT_WEEK_TOTAL_TRADES;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTWEEKTOTALTRADES(int  cURRENT_WEEK_TOTAL_TRADES)
{
	this->cURRENT_WEEK_TOTAL_TRADES = cURRENT_WEEK_TOTAL_TRADES;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTWEEKTOTALTRADESBUY()
{
	return cURRENT_WEEK_TOTAL_TRADES_BUY;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTWEEKTOTALTRADESBUY(int  cURRENT_WEEK_TOTAL_TRADES_BUY)
{
	this->cURRENT_WEEK_TOTAL_TRADES_BUY = cURRENT_WEEK_TOTAL_TRADES_BUY;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTWEEKTOTALTRADESSELL()
{
	return cURRENT_WEEK_TOTAL_TRADES_SELL;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTWEEKTOTALTRADESSELL(int  cURRENT_WEEK_TOTAL_TRADES_SELL)
{
	this->cURRENT_WEEK_TOTAL_TRADES_SELL = cURRENT_WEEK_TOTAL_TRADES_SELL;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTWEEKTOTALTRADESUNKNOWN()
{
	return cURRENT_WEEK_TOTAL_TRADES_UNKNOWN;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTWEEKTOTALTRADESUNKNOWN(int  cURRENT_WEEK_TOTAL_TRADES_UNKNOWN)
{
	this->cURRENT_WEEK_TOTAL_TRADES_UNKNOWN = cURRENT_WEEK_TOTAL_TRADES_UNKNOWN;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTWEEKVOLUME()
{
	return cURRENT_WEEK_VOLUME;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTWEEKVOLUME(int  cURRENT_WEEK_VOLUME)
{
	this->cURRENT_WEEK_VOLUME = cURRENT_WEEK_VOLUME;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTWEEKVOLUMEBUY()
{
	return cURRENT_WEEK_VOLUME_BUY;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTWEEKVOLUMEBUY(int  cURRENT_WEEK_VOLUME_BUY)
{
	this->cURRENT_WEEK_VOLUME_BUY = cURRENT_WEEK_VOLUME_BUY;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTWEEKVOLUMESELL()
{
	return cURRENT_WEEK_VOLUME_SELL;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTWEEKVOLUMESELL(int  cURRENT_WEEK_VOLUME_SELL)
{
	this->cURRENT_WEEK_VOLUME_SELL = cURRENT_WEEK_VOLUME_SELL;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTWEEKVOLUMEUNKNOWN()
{
	return cURRENT_WEEK_VOLUME_UNKNOWN;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTWEEKVOLUMEUNKNOWN(int  cURRENT_WEEK_VOLUME_UNKNOWN)
{
	this->cURRENT_WEEK_VOLUME_UNKNOWN = cURRENT_WEEK_VOLUME_UNKNOWN;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTYEARHIGH()
{
	return cURRENT_YEAR_HIGH;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTYEARHIGH(int  cURRENT_YEAR_HIGH)
{
	this->cURRENT_YEAR_HIGH = cURRENT_YEAR_HIGH;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTYEARLOW()
{
	return cURRENT_YEAR_LOW;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTYEARLOW(int  cURRENT_YEAR_LOW)
{
	this->cURRENT_YEAR_LOW = cURRENT_YEAR_LOW;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTYEAROPEN()
{
	return cURRENT_YEAR_OPEN;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTYEAROPEN(int  cURRENT_YEAR_OPEN)
{
	this->cURRENT_YEAR_OPEN = cURRENT_YEAR_OPEN;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTYEARQUOTEVOLUME()
{
	return cURRENT_YEAR_QUOTE_VOLUME;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTYEARQUOTEVOLUME(int  cURRENT_YEAR_QUOTE_VOLUME)
{
	this->cURRENT_YEAR_QUOTE_VOLUME = cURRENT_YEAR_QUOTE_VOLUME;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTYEARQUOTEVOLUMEBUY()
{
	return cURRENT_YEAR_QUOTE_VOLUME_BUY;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTYEARQUOTEVOLUMEBUY(int  cURRENT_YEAR_QUOTE_VOLUME_BUY)
{
	this->cURRENT_YEAR_QUOTE_VOLUME_BUY = cURRENT_YEAR_QUOTE_VOLUME_BUY;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTYEARQUOTEVOLUMESELL()
{
	return cURRENT_YEAR_QUOTE_VOLUME_SELL;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTYEARQUOTEVOLUMESELL(int  cURRENT_YEAR_QUOTE_VOLUME_SELL)
{
	this->cURRENT_YEAR_QUOTE_VOLUME_SELL = cURRENT_YEAR_QUOTE_VOLUME_SELL;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTYEARQUOTEVOLUMEUNKNOWN()
{
	return cURRENT_YEAR_QUOTE_VOLUME_UNKNOWN;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTYEARQUOTEVOLUMEUNKNOWN(int  cURRENT_YEAR_QUOTE_VOLUME_UNKNOWN)
{
	this->cURRENT_YEAR_QUOTE_VOLUME_UNKNOWN = cURRENT_YEAR_QUOTE_VOLUME_UNKNOWN;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTYEARTOTALTRADES()
{
	return cURRENT_YEAR_TOTAL_TRADES;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTYEARTOTALTRADES(int  cURRENT_YEAR_TOTAL_TRADES)
{
	this->cURRENT_YEAR_TOTAL_TRADES = cURRENT_YEAR_TOTAL_TRADES;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTYEARTOTALTRADESBUY()
{
	return cURRENT_YEAR_TOTAL_TRADES_BUY;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTYEARTOTALTRADESBUY(int  cURRENT_YEAR_TOTAL_TRADES_BUY)
{
	this->cURRENT_YEAR_TOTAL_TRADES_BUY = cURRENT_YEAR_TOTAL_TRADES_BUY;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTYEARTOTALTRADESSELL()
{
	return cURRENT_YEAR_TOTAL_TRADES_SELL;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTYEARTOTALTRADESSELL(int  cURRENT_YEAR_TOTAL_TRADES_SELL)
{
	this->cURRENT_YEAR_TOTAL_TRADES_SELL = cURRENT_YEAR_TOTAL_TRADES_SELL;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTYEARTOTALTRADESUNKNOWN()
{
	return cURRENT_YEAR_TOTAL_TRADES_UNKNOWN;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTYEARTOTALTRADESUNKNOWN(int  cURRENT_YEAR_TOTAL_TRADES_UNKNOWN)
{
	this->cURRENT_YEAR_TOTAL_TRADES_UNKNOWN = cURRENT_YEAR_TOTAL_TRADES_UNKNOWN;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTYEARVOLUME()
{
	return cURRENT_YEAR_VOLUME;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTYEARVOLUME(int  cURRENT_YEAR_VOLUME)
{
	this->cURRENT_YEAR_VOLUME = cURRENT_YEAR_VOLUME;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTYEARVOLUMEBUY()
{
	return cURRENT_YEAR_VOLUME_BUY;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTYEARVOLUMEBUY(int  cURRENT_YEAR_VOLUME_BUY)
{
	this->cURRENT_YEAR_VOLUME_BUY = cURRENT_YEAR_VOLUME_BUY;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTYEARVOLUMESELL()
{
	return cURRENT_YEAR_VOLUME_SELL;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTYEARVOLUMESELL(int  cURRENT_YEAR_VOLUME_SELL)
{
	this->cURRENT_YEAR_VOLUME_SELL = cURRENT_YEAR_VOLUME_SELL;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getCURRENTYEARVOLUMEUNKNOWN()
{
	return cURRENT_YEAR_VOLUME_UNKNOWN;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setCURRENTYEARVOLUMEUNKNOWN(int  cURRENT_YEAR_VOLUME_UNKNOWN)
{
	this->cURRENT_YEAR_VOLUME_UNKNOWN = cURRENT_YEAR_VOLUME_UNKNOWN;
}

std::string
SPOT_INSTRUMENT_MARKET_DATA::getINSTRUMENT()
{
	return iNSTRUMENT;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setINSTRUMENT(std::string  iNSTRUMENT)
{
	this->iNSTRUMENT = iNSTRUMENT;
}

std::string
SPOT_INSTRUMENT_MARKET_DATA::getLASTPROCESSEDTRADECCSEQ()
{
	return lAST_PROCESSED_TRADE_CCSEQ;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setLASTPROCESSEDTRADECCSEQ(std::string  lAST_PROCESSED_TRADE_CCSEQ)
{
	this->lAST_PROCESSED_TRADE_CCSEQ = lAST_PROCESSED_TRADE_CCSEQ;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getLASTPROCESSEDTRADEPRICE()
{
	return lAST_PROCESSED_TRADE_PRICE;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setLASTPROCESSEDTRADEPRICE(int  lAST_PROCESSED_TRADE_PRICE)
{
	this->lAST_PROCESSED_TRADE_PRICE = lAST_PROCESSED_TRADE_PRICE;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getLASTPROCESSEDTRADEQUANTITY()
{
	return lAST_PROCESSED_TRADE_QUANTITY;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setLASTPROCESSEDTRADEQUANTITY(int  lAST_PROCESSED_TRADE_QUANTITY)
{
	this->lAST_PROCESSED_TRADE_QUANTITY = lAST_PROCESSED_TRADE_QUANTITY;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getLASTPROCESSEDTRADEQUOTEQUANTITY()
{
	return lAST_PROCESSED_TRADE_QUOTE_QUANTITY;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setLASTPROCESSEDTRADEQUOTEQUANTITY(int  lAST_PROCESSED_TRADE_QUOTE_QUANTITY)
{
	this->lAST_PROCESSED_TRADE_QUOTE_QUANTITY = lAST_PROCESSED_TRADE_QUOTE_QUANTITY;
}

std::string
SPOT_INSTRUMENT_MARKET_DATA::getLASTPROCESSEDTRADESIDE()
{
	return lAST_PROCESSED_TRADE_SIDE;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setLASTPROCESSEDTRADESIDE(std::string  lAST_PROCESSED_TRADE_SIDE)
{
	this->lAST_PROCESSED_TRADE_SIDE = lAST_PROCESSED_TRADE_SIDE;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getLASTPROCESSEDTRADETS()
{
	return lAST_PROCESSED_TRADE_TS;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setLASTPROCESSEDTRADETS(int  lAST_PROCESSED_TRADE_TS)
{
	this->lAST_PROCESSED_TRADE_TS = lAST_PROCESSED_TRADE_TS;
}

std::string
SPOT_INSTRUMENT_MARKET_DATA::getLASTTRADECCSEQ()
{
	return lAST_TRADE_CCSEQ;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setLASTTRADECCSEQ(std::string  lAST_TRADE_CCSEQ)
{
	this->lAST_TRADE_CCSEQ = lAST_TRADE_CCSEQ;
}

std::string
SPOT_INSTRUMENT_MARKET_DATA::getLASTTRADEID()
{
	return lAST_TRADE_ID;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setLASTTRADEID(std::string  lAST_TRADE_ID)
{
	this->lAST_TRADE_ID = lAST_TRADE_ID;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getLASTTRADEQUANTITY()
{
	return lAST_TRADE_QUANTITY;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setLASTTRADEQUANTITY(int  lAST_TRADE_QUANTITY)
{
	this->lAST_TRADE_QUANTITY = lAST_TRADE_QUANTITY;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getLASTTRADEQUOTEQUANTITY()
{
	return lAST_TRADE_QUOTE_QUANTITY;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setLASTTRADEQUOTEQUANTITY(int  lAST_TRADE_QUOTE_QUANTITY)
{
	this->lAST_TRADE_QUOTE_QUANTITY = lAST_TRADE_QUOTE_QUANTITY;
}

std::string
SPOT_INSTRUMENT_MARKET_DATA::getLASTTRADESIDE()
{
	return lAST_TRADE_SIDE;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setLASTTRADESIDE(std::string  lAST_TRADE_SIDE)
{
	this->lAST_TRADE_SIDE = lAST_TRADE_SIDE;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getLIFETIMEFIRSTTRADETS()
{
	return lIFETIME_FIRST_TRADE_TS;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setLIFETIMEFIRSTTRADETS(int  lIFETIME_FIRST_TRADE_TS)
{
	this->lIFETIME_FIRST_TRADE_TS = lIFETIME_FIRST_TRADE_TS;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getLIFETIMEHIGH()
{
	return lIFETIME_HIGH;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setLIFETIMEHIGH(int  lIFETIME_HIGH)
{
	this->lIFETIME_HIGH = lIFETIME_HIGH;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getLIFETIMEHIGHTS()
{
	return lIFETIME_HIGH_TS;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setLIFETIMEHIGHTS(int  lIFETIME_HIGH_TS)
{
	this->lIFETIME_HIGH_TS = lIFETIME_HIGH_TS;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getLIFETIMELOW()
{
	return lIFETIME_LOW;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setLIFETIMELOW(int  lIFETIME_LOW)
{
	this->lIFETIME_LOW = lIFETIME_LOW;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getLIFETIMELOWTS()
{
	return lIFETIME_LOW_TS;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setLIFETIMELOWTS(int  lIFETIME_LOW_TS)
{
	this->lIFETIME_LOW_TS = lIFETIME_LOW_TS;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getLIFETIMEOPEN()
{
	return lIFETIME_OPEN;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setLIFETIMEOPEN(int  lIFETIME_OPEN)
{
	this->lIFETIME_OPEN = lIFETIME_OPEN;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getLIFETIMEQUOTEVOLUME()
{
	return lIFETIME_QUOTE_VOLUME;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setLIFETIMEQUOTEVOLUME(int  lIFETIME_QUOTE_VOLUME)
{
	this->lIFETIME_QUOTE_VOLUME = lIFETIME_QUOTE_VOLUME;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getLIFETIMEQUOTEVOLUMEBUY()
{
	return lIFETIME_QUOTE_VOLUME_BUY;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setLIFETIMEQUOTEVOLUMEBUY(int  lIFETIME_QUOTE_VOLUME_BUY)
{
	this->lIFETIME_QUOTE_VOLUME_BUY = lIFETIME_QUOTE_VOLUME_BUY;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getLIFETIMEQUOTEVOLUMESELL()
{
	return lIFETIME_QUOTE_VOLUME_SELL;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setLIFETIMEQUOTEVOLUMESELL(int  lIFETIME_QUOTE_VOLUME_SELL)
{
	this->lIFETIME_QUOTE_VOLUME_SELL = lIFETIME_QUOTE_VOLUME_SELL;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getLIFETIMEQUOTEVOLUMEUNKNOWN()
{
	return lIFETIME_QUOTE_VOLUME_UNKNOWN;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setLIFETIMEQUOTEVOLUMEUNKNOWN(int  lIFETIME_QUOTE_VOLUME_UNKNOWN)
{
	this->lIFETIME_QUOTE_VOLUME_UNKNOWN = lIFETIME_QUOTE_VOLUME_UNKNOWN;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getLIFETIMETOTALTRADES()
{
	return lIFETIME_TOTAL_TRADES;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setLIFETIMETOTALTRADES(int  lIFETIME_TOTAL_TRADES)
{
	this->lIFETIME_TOTAL_TRADES = lIFETIME_TOTAL_TRADES;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getLIFETIMETOTALTRADESBUY()
{
	return lIFETIME_TOTAL_TRADES_BUY;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setLIFETIMETOTALTRADESBUY(int  lIFETIME_TOTAL_TRADES_BUY)
{
	this->lIFETIME_TOTAL_TRADES_BUY = lIFETIME_TOTAL_TRADES_BUY;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getLIFETIMETOTALTRADESSELL()
{
	return lIFETIME_TOTAL_TRADES_SELL;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setLIFETIMETOTALTRADESSELL(int  lIFETIME_TOTAL_TRADES_SELL)
{
	this->lIFETIME_TOTAL_TRADES_SELL = lIFETIME_TOTAL_TRADES_SELL;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getLIFETIMETOTALTRADESUNKNOWN()
{
	return lIFETIME_TOTAL_TRADES_UNKNOWN;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setLIFETIMETOTALTRADESUNKNOWN(int  lIFETIME_TOTAL_TRADES_UNKNOWN)
{
	this->lIFETIME_TOTAL_TRADES_UNKNOWN = lIFETIME_TOTAL_TRADES_UNKNOWN;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getLIFETIMEVOLUME()
{
	return lIFETIME_VOLUME;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setLIFETIMEVOLUME(int  lIFETIME_VOLUME)
{
	this->lIFETIME_VOLUME = lIFETIME_VOLUME;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getLIFETIMEVOLUMEBUY()
{
	return lIFETIME_VOLUME_BUY;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setLIFETIMEVOLUMEBUY(int  lIFETIME_VOLUME_BUY)
{
	this->lIFETIME_VOLUME_BUY = lIFETIME_VOLUME_BUY;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getLIFETIMEVOLUMESELL()
{
	return lIFETIME_VOLUME_SELL;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setLIFETIMEVOLUMESELL(int  lIFETIME_VOLUME_SELL)
{
	this->lIFETIME_VOLUME_SELL = lIFETIME_VOLUME_SELL;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getLIFETIMEVOLUMEUNKNOWN()
{
	return lIFETIME_VOLUME_UNKNOWN;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setLIFETIMEVOLUMEUNKNOWN(int  lIFETIME_VOLUME_UNKNOWN)
{
	this->lIFETIME_VOLUME_UNKNOWN = lIFETIME_VOLUME_UNKNOWN;
}

std::string
SPOT_INSTRUMENT_MARKET_DATA::getMAPPEDINSTRUMENT()
{
	return mAPPED_INSTRUMENT;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMAPPEDINSTRUMENT(std::string  mAPPED_INSTRUMENT)
{
	this->mAPPED_INSTRUMENT = mAPPED_INSTRUMENT;
}

std::string
SPOT_INSTRUMENT_MARKET_DATA::getMARKET()
{
	return mARKET;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMARKET(std::string  mARKET)
{
	this->mARKET = mARKET;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING180DAYHIGH()
{
	return mOVING_180_DAY_HIGH;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING180DAYHIGH(int  mOVING_180_DAY_HIGH)
{
	this->mOVING_180_DAY_HIGH = mOVING_180_DAY_HIGH;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING180DAYLOW()
{
	return mOVING_180_DAY_LOW;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING180DAYLOW(int  mOVING_180_DAY_LOW)
{
	this->mOVING_180_DAY_LOW = mOVING_180_DAY_LOW;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING180DAYOPEN()
{
	return mOVING_180_DAY_OPEN;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING180DAYOPEN(int  mOVING_180_DAY_OPEN)
{
	this->mOVING_180_DAY_OPEN = mOVING_180_DAY_OPEN;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING180DAYQUOTEVOLUME()
{
	return mOVING_180_DAY_QUOTE_VOLUME;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING180DAYQUOTEVOLUME(int  mOVING_180_DAY_QUOTE_VOLUME)
{
	this->mOVING_180_DAY_QUOTE_VOLUME = mOVING_180_DAY_QUOTE_VOLUME;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING180DAYQUOTEVOLUMEBUY()
{
	return mOVING_180_DAY_QUOTE_VOLUME_BUY;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING180DAYQUOTEVOLUMEBUY(int  mOVING_180_DAY_QUOTE_VOLUME_BUY)
{
	this->mOVING_180_DAY_QUOTE_VOLUME_BUY = mOVING_180_DAY_QUOTE_VOLUME_BUY;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING180DAYQUOTEVOLUMESELL()
{
	return mOVING_180_DAY_QUOTE_VOLUME_SELL;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING180DAYQUOTEVOLUMESELL(int  mOVING_180_DAY_QUOTE_VOLUME_SELL)
{
	this->mOVING_180_DAY_QUOTE_VOLUME_SELL = mOVING_180_DAY_QUOTE_VOLUME_SELL;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING180DAYQUOTEVOLUMEUNKNOWN()
{
	return mOVING_180_DAY_QUOTE_VOLUME_UNKNOWN;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING180DAYQUOTEVOLUMEUNKNOWN(int  mOVING_180_DAY_QUOTE_VOLUME_UNKNOWN)
{
	this->mOVING_180_DAY_QUOTE_VOLUME_UNKNOWN = mOVING_180_DAY_QUOTE_VOLUME_UNKNOWN;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING180DAYTOTALTRADES()
{
	return mOVING_180_DAY_TOTAL_TRADES;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING180DAYTOTALTRADES(int  mOVING_180_DAY_TOTAL_TRADES)
{
	this->mOVING_180_DAY_TOTAL_TRADES = mOVING_180_DAY_TOTAL_TRADES;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING180DAYTOTALTRADESBUY()
{
	return mOVING_180_DAY_TOTAL_TRADES_BUY;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING180DAYTOTALTRADESBUY(int  mOVING_180_DAY_TOTAL_TRADES_BUY)
{
	this->mOVING_180_DAY_TOTAL_TRADES_BUY = mOVING_180_DAY_TOTAL_TRADES_BUY;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING180DAYTOTALTRADESSELL()
{
	return mOVING_180_DAY_TOTAL_TRADES_SELL;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING180DAYTOTALTRADESSELL(int  mOVING_180_DAY_TOTAL_TRADES_SELL)
{
	this->mOVING_180_DAY_TOTAL_TRADES_SELL = mOVING_180_DAY_TOTAL_TRADES_SELL;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING180DAYTOTALTRADESUNKNOWN()
{
	return mOVING_180_DAY_TOTAL_TRADES_UNKNOWN;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING180DAYTOTALTRADESUNKNOWN(int  mOVING_180_DAY_TOTAL_TRADES_UNKNOWN)
{
	this->mOVING_180_DAY_TOTAL_TRADES_UNKNOWN = mOVING_180_DAY_TOTAL_TRADES_UNKNOWN;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING180DAYVOLUME()
{
	return mOVING_180_DAY_VOLUME;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING180DAYVOLUME(int  mOVING_180_DAY_VOLUME)
{
	this->mOVING_180_DAY_VOLUME = mOVING_180_DAY_VOLUME;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING180DAYVOLUMEBUY()
{
	return mOVING_180_DAY_VOLUME_BUY;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING180DAYVOLUMEBUY(int  mOVING_180_DAY_VOLUME_BUY)
{
	this->mOVING_180_DAY_VOLUME_BUY = mOVING_180_DAY_VOLUME_BUY;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING180DAYVOLUMESELL()
{
	return mOVING_180_DAY_VOLUME_SELL;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING180DAYVOLUMESELL(int  mOVING_180_DAY_VOLUME_SELL)
{
	this->mOVING_180_DAY_VOLUME_SELL = mOVING_180_DAY_VOLUME_SELL;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING180DAYVOLUMEUNKNOWN()
{
	return mOVING_180_DAY_VOLUME_UNKNOWN;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING180DAYVOLUMEUNKNOWN(int  mOVING_180_DAY_VOLUME_UNKNOWN)
{
	this->mOVING_180_DAY_VOLUME_UNKNOWN = mOVING_180_DAY_VOLUME_UNKNOWN;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING24HOURHIGH()
{
	return mOVING_24_HOUR_HIGH;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING24HOURHIGH(int  mOVING_24_HOUR_HIGH)
{
	this->mOVING_24_HOUR_HIGH = mOVING_24_HOUR_HIGH;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING24HOURLOW()
{
	return mOVING_24_HOUR_LOW;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING24HOURLOW(int  mOVING_24_HOUR_LOW)
{
	this->mOVING_24_HOUR_LOW = mOVING_24_HOUR_LOW;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING24HOUROPEN()
{
	return mOVING_24_HOUR_OPEN;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING24HOUROPEN(int  mOVING_24_HOUR_OPEN)
{
	this->mOVING_24_HOUR_OPEN = mOVING_24_HOUR_OPEN;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING24HOURQUOTEVOLUME()
{
	return mOVING_24_HOUR_QUOTE_VOLUME;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING24HOURQUOTEVOLUME(int  mOVING_24_HOUR_QUOTE_VOLUME)
{
	this->mOVING_24_HOUR_QUOTE_VOLUME = mOVING_24_HOUR_QUOTE_VOLUME;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING24HOURQUOTEVOLUMEBUY()
{
	return mOVING_24_HOUR_QUOTE_VOLUME_BUY;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING24HOURQUOTEVOLUMEBUY(int  mOVING_24_HOUR_QUOTE_VOLUME_BUY)
{
	this->mOVING_24_HOUR_QUOTE_VOLUME_BUY = mOVING_24_HOUR_QUOTE_VOLUME_BUY;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING24HOURQUOTEVOLUMESELL()
{
	return mOVING_24_HOUR_QUOTE_VOLUME_SELL;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING24HOURQUOTEVOLUMESELL(int  mOVING_24_HOUR_QUOTE_VOLUME_SELL)
{
	this->mOVING_24_HOUR_QUOTE_VOLUME_SELL = mOVING_24_HOUR_QUOTE_VOLUME_SELL;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING24HOURQUOTEVOLUMEUNKNOWN()
{
	return mOVING_24_HOUR_QUOTE_VOLUME_UNKNOWN;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING24HOURQUOTEVOLUMEUNKNOWN(int  mOVING_24_HOUR_QUOTE_VOLUME_UNKNOWN)
{
	this->mOVING_24_HOUR_QUOTE_VOLUME_UNKNOWN = mOVING_24_HOUR_QUOTE_VOLUME_UNKNOWN;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING24HOURTOTALTRADES()
{
	return mOVING_24_HOUR_TOTAL_TRADES;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING24HOURTOTALTRADES(int  mOVING_24_HOUR_TOTAL_TRADES)
{
	this->mOVING_24_HOUR_TOTAL_TRADES = mOVING_24_HOUR_TOTAL_TRADES;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING24HOURTOTALTRADESBUY()
{
	return mOVING_24_HOUR_TOTAL_TRADES_BUY;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING24HOURTOTALTRADESBUY(int  mOVING_24_HOUR_TOTAL_TRADES_BUY)
{
	this->mOVING_24_HOUR_TOTAL_TRADES_BUY = mOVING_24_HOUR_TOTAL_TRADES_BUY;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING24HOURTOTALTRADESSELL()
{
	return mOVING_24_HOUR_TOTAL_TRADES_SELL;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING24HOURTOTALTRADESSELL(int  mOVING_24_HOUR_TOTAL_TRADES_SELL)
{
	this->mOVING_24_HOUR_TOTAL_TRADES_SELL = mOVING_24_HOUR_TOTAL_TRADES_SELL;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING24HOURTOTALTRADESUNKNOWN()
{
	return mOVING_24_HOUR_TOTAL_TRADES_UNKNOWN;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING24HOURTOTALTRADESUNKNOWN(int  mOVING_24_HOUR_TOTAL_TRADES_UNKNOWN)
{
	this->mOVING_24_HOUR_TOTAL_TRADES_UNKNOWN = mOVING_24_HOUR_TOTAL_TRADES_UNKNOWN;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING24HOURVOLUME()
{
	return mOVING_24_HOUR_VOLUME;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING24HOURVOLUME(int  mOVING_24_HOUR_VOLUME)
{
	this->mOVING_24_HOUR_VOLUME = mOVING_24_HOUR_VOLUME;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING24HOURVOLUMEBUY()
{
	return mOVING_24_HOUR_VOLUME_BUY;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING24HOURVOLUMEBUY(int  mOVING_24_HOUR_VOLUME_BUY)
{
	this->mOVING_24_HOUR_VOLUME_BUY = mOVING_24_HOUR_VOLUME_BUY;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING24HOURVOLUMESELL()
{
	return mOVING_24_HOUR_VOLUME_SELL;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING24HOURVOLUMESELL(int  mOVING_24_HOUR_VOLUME_SELL)
{
	this->mOVING_24_HOUR_VOLUME_SELL = mOVING_24_HOUR_VOLUME_SELL;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING24HOURVOLUMEUNKNOWN()
{
	return mOVING_24_HOUR_VOLUME_UNKNOWN;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING24HOURVOLUMEUNKNOWN(int  mOVING_24_HOUR_VOLUME_UNKNOWN)
{
	this->mOVING_24_HOUR_VOLUME_UNKNOWN = mOVING_24_HOUR_VOLUME_UNKNOWN;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING30DAYHIGH()
{
	return mOVING_30_DAY_HIGH;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING30DAYHIGH(int  mOVING_30_DAY_HIGH)
{
	this->mOVING_30_DAY_HIGH = mOVING_30_DAY_HIGH;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING30DAYLOW()
{
	return mOVING_30_DAY_LOW;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING30DAYLOW(int  mOVING_30_DAY_LOW)
{
	this->mOVING_30_DAY_LOW = mOVING_30_DAY_LOW;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING30DAYOPEN()
{
	return mOVING_30_DAY_OPEN;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING30DAYOPEN(int  mOVING_30_DAY_OPEN)
{
	this->mOVING_30_DAY_OPEN = mOVING_30_DAY_OPEN;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING30DAYQUOTEVOLUME()
{
	return mOVING_30_DAY_QUOTE_VOLUME;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING30DAYQUOTEVOLUME(int  mOVING_30_DAY_QUOTE_VOLUME)
{
	this->mOVING_30_DAY_QUOTE_VOLUME = mOVING_30_DAY_QUOTE_VOLUME;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING30DAYQUOTEVOLUMEBUY()
{
	return mOVING_30_DAY_QUOTE_VOLUME_BUY;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING30DAYQUOTEVOLUMEBUY(int  mOVING_30_DAY_QUOTE_VOLUME_BUY)
{
	this->mOVING_30_DAY_QUOTE_VOLUME_BUY = mOVING_30_DAY_QUOTE_VOLUME_BUY;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING30DAYQUOTEVOLUMESELL()
{
	return mOVING_30_DAY_QUOTE_VOLUME_SELL;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING30DAYQUOTEVOLUMESELL(int  mOVING_30_DAY_QUOTE_VOLUME_SELL)
{
	this->mOVING_30_DAY_QUOTE_VOLUME_SELL = mOVING_30_DAY_QUOTE_VOLUME_SELL;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING30DAYQUOTEVOLUMEUNKNOWN()
{
	return mOVING_30_DAY_QUOTE_VOLUME_UNKNOWN;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING30DAYQUOTEVOLUMEUNKNOWN(int  mOVING_30_DAY_QUOTE_VOLUME_UNKNOWN)
{
	this->mOVING_30_DAY_QUOTE_VOLUME_UNKNOWN = mOVING_30_DAY_QUOTE_VOLUME_UNKNOWN;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING30DAYTOTALTRADES()
{
	return mOVING_30_DAY_TOTAL_TRADES;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING30DAYTOTALTRADES(int  mOVING_30_DAY_TOTAL_TRADES)
{
	this->mOVING_30_DAY_TOTAL_TRADES = mOVING_30_DAY_TOTAL_TRADES;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING30DAYTOTALTRADESBUY()
{
	return mOVING_30_DAY_TOTAL_TRADES_BUY;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING30DAYTOTALTRADESBUY(int  mOVING_30_DAY_TOTAL_TRADES_BUY)
{
	this->mOVING_30_DAY_TOTAL_TRADES_BUY = mOVING_30_DAY_TOTAL_TRADES_BUY;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING30DAYTOTALTRADESSELL()
{
	return mOVING_30_DAY_TOTAL_TRADES_SELL;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING30DAYTOTALTRADESSELL(int  mOVING_30_DAY_TOTAL_TRADES_SELL)
{
	this->mOVING_30_DAY_TOTAL_TRADES_SELL = mOVING_30_DAY_TOTAL_TRADES_SELL;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING30DAYTOTALTRADESUNKNOWN()
{
	return mOVING_30_DAY_TOTAL_TRADES_UNKNOWN;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING30DAYTOTALTRADESUNKNOWN(int  mOVING_30_DAY_TOTAL_TRADES_UNKNOWN)
{
	this->mOVING_30_DAY_TOTAL_TRADES_UNKNOWN = mOVING_30_DAY_TOTAL_TRADES_UNKNOWN;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING30DAYVOLUME()
{
	return mOVING_30_DAY_VOLUME;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING30DAYVOLUME(int  mOVING_30_DAY_VOLUME)
{
	this->mOVING_30_DAY_VOLUME = mOVING_30_DAY_VOLUME;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING30DAYVOLUMEBUY()
{
	return mOVING_30_DAY_VOLUME_BUY;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING30DAYVOLUMEBUY(int  mOVING_30_DAY_VOLUME_BUY)
{
	this->mOVING_30_DAY_VOLUME_BUY = mOVING_30_DAY_VOLUME_BUY;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING30DAYVOLUMESELL()
{
	return mOVING_30_DAY_VOLUME_SELL;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING30DAYVOLUMESELL(int  mOVING_30_DAY_VOLUME_SELL)
{
	this->mOVING_30_DAY_VOLUME_SELL = mOVING_30_DAY_VOLUME_SELL;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING30DAYVOLUMEUNKNOWN()
{
	return mOVING_30_DAY_VOLUME_UNKNOWN;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING30DAYVOLUMEUNKNOWN(int  mOVING_30_DAY_VOLUME_UNKNOWN)
{
	this->mOVING_30_DAY_VOLUME_UNKNOWN = mOVING_30_DAY_VOLUME_UNKNOWN;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING365DAYHIGH()
{
	return mOVING_365_DAY_HIGH;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING365DAYHIGH(int  mOVING_365_DAY_HIGH)
{
	this->mOVING_365_DAY_HIGH = mOVING_365_DAY_HIGH;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING365DAYLOW()
{
	return mOVING_365_DAY_LOW;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING365DAYLOW(int  mOVING_365_DAY_LOW)
{
	this->mOVING_365_DAY_LOW = mOVING_365_DAY_LOW;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING365DAYOPEN()
{
	return mOVING_365_DAY_OPEN;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING365DAYOPEN(int  mOVING_365_DAY_OPEN)
{
	this->mOVING_365_DAY_OPEN = mOVING_365_DAY_OPEN;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING365DAYQUOTEVOLUME()
{
	return mOVING_365_DAY_QUOTE_VOLUME;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING365DAYQUOTEVOLUME(int  mOVING_365_DAY_QUOTE_VOLUME)
{
	this->mOVING_365_DAY_QUOTE_VOLUME = mOVING_365_DAY_QUOTE_VOLUME;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING365DAYQUOTEVOLUMEBUY()
{
	return mOVING_365_DAY_QUOTE_VOLUME_BUY;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING365DAYQUOTEVOLUMEBUY(int  mOVING_365_DAY_QUOTE_VOLUME_BUY)
{
	this->mOVING_365_DAY_QUOTE_VOLUME_BUY = mOVING_365_DAY_QUOTE_VOLUME_BUY;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING365DAYQUOTEVOLUMESELL()
{
	return mOVING_365_DAY_QUOTE_VOLUME_SELL;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING365DAYQUOTEVOLUMESELL(int  mOVING_365_DAY_QUOTE_VOLUME_SELL)
{
	this->mOVING_365_DAY_QUOTE_VOLUME_SELL = mOVING_365_DAY_QUOTE_VOLUME_SELL;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING365DAYQUOTEVOLUMEUNKNOWN()
{
	return mOVING_365_DAY_QUOTE_VOLUME_UNKNOWN;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING365DAYQUOTEVOLUMEUNKNOWN(int  mOVING_365_DAY_QUOTE_VOLUME_UNKNOWN)
{
	this->mOVING_365_DAY_QUOTE_VOLUME_UNKNOWN = mOVING_365_DAY_QUOTE_VOLUME_UNKNOWN;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING365DAYTOTALTRADES()
{
	return mOVING_365_DAY_TOTAL_TRADES;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING365DAYTOTALTRADES(int  mOVING_365_DAY_TOTAL_TRADES)
{
	this->mOVING_365_DAY_TOTAL_TRADES = mOVING_365_DAY_TOTAL_TRADES;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING365DAYTOTALTRADESBUY()
{
	return mOVING_365_DAY_TOTAL_TRADES_BUY;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING365DAYTOTALTRADESBUY(int  mOVING_365_DAY_TOTAL_TRADES_BUY)
{
	this->mOVING_365_DAY_TOTAL_TRADES_BUY = mOVING_365_DAY_TOTAL_TRADES_BUY;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING365DAYTOTALTRADESSELL()
{
	return mOVING_365_DAY_TOTAL_TRADES_SELL;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING365DAYTOTALTRADESSELL(int  mOVING_365_DAY_TOTAL_TRADES_SELL)
{
	this->mOVING_365_DAY_TOTAL_TRADES_SELL = mOVING_365_DAY_TOTAL_TRADES_SELL;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING365DAYTOTALTRADESUNKNOWN()
{
	return mOVING_365_DAY_TOTAL_TRADES_UNKNOWN;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING365DAYTOTALTRADESUNKNOWN(int  mOVING_365_DAY_TOTAL_TRADES_UNKNOWN)
{
	this->mOVING_365_DAY_TOTAL_TRADES_UNKNOWN = mOVING_365_DAY_TOTAL_TRADES_UNKNOWN;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING365DAYVOLUME()
{
	return mOVING_365_DAY_VOLUME;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING365DAYVOLUME(int  mOVING_365_DAY_VOLUME)
{
	this->mOVING_365_DAY_VOLUME = mOVING_365_DAY_VOLUME;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING365DAYVOLUMEBUY()
{
	return mOVING_365_DAY_VOLUME_BUY;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING365DAYVOLUMEBUY(int  mOVING_365_DAY_VOLUME_BUY)
{
	this->mOVING_365_DAY_VOLUME_BUY = mOVING_365_DAY_VOLUME_BUY;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING365DAYVOLUMESELL()
{
	return mOVING_365_DAY_VOLUME_SELL;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING365DAYVOLUMESELL(int  mOVING_365_DAY_VOLUME_SELL)
{
	this->mOVING_365_DAY_VOLUME_SELL = mOVING_365_DAY_VOLUME_SELL;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING365DAYVOLUMEUNKNOWN()
{
	return mOVING_365_DAY_VOLUME_UNKNOWN;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING365DAYVOLUMEUNKNOWN(int  mOVING_365_DAY_VOLUME_UNKNOWN)
{
	this->mOVING_365_DAY_VOLUME_UNKNOWN = mOVING_365_DAY_VOLUME_UNKNOWN;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING7DAYHIGH()
{
	return mOVING_7_DAY_HIGH;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING7DAYHIGH(int  mOVING_7_DAY_HIGH)
{
	this->mOVING_7_DAY_HIGH = mOVING_7_DAY_HIGH;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING7DAYLOW()
{
	return mOVING_7_DAY_LOW;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING7DAYLOW(int  mOVING_7_DAY_LOW)
{
	this->mOVING_7_DAY_LOW = mOVING_7_DAY_LOW;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING7DAYOPEN()
{
	return mOVING_7_DAY_OPEN;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING7DAYOPEN(int  mOVING_7_DAY_OPEN)
{
	this->mOVING_7_DAY_OPEN = mOVING_7_DAY_OPEN;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING7DAYQUOTEVOLUME()
{
	return mOVING_7_DAY_QUOTE_VOLUME;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING7DAYQUOTEVOLUME(int  mOVING_7_DAY_QUOTE_VOLUME)
{
	this->mOVING_7_DAY_QUOTE_VOLUME = mOVING_7_DAY_QUOTE_VOLUME;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING7DAYQUOTEVOLUMEBUY()
{
	return mOVING_7_DAY_QUOTE_VOLUME_BUY;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING7DAYQUOTEVOLUMEBUY(int  mOVING_7_DAY_QUOTE_VOLUME_BUY)
{
	this->mOVING_7_DAY_QUOTE_VOLUME_BUY = mOVING_7_DAY_QUOTE_VOLUME_BUY;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING7DAYQUOTEVOLUMESELL()
{
	return mOVING_7_DAY_QUOTE_VOLUME_SELL;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING7DAYQUOTEVOLUMESELL(int  mOVING_7_DAY_QUOTE_VOLUME_SELL)
{
	this->mOVING_7_DAY_QUOTE_VOLUME_SELL = mOVING_7_DAY_QUOTE_VOLUME_SELL;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING7DAYQUOTEVOLUMEUNKNOWN()
{
	return mOVING_7_DAY_QUOTE_VOLUME_UNKNOWN;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING7DAYQUOTEVOLUMEUNKNOWN(int  mOVING_7_DAY_QUOTE_VOLUME_UNKNOWN)
{
	this->mOVING_7_DAY_QUOTE_VOLUME_UNKNOWN = mOVING_7_DAY_QUOTE_VOLUME_UNKNOWN;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING7DAYTOTALTRADES()
{
	return mOVING_7_DAY_TOTAL_TRADES;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING7DAYTOTALTRADES(int  mOVING_7_DAY_TOTAL_TRADES)
{
	this->mOVING_7_DAY_TOTAL_TRADES = mOVING_7_DAY_TOTAL_TRADES;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING7DAYTOTALTRADESBUY()
{
	return mOVING_7_DAY_TOTAL_TRADES_BUY;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING7DAYTOTALTRADESBUY(int  mOVING_7_DAY_TOTAL_TRADES_BUY)
{
	this->mOVING_7_DAY_TOTAL_TRADES_BUY = mOVING_7_DAY_TOTAL_TRADES_BUY;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING7DAYTOTALTRADESSELL()
{
	return mOVING_7_DAY_TOTAL_TRADES_SELL;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING7DAYTOTALTRADESSELL(int  mOVING_7_DAY_TOTAL_TRADES_SELL)
{
	this->mOVING_7_DAY_TOTAL_TRADES_SELL = mOVING_7_DAY_TOTAL_TRADES_SELL;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING7DAYTOTALTRADESUNKNOWN()
{
	return mOVING_7_DAY_TOTAL_TRADES_UNKNOWN;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING7DAYTOTALTRADESUNKNOWN(int  mOVING_7_DAY_TOTAL_TRADES_UNKNOWN)
{
	this->mOVING_7_DAY_TOTAL_TRADES_UNKNOWN = mOVING_7_DAY_TOTAL_TRADES_UNKNOWN;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING7DAYVOLUME()
{
	return mOVING_7_DAY_VOLUME;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING7DAYVOLUME(int  mOVING_7_DAY_VOLUME)
{
	this->mOVING_7_DAY_VOLUME = mOVING_7_DAY_VOLUME;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING7DAYVOLUMEBUY()
{
	return mOVING_7_DAY_VOLUME_BUY;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING7DAYVOLUMEBUY(int  mOVING_7_DAY_VOLUME_BUY)
{
	this->mOVING_7_DAY_VOLUME_BUY = mOVING_7_DAY_VOLUME_BUY;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING7DAYVOLUMESELL()
{
	return mOVING_7_DAY_VOLUME_SELL;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING7DAYVOLUMESELL(int  mOVING_7_DAY_VOLUME_SELL)
{
	this->mOVING_7_DAY_VOLUME_SELL = mOVING_7_DAY_VOLUME_SELL;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING7DAYVOLUMEUNKNOWN()
{
	return mOVING_7_DAY_VOLUME_UNKNOWN;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING7DAYVOLUMEUNKNOWN(int  mOVING_7_DAY_VOLUME_UNKNOWN)
{
	this->mOVING_7_DAY_VOLUME_UNKNOWN = mOVING_7_DAY_VOLUME_UNKNOWN;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING90DAYHIGH()
{
	return mOVING_90_DAY_HIGH;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING90DAYHIGH(int  mOVING_90_DAY_HIGH)
{
	this->mOVING_90_DAY_HIGH = mOVING_90_DAY_HIGH;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING90DAYLOW()
{
	return mOVING_90_DAY_LOW;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING90DAYLOW(int  mOVING_90_DAY_LOW)
{
	this->mOVING_90_DAY_LOW = mOVING_90_DAY_LOW;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING90DAYOPEN()
{
	return mOVING_90_DAY_OPEN;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING90DAYOPEN(int  mOVING_90_DAY_OPEN)
{
	this->mOVING_90_DAY_OPEN = mOVING_90_DAY_OPEN;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING90DAYQUOTEVOLUME()
{
	return mOVING_90_DAY_QUOTE_VOLUME;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING90DAYQUOTEVOLUME(int  mOVING_90_DAY_QUOTE_VOLUME)
{
	this->mOVING_90_DAY_QUOTE_VOLUME = mOVING_90_DAY_QUOTE_VOLUME;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING90DAYQUOTEVOLUMEBUY()
{
	return mOVING_90_DAY_QUOTE_VOLUME_BUY;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING90DAYQUOTEVOLUMEBUY(int  mOVING_90_DAY_QUOTE_VOLUME_BUY)
{
	this->mOVING_90_DAY_QUOTE_VOLUME_BUY = mOVING_90_DAY_QUOTE_VOLUME_BUY;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING90DAYQUOTEVOLUMESELL()
{
	return mOVING_90_DAY_QUOTE_VOLUME_SELL;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING90DAYQUOTEVOLUMESELL(int  mOVING_90_DAY_QUOTE_VOLUME_SELL)
{
	this->mOVING_90_DAY_QUOTE_VOLUME_SELL = mOVING_90_DAY_QUOTE_VOLUME_SELL;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING90DAYQUOTEVOLUMEUNKNOWN()
{
	return mOVING_90_DAY_QUOTE_VOLUME_UNKNOWN;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING90DAYQUOTEVOLUMEUNKNOWN(int  mOVING_90_DAY_QUOTE_VOLUME_UNKNOWN)
{
	this->mOVING_90_DAY_QUOTE_VOLUME_UNKNOWN = mOVING_90_DAY_QUOTE_VOLUME_UNKNOWN;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING90DAYTOTALTRADES()
{
	return mOVING_90_DAY_TOTAL_TRADES;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING90DAYTOTALTRADES(int  mOVING_90_DAY_TOTAL_TRADES)
{
	this->mOVING_90_DAY_TOTAL_TRADES = mOVING_90_DAY_TOTAL_TRADES;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING90DAYTOTALTRADESBUY()
{
	return mOVING_90_DAY_TOTAL_TRADES_BUY;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING90DAYTOTALTRADESBUY(int  mOVING_90_DAY_TOTAL_TRADES_BUY)
{
	this->mOVING_90_DAY_TOTAL_TRADES_BUY = mOVING_90_DAY_TOTAL_TRADES_BUY;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING90DAYTOTALTRADESSELL()
{
	return mOVING_90_DAY_TOTAL_TRADES_SELL;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING90DAYTOTALTRADESSELL(int  mOVING_90_DAY_TOTAL_TRADES_SELL)
{
	this->mOVING_90_DAY_TOTAL_TRADES_SELL = mOVING_90_DAY_TOTAL_TRADES_SELL;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING90DAYTOTALTRADESUNKNOWN()
{
	return mOVING_90_DAY_TOTAL_TRADES_UNKNOWN;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING90DAYTOTALTRADESUNKNOWN(int  mOVING_90_DAY_TOTAL_TRADES_UNKNOWN)
{
	this->mOVING_90_DAY_TOTAL_TRADES_UNKNOWN = mOVING_90_DAY_TOTAL_TRADES_UNKNOWN;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING90DAYVOLUME()
{
	return mOVING_90_DAY_VOLUME;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING90DAYVOLUME(int  mOVING_90_DAY_VOLUME)
{
	this->mOVING_90_DAY_VOLUME = mOVING_90_DAY_VOLUME;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING90DAYVOLUMEBUY()
{
	return mOVING_90_DAY_VOLUME_BUY;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING90DAYVOLUMEBUY(int  mOVING_90_DAY_VOLUME_BUY)
{
	this->mOVING_90_DAY_VOLUME_BUY = mOVING_90_DAY_VOLUME_BUY;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING90DAYVOLUMESELL()
{
	return mOVING_90_DAY_VOLUME_SELL;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING90DAYVOLUMESELL(int  mOVING_90_DAY_VOLUME_SELL)
{
	this->mOVING_90_DAY_VOLUME_SELL = mOVING_90_DAY_VOLUME_SELL;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getMOVING90DAYVOLUMEUNKNOWN()
{
	return mOVING_90_DAY_VOLUME_UNKNOWN;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setMOVING90DAYVOLUMEUNKNOWN(int  mOVING_90_DAY_VOLUME_UNKNOWN)
{
	this->mOVING_90_DAY_VOLUME_UNKNOWN = mOVING_90_DAY_VOLUME_UNKNOWN;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getPRICE()
{
	return pRICE;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setPRICE(int  pRICE)
{
	this->pRICE = pRICE;
}

std::string
SPOT_INSTRUMENT_MARKET_DATA::getPRICEFLAG()
{
	return pRICE_FLAG;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setPRICEFLAG(std::string  pRICE_FLAG)
{
	this->pRICE_FLAG = pRICE_FLAG;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getPRICELASTUPDATETS()
{
	return pRICE_LAST_UPDATE_TS;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setPRICELASTUPDATETS(int  pRICE_LAST_UPDATE_TS)
{
	this->pRICE_LAST_UPDATE_TS = pRICE_LAST_UPDATE_TS;
}

std::string
SPOT_INSTRUMENT_MARKET_DATA::getQUOTE()
{
	return qUOTE;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setQUOTE(std::string  qUOTE)
{
	this->qUOTE = qUOTE;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getTOPASKLASTUPDATETS()
{
	return tOP_ASK_LAST_UPDATE_TS;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setTOPASKLASTUPDATETS(int  tOP_ASK_LAST_UPDATE_TS)
{
	this->tOP_ASK_LAST_UPDATE_TS = tOP_ASK_LAST_UPDATE_TS;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getTOPASKPRICE()
{
	return tOP_ASK_PRICE;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setTOPASKPRICE(int  tOP_ASK_PRICE)
{
	this->tOP_ASK_PRICE = tOP_ASK_PRICE;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getTOPASKQUANTITY()
{
	return tOP_ASK_QUANTITY;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setTOPASKQUANTITY(int  tOP_ASK_QUANTITY)
{
	this->tOP_ASK_QUANTITY = tOP_ASK_QUANTITY;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getTOPBIDLASTUPDATETS()
{
	return tOP_BID_LAST_UPDATE_TS;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setTOPBIDLASTUPDATETS(int  tOP_BID_LAST_UPDATE_TS)
{
	this->tOP_BID_LAST_UPDATE_TS = tOP_BID_LAST_UPDATE_TS;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getTOPBIDPRICE()
{
	return tOP_BID_PRICE;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setTOPBIDPRICE(int  tOP_BID_PRICE)
{
	this->tOP_BID_PRICE = tOP_BID_PRICE;
}

int
SPOT_INSTRUMENT_MARKET_DATA::getTOPBIDQUANTITY()
{
	return tOP_BID_QUANTITY;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setTOPBIDQUANTITY(int  tOP_BID_QUANTITY)
{
	this->tOP_BID_QUANTITY = tOP_BID_QUANTITY;
}

std::string
SPOT_INSTRUMENT_MARKET_DATA::getTYPE()
{
	return tYPE;
}

void
SPOT_INSTRUMENT_MARKET_DATA::setTYPE(std::string  tYPE)
{
	this->tYPE = tYPE;
}


