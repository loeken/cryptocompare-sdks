<?php
/**
 * SPOTINSTRUMENTMARKETDATA
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 *
 * CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: data@cryptocompare.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SPOTINSTRUMENTMARKETDATA Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SPOTINSTRUMENTMARKETDATA implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SPOT_INSTRUMENT_MARKET_DATA';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'base' => 'string',
        'ccseq' => 'int',
        'current_day_high' => 'int',
        'current_day_low' => 'int',
        'current_day_open' => 'int',
        'current_day_quote_volume' => 'int',
        'current_day_quote_volume_buy' => 'int',
        'current_day_quote_volume_sell' => 'int',
        'current_day_quote_volume_unknown' => 'int',
        'current_day_total_trades' => 'int',
        'current_day_total_trades_buy' => 'int',
        'current_day_total_trades_sell' => 'int',
        'current_day_total_trades_unknown' => 'int',
        'current_day_volume' => 'int',
        'current_day_volume_buy' => 'int',
        'current_day_volume_sell' => 'int',
        'current_day_volume_unknown' => 'int',
        'current_hour_high' => 'int',
        'current_hour_low' => 'int',
        'current_hour_open' => 'int',
        'current_hour_quote_volume' => 'int',
        'current_hour_quote_volume_buy' => 'int',
        'current_hour_quote_volume_sell' => 'int',
        'current_hour_quote_volume_unknown' => 'int',
        'current_hour_total_trades' => 'int',
        'current_hour_total_trades_buy' => 'int',
        'current_hour_total_trades_sell' => 'int',
        'current_hour_total_trades_unknown' => 'int',
        'current_hour_volume' => 'int',
        'current_hour_volume_buy' => 'int',
        'current_hour_volume_sell' => 'int',
        'current_hour_volume_unknown' => 'int',
        'current_month_high' => 'int',
        'current_month_low' => 'int',
        'current_month_open' => 'int',
        'current_month_quote_volume' => 'int',
        'current_month_quote_volume_buy' => 'int',
        'current_month_quote_volume_sell' => 'int',
        'current_month_quote_volume_unknown' => 'int',
        'current_month_total_trades' => 'int',
        'current_month_total_trades_buy' => 'int',
        'current_month_total_trades_sell' => 'int',
        'current_month_total_trades_unknown' => 'int',
        'current_month_volume' => 'int',
        'current_month_volume_buy' => 'int',
        'current_month_volume_sell' => 'int',
        'current_month_volume_unknown' => 'int',
        'current_week_high' => 'int',
        'current_week_low' => 'int',
        'current_week_open' => 'int',
        'current_week_quote_volume' => 'int',
        'current_week_quote_volume_buy' => 'int',
        'current_week_quote_volume_sell' => 'int',
        'current_week_quote_volume_unknown' => 'int',
        'current_week_total_trades' => 'int',
        'current_week_total_trades_buy' => 'int',
        'current_week_total_trades_sell' => 'int',
        'current_week_total_trades_unknown' => 'int',
        'current_week_volume' => 'int',
        'current_week_volume_buy' => 'int',
        'current_week_volume_sell' => 'int',
        'current_week_volume_unknown' => 'int',
        'current_year_high' => 'int',
        'current_year_low' => 'int',
        'current_year_open' => 'int',
        'current_year_quote_volume' => 'int',
        'current_year_quote_volume_buy' => 'int',
        'current_year_quote_volume_sell' => 'int',
        'current_year_quote_volume_unknown' => 'int',
        'current_year_total_trades' => 'int',
        'current_year_total_trades_buy' => 'int',
        'current_year_total_trades_sell' => 'int',
        'current_year_total_trades_unknown' => 'int',
        'current_year_volume' => 'int',
        'current_year_volume_buy' => 'int',
        'current_year_volume_sell' => 'int',
        'current_year_volume_unknown' => 'int',
        'instrument' => 'string',
        'last_processed_trade_ccseq' => 'string',
        'last_processed_trade_price' => 'int',
        'last_processed_trade_quantity' => 'int',
        'last_processed_trade_quote_quantity' => 'int',
        'last_processed_trade_side' => 'string',
        'last_processed_trade_ts' => 'int',
        'last_trade_ccseq' => 'string',
        'last_trade_id' => 'string',
        'last_trade_quantity' => 'int',
        'last_trade_quote_quantity' => 'int',
        'last_trade_side' => 'string',
        'lifetime_first_trade_ts' => 'int',
        'lifetime_high' => 'int',
        'lifetime_high_ts' => 'int',
        'lifetime_low' => 'int',
        'lifetime_low_ts' => 'int',
        'lifetime_open' => 'int',
        'lifetime_quote_volume' => 'int',
        'lifetime_quote_volume_buy' => 'int',
        'lifetime_quote_volume_sell' => 'int',
        'lifetime_quote_volume_unknown' => 'int',
        'lifetime_total_trades' => 'int',
        'lifetime_total_trades_buy' => 'int',
        'lifetime_total_trades_sell' => 'int',
        'lifetime_total_trades_unknown' => 'int',
        'lifetime_volume' => 'int',
        'lifetime_volume_buy' => 'int',
        'lifetime_volume_sell' => 'int',
        'lifetime_volume_unknown' => 'int',
        'mapped_instrument' => 'string',
        'market' => 'string',
        'moving_180_day_high' => 'int',
        'moving_180_day_low' => 'int',
        'moving_180_day_open' => 'int',
        'moving_180_day_quote_volume' => 'int',
        'moving_180_day_quote_volume_buy' => 'int',
        'moving_180_day_quote_volume_sell' => 'int',
        'moving_180_day_quote_volume_unknown' => 'int',
        'moving_180_day_total_trades' => 'int',
        'moving_180_day_total_trades_buy' => 'int',
        'moving_180_day_total_trades_sell' => 'int',
        'moving_180_day_total_trades_unknown' => 'int',
        'moving_180_day_volume' => 'int',
        'moving_180_day_volume_buy' => 'int',
        'moving_180_day_volume_sell' => 'int',
        'moving_180_day_volume_unknown' => 'int',
        'moving_24_hour_high' => 'int',
        'moving_24_hour_low' => 'int',
        'moving_24_hour_open' => 'int',
        'moving_24_hour_quote_volume' => 'int',
        'moving_24_hour_quote_volume_buy' => 'int',
        'moving_24_hour_quote_volume_sell' => 'int',
        'moving_24_hour_quote_volume_unknown' => 'int',
        'moving_24_hour_total_trades' => 'int',
        'moving_24_hour_total_trades_buy' => 'int',
        'moving_24_hour_total_trades_sell' => 'int',
        'moving_24_hour_total_trades_unknown' => 'int',
        'moving_24_hour_volume' => 'int',
        'moving_24_hour_volume_buy' => 'int',
        'moving_24_hour_volume_sell' => 'int',
        'moving_24_hour_volume_unknown' => 'int',
        'moving_30_day_high' => 'int',
        'moving_30_day_low' => 'int',
        'moving_30_day_open' => 'int',
        'moving_30_day_quote_volume' => 'int',
        'moving_30_day_quote_volume_buy' => 'int',
        'moving_30_day_quote_volume_sell' => 'int',
        'moving_30_day_quote_volume_unknown' => 'int',
        'moving_30_day_total_trades' => 'int',
        'moving_30_day_total_trades_buy' => 'int',
        'moving_30_day_total_trades_sell' => 'int',
        'moving_30_day_total_trades_unknown' => 'int',
        'moving_30_day_volume' => 'int',
        'moving_30_day_volume_buy' => 'int',
        'moving_30_day_volume_sell' => 'int',
        'moving_30_day_volume_unknown' => 'int',
        'moving_365_day_high' => 'int',
        'moving_365_day_low' => 'int',
        'moving_365_day_open' => 'int',
        'moving_365_day_quote_volume' => 'int',
        'moving_365_day_quote_volume_buy' => 'int',
        'moving_365_day_quote_volume_sell' => 'int',
        'moving_365_day_quote_volume_unknown' => 'int',
        'moving_365_day_total_trades' => 'int',
        'moving_365_day_total_trades_buy' => 'int',
        'moving_365_day_total_trades_sell' => 'int',
        'moving_365_day_total_trades_unknown' => 'int',
        'moving_365_day_volume' => 'int',
        'moving_365_day_volume_buy' => 'int',
        'moving_365_day_volume_sell' => 'int',
        'moving_365_day_volume_unknown' => 'int',
        'moving_7_day_high' => 'int',
        'moving_7_day_low' => 'int',
        'moving_7_day_open' => 'int',
        'moving_7_day_quote_volume' => 'int',
        'moving_7_day_quote_volume_buy' => 'int',
        'moving_7_day_quote_volume_sell' => 'int',
        'moving_7_day_quote_volume_unknown' => 'int',
        'moving_7_day_total_trades' => 'int',
        'moving_7_day_total_trades_buy' => 'int',
        'moving_7_day_total_trades_sell' => 'int',
        'moving_7_day_total_trades_unknown' => 'int',
        'moving_7_day_volume' => 'int',
        'moving_7_day_volume_buy' => 'int',
        'moving_7_day_volume_sell' => 'int',
        'moving_7_day_volume_unknown' => 'int',
        'moving_90_day_high' => 'int',
        'moving_90_day_low' => 'int',
        'moving_90_day_open' => 'int',
        'moving_90_day_quote_volume' => 'int',
        'moving_90_day_quote_volume_buy' => 'int',
        'moving_90_day_quote_volume_sell' => 'int',
        'moving_90_day_quote_volume_unknown' => 'int',
        'moving_90_day_total_trades' => 'int',
        'moving_90_day_total_trades_buy' => 'int',
        'moving_90_day_total_trades_sell' => 'int',
        'moving_90_day_total_trades_unknown' => 'int',
        'moving_90_day_volume' => 'int',
        'moving_90_day_volume_buy' => 'int',
        'moving_90_day_volume_sell' => 'int',
        'moving_90_day_volume_unknown' => 'int',
        'price' => 'int',
        'price_flag' => 'string',
        'price_last_update_ts' => 'int',
        'quote' => 'string',
        'top_ask_last_update_ts' => 'int',
        'top_ask_price' => 'int',
        'top_ask_quantity' => 'int',
        'top_bid_last_update_ts' => 'int',
        'top_bid_price' => 'int',
        'top_bid_quantity' => 'int',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'base' => null,
        'ccseq' => null,
        'current_day_high' => null,
        'current_day_low' => null,
        'current_day_open' => null,
        'current_day_quote_volume' => null,
        'current_day_quote_volume_buy' => null,
        'current_day_quote_volume_sell' => null,
        'current_day_quote_volume_unknown' => null,
        'current_day_total_trades' => null,
        'current_day_total_trades_buy' => null,
        'current_day_total_trades_sell' => null,
        'current_day_total_trades_unknown' => null,
        'current_day_volume' => null,
        'current_day_volume_buy' => null,
        'current_day_volume_sell' => null,
        'current_day_volume_unknown' => null,
        'current_hour_high' => null,
        'current_hour_low' => null,
        'current_hour_open' => null,
        'current_hour_quote_volume' => null,
        'current_hour_quote_volume_buy' => null,
        'current_hour_quote_volume_sell' => null,
        'current_hour_quote_volume_unknown' => null,
        'current_hour_total_trades' => null,
        'current_hour_total_trades_buy' => null,
        'current_hour_total_trades_sell' => null,
        'current_hour_total_trades_unknown' => null,
        'current_hour_volume' => null,
        'current_hour_volume_buy' => null,
        'current_hour_volume_sell' => null,
        'current_hour_volume_unknown' => null,
        'current_month_high' => null,
        'current_month_low' => null,
        'current_month_open' => null,
        'current_month_quote_volume' => null,
        'current_month_quote_volume_buy' => null,
        'current_month_quote_volume_sell' => null,
        'current_month_quote_volume_unknown' => null,
        'current_month_total_trades' => null,
        'current_month_total_trades_buy' => null,
        'current_month_total_trades_sell' => null,
        'current_month_total_trades_unknown' => null,
        'current_month_volume' => null,
        'current_month_volume_buy' => null,
        'current_month_volume_sell' => null,
        'current_month_volume_unknown' => null,
        'current_week_high' => null,
        'current_week_low' => null,
        'current_week_open' => null,
        'current_week_quote_volume' => null,
        'current_week_quote_volume_buy' => null,
        'current_week_quote_volume_sell' => null,
        'current_week_quote_volume_unknown' => null,
        'current_week_total_trades' => null,
        'current_week_total_trades_buy' => null,
        'current_week_total_trades_sell' => null,
        'current_week_total_trades_unknown' => null,
        'current_week_volume' => null,
        'current_week_volume_buy' => null,
        'current_week_volume_sell' => null,
        'current_week_volume_unknown' => null,
        'current_year_high' => null,
        'current_year_low' => null,
        'current_year_open' => null,
        'current_year_quote_volume' => null,
        'current_year_quote_volume_buy' => null,
        'current_year_quote_volume_sell' => null,
        'current_year_quote_volume_unknown' => null,
        'current_year_total_trades' => null,
        'current_year_total_trades_buy' => null,
        'current_year_total_trades_sell' => null,
        'current_year_total_trades_unknown' => null,
        'current_year_volume' => null,
        'current_year_volume_buy' => null,
        'current_year_volume_sell' => null,
        'current_year_volume_unknown' => null,
        'instrument' => null,
        'last_processed_trade_ccseq' => null,
        'last_processed_trade_price' => null,
        'last_processed_trade_quantity' => null,
        'last_processed_trade_quote_quantity' => null,
        'last_processed_trade_side' => null,
        'last_processed_trade_ts' => null,
        'last_trade_ccseq' => null,
        'last_trade_id' => null,
        'last_trade_quantity' => null,
        'last_trade_quote_quantity' => null,
        'last_trade_side' => null,
        'lifetime_first_trade_ts' => null,
        'lifetime_high' => null,
        'lifetime_high_ts' => null,
        'lifetime_low' => null,
        'lifetime_low_ts' => null,
        'lifetime_open' => null,
        'lifetime_quote_volume' => null,
        'lifetime_quote_volume_buy' => null,
        'lifetime_quote_volume_sell' => null,
        'lifetime_quote_volume_unknown' => null,
        'lifetime_total_trades' => null,
        'lifetime_total_trades_buy' => null,
        'lifetime_total_trades_sell' => null,
        'lifetime_total_trades_unknown' => null,
        'lifetime_volume' => null,
        'lifetime_volume_buy' => null,
        'lifetime_volume_sell' => null,
        'lifetime_volume_unknown' => null,
        'mapped_instrument' => null,
        'market' => null,
        'moving_180_day_high' => null,
        'moving_180_day_low' => null,
        'moving_180_day_open' => null,
        'moving_180_day_quote_volume' => null,
        'moving_180_day_quote_volume_buy' => null,
        'moving_180_day_quote_volume_sell' => null,
        'moving_180_day_quote_volume_unknown' => null,
        'moving_180_day_total_trades' => null,
        'moving_180_day_total_trades_buy' => null,
        'moving_180_day_total_trades_sell' => null,
        'moving_180_day_total_trades_unknown' => null,
        'moving_180_day_volume' => null,
        'moving_180_day_volume_buy' => null,
        'moving_180_day_volume_sell' => null,
        'moving_180_day_volume_unknown' => null,
        'moving_24_hour_high' => null,
        'moving_24_hour_low' => null,
        'moving_24_hour_open' => null,
        'moving_24_hour_quote_volume' => null,
        'moving_24_hour_quote_volume_buy' => null,
        'moving_24_hour_quote_volume_sell' => null,
        'moving_24_hour_quote_volume_unknown' => null,
        'moving_24_hour_total_trades' => null,
        'moving_24_hour_total_trades_buy' => null,
        'moving_24_hour_total_trades_sell' => null,
        'moving_24_hour_total_trades_unknown' => null,
        'moving_24_hour_volume' => null,
        'moving_24_hour_volume_buy' => null,
        'moving_24_hour_volume_sell' => null,
        'moving_24_hour_volume_unknown' => null,
        'moving_30_day_high' => null,
        'moving_30_day_low' => null,
        'moving_30_day_open' => null,
        'moving_30_day_quote_volume' => null,
        'moving_30_day_quote_volume_buy' => null,
        'moving_30_day_quote_volume_sell' => null,
        'moving_30_day_quote_volume_unknown' => null,
        'moving_30_day_total_trades' => null,
        'moving_30_day_total_trades_buy' => null,
        'moving_30_day_total_trades_sell' => null,
        'moving_30_day_total_trades_unknown' => null,
        'moving_30_day_volume' => null,
        'moving_30_day_volume_buy' => null,
        'moving_30_day_volume_sell' => null,
        'moving_30_day_volume_unknown' => null,
        'moving_365_day_high' => null,
        'moving_365_day_low' => null,
        'moving_365_day_open' => null,
        'moving_365_day_quote_volume' => null,
        'moving_365_day_quote_volume_buy' => null,
        'moving_365_day_quote_volume_sell' => null,
        'moving_365_day_quote_volume_unknown' => null,
        'moving_365_day_total_trades' => null,
        'moving_365_day_total_trades_buy' => null,
        'moving_365_day_total_trades_sell' => null,
        'moving_365_day_total_trades_unknown' => null,
        'moving_365_day_volume' => null,
        'moving_365_day_volume_buy' => null,
        'moving_365_day_volume_sell' => null,
        'moving_365_day_volume_unknown' => null,
        'moving_7_day_high' => null,
        'moving_7_day_low' => null,
        'moving_7_day_open' => null,
        'moving_7_day_quote_volume' => null,
        'moving_7_day_quote_volume_buy' => null,
        'moving_7_day_quote_volume_sell' => null,
        'moving_7_day_quote_volume_unknown' => null,
        'moving_7_day_total_trades' => null,
        'moving_7_day_total_trades_buy' => null,
        'moving_7_day_total_trades_sell' => null,
        'moving_7_day_total_trades_unknown' => null,
        'moving_7_day_volume' => null,
        'moving_7_day_volume_buy' => null,
        'moving_7_day_volume_sell' => null,
        'moving_7_day_volume_unknown' => null,
        'moving_90_day_high' => null,
        'moving_90_day_low' => null,
        'moving_90_day_open' => null,
        'moving_90_day_quote_volume' => null,
        'moving_90_day_quote_volume_buy' => null,
        'moving_90_day_quote_volume_sell' => null,
        'moving_90_day_quote_volume_unknown' => null,
        'moving_90_day_total_trades' => null,
        'moving_90_day_total_trades_buy' => null,
        'moving_90_day_total_trades_sell' => null,
        'moving_90_day_total_trades_unknown' => null,
        'moving_90_day_volume' => null,
        'moving_90_day_volume_buy' => null,
        'moving_90_day_volume_sell' => null,
        'moving_90_day_volume_unknown' => null,
        'price' => null,
        'price_flag' => null,
        'price_last_update_ts' => null,
        'quote' => null,
        'top_ask_last_update_ts' => null,
        'top_ask_price' => null,
        'top_ask_quantity' => null,
        'top_bid_last_update_ts' => null,
        'top_bid_price' => null,
        'top_bid_quantity' => null,
        'type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'base' => false,
		'ccseq' => false,
		'current_day_high' => false,
		'current_day_low' => false,
		'current_day_open' => false,
		'current_day_quote_volume' => false,
		'current_day_quote_volume_buy' => false,
		'current_day_quote_volume_sell' => false,
		'current_day_quote_volume_unknown' => false,
		'current_day_total_trades' => false,
		'current_day_total_trades_buy' => false,
		'current_day_total_trades_sell' => false,
		'current_day_total_trades_unknown' => false,
		'current_day_volume' => false,
		'current_day_volume_buy' => false,
		'current_day_volume_sell' => false,
		'current_day_volume_unknown' => false,
		'current_hour_high' => false,
		'current_hour_low' => false,
		'current_hour_open' => false,
		'current_hour_quote_volume' => false,
		'current_hour_quote_volume_buy' => false,
		'current_hour_quote_volume_sell' => false,
		'current_hour_quote_volume_unknown' => false,
		'current_hour_total_trades' => false,
		'current_hour_total_trades_buy' => false,
		'current_hour_total_trades_sell' => false,
		'current_hour_total_trades_unknown' => false,
		'current_hour_volume' => false,
		'current_hour_volume_buy' => false,
		'current_hour_volume_sell' => false,
		'current_hour_volume_unknown' => false,
		'current_month_high' => false,
		'current_month_low' => false,
		'current_month_open' => false,
		'current_month_quote_volume' => false,
		'current_month_quote_volume_buy' => false,
		'current_month_quote_volume_sell' => false,
		'current_month_quote_volume_unknown' => false,
		'current_month_total_trades' => false,
		'current_month_total_trades_buy' => false,
		'current_month_total_trades_sell' => false,
		'current_month_total_trades_unknown' => false,
		'current_month_volume' => false,
		'current_month_volume_buy' => false,
		'current_month_volume_sell' => false,
		'current_month_volume_unknown' => false,
		'current_week_high' => false,
		'current_week_low' => false,
		'current_week_open' => false,
		'current_week_quote_volume' => false,
		'current_week_quote_volume_buy' => false,
		'current_week_quote_volume_sell' => false,
		'current_week_quote_volume_unknown' => false,
		'current_week_total_trades' => false,
		'current_week_total_trades_buy' => false,
		'current_week_total_trades_sell' => false,
		'current_week_total_trades_unknown' => false,
		'current_week_volume' => false,
		'current_week_volume_buy' => false,
		'current_week_volume_sell' => false,
		'current_week_volume_unknown' => false,
		'current_year_high' => false,
		'current_year_low' => false,
		'current_year_open' => false,
		'current_year_quote_volume' => false,
		'current_year_quote_volume_buy' => false,
		'current_year_quote_volume_sell' => false,
		'current_year_quote_volume_unknown' => false,
		'current_year_total_trades' => false,
		'current_year_total_trades_buy' => false,
		'current_year_total_trades_sell' => false,
		'current_year_total_trades_unknown' => false,
		'current_year_volume' => false,
		'current_year_volume_buy' => false,
		'current_year_volume_sell' => false,
		'current_year_volume_unknown' => false,
		'instrument' => false,
		'last_processed_trade_ccseq' => false,
		'last_processed_trade_price' => false,
		'last_processed_trade_quantity' => false,
		'last_processed_trade_quote_quantity' => false,
		'last_processed_trade_side' => false,
		'last_processed_trade_ts' => false,
		'last_trade_ccseq' => false,
		'last_trade_id' => false,
		'last_trade_quantity' => false,
		'last_trade_quote_quantity' => false,
		'last_trade_side' => false,
		'lifetime_first_trade_ts' => false,
		'lifetime_high' => false,
		'lifetime_high_ts' => false,
		'lifetime_low' => false,
		'lifetime_low_ts' => false,
		'lifetime_open' => false,
		'lifetime_quote_volume' => false,
		'lifetime_quote_volume_buy' => false,
		'lifetime_quote_volume_sell' => false,
		'lifetime_quote_volume_unknown' => false,
		'lifetime_total_trades' => false,
		'lifetime_total_trades_buy' => false,
		'lifetime_total_trades_sell' => false,
		'lifetime_total_trades_unknown' => false,
		'lifetime_volume' => false,
		'lifetime_volume_buy' => false,
		'lifetime_volume_sell' => false,
		'lifetime_volume_unknown' => false,
		'mapped_instrument' => false,
		'market' => false,
		'moving_180_day_high' => false,
		'moving_180_day_low' => false,
		'moving_180_day_open' => false,
		'moving_180_day_quote_volume' => false,
		'moving_180_day_quote_volume_buy' => false,
		'moving_180_day_quote_volume_sell' => false,
		'moving_180_day_quote_volume_unknown' => false,
		'moving_180_day_total_trades' => false,
		'moving_180_day_total_trades_buy' => false,
		'moving_180_day_total_trades_sell' => false,
		'moving_180_day_total_trades_unknown' => false,
		'moving_180_day_volume' => false,
		'moving_180_day_volume_buy' => false,
		'moving_180_day_volume_sell' => false,
		'moving_180_day_volume_unknown' => false,
		'moving_24_hour_high' => false,
		'moving_24_hour_low' => false,
		'moving_24_hour_open' => false,
		'moving_24_hour_quote_volume' => false,
		'moving_24_hour_quote_volume_buy' => false,
		'moving_24_hour_quote_volume_sell' => false,
		'moving_24_hour_quote_volume_unknown' => false,
		'moving_24_hour_total_trades' => false,
		'moving_24_hour_total_trades_buy' => false,
		'moving_24_hour_total_trades_sell' => false,
		'moving_24_hour_total_trades_unknown' => false,
		'moving_24_hour_volume' => false,
		'moving_24_hour_volume_buy' => false,
		'moving_24_hour_volume_sell' => false,
		'moving_24_hour_volume_unknown' => false,
		'moving_30_day_high' => false,
		'moving_30_day_low' => false,
		'moving_30_day_open' => false,
		'moving_30_day_quote_volume' => false,
		'moving_30_day_quote_volume_buy' => false,
		'moving_30_day_quote_volume_sell' => false,
		'moving_30_day_quote_volume_unknown' => false,
		'moving_30_day_total_trades' => false,
		'moving_30_day_total_trades_buy' => false,
		'moving_30_day_total_trades_sell' => false,
		'moving_30_day_total_trades_unknown' => false,
		'moving_30_day_volume' => false,
		'moving_30_day_volume_buy' => false,
		'moving_30_day_volume_sell' => false,
		'moving_30_day_volume_unknown' => false,
		'moving_365_day_high' => false,
		'moving_365_day_low' => false,
		'moving_365_day_open' => false,
		'moving_365_day_quote_volume' => false,
		'moving_365_day_quote_volume_buy' => false,
		'moving_365_day_quote_volume_sell' => false,
		'moving_365_day_quote_volume_unknown' => false,
		'moving_365_day_total_trades' => false,
		'moving_365_day_total_trades_buy' => false,
		'moving_365_day_total_trades_sell' => false,
		'moving_365_day_total_trades_unknown' => false,
		'moving_365_day_volume' => false,
		'moving_365_day_volume_buy' => false,
		'moving_365_day_volume_sell' => false,
		'moving_365_day_volume_unknown' => false,
		'moving_7_day_high' => false,
		'moving_7_day_low' => false,
		'moving_7_day_open' => false,
		'moving_7_day_quote_volume' => false,
		'moving_7_day_quote_volume_buy' => false,
		'moving_7_day_quote_volume_sell' => false,
		'moving_7_day_quote_volume_unknown' => false,
		'moving_7_day_total_trades' => false,
		'moving_7_day_total_trades_buy' => false,
		'moving_7_day_total_trades_sell' => false,
		'moving_7_day_total_trades_unknown' => false,
		'moving_7_day_volume' => false,
		'moving_7_day_volume_buy' => false,
		'moving_7_day_volume_sell' => false,
		'moving_7_day_volume_unknown' => false,
		'moving_90_day_high' => false,
		'moving_90_day_low' => false,
		'moving_90_day_open' => false,
		'moving_90_day_quote_volume' => false,
		'moving_90_day_quote_volume_buy' => false,
		'moving_90_day_quote_volume_sell' => false,
		'moving_90_day_quote_volume_unknown' => false,
		'moving_90_day_total_trades' => false,
		'moving_90_day_total_trades_buy' => false,
		'moving_90_day_total_trades_sell' => false,
		'moving_90_day_total_trades_unknown' => false,
		'moving_90_day_volume' => false,
		'moving_90_day_volume_buy' => false,
		'moving_90_day_volume_sell' => false,
		'moving_90_day_volume_unknown' => false,
		'price' => false,
		'price_flag' => false,
		'price_last_update_ts' => false,
		'quote' => false,
		'top_ask_last_update_ts' => false,
		'top_ask_price' => false,
		'top_ask_quantity' => false,
		'top_bid_last_update_ts' => false,
		'top_bid_price' => false,
		'top_bid_quantity' => false,
		'type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'base' => 'BASE',
        'ccseq' => 'CCSEQ',
        'current_day_high' => 'CURRENT_DAY_HIGH',
        'current_day_low' => 'CURRENT_DAY_LOW',
        'current_day_open' => 'CURRENT_DAY_OPEN',
        'current_day_quote_volume' => 'CURRENT_DAY_QUOTE_VOLUME',
        'current_day_quote_volume_buy' => 'CURRENT_DAY_QUOTE_VOLUME_BUY',
        'current_day_quote_volume_sell' => 'CURRENT_DAY_QUOTE_VOLUME_SELL',
        'current_day_quote_volume_unknown' => 'CURRENT_DAY_QUOTE_VOLUME_UNKNOWN',
        'current_day_total_trades' => 'CURRENT_DAY_TOTAL_TRADES',
        'current_day_total_trades_buy' => 'CURRENT_DAY_TOTAL_TRADES_BUY',
        'current_day_total_trades_sell' => 'CURRENT_DAY_TOTAL_TRADES_SELL',
        'current_day_total_trades_unknown' => 'CURRENT_DAY_TOTAL_TRADES_UNKNOWN',
        'current_day_volume' => 'CURRENT_DAY_VOLUME',
        'current_day_volume_buy' => 'CURRENT_DAY_VOLUME_BUY',
        'current_day_volume_sell' => 'CURRENT_DAY_VOLUME_SELL',
        'current_day_volume_unknown' => 'CURRENT_DAY_VOLUME_UNKNOWN',
        'current_hour_high' => 'CURRENT_HOUR_HIGH',
        'current_hour_low' => 'CURRENT_HOUR_LOW',
        'current_hour_open' => 'CURRENT_HOUR_OPEN',
        'current_hour_quote_volume' => 'CURRENT_HOUR_QUOTE_VOLUME',
        'current_hour_quote_volume_buy' => 'CURRENT_HOUR_QUOTE_VOLUME_BUY',
        'current_hour_quote_volume_sell' => 'CURRENT_HOUR_QUOTE_VOLUME_SELL',
        'current_hour_quote_volume_unknown' => 'CURRENT_HOUR_QUOTE_VOLUME_UNKNOWN',
        'current_hour_total_trades' => 'CURRENT_HOUR_TOTAL_TRADES',
        'current_hour_total_trades_buy' => 'CURRENT_HOUR_TOTAL_TRADES_BUY',
        'current_hour_total_trades_sell' => 'CURRENT_HOUR_TOTAL_TRADES_SELL',
        'current_hour_total_trades_unknown' => 'CURRENT_HOUR_TOTAL_TRADES_UNKNOWN',
        'current_hour_volume' => 'CURRENT_HOUR_VOLUME',
        'current_hour_volume_buy' => 'CURRENT_HOUR_VOLUME_BUY',
        'current_hour_volume_sell' => 'CURRENT_HOUR_VOLUME_SELL',
        'current_hour_volume_unknown' => 'CURRENT_HOUR_VOLUME_UNKNOWN',
        'current_month_high' => 'CURRENT_MONTH_HIGH',
        'current_month_low' => 'CURRENT_MONTH_LOW',
        'current_month_open' => 'CURRENT_MONTH_OPEN',
        'current_month_quote_volume' => 'CURRENT_MONTH_QUOTE_VOLUME',
        'current_month_quote_volume_buy' => 'CURRENT_MONTH_QUOTE_VOLUME_BUY',
        'current_month_quote_volume_sell' => 'CURRENT_MONTH_QUOTE_VOLUME_SELL',
        'current_month_quote_volume_unknown' => 'CURRENT_MONTH_QUOTE_VOLUME_UNKNOWN',
        'current_month_total_trades' => 'CURRENT_MONTH_TOTAL_TRADES',
        'current_month_total_trades_buy' => 'CURRENT_MONTH_TOTAL_TRADES_BUY',
        'current_month_total_trades_sell' => 'CURRENT_MONTH_TOTAL_TRADES_SELL',
        'current_month_total_trades_unknown' => 'CURRENT_MONTH_TOTAL_TRADES_UNKNOWN',
        'current_month_volume' => 'CURRENT_MONTH_VOLUME',
        'current_month_volume_buy' => 'CURRENT_MONTH_VOLUME_BUY',
        'current_month_volume_sell' => 'CURRENT_MONTH_VOLUME_SELL',
        'current_month_volume_unknown' => 'CURRENT_MONTH_VOLUME_UNKNOWN',
        'current_week_high' => 'CURRENT_WEEK_HIGH',
        'current_week_low' => 'CURRENT_WEEK_LOW',
        'current_week_open' => 'CURRENT_WEEK_OPEN',
        'current_week_quote_volume' => 'CURRENT_WEEK_QUOTE_VOLUME',
        'current_week_quote_volume_buy' => 'CURRENT_WEEK_QUOTE_VOLUME_BUY',
        'current_week_quote_volume_sell' => 'CURRENT_WEEK_QUOTE_VOLUME_SELL',
        'current_week_quote_volume_unknown' => 'CURRENT_WEEK_QUOTE_VOLUME_UNKNOWN',
        'current_week_total_trades' => 'CURRENT_WEEK_TOTAL_TRADES',
        'current_week_total_trades_buy' => 'CURRENT_WEEK_TOTAL_TRADES_BUY',
        'current_week_total_trades_sell' => 'CURRENT_WEEK_TOTAL_TRADES_SELL',
        'current_week_total_trades_unknown' => 'CURRENT_WEEK_TOTAL_TRADES_UNKNOWN',
        'current_week_volume' => 'CURRENT_WEEK_VOLUME',
        'current_week_volume_buy' => 'CURRENT_WEEK_VOLUME_BUY',
        'current_week_volume_sell' => 'CURRENT_WEEK_VOLUME_SELL',
        'current_week_volume_unknown' => 'CURRENT_WEEK_VOLUME_UNKNOWN',
        'current_year_high' => 'CURRENT_YEAR_HIGH',
        'current_year_low' => 'CURRENT_YEAR_LOW',
        'current_year_open' => 'CURRENT_YEAR_OPEN',
        'current_year_quote_volume' => 'CURRENT_YEAR_QUOTE_VOLUME',
        'current_year_quote_volume_buy' => 'CURRENT_YEAR_QUOTE_VOLUME_BUY',
        'current_year_quote_volume_sell' => 'CURRENT_YEAR_QUOTE_VOLUME_SELL',
        'current_year_quote_volume_unknown' => 'CURRENT_YEAR_QUOTE_VOLUME_UNKNOWN',
        'current_year_total_trades' => 'CURRENT_YEAR_TOTAL_TRADES',
        'current_year_total_trades_buy' => 'CURRENT_YEAR_TOTAL_TRADES_BUY',
        'current_year_total_trades_sell' => 'CURRENT_YEAR_TOTAL_TRADES_SELL',
        'current_year_total_trades_unknown' => 'CURRENT_YEAR_TOTAL_TRADES_UNKNOWN',
        'current_year_volume' => 'CURRENT_YEAR_VOLUME',
        'current_year_volume_buy' => 'CURRENT_YEAR_VOLUME_BUY',
        'current_year_volume_sell' => 'CURRENT_YEAR_VOLUME_SELL',
        'current_year_volume_unknown' => 'CURRENT_YEAR_VOLUME_UNKNOWN',
        'instrument' => 'INSTRUMENT',
        'last_processed_trade_ccseq' => 'LAST_PROCESSED_TRADE_CCSEQ',
        'last_processed_trade_price' => 'LAST_PROCESSED_TRADE_PRICE',
        'last_processed_trade_quantity' => 'LAST_PROCESSED_TRADE_QUANTITY',
        'last_processed_trade_quote_quantity' => 'LAST_PROCESSED_TRADE_QUOTE_QUANTITY',
        'last_processed_trade_side' => 'LAST_PROCESSED_TRADE_SIDE',
        'last_processed_trade_ts' => 'LAST_PROCESSED_TRADE_TS',
        'last_trade_ccseq' => 'LAST_TRADE_CCSEQ',
        'last_trade_id' => 'LAST_TRADE_ID',
        'last_trade_quantity' => 'LAST_TRADE_QUANTITY',
        'last_trade_quote_quantity' => 'LAST_TRADE_QUOTE_QUANTITY',
        'last_trade_side' => 'LAST_TRADE_SIDE',
        'lifetime_first_trade_ts' => 'LIFETIME_FIRST_TRADE_TS',
        'lifetime_high' => 'LIFETIME_HIGH',
        'lifetime_high_ts' => 'LIFETIME_HIGH_TS',
        'lifetime_low' => 'LIFETIME_LOW',
        'lifetime_low_ts' => 'LIFETIME_LOW_TS',
        'lifetime_open' => 'LIFETIME_OPEN',
        'lifetime_quote_volume' => 'LIFETIME_QUOTE_VOLUME',
        'lifetime_quote_volume_buy' => 'LIFETIME_QUOTE_VOLUME_BUY',
        'lifetime_quote_volume_sell' => 'LIFETIME_QUOTE_VOLUME_SELL',
        'lifetime_quote_volume_unknown' => 'LIFETIME_QUOTE_VOLUME_UNKNOWN',
        'lifetime_total_trades' => 'LIFETIME_TOTAL_TRADES',
        'lifetime_total_trades_buy' => 'LIFETIME_TOTAL_TRADES_BUY',
        'lifetime_total_trades_sell' => 'LIFETIME_TOTAL_TRADES_SELL',
        'lifetime_total_trades_unknown' => 'LIFETIME_TOTAL_TRADES_UNKNOWN',
        'lifetime_volume' => 'LIFETIME_VOLUME',
        'lifetime_volume_buy' => 'LIFETIME_VOLUME_BUY',
        'lifetime_volume_sell' => 'LIFETIME_VOLUME_SELL',
        'lifetime_volume_unknown' => 'LIFETIME_VOLUME_UNKNOWN',
        'mapped_instrument' => 'MAPPED_INSTRUMENT',
        'market' => 'MARKET',
        'moving_180_day_high' => 'MOVING_180_DAY_HIGH',
        'moving_180_day_low' => 'MOVING_180_DAY_LOW',
        'moving_180_day_open' => 'MOVING_180_DAY_OPEN',
        'moving_180_day_quote_volume' => 'MOVING_180_DAY_QUOTE_VOLUME',
        'moving_180_day_quote_volume_buy' => 'MOVING_180_DAY_QUOTE_VOLUME_BUY',
        'moving_180_day_quote_volume_sell' => 'MOVING_180_DAY_QUOTE_VOLUME_SELL',
        'moving_180_day_quote_volume_unknown' => 'MOVING_180_DAY_QUOTE_VOLUME_UNKNOWN',
        'moving_180_day_total_trades' => 'MOVING_180_DAY_TOTAL_TRADES',
        'moving_180_day_total_trades_buy' => 'MOVING_180_DAY_TOTAL_TRADES_BUY',
        'moving_180_day_total_trades_sell' => 'MOVING_180_DAY_TOTAL_TRADES_SELL',
        'moving_180_day_total_trades_unknown' => 'MOVING_180_DAY_TOTAL_TRADES_UNKNOWN',
        'moving_180_day_volume' => 'MOVING_180_DAY_VOLUME',
        'moving_180_day_volume_buy' => 'MOVING_180_DAY_VOLUME_BUY',
        'moving_180_day_volume_sell' => 'MOVING_180_DAY_VOLUME_SELL',
        'moving_180_day_volume_unknown' => 'MOVING_180_DAY_VOLUME_UNKNOWN',
        'moving_24_hour_high' => 'MOVING_24_HOUR_HIGH',
        'moving_24_hour_low' => 'MOVING_24_HOUR_LOW',
        'moving_24_hour_open' => 'MOVING_24_HOUR_OPEN',
        'moving_24_hour_quote_volume' => 'MOVING_24_HOUR_QUOTE_VOLUME',
        'moving_24_hour_quote_volume_buy' => 'MOVING_24_HOUR_QUOTE_VOLUME_BUY',
        'moving_24_hour_quote_volume_sell' => 'MOVING_24_HOUR_QUOTE_VOLUME_SELL',
        'moving_24_hour_quote_volume_unknown' => 'MOVING_24_HOUR_QUOTE_VOLUME_UNKNOWN',
        'moving_24_hour_total_trades' => 'MOVING_24_HOUR_TOTAL_TRADES',
        'moving_24_hour_total_trades_buy' => 'MOVING_24_HOUR_TOTAL_TRADES_BUY',
        'moving_24_hour_total_trades_sell' => 'MOVING_24_HOUR_TOTAL_TRADES_SELL',
        'moving_24_hour_total_trades_unknown' => 'MOVING_24_HOUR_TOTAL_TRADES_UNKNOWN',
        'moving_24_hour_volume' => 'MOVING_24_HOUR_VOLUME',
        'moving_24_hour_volume_buy' => 'MOVING_24_HOUR_VOLUME_BUY',
        'moving_24_hour_volume_sell' => 'MOVING_24_HOUR_VOLUME_SELL',
        'moving_24_hour_volume_unknown' => 'MOVING_24_HOUR_VOLUME_UNKNOWN',
        'moving_30_day_high' => 'MOVING_30_DAY_HIGH',
        'moving_30_day_low' => 'MOVING_30_DAY_LOW',
        'moving_30_day_open' => 'MOVING_30_DAY_OPEN',
        'moving_30_day_quote_volume' => 'MOVING_30_DAY_QUOTE_VOLUME',
        'moving_30_day_quote_volume_buy' => 'MOVING_30_DAY_QUOTE_VOLUME_BUY',
        'moving_30_day_quote_volume_sell' => 'MOVING_30_DAY_QUOTE_VOLUME_SELL',
        'moving_30_day_quote_volume_unknown' => 'MOVING_30_DAY_QUOTE_VOLUME_UNKNOWN',
        'moving_30_day_total_trades' => 'MOVING_30_DAY_TOTAL_TRADES',
        'moving_30_day_total_trades_buy' => 'MOVING_30_DAY_TOTAL_TRADES_BUY',
        'moving_30_day_total_trades_sell' => 'MOVING_30_DAY_TOTAL_TRADES_SELL',
        'moving_30_day_total_trades_unknown' => 'MOVING_30_DAY_TOTAL_TRADES_UNKNOWN',
        'moving_30_day_volume' => 'MOVING_30_DAY_VOLUME',
        'moving_30_day_volume_buy' => 'MOVING_30_DAY_VOLUME_BUY',
        'moving_30_day_volume_sell' => 'MOVING_30_DAY_VOLUME_SELL',
        'moving_30_day_volume_unknown' => 'MOVING_30_DAY_VOLUME_UNKNOWN',
        'moving_365_day_high' => 'MOVING_365_DAY_HIGH',
        'moving_365_day_low' => 'MOVING_365_DAY_LOW',
        'moving_365_day_open' => 'MOVING_365_DAY_OPEN',
        'moving_365_day_quote_volume' => 'MOVING_365_DAY_QUOTE_VOLUME',
        'moving_365_day_quote_volume_buy' => 'MOVING_365_DAY_QUOTE_VOLUME_BUY',
        'moving_365_day_quote_volume_sell' => 'MOVING_365_DAY_QUOTE_VOLUME_SELL',
        'moving_365_day_quote_volume_unknown' => 'MOVING_365_DAY_QUOTE_VOLUME_UNKNOWN',
        'moving_365_day_total_trades' => 'MOVING_365_DAY_TOTAL_TRADES',
        'moving_365_day_total_trades_buy' => 'MOVING_365_DAY_TOTAL_TRADES_BUY',
        'moving_365_day_total_trades_sell' => 'MOVING_365_DAY_TOTAL_TRADES_SELL',
        'moving_365_day_total_trades_unknown' => 'MOVING_365_DAY_TOTAL_TRADES_UNKNOWN',
        'moving_365_day_volume' => 'MOVING_365_DAY_VOLUME',
        'moving_365_day_volume_buy' => 'MOVING_365_DAY_VOLUME_BUY',
        'moving_365_day_volume_sell' => 'MOVING_365_DAY_VOLUME_SELL',
        'moving_365_day_volume_unknown' => 'MOVING_365_DAY_VOLUME_UNKNOWN',
        'moving_7_day_high' => 'MOVING_7_DAY_HIGH',
        'moving_7_day_low' => 'MOVING_7_DAY_LOW',
        'moving_7_day_open' => 'MOVING_7_DAY_OPEN',
        'moving_7_day_quote_volume' => 'MOVING_7_DAY_QUOTE_VOLUME',
        'moving_7_day_quote_volume_buy' => 'MOVING_7_DAY_QUOTE_VOLUME_BUY',
        'moving_7_day_quote_volume_sell' => 'MOVING_7_DAY_QUOTE_VOLUME_SELL',
        'moving_7_day_quote_volume_unknown' => 'MOVING_7_DAY_QUOTE_VOLUME_UNKNOWN',
        'moving_7_day_total_trades' => 'MOVING_7_DAY_TOTAL_TRADES',
        'moving_7_day_total_trades_buy' => 'MOVING_7_DAY_TOTAL_TRADES_BUY',
        'moving_7_day_total_trades_sell' => 'MOVING_7_DAY_TOTAL_TRADES_SELL',
        'moving_7_day_total_trades_unknown' => 'MOVING_7_DAY_TOTAL_TRADES_UNKNOWN',
        'moving_7_day_volume' => 'MOVING_7_DAY_VOLUME',
        'moving_7_day_volume_buy' => 'MOVING_7_DAY_VOLUME_BUY',
        'moving_7_day_volume_sell' => 'MOVING_7_DAY_VOLUME_SELL',
        'moving_7_day_volume_unknown' => 'MOVING_7_DAY_VOLUME_UNKNOWN',
        'moving_90_day_high' => 'MOVING_90_DAY_HIGH',
        'moving_90_day_low' => 'MOVING_90_DAY_LOW',
        'moving_90_day_open' => 'MOVING_90_DAY_OPEN',
        'moving_90_day_quote_volume' => 'MOVING_90_DAY_QUOTE_VOLUME',
        'moving_90_day_quote_volume_buy' => 'MOVING_90_DAY_QUOTE_VOLUME_BUY',
        'moving_90_day_quote_volume_sell' => 'MOVING_90_DAY_QUOTE_VOLUME_SELL',
        'moving_90_day_quote_volume_unknown' => 'MOVING_90_DAY_QUOTE_VOLUME_UNKNOWN',
        'moving_90_day_total_trades' => 'MOVING_90_DAY_TOTAL_TRADES',
        'moving_90_day_total_trades_buy' => 'MOVING_90_DAY_TOTAL_TRADES_BUY',
        'moving_90_day_total_trades_sell' => 'MOVING_90_DAY_TOTAL_TRADES_SELL',
        'moving_90_day_total_trades_unknown' => 'MOVING_90_DAY_TOTAL_TRADES_UNKNOWN',
        'moving_90_day_volume' => 'MOVING_90_DAY_VOLUME',
        'moving_90_day_volume_buy' => 'MOVING_90_DAY_VOLUME_BUY',
        'moving_90_day_volume_sell' => 'MOVING_90_DAY_VOLUME_SELL',
        'moving_90_day_volume_unknown' => 'MOVING_90_DAY_VOLUME_UNKNOWN',
        'price' => 'PRICE',
        'price_flag' => 'PRICE_FLAG',
        'price_last_update_ts' => 'PRICE_LAST_UPDATE_TS',
        'quote' => 'QUOTE',
        'top_ask_last_update_ts' => 'TOP_ASK_LAST_UPDATE_TS',
        'top_ask_price' => 'TOP_ASK_PRICE',
        'top_ask_quantity' => 'TOP_ASK_QUANTITY',
        'top_bid_last_update_ts' => 'TOP_BID_LAST_UPDATE_TS',
        'top_bid_price' => 'TOP_BID_PRICE',
        'top_bid_quantity' => 'TOP_BID_QUANTITY',
        'type' => 'TYPE'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'base' => 'setBase',
        'ccseq' => 'setCcseq',
        'current_day_high' => 'setCurrentDayHigh',
        'current_day_low' => 'setCurrentDayLow',
        'current_day_open' => 'setCurrentDayOpen',
        'current_day_quote_volume' => 'setCurrentDayQuoteVolume',
        'current_day_quote_volume_buy' => 'setCurrentDayQuoteVolumeBuy',
        'current_day_quote_volume_sell' => 'setCurrentDayQuoteVolumeSell',
        'current_day_quote_volume_unknown' => 'setCurrentDayQuoteVolumeUnknown',
        'current_day_total_trades' => 'setCurrentDayTotalTrades',
        'current_day_total_trades_buy' => 'setCurrentDayTotalTradesBuy',
        'current_day_total_trades_sell' => 'setCurrentDayTotalTradesSell',
        'current_day_total_trades_unknown' => 'setCurrentDayTotalTradesUnknown',
        'current_day_volume' => 'setCurrentDayVolume',
        'current_day_volume_buy' => 'setCurrentDayVolumeBuy',
        'current_day_volume_sell' => 'setCurrentDayVolumeSell',
        'current_day_volume_unknown' => 'setCurrentDayVolumeUnknown',
        'current_hour_high' => 'setCurrentHourHigh',
        'current_hour_low' => 'setCurrentHourLow',
        'current_hour_open' => 'setCurrentHourOpen',
        'current_hour_quote_volume' => 'setCurrentHourQuoteVolume',
        'current_hour_quote_volume_buy' => 'setCurrentHourQuoteVolumeBuy',
        'current_hour_quote_volume_sell' => 'setCurrentHourQuoteVolumeSell',
        'current_hour_quote_volume_unknown' => 'setCurrentHourQuoteVolumeUnknown',
        'current_hour_total_trades' => 'setCurrentHourTotalTrades',
        'current_hour_total_trades_buy' => 'setCurrentHourTotalTradesBuy',
        'current_hour_total_trades_sell' => 'setCurrentHourTotalTradesSell',
        'current_hour_total_trades_unknown' => 'setCurrentHourTotalTradesUnknown',
        'current_hour_volume' => 'setCurrentHourVolume',
        'current_hour_volume_buy' => 'setCurrentHourVolumeBuy',
        'current_hour_volume_sell' => 'setCurrentHourVolumeSell',
        'current_hour_volume_unknown' => 'setCurrentHourVolumeUnknown',
        'current_month_high' => 'setCurrentMonthHigh',
        'current_month_low' => 'setCurrentMonthLow',
        'current_month_open' => 'setCurrentMonthOpen',
        'current_month_quote_volume' => 'setCurrentMonthQuoteVolume',
        'current_month_quote_volume_buy' => 'setCurrentMonthQuoteVolumeBuy',
        'current_month_quote_volume_sell' => 'setCurrentMonthQuoteVolumeSell',
        'current_month_quote_volume_unknown' => 'setCurrentMonthQuoteVolumeUnknown',
        'current_month_total_trades' => 'setCurrentMonthTotalTrades',
        'current_month_total_trades_buy' => 'setCurrentMonthTotalTradesBuy',
        'current_month_total_trades_sell' => 'setCurrentMonthTotalTradesSell',
        'current_month_total_trades_unknown' => 'setCurrentMonthTotalTradesUnknown',
        'current_month_volume' => 'setCurrentMonthVolume',
        'current_month_volume_buy' => 'setCurrentMonthVolumeBuy',
        'current_month_volume_sell' => 'setCurrentMonthVolumeSell',
        'current_month_volume_unknown' => 'setCurrentMonthVolumeUnknown',
        'current_week_high' => 'setCurrentWeekHigh',
        'current_week_low' => 'setCurrentWeekLow',
        'current_week_open' => 'setCurrentWeekOpen',
        'current_week_quote_volume' => 'setCurrentWeekQuoteVolume',
        'current_week_quote_volume_buy' => 'setCurrentWeekQuoteVolumeBuy',
        'current_week_quote_volume_sell' => 'setCurrentWeekQuoteVolumeSell',
        'current_week_quote_volume_unknown' => 'setCurrentWeekQuoteVolumeUnknown',
        'current_week_total_trades' => 'setCurrentWeekTotalTrades',
        'current_week_total_trades_buy' => 'setCurrentWeekTotalTradesBuy',
        'current_week_total_trades_sell' => 'setCurrentWeekTotalTradesSell',
        'current_week_total_trades_unknown' => 'setCurrentWeekTotalTradesUnknown',
        'current_week_volume' => 'setCurrentWeekVolume',
        'current_week_volume_buy' => 'setCurrentWeekVolumeBuy',
        'current_week_volume_sell' => 'setCurrentWeekVolumeSell',
        'current_week_volume_unknown' => 'setCurrentWeekVolumeUnknown',
        'current_year_high' => 'setCurrentYearHigh',
        'current_year_low' => 'setCurrentYearLow',
        'current_year_open' => 'setCurrentYearOpen',
        'current_year_quote_volume' => 'setCurrentYearQuoteVolume',
        'current_year_quote_volume_buy' => 'setCurrentYearQuoteVolumeBuy',
        'current_year_quote_volume_sell' => 'setCurrentYearQuoteVolumeSell',
        'current_year_quote_volume_unknown' => 'setCurrentYearQuoteVolumeUnknown',
        'current_year_total_trades' => 'setCurrentYearTotalTrades',
        'current_year_total_trades_buy' => 'setCurrentYearTotalTradesBuy',
        'current_year_total_trades_sell' => 'setCurrentYearTotalTradesSell',
        'current_year_total_trades_unknown' => 'setCurrentYearTotalTradesUnknown',
        'current_year_volume' => 'setCurrentYearVolume',
        'current_year_volume_buy' => 'setCurrentYearVolumeBuy',
        'current_year_volume_sell' => 'setCurrentYearVolumeSell',
        'current_year_volume_unknown' => 'setCurrentYearVolumeUnknown',
        'instrument' => 'setInstrument',
        'last_processed_trade_ccseq' => 'setLastProcessedTradeCcseq',
        'last_processed_trade_price' => 'setLastProcessedTradePrice',
        'last_processed_trade_quantity' => 'setLastProcessedTradeQuantity',
        'last_processed_trade_quote_quantity' => 'setLastProcessedTradeQuoteQuantity',
        'last_processed_trade_side' => 'setLastProcessedTradeSide',
        'last_processed_trade_ts' => 'setLastProcessedTradeTs',
        'last_trade_ccseq' => 'setLastTradeCcseq',
        'last_trade_id' => 'setLastTradeId',
        'last_trade_quantity' => 'setLastTradeQuantity',
        'last_trade_quote_quantity' => 'setLastTradeQuoteQuantity',
        'last_trade_side' => 'setLastTradeSide',
        'lifetime_first_trade_ts' => 'setLifetimeFirstTradeTs',
        'lifetime_high' => 'setLifetimeHigh',
        'lifetime_high_ts' => 'setLifetimeHighTs',
        'lifetime_low' => 'setLifetimeLow',
        'lifetime_low_ts' => 'setLifetimeLowTs',
        'lifetime_open' => 'setLifetimeOpen',
        'lifetime_quote_volume' => 'setLifetimeQuoteVolume',
        'lifetime_quote_volume_buy' => 'setLifetimeQuoteVolumeBuy',
        'lifetime_quote_volume_sell' => 'setLifetimeQuoteVolumeSell',
        'lifetime_quote_volume_unknown' => 'setLifetimeQuoteVolumeUnknown',
        'lifetime_total_trades' => 'setLifetimeTotalTrades',
        'lifetime_total_trades_buy' => 'setLifetimeTotalTradesBuy',
        'lifetime_total_trades_sell' => 'setLifetimeTotalTradesSell',
        'lifetime_total_trades_unknown' => 'setLifetimeTotalTradesUnknown',
        'lifetime_volume' => 'setLifetimeVolume',
        'lifetime_volume_buy' => 'setLifetimeVolumeBuy',
        'lifetime_volume_sell' => 'setLifetimeVolumeSell',
        'lifetime_volume_unknown' => 'setLifetimeVolumeUnknown',
        'mapped_instrument' => 'setMappedInstrument',
        'market' => 'setMarket',
        'moving_180_day_high' => 'setMoving180DayHigh',
        'moving_180_day_low' => 'setMoving180DayLow',
        'moving_180_day_open' => 'setMoving180DayOpen',
        'moving_180_day_quote_volume' => 'setMoving180DayQuoteVolume',
        'moving_180_day_quote_volume_buy' => 'setMoving180DayQuoteVolumeBuy',
        'moving_180_day_quote_volume_sell' => 'setMoving180DayQuoteVolumeSell',
        'moving_180_day_quote_volume_unknown' => 'setMoving180DayQuoteVolumeUnknown',
        'moving_180_day_total_trades' => 'setMoving180DayTotalTrades',
        'moving_180_day_total_trades_buy' => 'setMoving180DayTotalTradesBuy',
        'moving_180_day_total_trades_sell' => 'setMoving180DayTotalTradesSell',
        'moving_180_day_total_trades_unknown' => 'setMoving180DayTotalTradesUnknown',
        'moving_180_day_volume' => 'setMoving180DayVolume',
        'moving_180_day_volume_buy' => 'setMoving180DayVolumeBuy',
        'moving_180_day_volume_sell' => 'setMoving180DayVolumeSell',
        'moving_180_day_volume_unknown' => 'setMoving180DayVolumeUnknown',
        'moving_24_hour_high' => 'setMoving24HourHigh',
        'moving_24_hour_low' => 'setMoving24HourLow',
        'moving_24_hour_open' => 'setMoving24HourOpen',
        'moving_24_hour_quote_volume' => 'setMoving24HourQuoteVolume',
        'moving_24_hour_quote_volume_buy' => 'setMoving24HourQuoteVolumeBuy',
        'moving_24_hour_quote_volume_sell' => 'setMoving24HourQuoteVolumeSell',
        'moving_24_hour_quote_volume_unknown' => 'setMoving24HourQuoteVolumeUnknown',
        'moving_24_hour_total_trades' => 'setMoving24HourTotalTrades',
        'moving_24_hour_total_trades_buy' => 'setMoving24HourTotalTradesBuy',
        'moving_24_hour_total_trades_sell' => 'setMoving24HourTotalTradesSell',
        'moving_24_hour_total_trades_unknown' => 'setMoving24HourTotalTradesUnknown',
        'moving_24_hour_volume' => 'setMoving24HourVolume',
        'moving_24_hour_volume_buy' => 'setMoving24HourVolumeBuy',
        'moving_24_hour_volume_sell' => 'setMoving24HourVolumeSell',
        'moving_24_hour_volume_unknown' => 'setMoving24HourVolumeUnknown',
        'moving_30_day_high' => 'setMoving30DayHigh',
        'moving_30_day_low' => 'setMoving30DayLow',
        'moving_30_day_open' => 'setMoving30DayOpen',
        'moving_30_day_quote_volume' => 'setMoving30DayQuoteVolume',
        'moving_30_day_quote_volume_buy' => 'setMoving30DayQuoteVolumeBuy',
        'moving_30_day_quote_volume_sell' => 'setMoving30DayQuoteVolumeSell',
        'moving_30_day_quote_volume_unknown' => 'setMoving30DayQuoteVolumeUnknown',
        'moving_30_day_total_trades' => 'setMoving30DayTotalTrades',
        'moving_30_day_total_trades_buy' => 'setMoving30DayTotalTradesBuy',
        'moving_30_day_total_trades_sell' => 'setMoving30DayTotalTradesSell',
        'moving_30_day_total_trades_unknown' => 'setMoving30DayTotalTradesUnknown',
        'moving_30_day_volume' => 'setMoving30DayVolume',
        'moving_30_day_volume_buy' => 'setMoving30DayVolumeBuy',
        'moving_30_day_volume_sell' => 'setMoving30DayVolumeSell',
        'moving_30_day_volume_unknown' => 'setMoving30DayVolumeUnknown',
        'moving_365_day_high' => 'setMoving365DayHigh',
        'moving_365_day_low' => 'setMoving365DayLow',
        'moving_365_day_open' => 'setMoving365DayOpen',
        'moving_365_day_quote_volume' => 'setMoving365DayQuoteVolume',
        'moving_365_day_quote_volume_buy' => 'setMoving365DayQuoteVolumeBuy',
        'moving_365_day_quote_volume_sell' => 'setMoving365DayQuoteVolumeSell',
        'moving_365_day_quote_volume_unknown' => 'setMoving365DayQuoteVolumeUnknown',
        'moving_365_day_total_trades' => 'setMoving365DayTotalTrades',
        'moving_365_day_total_trades_buy' => 'setMoving365DayTotalTradesBuy',
        'moving_365_day_total_trades_sell' => 'setMoving365DayTotalTradesSell',
        'moving_365_day_total_trades_unknown' => 'setMoving365DayTotalTradesUnknown',
        'moving_365_day_volume' => 'setMoving365DayVolume',
        'moving_365_day_volume_buy' => 'setMoving365DayVolumeBuy',
        'moving_365_day_volume_sell' => 'setMoving365DayVolumeSell',
        'moving_365_day_volume_unknown' => 'setMoving365DayVolumeUnknown',
        'moving_7_day_high' => 'setMoving7DayHigh',
        'moving_7_day_low' => 'setMoving7DayLow',
        'moving_7_day_open' => 'setMoving7DayOpen',
        'moving_7_day_quote_volume' => 'setMoving7DayQuoteVolume',
        'moving_7_day_quote_volume_buy' => 'setMoving7DayQuoteVolumeBuy',
        'moving_7_day_quote_volume_sell' => 'setMoving7DayQuoteVolumeSell',
        'moving_7_day_quote_volume_unknown' => 'setMoving7DayQuoteVolumeUnknown',
        'moving_7_day_total_trades' => 'setMoving7DayTotalTrades',
        'moving_7_day_total_trades_buy' => 'setMoving7DayTotalTradesBuy',
        'moving_7_day_total_trades_sell' => 'setMoving7DayTotalTradesSell',
        'moving_7_day_total_trades_unknown' => 'setMoving7DayTotalTradesUnknown',
        'moving_7_day_volume' => 'setMoving7DayVolume',
        'moving_7_day_volume_buy' => 'setMoving7DayVolumeBuy',
        'moving_7_day_volume_sell' => 'setMoving7DayVolumeSell',
        'moving_7_day_volume_unknown' => 'setMoving7DayVolumeUnknown',
        'moving_90_day_high' => 'setMoving90DayHigh',
        'moving_90_day_low' => 'setMoving90DayLow',
        'moving_90_day_open' => 'setMoving90DayOpen',
        'moving_90_day_quote_volume' => 'setMoving90DayQuoteVolume',
        'moving_90_day_quote_volume_buy' => 'setMoving90DayQuoteVolumeBuy',
        'moving_90_day_quote_volume_sell' => 'setMoving90DayQuoteVolumeSell',
        'moving_90_day_quote_volume_unknown' => 'setMoving90DayQuoteVolumeUnknown',
        'moving_90_day_total_trades' => 'setMoving90DayTotalTrades',
        'moving_90_day_total_trades_buy' => 'setMoving90DayTotalTradesBuy',
        'moving_90_day_total_trades_sell' => 'setMoving90DayTotalTradesSell',
        'moving_90_day_total_trades_unknown' => 'setMoving90DayTotalTradesUnknown',
        'moving_90_day_volume' => 'setMoving90DayVolume',
        'moving_90_day_volume_buy' => 'setMoving90DayVolumeBuy',
        'moving_90_day_volume_sell' => 'setMoving90DayVolumeSell',
        'moving_90_day_volume_unknown' => 'setMoving90DayVolumeUnknown',
        'price' => 'setPrice',
        'price_flag' => 'setPriceFlag',
        'price_last_update_ts' => 'setPriceLastUpdateTs',
        'quote' => 'setQuote',
        'top_ask_last_update_ts' => 'setTopAskLastUpdateTs',
        'top_ask_price' => 'setTopAskPrice',
        'top_ask_quantity' => 'setTopAskQuantity',
        'top_bid_last_update_ts' => 'setTopBidLastUpdateTs',
        'top_bid_price' => 'setTopBidPrice',
        'top_bid_quantity' => 'setTopBidQuantity',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'base' => 'getBase',
        'ccseq' => 'getCcseq',
        'current_day_high' => 'getCurrentDayHigh',
        'current_day_low' => 'getCurrentDayLow',
        'current_day_open' => 'getCurrentDayOpen',
        'current_day_quote_volume' => 'getCurrentDayQuoteVolume',
        'current_day_quote_volume_buy' => 'getCurrentDayQuoteVolumeBuy',
        'current_day_quote_volume_sell' => 'getCurrentDayQuoteVolumeSell',
        'current_day_quote_volume_unknown' => 'getCurrentDayQuoteVolumeUnknown',
        'current_day_total_trades' => 'getCurrentDayTotalTrades',
        'current_day_total_trades_buy' => 'getCurrentDayTotalTradesBuy',
        'current_day_total_trades_sell' => 'getCurrentDayTotalTradesSell',
        'current_day_total_trades_unknown' => 'getCurrentDayTotalTradesUnknown',
        'current_day_volume' => 'getCurrentDayVolume',
        'current_day_volume_buy' => 'getCurrentDayVolumeBuy',
        'current_day_volume_sell' => 'getCurrentDayVolumeSell',
        'current_day_volume_unknown' => 'getCurrentDayVolumeUnknown',
        'current_hour_high' => 'getCurrentHourHigh',
        'current_hour_low' => 'getCurrentHourLow',
        'current_hour_open' => 'getCurrentHourOpen',
        'current_hour_quote_volume' => 'getCurrentHourQuoteVolume',
        'current_hour_quote_volume_buy' => 'getCurrentHourQuoteVolumeBuy',
        'current_hour_quote_volume_sell' => 'getCurrentHourQuoteVolumeSell',
        'current_hour_quote_volume_unknown' => 'getCurrentHourQuoteVolumeUnknown',
        'current_hour_total_trades' => 'getCurrentHourTotalTrades',
        'current_hour_total_trades_buy' => 'getCurrentHourTotalTradesBuy',
        'current_hour_total_trades_sell' => 'getCurrentHourTotalTradesSell',
        'current_hour_total_trades_unknown' => 'getCurrentHourTotalTradesUnknown',
        'current_hour_volume' => 'getCurrentHourVolume',
        'current_hour_volume_buy' => 'getCurrentHourVolumeBuy',
        'current_hour_volume_sell' => 'getCurrentHourVolumeSell',
        'current_hour_volume_unknown' => 'getCurrentHourVolumeUnknown',
        'current_month_high' => 'getCurrentMonthHigh',
        'current_month_low' => 'getCurrentMonthLow',
        'current_month_open' => 'getCurrentMonthOpen',
        'current_month_quote_volume' => 'getCurrentMonthQuoteVolume',
        'current_month_quote_volume_buy' => 'getCurrentMonthQuoteVolumeBuy',
        'current_month_quote_volume_sell' => 'getCurrentMonthQuoteVolumeSell',
        'current_month_quote_volume_unknown' => 'getCurrentMonthQuoteVolumeUnknown',
        'current_month_total_trades' => 'getCurrentMonthTotalTrades',
        'current_month_total_trades_buy' => 'getCurrentMonthTotalTradesBuy',
        'current_month_total_trades_sell' => 'getCurrentMonthTotalTradesSell',
        'current_month_total_trades_unknown' => 'getCurrentMonthTotalTradesUnknown',
        'current_month_volume' => 'getCurrentMonthVolume',
        'current_month_volume_buy' => 'getCurrentMonthVolumeBuy',
        'current_month_volume_sell' => 'getCurrentMonthVolumeSell',
        'current_month_volume_unknown' => 'getCurrentMonthVolumeUnknown',
        'current_week_high' => 'getCurrentWeekHigh',
        'current_week_low' => 'getCurrentWeekLow',
        'current_week_open' => 'getCurrentWeekOpen',
        'current_week_quote_volume' => 'getCurrentWeekQuoteVolume',
        'current_week_quote_volume_buy' => 'getCurrentWeekQuoteVolumeBuy',
        'current_week_quote_volume_sell' => 'getCurrentWeekQuoteVolumeSell',
        'current_week_quote_volume_unknown' => 'getCurrentWeekQuoteVolumeUnknown',
        'current_week_total_trades' => 'getCurrentWeekTotalTrades',
        'current_week_total_trades_buy' => 'getCurrentWeekTotalTradesBuy',
        'current_week_total_trades_sell' => 'getCurrentWeekTotalTradesSell',
        'current_week_total_trades_unknown' => 'getCurrentWeekTotalTradesUnknown',
        'current_week_volume' => 'getCurrentWeekVolume',
        'current_week_volume_buy' => 'getCurrentWeekVolumeBuy',
        'current_week_volume_sell' => 'getCurrentWeekVolumeSell',
        'current_week_volume_unknown' => 'getCurrentWeekVolumeUnknown',
        'current_year_high' => 'getCurrentYearHigh',
        'current_year_low' => 'getCurrentYearLow',
        'current_year_open' => 'getCurrentYearOpen',
        'current_year_quote_volume' => 'getCurrentYearQuoteVolume',
        'current_year_quote_volume_buy' => 'getCurrentYearQuoteVolumeBuy',
        'current_year_quote_volume_sell' => 'getCurrentYearQuoteVolumeSell',
        'current_year_quote_volume_unknown' => 'getCurrentYearQuoteVolumeUnknown',
        'current_year_total_trades' => 'getCurrentYearTotalTrades',
        'current_year_total_trades_buy' => 'getCurrentYearTotalTradesBuy',
        'current_year_total_trades_sell' => 'getCurrentYearTotalTradesSell',
        'current_year_total_trades_unknown' => 'getCurrentYearTotalTradesUnknown',
        'current_year_volume' => 'getCurrentYearVolume',
        'current_year_volume_buy' => 'getCurrentYearVolumeBuy',
        'current_year_volume_sell' => 'getCurrentYearVolumeSell',
        'current_year_volume_unknown' => 'getCurrentYearVolumeUnknown',
        'instrument' => 'getInstrument',
        'last_processed_trade_ccseq' => 'getLastProcessedTradeCcseq',
        'last_processed_trade_price' => 'getLastProcessedTradePrice',
        'last_processed_trade_quantity' => 'getLastProcessedTradeQuantity',
        'last_processed_trade_quote_quantity' => 'getLastProcessedTradeQuoteQuantity',
        'last_processed_trade_side' => 'getLastProcessedTradeSide',
        'last_processed_trade_ts' => 'getLastProcessedTradeTs',
        'last_trade_ccseq' => 'getLastTradeCcseq',
        'last_trade_id' => 'getLastTradeId',
        'last_trade_quantity' => 'getLastTradeQuantity',
        'last_trade_quote_quantity' => 'getLastTradeQuoteQuantity',
        'last_trade_side' => 'getLastTradeSide',
        'lifetime_first_trade_ts' => 'getLifetimeFirstTradeTs',
        'lifetime_high' => 'getLifetimeHigh',
        'lifetime_high_ts' => 'getLifetimeHighTs',
        'lifetime_low' => 'getLifetimeLow',
        'lifetime_low_ts' => 'getLifetimeLowTs',
        'lifetime_open' => 'getLifetimeOpen',
        'lifetime_quote_volume' => 'getLifetimeQuoteVolume',
        'lifetime_quote_volume_buy' => 'getLifetimeQuoteVolumeBuy',
        'lifetime_quote_volume_sell' => 'getLifetimeQuoteVolumeSell',
        'lifetime_quote_volume_unknown' => 'getLifetimeQuoteVolumeUnknown',
        'lifetime_total_trades' => 'getLifetimeTotalTrades',
        'lifetime_total_trades_buy' => 'getLifetimeTotalTradesBuy',
        'lifetime_total_trades_sell' => 'getLifetimeTotalTradesSell',
        'lifetime_total_trades_unknown' => 'getLifetimeTotalTradesUnknown',
        'lifetime_volume' => 'getLifetimeVolume',
        'lifetime_volume_buy' => 'getLifetimeVolumeBuy',
        'lifetime_volume_sell' => 'getLifetimeVolumeSell',
        'lifetime_volume_unknown' => 'getLifetimeVolumeUnknown',
        'mapped_instrument' => 'getMappedInstrument',
        'market' => 'getMarket',
        'moving_180_day_high' => 'getMoving180DayHigh',
        'moving_180_day_low' => 'getMoving180DayLow',
        'moving_180_day_open' => 'getMoving180DayOpen',
        'moving_180_day_quote_volume' => 'getMoving180DayQuoteVolume',
        'moving_180_day_quote_volume_buy' => 'getMoving180DayQuoteVolumeBuy',
        'moving_180_day_quote_volume_sell' => 'getMoving180DayQuoteVolumeSell',
        'moving_180_day_quote_volume_unknown' => 'getMoving180DayQuoteVolumeUnknown',
        'moving_180_day_total_trades' => 'getMoving180DayTotalTrades',
        'moving_180_day_total_trades_buy' => 'getMoving180DayTotalTradesBuy',
        'moving_180_day_total_trades_sell' => 'getMoving180DayTotalTradesSell',
        'moving_180_day_total_trades_unknown' => 'getMoving180DayTotalTradesUnknown',
        'moving_180_day_volume' => 'getMoving180DayVolume',
        'moving_180_day_volume_buy' => 'getMoving180DayVolumeBuy',
        'moving_180_day_volume_sell' => 'getMoving180DayVolumeSell',
        'moving_180_day_volume_unknown' => 'getMoving180DayVolumeUnknown',
        'moving_24_hour_high' => 'getMoving24HourHigh',
        'moving_24_hour_low' => 'getMoving24HourLow',
        'moving_24_hour_open' => 'getMoving24HourOpen',
        'moving_24_hour_quote_volume' => 'getMoving24HourQuoteVolume',
        'moving_24_hour_quote_volume_buy' => 'getMoving24HourQuoteVolumeBuy',
        'moving_24_hour_quote_volume_sell' => 'getMoving24HourQuoteVolumeSell',
        'moving_24_hour_quote_volume_unknown' => 'getMoving24HourQuoteVolumeUnknown',
        'moving_24_hour_total_trades' => 'getMoving24HourTotalTrades',
        'moving_24_hour_total_trades_buy' => 'getMoving24HourTotalTradesBuy',
        'moving_24_hour_total_trades_sell' => 'getMoving24HourTotalTradesSell',
        'moving_24_hour_total_trades_unknown' => 'getMoving24HourTotalTradesUnknown',
        'moving_24_hour_volume' => 'getMoving24HourVolume',
        'moving_24_hour_volume_buy' => 'getMoving24HourVolumeBuy',
        'moving_24_hour_volume_sell' => 'getMoving24HourVolumeSell',
        'moving_24_hour_volume_unknown' => 'getMoving24HourVolumeUnknown',
        'moving_30_day_high' => 'getMoving30DayHigh',
        'moving_30_day_low' => 'getMoving30DayLow',
        'moving_30_day_open' => 'getMoving30DayOpen',
        'moving_30_day_quote_volume' => 'getMoving30DayQuoteVolume',
        'moving_30_day_quote_volume_buy' => 'getMoving30DayQuoteVolumeBuy',
        'moving_30_day_quote_volume_sell' => 'getMoving30DayQuoteVolumeSell',
        'moving_30_day_quote_volume_unknown' => 'getMoving30DayQuoteVolumeUnknown',
        'moving_30_day_total_trades' => 'getMoving30DayTotalTrades',
        'moving_30_day_total_trades_buy' => 'getMoving30DayTotalTradesBuy',
        'moving_30_day_total_trades_sell' => 'getMoving30DayTotalTradesSell',
        'moving_30_day_total_trades_unknown' => 'getMoving30DayTotalTradesUnknown',
        'moving_30_day_volume' => 'getMoving30DayVolume',
        'moving_30_day_volume_buy' => 'getMoving30DayVolumeBuy',
        'moving_30_day_volume_sell' => 'getMoving30DayVolumeSell',
        'moving_30_day_volume_unknown' => 'getMoving30DayVolumeUnknown',
        'moving_365_day_high' => 'getMoving365DayHigh',
        'moving_365_day_low' => 'getMoving365DayLow',
        'moving_365_day_open' => 'getMoving365DayOpen',
        'moving_365_day_quote_volume' => 'getMoving365DayQuoteVolume',
        'moving_365_day_quote_volume_buy' => 'getMoving365DayQuoteVolumeBuy',
        'moving_365_day_quote_volume_sell' => 'getMoving365DayQuoteVolumeSell',
        'moving_365_day_quote_volume_unknown' => 'getMoving365DayQuoteVolumeUnknown',
        'moving_365_day_total_trades' => 'getMoving365DayTotalTrades',
        'moving_365_day_total_trades_buy' => 'getMoving365DayTotalTradesBuy',
        'moving_365_day_total_trades_sell' => 'getMoving365DayTotalTradesSell',
        'moving_365_day_total_trades_unknown' => 'getMoving365DayTotalTradesUnknown',
        'moving_365_day_volume' => 'getMoving365DayVolume',
        'moving_365_day_volume_buy' => 'getMoving365DayVolumeBuy',
        'moving_365_day_volume_sell' => 'getMoving365DayVolumeSell',
        'moving_365_day_volume_unknown' => 'getMoving365DayVolumeUnknown',
        'moving_7_day_high' => 'getMoving7DayHigh',
        'moving_7_day_low' => 'getMoving7DayLow',
        'moving_7_day_open' => 'getMoving7DayOpen',
        'moving_7_day_quote_volume' => 'getMoving7DayQuoteVolume',
        'moving_7_day_quote_volume_buy' => 'getMoving7DayQuoteVolumeBuy',
        'moving_7_day_quote_volume_sell' => 'getMoving7DayQuoteVolumeSell',
        'moving_7_day_quote_volume_unknown' => 'getMoving7DayQuoteVolumeUnknown',
        'moving_7_day_total_trades' => 'getMoving7DayTotalTrades',
        'moving_7_day_total_trades_buy' => 'getMoving7DayTotalTradesBuy',
        'moving_7_day_total_trades_sell' => 'getMoving7DayTotalTradesSell',
        'moving_7_day_total_trades_unknown' => 'getMoving7DayTotalTradesUnknown',
        'moving_7_day_volume' => 'getMoving7DayVolume',
        'moving_7_day_volume_buy' => 'getMoving7DayVolumeBuy',
        'moving_7_day_volume_sell' => 'getMoving7DayVolumeSell',
        'moving_7_day_volume_unknown' => 'getMoving7DayVolumeUnknown',
        'moving_90_day_high' => 'getMoving90DayHigh',
        'moving_90_day_low' => 'getMoving90DayLow',
        'moving_90_day_open' => 'getMoving90DayOpen',
        'moving_90_day_quote_volume' => 'getMoving90DayQuoteVolume',
        'moving_90_day_quote_volume_buy' => 'getMoving90DayQuoteVolumeBuy',
        'moving_90_day_quote_volume_sell' => 'getMoving90DayQuoteVolumeSell',
        'moving_90_day_quote_volume_unknown' => 'getMoving90DayQuoteVolumeUnknown',
        'moving_90_day_total_trades' => 'getMoving90DayTotalTrades',
        'moving_90_day_total_trades_buy' => 'getMoving90DayTotalTradesBuy',
        'moving_90_day_total_trades_sell' => 'getMoving90DayTotalTradesSell',
        'moving_90_day_total_trades_unknown' => 'getMoving90DayTotalTradesUnknown',
        'moving_90_day_volume' => 'getMoving90DayVolume',
        'moving_90_day_volume_buy' => 'getMoving90DayVolumeBuy',
        'moving_90_day_volume_sell' => 'getMoving90DayVolumeSell',
        'moving_90_day_volume_unknown' => 'getMoving90DayVolumeUnknown',
        'price' => 'getPrice',
        'price_flag' => 'getPriceFlag',
        'price_last_update_ts' => 'getPriceLastUpdateTs',
        'quote' => 'getQuote',
        'top_ask_last_update_ts' => 'getTopAskLastUpdateTs',
        'top_ask_price' => 'getTopAskPrice',
        'top_ask_quantity' => 'getTopAskQuantity',
        'top_bid_last_update_ts' => 'getTopBidLastUpdateTs',
        'top_bid_price' => 'getTopBidPrice',
        'top_bid_quantity' => 'getTopBidQuantity',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('base', $data ?? [], null);
        $this->setIfExists('ccseq', $data ?? [], null);
        $this->setIfExists('current_day_high', $data ?? [], null);
        $this->setIfExists('current_day_low', $data ?? [], null);
        $this->setIfExists('current_day_open', $data ?? [], null);
        $this->setIfExists('current_day_quote_volume', $data ?? [], null);
        $this->setIfExists('current_day_quote_volume_buy', $data ?? [], null);
        $this->setIfExists('current_day_quote_volume_sell', $data ?? [], null);
        $this->setIfExists('current_day_quote_volume_unknown', $data ?? [], null);
        $this->setIfExists('current_day_total_trades', $data ?? [], null);
        $this->setIfExists('current_day_total_trades_buy', $data ?? [], null);
        $this->setIfExists('current_day_total_trades_sell', $data ?? [], null);
        $this->setIfExists('current_day_total_trades_unknown', $data ?? [], null);
        $this->setIfExists('current_day_volume', $data ?? [], null);
        $this->setIfExists('current_day_volume_buy', $data ?? [], null);
        $this->setIfExists('current_day_volume_sell', $data ?? [], null);
        $this->setIfExists('current_day_volume_unknown', $data ?? [], null);
        $this->setIfExists('current_hour_high', $data ?? [], null);
        $this->setIfExists('current_hour_low', $data ?? [], null);
        $this->setIfExists('current_hour_open', $data ?? [], null);
        $this->setIfExists('current_hour_quote_volume', $data ?? [], null);
        $this->setIfExists('current_hour_quote_volume_buy', $data ?? [], null);
        $this->setIfExists('current_hour_quote_volume_sell', $data ?? [], null);
        $this->setIfExists('current_hour_quote_volume_unknown', $data ?? [], null);
        $this->setIfExists('current_hour_total_trades', $data ?? [], null);
        $this->setIfExists('current_hour_total_trades_buy', $data ?? [], null);
        $this->setIfExists('current_hour_total_trades_sell', $data ?? [], null);
        $this->setIfExists('current_hour_total_trades_unknown', $data ?? [], null);
        $this->setIfExists('current_hour_volume', $data ?? [], null);
        $this->setIfExists('current_hour_volume_buy', $data ?? [], null);
        $this->setIfExists('current_hour_volume_sell', $data ?? [], null);
        $this->setIfExists('current_hour_volume_unknown', $data ?? [], null);
        $this->setIfExists('current_month_high', $data ?? [], null);
        $this->setIfExists('current_month_low', $data ?? [], null);
        $this->setIfExists('current_month_open', $data ?? [], null);
        $this->setIfExists('current_month_quote_volume', $data ?? [], null);
        $this->setIfExists('current_month_quote_volume_buy', $data ?? [], null);
        $this->setIfExists('current_month_quote_volume_sell', $data ?? [], null);
        $this->setIfExists('current_month_quote_volume_unknown', $data ?? [], null);
        $this->setIfExists('current_month_total_trades', $data ?? [], null);
        $this->setIfExists('current_month_total_trades_buy', $data ?? [], null);
        $this->setIfExists('current_month_total_trades_sell', $data ?? [], null);
        $this->setIfExists('current_month_total_trades_unknown', $data ?? [], null);
        $this->setIfExists('current_month_volume', $data ?? [], null);
        $this->setIfExists('current_month_volume_buy', $data ?? [], null);
        $this->setIfExists('current_month_volume_sell', $data ?? [], null);
        $this->setIfExists('current_month_volume_unknown', $data ?? [], null);
        $this->setIfExists('current_week_high', $data ?? [], null);
        $this->setIfExists('current_week_low', $data ?? [], null);
        $this->setIfExists('current_week_open', $data ?? [], null);
        $this->setIfExists('current_week_quote_volume', $data ?? [], null);
        $this->setIfExists('current_week_quote_volume_buy', $data ?? [], null);
        $this->setIfExists('current_week_quote_volume_sell', $data ?? [], null);
        $this->setIfExists('current_week_quote_volume_unknown', $data ?? [], null);
        $this->setIfExists('current_week_total_trades', $data ?? [], null);
        $this->setIfExists('current_week_total_trades_buy', $data ?? [], null);
        $this->setIfExists('current_week_total_trades_sell', $data ?? [], null);
        $this->setIfExists('current_week_total_trades_unknown', $data ?? [], null);
        $this->setIfExists('current_week_volume', $data ?? [], null);
        $this->setIfExists('current_week_volume_buy', $data ?? [], null);
        $this->setIfExists('current_week_volume_sell', $data ?? [], null);
        $this->setIfExists('current_week_volume_unknown', $data ?? [], null);
        $this->setIfExists('current_year_high', $data ?? [], null);
        $this->setIfExists('current_year_low', $data ?? [], null);
        $this->setIfExists('current_year_open', $data ?? [], null);
        $this->setIfExists('current_year_quote_volume', $data ?? [], null);
        $this->setIfExists('current_year_quote_volume_buy', $data ?? [], null);
        $this->setIfExists('current_year_quote_volume_sell', $data ?? [], null);
        $this->setIfExists('current_year_quote_volume_unknown', $data ?? [], null);
        $this->setIfExists('current_year_total_trades', $data ?? [], null);
        $this->setIfExists('current_year_total_trades_buy', $data ?? [], null);
        $this->setIfExists('current_year_total_trades_sell', $data ?? [], null);
        $this->setIfExists('current_year_total_trades_unknown', $data ?? [], null);
        $this->setIfExists('current_year_volume', $data ?? [], null);
        $this->setIfExists('current_year_volume_buy', $data ?? [], null);
        $this->setIfExists('current_year_volume_sell', $data ?? [], null);
        $this->setIfExists('current_year_volume_unknown', $data ?? [], null);
        $this->setIfExists('instrument', $data ?? [], null);
        $this->setIfExists('last_processed_trade_ccseq', $data ?? [], null);
        $this->setIfExists('last_processed_trade_price', $data ?? [], null);
        $this->setIfExists('last_processed_trade_quantity', $data ?? [], null);
        $this->setIfExists('last_processed_trade_quote_quantity', $data ?? [], null);
        $this->setIfExists('last_processed_trade_side', $data ?? [], null);
        $this->setIfExists('last_processed_trade_ts', $data ?? [], null);
        $this->setIfExists('last_trade_ccseq', $data ?? [], null);
        $this->setIfExists('last_trade_id', $data ?? [], null);
        $this->setIfExists('last_trade_quantity', $data ?? [], null);
        $this->setIfExists('last_trade_quote_quantity', $data ?? [], null);
        $this->setIfExists('last_trade_side', $data ?? [], null);
        $this->setIfExists('lifetime_first_trade_ts', $data ?? [], null);
        $this->setIfExists('lifetime_high', $data ?? [], null);
        $this->setIfExists('lifetime_high_ts', $data ?? [], null);
        $this->setIfExists('lifetime_low', $data ?? [], null);
        $this->setIfExists('lifetime_low_ts', $data ?? [], null);
        $this->setIfExists('lifetime_open', $data ?? [], null);
        $this->setIfExists('lifetime_quote_volume', $data ?? [], null);
        $this->setIfExists('lifetime_quote_volume_buy', $data ?? [], null);
        $this->setIfExists('lifetime_quote_volume_sell', $data ?? [], null);
        $this->setIfExists('lifetime_quote_volume_unknown', $data ?? [], null);
        $this->setIfExists('lifetime_total_trades', $data ?? [], null);
        $this->setIfExists('lifetime_total_trades_buy', $data ?? [], null);
        $this->setIfExists('lifetime_total_trades_sell', $data ?? [], null);
        $this->setIfExists('lifetime_total_trades_unknown', $data ?? [], null);
        $this->setIfExists('lifetime_volume', $data ?? [], null);
        $this->setIfExists('lifetime_volume_buy', $data ?? [], null);
        $this->setIfExists('lifetime_volume_sell', $data ?? [], null);
        $this->setIfExists('lifetime_volume_unknown', $data ?? [], null);
        $this->setIfExists('mapped_instrument', $data ?? [], null);
        $this->setIfExists('market', $data ?? [], null);
        $this->setIfExists('moving_180_day_high', $data ?? [], null);
        $this->setIfExists('moving_180_day_low', $data ?? [], null);
        $this->setIfExists('moving_180_day_open', $data ?? [], null);
        $this->setIfExists('moving_180_day_quote_volume', $data ?? [], null);
        $this->setIfExists('moving_180_day_quote_volume_buy', $data ?? [], null);
        $this->setIfExists('moving_180_day_quote_volume_sell', $data ?? [], null);
        $this->setIfExists('moving_180_day_quote_volume_unknown', $data ?? [], null);
        $this->setIfExists('moving_180_day_total_trades', $data ?? [], null);
        $this->setIfExists('moving_180_day_total_trades_buy', $data ?? [], null);
        $this->setIfExists('moving_180_day_total_trades_sell', $data ?? [], null);
        $this->setIfExists('moving_180_day_total_trades_unknown', $data ?? [], null);
        $this->setIfExists('moving_180_day_volume', $data ?? [], null);
        $this->setIfExists('moving_180_day_volume_buy', $data ?? [], null);
        $this->setIfExists('moving_180_day_volume_sell', $data ?? [], null);
        $this->setIfExists('moving_180_day_volume_unknown', $data ?? [], null);
        $this->setIfExists('moving_24_hour_high', $data ?? [], null);
        $this->setIfExists('moving_24_hour_low', $data ?? [], null);
        $this->setIfExists('moving_24_hour_open', $data ?? [], null);
        $this->setIfExists('moving_24_hour_quote_volume', $data ?? [], null);
        $this->setIfExists('moving_24_hour_quote_volume_buy', $data ?? [], null);
        $this->setIfExists('moving_24_hour_quote_volume_sell', $data ?? [], null);
        $this->setIfExists('moving_24_hour_quote_volume_unknown', $data ?? [], null);
        $this->setIfExists('moving_24_hour_total_trades', $data ?? [], null);
        $this->setIfExists('moving_24_hour_total_trades_buy', $data ?? [], null);
        $this->setIfExists('moving_24_hour_total_trades_sell', $data ?? [], null);
        $this->setIfExists('moving_24_hour_total_trades_unknown', $data ?? [], null);
        $this->setIfExists('moving_24_hour_volume', $data ?? [], null);
        $this->setIfExists('moving_24_hour_volume_buy', $data ?? [], null);
        $this->setIfExists('moving_24_hour_volume_sell', $data ?? [], null);
        $this->setIfExists('moving_24_hour_volume_unknown', $data ?? [], null);
        $this->setIfExists('moving_30_day_high', $data ?? [], null);
        $this->setIfExists('moving_30_day_low', $data ?? [], null);
        $this->setIfExists('moving_30_day_open', $data ?? [], null);
        $this->setIfExists('moving_30_day_quote_volume', $data ?? [], null);
        $this->setIfExists('moving_30_day_quote_volume_buy', $data ?? [], null);
        $this->setIfExists('moving_30_day_quote_volume_sell', $data ?? [], null);
        $this->setIfExists('moving_30_day_quote_volume_unknown', $data ?? [], null);
        $this->setIfExists('moving_30_day_total_trades', $data ?? [], null);
        $this->setIfExists('moving_30_day_total_trades_buy', $data ?? [], null);
        $this->setIfExists('moving_30_day_total_trades_sell', $data ?? [], null);
        $this->setIfExists('moving_30_day_total_trades_unknown', $data ?? [], null);
        $this->setIfExists('moving_30_day_volume', $data ?? [], null);
        $this->setIfExists('moving_30_day_volume_buy', $data ?? [], null);
        $this->setIfExists('moving_30_day_volume_sell', $data ?? [], null);
        $this->setIfExists('moving_30_day_volume_unknown', $data ?? [], null);
        $this->setIfExists('moving_365_day_high', $data ?? [], null);
        $this->setIfExists('moving_365_day_low', $data ?? [], null);
        $this->setIfExists('moving_365_day_open', $data ?? [], null);
        $this->setIfExists('moving_365_day_quote_volume', $data ?? [], null);
        $this->setIfExists('moving_365_day_quote_volume_buy', $data ?? [], null);
        $this->setIfExists('moving_365_day_quote_volume_sell', $data ?? [], null);
        $this->setIfExists('moving_365_day_quote_volume_unknown', $data ?? [], null);
        $this->setIfExists('moving_365_day_total_trades', $data ?? [], null);
        $this->setIfExists('moving_365_day_total_trades_buy', $data ?? [], null);
        $this->setIfExists('moving_365_day_total_trades_sell', $data ?? [], null);
        $this->setIfExists('moving_365_day_total_trades_unknown', $data ?? [], null);
        $this->setIfExists('moving_365_day_volume', $data ?? [], null);
        $this->setIfExists('moving_365_day_volume_buy', $data ?? [], null);
        $this->setIfExists('moving_365_day_volume_sell', $data ?? [], null);
        $this->setIfExists('moving_365_day_volume_unknown', $data ?? [], null);
        $this->setIfExists('moving_7_day_high', $data ?? [], null);
        $this->setIfExists('moving_7_day_low', $data ?? [], null);
        $this->setIfExists('moving_7_day_open', $data ?? [], null);
        $this->setIfExists('moving_7_day_quote_volume', $data ?? [], null);
        $this->setIfExists('moving_7_day_quote_volume_buy', $data ?? [], null);
        $this->setIfExists('moving_7_day_quote_volume_sell', $data ?? [], null);
        $this->setIfExists('moving_7_day_quote_volume_unknown', $data ?? [], null);
        $this->setIfExists('moving_7_day_total_trades', $data ?? [], null);
        $this->setIfExists('moving_7_day_total_trades_buy', $data ?? [], null);
        $this->setIfExists('moving_7_day_total_trades_sell', $data ?? [], null);
        $this->setIfExists('moving_7_day_total_trades_unknown', $data ?? [], null);
        $this->setIfExists('moving_7_day_volume', $data ?? [], null);
        $this->setIfExists('moving_7_day_volume_buy', $data ?? [], null);
        $this->setIfExists('moving_7_day_volume_sell', $data ?? [], null);
        $this->setIfExists('moving_7_day_volume_unknown', $data ?? [], null);
        $this->setIfExists('moving_90_day_high', $data ?? [], null);
        $this->setIfExists('moving_90_day_low', $data ?? [], null);
        $this->setIfExists('moving_90_day_open', $data ?? [], null);
        $this->setIfExists('moving_90_day_quote_volume', $data ?? [], null);
        $this->setIfExists('moving_90_day_quote_volume_buy', $data ?? [], null);
        $this->setIfExists('moving_90_day_quote_volume_sell', $data ?? [], null);
        $this->setIfExists('moving_90_day_quote_volume_unknown', $data ?? [], null);
        $this->setIfExists('moving_90_day_total_trades', $data ?? [], null);
        $this->setIfExists('moving_90_day_total_trades_buy', $data ?? [], null);
        $this->setIfExists('moving_90_day_total_trades_sell', $data ?? [], null);
        $this->setIfExists('moving_90_day_total_trades_unknown', $data ?? [], null);
        $this->setIfExists('moving_90_day_volume', $data ?? [], null);
        $this->setIfExists('moving_90_day_volume_buy', $data ?? [], null);
        $this->setIfExists('moving_90_day_volume_sell', $data ?? [], null);
        $this->setIfExists('moving_90_day_volume_unknown', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('price_flag', $data ?? [], null);
        $this->setIfExists('price_last_update_ts', $data ?? [], null);
        $this->setIfExists('quote', $data ?? [], null);
        $this->setIfExists('top_ask_last_update_ts', $data ?? [], null);
        $this->setIfExists('top_ask_price', $data ?? [], null);
        $this->setIfExists('top_ask_quantity', $data ?? [], null);
        $this->setIfExists('top_bid_last_update_ts', $data ?? [], null);
        $this->setIfExists('top_bid_price', $data ?? [], null);
        $this->setIfExists('top_bid_quantity', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets base
     *
     * @return string|null
     */
    public function getBase()
    {
        return $this->container['base'];
    }

    /**
     * Sets base
     *
     * @param string|null $base The mapped from asset (base / symbol/ coin), e.g. BTC. Only available on instruments that have been mapped.
     *
     * @return self
     */
    public function setBase($base)
    {
        if (is_null($base)) {
            throw new \InvalidArgumentException('non-nullable base cannot be null');
        }
        $this->container['base'] = $base;

        return $this;
    }

    /**
     * Gets ccseq
     *
     * @return int|null
     */
    public function getCcseq()
    {
        return $this->container['ccseq'];
    }

    /**
     * Sets ccseq
     *
     * @param int|null $ccseq Our internal sequence number for this tick update. This is unique per market / exchange and trading pair / instrument. It will always be increasing by 1 for each new tick update we send.
     *
     * @return self
     */
    public function setCcseq($ccseq)
    {
        if (is_null($ccseq)) {
            throw new \InvalidArgumentException('non-nullable ccseq cannot be null');
        }
        $this->container['ccseq'] = $ccseq;

        return $this;
    }

    /**
     * Gets current_day_high
     *
     * @return int|null
     */
    public function getCurrentDayHigh()
    {
        return $this->container['current_day_high'];
    }

    /**
     * Sets current_day_high
     *
     * @param int|null $current_day_high The highest trade price of the current day (00:00:00 GMT/UTC). If there were no updates in the time period, the open price will be given. Given in the quote asset.
     *
     * @return self
     */
    public function setCurrentDayHigh($current_day_high)
    {
        if (is_null($current_day_high)) {
            throw new \InvalidArgumentException('non-nullable current_day_high cannot be null');
        }
        $this->container['current_day_high'] = $current_day_high;

        return $this;
    }

    /**
     * Gets current_day_low
     *
     * @return int|null
     */
    public function getCurrentDayLow()
    {
        return $this->container['current_day_low'];
    }

    /**
     * Sets current_day_low
     *
     * @param int|null $current_day_low The lowest trade price of the current day (00:00:00 GMT/UTC). If there were no updates in the time period, the open price will be given. Given in the quote asset.
     *
     * @return self
     */
    public function setCurrentDayLow($current_day_low)
    {
        if (is_null($current_day_low)) {
            throw new \InvalidArgumentException('non-nullable current_day_low cannot be null');
        }
        $this->container['current_day_low'] = $current_day_low;

        return $this;
    }

    /**
     * Gets current_day_open
     *
     * @return int|null
     */
    public function getCurrentDayOpen()
    {
        return $this->container['current_day_open'];
    }

    /**
     * Sets current_day_open
     *
     * @param int|null $current_day_open The open price for the current day, this is based on the closest trade occurring before the start of the current day (00:00:00 GMT/UTC). Given in the quote asset.
     *
     * @return self
     */
    public function setCurrentDayOpen($current_day_open)
    {
        if (is_null($current_day_open)) {
            throw new \InvalidArgumentException('non-nullable current_day_open cannot be null');
        }
        $this->container['current_day_open'] = $current_day_open;

        return $this;
    }

    /**
     * Gets current_day_quote_volume
     *
     * @return int|null
     */
    public function getCurrentDayQuoteVolume()
    {
        return $this->container['current_day_quote_volume'];
    }

    /**
     * Sets current_day_quote_volume
     *
     * @param int|null $current_day_quote_volume The sum of all trade quote quantities from the start of the current day (00:00:00 GMT/UTC) until now. Given in the quote asset.
     *
     * @return self
     */
    public function setCurrentDayQuoteVolume($current_day_quote_volume)
    {
        if (is_null($current_day_quote_volume)) {
            throw new \InvalidArgumentException('non-nullable current_day_quote_volume cannot be null');
        }
        $this->container['current_day_quote_volume'] = $current_day_quote_volume;

        return $this;
    }

    /**
     * Gets current_day_quote_volume_buy
     *
     * @return int|null
     */
    public function getCurrentDayQuoteVolumeBuy()
    {
        return $this->container['current_day_quote_volume_buy'];
    }

    /**
     * Sets current_day_quote_volume_buy
     *
     * @param int|null $current_day_quote_volume_buy The sum of all buy trade quote quantities from the start of the current day (00:00:00 GMT/UTC) until now. Given in the quote asset.
     *
     * @return self
     */
    public function setCurrentDayQuoteVolumeBuy($current_day_quote_volume_buy)
    {
        if (is_null($current_day_quote_volume_buy)) {
            throw new \InvalidArgumentException('non-nullable current_day_quote_volume_buy cannot be null');
        }
        $this->container['current_day_quote_volume_buy'] = $current_day_quote_volume_buy;

        return $this;
    }

    /**
     * Gets current_day_quote_volume_sell
     *
     * @return int|null
     */
    public function getCurrentDayQuoteVolumeSell()
    {
        return $this->container['current_day_quote_volume_sell'];
    }

    /**
     * Sets current_day_quote_volume_sell
     *
     * @param int|null $current_day_quote_volume_sell The sum of all sell trade quote quantities from the start of the current day (00:00:00 GMT/UTC) until now. Given in the quote asset.
     *
     * @return self
     */
    public function setCurrentDayQuoteVolumeSell($current_day_quote_volume_sell)
    {
        if (is_null($current_day_quote_volume_sell)) {
            throw new \InvalidArgumentException('non-nullable current_day_quote_volume_sell cannot be null');
        }
        $this->container['current_day_quote_volume_sell'] = $current_day_quote_volume_sell;

        return $this;
    }

    /**
     * Gets current_day_quote_volume_unknown
     *
     * @return int|null
     */
    public function getCurrentDayQuoteVolumeUnknown()
    {
        return $this->container['current_day_quote_volume_unknown'];
    }

    /**
     * Sets current_day_quote_volume_unknown
     *
     * @param int|null $current_day_quote_volume_unknown The sum of all unknown trade quote quantities from the start of the current day (00:00:00 GMT/UTC) until now. Given in the quote asset.
     *
     * @return self
     */
    public function setCurrentDayQuoteVolumeUnknown($current_day_quote_volume_unknown)
    {
        if (is_null($current_day_quote_volume_unknown)) {
            throw new \InvalidArgumentException('non-nullable current_day_quote_volume_unknown cannot be null');
        }
        $this->container['current_day_quote_volume_unknown'] = $current_day_quote_volume_unknown;

        return $this;
    }

    /**
     * Gets current_day_total_trades
     *
     * @return int|null
     */
    public function getCurrentDayTotalTrades()
    {
        return $this->container['current_day_total_trades'];
    }

    /**
     * Sets current_day_total_trades
     *
     * @param int|null $current_day_total_trades The total number of trades that have occurred since the start of the current day (00:00:00 GMT/UTC).
     *
     * @return self
     */
    public function setCurrentDayTotalTrades($current_day_total_trades)
    {
        if (is_null($current_day_total_trades)) {
            throw new \InvalidArgumentException('non-nullable current_day_total_trades cannot be null');
        }
        $this->container['current_day_total_trades'] = $current_day_total_trades;

        return $this;
    }

    /**
     * Gets current_day_total_trades_buy
     *
     * @return int|null
     */
    public function getCurrentDayTotalTradesBuy()
    {
        return $this->container['current_day_total_trades_buy'];
    }

    /**
     * Sets current_day_total_trades_buy
     *
     * @param int|null $current_day_total_trades_buy The total number of buy trades since the start of the current day (00:00:00 GMT/UTC).
     *
     * @return self
     */
    public function setCurrentDayTotalTradesBuy($current_day_total_trades_buy)
    {
        if (is_null($current_day_total_trades_buy)) {
            throw new \InvalidArgumentException('non-nullable current_day_total_trades_buy cannot be null');
        }
        $this->container['current_day_total_trades_buy'] = $current_day_total_trades_buy;

        return $this;
    }

    /**
     * Gets current_day_total_trades_sell
     *
     * @return int|null
     */
    public function getCurrentDayTotalTradesSell()
    {
        return $this->container['current_day_total_trades_sell'];
    }

    /**
     * Sets current_day_total_trades_sell
     *
     * @param int|null $current_day_total_trades_sell The total number of sell trades since the start of the current day (00:00:00 GMT/UTC).
     *
     * @return self
     */
    public function setCurrentDayTotalTradesSell($current_day_total_trades_sell)
    {
        if (is_null($current_day_total_trades_sell)) {
            throw new \InvalidArgumentException('non-nullable current_day_total_trades_sell cannot be null');
        }
        $this->container['current_day_total_trades_sell'] = $current_day_total_trades_sell;

        return $this;
    }

    /**
     * Gets current_day_total_trades_unknown
     *
     * @return int|null
     */
    public function getCurrentDayTotalTradesUnknown()
    {
        return $this->container['current_day_total_trades_unknown'];
    }

    /**
     * Sets current_day_total_trades_unknown
     *
     * @param int|null $current_day_total_trades_unknown The total number of unknown trades since the start of the current day (00:00:00 GMT/UTC).
     *
     * @return self
     */
    public function setCurrentDayTotalTradesUnknown($current_day_total_trades_unknown)
    {
        if (is_null($current_day_total_trades_unknown)) {
            throw new \InvalidArgumentException('non-nullable current_day_total_trades_unknown cannot be null');
        }
        $this->container['current_day_total_trades_unknown'] = $current_day_total_trades_unknown;

        return $this;
    }

    /**
     * Gets current_day_volume
     *
     * @return int|null
     */
    public function getCurrentDayVolume()
    {
        return $this->container['current_day_volume'];
    }

    /**
     * Sets current_day_volume
     *
     * @param int|null $current_day_volume The sum of all trade quantities from the start of the current day (00:00:00 GMT/UTC) until now. Given in the base asset.
     *
     * @return self
     */
    public function setCurrentDayVolume($current_day_volume)
    {
        if (is_null($current_day_volume)) {
            throw new \InvalidArgumentException('non-nullable current_day_volume cannot be null');
        }
        $this->container['current_day_volume'] = $current_day_volume;

        return $this;
    }

    /**
     * Gets current_day_volume_buy
     *
     * @return int|null
     */
    public function getCurrentDayVolumeBuy()
    {
        return $this->container['current_day_volume_buy'];
    }

    /**
     * Sets current_day_volume_buy
     *
     * @param int|null $current_day_volume_buy The sum of all buy trade quantities from the start of the current day (00:00:00 GMT/UTC) until now. Given in the base asset.
     *
     * @return self
     */
    public function setCurrentDayVolumeBuy($current_day_volume_buy)
    {
        if (is_null($current_day_volume_buy)) {
            throw new \InvalidArgumentException('non-nullable current_day_volume_buy cannot be null');
        }
        $this->container['current_day_volume_buy'] = $current_day_volume_buy;

        return $this;
    }

    /**
     * Gets current_day_volume_sell
     *
     * @return int|null
     */
    public function getCurrentDayVolumeSell()
    {
        return $this->container['current_day_volume_sell'];
    }

    /**
     * Sets current_day_volume_sell
     *
     * @param int|null $current_day_volume_sell The sum of all sell trade quantities from the start of the current day (00:00:00 GMT/UTC) until now. Given in the base asset.
     *
     * @return self
     */
    public function setCurrentDayVolumeSell($current_day_volume_sell)
    {
        if (is_null($current_day_volume_sell)) {
            throw new \InvalidArgumentException('non-nullable current_day_volume_sell cannot be null');
        }
        $this->container['current_day_volume_sell'] = $current_day_volume_sell;

        return $this;
    }

    /**
     * Gets current_day_volume_unknown
     *
     * @return int|null
     */
    public function getCurrentDayVolumeUnknown()
    {
        return $this->container['current_day_volume_unknown'];
    }

    /**
     * Sets current_day_volume_unknown
     *
     * @param int|null $current_day_volume_unknown The sum of all unknown trade quantities from the start of the current day (00:00:00 GMT/UTC) until now. Given in the base asset.
     *
     * @return self
     */
    public function setCurrentDayVolumeUnknown($current_day_volume_unknown)
    {
        if (is_null($current_day_volume_unknown)) {
            throw new \InvalidArgumentException('non-nullable current_day_volume_unknown cannot be null');
        }
        $this->container['current_day_volume_unknown'] = $current_day_volume_unknown;

        return $this;
    }

    /**
     * Gets current_hour_high
     *
     * @return int|null
     */
    public function getCurrentHourHigh()
    {
        return $this->container['current_hour_high'];
    }

    /**
     * Sets current_hour_high
     *
     * @param int|null $current_hour_high The highest trade price of the current hour. If there were no updates in the time period, the open price will be given. Given in the quote asset.
     *
     * @return self
     */
    public function setCurrentHourHigh($current_hour_high)
    {
        if (is_null($current_hour_high)) {
            throw new \InvalidArgumentException('non-nullable current_hour_high cannot be null');
        }
        $this->container['current_hour_high'] = $current_hour_high;

        return $this;
    }

    /**
     * Gets current_hour_low
     *
     * @return int|null
     */
    public function getCurrentHourLow()
    {
        return $this->container['current_hour_low'];
    }

    /**
     * Sets current_hour_low
     *
     * @param int|null $current_hour_low The lowest trade price of the current hour. If there were no updates in the time period, the open price will be given. Given in the quote asset.
     *
     * @return self
     */
    public function setCurrentHourLow($current_hour_low)
    {
        if (is_null($current_hour_low)) {
            throw new \InvalidArgumentException('non-nullable current_hour_low cannot be null');
        }
        $this->container['current_hour_low'] = $current_hour_low;

        return $this;
    }

    /**
     * Gets current_hour_open
     *
     * @return int|null
     */
    public function getCurrentHourOpen()
    {
        return $this->container['current_hour_open'];
    }

    /**
     * Sets current_hour_open
     *
     * @param int|null $current_hour_open The open price for the current hour, this is based on the closest trade occurring before the start of the current hour. Given in the quote asset.
     *
     * @return self
     */
    public function setCurrentHourOpen($current_hour_open)
    {
        if (is_null($current_hour_open)) {
            throw new \InvalidArgumentException('non-nullable current_hour_open cannot be null');
        }
        $this->container['current_hour_open'] = $current_hour_open;

        return $this;
    }

    /**
     * Gets current_hour_quote_volume
     *
     * @return int|null
     */
    public function getCurrentHourQuoteVolume()
    {
        return $this->container['current_hour_quote_volume'];
    }

    /**
     * Sets current_hour_quote_volume
     *
     * @param int|null $current_hour_quote_volume The sum of all trade quote quantities from the start of the current hour until now. Given in the quote asset.
     *
     * @return self
     */
    public function setCurrentHourQuoteVolume($current_hour_quote_volume)
    {
        if (is_null($current_hour_quote_volume)) {
            throw new \InvalidArgumentException('non-nullable current_hour_quote_volume cannot be null');
        }
        $this->container['current_hour_quote_volume'] = $current_hour_quote_volume;

        return $this;
    }

    /**
     * Gets current_hour_quote_volume_buy
     *
     * @return int|null
     */
    public function getCurrentHourQuoteVolumeBuy()
    {
        return $this->container['current_hour_quote_volume_buy'];
    }

    /**
     * Sets current_hour_quote_volume_buy
     *
     * @param int|null $current_hour_quote_volume_buy The sum of all buy trade quote quantities from the start of the current hour until now. Given in the quote asset.
     *
     * @return self
     */
    public function setCurrentHourQuoteVolumeBuy($current_hour_quote_volume_buy)
    {
        if (is_null($current_hour_quote_volume_buy)) {
            throw new \InvalidArgumentException('non-nullable current_hour_quote_volume_buy cannot be null');
        }
        $this->container['current_hour_quote_volume_buy'] = $current_hour_quote_volume_buy;

        return $this;
    }

    /**
     * Gets current_hour_quote_volume_sell
     *
     * @return int|null
     */
    public function getCurrentHourQuoteVolumeSell()
    {
        return $this->container['current_hour_quote_volume_sell'];
    }

    /**
     * Sets current_hour_quote_volume_sell
     *
     * @param int|null $current_hour_quote_volume_sell The sum of all sell trade quote quantities from the start of the current hour until now. Given in the quote asset.
     *
     * @return self
     */
    public function setCurrentHourQuoteVolumeSell($current_hour_quote_volume_sell)
    {
        if (is_null($current_hour_quote_volume_sell)) {
            throw new \InvalidArgumentException('non-nullable current_hour_quote_volume_sell cannot be null');
        }
        $this->container['current_hour_quote_volume_sell'] = $current_hour_quote_volume_sell;

        return $this;
    }

    /**
     * Gets current_hour_quote_volume_unknown
     *
     * @return int|null
     */
    public function getCurrentHourQuoteVolumeUnknown()
    {
        return $this->container['current_hour_quote_volume_unknown'];
    }

    /**
     * Sets current_hour_quote_volume_unknown
     *
     * @param int|null $current_hour_quote_volume_unknown The sum of all unknown trade quote quantities from the start of the current hour until now. Given in the quote asset.
     *
     * @return self
     */
    public function setCurrentHourQuoteVolumeUnknown($current_hour_quote_volume_unknown)
    {
        if (is_null($current_hour_quote_volume_unknown)) {
            throw new \InvalidArgumentException('non-nullable current_hour_quote_volume_unknown cannot be null');
        }
        $this->container['current_hour_quote_volume_unknown'] = $current_hour_quote_volume_unknown;

        return $this;
    }

    /**
     * Gets current_hour_total_trades
     *
     * @return int|null
     */
    public function getCurrentHourTotalTrades()
    {
        return $this->container['current_hour_total_trades'];
    }

    /**
     * Sets current_hour_total_trades
     *
     * @param int|null $current_hour_total_trades The total number of trades that have occurred since the start of the current hour.
     *
     * @return self
     */
    public function setCurrentHourTotalTrades($current_hour_total_trades)
    {
        if (is_null($current_hour_total_trades)) {
            throw new \InvalidArgumentException('non-nullable current_hour_total_trades cannot be null');
        }
        $this->container['current_hour_total_trades'] = $current_hour_total_trades;

        return $this;
    }

    /**
     * Gets current_hour_total_trades_buy
     *
     * @return int|null
     */
    public function getCurrentHourTotalTradesBuy()
    {
        return $this->container['current_hour_total_trades_buy'];
    }

    /**
     * Sets current_hour_total_trades_buy
     *
     * @param int|null $current_hour_total_trades_buy The total number of buy trades since the start of the current hour.
     *
     * @return self
     */
    public function setCurrentHourTotalTradesBuy($current_hour_total_trades_buy)
    {
        if (is_null($current_hour_total_trades_buy)) {
            throw new \InvalidArgumentException('non-nullable current_hour_total_trades_buy cannot be null');
        }
        $this->container['current_hour_total_trades_buy'] = $current_hour_total_trades_buy;

        return $this;
    }

    /**
     * Gets current_hour_total_trades_sell
     *
     * @return int|null
     */
    public function getCurrentHourTotalTradesSell()
    {
        return $this->container['current_hour_total_trades_sell'];
    }

    /**
     * Sets current_hour_total_trades_sell
     *
     * @param int|null $current_hour_total_trades_sell The total number of sell trades since the start of the current hour.
     *
     * @return self
     */
    public function setCurrentHourTotalTradesSell($current_hour_total_trades_sell)
    {
        if (is_null($current_hour_total_trades_sell)) {
            throw new \InvalidArgumentException('non-nullable current_hour_total_trades_sell cannot be null');
        }
        $this->container['current_hour_total_trades_sell'] = $current_hour_total_trades_sell;

        return $this;
    }

    /**
     * Gets current_hour_total_trades_unknown
     *
     * @return int|null
     */
    public function getCurrentHourTotalTradesUnknown()
    {
        return $this->container['current_hour_total_trades_unknown'];
    }

    /**
     * Sets current_hour_total_trades_unknown
     *
     * @param int|null $current_hour_total_trades_unknown The total number of unknown trades since the start of the current hour.
     *
     * @return self
     */
    public function setCurrentHourTotalTradesUnknown($current_hour_total_trades_unknown)
    {
        if (is_null($current_hour_total_trades_unknown)) {
            throw new \InvalidArgumentException('non-nullable current_hour_total_trades_unknown cannot be null');
        }
        $this->container['current_hour_total_trades_unknown'] = $current_hour_total_trades_unknown;

        return $this;
    }

    /**
     * Gets current_hour_volume
     *
     * @return int|null
     */
    public function getCurrentHourVolume()
    {
        return $this->container['current_hour_volume'];
    }

    /**
     * Sets current_hour_volume
     *
     * @param int|null $current_hour_volume The sum of all trade quantities from the start of the current hour until now. Given in the base asset.
     *
     * @return self
     */
    public function setCurrentHourVolume($current_hour_volume)
    {
        if (is_null($current_hour_volume)) {
            throw new \InvalidArgumentException('non-nullable current_hour_volume cannot be null');
        }
        $this->container['current_hour_volume'] = $current_hour_volume;

        return $this;
    }

    /**
     * Gets current_hour_volume_buy
     *
     * @return int|null
     */
    public function getCurrentHourVolumeBuy()
    {
        return $this->container['current_hour_volume_buy'];
    }

    /**
     * Sets current_hour_volume_buy
     *
     * @param int|null $current_hour_volume_buy The sum of all buy trade quantities from the start of the current hour until now. Given in the base asset.
     *
     * @return self
     */
    public function setCurrentHourVolumeBuy($current_hour_volume_buy)
    {
        if (is_null($current_hour_volume_buy)) {
            throw new \InvalidArgumentException('non-nullable current_hour_volume_buy cannot be null');
        }
        $this->container['current_hour_volume_buy'] = $current_hour_volume_buy;

        return $this;
    }

    /**
     * Gets current_hour_volume_sell
     *
     * @return int|null
     */
    public function getCurrentHourVolumeSell()
    {
        return $this->container['current_hour_volume_sell'];
    }

    /**
     * Sets current_hour_volume_sell
     *
     * @param int|null $current_hour_volume_sell The sum of all sell trade quantities from the start of the current hour until now. Given in the base asset.
     *
     * @return self
     */
    public function setCurrentHourVolumeSell($current_hour_volume_sell)
    {
        if (is_null($current_hour_volume_sell)) {
            throw new \InvalidArgumentException('non-nullable current_hour_volume_sell cannot be null');
        }
        $this->container['current_hour_volume_sell'] = $current_hour_volume_sell;

        return $this;
    }

    /**
     * Gets current_hour_volume_unknown
     *
     * @return int|null
     */
    public function getCurrentHourVolumeUnknown()
    {
        return $this->container['current_hour_volume_unknown'];
    }

    /**
     * Sets current_hour_volume_unknown
     *
     * @param int|null $current_hour_volume_unknown The sum of all trade quote quantities from the start of the current hour until now. Given in the base asset.
     *
     * @return self
     */
    public function setCurrentHourVolumeUnknown($current_hour_volume_unknown)
    {
        if (is_null($current_hour_volume_unknown)) {
            throw new \InvalidArgumentException('non-nullable current_hour_volume_unknown cannot be null');
        }
        $this->container['current_hour_volume_unknown'] = $current_hour_volume_unknown;

        return $this;
    }

    /**
     * Gets current_month_high
     *
     * @return int|null
     */
    public function getCurrentMonthHigh()
    {
        return $this->container['current_month_high'];
    }

    /**
     * Sets current_month_high
     *
     * @param int|null $current_month_high The highest traded price of the month excluding the current day. The period will run from the 1st of the month - 00:00:00 GMT/UTC to the beginning - 00:00:00 GMT/UTC of the current day of the month. If today is the 1st of the month, this value will be CURRENT_MONTH_OPEN. Given in the quote asset.
     *
     * @return self
     */
    public function setCurrentMonthHigh($current_month_high)
    {
        if (is_null($current_month_high)) {
            throw new \InvalidArgumentException('non-nullable current_month_high cannot be null');
        }
        $this->container['current_month_high'] = $current_month_high;

        return $this;
    }

    /**
     * Gets current_month_low
     *
     * @return int|null
     */
    public function getCurrentMonthLow()
    {
        return $this->container['current_month_low'];
    }

    /**
     * Sets current_month_low
     *
     * @param int|null $current_month_low The lowest traded price of the month excluding the current day. The period will run from the 1st of the month - 00:00:00 GMT/UTC to the beginning - 00:00:00 GMT/UTC of the current day of the month. If today is the 1st of the month, this value will be CURRENT_MONTH_OPEN. Given in the quote asset.
     *
     * @return self
     */
    public function setCurrentMonthLow($current_month_low)
    {
        if (is_null($current_month_low)) {
            throw new \InvalidArgumentException('non-nullable current_month_low cannot be null');
        }
        $this->container['current_month_low'] = $current_month_low;

        return $this;
    }

    /**
     * Gets current_month_open
     *
     * @return int|null
     */
    public function getCurrentMonthOpen()
    {
        return $this->container['current_month_open'];
    }

    /**
     * Sets current_month_open
     *
     * @param int|null $current_month_open The price of the closest trade to the 1st day (00:00:00 GMT/UTC) of this month. In a highly liquid market, this would be the last trade that happened on the previous month at (23:59:59 999 GMT/UTC). This will always be supplied and there is no need to do any calculation to get the full monthly value. Given in the quote asset.
     *
     * @return self
     */
    public function setCurrentMonthOpen($current_month_open)
    {
        if (is_null($current_month_open)) {
            throw new \InvalidArgumentException('non-nullable current_month_open cannot be null');
        }
        $this->container['current_month_open'] = $current_month_open;

        return $this;
    }

    /**
     * Gets current_month_quote_volume
     *
     * @return int|null
     */
    public function getCurrentMonthQuoteVolume()
    {
        return $this->container['current_month_quote_volume'];
    }

    /**
     * Sets current_month_quote_volume
     *
     * @param int|null $current_month_quote_volume The sum of all trade quote quantities from the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the first of the month, this value will be 0. Given in the quote asset.
     *
     * @return self
     */
    public function setCurrentMonthQuoteVolume($current_month_quote_volume)
    {
        if (is_null($current_month_quote_volume)) {
            throw new \InvalidArgumentException('non-nullable current_month_quote_volume cannot be null');
        }
        $this->container['current_month_quote_volume'] = $current_month_quote_volume;

        return $this;
    }

    /**
     * Gets current_month_quote_volume_buy
     *
     * @return int|null
     */
    public function getCurrentMonthQuoteVolumeBuy()
    {
        return $this->container['current_month_quote_volume_buy'];
    }

    /**
     * Sets current_month_quote_volume_buy
     *
     * @param int|null $current_month_quote_volume_buy The sum of all buy trade quote quantities from the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the first of the month, this value will be 0. Given in the quote asset.
     *
     * @return self
     */
    public function setCurrentMonthQuoteVolumeBuy($current_month_quote_volume_buy)
    {
        if (is_null($current_month_quote_volume_buy)) {
            throw new \InvalidArgumentException('non-nullable current_month_quote_volume_buy cannot be null');
        }
        $this->container['current_month_quote_volume_buy'] = $current_month_quote_volume_buy;

        return $this;
    }

    /**
     * Gets current_month_quote_volume_sell
     *
     * @return int|null
     */
    public function getCurrentMonthQuoteVolumeSell()
    {
        return $this->container['current_month_quote_volume_sell'];
    }

    /**
     * Sets current_month_quote_volume_sell
     *
     * @param int|null $current_month_quote_volume_sell The sum of all sell trade quote quantities from the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the first of the month, this value will be 0. Given in the quote asset.
     *
     * @return self
     */
    public function setCurrentMonthQuoteVolumeSell($current_month_quote_volume_sell)
    {
        if (is_null($current_month_quote_volume_sell)) {
            throw new \InvalidArgumentException('non-nullable current_month_quote_volume_sell cannot be null');
        }
        $this->container['current_month_quote_volume_sell'] = $current_month_quote_volume_sell;

        return $this;
    }

    /**
     * Gets current_month_quote_volume_unknown
     *
     * @return int|null
     */
    public function getCurrentMonthQuoteVolumeUnknown()
    {
        return $this->container['current_month_quote_volume_unknown'];
    }

    /**
     * Sets current_month_quote_volume_unknown
     *
     * @param int|null $current_month_quote_volume_unknown The sum of all unknown trade quote quantities from the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the first of the month, this value will be 0. Given in the quote asset.
     *
     * @return self
     */
    public function setCurrentMonthQuoteVolumeUnknown($current_month_quote_volume_unknown)
    {
        if (is_null($current_month_quote_volume_unknown)) {
            throw new \InvalidArgumentException('non-nullable current_month_quote_volume_unknown cannot be null');
        }
        $this->container['current_month_quote_volume_unknown'] = $current_month_quote_volume_unknown;

        return $this;
    }

    /**
     * Gets current_month_total_trades
     *
     * @return int|null
     */
    public function getCurrentMonthTotalTrades()
    {
        return $this->container['current_month_total_trades'];
    }

    /**
     * Sets current_month_total_trades
     *
     * @param int|null $current_month_total_trades The total number of trades between the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the 1st of the month, this value will be 0.
     *
     * @return self
     */
    public function setCurrentMonthTotalTrades($current_month_total_trades)
    {
        if (is_null($current_month_total_trades)) {
            throw new \InvalidArgumentException('non-nullable current_month_total_trades cannot be null');
        }
        $this->container['current_month_total_trades'] = $current_month_total_trades;

        return $this;
    }

    /**
     * Gets current_month_total_trades_buy
     *
     * @return int|null
     */
    public function getCurrentMonthTotalTradesBuy()
    {
        return $this->container['current_month_total_trades_buy'];
    }

    /**
     * Sets current_month_total_trades_buy
     *
     * @param int|null $current_month_total_trades_buy The total number of buy trades between the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the 1st of the month, this value will be 0.
     *
     * @return self
     */
    public function setCurrentMonthTotalTradesBuy($current_month_total_trades_buy)
    {
        if (is_null($current_month_total_trades_buy)) {
            throw new \InvalidArgumentException('non-nullable current_month_total_trades_buy cannot be null');
        }
        $this->container['current_month_total_trades_buy'] = $current_month_total_trades_buy;

        return $this;
    }

    /**
     * Gets current_month_total_trades_sell
     *
     * @return int|null
     */
    public function getCurrentMonthTotalTradesSell()
    {
        return $this->container['current_month_total_trades_sell'];
    }

    /**
     * Sets current_month_total_trades_sell
     *
     * @param int|null $current_month_total_trades_sell The total number of sell trades between the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the 1st of the month, this value will be 0.
     *
     * @return self
     */
    public function setCurrentMonthTotalTradesSell($current_month_total_trades_sell)
    {
        if (is_null($current_month_total_trades_sell)) {
            throw new \InvalidArgumentException('non-nullable current_month_total_trades_sell cannot be null');
        }
        $this->container['current_month_total_trades_sell'] = $current_month_total_trades_sell;

        return $this;
    }

    /**
     * Gets current_month_total_trades_unknown
     *
     * @return int|null
     */
    public function getCurrentMonthTotalTradesUnknown()
    {
        return $this->container['current_month_total_trades_unknown'];
    }

    /**
     * Sets current_month_total_trades_unknown
     *
     * @param int|null $current_month_total_trades_unknown The total number of unknown trades between the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the 1st of the month, this value will be 0.
     *
     * @return self
     */
    public function setCurrentMonthTotalTradesUnknown($current_month_total_trades_unknown)
    {
        if (is_null($current_month_total_trades_unknown)) {
            throw new \InvalidArgumentException('non-nullable current_month_total_trades_unknown cannot be null');
        }
        $this->container['current_month_total_trades_unknown'] = $current_month_total_trades_unknown;

        return $this;
    }

    /**
     * Gets current_month_volume
     *
     * @return int|null
     */
    public function getCurrentMonthVolume()
    {
        return $this->container['current_month_volume'];
    }

    /**
     * Sets current_month_volume
     *
     * @param int|null $current_month_volume The sum of all trade quantities from the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the first of the month, this value will be 0. Given in the base asset.
     *
     * @return self
     */
    public function setCurrentMonthVolume($current_month_volume)
    {
        if (is_null($current_month_volume)) {
            throw new \InvalidArgumentException('non-nullable current_month_volume cannot be null');
        }
        $this->container['current_month_volume'] = $current_month_volume;

        return $this;
    }

    /**
     * Gets current_month_volume_buy
     *
     * @return int|null
     */
    public function getCurrentMonthVolumeBuy()
    {
        return $this->container['current_month_volume_buy'];
    }

    /**
     * Sets current_month_volume_buy
     *
     * @param int|null $current_month_volume_buy The sum of all buy trade quantities from the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the first of the month, this value will be 0. Given in the base asset.
     *
     * @return self
     */
    public function setCurrentMonthVolumeBuy($current_month_volume_buy)
    {
        if (is_null($current_month_volume_buy)) {
            throw new \InvalidArgumentException('non-nullable current_month_volume_buy cannot be null');
        }
        $this->container['current_month_volume_buy'] = $current_month_volume_buy;

        return $this;
    }

    /**
     * Gets current_month_volume_sell
     *
     * @return int|null
     */
    public function getCurrentMonthVolumeSell()
    {
        return $this->container['current_month_volume_sell'];
    }

    /**
     * Sets current_month_volume_sell
     *
     * @param int|null $current_month_volume_sell The sum of all sell trade quantities from the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the first of the month, this value will be 0. Given in the base asset.
     *
     * @return self
     */
    public function setCurrentMonthVolumeSell($current_month_volume_sell)
    {
        if (is_null($current_month_volume_sell)) {
            throw new \InvalidArgumentException('non-nullable current_month_volume_sell cannot be null');
        }
        $this->container['current_month_volume_sell'] = $current_month_volume_sell;

        return $this;
    }

    /**
     * Gets current_month_volume_unknown
     *
     * @return int|null
     */
    public function getCurrentMonthVolumeUnknown()
    {
        return $this->container['current_month_volume_unknown'];
    }

    /**
     * Sets current_month_volume_unknown
     *
     * @param int|null $current_month_volume_unknown The sum of all unknown trade quantities from the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the first of the month, this value will be 0. Given in the base asset.
     *
     * @return self
     */
    public function setCurrentMonthVolumeUnknown($current_month_volume_unknown)
    {
        if (is_null($current_month_volume_unknown)) {
            throw new \InvalidArgumentException('non-nullable current_month_volume_unknown cannot be null');
        }
        $this->container['current_month_volume_unknown'] = $current_month_volume_unknown;

        return $this;
    }

    /**
     * Gets current_week_high
     *
     * @return int|null
     */
    public function getCurrentWeekHigh()
    {
        return $this->container['current_week_high'];
    }

    /**
     * Sets current_week_high
     *
     * @param int|null $current_week_high The highest traded price of the week excluding the current day. The period will run from Monday - 00:00:00 GMT/UTC to the beginning - 00:00:00 GMT/UTC of the current day of the week. If today is Monday, this value will be the same as CURRENT_WEEK_OPEN. Given in the quote asset.
     *
     * @return self
     */
    public function setCurrentWeekHigh($current_week_high)
    {
        if (is_null($current_week_high)) {
            throw new \InvalidArgumentException('non-nullable current_week_high cannot be null');
        }
        $this->container['current_week_high'] = $current_week_high;

        return $this;
    }

    /**
     * Gets current_week_low
     *
     * @return int|null
     */
    public function getCurrentWeekLow()
    {
        return $this->container['current_week_low'];
    }

    /**
     * Sets current_week_low
     *
     * @param int|null $current_week_low The lowest traded price of the week excluding the current day. The period will run from Monday - 00:00:00 GMT/UTC to the beginning - 00:00:00 GMT/UTC of the current day of the week. If today is Monday, this value will be CURRENT_WEEK_LOW. Given in the quote asset.
     *
     * @return self
     */
    public function setCurrentWeekLow($current_week_low)
    {
        if (is_null($current_week_low)) {
            throw new \InvalidArgumentException('non-nullable current_week_low cannot be null');
        }
        $this->container['current_week_low'] = $current_week_low;

        return $this;
    }

    /**
     * Gets current_week_open
     *
     * @return int|null
     */
    public function getCurrentWeekOpen()
    {
        return $this->container['current_week_open'];
    }

    /**
     * Sets current_week_open
     *
     * @param int|null $current_week_open The price of the closest trade to Monday (00:00:00 GMT/UTC) of this week. In a highly liquid market, this would be the last trade that happened on the previous Sunday at (23:59:59 999 GMT/UTC). This will always be supplied and there is no need to do any calculation to get the full weekly value. Given in the quote asset.
     *
     * @return self
     */
    public function setCurrentWeekOpen($current_week_open)
    {
        if (is_null($current_week_open)) {
            throw new \InvalidArgumentException('non-nullable current_week_open cannot be null');
        }
        $this->container['current_week_open'] = $current_week_open;

        return $this;
    }

    /**
     * Gets current_week_quote_volume
     *
     * @return int|null
     */
    public function getCurrentWeekQuoteVolume()
    {
        return $this->container['current_week_quote_volume'];
    }

    /**
     * Sets current_week_quote_volume
     *
     * @param int|null $current_week_quote_volume The sum of all trade quote quantities from Monday (00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0. Given in the quote asset.
     *
     * @return self
     */
    public function setCurrentWeekQuoteVolume($current_week_quote_volume)
    {
        if (is_null($current_week_quote_volume)) {
            throw new \InvalidArgumentException('non-nullable current_week_quote_volume cannot be null');
        }
        $this->container['current_week_quote_volume'] = $current_week_quote_volume;

        return $this;
    }

    /**
     * Gets current_week_quote_volume_buy
     *
     * @return int|null
     */
    public function getCurrentWeekQuoteVolumeBuy()
    {
        return $this->container['current_week_quote_volume_buy'];
    }

    /**
     * Sets current_week_quote_volume_buy
     *
     * @param int|null $current_week_quote_volume_buy The sum of all buy trade quote quantities from Monday (00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0. Given in the quote asset.
     *
     * @return self
     */
    public function setCurrentWeekQuoteVolumeBuy($current_week_quote_volume_buy)
    {
        if (is_null($current_week_quote_volume_buy)) {
            throw new \InvalidArgumentException('non-nullable current_week_quote_volume_buy cannot be null');
        }
        $this->container['current_week_quote_volume_buy'] = $current_week_quote_volume_buy;

        return $this;
    }

    /**
     * Gets current_week_quote_volume_sell
     *
     * @return int|null
     */
    public function getCurrentWeekQuoteVolumeSell()
    {
        return $this->container['current_week_quote_volume_sell'];
    }

    /**
     * Sets current_week_quote_volume_sell
     *
     * @param int|null $current_week_quote_volume_sell The sum of all sell trade quote quantities from Monday (00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0. Given in the quote asset.
     *
     * @return self
     */
    public function setCurrentWeekQuoteVolumeSell($current_week_quote_volume_sell)
    {
        if (is_null($current_week_quote_volume_sell)) {
            throw new \InvalidArgumentException('non-nullable current_week_quote_volume_sell cannot be null');
        }
        $this->container['current_week_quote_volume_sell'] = $current_week_quote_volume_sell;

        return $this;
    }

    /**
     * Gets current_week_quote_volume_unknown
     *
     * @return int|null
     */
    public function getCurrentWeekQuoteVolumeUnknown()
    {
        return $this->container['current_week_quote_volume_unknown'];
    }

    /**
     * Sets current_week_quote_volume_unknown
     *
     * @param int|null $current_week_quote_volume_unknown The sum of all unknown trade quote quantities from Monday (00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0. Given in the quote asset.
     *
     * @return self
     */
    public function setCurrentWeekQuoteVolumeUnknown($current_week_quote_volume_unknown)
    {
        if (is_null($current_week_quote_volume_unknown)) {
            throw new \InvalidArgumentException('non-nullable current_week_quote_volume_unknown cannot be null');
        }
        $this->container['current_week_quote_volume_unknown'] = $current_week_quote_volume_unknown;

        return $this;
    }

    /**
     * Gets current_week_total_trades
     *
     * @return int|null
     */
    public function getCurrentWeekTotalTrades()
    {
        return $this->container['current_week_total_trades'];
    }

    /**
     * Sets current_week_total_trades
     *
     * @param int|null $current_week_total_trades The total number of trades between Monday (00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0.
     *
     * @return self
     */
    public function setCurrentWeekTotalTrades($current_week_total_trades)
    {
        if (is_null($current_week_total_trades)) {
            throw new \InvalidArgumentException('non-nullable current_week_total_trades cannot be null');
        }
        $this->container['current_week_total_trades'] = $current_week_total_trades;

        return $this;
    }

    /**
     * Gets current_week_total_trades_buy
     *
     * @return int|null
     */
    public function getCurrentWeekTotalTradesBuy()
    {
        return $this->container['current_week_total_trades_buy'];
    }

    /**
     * Sets current_week_total_trades_buy
     *
     * @param int|null $current_week_total_trades_buy The total number of buy trades between Monday (00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0.
     *
     * @return self
     */
    public function setCurrentWeekTotalTradesBuy($current_week_total_trades_buy)
    {
        if (is_null($current_week_total_trades_buy)) {
            throw new \InvalidArgumentException('non-nullable current_week_total_trades_buy cannot be null');
        }
        $this->container['current_week_total_trades_buy'] = $current_week_total_trades_buy;

        return $this;
    }

    /**
     * Gets current_week_total_trades_sell
     *
     * @return int|null
     */
    public function getCurrentWeekTotalTradesSell()
    {
        return $this->container['current_week_total_trades_sell'];
    }

    /**
     * Sets current_week_total_trades_sell
     *
     * @param int|null $current_week_total_trades_sell The total number of sell trades between Monday (00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0.
     *
     * @return self
     */
    public function setCurrentWeekTotalTradesSell($current_week_total_trades_sell)
    {
        if (is_null($current_week_total_trades_sell)) {
            throw new \InvalidArgumentException('non-nullable current_week_total_trades_sell cannot be null');
        }
        $this->container['current_week_total_trades_sell'] = $current_week_total_trades_sell;

        return $this;
    }

    /**
     * Gets current_week_total_trades_unknown
     *
     * @return int|null
     */
    public function getCurrentWeekTotalTradesUnknown()
    {
        return $this->container['current_week_total_trades_unknown'];
    }

    /**
     * Sets current_week_total_trades_unknown
     *
     * @param int|null $current_week_total_trades_unknown The total number of unknown trades between Monday (00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0.
     *
     * @return self
     */
    public function setCurrentWeekTotalTradesUnknown($current_week_total_trades_unknown)
    {
        if (is_null($current_week_total_trades_unknown)) {
            throw new \InvalidArgumentException('non-nullable current_week_total_trades_unknown cannot be null');
        }
        $this->container['current_week_total_trades_unknown'] = $current_week_total_trades_unknown;

        return $this;
    }

    /**
     * Gets current_week_volume
     *
     * @return int|null
     */
    public function getCurrentWeekVolume()
    {
        return $this->container['current_week_volume'];
    }

    /**
     * Sets current_week_volume
     *
     * @param int|null $current_week_volume The sum of all trade quantities from Monday (00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0. Given in the base asset.
     *
     * @return self
     */
    public function setCurrentWeekVolume($current_week_volume)
    {
        if (is_null($current_week_volume)) {
            throw new \InvalidArgumentException('non-nullable current_week_volume cannot be null');
        }
        $this->container['current_week_volume'] = $current_week_volume;

        return $this;
    }

    /**
     * Gets current_week_volume_buy
     *
     * @return int|null
     */
    public function getCurrentWeekVolumeBuy()
    {
        return $this->container['current_week_volume_buy'];
    }

    /**
     * Sets current_week_volume_buy
     *
     * @param int|null $current_week_volume_buy The sum of all buy trade quantities from Monday (00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0. Given in the base asset.
     *
     * @return self
     */
    public function setCurrentWeekVolumeBuy($current_week_volume_buy)
    {
        if (is_null($current_week_volume_buy)) {
            throw new \InvalidArgumentException('non-nullable current_week_volume_buy cannot be null');
        }
        $this->container['current_week_volume_buy'] = $current_week_volume_buy;

        return $this;
    }

    /**
     * Gets current_week_volume_sell
     *
     * @return int|null
     */
    public function getCurrentWeekVolumeSell()
    {
        return $this->container['current_week_volume_sell'];
    }

    /**
     * Sets current_week_volume_sell
     *
     * @param int|null $current_week_volume_sell The sum of all sell trade quantities from Monday (00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0. Given in the base asset.
     *
     * @return self
     */
    public function setCurrentWeekVolumeSell($current_week_volume_sell)
    {
        if (is_null($current_week_volume_sell)) {
            throw new \InvalidArgumentException('non-nullable current_week_volume_sell cannot be null');
        }
        $this->container['current_week_volume_sell'] = $current_week_volume_sell;

        return $this;
    }

    /**
     * Gets current_week_volume_unknown
     *
     * @return int|null
     */
    public function getCurrentWeekVolumeUnknown()
    {
        return $this->container['current_week_volume_unknown'];
    }

    /**
     * Sets current_week_volume_unknown
     *
     * @param int|null $current_week_volume_unknown The sum of all unknown trade quantities from Monday (00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0. Given in the base asset.
     *
     * @return self
     */
    public function setCurrentWeekVolumeUnknown($current_week_volume_unknown)
    {
        if (is_null($current_week_volume_unknown)) {
            throw new \InvalidArgumentException('non-nullable current_week_volume_unknown cannot be null');
        }
        $this->container['current_week_volume_unknown'] = $current_week_volume_unknown;

        return $this;
    }

    /**
     * Gets current_year_high
     *
     * @return int|null
     */
    public function getCurrentYearHigh()
    {
        return $this->container['current_year_high'];
    }

    /**
     * Sets current_year_high
     *
     * @param int|null $current_year_high The highest traded price of the year excluding the current day. The period runs from the 1st of January - 00:00:00 GMT/UTC to the beginning - 00:00:00 GMT/UTC of the current day of the year. If today is the 1st of January, this value will be CURRENT_YEAR_OPEN. Given in the quote asset.
     *
     * @return self
     */
    public function setCurrentYearHigh($current_year_high)
    {
        if (is_null($current_year_high)) {
            throw new \InvalidArgumentException('non-nullable current_year_high cannot be null');
        }
        $this->container['current_year_high'] = $current_year_high;

        return $this;
    }

    /**
     * Gets current_year_low
     *
     * @return int|null
     */
    public function getCurrentYearLow()
    {
        return $this->container['current_year_low'];
    }

    /**
     * Sets current_year_low
     *
     * @param int|null $current_year_low The lowest traded price of the year excluding the current day. The period runs from the 1st of January - 00:00:00 GMT/UTC to the beginning - 00:00:00 GMT/UTC of the current day of the year. If today is the 1st of January, this value will be CURRENT_YEAR_OPEN. Given in the quote asset.
     *
     * @return self
     */
    public function setCurrentYearLow($current_year_low)
    {
        if (is_null($current_year_low)) {
            throw new \InvalidArgumentException('non-nullable current_year_low cannot be null');
        }
        $this->container['current_year_low'] = $current_year_low;

        return $this;
    }

    /**
     * Gets current_year_open
     *
     * @return int|null
     */
    public function getCurrentYearOpen()
    {
        return $this->container['current_year_open'];
    }

    /**
     * Sets current_year_open
     *
     * @param int|null $current_year_open The price of the closest trade to the 1st of January (00:00:00 GMT/UTC) of this year. In a highly liquid market, this would be the last trade that happened on on the 31st of December of the previous year (23:59:59 999 GMT/UTC). This will always be supplied and there is no need to do any calculation to get the full yearly value. Given in the quote asset.
     *
     * @return self
     */
    public function setCurrentYearOpen($current_year_open)
    {
        if (is_null($current_year_open)) {
            throw new \InvalidArgumentException('non-nullable current_year_open cannot be null');
        }
        $this->container['current_year_open'] = $current_year_open;

        return $this;
    }

    /**
     * Gets current_year_quote_volume
     *
     * @return int|null
     */
    public function getCurrentYearQuoteVolume()
    {
        return $this->container['current_year_quote_volume'];
    }

    /**
     * Sets current_year_quote_volume
     *
     * @param int|null $current_year_quote_volume The sum of all trade quote quantities from the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0. Given in the quote asset.
     *
     * @return self
     */
    public function setCurrentYearQuoteVolume($current_year_quote_volume)
    {
        if (is_null($current_year_quote_volume)) {
            throw new \InvalidArgumentException('non-nullable current_year_quote_volume cannot be null');
        }
        $this->container['current_year_quote_volume'] = $current_year_quote_volume;

        return $this;
    }

    /**
     * Gets current_year_quote_volume_buy
     *
     * @return int|null
     */
    public function getCurrentYearQuoteVolumeBuy()
    {
        return $this->container['current_year_quote_volume_buy'];
    }

    /**
     * Sets current_year_quote_volume_buy
     *
     * @param int|null $current_year_quote_volume_buy The sum of all buy trade quote quantities from the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0. Given in the quote asset.
     *
     * @return self
     */
    public function setCurrentYearQuoteVolumeBuy($current_year_quote_volume_buy)
    {
        if (is_null($current_year_quote_volume_buy)) {
            throw new \InvalidArgumentException('non-nullable current_year_quote_volume_buy cannot be null');
        }
        $this->container['current_year_quote_volume_buy'] = $current_year_quote_volume_buy;

        return $this;
    }

    /**
     * Gets current_year_quote_volume_sell
     *
     * @return int|null
     */
    public function getCurrentYearQuoteVolumeSell()
    {
        return $this->container['current_year_quote_volume_sell'];
    }

    /**
     * Sets current_year_quote_volume_sell
     *
     * @param int|null $current_year_quote_volume_sell The sum of all sell trade quote quantities from the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0. Given in the quote asset.
     *
     * @return self
     */
    public function setCurrentYearQuoteVolumeSell($current_year_quote_volume_sell)
    {
        if (is_null($current_year_quote_volume_sell)) {
            throw new \InvalidArgumentException('non-nullable current_year_quote_volume_sell cannot be null');
        }
        $this->container['current_year_quote_volume_sell'] = $current_year_quote_volume_sell;

        return $this;
    }

    /**
     * Gets current_year_quote_volume_unknown
     *
     * @return int|null
     */
    public function getCurrentYearQuoteVolumeUnknown()
    {
        return $this->container['current_year_quote_volume_unknown'];
    }

    /**
     * Sets current_year_quote_volume_unknown
     *
     * @param int|null $current_year_quote_volume_unknown The sum of all unknown trade quote quantities from the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0. Given in the quote asset.
     *
     * @return self
     */
    public function setCurrentYearQuoteVolumeUnknown($current_year_quote_volume_unknown)
    {
        if (is_null($current_year_quote_volume_unknown)) {
            throw new \InvalidArgumentException('non-nullable current_year_quote_volume_unknown cannot be null');
        }
        $this->container['current_year_quote_volume_unknown'] = $current_year_quote_volume_unknown;

        return $this;
    }

    /**
     * Gets current_year_total_trades
     *
     * @return int|null
     */
    public function getCurrentYearTotalTrades()
    {
        return $this->container['current_year_total_trades'];
    }

    /**
     * Sets current_year_total_trades
     *
     * @param int|null $current_year_total_trades The total number of trades between the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0.
     *
     * @return self
     */
    public function setCurrentYearTotalTrades($current_year_total_trades)
    {
        if (is_null($current_year_total_trades)) {
            throw new \InvalidArgumentException('non-nullable current_year_total_trades cannot be null');
        }
        $this->container['current_year_total_trades'] = $current_year_total_trades;

        return $this;
    }

    /**
     * Gets current_year_total_trades_buy
     *
     * @return int|null
     */
    public function getCurrentYearTotalTradesBuy()
    {
        return $this->container['current_year_total_trades_buy'];
    }

    /**
     * Sets current_year_total_trades_buy
     *
     * @param int|null $current_year_total_trades_buy The total number of buy trades between the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0.
     *
     * @return self
     */
    public function setCurrentYearTotalTradesBuy($current_year_total_trades_buy)
    {
        if (is_null($current_year_total_trades_buy)) {
            throw new \InvalidArgumentException('non-nullable current_year_total_trades_buy cannot be null');
        }
        $this->container['current_year_total_trades_buy'] = $current_year_total_trades_buy;

        return $this;
    }

    /**
     * Gets current_year_total_trades_sell
     *
     * @return int|null
     */
    public function getCurrentYearTotalTradesSell()
    {
        return $this->container['current_year_total_trades_sell'];
    }

    /**
     * Sets current_year_total_trades_sell
     *
     * @param int|null $current_year_total_trades_sell The total number of sell trades between the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0.
     *
     * @return self
     */
    public function setCurrentYearTotalTradesSell($current_year_total_trades_sell)
    {
        if (is_null($current_year_total_trades_sell)) {
            throw new \InvalidArgumentException('non-nullable current_year_total_trades_sell cannot be null');
        }
        $this->container['current_year_total_trades_sell'] = $current_year_total_trades_sell;

        return $this;
    }

    /**
     * Gets current_year_total_trades_unknown
     *
     * @return int|null
     */
    public function getCurrentYearTotalTradesUnknown()
    {
        return $this->container['current_year_total_trades_unknown'];
    }

    /**
     * Sets current_year_total_trades_unknown
     *
     * @param int|null $current_year_total_trades_unknown The total number of unknown trades between the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0.
     *
     * @return self
     */
    public function setCurrentYearTotalTradesUnknown($current_year_total_trades_unknown)
    {
        if (is_null($current_year_total_trades_unknown)) {
            throw new \InvalidArgumentException('non-nullable current_year_total_trades_unknown cannot be null');
        }
        $this->container['current_year_total_trades_unknown'] = $current_year_total_trades_unknown;

        return $this;
    }

    /**
     * Gets current_year_volume
     *
     * @return int|null
     */
    public function getCurrentYearVolume()
    {
        return $this->container['current_year_volume'];
    }

    /**
     * Sets current_year_volume
     *
     * @param int|null $current_year_volume The sum of all trade quantities from the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0. Given in the base asset.
     *
     * @return self
     */
    public function setCurrentYearVolume($current_year_volume)
    {
        if (is_null($current_year_volume)) {
            throw new \InvalidArgumentException('non-nullable current_year_volume cannot be null');
        }
        $this->container['current_year_volume'] = $current_year_volume;

        return $this;
    }

    /**
     * Gets current_year_volume_buy
     *
     * @return int|null
     */
    public function getCurrentYearVolumeBuy()
    {
        return $this->container['current_year_volume_buy'];
    }

    /**
     * Sets current_year_volume_buy
     *
     * @param int|null $current_year_volume_buy The sum of all buy trade quantities from the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0. Given in the base asset.
     *
     * @return self
     */
    public function setCurrentYearVolumeBuy($current_year_volume_buy)
    {
        if (is_null($current_year_volume_buy)) {
            throw new \InvalidArgumentException('non-nullable current_year_volume_buy cannot be null');
        }
        $this->container['current_year_volume_buy'] = $current_year_volume_buy;

        return $this;
    }

    /**
     * Gets current_year_volume_sell
     *
     * @return int|null
     */
    public function getCurrentYearVolumeSell()
    {
        return $this->container['current_year_volume_sell'];
    }

    /**
     * Sets current_year_volume_sell
     *
     * @param int|null $current_year_volume_sell The sum of all sell trade quantities from the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0. Given in the base asset.
     *
     * @return self
     */
    public function setCurrentYearVolumeSell($current_year_volume_sell)
    {
        if (is_null($current_year_volume_sell)) {
            throw new \InvalidArgumentException('non-nullable current_year_volume_sell cannot be null');
        }
        $this->container['current_year_volume_sell'] = $current_year_volume_sell;

        return $this;
    }

    /**
     * Gets current_year_volume_unknown
     *
     * @return int|null
     */
    public function getCurrentYearVolumeUnknown()
    {
        return $this->container['current_year_volume_unknown'];
    }

    /**
     * Sets current_year_volume_unknown
     *
     * @param int|null $current_year_volume_unknown The sum of all unknown trade quantities from the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0. Given in the base asset.
     *
     * @return self
     */
    public function setCurrentYearVolumeUnknown($current_year_volume_unknown)
    {
        if (is_null($current_year_volume_unknown)) {
            throw new \InvalidArgumentException('non-nullable current_year_volume_unknown cannot be null');
        }
        $this->container['current_year_volume_unknown'] = $current_year_volume_unknown;

        return $this;
    }

    /**
     * Gets instrument
     *
     * @return string|null
     */
    public function getInstrument()
    {
        return $this->container['instrument'];
    }

    /**
     * Sets instrument
     *
     * @param string|null $instrument The unmapped instrument ID
     *
     * @return self
     */
    public function setInstrument($instrument)
    {
        if (is_null($instrument)) {
            throw new \InvalidArgumentException('non-nullable instrument cannot be null');
        }
        $this->container['instrument'] = $instrument;

        return $this;
    }

    /**
     * Gets last_processed_trade_ccseq
     *
     * @return string|null
     */
    public function getLastProcessedTradeCcseq()
    {
        return $this->container['last_processed_trade_ccseq'];
    }

    /**
     * Sets last_processed_trade_ccseq
     *
     * @param string|null $last_processed_trade_ccseq The CCSEQ of the latest trade.
     *
     * @return self
     */
    public function setLastProcessedTradeCcseq($last_processed_trade_ccseq)
    {
        if (is_null($last_processed_trade_ccseq)) {
            throw new \InvalidArgumentException('non-nullable last_processed_trade_ccseq cannot be null');
        }
        $this->container['last_processed_trade_ccseq'] = $last_processed_trade_ccseq;

        return $this;
    }

    /**
     * Gets last_processed_trade_price
     *
     * @return int|null
     */
    public function getLastProcessedTradePrice()
    {
        return $this->container['last_processed_trade_price'];
    }

    /**
     * Sets last_processed_trade_price
     *
     * @param int|null $last_processed_trade_price The price in the quote asset of the last trade processed, as reported by the market / exchange.
     *
     * @return self
     */
    public function setLastProcessedTradePrice($last_processed_trade_price)
    {
        if (is_null($last_processed_trade_price)) {
            throw new \InvalidArgumentException('non-nullable last_processed_trade_price cannot be null');
        }
        $this->container['last_processed_trade_price'] = $last_processed_trade_price;

        return $this;
    }

    /**
     * Gets last_processed_trade_quantity
     *
     * @return int|null
     */
    public function getLastProcessedTradeQuantity()
    {
        return $this->container['last_processed_trade_quantity'];
    }

    /**
     * Sets last_processed_trade_quantity
     *
     * @param int|null $last_processed_trade_quantity The quantity of the last processed trade in the from symbol (base / coin).
     *
     * @return self
     */
    public function setLastProcessedTradeQuantity($last_processed_trade_quantity)
    {
        if (is_null($last_processed_trade_quantity)) {
            throw new \InvalidArgumentException('non-nullable last_processed_trade_quantity cannot be null');
        }
        $this->container['last_processed_trade_quantity'] = $last_processed_trade_quantity;

        return $this;
    }

    /**
     * Gets last_processed_trade_quote_quantity
     *
     * @return int|null
     */
    public function getLastProcessedTradeQuoteQuantity()
    {
        return $this->container['last_processed_trade_quote_quantity'];
    }

    /**
     * Sets last_processed_trade_quote_quantity
     *
     * @param int|null $last_processed_trade_quote_quantity The  volume of the last processed trade in the to asset / quote.
     *
     * @return self
     */
    public function setLastProcessedTradeQuoteQuantity($last_processed_trade_quote_quantity)
    {
        if (is_null($last_processed_trade_quote_quantity)) {
            throw new \InvalidArgumentException('non-nullable last_processed_trade_quote_quantity cannot be null');
        }
        $this->container['last_processed_trade_quote_quantity'] = $last_processed_trade_quote_quantity;

        return $this;
    }

    /**
     * Gets last_processed_trade_side
     *
     * @return string|null
     */
    public function getLastProcessedTradeSide()
    {
        return $this->container['last_processed_trade_side'];
    }

    /**
     * Sets last_processed_trade_side
     *
     * @param string|null $last_processed_trade_side The side of the last processed trade.
     *
     * @return self
     */
    public function setLastProcessedTradeSide($last_processed_trade_side)
    {
        if (is_null($last_processed_trade_side)) {
            throw new \InvalidArgumentException('non-nullable last_processed_trade_side cannot be null');
        }
        $this->container['last_processed_trade_side'] = $last_processed_trade_side;

        return $this;
    }

    /**
     * Gets last_processed_trade_ts
     *
     * @return int|null
     */
    public function getLastProcessedTradeTs()
    {
        return $this->container['last_processed_trade_ts'];
    }

    /**
     * Sets last_processed_trade_ts
     *
     * @param int|null $last_processed_trade_ts The timestamp in seconds that the last trade was processed, as reported by the market / exchange. If the market / exchange does not provide this information, the timestamp that the trade was received will be returned.
     *
     * @return self
     */
    public function setLastProcessedTradeTs($last_processed_trade_ts)
    {
        if (is_null($last_processed_trade_ts)) {
            throw new \InvalidArgumentException('non-nullable last_processed_trade_ts cannot be null');
        }
        $this->container['last_processed_trade_ts'] = $last_processed_trade_ts;

        return $this;
    }

    /**
     * Gets last_trade_ccseq
     *
     * @return string|null
     */
    public function getLastTradeCcseq()
    {
        return $this->container['last_trade_ccseq'];
    }

    /**
     * Sets last_trade_ccseq
     *
     * @param string|null $last_trade_ccseq The CCSEQ of the latest trade.
     *
     * @return self
     */
    public function setLastTradeCcseq($last_trade_ccseq)
    {
        if (is_null($last_trade_ccseq)) {
            throw new \InvalidArgumentException('non-nullable last_trade_ccseq cannot be null');
        }
        $this->container['last_trade_ccseq'] = $last_trade_ccseq;

        return $this;
    }

    /**
     * Gets last_trade_id
     *
     * @return string|null
     */
    public function getLastTradeId()
    {
        return $this->container['last_trade_id'];
    }

    /**
     * Sets last_trade_id
     *
     * @param string|null $last_trade_id The ID of the latest trade.
     *
     * @return self
     */
    public function setLastTradeId($last_trade_id)
    {
        if (is_null($last_trade_id)) {
            throw new \InvalidArgumentException('non-nullable last_trade_id cannot be null');
        }
        $this->container['last_trade_id'] = $last_trade_id;

        return $this;
    }

    /**
     * Gets last_trade_quantity
     *
     * @return int|null
     */
    public function getLastTradeQuantity()
    {
        return $this->container['last_trade_quantity'];
    }

    /**
     * Sets last_trade_quantity
     *
     * @param int|null $last_trade_quantity The quantity of the latest trade in the from symbol (base / coin).
     *
     * @return self
     */
    public function setLastTradeQuantity($last_trade_quantity)
    {
        if (is_null($last_trade_quantity)) {
            throw new \InvalidArgumentException('non-nullable last_trade_quantity cannot be null');
        }
        $this->container['last_trade_quantity'] = $last_trade_quantity;

        return $this;
    }

    /**
     * Gets last_trade_quote_quantity
     *
     * @return int|null
     */
    public function getLastTradeQuoteQuantity()
    {
        return $this->container['last_trade_quote_quantity'];
    }

    /**
     * Sets last_trade_quote_quantity
     *
     * @param int|null $last_trade_quote_quantity The volume of the latest trade in the to asset / quote.
     *
     * @return self
     */
    public function setLastTradeQuoteQuantity($last_trade_quote_quantity)
    {
        if (is_null($last_trade_quote_quantity)) {
            throw new \InvalidArgumentException('non-nullable last_trade_quote_quantity cannot be null');
        }
        $this->container['last_trade_quote_quantity'] = $last_trade_quote_quantity;

        return $this;
    }

    /**
     * Gets last_trade_side
     *
     * @return string|null
     */
    public function getLastTradeSide()
    {
        return $this->container['last_trade_side'];
    }

    /**
     * Sets last_trade_side
     *
     * @param string|null $last_trade_side The side of the latest trade.
     *
     * @return self
     */
    public function setLastTradeSide($last_trade_side)
    {
        if (is_null($last_trade_side)) {
            throw new \InvalidArgumentException('non-nullable last_trade_side cannot be null');
        }
        $this->container['last_trade_side'] = $last_trade_side;

        return $this;
    }

    /**
     * Gets lifetime_first_trade_ts
     *
     * @return int|null
     */
    public function getLifetimeFirstTradeTs()
    {
        return $this->container['lifetime_first_trade_ts'];
    }

    /**
     * Sets lifetime_first_trade_ts
     *
     * @param int|null $lifetime_first_trade_ts The timestamp of the first trade ever recorded for the instrument
     *
     * @return self
     */
    public function setLifetimeFirstTradeTs($lifetime_first_trade_ts)
    {
        if (is_null($lifetime_first_trade_ts)) {
            throw new \InvalidArgumentException('non-nullable lifetime_first_trade_ts cannot be null');
        }
        $this->container['lifetime_first_trade_ts'] = $lifetime_first_trade_ts;

        return $this;
    }

    /**
     * Gets lifetime_high
     *
     * @return int|null
     */
    public function getLifetimeHigh()
    {
        return $this->container['lifetime_high'];
    }

    /**
     * Sets lifetime_high
     *
     * @param int|null $lifetime_high The price of the highest trade ever executed for this instrument. Given in the quote asset.
     *
     * @return self
     */
    public function setLifetimeHigh($lifetime_high)
    {
        if (is_null($lifetime_high)) {
            throw new \InvalidArgumentException('non-nullable lifetime_high cannot be null');
        }
        $this->container['lifetime_high'] = $lifetime_high;

        return $this;
    }

    /**
     * Gets lifetime_high_ts
     *
     * @return int|null
     */
    public function getLifetimeHighTs()
    {
        return $this->container['lifetime_high_ts'];
    }

    /**
     * Sets lifetime_high_ts
     *
     * @param int|null $lifetime_high_ts The the timestamp of the highest trade ever executed for this instrument. Given in the quote asset.
     *
     * @return self
     */
    public function setLifetimeHighTs($lifetime_high_ts)
    {
        if (is_null($lifetime_high_ts)) {
            throw new \InvalidArgumentException('non-nullable lifetime_high_ts cannot be null');
        }
        $this->container['lifetime_high_ts'] = $lifetime_high_ts;

        return $this;
    }

    /**
     * Gets lifetime_low
     *
     * @return int|null
     */
    public function getLifetimeLow()
    {
        return $this->container['lifetime_low'];
    }

    /**
     * Sets lifetime_low
     *
     * @param int|null $lifetime_low The price of the lowest trade ever executed for this instrument. Given in the quote asset.
     *
     * @return self
     */
    public function setLifetimeLow($lifetime_low)
    {
        if (is_null($lifetime_low)) {
            throw new \InvalidArgumentException('non-nullable lifetime_low cannot be null');
        }
        $this->container['lifetime_low'] = $lifetime_low;

        return $this;
    }

    /**
     * Gets lifetime_low_ts
     *
     * @return int|null
     */
    public function getLifetimeLowTs()
    {
        return $this->container['lifetime_low_ts'];
    }

    /**
     * Sets lifetime_low_ts
     *
     * @param int|null $lifetime_low_ts The timestamp of the lowest trade ever executed for this instrument. Given in the quote asset.
     *
     * @return self
     */
    public function setLifetimeLowTs($lifetime_low_ts)
    {
        if (is_null($lifetime_low_ts)) {
            throw new \InvalidArgumentException('non-nullable lifetime_low_ts cannot be null');
        }
        $this->container['lifetime_low_ts'] = $lifetime_low_ts;

        return $this;
    }

    /**
     * Gets lifetime_open
     *
     * @return int|null
     */
    public function getLifetimeOpen()
    {
        return $this->container['lifetime_open'];
    }

    /**
     * Sets lifetime_open
     *
     * @param int|null $lifetime_open The price of the first trade of the instrument. Given in the quote asset.
     *
     * @return self
     */
    public function setLifetimeOpen($lifetime_open)
    {
        if (is_null($lifetime_open)) {
            throw new \InvalidArgumentException('non-nullable lifetime_open cannot be null');
        }
        $this->container['lifetime_open'] = $lifetime_open;

        return $this;
    }

    /**
     * Gets lifetime_quote_volume
     *
     * @return int|null
     */
    public function getLifetimeQuoteVolume()
    {
        return $this->container['lifetime_quote_volume'];
    }

    /**
     * Sets lifetime_quote_volume
     *
     * @param int|null $lifetime_quote_volume The sum of all trade quote quantities of all the trades of this instrument. Given in the quote asset.
     *
     * @return self
     */
    public function setLifetimeQuoteVolume($lifetime_quote_volume)
    {
        if (is_null($lifetime_quote_volume)) {
            throw new \InvalidArgumentException('non-nullable lifetime_quote_volume cannot be null');
        }
        $this->container['lifetime_quote_volume'] = $lifetime_quote_volume;

        return $this;
    }

    /**
     * Gets lifetime_quote_volume_buy
     *
     * @return int|null
     */
    public function getLifetimeQuoteVolumeBuy()
    {
        return $this->container['lifetime_quote_volume_buy'];
    }

    /**
     * Sets lifetime_quote_volume_buy
     *
     * @param int|null $lifetime_quote_volume_buy The sum of all buy trade quote quantities of all the trades of this instrument. Given in the quote asset.
     *
     * @return self
     */
    public function setLifetimeQuoteVolumeBuy($lifetime_quote_volume_buy)
    {
        if (is_null($lifetime_quote_volume_buy)) {
            throw new \InvalidArgumentException('non-nullable lifetime_quote_volume_buy cannot be null');
        }
        $this->container['lifetime_quote_volume_buy'] = $lifetime_quote_volume_buy;

        return $this;
    }

    /**
     * Gets lifetime_quote_volume_sell
     *
     * @return int|null
     */
    public function getLifetimeQuoteVolumeSell()
    {
        return $this->container['lifetime_quote_volume_sell'];
    }

    /**
     * Sets lifetime_quote_volume_sell
     *
     * @param int|null $lifetime_quote_volume_sell The sum of all sell trade quote quantities of all the trades of this instrument. Given in the quote asset.
     *
     * @return self
     */
    public function setLifetimeQuoteVolumeSell($lifetime_quote_volume_sell)
    {
        if (is_null($lifetime_quote_volume_sell)) {
            throw new \InvalidArgumentException('non-nullable lifetime_quote_volume_sell cannot be null');
        }
        $this->container['lifetime_quote_volume_sell'] = $lifetime_quote_volume_sell;

        return $this;
    }

    /**
     * Gets lifetime_quote_volume_unknown
     *
     * @return int|null
     */
    public function getLifetimeQuoteVolumeUnknown()
    {
        return $this->container['lifetime_quote_volume_unknown'];
    }

    /**
     * Sets lifetime_quote_volume_unknown
     *
     * @param int|null $lifetime_quote_volume_unknown The sum of all unknown trade quote quantities of all the trades of this instrument. Given in the quote asset.
     *
     * @return self
     */
    public function setLifetimeQuoteVolumeUnknown($lifetime_quote_volume_unknown)
    {
        if (is_null($lifetime_quote_volume_unknown)) {
            throw new \InvalidArgumentException('non-nullable lifetime_quote_volume_unknown cannot be null');
        }
        $this->container['lifetime_quote_volume_unknown'] = $lifetime_quote_volume_unknown;

        return $this;
    }

    /**
     * Gets lifetime_total_trades
     *
     * @return int|null
     */
    public function getLifetimeTotalTrades()
    {
        return $this->container['lifetime_total_trades'];
    }

    /**
     * Sets lifetime_total_trades
     *
     * @param int|null $lifetime_total_trades The total number of all trades that have ever been executed for this instrument.
     *
     * @return self
     */
    public function setLifetimeTotalTrades($lifetime_total_trades)
    {
        if (is_null($lifetime_total_trades)) {
            throw new \InvalidArgumentException('non-nullable lifetime_total_trades cannot be null');
        }
        $this->container['lifetime_total_trades'] = $lifetime_total_trades;

        return $this;
    }

    /**
     * Gets lifetime_total_trades_buy
     *
     * @return int|null
     */
    public function getLifetimeTotalTradesBuy()
    {
        return $this->container['lifetime_total_trades_buy'];
    }

    /**
     * Sets lifetime_total_trades_buy
     *
     * @param int|null $lifetime_total_trades_buy The total number of all buy trades that have ever been executed for this instrument.
     *
     * @return self
     */
    public function setLifetimeTotalTradesBuy($lifetime_total_trades_buy)
    {
        if (is_null($lifetime_total_trades_buy)) {
            throw new \InvalidArgumentException('non-nullable lifetime_total_trades_buy cannot be null');
        }
        $this->container['lifetime_total_trades_buy'] = $lifetime_total_trades_buy;

        return $this;
    }

    /**
     * Gets lifetime_total_trades_sell
     *
     * @return int|null
     */
    public function getLifetimeTotalTradesSell()
    {
        return $this->container['lifetime_total_trades_sell'];
    }

    /**
     * Sets lifetime_total_trades_sell
     *
     * @param int|null $lifetime_total_trades_sell The total number of all sell trades that have ever been executed for this instrument.
     *
     * @return self
     */
    public function setLifetimeTotalTradesSell($lifetime_total_trades_sell)
    {
        if (is_null($lifetime_total_trades_sell)) {
            throw new \InvalidArgumentException('non-nullable lifetime_total_trades_sell cannot be null');
        }
        $this->container['lifetime_total_trades_sell'] = $lifetime_total_trades_sell;

        return $this;
    }

    /**
     * Gets lifetime_total_trades_unknown
     *
     * @return int|null
     */
    public function getLifetimeTotalTradesUnknown()
    {
        return $this->container['lifetime_total_trades_unknown'];
    }

    /**
     * Sets lifetime_total_trades_unknown
     *
     * @param int|null $lifetime_total_trades_unknown The total number of all unknown trades that have ever been executed for this instrument.
     *
     * @return self
     */
    public function setLifetimeTotalTradesUnknown($lifetime_total_trades_unknown)
    {
        if (is_null($lifetime_total_trades_unknown)) {
            throw new \InvalidArgumentException('non-nullable lifetime_total_trades_unknown cannot be null');
        }
        $this->container['lifetime_total_trades_unknown'] = $lifetime_total_trades_unknown;

        return $this;
    }

    /**
     * Gets lifetime_volume
     *
     * @return int|null
     */
    public function getLifetimeVolume()
    {
        return $this->container['lifetime_volume'];
    }

    /**
     * Sets lifetime_volume
     *
     * @param int|null $lifetime_volume The sum of all trade quantities of all the trades of this instrument. Given in the base asset.
     *
     * @return self
     */
    public function setLifetimeVolume($lifetime_volume)
    {
        if (is_null($lifetime_volume)) {
            throw new \InvalidArgumentException('non-nullable lifetime_volume cannot be null');
        }
        $this->container['lifetime_volume'] = $lifetime_volume;

        return $this;
    }

    /**
     * Gets lifetime_volume_buy
     *
     * @return int|null
     */
    public function getLifetimeVolumeBuy()
    {
        return $this->container['lifetime_volume_buy'];
    }

    /**
     * Sets lifetime_volume_buy
     *
     * @param int|null $lifetime_volume_buy The sum of all buy trade quantities of all the trades of this instrument. Given in the base asset.
     *
     * @return self
     */
    public function setLifetimeVolumeBuy($lifetime_volume_buy)
    {
        if (is_null($lifetime_volume_buy)) {
            throw new \InvalidArgumentException('non-nullable lifetime_volume_buy cannot be null');
        }
        $this->container['lifetime_volume_buy'] = $lifetime_volume_buy;

        return $this;
    }

    /**
     * Gets lifetime_volume_sell
     *
     * @return int|null
     */
    public function getLifetimeVolumeSell()
    {
        return $this->container['lifetime_volume_sell'];
    }

    /**
     * Sets lifetime_volume_sell
     *
     * @param int|null $lifetime_volume_sell The sum of all sell trade quantities of all the trades of this instrument. Given in the base asset.
     *
     * @return self
     */
    public function setLifetimeVolumeSell($lifetime_volume_sell)
    {
        if (is_null($lifetime_volume_sell)) {
            throw new \InvalidArgumentException('non-nullable lifetime_volume_sell cannot be null');
        }
        $this->container['lifetime_volume_sell'] = $lifetime_volume_sell;

        return $this;
    }

    /**
     * Gets lifetime_volume_unknown
     *
     * @return int|null
     */
    public function getLifetimeVolumeUnknown()
    {
        return $this->container['lifetime_volume_unknown'];
    }

    /**
     * Sets lifetime_volume_unknown
     *
     * @param int|null $lifetime_volume_unknown The sum of all unknown trade quantities of all the trades of this instrument. Given in the base asset.
     *
     * @return self
     */
    public function setLifetimeVolumeUnknown($lifetime_volume_unknown)
    {
        if (is_null($lifetime_volume_unknown)) {
            throw new \InvalidArgumentException('non-nullable lifetime_volume_unknown cannot be null');
        }
        $this->container['lifetime_volume_unknown'] = $lifetime_volume_unknown;

        return $this;
    }

    /**
     * Gets mapped_instrument
     *
     * @return string|null
     */
    public function getMappedInstrument()
    {
        return $this->container['mapped_instrument'];
    }

    /**
     * Sets mapped_instrument
     *
     * @param string|null $mapped_instrument The mapped instrument ID, derived from our mapping rules. This takes the form: \"BASE-QUOTE\" (e.g. BTC-USD). Only available on instruments that have been mapped.
     *
     * @return self
     */
    public function setMappedInstrument($mapped_instrument)
    {
        if (is_null($mapped_instrument)) {
            throw new \InvalidArgumentException('non-nullable mapped_instrument cannot be null');
        }
        $this->container['mapped_instrument'] = $mapped_instrument;

        return $this;
    }

    /**
     * Gets market
     *
     * @return string|null
     */
    public function getMarket()
    {
        return $this->container['market'];
    }

    /**
     * Sets market
     *
     * @param string|null $market The market / exchange under consideration (e.g. coinbase, kraken, etc).
     *
     * @return self
     */
    public function setMarket($market)
    {
        if (is_null($market)) {
            throw new \InvalidArgumentException('non-nullable market cannot be null');
        }
        $this->container['market'] = $market;

        return $this;
    }

    /**
     * Gets moving_180_day_high
     *
     * @return int|null
     */
    public function getMoving180DayHigh()
    {
        return $this->container['moving_180_day_high'];
    }

    /**
     * Sets moving_180_day_high
     *
     * @param int|null $moving_180_day_high The  highest traded price of the period. Here, the period runs from 180 days ago up to the beginning of the current day (179 days in total). Given in the quote asset.
     *
     * @return self
     */
    public function setMoving180DayHigh($moving_180_day_high)
    {
        if (is_null($moving_180_day_high)) {
            throw new \InvalidArgumentException('non-nullable moving_180_day_high cannot be null');
        }
        $this->container['moving_180_day_high'] = $moving_180_day_high;

        return $this;
    }

    /**
     * Gets moving_180_day_low
     *
     * @return int|null
     */
    public function getMoving180DayLow()
    {
        return $this->container['moving_180_day_low'];
    }

    /**
     * Sets moving_180_day_low
     *
     * @param int|null $moving_180_day_low The lowest traded price of the period. Here, the period runs from 180 days ago up to the beginning of the current day (179 days in total). Given in the quote asset.
     *
     * @return self
     */
    public function setMoving180DayLow($moving_180_day_low)
    {
        if (is_null($moving_180_day_low)) {
            throw new \InvalidArgumentException('non-nullable moving_180_day_low cannot be null');
        }
        $this->container['moving_180_day_low'] = $moving_180_day_low;

        return $this;
    }

    /**
     * Gets moving_180_day_open
     *
     * @return int|null
     */
    public function getMoving180DayOpen()
    {
        return $this->container['moving_180_day_open'];
    }

    /**
     * Sets moving_180_day_open
     *
     * @param int|null $moving_180_day_open The price of the closest trade to the period start date (179 days + current day - 00:00:00 GMT/UTC to now). This will always be supplied and there is no need to do any calculation to get the full 180 day value. Given in the quote asset.
     *
     * @return self
     */
    public function setMoving180DayOpen($moving_180_day_open)
    {
        if (is_null($moving_180_day_open)) {
            throw new \InvalidArgumentException('non-nullable moving_180_day_open cannot be null');
        }
        $this->container['moving_180_day_open'] = $moving_180_day_open;

        return $this;
    }

    /**
     * Gets moving_180_day_quote_volume
     *
     * @return int|null
     */
    public function getMoving180DayQuoteVolume()
    {
        return $this->container['moving_180_day_quote_volume'];
    }

    /**
     * Sets moving_180_day_quote_volume
     *
     * @param int|null $moving_180_day_quote_volume The sum of all trade quote quantities from 180 days ago up to the beginning of the current day (179 days in total). Given in the quote asset.
     *
     * @return self
     */
    public function setMoving180DayQuoteVolume($moving_180_day_quote_volume)
    {
        if (is_null($moving_180_day_quote_volume)) {
            throw new \InvalidArgumentException('non-nullable moving_180_day_quote_volume cannot be null');
        }
        $this->container['moving_180_day_quote_volume'] = $moving_180_day_quote_volume;

        return $this;
    }

    /**
     * Gets moving_180_day_quote_volume_buy
     *
     * @return int|null
     */
    public function getMoving180DayQuoteVolumeBuy()
    {
        return $this->container['moving_180_day_quote_volume_buy'];
    }

    /**
     * Sets moving_180_day_quote_volume_buy
     *
     * @param int|null $moving_180_day_quote_volume_buy The sum of all buy trade quote quantities from 180 days ago up to the beginning of the current day (179 days in total). Given in the quote asset.
     *
     * @return self
     */
    public function setMoving180DayQuoteVolumeBuy($moving_180_day_quote_volume_buy)
    {
        if (is_null($moving_180_day_quote_volume_buy)) {
            throw new \InvalidArgumentException('non-nullable moving_180_day_quote_volume_buy cannot be null');
        }
        $this->container['moving_180_day_quote_volume_buy'] = $moving_180_day_quote_volume_buy;

        return $this;
    }

    /**
     * Gets moving_180_day_quote_volume_sell
     *
     * @return int|null
     */
    public function getMoving180DayQuoteVolumeSell()
    {
        return $this->container['moving_180_day_quote_volume_sell'];
    }

    /**
     * Sets moving_180_day_quote_volume_sell
     *
     * @param int|null $moving_180_day_quote_volume_sell The sum of all sell trade quote quantities from 180 days ago up to the beginning of the current day (179 days in total). Given in the quote asset.
     *
     * @return self
     */
    public function setMoving180DayQuoteVolumeSell($moving_180_day_quote_volume_sell)
    {
        if (is_null($moving_180_day_quote_volume_sell)) {
            throw new \InvalidArgumentException('non-nullable moving_180_day_quote_volume_sell cannot be null');
        }
        $this->container['moving_180_day_quote_volume_sell'] = $moving_180_day_quote_volume_sell;

        return $this;
    }

    /**
     * Gets moving_180_day_quote_volume_unknown
     *
     * @return int|null
     */
    public function getMoving180DayQuoteVolumeUnknown()
    {
        return $this->container['moving_180_day_quote_volume_unknown'];
    }

    /**
     * Sets moving_180_day_quote_volume_unknown
     *
     * @param int|null $moving_180_day_quote_volume_unknown The sum of all unknown trade quote quantities from 180 days ago up to the beginning of the current day (179 days in total). Given in the quote asset.
     *
     * @return self
     */
    public function setMoving180DayQuoteVolumeUnknown($moving_180_day_quote_volume_unknown)
    {
        if (is_null($moving_180_day_quote_volume_unknown)) {
            throw new \InvalidArgumentException('non-nullable moving_180_day_quote_volume_unknown cannot be null');
        }
        $this->container['moving_180_day_quote_volume_unknown'] = $moving_180_day_quote_volume_unknown;

        return $this;
    }

    /**
     * Gets moving_180_day_total_trades
     *
     * @return int|null
     */
    public function getMoving180DayTotalTrades()
    {
        return $this->container['moving_180_day_total_trades'];
    }

    /**
     * Sets moving_180_day_total_trades
     *
     * @param int|null $moving_180_day_total_trades The total number of trades that have occurred in the period from 180 days ago to the beginning (00:00:00 GMT/UTC) of the current day (179 days in total).
     *
     * @return self
     */
    public function setMoving180DayTotalTrades($moving_180_day_total_trades)
    {
        if (is_null($moving_180_day_total_trades)) {
            throw new \InvalidArgumentException('non-nullable moving_180_day_total_trades cannot be null');
        }
        $this->container['moving_180_day_total_trades'] = $moving_180_day_total_trades;

        return $this;
    }

    /**
     * Gets moving_180_day_total_trades_buy
     *
     * @return int|null
     */
    public function getMoving180DayTotalTradesBuy()
    {
        return $this->container['moving_180_day_total_trades_buy'];
    }

    /**
     * Sets moving_180_day_total_trades_buy
     *
     * @param int|null $moving_180_day_total_trades_buy The total number of buy trades that have occurred in the period from 180 days ago to the beginning (00:00:00 GMT/UTC) of the current day (179 days in total).
     *
     * @return self
     */
    public function setMoving180DayTotalTradesBuy($moving_180_day_total_trades_buy)
    {
        if (is_null($moving_180_day_total_trades_buy)) {
            throw new \InvalidArgumentException('non-nullable moving_180_day_total_trades_buy cannot be null');
        }
        $this->container['moving_180_day_total_trades_buy'] = $moving_180_day_total_trades_buy;

        return $this;
    }

    /**
     * Gets moving_180_day_total_trades_sell
     *
     * @return int|null
     */
    public function getMoving180DayTotalTradesSell()
    {
        return $this->container['moving_180_day_total_trades_sell'];
    }

    /**
     * Sets moving_180_day_total_trades_sell
     *
     * @param int|null $moving_180_day_total_trades_sell The total number of sell trades that have occurred in the period from 180 days ago to the beginning (00:00:00 GMT/UTC) of the current day (179 days in total).
     *
     * @return self
     */
    public function setMoving180DayTotalTradesSell($moving_180_day_total_trades_sell)
    {
        if (is_null($moving_180_day_total_trades_sell)) {
            throw new \InvalidArgumentException('non-nullable moving_180_day_total_trades_sell cannot be null');
        }
        $this->container['moving_180_day_total_trades_sell'] = $moving_180_day_total_trades_sell;

        return $this;
    }

    /**
     * Gets moving_180_day_total_trades_unknown
     *
     * @return int|null
     */
    public function getMoving180DayTotalTradesUnknown()
    {
        return $this->container['moving_180_day_total_trades_unknown'];
    }

    /**
     * Sets moving_180_day_total_trades_unknown
     *
     * @param int|null $moving_180_day_total_trades_unknown The total number of unknown trades that have occurred in the period from 180 days ago to the beginning (00:00:00 GMT/UTC) of the current day (179 days in total).
     *
     * @return self
     */
    public function setMoving180DayTotalTradesUnknown($moving_180_day_total_trades_unknown)
    {
        if (is_null($moving_180_day_total_trades_unknown)) {
            throw new \InvalidArgumentException('non-nullable moving_180_day_total_trades_unknown cannot be null');
        }
        $this->container['moving_180_day_total_trades_unknown'] = $moving_180_day_total_trades_unknown;

        return $this;
    }

    /**
     * Gets moving_180_day_volume
     *
     * @return int|null
     */
    public function getMoving180DayVolume()
    {
        return $this->container['moving_180_day_volume'];
    }

    /**
     * Sets moving_180_day_volume
     *
     * @param int|null $moving_180_day_volume The sum of all trade quantities from 180 days ago up to the beginning of the current day (179 days in total). Given in the base asset.
     *
     * @return self
     */
    public function setMoving180DayVolume($moving_180_day_volume)
    {
        if (is_null($moving_180_day_volume)) {
            throw new \InvalidArgumentException('non-nullable moving_180_day_volume cannot be null');
        }
        $this->container['moving_180_day_volume'] = $moving_180_day_volume;

        return $this;
    }

    /**
     * Gets moving_180_day_volume_buy
     *
     * @return int|null
     */
    public function getMoving180DayVolumeBuy()
    {
        return $this->container['moving_180_day_volume_buy'];
    }

    /**
     * Sets moving_180_day_volume_buy
     *
     * @param int|null $moving_180_day_volume_buy The sum of all trade quantities from 180 days ago up to the beginning of the current day (179 days in total). Given in the base asset.
     *
     * @return self
     */
    public function setMoving180DayVolumeBuy($moving_180_day_volume_buy)
    {
        if (is_null($moving_180_day_volume_buy)) {
            throw new \InvalidArgumentException('non-nullable moving_180_day_volume_buy cannot be null');
        }
        $this->container['moving_180_day_volume_buy'] = $moving_180_day_volume_buy;

        return $this;
    }

    /**
     * Gets moving_180_day_volume_sell
     *
     * @return int|null
     */
    public function getMoving180DayVolumeSell()
    {
        return $this->container['moving_180_day_volume_sell'];
    }

    /**
     * Sets moving_180_day_volume_sell
     *
     * @param int|null $moving_180_day_volume_sell The sum of all sell trade quantities from 180 days ago up to the beginning of the current day (179 days in total). Given in the base asset.
     *
     * @return self
     */
    public function setMoving180DayVolumeSell($moving_180_day_volume_sell)
    {
        if (is_null($moving_180_day_volume_sell)) {
            throw new \InvalidArgumentException('non-nullable moving_180_day_volume_sell cannot be null');
        }
        $this->container['moving_180_day_volume_sell'] = $moving_180_day_volume_sell;

        return $this;
    }

    /**
     * Gets moving_180_day_volume_unknown
     *
     * @return int|null
     */
    public function getMoving180DayVolumeUnknown()
    {
        return $this->container['moving_180_day_volume_unknown'];
    }

    /**
     * Sets moving_180_day_volume_unknown
     *
     * @param int|null $moving_180_day_volume_unknown The sum of all unknown trade quantities from 180 days ago up to the beginning of the current day (179 days in total). Given in the base asset.
     *
     * @return self
     */
    public function setMoving180DayVolumeUnknown($moving_180_day_volume_unknown)
    {
        if (is_null($moving_180_day_volume_unknown)) {
            throw new \InvalidArgumentException('non-nullable moving_180_day_volume_unknown cannot be null');
        }
        $this->container['moving_180_day_volume_unknown'] = $moving_180_day_volume_unknown;

        return $this;
    }

    /**
     * Gets moving_24_hour_high
     *
     * @return int|null
     */
    public function getMoving24HourHigh()
    {
        return $this->container['moving_24_hour_high'];
    }

    /**
     * Sets moving_24_hour_high
     *
     * @param int|null $moving_24_hour_high The highest traded price of the period. Here, the period runs from 24 hours ago up to the beginning of the current hour (23 hours in total). Given in the quote asset.
     *
     * @return self
     */
    public function setMoving24HourHigh($moving_24_hour_high)
    {
        if (is_null($moving_24_hour_high)) {
            throw new \InvalidArgumentException('non-nullable moving_24_hour_high cannot be null');
        }
        $this->container['moving_24_hour_high'] = $moving_24_hour_high;

        return $this;
    }

    /**
     * Gets moving_24_hour_low
     *
     * @return int|null
     */
    public function getMoving24HourLow()
    {
        return $this->container['moving_24_hour_low'];
    }

    /**
     * Sets moving_24_hour_low
     *
     * @param int|null $moving_24_hour_low The lowest traded price of the period. Here, the period runs from 24 hours ago up to the beginning of the current hour (23 hours in total). Given in the quote asset.
     *
     * @return self
     */
    public function setMoving24HourLow($moving_24_hour_low)
    {
        if (is_null($moving_24_hour_low)) {
            throw new \InvalidArgumentException('non-nullable moving_24_hour_low cannot be null');
        }
        $this->container['moving_24_hour_low'] = $moving_24_hour_low;

        return $this;
    }

    /**
     * Gets moving_24_hour_open
     *
     * @return int|null
     */
    public function getMoving24HourOpen()
    {
        return $this->container['moving_24_hour_open'];
    }

    /**
     * Sets moving_24_hour_open
     *
     * @param int|null $moving_24_hour_open The price of the closest trade to the period start date (23 hours + current hour ago). This will always be supplied and there is no need to do any calculation to get the full 24 hour value. Given in the quote asset.
     *
     * @return self
     */
    public function setMoving24HourOpen($moving_24_hour_open)
    {
        if (is_null($moving_24_hour_open)) {
            throw new \InvalidArgumentException('non-nullable moving_24_hour_open cannot be null');
        }
        $this->container['moving_24_hour_open'] = $moving_24_hour_open;

        return $this;
    }

    /**
     * Gets moving_24_hour_quote_volume
     *
     * @return int|null
     */
    public function getMoving24HourQuoteVolume()
    {
        return $this->container['moving_24_hour_quote_volume'];
    }

    /**
     * Sets moving_24_hour_quote_volume
     *
     * @param int|null $moving_24_hour_quote_volume The sum of all trade quote quantities from 24 hours ago up to the beginning of the current hour (23 hours in total). Given in the quote asset.
     *
     * @return self
     */
    public function setMoving24HourQuoteVolume($moving_24_hour_quote_volume)
    {
        if (is_null($moving_24_hour_quote_volume)) {
            throw new \InvalidArgumentException('non-nullable moving_24_hour_quote_volume cannot be null');
        }
        $this->container['moving_24_hour_quote_volume'] = $moving_24_hour_quote_volume;

        return $this;
    }

    /**
     * Gets moving_24_hour_quote_volume_buy
     *
     * @return int|null
     */
    public function getMoving24HourQuoteVolumeBuy()
    {
        return $this->container['moving_24_hour_quote_volume_buy'];
    }

    /**
     * Sets moving_24_hour_quote_volume_buy
     *
     * @param int|null $moving_24_hour_quote_volume_buy The sum of all buy trade quote quantities from 24 hours ago up to the beginning of the current hour (23 hours in total). Given in the quote asset.
     *
     * @return self
     */
    public function setMoving24HourQuoteVolumeBuy($moving_24_hour_quote_volume_buy)
    {
        if (is_null($moving_24_hour_quote_volume_buy)) {
            throw new \InvalidArgumentException('non-nullable moving_24_hour_quote_volume_buy cannot be null');
        }
        $this->container['moving_24_hour_quote_volume_buy'] = $moving_24_hour_quote_volume_buy;

        return $this;
    }

    /**
     * Gets moving_24_hour_quote_volume_sell
     *
     * @return int|null
     */
    public function getMoving24HourQuoteVolumeSell()
    {
        return $this->container['moving_24_hour_quote_volume_sell'];
    }

    /**
     * Sets moving_24_hour_quote_volume_sell
     *
     * @param int|null $moving_24_hour_quote_volume_sell The sum of all sell trade quote quantities from 24 hours ago up to the beginning of the current hour (23 hours in total). Given in the quote asset.
     *
     * @return self
     */
    public function setMoving24HourQuoteVolumeSell($moving_24_hour_quote_volume_sell)
    {
        if (is_null($moving_24_hour_quote_volume_sell)) {
            throw new \InvalidArgumentException('non-nullable moving_24_hour_quote_volume_sell cannot be null');
        }
        $this->container['moving_24_hour_quote_volume_sell'] = $moving_24_hour_quote_volume_sell;

        return $this;
    }

    /**
     * Gets moving_24_hour_quote_volume_unknown
     *
     * @return int|null
     */
    public function getMoving24HourQuoteVolumeUnknown()
    {
        return $this->container['moving_24_hour_quote_volume_unknown'];
    }

    /**
     * Sets moving_24_hour_quote_volume_unknown
     *
     * @param int|null $moving_24_hour_quote_volume_unknown The sum of all unknown trade quote quantities from 24 hours ago up to the beginning of the current hour (23 hours in total). Given in the quote asset.
     *
     * @return self
     */
    public function setMoving24HourQuoteVolumeUnknown($moving_24_hour_quote_volume_unknown)
    {
        if (is_null($moving_24_hour_quote_volume_unknown)) {
            throw new \InvalidArgumentException('non-nullable moving_24_hour_quote_volume_unknown cannot be null');
        }
        $this->container['moving_24_hour_quote_volume_unknown'] = $moving_24_hour_quote_volume_unknown;

        return $this;
    }

    /**
     * Gets moving_24_hour_total_trades
     *
     * @return int|null
     */
    public function getMoving24HourTotalTrades()
    {
        return $this->container['moving_24_hour_total_trades'];
    }

    /**
     * Sets moving_24_hour_total_trades
     *
     * @param int|null $moving_24_hour_total_trades The total number of trades that have occurred in the period running from 24 hours ago to the beginning (xx:00:00) of the current hour (23 hours in total).
     *
     * @return self
     */
    public function setMoving24HourTotalTrades($moving_24_hour_total_trades)
    {
        if (is_null($moving_24_hour_total_trades)) {
            throw new \InvalidArgumentException('non-nullable moving_24_hour_total_trades cannot be null');
        }
        $this->container['moving_24_hour_total_trades'] = $moving_24_hour_total_trades;

        return $this;
    }

    /**
     * Gets moving_24_hour_total_trades_buy
     *
     * @return int|null
     */
    public function getMoving24HourTotalTradesBuy()
    {
        return $this->container['moving_24_hour_total_trades_buy'];
    }

    /**
     * Sets moving_24_hour_total_trades_buy
     *
     * @param int|null $moving_24_hour_total_trades_buy The total number of buy trades that have occurred in the period running from 24 hours ago to the beginning (xx:00:00) of the current hour (23 hours in total).
     *
     * @return self
     */
    public function setMoving24HourTotalTradesBuy($moving_24_hour_total_trades_buy)
    {
        if (is_null($moving_24_hour_total_trades_buy)) {
            throw new \InvalidArgumentException('non-nullable moving_24_hour_total_trades_buy cannot be null');
        }
        $this->container['moving_24_hour_total_trades_buy'] = $moving_24_hour_total_trades_buy;

        return $this;
    }

    /**
     * Gets moving_24_hour_total_trades_sell
     *
     * @return int|null
     */
    public function getMoving24HourTotalTradesSell()
    {
        return $this->container['moving_24_hour_total_trades_sell'];
    }

    /**
     * Sets moving_24_hour_total_trades_sell
     *
     * @param int|null $moving_24_hour_total_trades_sell The total number of sell trades that have occurred in the period running from 24 hours ago to the beginning (xx:00:00) of the current hour (23 hours in total).
     *
     * @return self
     */
    public function setMoving24HourTotalTradesSell($moving_24_hour_total_trades_sell)
    {
        if (is_null($moving_24_hour_total_trades_sell)) {
            throw new \InvalidArgumentException('non-nullable moving_24_hour_total_trades_sell cannot be null');
        }
        $this->container['moving_24_hour_total_trades_sell'] = $moving_24_hour_total_trades_sell;

        return $this;
    }

    /**
     * Gets moving_24_hour_total_trades_unknown
     *
     * @return int|null
     */
    public function getMoving24HourTotalTradesUnknown()
    {
        return $this->container['moving_24_hour_total_trades_unknown'];
    }

    /**
     * Sets moving_24_hour_total_trades_unknown
     *
     * @param int|null $moving_24_hour_total_trades_unknown The total number of unknown trades that have occurred in the period running from 24 hours ago to the beginning (xx:00:00) of the current hour (23 hours in total).
     *
     * @return self
     */
    public function setMoving24HourTotalTradesUnknown($moving_24_hour_total_trades_unknown)
    {
        if (is_null($moving_24_hour_total_trades_unknown)) {
            throw new \InvalidArgumentException('non-nullable moving_24_hour_total_trades_unknown cannot be null');
        }
        $this->container['moving_24_hour_total_trades_unknown'] = $moving_24_hour_total_trades_unknown;

        return $this;
    }

    /**
     * Gets moving_24_hour_volume
     *
     * @return int|null
     */
    public function getMoving24HourVolume()
    {
        return $this->container['moving_24_hour_volume'];
    }

    /**
     * Sets moving_24_hour_volume
     *
     * @param int|null $moving_24_hour_volume The sum of all trade quantities from 24 hours ago up to the beginning of the current hour (23 hours in total). Given in the base asset.
     *
     * @return self
     */
    public function setMoving24HourVolume($moving_24_hour_volume)
    {
        if (is_null($moving_24_hour_volume)) {
            throw new \InvalidArgumentException('non-nullable moving_24_hour_volume cannot be null');
        }
        $this->container['moving_24_hour_volume'] = $moving_24_hour_volume;

        return $this;
    }

    /**
     * Gets moving_24_hour_volume_buy
     *
     * @return int|null
     */
    public function getMoving24HourVolumeBuy()
    {
        return $this->container['moving_24_hour_volume_buy'];
    }

    /**
     * Sets moving_24_hour_volume_buy
     *
     * @param int|null $moving_24_hour_volume_buy The sum of all buy trade quantities from 24 hours ago up to the beginning of the current hour (23 hours in total). Given in the base asset.
     *
     * @return self
     */
    public function setMoving24HourVolumeBuy($moving_24_hour_volume_buy)
    {
        if (is_null($moving_24_hour_volume_buy)) {
            throw new \InvalidArgumentException('non-nullable moving_24_hour_volume_buy cannot be null');
        }
        $this->container['moving_24_hour_volume_buy'] = $moving_24_hour_volume_buy;

        return $this;
    }

    /**
     * Gets moving_24_hour_volume_sell
     *
     * @return int|null
     */
    public function getMoving24HourVolumeSell()
    {
        return $this->container['moving_24_hour_volume_sell'];
    }

    /**
     * Sets moving_24_hour_volume_sell
     *
     * @param int|null $moving_24_hour_volume_sell The sum of all sell trade quantities from 24 hours ago up to the beginning of the current hour (23 hours in total). Given in the base asset.
     *
     * @return self
     */
    public function setMoving24HourVolumeSell($moving_24_hour_volume_sell)
    {
        if (is_null($moving_24_hour_volume_sell)) {
            throw new \InvalidArgumentException('non-nullable moving_24_hour_volume_sell cannot be null');
        }
        $this->container['moving_24_hour_volume_sell'] = $moving_24_hour_volume_sell;

        return $this;
    }

    /**
     * Gets moving_24_hour_volume_unknown
     *
     * @return int|null
     */
    public function getMoving24HourVolumeUnknown()
    {
        return $this->container['moving_24_hour_volume_unknown'];
    }

    /**
     * Sets moving_24_hour_volume_unknown
     *
     * @param int|null $moving_24_hour_volume_unknown The sum of all unknown trade quantities from 24 hours ago up to the beginning of the current hour (23 hours in total). Given in the base asset.
     *
     * @return self
     */
    public function setMoving24HourVolumeUnknown($moving_24_hour_volume_unknown)
    {
        if (is_null($moving_24_hour_volume_unknown)) {
            throw new \InvalidArgumentException('non-nullable moving_24_hour_volume_unknown cannot be null');
        }
        $this->container['moving_24_hour_volume_unknown'] = $moving_24_hour_volume_unknown;

        return $this;
    }

    /**
     * Gets moving_30_day_high
     *
     * @return int|null
     */
    public function getMoving30DayHigh()
    {
        return $this->container['moving_30_day_high'];
    }

    /**
     * Sets moving_30_day_high
     *
     * @param int|null $moving_30_day_high The highest traded price of the period. Here, the period runs from 30 days ago up to the beginning of the current day (29 days in total). Given in the quote asset.
     *
     * @return self
     */
    public function setMoving30DayHigh($moving_30_day_high)
    {
        if (is_null($moving_30_day_high)) {
            throw new \InvalidArgumentException('non-nullable moving_30_day_high cannot be null');
        }
        $this->container['moving_30_day_high'] = $moving_30_day_high;

        return $this;
    }

    /**
     * Gets moving_30_day_low
     *
     * @return int|null
     */
    public function getMoving30DayLow()
    {
        return $this->container['moving_30_day_low'];
    }

    /**
     * Sets moving_30_day_low
     *
     * @param int|null $moving_30_day_low The lowest traded price of the period. Here, the period runs from 30 days ago up to the beginning of the current day (29 days in total). Given in the quote asset.
     *
     * @return self
     */
    public function setMoving30DayLow($moving_30_day_low)
    {
        if (is_null($moving_30_day_low)) {
            throw new \InvalidArgumentException('non-nullable moving_30_day_low cannot be null');
        }
        $this->container['moving_30_day_low'] = $moving_30_day_low;

        return $this;
    }

    /**
     * Gets moving_30_day_open
     *
     * @return int|null
     */
    public function getMoving30DayOpen()
    {
        return $this->container['moving_30_day_open'];
    }

    /**
     * Sets moving_30_day_open
     *
     * @param int|null $moving_30_day_open The price of the closest trade to the period start date (29 days + current day - 00:00:00 GMT/UTC to now).  This will always be supplied and there is no need to do any calculation to get the full 30 day value. Given in the quote asset.
     *
     * @return self
     */
    public function setMoving30DayOpen($moving_30_day_open)
    {
        if (is_null($moving_30_day_open)) {
            throw new \InvalidArgumentException('non-nullable moving_30_day_open cannot be null');
        }
        $this->container['moving_30_day_open'] = $moving_30_day_open;

        return $this;
    }

    /**
     * Gets moving_30_day_quote_volume
     *
     * @return int|null
     */
    public function getMoving30DayQuoteVolume()
    {
        return $this->container['moving_30_day_quote_volume'];
    }

    /**
     * Sets moving_30_day_quote_volume
     *
     * @param int|null $moving_30_day_quote_volume The sum of all trade quote quantities from 30 days ago up to the beginning of the current day (29 days in total). Given in the quote asset.
     *
     * @return self
     */
    public function setMoving30DayQuoteVolume($moving_30_day_quote_volume)
    {
        if (is_null($moving_30_day_quote_volume)) {
            throw new \InvalidArgumentException('non-nullable moving_30_day_quote_volume cannot be null');
        }
        $this->container['moving_30_day_quote_volume'] = $moving_30_day_quote_volume;

        return $this;
    }

    /**
     * Gets moving_30_day_quote_volume_buy
     *
     * @return int|null
     */
    public function getMoving30DayQuoteVolumeBuy()
    {
        return $this->container['moving_30_day_quote_volume_buy'];
    }

    /**
     * Sets moving_30_day_quote_volume_buy
     *
     * @param int|null $moving_30_day_quote_volume_buy The sum of all buy trade quote quantities from 30 days ago up to the beginning of the current day (29 days in total). Given in the quote asset.
     *
     * @return self
     */
    public function setMoving30DayQuoteVolumeBuy($moving_30_day_quote_volume_buy)
    {
        if (is_null($moving_30_day_quote_volume_buy)) {
            throw new \InvalidArgumentException('non-nullable moving_30_day_quote_volume_buy cannot be null');
        }
        $this->container['moving_30_day_quote_volume_buy'] = $moving_30_day_quote_volume_buy;

        return $this;
    }

    /**
     * Gets moving_30_day_quote_volume_sell
     *
     * @return int|null
     */
    public function getMoving30DayQuoteVolumeSell()
    {
        return $this->container['moving_30_day_quote_volume_sell'];
    }

    /**
     * Sets moving_30_day_quote_volume_sell
     *
     * @param int|null $moving_30_day_quote_volume_sell The sum of all sell trade quote quantities from 30 days ago up to the beginning of the current day (29 days in total). Given in the quote asset.
     *
     * @return self
     */
    public function setMoving30DayQuoteVolumeSell($moving_30_day_quote_volume_sell)
    {
        if (is_null($moving_30_day_quote_volume_sell)) {
            throw new \InvalidArgumentException('non-nullable moving_30_day_quote_volume_sell cannot be null');
        }
        $this->container['moving_30_day_quote_volume_sell'] = $moving_30_day_quote_volume_sell;

        return $this;
    }

    /**
     * Gets moving_30_day_quote_volume_unknown
     *
     * @return int|null
     */
    public function getMoving30DayQuoteVolumeUnknown()
    {
        return $this->container['moving_30_day_quote_volume_unknown'];
    }

    /**
     * Sets moving_30_day_quote_volume_unknown
     *
     * @param int|null $moving_30_day_quote_volume_unknown The sum of all unknown trade quote quantities from 30 days ago up to the beginning of the current day (29 days in total). Given in the quote asset.
     *
     * @return self
     */
    public function setMoving30DayQuoteVolumeUnknown($moving_30_day_quote_volume_unknown)
    {
        if (is_null($moving_30_day_quote_volume_unknown)) {
            throw new \InvalidArgumentException('non-nullable moving_30_day_quote_volume_unknown cannot be null');
        }
        $this->container['moving_30_day_quote_volume_unknown'] = $moving_30_day_quote_volume_unknown;

        return $this;
    }

    /**
     * Gets moving_30_day_total_trades
     *
     * @return int|null
     */
    public function getMoving30DayTotalTrades()
    {
        return $this->container['moving_30_day_total_trades'];
    }

    /**
     * Sets moving_30_day_total_trades
     *
     * @param int|null $moving_30_day_total_trades The total number of trades that have occurred in the period running from 30 days ago to the beginning (00:00:00 GMT/UTC) of the current day (29 days in total).
     *
     * @return self
     */
    public function setMoving30DayTotalTrades($moving_30_day_total_trades)
    {
        if (is_null($moving_30_day_total_trades)) {
            throw new \InvalidArgumentException('non-nullable moving_30_day_total_trades cannot be null');
        }
        $this->container['moving_30_day_total_trades'] = $moving_30_day_total_trades;

        return $this;
    }

    /**
     * Gets moving_30_day_total_trades_buy
     *
     * @return int|null
     */
    public function getMoving30DayTotalTradesBuy()
    {
        return $this->container['moving_30_day_total_trades_buy'];
    }

    /**
     * Sets moving_30_day_total_trades_buy
     *
     * @param int|null $moving_30_day_total_trades_buy The total number of buy trades that have occurred in the period running from 30 days ago to the beginning (00:00:00 GMT/UTC) of the current day (29 days in total).
     *
     * @return self
     */
    public function setMoving30DayTotalTradesBuy($moving_30_day_total_trades_buy)
    {
        if (is_null($moving_30_day_total_trades_buy)) {
            throw new \InvalidArgumentException('non-nullable moving_30_day_total_trades_buy cannot be null');
        }
        $this->container['moving_30_day_total_trades_buy'] = $moving_30_day_total_trades_buy;

        return $this;
    }

    /**
     * Gets moving_30_day_total_trades_sell
     *
     * @return int|null
     */
    public function getMoving30DayTotalTradesSell()
    {
        return $this->container['moving_30_day_total_trades_sell'];
    }

    /**
     * Sets moving_30_day_total_trades_sell
     *
     * @param int|null $moving_30_day_total_trades_sell The total number of sell trades that have occurred in the period running from 30 days ago to the beginning (00:00:00 GMT/UTC) of the current day (29 days in total).
     *
     * @return self
     */
    public function setMoving30DayTotalTradesSell($moving_30_day_total_trades_sell)
    {
        if (is_null($moving_30_day_total_trades_sell)) {
            throw new \InvalidArgumentException('non-nullable moving_30_day_total_trades_sell cannot be null');
        }
        $this->container['moving_30_day_total_trades_sell'] = $moving_30_day_total_trades_sell;

        return $this;
    }

    /**
     * Gets moving_30_day_total_trades_unknown
     *
     * @return int|null
     */
    public function getMoving30DayTotalTradesUnknown()
    {
        return $this->container['moving_30_day_total_trades_unknown'];
    }

    /**
     * Sets moving_30_day_total_trades_unknown
     *
     * @param int|null $moving_30_day_total_trades_unknown The total number of unknown trades that have occurred in the period running from 30 days ago to the beginning (00:00:00 GMT/UTC) of the current day (29 days in total).
     *
     * @return self
     */
    public function setMoving30DayTotalTradesUnknown($moving_30_day_total_trades_unknown)
    {
        if (is_null($moving_30_day_total_trades_unknown)) {
            throw new \InvalidArgumentException('non-nullable moving_30_day_total_trades_unknown cannot be null');
        }
        $this->container['moving_30_day_total_trades_unknown'] = $moving_30_day_total_trades_unknown;

        return $this;
    }

    /**
     * Gets moving_30_day_volume
     *
     * @return int|null
     */
    public function getMoving30DayVolume()
    {
        return $this->container['moving_30_day_volume'];
    }

    /**
     * Sets moving_30_day_volume
     *
     * @param int|null $moving_30_day_volume The sum of all trade quantities from 30 days ago up to the beginning of the current day (29 days in total). Given in the base asset.
     *
     * @return self
     */
    public function setMoving30DayVolume($moving_30_day_volume)
    {
        if (is_null($moving_30_day_volume)) {
            throw new \InvalidArgumentException('non-nullable moving_30_day_volume cannot be null');
        }
        $this->container['moving_30_day_volume'] = $moving_30_day_volume;

        return $this;
    }

    /**
     * Gets moving_30_day_volume_buy
     *
     * @return int|null
     */
    public function getMoving30DayVolumeBuy()
    {
        return $this->container['moving_30_day_volume_buy'];
    }

    /**
     * Sets moving_30_day_volume_buy
     *
     * @param int|null $moving_30_day_volume_buy The sum of all buy trade quantities from 30 days ago up to the beginning of the current day (29 days in total). Given in the base asset.
     *
     * @return self
     */
    public function setMoving30DayVolumeBuy($moving_30_day_volume_buy)
    {
        if (is_null($moving_30_day_volume_buy)) {
            throw new \InvalidArgumentException('non-nullable moving_30_day_volume_buy cannot be null');
        }
        $this->container['moving_30_day_volume_buy'] = $moving_30_day_volume_buy;

        return $this;
    }

    /**
     * Gets moving_30_day_volume_sell
     *
     * @return int|null
     */
    public function getMoving30DayVolumeSell()
    {
        return $this->container['moving_30_day_volume_sell'];
    }

    /**
     * Sets moving_30_day_volume_sell
     *
     * @param int|null $moving_30_day_volume_sell The sum of all sell trade quantities from 30 days ago up to the beginning of the current day (29 days in total). Given in the base asset.
     *
     * @return self
     */
    public function setMoving30DayVolumeSell($moving_30_day_volume_sell)
    {
        if (is_null($moving_30_day_volume_sell)) {
            throw new \InvalidArgumentException('non-nullable moving_30_day_volume_sell cannot be null');
        }
        $this->container['moving_30_day_volume_sell'] = $moving_30_day_volume_sell;

        return $this;
    }

    /**
     * Gets moving_30_day_volume_unknown
     *
     * @return int|null
     */
    public function getMoving30DayVolumeUnknown()
    {
        return $this->container['moving_30_day_volume_unknown'];
    }

    /**
     * Sets moving_30_day_volume_unknown
     *
     * @param int|null $moving_30_day_volume_unknown The sum of all unknown trade quantities from 30 days ago up to the beginning of the current day (29 days in total). Given in the base asset.
     *
     * @return self
     */
    public function setMoving30DayVolumeUnknown($moving_30_day_volume_unknown)
    {
        if (is_null($moving_30_day_volume_unknown)) {
            throw new \InvalidArgumentException('non-nullable moving_30_day_volume_unknown cannot be null');
        }
        $this->container['moving_30_day_volume_unknown'] = $moving_30_day_volume_unknown;

        return $this;
    }

    /**
     * Gets moving_365_day_high
     *
     * @return int|null
     */
    public function getMoving365DayHigh()
    {
        return $this->container['moving_365_day_high'];
    }

    /**
     * Sets moving_365_day_high
     *
     * @param int|null $moving_365_day_high The highest price of the period. Here, the period runs from 365 days ago up to the beginning of the current day (364 days in total). Given in the quote asset.
     *
     * @return self
     */
    public function setMoving365DayHigh($moving_365_day_high)
    {
        if (is_null($moving_365_day_high)) {
            throw new \InvalidArgumentException('non-nullable moving_365_day_high cannot be null');
        }
        $this->container['moving_365_day_high'] = $moving_365_day_high;

        return $this;
    }

    /**
     * Gets moving_365_day_low
     *
     * @return int|null
     */
    public function getMoving365DayLow()
    {
        return $this->container['moving_365_day_low'];
    }

    /**
     * Sets moving_365_day_low
     *
     * @param int|null $moving_365_day_low The lowest traded price of the period. Here, the period runs from 365 days ago up to the beginning of the current day (364 days in total). Given in the quote asset.
     *
     * @return self
     */
    public function setMoving365DayLow($moving_365_day_low)
    {
        if (is_null($moving_365_day_low)) {
            throw new \InvalidArgumentException('non-nullable moving_365_day_low cannot be null');
        }
        $this->container['moving_365_day_low'] = $moving_365_day_low;

        return $this;
    }

    /**
     * Gets moving_365_day_open
     *
     * @return int|null
     */
    public function getMoving365DayOpen()
    {
        return $this->container['moving_365_day_open'];
    }

    /**
     * Sets moving_365_day_open
     *
     * @param int|null $moving_365_day_open The price of the closest trade to the period start date (364 days + current day - 00:00:00 GMT/UTC to now).  This will always be supplied and there is no need to do any calculation to get the full 365 day value. Given in the quote asset.
     *
     * @return self
     */
    public function setMoving365DayOpen($moving_365_day_open)
    {
        if (is_null($moving_365_day_open)) {
            throw new \InvalidArgumentException('non-nullable moving_365_day_open cannot be null');
        }
        $this->container['moving_365_day_open'] = $moving_365_day_open;

        return $this;
    }

    /**
     * Gets moving_365_day_quote_volume
     *
     * @return int|null
     */
    public function getMoving365DayQuoteVolume()
    {
        return $this->container['moving_365_day_quote_volume'];
    }

    /**
     * Sets moving_365_day_quote_volume
     *
     * @param int|null $moving_365_day_quote_volume The sum of all trade quote quantities from 365 days ago up to the beginning of the current day (364 days in total). Given in the quote asset.
     *
     * @return self
     */
    public function setMoving365DayQuoteVolume($moving_365_day_quote_volume)
    {
        if (is_null($moving_365_day_quote_volume)) {
            throw new \InvalidArgumentException('non-nullable moving_365_day_quote_volume cannot be null');
        }
        $this->container['moving_365_day_quote_volume'] = $moving_365_day_quote_volume;

        return $this;
    }

    /**
     * Gets moving_365_day_quote_volume_buy
     *
     * @return int|null
     */
    public function getMoving365DayQuoteVolumeBuy()
    {
        return $this->container['moving_365_day_quote_volume_buy'];
    }

    /**
     * Sets moving_365_day_quote_volume_buy
     *
     * @param int|null $moving_365_day_quote_volume_buy The sum of all buy trade quote quantities from 365 days ago up to the beginning of the current day (364 days in total). Given in the quote asset.
     *
     * @return self
     */
    public function setMoving365DayQuoteVolumeBuy($moving_365_day_quote_volume_buy)
    {
        if (is_null($moving_365_day_quote_volume_buy)) {
            throw new \InvalidArgumentException('non-nullable moving_365_day_quote_volume_buy cannot be null');
        }
        $this->container['moving_365_day_quote_volume_buy'] = $moving_365_day_quote_volume_buy;

        return $this;
    }

    /**
     * Gets moving_365_day_quote_volume_sell
     *
     * @return int|null
     */
    public function getMoving365DayQuoteVolumeSell()
    {
        return $this->container['moving_365_day_quote_volume_sell'];
    }

    /**
     * Sets moving_365_day_quote_volume_sell
     *
     * @param int|null $moving_365_day_quote_volume_sell The sum of all sell trade quote quantities from 365 days ago up to the beginning of the current day (364 days in total). Given in the quote asset.
     *
     * @return self
     */
    public function setMoving365DayQuoteVolumeSell($moving_365_day_quote_volume_sell)
    {
        if (is_null($moving_365_day_quote_volume_sell)) {
            throw new \InvalidArgumentException('non-nullable moving_365_day_quote_volume_sell cannot be null');
        }
        $this->container['moving_365_day_quote_volume_sell'] = $moving_365_day_quote_volume_sell;

        return $this;
    }

    /**
     * Gets moving_365_day_quote_volume_unknown
     *
     * @return int|null
     */
    public function getMoving365DayQuoteVolumeUnknown()
    {
        return $this->container['moving_365_day_quote_volume_unknown'];
    }

    /**
     * Sets moving_365_day_quote_volume_unknown
     *
     * @param int|null $moving_365_day_quote_volume_unknown The sum of all unknown trade quote quantities from 365 days ago up to the beginning of the current day (364 days in total). Given in the quote asset.
     *
     * @return self
     */
    public function setMoving365DayQuoteVolumeUnknown($moving_365_day_quote_volume_unknown)
    {
        if (is_null($moving_365_day_quote_volume_unknown)) {
            throw new \InvalidArgumentException('non-nullable moving_365_day_quote_volume_unknown cannot be null');
        }
        $this->container['moving_365_day_quote_volume_unknown'] = $moving_365_day_quote_volume_unknown;

        return $this;
    }

    /**
     * Gets moving_365_day_total_trades
     *
     * @return int|null
     */
    public function getMoving365DayTotalTrades()
    {
        return $this->container['moving_365_day_total_trades'];
    }

    /**
     * Sets moving_365_day_total_trades
     *
     * @param int|null $moving_365_day_total_trades The total number of trades that have occurred during the period running from 365 days ago to the beginning (00:00:00 GMT/UTC) of the current day (364 days in total).
     *
     * @return self
     */
    public function setMoving365DayTotalTrades($moving_365_day_total_trades)
    {
        if (is_null($moving_365_day_total_trades)) {
            throw new \InvalidArgumentException('non-nullable moving_365_day_total_trades cannot be null');
        }
        $this->container['moving_365_day_total_trades'] = $moving_365_day_total_trades;

        return $this;
    }

    /**
     * Gets moving_365_day_total_trades_buy
     *
     * @return int|null
     */
    public function getMoving365DayTotalTradesBuy()
    {
        return $this->container['moving_365_day_total_trades_buy'];
    }

    /**
     * Sets moving_365_day_total_trades_buy
     *
     * @param int|null $moving_365_day_total_trades_buy The total number of buy trades that have occurred during the period running from 365 days ago to the beginning (00:00:00 GMT/UTC) of the current day (364 days in total).
     *
     * @return self
     */
    public function setMoving365DayTotalTradesBuy($moving_365_day_total_trades_buy)
    {
        if (is_null($moving_365_day_total_trades_buy)) {
            throw new \InvalidArgumentException('non-nullable moving_365_day_total_trades_buy cannot be null');
        }
        $this->container['moving_365_day_total_trades_buy'] = $moving_365_day_total_trades_buy;

        return $this;
    }

    /**
     * Gets moving_365_day_total_trades_sell
     *
     * @return int|null
     */
    public function getMoving365DayTotalTradesSell()
    {
        return $this->container['moving_365_day_total_trades_sell'];
    }

    /**
     * Sets moving_365_day_total_trades_sell
     *
     * @param int|null $moving_365_day_total_trades_sell The total number of sell trades that have occurred during the period running from 365 days ago to the beginning (00:00:00 GMT/UTC) of the current day (364 days in total).
     *
     * @return self
     */
    public function setMoving365DayTotalTradesSell($moving_365_day_total_trades_sell)
    {
        if (is_null($moving_365_day_total_trades_sell)) {
            throw new \InvalidArgumentException('non-nullable moving_365_day_total_trades_sell cannot be null');
        }
        $this->container['moving_365_day_total_trades_sell'] = $moving_365_day_total_trades_sell;

        return $this;
    }

    /**
     * Gets moving_365_day_total_trades_unknown
     *
     * @return int|null
     */
    public function getMoving365DayTotalTradesUnknown()
    {
        return $this->container['moving_365_day_total_trades_unknown'];
    }

    /**
     * Sets moving_365_day_total_trades_unknown
     *
     * @param int|null $moving_365_day_total_trades_unknown The total number of unknown trades that have occurred during the period running from 365 days ago to the beginning (00:00:00 GMT/UTC) of the current day (364 days in total).
     *
     * @return self
     */
    public function setMoving365DayTotalTradesUnknown($moving_365_day_total_trades_unknown)
    {
        if (is_null($moving_365_day_total_trades_unknown)) {
            throw new \InvalidArgumentException('non-nullable moving_365_day_total_trades_unknown cannot be null');
        }
        $this->container['moving_365_day_total_trades_unknown'] = $moving_365_day_total_trades_unknown;

        return $this;
    }

    /**
     * Gets moving_365_day_volume
     *
     * @return int|null
     */
    public function getMoving365DayVolume()
    {
        return $this->container['moving_365_day_volume'];
    }

    /**
     * Sets moving_365_day_volume
     *
     * @param int|null $moving_365_day_volume The sum of all trade quantities from 365 days ago up to the beginning of the current day (364 days in total). Given in the base asset.
     *
     * @return self
     */
    public function setMoving365DayVolume($moving_365_day_volume)
    {
        if (is_null($moving_365_day_volume)) {
            throw new \InvalidArgumentException('non-nullable moving_365_day_volume cannot be null');
        }
        $this->container['moving_365_day_volume'] = $moving_365_day_volume;

        return $this;
    }

    /**
     * Gets moving_365_day_volume_buy
     *
     * @return int|null
     */
    public function getMoving365DayVolumeBuy()
    {
        return $this->container['moving_365_day_volume_buy'];
    }

    /**
     * Sets moving_365_day_volume_buy
     *
     * @param int|null $moving_365_day_volume_buy The sum of all trade quantities from 365 days ago up to the beginning of the current day (364 days in total). Given in the base asset.
     *
     * @return self
     */
    public function setMoving365DayVolumeBuy($moving_365_day_volume_buy)
    {
        if (is_null($moving_365_day_volume_buy)) {
            throw new \InvalidArgumentException('non-nullable moving_365_day_volume_buy cannot be null');
        }
        $this->container['moving_365_day_volume_buy'] = $moving_365_day_volume_buy;

        return $this;
    }

    /**
     * Gets moving_365_day_volume_sell
     *
     * @return int|null
     */
    public function getMoving365DayVolumeSell()
    {
        return $this->container['moving_365_day_volume_sell'];
    }

    /**
     * Sets moving_365_day_volume_sell
     *
     * @param int|null $moving_365_day_volume_sell The sum of all sell trade quantities from 365 days ago up to the beginning of the current day (364 days in total). Given in the base asset.
     *
     * @return self
     */
    public function setMoving365DayVolumeSell($moving_365_day_volume_sell)
    {
        if (is_null($moving_365_day_volume_sell)) {
            throw new \InvalidArgumentException('non-nullable moving_365_day_volume_sell cannot be null');
        }
        $this->container['moving_365_day_volume_sell'] = $moving_365_day_volume_sell;

        return $this;
    }

    /**
     * Gets moving_365_day_volume_unknown
     *
     * @return int|null
     */
    public function getMoving365DayVolumeUnknown()
    {
        return $this->container['moving_365_day_volume_unknown'];
    }

    /**
     * Sets moving_365_day_volume_unknown
     *
     * @param int|null $moving_365_day_volume_unknown The sum of all unknown trade quantities from 365 days ago up to the beginning of the current day (364 days in total). Given in the base asset.
     *
     * @return self
     */
    public function setMoving365DayVolumeUnknown($moving_365_day_volume_unknown)
    {
        if (is_null($moving_365_day_volume_unknown)) {
            throw new \InvalidArgumentException('non-nullable moving_365_day_volume_unknown cannot be null');
        }
        $this->container['moving_365_day_volume_unknown'] = $moving_365_day_volume_unknown;

        return $this;
    }

    /**
     * Gets moving_7_day_high
     *
     * @return int|null
     */
    public function getMoving7DayHigh()
    {
        return $this->container['moving_7_day_high'];
    }

    /**
     * Sets moving_7_day_high
     *
     * @param int|null $moving_7_day_high The highest traded price of the period. Here, the period runs from 7 days ago up to the beginning of the current day (6 days in total). Given in the quote asset.
     *
     * @return self
     */
    public function setMoving7DayHigh($moving_7_day_high)
    {
        if (is_null($moving_7_day_high)) {
            throw new \InvalidArgumentException('non-nullable moving_7_day_high cannot be null');
        }
        $this->container['moving_7_day_high'] = $moving_7_day_high;

        return $this;
    }

    /**
     * Gets moving_7_day_low
     *
     * @return int|null
     */
    public function getMoving7DayLow()
    {
        return $this->container['moving_7_day_low'];
    }

    /**
     * Sets moving_7_day_low
     *
     * @param int|null $moving_7_day_low The lowest traded price of the period. Here, the period runs from 7 days ago up to the beginning of the current day (6 days in total). Given in the quote asset.
     *
     * @return self
     */
    public function setMoving7DayLow($moving_7_day_low)
    {
        if (is_null($moving_7_day_low)) {
            throw new \InvalidArgumentException('non-nullable moving_7_day_low cannot be null');
        }
        $this->container['moving_7_day_low'] = $moving_7_day_low;

        return $this;
    }

    /**
     * Gets moving_7_day_open
     *
     * @return int|null
     */
    public function getMoving7DayOpen()
    {
        return $this->container['moving_7_day_open'];
    }

    /**
     * Sets moving_7_day_open
     *
     * @param int|null $moving_7_day_open The price of the closest trade to the period start date (6 days + current day - 00:00:00 GMT/UTC to now). This will always be supplied and there is no need to do any calculation to get the full 7 day value. Given in the quote asset.
     *
     * @return self
     */
    public function setMoving7DayOpen($moving_7_day_open)
    {
        if (is_null($moving_7_day_open)) {
            throw new \InvalidArgumentException('non-nullable moving_7_day_open cannot be null');
        }
        $this->container['moving_7_day_open'] = $moving_7_day_open;

        return $this;
    }

    /**
     * Gets moving_7_day_quote_volume
     *
     * @return int|null
     */
    public function getMoving7DayQuoteVolume()
    {
        return $this->container['moving_7_day_quote_volume'];
    }

    /**
     * Sets moving_7_day_quote_volume
     *
     * @param int|null $moving_7_day_quote_volume The sum of all trade quote quantities from 7 days ago up to the beginning of the current day (6 days in total). Given in the quote asset.
     *
     * @return self
     */
    public function setMoving7DayQuoteVolume($moving_7_day_quote_volume)
    {
        if (is_null($moving_7_day_quote_volume)) {
            throw new \InvalidArgumentException('non-nullable moving_7_day_quote_volume cannot be null');
        }
        $this->container['moving_7_day_quote_volume'] = $moving_7_day_quote_volume;

        return $this;
    }

    /**
     * Gets moving_7_day_quote_volume_buy
     *
     * @return int|null
     */
    public function getMoving7DayQuoteVolumeBuy()
    {
        return $this->container['moving_7_day_quote_volume_buy'];
    }

    /**
     * Sets moving_7_day_quote_volume_buy
     *
     * @param int|null $moving_7_day_quote_volume_buy The sum of all buy trade quote quantities from 7 days ago up to the beginning of the current day (6 days in total). Given in the quote asset.
     *
     * @return self
     */
    public function setMoving7DayQuoteVolumeBuy($moving_7_day_quote_volume_buy)
    {
        if (is_null($moving_7_day_quote_volume_buy)) {
            throw new \InvalidArgumentException('non-nullable moving_7_day_quote_volume_buy cannot be null');
        }
        $this->container['moving_7_day_quote_volume_buy'] = $moving_7_day_quote_volume_buy;

        return $this;
    }

    /**
     * Gets moving_7_day_quote_volume_sell
     *
     * @return int|null
     */
    public function getMoving7DayQuoteVolumeSell()
    {
        return $this->container['moving_7_day_quote_volume_sell'];
    }

    /**
     * Sets moving_7_day_quote_volume_sell
     *
     * @param int|null $moving_7_day_quote_volume_sell The sum of all sell trade quote quantities from 7 days ago up to the beginning of the current day (6 days in total). Given in the quote asset.
     *
     * @return self
     */
    public function setMoving7DayQuoteVolumeSell($moving_7_day_quote_volume_sell)
    {
        if (is_null($moving_7_day_quote_volume_sell)) {
            throw new \InvalidArgumentException('non-nullable moving_7_day_quote_volume_sell cannot be null');
        }
        $this->container['moving_7_day_quote_volume_sell'] = $moving_7_day_quote_volume_sell;

        return $this;
    }

    /**
     * Gets moving_7_day_quote_volume_unknown
     *
     * @return int|null
     */
    public function getMoving7DayQuoteVolumeUnknown()
    {
        return $this->container['moving_7_day_quote_volume_unknown'];
    }

    /**
     * Sets moving_7_day_quote_volume_unknown
     *
     * @param int|null $moving_7_day_quote_volume_unknown The sum of all unknown trade quote quantities from 7 days ago up to the beginning of the current day (6 days in total). Given in the quote asset.
     *
     * @return self
     */
    public function setMoving7DayQuoteVolumeUnknown($moving_7_day_quote_volume_unknown)
    {
        if (is_null($moving_7_day_quote_volume_unknown)) {
            throw new \InvalidArgumentException('non-nullable moving_7_day_quote_volume_unknown cannot be null');
        }
        $this->container['moving_7_day_quote_volume_unknown'] = $moving_7_day_quote_volume_unknown;

        return $this;
    }

    /**
     * Gets moving_7_day_total_trades
     *
     * @return int|null
     */
    public function getMoving7DayTotalTrades()
    {
        return $this->container['moving_7_day_total_trades'];
    }

    /**
     * Sets moving_7_day_total_trades
     *
     * @param int|null $moving_7_day_total_trades The total number of trades that have occurred in the period running from 7 days ago to the beginning (00:00:00 GMT/UTC) of the current day (6 days in total).
     *
     * @return self
     */
    public function setMoving7DayTotalTrades($moving_7_day_total_trades)
    {
        if (is_null($moving_7_day_total_trades)) {
            throw new \InvalidArgumentException('non-nullable moving_7_day_total_trades cannot be null');
        }
        $this->container['moving_7_day_total_trades'] = $moving_7_day_total_trades;

        return $this;
    }

    /**
     * Gets moving_7_day_total_trades_buy
     *
     * @return int|null
     */
    public function getMoving7DayTotalTradesBuy()
    {
        return $this->container['moving_7_day_total_trades_buy'];
    }

    /**
     * Sets moving_7_day_total_trades_buy
     *
     * @param int|null $moving_7_day_total_trades_buy The total number of buy trades that have occurred in the period running from 7 days ago to the beginning (00:00:00 GMT/UTC) of the current day (6 days in total).
     *
     * @return self
     */
    public function setMoving7DayTotalTradesBuy($moving_7_day_total_trades_buy)
    {
        if (is_null($moving_7_day_total_trades_buy)) {
            throw new \InvalidArgumentException('non-nullable moving_7_day_total_trades_buy cannot be null');
        }
        $this->container['moving_7_day_total_trades_buy'] = $moving_7_day_total_trades_buy;

        return $this;
    }

    /**
     * Gets moving_7_day_total_trades_sell
     *
     * @return int|null
     */
    public function getMoving7DayTotalTradesSell()
    {
        return $this->container['moving_7_day_total_trades_sell'];
    }

    /**
     * Sets moving_7_day_total_trades_sell
     *
     * @param int|null $moving_7_day_total_trades_sell The total number of sell trades that have occurred in the period running from 7 days ago to the beginning (00:00:00 GMT/UTC) of the current day (6 days in total).
     *
     * @return self
     */
    public function setMoving7DayTotalTradesSell($moving_7_day_total_trades_sell)
    {
        if (is_null($moving_7_day_total_trades_sell)) {
            throw new \InvalidArgumentException('non-nullable moving_7_day_total_trades_sell cannot be null');
        }
        $this->container['moving_7_day_total_trades_sell'] = $moving_7_day_total_trades_sell;

        return $this;
    }

    /**
     * Gets moving_7_day_total_trades_unknown
     *
     * @return int|null
     */
    public function getMoving7DayTotalTradesUnknown()
    {
        return $this->container['moving_7_day_total_trades_unknown'];
    }

    /**
     * Sets moving_7_day_total_trades_unknown
     *
     * @param int|null $moving_7_day_total_trades_unknown The total number of unknown trades that have occurred in the period running from 7 days ago to the beginning (00:00:00 GMT/UTC) of the current day (6 days in total).
     *
     * @return self
     */
    public function setMoving7DayTotalTradesUnknown($moving_7_day_total_trades_unknown)
    {
        if (is_null($moving_7_day_total_trades_unknown)) {
            throw new \InvalidArgumentException('non-nullable moving_7_day_total_trades_unknown cannot be null');
        }
        $this->container['moving_7_day_total_trades_unknown'] = $moving_7_day_total_trades_unknown;

        return $this;
    }

    /**
     * Gets moving_7_day_volume
     *
     * @return int|null
     */
    public function getMoving7DayVolume()
    {
        return $this->container['moving_7_day_volume'];
    }

    /**
     * Sets moving_7_day_volume
     *
     * @param int|null $moving_7_day_volume The sum of all trade quantities from 7 days ago up to the beginning of the current day (6 days in total). Given in the base asset.
     *
     * @return self
     */
    public function setMoving7DayVolume($moving_7_day_volume)
    {
        if (is_null($moving_7_day_volume)) {
            throw new \InvalidArgumentException('non-nullable moving_7_day_volume cannot be null');
        }
        $this->container['moving_7_day_volume'] = $moving_7_day_volume;

        return $this;
    }

    /**
     * Gets moving_7_day_volume_buy
     *
     * @return int|null
     */
    public function getMoving7DayVolumeBuy()
    {
        return $this->container['moving_7_day_volume_buy'];
    }

    /**
     * Sets moving_7_day_volume_buy
     *
     * @param int|null $moving_7_day_volume_buy The sum of all buy trade quantities from 7 days ago up to the beginning of the current day (6 days in total). Given in the base asset.
     *
     * @return self
     */
    public function setMoving7DayVolumeBuy($moving_7_day_volume_buy)
    {
        if (is_null($moving_7_day_volume_buy)) {
            throw new \InvalidArgumentException('non-nullable moving_7_day_volume_buy cannot be null');
        }
        $this->container['moving_7_day_volume_buy'] = $moving_7_day_volume_buy;

        return $this;
    }

    /**
     * Gets moving_7_day_volume_sell
     *
     * @return int|null
     */
    public function getMoving7DayVolumeSell()
    {
        return $this->container['moving_7_day_volume_sell'];
    }

    /**
     * Sets moving_7_day_volume_sell
     *
     * @param int|null $moving_7_day_volume_sell The sum of all sell trade quantities from 7 days ago up to the beginning of the current day (6 days in total). Given in the base asset.
     *
     * @return self
     */
    public function setMoving7DayVolumeSell($moving_7_day_volume_sell)
    {
        if (is_null($moving_7_day_volume_sell)) {
            throw new \InvalidArgumentException('non-nullable moving_7_day_volume_sell cannot be null');
        }
        $this->container['moving_7_day_volume_sell'] = $moving_7_day_volume_sell;

        return $this;
    }

    /**
     * Gets moving_7_day_volume_unknown
     *
     * @return int|null
     */
    public function getMoving7DayVolumeUnknown()
    {
        return $this->container['moving_7_day_volume_unknown'];
    }

    /**
     * Sets moving_7_day_volume_unknown
     *
     * @param int|null $moving_7_day_volume_unknown The sum of all unknown trade quantities from 7 days ago up to the beginning of the current day (6 days in total). Given in the base asset.
     *
     * @return self
     */
    public function setMoving7DayVolumeUnknown($moving_7_day_volume_unknown)
    {
        if (is_null($moving_7_day_volume_unknown)) {
            throw new \InvalidArgumentException('non-nullable moving_7_day_volume_unknown cannot be null');
        }
        $this->container['moving_7_day_volume_unknown'] = $moving_7_day_volume_unknown;

        return $this;
    }

    /**
     * Gets moving_90_day_high
     *
     * @return int|null
     */
    public function getMoving90DayHigh()
    {
        return $this->container['moving_90_day_high'];
    }

    /**
     * Sets moving_90_day_high
     *
     * @param int|null $moving_90_day_high The highest value between the MOVING_90_DAY_OPEN and the highest traded price of the period. Here, the period runs from 90 days ago up to the beginning of the current day (89 days in total). Given in the quote asset.
     *
     * @return self
     */
    public function setMoving90DayHigh($moving_90_day_high)
    {
        if (is_null($moving_90_day_high)) {
            throw new \InvalidArgumentException('non-nullable moving_90_day_high cannot be null');
        }
        $this->container['moving_90_day_high'] = $moving_90_day_high;

        return $this;
    }

    /**
     * Gets moving_90_day_low
     *
     * @return int|null
     */
    public function getMoving90DayLow()
    {
        return $this->container['moving_90_day_low'];
    }

    /**
     * Sets moving_90_day_low
     *
     * @param int|null $moving_90_day_low The lowest traded price of the period. Here, the period runs from 90 days ago up to the beginning of the current day (89 days in total). Given in the quote asset.
     *
     * @return self
     */
    public function setMoving90DayLow($moving_90_day_low)
    {
        if (is_null($moving_90_day_low)) {
            throw new \InvalidArgumentException('non-nullable moving_90_day_low cannot be null');
        }
        $this->container['moving_90_day_low'] = $moving_90_day_low;

        return $this;
    }

    /**
     * Gets moving_90_day_open
     *
     * @return int|null
     */
    public function getMoving90DayOpen()
    {
        return $this->container['moving_90_day_open'];
    }

    /**
     * Sets moving_90_day_open
     *
     * @param int|null $moving_90_day_open The price of the closest trade to the period start date (89 days + current day - 00:00:00 GMT/UTC to now).  This will always be supplied and there is no need to do any calculation to get the full 90 day value. Given in the quote asset.
     *
     * @return self
     */
    public function setMoving90DayOpen($moving_90_day_open)
    {
        if (is_null($moving_90_day_open)) {
            throw new \InvalidArgumentException('non-nullable moving_90_day_open cannot be null');
        }
        $this->container['moving_90_day_open'] = $moving_90_day_open;

        return $this;
    }

    /**
     * Gets moving_90_day_quote_volume
     *
     * @return int|null
     */
    public function getMoving90DayQuoteVolume()
    {
        return $this->container['moving_90_day_quote_volume'];
    }

    /**
     * Sets moving_90_day_quote_volume
     *
     * @param int|null $moving_90_day_quote_volume The sum of all trade quote quantities from 90 days ago up to the beginning of the current day (89 days in total). Given in the quote asset.
     *
     * @return self
     */
    public function setMoving90DayQuoteVolume($moving_90_day_quote_volume)
    {
        if (is_null($moving_90_day_quote_volume)) {
            throw new \InvalidArgumentException('non-nullable moving_90_day_quote_volume cannot be null');
        }
        $this->container['moving_90_day_quote_volume'] = $moving_90_day_quote_volume;

        return $this;
    }

    /**
     * Gets moving_90_day_quote_volume_buy
     *
     * @return int|null
     */
    public function getMoving90DayQuoteVolumeBuy()
    {
        return $this->container['moving_90_day_quote_volume_buy'];
    }

    /**
     * Sets moving_90_day_quote_volume_buy
     *
     * @param int|null $moving_90_day_quote_volume_buy The sum of all buy trade quote quantities from 90 days ago up to the beginning of the current day (89 days in total). Given in the quote asset.
     *
     * @return self
     */
    public function setMoving90DayQuoteVolumeBuy($moving_90_day_quote_volume_buy)
    {
        if (is_null($moving_90_day_quote_volume_buy)) {
            throw new \InvalidArgumentException('non-nullable moving_90_day_quote_volume_buy cannot be null');
        }
        $this->container['moving_90_day_quote_volume_buy'] = $moving_90_day_quote_volume_buy;

        return $this;
    }

    /**
     * Gets moving_90_day_quote_volume_sell
     *
     * @return int|null
     */
    public function getMoving90DayQuoteVolumeSell()
    {
        return $this->container['moving_90_day_quote_volume_sell'];
    }

    /**
     * Sets moving_90_day_quote_volume_sell
     *
     * @param int|null $moving_90_day_quote_volume_sell The sum of all sell trade quote quantities from 90 days ago up to the beginning of the current day (89 days in total). Given in the quote asset.
     *
     * @return self
     */
    public function setMoving90DayQuoteVolumeSell($moving_90_day_quote_volume_sell)
    {
        if (is_null($moving_90_day_quote_volume_sell)) {
            throw new \InvalidArgumentException('non-nullable moving_90_day_quote_volume_sell cannot be null');
        }
        $this->container['moving_90_day_quote_volume_sell'] = $moving_90_day_quote_volume_sell;

        return $this;
    }

    /**
     * Gets moving_90_day_quote_volume_unknown
     *
     * @return int|null
     */
    public function getMoving90DayQuoteVolumeUnknown()
    {
        return $this->container['moving_90_day_quote_volume_unknown'];
    }

    /**
     * Sets moving_90_day_quote_volume_unknown
     *
     * @param int|null $moving_90_day_quote_volume_unknown The sum of all unknown trade quote quantities from 90 days ago up to the beginning of the current day (89 days in total). Given in the quote asset.
     *
     * @return self
     */
    public function setMoving90DayQuoteVolumeUnknown($moving_90_day_quote_volume_unknown)
    {
        if (is_null($moving_90_day_quote_volume_unknown)) {
            throw new \InvalidArgumentException('non-nullable moving_90_day_quote_volume_unknown cannot be null');
        }
        $this->container['moving_90_day_quote_volume_unknown'] = $moving_90_day_quote_volume_unknown;

        return $this;
    }

    /**
     * Gets moving_90_day_total_trades
     *
     * @return int|null
     */
    public function getMoving90DayTotalTrades()
    {
        return $this->container['moving_90_day_total_trades'];
    }

    /**
     * Sets moving_90_day_total_trades
     *
     * @param int|null $moving_90_day_total_trades The total number of trades that have occurred in the period running from 90 days ago to the beginning (00:00:00 GMT/UTC) of the current day (89 days in total).
     *
     * @return self
     */
    public function setMoving90DayTotalTrades($moving_90_day_total_trades)
    {
        if (is_null($moving_90_day_total_trades)) {
            throw new \InvalidArgumentException('non-nullable moving_90_day_total_trades cannot be null');
        }
        $this->container['moving_90_day_total_trades'] = $moving_90_day_total_trades;

        return $this;
    }

    /**
     * Gets moving_90_day_total_trades_buy
     *
     * @return int|null
     */
    public function getMoving90DayTotalTradesBuy()
    {
        return $this->container['moving_90_day_total_trades_buy'];
    }

    /**
     * Sets moving_90_day_total_trades_buy
     *
     * @param int|null $moving_90_day_total_trades_buy The total number of buy trades that have occurred in the period running from 90 days ago to the beginning (00:00:00 GMT/UTC) of the current day (89 days in total).
     *
     * @return self
     */
    public function setMoving90DayTotalTradesBuy($moving_90_day_total_trades_buy)
    {
        if (is_null($moving_90_day_total_trades_buy)) {
            throw new \InvalidArgumentException('non-nullable moving_90_day_total_trades_buy cannot be null');
        }
        $this->container['moving_90_day_total_trades_buy'] = $moving_90_day_total_trades_buy;

        return $this;
    }

    /**
     * Gets moving_90_day_total_trades_sell
     *
     * @return int|null
     */
    public function getMoving90DayTotalTradesSell()
    {
        return $this->container['moving_90_day_total_trades_sell'];
    }

    /**
     * Sets moving_90_day_total_trades_sell
     *
     * @param int|null $moving_90_day_total_trades_sell The total number of sell trades that have occurred in the period running from 90 days ago to the beginning (00:00:00 GMT/UTC) of the current day (89 days in total).
     *
     * @return self
     */
    public function setMoving90DayTotalTradesSell($moving_90_day_total_trades_sell)
    {
        if (is_null($moving_90_day_total_trades_sell)) {
            throw new \InvalidArgumentException('non-nullable moving_90_day_total_trades_sell cannot be null');
        }
        $this->container['moving_90_day_total_trades_sell'] = $moving_90_day_total_trades_sell;

        return $this;
    }

    /**
     * Gets moving_90_day_total_trades_unknown
     *
     * @return int|null
     */
    public function getMoving90DayTotalTradesUnknown()
    {
        return $this->container['moving_90_day_total_trades_unknown'];
    }

    /**
     * Sets moving_90_day_total_trades_unknown
     *
     * @param int|null $moving_90_day_total_trades_unknown The total number of unknown trades that have occurred in the period running from 90 days ago to the beginning (00:00:00 GMT/UTC) of the current day (89 days in total).
     *
     * @return self
     */
    public function setMoving90DayTotalTradesUnknown($moving_90_day_total_trades_unknown)
    {
        if (is_null($moving_90_day_total_trades_unknown)) {
            throw new \InvalidArgumentException('non-nullable moving_90_day_total_trades_unknown cannot be null');
        }
        $this->container['moving_90_day_total_trades_unknown'] = $moving_90_day_total_trades_unknown;

        return $this;
    }

    /**
     * Gets moving_90_day_volume
     *
     * @return int|null
     */
    public function getMoving90DayVolume()
    {
        return $this->container['moving_90_day_volume'];
    }

    /**
     * Sets moving_90_day_volume
     *
     * @param int|null $moving_90_day_volume The sum of all trade quantities from 90 days ago up to the beginning of the current day (89 days in total). Given in the base asset.
     *
     * @return self
     */
    public function setMoving90DayVolume($moving_90_day_volume)
    {
        if (is_null($moving_90_day_volume)) {
            throw new \InvalidArgumentException('non-nullable moving_90_day_volume cannot be null');
        }
        $this->container['moving_90_day_volume'] = $moving_90_day_volume;

        return $this;
    }

    /**
     * Gets moving_90_day_volume_buy
     *
     * @return int|null
     */
    public function getMoving90DayVolumeBuy()
    {
        return $this->container['moving_90_day_volume_buy'];
    }

    /**
     * Sets moving_90_day_volume_buy
     *
     * @param int|null $moving_90_day_volume_buy The sum of all trade quantities from 90 days ago up to the beginning of the current day (89 days in total). Given in the base asset.
     *
     * @return self
     */
    public function setMoving90DayVolumeBuy($moving_90_day_volume_buy)
    {
        if (is_null($moving_90_day_volume_buy)) {
            throw new \InvalidArgumentException('non-nullable moving_90_day_volume_buy cannot be null');
        }
        $this->container['moving_90_day_volume_buy'] = $moving_90_day_volume_buy;

        return $this;
    }

    /**
     * Gets moving_90_day_volume_sell
     *
     * @return int|null
     */
    public function getMoving90DayVolumeSell()
    {
        return $this->container['moving_90_day_volume_sell'];
    }

    /**
     * Sets moving_90_day_volume_sell
     *
     * @param int|null $moving_90_day_volume_sell The sum of all sell trade quantities from 90 days ago up to the beginning of the current day (89 days in total). Given in the base asset.
     *
     * @return self
     */
    public function setMoving90DayVolumeSell($moving_90_day_volume_sell)
    {
        if (is_null($moving_90_day_volume_sell)) {
            throw new \InvalidArgumentException('non-nullable moving_90_day_volume_sell cannot be null');
        }
        $this->container['moving_90_day_volume_sell'] = $moving_90_day_volume_sell;

        return $this;
    }

    /**
     * Gets moving_90_day_volume_unknown
     *
     * @return int|null
     */
    public function getMoving90DayVolumeUnknown()
    {
        return $this->container['moving_90_day_volume_unknown'];
    }

    /**
     * Sets moving_90_day_volume_unknown
     *
     * @param int|null $moving_90_day_volume_unknown The sum of all unknown trade quantities from 90 days ago up to the beginning of the current day (89 days in total). Given in the base asset.
     *
     * @return self
     */
    public function setMoving90DayVolumeUnknown($moving_90_day_volume_unknown)
    {
        if (is_null($moving_90_day_volume_unknown)) {
            throw new \InvalidArgumentException('non-nullable moving_90_day_volume_unknown cannot be null');
        }
        $this->container['moving_90_day_volume_unknown'] = $moving_90_day_volume_unknown;

        return $this;
    }

    /**
     * Gets price
     *
     * @return int|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param int|null $price The price in the to asset (quote / number symbol / coin) of the latest trade. I.e. for a BTC-USD trade, how much was paid for one BTC in USD).
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets price_flag
     *
     * @return string|null
     */
    public function getPriceFlag()
    {
        return $this->container['price_flag'];
    }

    /**
     * Sets price_flag
     *
     * @param string|null $price_flag The flag indicating whether the price has increased, decreased, or not changed
     *
     * @return self
     */
    public function setPriceFlag($price_flag)
    {
        if (is_null($price_flag)) {
            throw new \InvalidArgumentException('non-nullable price_flag cannot be null');
        }
        $this->container['price_flag'] = $price_flag;

        return $this;
    }

    /**
     * Gets price_last_update_ts
     *
     * @return int|null
     */
    public function getPriceLastUpdateTs()
    {
        return $this->container['price_last_update_ts'];
    }

    /**
     * Sets price_last_update_ts
     *
     * @param int|null $price_last_update_ts The timestamp in seconds as reported by the market / exchange. If the market /exchange does not provide this information, the received timestamp will be returned.
     *
     * @return self
     */
    public function setPriceLastUpdateTs($price_last_update_ts)
    {
        if (is_null($price_last_update_ts)) {
            throw new \InvalidArgumentException('non-nullable price_last_update_ts cannot be null');
        }
        $this->container['price_last_update_ts'] = $price_last_update_ts;

        return $this;
    }

    /**
     * Gets quote
     *
     * @return string|null
     */
    public function getQuote()
    {
        return $this->container['quote'];
    }

    /**
     * Sets quote
     *
     * @param string|null $quote The mapped to asset (quote / counter symbol / coin), e.g. USD. Only available on instruments that have been mapped.
     *
     * @return self
     */
    public function setQuote($quote)
    {
        if (is_null($quote)) {
            throw new \InvalidArgumentException('non-nullable quote cannot be null');
        }
        $this->container['quote'] = $quote;

        return $this;
    }

    /**
     * Gets top_ask_last_update_ts
     *
     * @return int|null
     */
    public function getTopAskLastUpdateTs()
    {
        return $this->container['top_ask_last_update_ts'];
    }

    /**
     * Sets top_ask_last_update_ts
     *
     * @param int|null $top_ask_last_update_ts The timestamp in seconds of the last time the top ask was updated, as reported by the market / exchange. If the market / exchange does not provide this information, the received timestamp will be returned.
     *
     * @return self
     */
    public function setTopAskLastUpdateTs($top_ask_last_update_ts)
    {
        if (is_null($top_ask_last_update_ts)) {
            throw new \InvalidArgumentException('non-nullable top_ask_last_update_ts cannot be null');
        }
        $this->container['top_ask_last_update_ts'] = $top_ask_last_update_ts;

        return $this;
    }

    /**
     * Gets top_ask_price
     *
     * @return int|null
     */
    public function getTopAskPrice()
    {
        return $this->container['top_ask_price'];
    }

    /**
     * Sets top_ask_price
     *
     * @param int|null $top_ask_price The price of the top ask in the to asset (quote / numberer symbol / coin). For a BTC-USD order book, this will be the best price someone is willing to sell some BTC in USD, as quoted for 1 full BTC.
     *
     * @return self
     */
    public function setTopAskPrice($top_ask_price)
    {
        if (is_null($top_ask_price)) {
            throw new \InvalidArgumentException('non-nullable top_ask_price cannot be null');
        }
        $this->container['top_ask_price'] = $top_ask_price;

        return $this;
    }

    /**
     * Gets top_ask_quantity
     *
     * @return int|null
     */
    public function getTopAskQuantity()
    {
        return $this->container['top_ask_quantity'];
    }

    /**
     * Sets top_ask_quantity
     *
     * @param int|null $top_ask_quantity The quantity of the top ask in the from asset (base / coin). For a BTC-USD order book, this will be the amount of BTC a person is willing to sell at the best price.
     *
     * @return self
     */
    public function setTopAskQuantity($top_ask_quantity)
    {
        if (is_null($top_ask_quantity)) {
            throw new \InvalidArgumentException('non-nullable top_ask_quantity cannot be null');
        }
        $this->container['top_ask_quantity'] = $top_ask_quantity;

        return $this;
    }

    /**
     * Gets top_bid_last_update_ts
     *
     * @return int|null
     */
    public function getTopBidLastUpdateTs()
    {
        return $this->container['top_bid_last_update_ts'];
    }

    /**
     * Sets top_bid_last_update_ts
     *
     * @param int|null $top_bid_last_update_ts The timestamp in seconds of the last time the top bid was updated, as reported by the market / exchange. If the market / exchange does not provide this information, the received timestamp will be returned.
     *
     * @return self
     */
    public function setTopBidLastUpdateTs($top_bid_last_update_ts)
    {
        if (is_null($top_bid_last_update_ts)) {
            throw new \InvalidArgumentException('non-nullable top_bid_last_update_ts cannot be null');
        }
        $this->container['top_bid_last_update_ts'] = $top_bid_last_update_ts;

        return $this;
    }

    /**
     * Gets top_bid_price
     *
     * @return int|null
     */
    public function getTopBidPrice()
    {
        return $this->container['top_bid_price'];
    }

    /**
     * Sets top_bid_price
     *
     * @param int|null $top_bid_price The price of the top bid in the to asset (quote / numberer symbol / coin). For a BTC-USD order book, this will be the highest price a person is willing to pay for some BTC in USD, as quoted for 1 full BTC.
     *
     * @return self
     */
    public function setTopBidPrice($top_bid_price)
    {
        if (is_null($top_bid_price)) {
            throw new \InvalidArgumentException('non-nullable top_bid_price cannot be null');
        }
        $this->container['top_bid_price'] = $top_bid_price;

        return $this;
    }

    /**
     * Gets top_bid_quantity
     *
     * @return int|null
     */
    public function getTopBidQuantity()
    {
        return $this->container['top_bid_quantity'];
    }

    /**
     * Sets top_bid_quantity
     *
     * @param int|null $top_bid_quantity The quantity of the top bid in the from asset (base / coin). For a BTC-USD order book , this will be the amount of BTC someone is willing to buy at the best price.
     *
     * @return self
     */
    public function setTopBidQuantity($top_bid_quantity)
    {
        if (is_null($top_bid_quantity)) {
            throw new \InvalidArgumentException('non-nullable top_bid_quantity cannot be null');
        }
        $this->container['top_bid_quantity'] = $top_bid_quantity;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type The type of the message.
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


