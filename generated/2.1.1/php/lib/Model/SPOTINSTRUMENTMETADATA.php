<?php
/**
 * SPOTINSTRUMENTMETADATA
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 *
 * CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: data@cryptocompare.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SPOTINSTRUMENTMETADATA Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SPOTINSTRUMENTMETADATA implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SPOT_INSTRUMENT_METADATA';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'first_seen_on_blob_ts' => 'int',
        'first_seen_on_fix_ts' => 'int',
        'first_seen_on_hardcoded_ts' => 'int',
        'first_seen_on_index_composition_ts' => 'int',
        'first_seen_on_nsq_ts' => 'int',
        'first_seen_on_polling_ts' => 'int',
        'first_seen_on_streaming_ts' => 'int',
        'first_trade_spot_from_backfill' => 'object',
        'first_trade_spot_from_backfill_external' => 'object',
        'first_trade_spot_from_blob' => 'object',
        'first_trade_spot_from_blob_external' => 'object',
        'first_trade_spot_from_calculated' => 'object',
        'first_trade_spot_from_calculated_external' => 'object',
        'first_trade_spot_from_fix' => 'object',
        'first_trade_spot_from_fix_external' => 'object',
        'first_trade_spot_from_go' => 'object',
        'first_trade_spot_from_go_external' => 'object',
        'first_trade_spot_from_polling' => 'object',
        'first_trade_spot_from_polling_external' => 'object',
        'first_trade_spot_from_streaming' => 'object',
        'first_trade_spot_from_streaming_external' => 'object',
        'host_migration_destination' => 'string',
        'host_migration_source' => 'string',
        'host_migration_status' => 'string',
        'instrument' => 'string',
        'instrument_external_data' => 'string',
        'instrument_mapping' => 'object',
        'instrument_mapping_history' => 'string[]',
        'instrument_source_backfill' => 'string',
        'instrument_source_blob' => 'string',
        'instrument_source_calculated' => 'string',
        'instrument_source_fix' => 'string',
        'instrument_source_go' => 'string',
        'instrument_source_polling' => 'string',
        'instrument_source_streaming' => 'string',
        'instrument_status' => 'string',
        'instrument_trade_spot_from_backfill_last_proxied_rest_request' => 'object',
        'instrument_trade_spot_from_backfill_rest_uri_last_request_ts' => 'int',
        'instrument_trade_spot_from_backfill_rest_uri_last_response_ts' => 'int',
        'instrument_trade_spot_from_backfill_rest_uri_next_request_ts' => 'int',
        'instrument_trade_spot_from_blob_last_proxied_rest_request' => 'object',
        'instrument_trade_spot_from_blob_rest_uri_last_request_ts' => 'int',
        'instrument_trade_spot_from_blob_rest_uri_last_response_ts' => 'int',
        'instrument_trade_spot_from_blob_rest_uri_next_request_ts' => 'int',
        'instrument_trade_spot_from_calculated_last_proxied_rest_request' => 'object',
        'instrument_trade_spot_from_calculated_rest_uri_last_request_ts' => 'int',
        'instrument_trade_spot_from_calculated_rest_uri_last_response_ts' => 'int',
        'instrument_trade_spot_from_calculated_rest_uri_next_request_ts' => 'int',
        'instrument_trade_spot_from_fix_last_proxied_rest_request' => 'object',
        'instrument_trade_spot_from_fix_rest_uri_last_request_ts' => 'int',
        'instrument_trade_spot_from_fix_rest_uri_last_response_ts' => 'int',
        'instrument_trade_spot_from_fix_rest_uri_next_request_ts' => 'int',
        'instrument_trade_spot_from_go_last_proxied_rest_request' => 'object',
        'instrument_trade_spot_from_go_rest_uri_last_request_ts' => 'int',
        'instrument_trade_spot_from_go_rest_uri_last_response_ts' => 'int',
        'instrument_trade_spot_from_go_rest_uri_next_request_ts' => 'int',
        'instrument_trade_spot_from_polling_last_proxied_rest_request' => 'object',
        'instrument_trade_spot_from_polling_rest_uri_last_request_ts' => 'int',
        'instrument_trade_spot_from_polling_rest_uri_last_response_ts' => 'int',
        'instrument_trade_spot_from_polling_rest_uri_next_request_ts' => 'int',
        'instrument_trade_spot_from_streaming_last_proxied_rest_request' => 'object',
        'instrument_trade_spot_from_streaming_rest_uri_last_request_ts' => 'int',
        'instrument_trade_spot_from_streaming_rest_uri_last_response_ts' => 'int',
        'instrument_trade_spot_from_streaming_rest_uri_next_request_ts' => 'int',
        'instrument_trade_spot_is_ready_for_streaming_integration' => 'bool',
        'instrument_trade_spot_rest_uri' => 'string',
        'instrument_trade_spot_rest_url' => 'string',
        'instrument_trade_spot_streaming_subscription' => 'string',
        'last_concurrent_batch_of_trades_spot_ms' => 'int',
        'last_seen_on_blob_ts' => 'int',
        'last_seen_on_fix_ts' => 'int',
        'last_seen_on_hardcoded_ts' => 'int',
        'last_seen_on_index_composition_ts' => 'int',
        'last_seen_on_nsq_ts' => 'int',
        'last_seen_on_polling_ts' => 'int',
        'last_seen_on_streaming_ts' => 'int',
        'last_trade_spot_from_backfill' => 'object',
        'last_trade_spot_from_backfill_external' => 'object',
        'last_trade_spot_from_blob' => 'object',
        'last_trade_spot_from_blob_external' => 'object',
        'last_trade_spot_from_calculated' => 'object',
        'last_trade_spot_from_calculated_external' => 'object',
        'last_trade_spot_from_fix' => 'object',
        'last_trade_spot_from_fix_external' => 'object',
        'last_trade_spot_from_go' => 'object',
        'last_trade_spot_from_go_external' => 'object',
        'last_trade_spot_from_polling' => 'object',
        'last_trade_spot_from_polling_external' => 'object',
        'last_trade_spot_from_streaming' => 'object',
        'last_trade_spot_from_streaming_external' => 'object',
        'metadata_version' => 'int',
        'processing_trades_from_blob_status' => 'string',
        'total_trades_spot' => 'int',
        'unstructured_trade_spot_from_backfill_internal_data' => 'object',
        'unstructured_trade_spot_from_blob_internal_data' => 'object',
        'unstructured_trade_spot_from_calculated_internal_data' => 'object',
        'unstructured_trade_spot_from_fix_internal_data' => 'object',
        'unstructured_trade_spot_from_go_internal_data' => 'object',
        'unstructured_trade_spot_from_polling_internal_data' => 'object',
        'unstructured_trade_spot_from_streaming_internal_data' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'first_seen_on_blob_ts' => null,
        'first_seen_on_fix_ts' => null,
        'first_seen_on_hardcoded_ts' => null,
        'first_seen_on_index_composition_ts' => null,
        'first_seen_on_nsq_ts' => null,
        'first_seen_on_polling_ts' => null,
        'first_seen_on_streaming_ts' => null,
        'first_trade_spot_from_backfill' => null,
        'first_trade_spot_from_backfill_external' => null,
        'first_trade_spot_from_blob' => null,
        'first_trade_spot_from_blob_external' => null,
        'first_trade_spot_from_calculated' => null,
        'first_trade_spot_from_calculated_external' => null,
        'first_trade_spot_from_fix' => null,
        'first_trade_spot_from_fix_external' => null,
        'first_trade_spot_from_go' => null,
        'first_trade_spot_from_go_external' => null,
        'first_trade_spot_from_polling' => null,
        'first_trade_spot_from_polling_external' => null,
        'first_trade_spot_from_streaming' => null,
        'first_trade_spot_from_streaming_external' => null,
        'host_migration_destination' => null,
        'host_migration_source' => null,
        'host_migration_status' => null,
        'instrument' => null,
        'instrument_external_data' => null,
        'instrument_mapping' => null,
        'instrument_mapping_history' => null,
        'instrument_source_backfill' => null,
        'instrument_source_blob' => null,
        'instrument_source_calculated' => null,
        'instrument_source_fix' => null,
        'instrument_source_go' => null,
        'instrument_source_polling' => null,
        'instrument_source_streaming' => null,
        'instrument_status' => null,
        'instrument_trade_spot_from_backfill_last_proxied_rest_request' => null,
        'instrument_trade_spot_from_backfill_rest_uri_last_request_ts' => null,
        'instrument_trade_spot_from_backfill_rest_uri_last_response_ts' => null,
        'instrument_trade_spot_from_backfill_rest_uri_next_request_ts' => null,
        'instrument_trade_spot_from_blob_last_proxied_rest_request' => null,
        'instrument_trade_spot_from_blob_rest_uri_last_request_ts' => null,
        'instrument_trade_spot_from_blob_rest_uri_last_response_ts' => null,
        'instrument_trade_spot_from_blob_rest_uri_next_request_ts' => null,
        'instrument_trade_spot_from_calculated_last_proxied_rest_request' => null,
        'instrument_trade_spot_from_calculated_rest_uri_last_request_ts' => null,
        'instrument_trade_spot_from_calculated_rest_uri_last_response_ts' => null,
        'instrument_trade_spot_from_calculated_rest_uri_next_request_ts' => null,
        'instrument_trade_spot_from_fix_last_proxied_rest_request' => null,
        'instrument_trade_spot_from_fix_rest_uri_last_request_ts' => null,
        'instrument_trade_spot_from_fix_rest_uri_last_response_ts' => null,
        'instrument_trade_spot_from_fix_rest_uri_next_request_ts' => null,
        'instrument_trade_spot_from_go_last_proxied_rest_request' => null,
        'instrument_trade_spot_from_go_rest_uri_last_request_ts' => null,
        'instrument_trade_spot_from_go_rest_uri_last_response_ts' => null,
        'instrument_trade_spot_from_go_rest_uri_next_request_ts' => null,
        'instrument_trade_spot_from_polling_last_proxied_rest_request' => null,
        'instrument_trade_spot_from_polling_rest_uri_last_request_ts' => null,
        'instrument_trade_spot_from_polling_rest_uri_last_response_ts' => null,
        'instrument_trade_spot_from_polling_rest_uri_next_request_ts' => null,
        'instrument_trade_spot_from_streaming_last_proxied_rest_request' => null,
        'instrument_trade_spot_from_streaming_rest_uri_last_request_ts' => null,
        'instrument_trade_spot_from_streaming_rest_uri_last_response_ts' => null,
        'instrument_trade_spot_from_streaming_rest_uri_next_request_ts' => null,
        'instrument_trade_spot_is_ready_for_streaming_integration' => null,
        'instrument_trade_spot_rest_uri' => null,
        'instrument_trade_spot_rest_url' => null,
        'instrument_trade_spot_streaming_subscription' => null,
        'last_concurrent_batch_of_trades_spot_ms' => null,
        'last_seen_on_blob_ts' => null,
        'last_seen_on_fix_ts' => null,
        'last_seen_on_hardcoded_ts' => null,
        'last_seen_on_index_composition_ts' => null,
        'last_seen_on_nsq_ts' => null,
        'last_seen_on_polling_ts' => null,
        'last_seen_on_streaming_ts' => null,
        'last_trade_spot_from_backfill' => null,
        'last_trade_spot_from_backfill_external' => null,
        'last_trade_spot_from_blob' => null,
        'last_trade_spot_from_blob_external' => null,
        'last_trade_spot_from_calculated' => null,
        'last_trade_spot_from_calculated_external' => null,
        'last_trade_spot_from_fix' => null,
        'last_trade_spot_from_fix_external' => null,
        'last_trade_spot_from_go' => null,
        'last_trade_spot_from_go_external' => null,
        'last_trade_spot_from_polling' => null,
        'last_trade_spot_from_polling_external' => null,
        'last_trade_spot_from_streaming' => null,
        'last_trade_spot_from_streaming_external' => null,
        'metadata_version' => null,
        'processing_trades_from_blob_status' => null,
        'total_trades_spot' => null,
        'unstructured_trade_spot_from_backfill_internal_data' => null,
        'unstructured_trade_spot_from_blob_internal_data' => null,
        'unstructured_trade_spot_from_calculated_internal_data' => null,
        'unstructured_trade_spot_from_fix_internal_data' => null,
        'unstructured_trade_spot_from_go_internal_data' => null,
        'unstructured_trade_spot_from_polling_internal_data' => null,
        'unstructured_trade_spot_from_streaming_internal_data' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'first_seen_on_blob_ts' => false,
		'first_seen_on_fix_ts' => false,
		'first_seen_on_hardcoded_ts' => false,
		'first_seen_on_index_composition_ts' => false,
		'first_seen_on_nsq_ts' => false,
		'first_seen_on_polling_ts' => false,
		'first_seen_on_streaming_ts' => false,
		'first_trade_spot_from_backfill' => false,
		'first_trade_spot_from_backfill_external' => false,
		'first_trade_spot_from_blob' => false,
		'first_trade_spot_from_blob_external' => false,
		'first_trade_spot_from_calculated' => false,
		'first_trade_spot_from_calculated_external' => false,
		'first_trade_spot_from_fix' => false,
		'first_trade_spot_from_fix_external' => false,
		'first_trade_spot_from_go' => false,
		'first_trade_spot_from_go_external' => false,
		'first_trade_spot_from_polling' => false,
		'first_trade_spot_from_polling_external' => false,
		'first_trade_spot_from_streaming' => false,
		'first_trade_spot_from_streaming_external' => false,
		'host_migration_destination' => false,
		'host_migration_source' => false,
		'host_migration_status' => false,
		'instrument' => false,
		'instrument_external_data' => false,
		'instrument_mapping' => false,
		'instrument_mapping_history' => false,
		'instrument_source_backfill' => false,
		'instrument_source_blob' => false,
		'instrument_source_calculated' => false,
		'instrument_source_fix' => false,
		'instrument_source_go' => false,
		'instrument_source_polling' => false,
		'instrument_source_streaming' => false,
		'instrument_status' => false,
		'instrument_trade_spot_from_backfill_last_proxied_rest_request' => false,
		'instrument_trade_spot_from_backfill_rest_uri_last_request_ts' => false,
		'instrument_trade_spot_from_backfill_rest_uri_last_response_ts' => false,
		'instrument_trade_spot_from_backfill_rest_uri_next_request_ts' => false,
		'instrument_trade_spot_from_blob_last_proxied_rest_request' => false,
		'instrument_trade_spot_from_blob_rest_uri_last_request_ts' => false,
		'instrument_trade_spot_from_blob_rest_uri_last_response_ts' => false,
		'instrument_trade_spot_from_blob_rest_uri_next_request_ts' => false,
		'instrument_trade_spot_from_calculated_last_proxied_rest_request' => false,
		'instrument_trade_spot_from_calculated_rest_uri_last_request_ts' => false,
		'instrument_trade_spot_from_calculated_rest_uri_last_response_ts' => false,
		'instrument_trade_spot_from_calculated_rest_uri_next_request_ts' => false,
		'instrument_trade_spot_from_fix_last_proxied_rest_request' => false,
		'instrument_trade_spot_from_fix_rest_uri_last_request_ts' => false,
		'instrument_trade_spot_from_fix_rest_uri_last_response_ts' => false,
		'instrument_trade_spot_from_fix_rest_uri_next_request_ts' => false,
		'instrument_trade_spot_from_go_last_proxied_rest_request' => false,
		'instrument_trade_spot_from_go_rest_uri_last_request_ts' => false,
		'instrument_trade_spot_from_go_rest_uri_last_response_ts' => false,
		'instrument_trade_spot_from_go_rest_uri_next_request_ts' => false,
		'instrument_trade_spot_from_polling_last_proxied_rest_request' => false,
		'instrument_trade_spot_from_polling_rest_uri_last_request_ts' => false,
		'instrument_trade_spot_from_polling_rest_uri_last_response_ts' => false,
		'instrument_trade_spot_from_polling_rest_uri_next_request_ts' => false,
		'instrument_trade_spot_from_streaming_last_proxied_rest_request' => false,
		'instrument_trade_spot_from_streaming_rest_uri_last_request_ts' => false,
		'instrument_trade_spot_from_streaming_rest_uri_last_response_ts' => false,
		'instrument_trade_spot_from_streaming_rest_uri_next_request_ts' => false,
		'instrument_trade_spot_is_ready_for_streaming_integration' => false,
		'instrument_trade_spot_rest_uri' => false,
		'instrument_trade_spot_rest_url' => false,
		'instrument_trade_spot_streaming_subscription' => false,
		'last_concurrent_batch_of_trades_spot_ms' => false,
		'last_seen_on_blob_ts' => false,
		'last_seen_on_fix_ts' => false,
		'last_seen_on_hardcoded_ts' => false,
		'last_seen_on_index_composition_ts' => false,
		'last_seen_on_nsq_ts' => false,
		'last_seen_on_polling_ts' => false,
		'last_seen_on_streaming_ts' => false,
		'last_trade_spot_from_backfill' => false,
		'last_trade_spot_from_backfill_external' => false,
		'last_trade_spot_from_blob' => false,
		'last_trade_spot_from_blob_external' => false,
		'last_trade_spot_from_calculated' => false,
		'last_trade_spot_from_calculated_external' => false,
		'last_trade_spot_from_fix' => false,
		'last_trade_spot_from_fix_external' => false,
		'last_trade_spot_from_go' => false,
		'last_trade_spot_from_go_external' => false,
		'last_trade_spot_from_polling' => false,
		'last_trade_spot_from_polling_external' => false,
		'last_trade_spot_from_streaming' => false,
		'last_trade_spot_from_streaming_external' => false,
		'metadata_version' => false,
		'processing_trades_from_blob_status' => false,
		'total_trades_spot' => false,
		'unstructured_trade_spot_from_backfill_internal_data' => false,
		'unstructured_trade_spot_from_blob_internal_data' => false,
		'unstructured_trade_spot_from_calculated_internal_data' => false,
		'unstructured_trade_spot_from_fix_internal_data' => false,
		'unstructured_trade_spot_from_go_internal_data' => false,
		'unstructured_trade_spot_from_polling_internal_data' => false,
		'unstructured_trade_spot_from_streaming_internal_data' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'first_seen_on_blob_ts' => 'FIRST_SEEN_ON_BLOB_TS',
        'first_seen_on_fix_ts' => 'FIRST_SEEN_ON_FIX_TS',
        'first_seen_on_hardcoded_ts' => 'FIRST_SEEN_ON_HARDCODED_TS',
        'first_seen_on_index_composition_ts' => 'FIRST_SEEN_ON_INDEX_COMPOSITION_TS',
        'first_seen_on_nsq_ts' => 'FIRST_SEEN_ON_NSQ_TS',
        'first_seen_on_polling_ts' => 'FIRST_SEEN_ON_POLLING_TS',
        'first_seen_on_streaming_ts' => 'FIRST_SEEN_ON_STREAMING_TS',
        'first_trade_spot_from_backfill' => 'FIRST_TRADE_SPOT_FROM_BACKFILL',
        'first_trade_spot_from_backfill_external' => 'FIRST_TRADE_SPOT_FROM_BACKFILL_EXTERNAL',
        'first_trade_spot_from_blob' => 'FIRST_TRADE_SPOT_FROM_BLOB',
        'first_trade_spot_from_blob_external' => 'FIRST_TRADE_SPOT_FROM_BLOB_EXTERNAL',
        'first_trade_spot_from_calculated' => 'FIRST_TRADE_SPOT_FROM_CALCULATED',
        'first_trade_spot_from_calculated_external' => 'FIRST_TRADE_SPOT_FROM_CALCULATED_EXTERNAL',
        'first_trade_spot_from_fix' => 'FIRST_TRADE_SPOT_FROM_FIX',
        'first_trade_spot_from_fix_external' => 'FIRST_TRADE_SPOT_FROM_FIX_EXTERNAL',
        'first_trade_spot_from_go' => 'FIRST_TRADE_SPOT_FROM_GO',
        'first_trade_spot_from_go_external' => 'FIRST_TRADE_SPOT_FROM_GO_EXTERNAL',
        'first_trade_spot_from_polling' => 'FIRST_TRADE_SPOT_FROM_POLLING',
        'first_trade_spot_from_polling_external' => 'FIRST_TRADE_SPOT_FROM_POLLING_EXTERNAL',
        'first_trade_spot_from_streaming' => 'FIRST_TRADE_SPOT_FROM_STREAMING',
        'first_trade_spot_from_streaming_external' => 'FIRST_TRADE_SPOT_FROM_STREAMING_EXTERNAL',
        'host_migration_destination' => 'HOST_MIGRATION_DESTINATION',
        'host_migration_source' => 'HOST_MIGRATION_SOURCE',
        'host_migration_status' => 'HOST_MIGRATION_STATUS',
        'instrument' => 'INSTRUMENT',
        'instrument_external_data' => 'INSTRUMENT_EXTERNAL_DATA',
        'instrument_mapping' => 'INSTRUMENT_MAPPING',
        'instrument_mapping_history' => 'INSTRUMENT_MAPPING_HISTORY',
        'instrument_source_backfill' => 'INSTRUMENT_SOURCE_BACKFILL',
        'instrument_source_blob' => 'INSTRUMENT_SOURCE_BLOB',
        'instrument_source_calculated' => 'INSTRUMENT_SOURCE_CALCULATED',
        'instrument_source_fix' => 'INSTRUMENT_SOURCE_FIX',
        'instrument_source_go' => 'INSTRUMENT_SOURCE_GO',
        'instrument_source_polling' => 'INSTRUMENT_SOURCE_POLLING',
        'instrument_source_streaming' => 'INSTRUMENT_SOURCE_STREAMING',
        'instrument_status' => 'INSTRUMENT_STATUS',
        'instrument_trade_spot_from_backfill_last_proxied_rest_request' => 'INSTRUMENT_TRADE_SPOT_FROM_BACKFILL_LAST_PROXIED_REST_REQUEST',
        'instrument_trade_spot_from_backfill_rest_uri_last_request_ts' => 'INSTRUMENT_TRADE_SPOT_FROM_BACKFILL_REST_URI_LAST_REQUEST_TS',
        'instrument_trade_spot_from_backfill_rest_uri_last_response_ts' => 'INSTRUMENT_TRADE_SPOT_FROM_BACKFILL_REST_URI_LAST_RESPONSE_TS',
        'instrument_trade_spot_from_backfill_rest_uri_next_request_ts' => 'INSTRUMENT_TRADE_SPOT_FROM_BACKFILL_REST_URI_NEXT_REQUEST_TS',
        'instrument_trade_spot_from_blob_last_proxied_rest_request' => 'INSTRUMENT_TRADE_SPOT_FROM_BLOB_LAST_PROXIED_REST_REQUEST',
        'instrument_trade_spot_from_blob_rest_uri_last_request_ts' => 'INSTRUMENT_TRADE_SPOT_FROM_BLOB_REST_URI_LAST_REQUEST_TS',
        'instrument_trade_spot_from_blob_rest_uri_last_response_ts' => 'INSTRUMENT_TRADE_SPOT_FROM_BLOB_REST_URI_LAST_RESPONSE_TS',
        'instrument_trade_spot_from_blob_rest_uri_next_request_ts' => 'INSTRUMENT_TRADE_SPOT_FROM_BLOB_REST_URI_NEXT_REQUEST_TS',
        'instrument_trade_spot_from_calculated_last_proxied_rest_request' => 'INSTRUMENT_TRADE_SPOT_FROM_CALCULATED_LAST_PROXIED_REST_REQUEST',
        'instrument_trade_spot_from_calculated_rest_uri_last_request_ts' => 'INSTRUMENT_TRADE_SPOT_FROM_CALCULATED_REST_URI_LAST_REQUEST_TS',
        'instrument_trade_spot_from_calculated_rest_uri_last_response_ts' => 'INSTRUMENT_TRADE_SPOT_FROM_CALCULATED_REST_URI_LAST_RESPONSE_TS',
        'instrument_trade_spot_from_calculated_rest_uri_next_request_ts' => 'INSTRUMENT_TRADE_SPOT_FROM_CALCULATED_REST_URI_NEXT_REQUEST_TS',
        'instrument_trade_spot_from_fix_last_proxied_rest_request' => 'INSTRUMENT_TRADE_SPOT_FROM_FIX_LAST_PROXIED_REST_REQUEST',
        'instrument_trade_spot_from_fix_rest_uri_last_request_ts' => 'INSTRUMENT_TRADE_SPOT_FROM_FIX_REST_URI_LAST_REQUEST_TS',
        'instrument_trade_spot_from_fix_rest_uri_last_response_ts' => 'INSTRUMENT_TRADE_SPOT_FROM_FIX_REST_URI_LAST_RESPONSE_TS',
        'instrument_trade_spot_from_fix_rest_uri_next_request_ts' => 'INSTRUMENT_TRADE_SPOT_FROM_FIX_REST_URI_NEXT_REQUEST_TS',
        'instrument_trade_spot_from_go_last_proxied_rest_request' => 'INSTRUMENT_TRADE_SPOT_FROM_GO_LAST_PROXIED_REST_REQUEST',
        'instrument_trade_spot_from_go_rest_uri_last_request_ts' => 'INSTRUMENT_TRADE_SPOT_FROM_GO_REST_URI_LAST_REQUEST_TS',
        'instrument_trade_spot_from_go_rest_uri_last_response_ts' => 'INSTRUMENT_TRADE_SPOT_FROM_GO_REST_URI_LAST_RESPONSE_TS',
        'instrument_trade_spot_from_go_rest_uri_next_request_ts' => 'INSTRUMENT_TRADE_SPOT_FROM_GO_REST_URI_NEXT_REQUEST_TS',
        'instrument_trade_spot_from_polling_last_proxied_rest_request' => 'INSTRUMENT_TRADE_SPOT_FROM_POLLING_LAST_PROXIED_REST_REQUEST',
        'instrument_trade_spot_from_polling_rest_uri_last_request_ts' => 'INSTRUMENT_TRADE_SPOT_FROM_POLLING_REST_URI_LAST_REQUEST_TS',
        'instrument_trade_spot_from_polling_rest_uri_last_response_ts' => 'INSTRUMENT_TRADE_SPOT_FROM_POLLING_REST_URI_LAST_RESPONSE_TS',
        'instrument_trade_spot_from_polling_rest_uri_next_request_ts' => 'INSTRUMENT_TRADE_SPOT_FROM_POLLING_REST_URI_NEXT_REQUEST_TS',
        'instrument_trade_spot_from_streaming_last_proxied_rest_request' => 'INSTRUMENT_TRADE_SPOT_FROM_STREAMING_LAST_PROXIED_REST_REQUEST',
        'instrument_trade_spot_from_streaming_rest_uri_last_request_ts' => 'INSTRUMENT_TRADE_SPOT_FROM_STREAMING_REST_URI_LAST_REQUEST_TS',
        'instrument_trade_spot_from_streaming_rest_uri_last_response_ts' => 'INSTRUMENT_TRADE_SPOT_FROM_STREAMING_REST_URI_LAST_RESPONSE_TS',
        'instrument_trade_spot_from_streaming_rest_uri_next_request_ts' => 'INSTRUMENT_TRADE_SPOT_FROM_STREAMING_REST_URI_NEXT_REQUEST_TS',
        'instrument_trade_spot_is_ready_for_streaming_integration' => 'INSTRUMENT_TRADE_SPOT_IS_READY_FOR_STREAMING_INTEGRATION',
        'instrument_trade_spot_rest_uri' => 'INSTRUMENT_TRADE_SPOT_REST_URI',
        'instrument_trade_spot_rest_url' => 'INSTRUMENT_TRADE_SPOT_REST_URL',
        'instrument_trade_spot_streaming_subscription' => 'INSTRUMENT_TRADE_SPOT_STREAMING_SUBSCRIPTION',
        'last_concurrent_batch_of_trades_spot_ms' => 'LAST_CONCURRENT_BATCH_OF_TRADES_SPOT_MS',
        'last_seen_on_blob_ts' => 'LAST_SEEN_ON_BLOB_TS',
        'last_seen_on_fix_ts' => 'LAST_SEEN_ON_FIX_TS',
        'last_seen_on_hardcoded_ts' => 'LAST_SEEN_ON_HARDCODED_TS',
        'last_seen_on_index_composition_ts' => 'LAST_SEEN_ON_INDEX_COMPOSITION_TS',
        'last_seen_on_nsq_ts' => 'LAST_SEEN_ON_NSQ_TS',
        'last_seen_on_polling_ts' => 'LAST_SEEN_ON_POLLING_TS',
        'last_seen_on_streaming_ts' => 'LAST_SEEN_ON_STREAMING_TS',
        'last_trade_spot_from_backfill' => 'LAST_TRADE_SPOT_FROM_BACKFILL',
        'last_trade_spot_from_backfill_external' => 'LAST_TRADE_SPOT_FROM_BACKFILL_EXTERNAL',
        'last_trade_spot_from_blob' => 'LAST_TRADE_SPOT_FROM_BLOB',
        'last_trade_spot_from_blob_external' => 'LAST_TRADE_SPOT_FROM_BLOB_EXTERNAL',
        'last_trade_spot_from_calculated' => 'LAST_TRADE_SPOT_FROM_CALCULATED',
        'last_trade_spot_from_calculated_external' => 'LAST_TRADE_SPOT_FROM_CALCULATED_EXTERNAL',
        'last_trade_spot_from_fix' => 'LAST_TRADE_SPOT_FROM_FIX',
        'last_trade_spot_from_fix_external' => 'LAST_TRADE_SPOT_FROM_FIX_EXTERNAL',
        'last_trade_spot_from_go' => 'LAST_TRADE_SPOT_FROM_GO',
        'last_trade_spot_from_go_external' => 'LAST_TRADE_SPOT_FROM_GO_EXTERNAL',
        'last_trade_spot_from_polling' => 'LAST_TRADE_SPOT_FROM_POLLING',
        'last_trade_spot_from_polling_external' => 'LAST_TRADE_SPOT_FROM_POLLING_EXTERNAL',
        'last_trade_spot_from_streaming' => 'LAST_TRADE_SPOT_FROM_STREAMING',
        'last_trade_spot_from_streaming_external' => 'LAST_TRADE_SPOT_FROM_STREAMING_EXTERNAL',
        'metadata_version' => 'METADATA_VERSION',
        'processing_trades_from_blob_status' => 'PROCESSING_TRADES_FROM_BLOB_STATUS',
        'total_trades_spot' => 'TOTAL_TRADES_SPOT',
        'unstructured_trade_spot_from_backfill_internal_data' => 'UNSTRUCTURED_TRADE_SPOT_FROM_BACKFILL_INTERNAL_DATA',
        'unstructured_trade_spot_from_blob_internal_data' => 'UNSTRUCTURED_TRADE_SPOT_FROM_BLOB_INTERNAL_DATA',
        'unstructured_trade_spot_from_calculated_internal_data' => 'UNSTRUCTURED_TRADE_SPOT_FROM_CALCULATED_INTERNAL_DATA',
        'unstructured_trade_spot_from_fix_internal_data' => 'UNSTRUCTURED_TRADE_SPOT_FROM_FIX_INTERNAL_DATA',
        'unstructured_trade_spot_from_go_internal_data' => 'UNSTRUCTURED_TRADE_SPOT_FROM_GO_INTERNAL_DATA',
        'unstructured_trade_spot_from_polling_internal_data' => 'UNSTRUCTURED_TRADE_SPOT_FROM_POLLING_INTERNAL_DATA',
        'unstructured_trade_spot_from_streaming_internal_data' => 'UNSTRUCTURED_TRADE_SPOT_FROM_STREAMING_INTERNAL_DATA'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'first_seen_on_blob_ts' => 'setFirstSeenOnBlobTs',
        'first_seen_on_fix_ts' => 'setFirstSeenOnFixTs',
        'first_seen_on_hardcoded_ts' => 'setFirstSeenOnHardcodedTs',
        'first_seen_on_index_composition_ts' => 'setFirstSeenOnIndexCompositionTs',
        'first_seen_on_nsq_ts' => 'setFirstSeenOnNsqTs',
        'first_seen_on_polling_ts' => 'setFirstSeenOnPollingTs',
        'first_seen_on_streaming_ts' => 'setFirstSeenOnStreamingTs',
        'first_trade_spot_from_backfill' => 'setFirstTradeSpotFromBackfill',
        'first_trade_spot_from_backfill_external' => 'setFirstTradeSpotFromBackfillExternal',
        'first_trade_spot_from_blob' => 'setFirstTradeSpotFromBlob',
        'first_trade_spot_from_blob_external' => 'setFirstTradeSpotFromBlobExternal',
        'first_trade_spot_from_calculated' => 'setFirstTradeSpotFromCalculated',
        'first_trade_spot_from_calculated_external' => 'setFirstTradeSpotFromCalculatedExternal',
        'first_trade_spot_from_fix' => 'setFirstTradeSpotFromFix',
        'first_trade_spot_from_fix_external' => 'setFirstTradeSpotFromFixExternal',
        'first_trade_spot_from_go' => 'setFirstTradeSpotFromGo',
        'first_trade_spot_from_go_external' => 'setFirstTradeSpotFromGoExternal',
        'first_trade_spot_from_polling' => 'setFirstTradeSpotFromPolling',
        'first_trade_spot_from_polling_external' => 'setFirstTradeSpotFromPollingExternal',
        'first_trade_spot_from_streaming' => 'setFirstTradeSpotFromStreaming',
        'first_trade_spot_from_streaming_external' => 'setFirstTradeSpotFromStreamingExternal',
        'host_migration_destination' => 'setHostMigrationDestination',
        'host_migration_source' => 'setHostMigrationSource',
        'host_migration_status' => 'setHostMigrationStatus',
        'instrument' => 'setInstrument',
        'instrument_external_data' => 'setInstrumentExternalData',
        'instrument_mapping' => 'setInstrumentMapping',
        'instrument_mapping_history' => 'setInstrumentMappingHistory',
        'instrument_source_backfill' => 'setInstrumentSourceBackfill',
        'instrument_source_blob' => 'setInstrumentSourceBlob',
        'instrument_source_calculated' => 'setInstrumentSourceCalculated',
        'instrument_source_fix' => 'setInstrumentSourceFix',
        'instrument_source_go' => 'setInstrumentSourceGo',
        'instrument_source_polling' => 'setInstrumentSourcePolling',
        'instrument_source_streaming' => 'setInstrumentSourceStreaming',
        'instrument_status' => 'setInstrumentStatus',
        'instrument_trade_spot_from_backfill_last_proxied_rest_request' => 'setInstrumentTradeSpotFromBackfillLastProxiedRestRequest',
        'instrument_trade_spot_from_backfill_rest_uri_last_request_ts' => 'setInstrumentTradeSpotFromBackfillRestUriLastRequestTs',
        'instrument_trade_spot_from_backfill_rest_uri_last_response_ts' => 'setInstrumentTradeSpotFromBackfillRestUriLastResponseTs',
        'instrument_trade_spot_from_backfill_rest_uri_next_request_ts' => 'setInstrumentTradeSpotFromBackfillRestUriNextRequestTs',
        'instrument_trade_spot_from_blob_last_proxied_rest_request' => 'setInstrumentTradeSpotFromBlobLastProxiedRestRequest',
        'instrument_trade_spot_from_blob_rest_uri_last_request_ts' => 'setInstrumentTradeSpotFromBlobRestUriLastRequestTs',
        'instrument_trade_spot_from_blob_rest_uri_last_response_ts' => 'setInstrumentTradeSpotFromBlobRestUriLastResponseTs',
        'instrument_trade_spot_from_blob_rest_uri_next_request_ts' => 'setInstrumentTradeSpotFromBlobRestUriNextRequestTs',
        'instrument_trade_spot_from_calculated_last_proxied_rest_request' => 'setInstrumentTradeSpotFromCalculatedLastProxiedRestRequest',
        'instrument_trade_spot_from_calculated_rest_uri_last_request_ts' => 'setInstrumentTradeSpotFromCalculatedRestUriLastRequestTs',
        'instrument_trade_spot_from_calculated_rest_uri_last_response_ts' => 'setInstrumentTradeSpotFromCalculatedRestUriLastResponseTs',
        'instrument_trade_spot_from_calculated_rest_uri_next_request_ts' => 'setInstrumentTradeSpotFromCalculatedRestUriNextRequestTs',
        'instrument_trade_spot_from_fix_last_proxied_rest_request' => 'setInstrumentTradeSpotFromFixLastProxiedRestRequest',
        'instrument_trade_spot_from_fix_rest_uri_last_request_ts' => 'setInstrumentTradeSpotFromFixRestUriLastRequestTs',
        'instrument_trade_spot_from_fix_rest_uri_last_response_ts' => 'setInstrumentTradeSpotFromFixRestUriLastResponseTs',
        'instrument_trade_spot_from_fix_rest_uri_next_request_ts' => 'setInstrumentTradeSpotFromFixRestUriNextRequestTs',
        'instrument_trade_spot_from_go_last_proxied_rest_request' => 'setInstrumentTradeSpotFromGoLastProxiedRestRequest',
        'instrument_trade_spot_from_go_rest_uri_last_request_ts' => 'setInstrumentTradeSpotFromGoRestUriLastRequestTs',
        'instrument_trade_spot_from_go_rest_uri_last_response_ts' => 'setInstrumentTradeSpotFromGoRestUriLastResponseTs',
        'instrument_trade_spot_from_go_rest_uri_next_request_ts' => 'setInstrumentTradeSpotFromGoRestUriNextRequestTs',
        'instrument_trade_spot_from_polling_last_proxied_rest_request' => 'setInstrumentTradeSpotFromPollingLastProxiedRestRequest',
        'instrument_trade_spot_from_polling_rest_uri_last_request_ts' => 'setInstrumentTradeSpotFromPollingRestUriLastRequestTs',
        'instrument_trade_spot_from_polling_rest_uri_last_response_ts' => 'setInstrumentTradeSpotFromPollingRestUriLastResponseTs',
        'instrument_trade_spot_from_polling_rest_uri_next_request_ts' => 'setInstrumentTradeSpotFromPollingRestUriNextRequestTs',
        'instrument_trade_spot_from_streaming_last_proxied_rest_request' => 'setInstrumentTradeSpotFromStreamingLastProxiedRestRequest',
        'instrument_trade_spot_from_streaming_rest_uri_last_request_ts' => 'setInstrumentTradeSpotFromStreamingRestUriLastRequestTs',
        'instrument_trade_spot_from_streaming_rest_uri_last_response_ts' => 'setInstrumentTradeSpotFromStreamingRestUriLastResponseTs',
        'instrument_trade_spot_from_streaming_rest_uri_next_request_ts' => 'setInstrumentTradeSpotFromStreamingRestUriNextRequestTs',
        'instrument_trade_spot_is_ready_for_streaming_integration' => 'setInstrumentTradeSpotIsReadyForStreamingIntegration',
        'instrument_trade_spot_rest_uri' => 'setInstrumentTradeSpotRestUri',
        'instrument_trade_spot_rest_url' => 'setInstrumentTradeSpotRestUrl',
        'instrument_trade_spot_streaming_subscription' => 'setInstrumentTradeSpotStreamingSubscription',
        'last_concurrent_batch_of_trades_spot_ms' => 'setLastConcurrentBatchOfTradesSpotMs',
        'last_seen_on_blob_ts' => 'setLastSeenOnBlobTs',
        'last_seen_on_fix_ts' => 'setLastSeenOnFixTs',
        'last_seen_on_hardcoded_ts' => 'setLastSeenOnHardcodedTs',
        'last_seen_on_index_composition_ts' => 'setLastSeenOnIndexCompositionTs',
        'last_seen_on_nsq_ts' => 'setLastSeenOnNsqTs',
        'last_seen_on_polling_ts' => 'setLastSeenOnPollingTs',
        'last_seen_on_streaming_ts' => 'setLastSeenOnStreamingTs',
        'last_trade_spot_from_backfill' => 'setLastTradeSpotFromBackfill',
        'last_trade_spot_from_backfill_external' => 'setLastTradeSpotFromBackfillExternal',
        'last_trade_spot_from_blob' => 'setLastTradeSpotFromBlob',
        'last_trade_spot_from_blob_external' => 'setLastTradeSpotFromBlobExternal',
        'last_trade_spot_from_calculated' => 'setLastTradeSpotFromCalculated',
        'last_trade_spot_from_calculated_external' => 'setLastTradeSpotFromCalculatedExternal',
        'last_trade_spot_from_fix' => 'setLastTradeSpotFromFix',
        'last_trade_spot_from_fix_external' => 'setLastTradeSpotFromFixExternal',
        'last_trade_spot_from_go' => 'setLastTradeSpotFromGo',
        'last_trade_spot_from_go_external' => 'setLastTradeSpotFromGoExternal',
        'last_trade_spot_from_polling' => 'setLastTradeSpotFromPolling',
        'last_trade_spot_from_polling_external' => 'setLastTradeSpotFromPollingExternal',
        'last_trade_spot_from_streaming' => 'setLastTradeSpotFromStreaming',
        'last_trade_spot_from_streaming_external' => 'setLastTradeSpotFromStreamingExternal',
        'metadata_version' => 'setMetadataVersion',
        'processing_trades_from_blob_status' => 'setProcessingTradesFromBlobStatus',
        'total_trades_spot' => 'setTotalTradesSpot',
        'unstructured_trade_spot_from_backfill_internal_data' => 'setUnstructuredTradeSpotFromBackfillInternalData',
        'unstructured_trade_spot_from_blob_internal_data' => 'setUnstructuredTradeSpotFromBlobInternalData',
        'unstructured_trade_spot_from_calculated_internal_data' => 'setUnstructuredTradeSpotFromCalculatedInternalData',
        'unstructured_trade_spot_from_fix_internal_data' => 'setUnstructuredTradeSpotFromFixInternalData',
        'unstructured_trade_spot_from_go_internal_data' => 'setUnstructuredTradeSpotFromGoInternalData',
        'unstructured_trade_spot_from_polling_internal_data' => 'setUnstructuredTradeSpotFromPollingInternalData',
        'unstructured_trade_spot_from_streaming_internal_data' => 'setUnstructuredTradeSpotFromStreamingInternalData'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'first_seen_on_blob_ts' => 'getFirstSeenOnBlobTs',
        'first_seen_on_fix_ts' => 'getFirstSeenOnFixTs',
        'first_seen_on_hardcoded_ts' => 'getFirstSeenOnHardcodedTs',
        'first_seen_on_index_composition_ts' => 'getFirstSeenOnIndexCompositionTs',
        'first_seen_on_nsq_ts' => 'getFirstSeenOnNsqTs',
        'first_seen_on_polling_ts' => 'getFirstSeenOnPollingTs',
        'first_seen_on_streaming_ts' => 'getFirstSeenOnStreamingTs',
        'first_trade_spot_from_backfill' => 'getFirstTradeSpotFromBackfill',
        'first_trade_spot_from_backfill_external' => 'getFirstTradeSpotFromBackfillExternal',
        'first_trade_spot_from_blob' => 'getFirstTradeSpotFromBlob',
        'first_trade_spot_from_blob_external' => 'getFirstTradeSpotFromBlobExternal',
        'first_trade_spot_from_calculated' => 'getFirstTradeSpotFromCalculated',
        'first_trade_spot_from_calculated_external' => 'getFirstTradeSpotFromCalculatedExternal',
        'first_trade_spot_from_fix' => 'getFirstTradeSpotFromFix',
        'first_trade_spot_from_fix_external' => 'getFirstTradeSpotFromFixExternal',
        'first_trade_spot_from_go' => 'getFirstTradeSpotFromGo',
        'first_trade_spot_from_go_external' => 'getFirstTradeSpotFromGoExternal',
        'first_trade_spot_from_polling' => 'getFirstTradeSpotFromPolling',
        'first_trade_spot_from_polling_external' => 'getFirstTradeSpotFromPollingExternal',
        'first_trade_spot_from_streaming' => 'getFirstTradeSpotFromStreaming',
        'first_trade_spot_from_streaming_external' => 'getFirstTradeSpotFromStreamingExternal',
        'host_migration_destination' => 'getHostMigrationDestination',
        'host_migration_source' => 'getHostMigrationSource',
        'host_migration_status' => 'getHostMigrationStatus',
        'instrument' => 'getInstrument',
        'instrument_external_data' => 'getInstrumentExternalData',
        'instrument_mapping' => 'getInstrumentMapping',
        'instrument_mapping_history' => 'getInstrumentMappingHistory',
        'instrument_source_backfill' => 'getInstrumentSourceBackfill',
        'instrument_source_blob' => 'getInstrumentSourceBlob',
        'instrument_source_calculated' => 'getInstrumentSourceCalculated',
        'instrument_source_fix' => 'getInstrumentSourceFix',
        'instrument_source_go' => 'getInstrumentSourceGo',
        'instrument_source_polling' => 'getInstrumentSourcePolling',
        'instrument_source_streaming' => 'getInstrumentSourceStreaming',
        'instrument_status' => 'getInstrumentStatus',
        'instrument_trade_spot_from_backfill_last_proxied_rest_request' => 'getInstrumentTradeSpotFromBackfillLastProxiedRestRequest',
        'instrument_trade_spot_from_backfill_rest_uri_last_request_ts' => 'getInstrumentTradeSpotFromBackfillRestUriLastRequestTs',
        'instrument_trade_spot_from_backfill_rest_uri_last_response_ts' => 'getInstrumentTradeSpotFromBackfillRestUriLastResponseTs',
        'instrument_trade_spot_from_backfill_rest_uri_next_request_ts' => 'getInstrumentTradeSpotFromBackfillRestUriNextRequestTs',
        'instrument_trade_spot_from_blob_last_proxied_rest_request' => 'getInstrumentTradeSpotFromBlobLastProxiedRestRequest',
        'instrument_trade_spot_from_blob_rest_uri_last_request_ts' => 'getInstrumentTradeSpotFromBlobRestUriLastRequestTs',
        'instrument_trade_spot_from_blob_rest_uri_last_response_ts' => 'getInstrumentTradeSpotFromBlobRestUriLastResponseTs',
        'instrument_trade_spot_from_blob_rest_uri_next_request_ts' => 'getInstrumentTradeSpotFromBlobRestUriNextRequestTs',
        'instrument_trade_spot_from_calculated_last_proxied_rest_request' => 'getInstrumentTradeSpotFromCalculatedLastProxiedRestRequest',
        'instrument_trade_spot_from_calculated_rest_uri_last_request_ts' => 'getInstrumentTradeSpotFromCalculatedRestUriLastRequestTs',
        'instrument_trade_spot_from_calculated_rest_uri_last_response_ts' => 'getInstrumentTradeSpotFromCalculatedRestUriLastResponseTs',
        'instrument_trade_spot_from_calculated_rest_uri_next_request_ts' => 'getInstrumentTradeSpotFromCalculatedRestUriNextRequestTs',
        'instrument_trade_spot_from_fix_last_proxied_rest_request' => 'getInstrumentTradeSpotFromFixLastProxiedRestRequest',
        'instrument_trade_spot_from_fix_rest_uri_last_request_ts' => 'getInstrumentTradeSpotFromFixRestUriLastRequestTs',
        'instrument_trade_spot_from_fix_rest_uri_last_response_ts' => 'getInstrumentTradeSpotFromFixRestUriLastResponseTs',
        'instrument_trade_spot_from_fix_rest_uri_next_request_ts' => 'getInstrumentTradeSpotFromFixRestUriNextRequestTs',
        'instrument_trade_spot_from_go_last_proxied_rest_request' => 'getInstrumentTradeSpotFromGoLastProxiedRestRequest',
        'instrument_trade_spot_from_go_rest_uri_last_request_ts' => 'getInstrumentTradeSpotFromGoRestUriLastRequestTs',
        'instrument_trade_spot_from_go_rest_uri_last_response_ts' => 'getInstrumentTradeSpotFromGoRestUriLastResponseTs',
        'instrument_trade_spot_from_go_rest_uri_next_request_ts' => 'getInstrumentTradeSpotFromGoRestUriNextRequestTs',
        'instrument_trade_spot_from_polling_last_proxied_rest_request' => 'getInstrumentTradeSpotFromPollingLastProxiedRestRequest',
        'instrument_trade_spot_from_polling_rest_uri_last_request_ts' => 'getInstrumentTradeSpotFromPollingRestUriLastRequestTs',
        'instrument_trade_spot_from_polling_rest_uri_last_response_ts' => 'getInstrumentTradeSpotFromPollingRestUriLastResponseTs',
        'instrument_trade_spot_from_polling_rest_uri_next_request_ts' => 'getInstrumentTradeSpotFromPollingRestUriNextRequestTs',
        'instrument_trade_spot_from_streaming_last_proxied_rest_request' => 'getInstrumentTradeSpotFromStreamingLastProxiedRestRequest',
        'instrument_trade_spot_from_streaming_rest_uri_last_request_ts' => 'getInstrumentTradeSpotFromStreamingRestUriLastRequestTs',
        'instrument_trade_spot_from_streaming_rest_uri_last_response_ts' => 'getInstrumentTradeSpotFromStreamingRestUriLastResponseTs',
        'instrument_trade_spot_from_streaming_rest_uri_next_request_ts' => 'getInstrumentTradeSpotFromStreamingRestUriNextRequestTs',
        'instrument_trade_spot_is_ready_for_streaming_integration' => 'getInstrumentTradeSpotIsReadyForStreamingIntegration',
        'instrument_trade_spot_rest_uri' => 'getInstrumentTradeSpotRestUri',
        'instrument_trade_spot_rest_url' => 'getInstrumentTradeSpotRestUrl',
        'instrument_trade_spot_streaming_subscription' => 'getInstrumentTradeSpotStreamingSubscription',
        'last_concurrent_batch_of_trades_spot_ms' => 'getLastConcurrentBatchOfTradesSpotMs',
        'last_seen_on_blob_ts' => 'getLastSeenOnBlobTs',
        'last_seen_on_fix_ts' => 'getLastSeenOnFixTs',
        'last_seen_on_hardcoded_ts' => 'getLastSeenOnHardcodedTs',
        'last_seen_on_index_composition_ts' => 'getLastSeenOnIndexCompositionTs',
        'last_seen_on_nsq_ts' => 'getLastSeenOnNsqTs',
        'last_seen_on_polling_ts' => 'getLastSeenOnPollingTs',
        'last_seen_on_streaming_ts' => 'getLastSeenOnStreamingTs',
        'last_trade_spot_from_backfill' => 'getLastTradeSpotFromBackfill',
        'last_trade_spot_from_backfill_external' => 'getLastTradeSpotFromBackfillExternal',
        'last_trade_spot_from_blob' => 'getLastTradeSpotFromBlob',
        'last_trade_spot_from_blob_external' => 'getLastTradeSpotFromBlobExternal',
        'last_trade_spot_from_calculated' => 'getLastTradeSpotFromCalculated',
        'last_trade_spot_from_calculated_external' => 'getLastTradeSpotFromCalculatedExternal',
        'last_trade_spot_from_fix' => 'getLastTradeSpotFromFix',
        'last_trade_spot_from_fix_external' => 'getLastTradeSpotFromFixExternal',
        'last_trade_spot_from_go' => 'getLastTradeSpotFromGo',
        'last_trade_spot_from_go_external' => 'getLastTradeSpotFromGoExternal',
        'last_trade_spot_from_polling' => 'getLastTradeSpotFromPolling',
        'last_trade_spot_from_polling_external' => 'getLastTradeSpotFromPollingExternal',
        'last_trade_spot_from_streaming' => 'getLastTradeSpotFromStreaming',
        'last_trade_spot_from_streaming_external' => 'getLastTradeSpotFromStreamingExternal',
        'metadata_version' => 'getMetadataVersion',
        'processing_trades_from_blob_status' => 'getProcessingTradesFromBlobStatus',
        'total_trades_spot' => 'getTotalTradesSpot',
        'unstructured_trade_spot_from_backfill_internal_data' => 'getUnstructuredTradeSpotFromBackfillInternalData',
        'unstructured_trade_spot_from_blob_internal_data' => 'getUnstructuredTradeSpotFromBlobInternalData',
        'unstructured_trade_spot_from_calculated_internal_data' => 'getUnstructuredTradeSpotFromCalculatedInternalData',
        'unstructured_trade_spot_from_fix_internal_data' => 'getUnstructuredTradeSpotFromFixInternalData',
        'unstructured_trade_spot_from_go_internal_data' => 'getUnstructuredTradeSpotFromGoInternalData',
        'unstructured_trade_spot_from_polling_internal_data' => 'getUnstructuredTradeSpotFromPollingInternalData',
        'unstructured_trade_spot_from_streaming_internal_data' => 'getUnstructuredTradeSpotFromStreamingInternalData'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('first_seen_on_blob_ts', $data ?? [], null);
        $this->setIfExists('first_seen_on_fix_ts', $data ?? [], null);
        $this->setIfExists('first_seen_on_hardcoded_ts', $data ?? [], null);
        $this->setIfExists('first_seen_on_index_composition_ts', $data ?? [], null);
        $this->setIfExists('first_seen_on_nsq_ts', $data ?? [], null);
        $this->setIfExists('first_seen_on_polling_ts', $data ?? [], null);
        $this->setIfExists('first_seen_on_streaming_ts', $data ?? [], null);
        $this->setIfExists('first_trade_spot_from_backfill', $data ?? [], null);
        $this->setIfExists('first_trade_spot_from_backfill_external', $data ?? [], null);
        $this->setIfExists('first_trade_spot_from_blob', $data ?? [], null);
        $this->setIfExists('first_trade_spot_from_blob_external', $data ?? [], null);
        $this->setIfExists('first_trade_spot_from_calculated', $data ?? [], null);
        $this->setIfExists('first_trade_spot_from_calculated_external', $data ?? [], null);
        $this->setIfExists('first_trade_spot_from_fix', $data ?? [], null);
        $this->setIfExists('first_trade_spot_from_fix_external', $data ?? [], null);
        $this->setIfExists('first_trade_spot_from_go', $data ?? [], null);
        $this->setIfExists('first_trade_spot_from_go_external', $data ?? [], null);
        $this->setIfExists('first_trade_spot_from_polling', $data ?? [], null);
        $this->setIfExists('first_trade_spot_from_polling_external', $data ?? [], null);
        $this->setIfExists('first_trade_spot_from_streaming', $data ?? [], null);
        $this->setIfExists('first_trade_spot_from_streaming_external', $data ?? [], null);
        $this->setIfExists('host_migration_destination', $data ?? [], null);
        $this->setIfExists('host_migration_source', $data ?? [], null);
        $this->setIfExists('host_migration_status', $data ?? [], null);
        $this->setIfExists('instrument', $data ?? [], null);
        $this->setIfExists('instrument_external_data', $data ?? [], null);
        $this->setIfExists('instrument_mapping', $data ?? [], null);
        $this->setIfExists('instrument_mapping_history', $data ?? [], null);
        $this->setIfExists('instrument_source_backfill', $data ?? [], null);
        $this->setIfExists('instrument_source_blob', $data ?? [], null);
        $this->setIfExists('instrument_source_calculated', $data ?? [], null);
        $this->setIfExists('instrument_source_fix', $data ?? [], null);
        $this->setIfExists('instrument_source_go', $data ?? [], null);
        $this->setIfExists('instrument_source_polling', $data ?? [], null);
        $this->setIfExists('instrument_source_streaming', $data ?? [], null);
        $this->setIfExists('instrument_status', $data ?? [], 'ACTIVE');
        $this->setIfExists('instrument_trade_spot_from_backfill_last_proxied_rest_request', $data ?? [], null);
        $this->setIfExists('instrument_trade_spot_from_backfill_rest_uri_last_request_ts', $data ?? [], null);
        $this->setIfExists('instrument_trade_spot_from_backfill_rest_uri_last_response_ts', $data ?? [], null);
        $this->setIfExists('instrument_trade_spot_from_backfill_rest_uri_next_request_ts', $data ?? [], null);
        $this->setIfExists('instrument_trade_spot_from_blob_last_proxied_rest_request', $data ?? [], null);
        $this->setIfExists('instrument_trade_spot_from_blob_rest_uri_last_request_ts', $data ?? [], null);
        $this->setIfExists('instrument_trade_spot_from_blob_rest_uri_last_response_ts', $data ?? [], null);
        $this->setIfExists('instrument_trade_spot_from_blob_rest_uri_next_request_ts', $data ?? [], null);
        $this->setIfExists('instrument_trade_spot_from_calculated_last_proxied_rest_request', $data ?? [], null);
        $this->setIfExists('instrument_trade_spot_from_calculated_rest_uri_last_request_ts', $data ?? [], null);
        $this->setIfExists('instrument_trade_spot_from_calculated_rest_uri_last_response_ts', $data ?? [], null);
        $this->setIfExists('instrument_trade_spot_from_calculated_rest_uri_next_request_ts', $data ?? [], null);
        $this->setIfExists('instrument_trade_spot_from_fix_last_proxied_rest_request', $data ?? [], null);
        $this->setIfExists('instrument_trade_spot_from_fix_rest_uri_last_request_ts', $data ?? [], null);
        $this->setIfExists('instrument_trade_spot_from_fix_rest_uri_last_response_ts', $data ?? [], null);
        $this->setIfExists('instrument_trade_spot_from_fix_rest_uri_next_request_ts', $data ?? [], null);
        $this->setIfExists('instrument_trade_spot_from_go_last_proxied_rest_request', $data ?? [], null);
        $this->setIfExists('instrument_trade_spot_from_go_rest_uri_last_request_ts', $data ?? [], null);
        $this->setIfExists('instrument_trade_spot_from_go_rest_uri_last_response_ts', $data ?? [], null);
        $this->setIfExists('instrument_trade_spot_from_go_rest_uri_next_request_ts', $data ?? [], null);
        $this->setIfExists('instrument_trade_spot_from_polling_last_proxied_rest_request', $data ?? [], null);
        $this->setIfExists('instrument_trade_spot_from_polling_rest_uri_last_request_ts', $data ?? [], null);
        $this->setIfExists('instrument_trade_spot_from_polling_rest_uri_last_response_ts', $data ?? [], null);
        $this->setIfExists('instrument_trade_spot_from_polling_rest_uri_next_request_ts', $data ?? [], null);
        $this->setIfExists('instrument_trade_spot_from_streaming_last_proxied_rest_request', $data ?? [], null);
        $this->setIfExists('instrument_trade_spot_from_streaming_rest_uri_last_request_ts', $data ?? [], null);
        $this->setIfExists('instrument_trade_spot_from_streaming_rest_uri_last_response_ts', $data ?? [], null);
        $this->setIfExists('instrument_trade_spot_from_streaming_rest_uri_next_request_ts', $data ?? [], null);
        $this->setIfExists('instrument_trade_spot_is_ready_for_streaming_integration', $data ?? [], false);
        $this->setIfExists('instrument_trade_spot_rest_uri', $data ?? [], null);
        $this->setIfExists('instrument_trade_spot_rest_url', $data ?? [], null);
        $this->setIfExists('instrument_trade_spot_streaming_subscription', $data ?? [], null);
        $this->setIfExists('last_concurrent_batch_of_trades_spot_ms', $data ?? [], null);
        $this->setIfExists('last_seen_on_blob_ts', $data ?? [], null);
        $this->setIfExists('last_seen_on_fix_ts', $data ?? [], null);
        $this->setIfExists('last_seen_on_hardcoded_ts', $data ?? [], null);
        $this->setIfExists('last_seen_on_index_composition_ts', $data ?? [], null);
        $this->setIfExists('last_seen_on_nsq_ts', $data ?? [], null);
        $this->setIfExists('last_seen_on_polling_ts', $data ?? [], null);
        $this->setIfExists('last_seen_on_streaming_ts', $data ?? [], null);
        $this->setIfExists('last_trade_spot_from_backfill', $data ?? [], null);
        $this->setIfExists('last_trade_spot_from_backfill_external', $data ?? [], null);
        $this->setIfExists('last_trade_spot_from_blob', $data ?? [], null);
        $this->setIfExists('last_trade_spot_from_blob_external', $data ?? [], null);
        $this->setIfExists('last_trade_spot_from_calculated', $data ?? [], null);
        $this->setIfExists('last_trade_spot_from_calculated_external', $data ?? [], null);
        $this->setIfExists('last_trade_spot_from_fix', $data ?? [], null);
        $this->setIfExists('last_trade_spot_from_fix_external', $data ?? [], null);
        $this->setIfExists('last_trade_spot_from_go', $data ?? [], null);
        $this->setIfExists('last_trade_spot_from_go_external', $data ?? [], null);
        $this->setIfExists('last_trade_spot_from_polling', $data ?? [], null);
        $this->setIfExists('last_trade_spot_from_polling_external', $data ?? [], null);
        $this->setIfExists('last_trade_spot_from_streaming', $data ?? [], null);
        $this->setIfExists('last_trade_spot_from_streaming_external', $data ?? [], null);
        $this->setIfExists('metadata_version', $data ?? [], 4);
        $this->setIfExists('processing_trades_from_blob_status', $data ?? [], null);
        $this->setIfExists('total_trades_spot', $data ?? [], null);
        $this->setIfExists('unstructured_trade_spot_from_backfill_internal_data', $data ?? [], null);
        $this->setIfExists('unstructured_trade_spot_from_blob_internal_data', $data ?? [], null);
        $this->setIfExists('unstructured_trade_spot_from_calculated_internal_data', $data ?? [], null);
        $this->setIfExists('unstructured_trade_spot_from_fix_internal_data', $data ?? [], null);
        $this->setIfExists('unstructured_trade_spot_from_go_internal_data', $data ?? [], null);
        $this->setIfExists('unstructured_trade_spot_from_polling_internal_data', $data ?? [], null);
        $this->setIfExists('unstructured_trade_spot_from_streaming_internal_data', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets first_seen_on_blob_ts
     *
     * @return int|null
     */
    public function getFirstSeenOnBlobTs()
    {
        return $this->container['first_seen_on_blob_ts'];
    }

    /**
     * Sets first_seen_on_blob_ts
     *
     * @param int|null $first_seen_on_blob_ts This is the first time instrument was seen on instrumentListSourceType BLOB.
     *
     * @return self
     */
    public function setFirstSeenOnBlobTs($first_seen_on_blob_ts)
    {
        if (is_null($first_seen_on_blob_ts)) {
            throw new \InvalidArgumentException('non-nullable first_seen_on_blob_ts cannot be null');
        }
        $this->container['first_seen_on_blob_ts'] = $first_seen_on_blob_ts;

        return $this;
    }

    /**
     * Gets first_seen_on_fix_ts
     *
     * @return int|null
     */
    public function getFirstSeenOnFixTs()
    {
        return $this->container['first_seen_on_fix_ts'];
    }

    /**
     * Sets first_seen_on_fix_ts
     *
     * @param int|null $first_seen_on_fix_ts This is the first time instrument was seen on instrumentListSourceType FIX.
     *
     * @return self
     */
    public function setFirstSeenOnFixTs($first_seen_on_fix_ts)
    {
        if (is_null($first_seen_on_fix_ts)) {
            throw new \InvalidArgumentException('non-nullable first_seen_on_fix_ts cannot be null');
        }
        $this->container['first_seen_on_fix_ts'] = $first_seen_on_fix_ts;

        return $this;
    }

    /**
     * Gets first_seen_on_hardcoded_ts
     *
     * @return int|null
     */
    public function getFirstSeenOnHardcodedTs()
    {
        return $this->container['first_seen_on_hardcoded_ts'];
    }

    /**
     * Sets first_seen_on_hardcoded_ts
     *
     * @param int|null $first_seen_on_hardcoded_ts This is the first time instrument was seen on instrumentListSourceType HARDCODED.
     *
     * @return self
     */
    public function setFirstSeenOnHardcodedTs($first_seen_on_hardcoded_ts)
    {
        if (is_null($first_seen_on_hardcoded_ts)) {
            throw new \InvalidArgumentException('non-nullable first_seen_on_hardcoded_ts cannot be null');
        }
        $this->container['first_seen_on_hardcoded_ts'] = $first_seen_on_hardcoded_ts;

        return $this;
    }

    /**
     * Gets first_seen_on_index_composition_ts
     *
     * @return int|null
     */
    public function getFirstSeenOnIndexCompositionTs()
    {
        return $this->container['first_seen_on_index_composition_ts'];
    }

    /**
     * Sets first_seen_on_index_composition_ts
     *
     * @param int|null $first_seen_on_index_composition_ts This is the first time instrument was seen on instrumentListSourceType INDEX_COMPOSITION.
     *
     * @return self
     */
    public function setFirstSeenOnIndexCompositionTs($first_seen_on_index_composition_ts)
    {
        if (is_null($first_seen_on_index_composition_ts)) {
            throw new \InvalidArgumentException('non-nullable first_seen_on_index_composition_ts cannot be null');
        }
        $this->container['first_seen_on_index_composition_ts'] = $first_seen_on_index_composition_ts;

        return $this;
    }

    /**
     * Gets first_seen_on_nsq_ts
     *
     * @return int|null
     */
    public function getFirstSeenOnNsqTs()
    {
        return $this->container['first_seen_on_nsq_ts'];
    }

    /**
     * Sets first_seen_on_nsq_ts
     *
     * @param int|null $first_seen_on_nsq_ts This is the first time instrument was seen on instrumentListSourceType NSQ.
     *
     * @return self
     */
    public function setFirstSeenOnNsqTs($first_seen_on_nsq_ts)
    {
        if (is_null($first_seen_on_nsq_ts)) {
            throw new \InvalidArgumentException('non-nullable first_seen_on_nsq_ts cannot be null');
        }
        $this->container['first_seen_on_nsq_ts'] = $first_seen_on_nsq_ts;

        return $this;
    }

    /**
     * Gets first_seen_on_polling_ts
     *
     * @return int|null
     */
    public function getFirstSeenOnPollingTs()
    {
        return $this->container['first_seen_on_polling_ts'];
    }

    /**
     * Sets first_seen_on_polling_ts
     *
     * @param int|null $first_seen_on_polling_ts This is the first time instrument was seen on instrumentListSourceType POLLING.
     *
     * @return self
     */
    public function setFirstSeenOnPollingTs($first_seen_on_polling_ts)
    {
        if (is_null($first_seen_on_polling_ts)) {
            throw new \InvalidArgumentException('non-nullable first_seen_on_polling_ts cannot be null');
        }
        $this->container['first_seen_on_polling_ts'] = $first_seen_on_polling_ts;

        return $this;
    }

    /**
     * Gets first_seen_on_streaming_ts
     *
     * @return int|null
     */
    public function getFirstSeenOnStreamingTs()
    {
        return $this->container['first_seen_on_streaming_ts'];
    }

    /**
     * Sets first_seen_on_streaming_ts
     *
     * @param int|null $first_seen_on_streaming_ts This is the first time instrument was seen on instrumentListSourceType STREAMING.
     *
     * @return self
     */
    public function setFirstSeenOnStreamingTs($first_seen_on_streaming_ts)
    {
        if (is_null($first_seen_on_streaming_ts)) {
            throw new \InvalidArgumentException('non-nullable first_seen_on_streaming_ts cannot be null');
        }
        $this->container['first_seen_on_streaming_ts'] = $first_seen_on_streaming_ts;

        return $this;
    }

    /**
     * Gets first_trade_spot_from_backfill
     *
     * @return object|null
     */
    public function getFirstTradeSpotFromBackfill()
    {
        return $this->container['first_trade_spot_from_backfill'];
    }

    /**
     * Sets first_trade_spot_from_backfill
     *
     * @param object|null $first_trade_spot_from_backfill This is the first TRADE_SPOT that we have seen on the specific source type in internal format.
     *
     * @return self
     */
    public function setFirstTradeSpotFromBackfill($first_trade_spot_from_backfill)
    {
        if (is_null($first_trade_spot_from_backfill)) {
            throw new \InvalidArgumentException('non-nullable first_trade_spot_from_backfill cannot be null');
        }
        $this->container['first_trade_spot_from_backfill'] = $first_trade_spot_from_backfill;

        return $this;
    }

    /**
     * Gets first_trade_spot_from_backfill_external
     *
     * @return object|null
     */
    public function getFirstTradeSpotFromBackfillExternal()
    {
        return $this->container['first_trade_spot_from_backfill_external'];
    }

    /**
     * Sets first_trade_spot_from_backfill_external
     *
     * @param object|null $first_trade_spot_from_backfill_external This is the first TRADE_SPOT that we have seen on the specific source type in external format.
     *
     * @return self
     */
    public function setFirstTradeSpotFromBackfillExternal($first_trade_spot_from_backfill_external)
    {
        if (is_null($first_trade_spot_from_backfill_external)) {
            throw new \InvalidArgumentException('non-nullable first_trade_spot_from_backfill_external cannot be null');
        }
        $this->container['first_trade_spot_from_backfill_external'] = $first_trade_spot_from_backfill_external;

        return $this;
    }

    /**
     * Gets first_trade_spot_from_blob
     *
     * @return object|null
     */
    public function getFirstTradeSpotFromBlob()
    {
        return $this->container['first_trade_spot_from_blob'];
    }

    /**
     * Sets first_trade_spot_from_blob
     *
     * @param object|null $first_trade_spot_from_blob This is the first TRADE_SPOT that we have seen on the specific source type in internal format.
     *
     * @return self
     */
    public function setFirstTradeSpotFromBlob($first_trade_spot_from_blob)
    {
        if (is_null($first_trade_spot_from_blob)) {
            throw new \InvalidArgumentException('non-nullable first_trade_spot_from_blob cannot be null');
        }
        $this->container['first_trade_spot_from_blob'] = $first_trade_spot_from_blob;

        return $this;
    }

    /**
     * Gets first_trade_spot_from_blob_external
     *
     * @return object|null
     */
    public function getFirstTradeSpotFromBlobExternal()
    {
        return $this->container['first_trade_spot_from_blob_external'];
    }

    /**
     * Sets first_trade_spot_from_blob_external
     *
     * @param object|null $first_trade_spot_from_blob_external This is the first TRADE_SPOT that we have seen on the specific source type in external format.
     *
     * @return self
     */
    public function setFirstTradeSpotFromBlobExternal($first_trade_spot_from_blob_external)
    {
        if (is_null($first_trade_spot_from_blob_external)) {
            throw new \InvalidArgumentException('non-nullable first_trade_spot_from_blob_external cannot be null');
        }
        $this->container['first_trade_spot_from_blob_external'] = $first_trade_spot_from_blob_external;

        return $this;
    }

    /**
     * Gets first_trade_spot_from_calculated
     *
     * @return object|null
     */
    public function getFirstTradeSpotFromCalculated()
    {
        return $this->container['first_trade_spot_from_calculated'];
    }

    /**
     * Sets first_trade_spot_from_calculated
     *
     * @param object|null $first_trade_spot_from_calculated This is the first TRADE_SPOT that we have seen on the specific source type in internal format.
     *
     * @return self
     */
    public function setFirstTradeSpotFromCalculated($first_trade_spot_from_calculated)
    {
        if (is_null($first_trade_spot_from_calculated)) {
            throw new \InvalidArgumentException('non-nullable first_trade_spot_from_calculated cannot be null');
        }
        $this->container['first_trade_spot_from_calculated'] = $first_trade_spot_from_calculated;

        return $this;
    }

    /**
     * Gets first_trade_spot_from_calculated_external
     *
     * @return object|null
     */
    public function getFirstTradeSpotFromCalculatedExternal()
    {
        return $this->container['first_trade_spot_from_calculated_external'];
    }

    /**
     * Sets first_trade_spot_from_calculated_external
     *
     * @param object|null $first_trade_spot_from_calculated_external This is the first TRADE_SPOT that we have seen on the specific source type in external format.
     *
     * @return self
     */
    public function setFirstTradeSpotFromCalculatedExternal($first_trade_spot_from_calculated_external)
    {
        if (is_null($first_trade_spot_from_calculated_external)) {
            throw new \InvalidArgumentException('non-nullable first_trade_spot_from_calculated_external cannot be null');
        }
        $this->container['first_trade_spot_from_calculated_external'] = $first_trade_spot_from_calculated_external;

        return $this;
    }

    /**
     * Gets first_trade_spot_from_fix
     *
     * @return object|null
     */
    public function getFirstTradeSpotFromFix()
    {
        return $this->container['first_trade_spot_from_fix'];
    }

    /**
     * Sets first_trade_spot_from_fix
     *
     * @param object|null $first_trade_spot_from_fix This is the first TRADE_SPOT that we have seen on the specific source type in internal format.
     *
     * @return self
     */
    public function setFirstTradeSpotFromFix($first_trade_spot_from_fix)
    {
        if (is_null($first_trade_spot_from_fix)) {
            throw new \InvalidArgumentException('non-nullable first_trade_spot_from_fix cannot be null');
        }
        $this->container['first_trade_spot_from_fix'] = $first_trade_spot_from_fix;

        return $this;
    }

    /**
     * Gets first_trade_spot_from_fix_external
     *
     * @return object|null
     */
    public function getFirstTradeSpotFromFixExternal()
    {
        return $this->container['first_trade_spot_from_fix_external'];
    }

    /**
     * Sets first_trade_spot_from_fix_external
     *
     * @param object|null $first_trade_spot_from_fix_external This is the first TRADE_SPOT that we have seen on the specific source type in external format.
     *
     * @return self
     */
    public function setFirstTradeSpotFromFixExternal($first_trade_spot_from_fix_external)
    {
        if (is_null($first_trade_spot_from_fix_external)) {
            throw new \InvalidArgumentException('non-nullable first_trade_spot_from_fix_external cannot be null');
        }
        $this->container['first_trade_spot_from_fix_external'] = $first_trade_spot_from_fix_external;

        return $this;
    }

    /**
     * Gets first_trade_spot_from_go
     *
     * @return object|null
     */
    public function getFirstTradeSpotFromGo()
    {
        return $this->container['first_trade_spot_from_go'];
    }

    /**
     * Sets first_trade_spot_from_go
     *
     * @param object|null $first_trade_spot_from_go This is the first TRADE_SPOT that we have seen on the specific source type in internal format.
     *
     * @return self
     */
    public function setFirstTradeSpotFromGo($first_trade_spot_from_go)
    {
        if (is_null($first_trade_spot_from_go)) {
            throw new \InvalidArgumentException('non-nullable first_trade_spot_from_go cannot be null');
        }
        $this->container['first_trade_spot_from_go'] = $first_trade_spot_from_go;

        return $this;
    }

    /**
     * Gets first_trade_spot_from_go_external
     *
     * @return object|null
     */
    public function getFirstTradeSpotFromGoExternal()
    {
        return $this->container['first_trade_spot_from_go_external'];
    }

    /**
     * Sets first_trade_spot_from_go_external
     *
     * @param object|null $first_trade_spot_from_go_external This is the first TRADE_SPOT that we have seen on the specific source type in external format.
     *
     * @return self
     */
    public function setFirstTradeSpotFromGoExternal($first_trade_spot_from_go_external)
    {
        if (is_null($first_trade_spot_from_go_external)) {
            throw new \InvalidArgumentException('non-nullable first_trade_spot_from_go_external cannot be null');
        }
        $this->container['first_trade_spot_from_go_external'] = $first_trade_spot_from_go_external;

        return $this;
    }

    /**
     * Gets first_trade_spot_from_polling
     *
     * @return object|null
     */
    public function getFirstTradeSpotFromPolling()
    {
        return $this->container['first_trade_spot_from_polling'];
    }

    /**
     * Sets first_trade_spot_from_polling
     *
     * @param object|null $first_trade_spot_from_polling This is the first TRADE_SPOT that we have seen on the specific source type in internal format.
     *
     * @return self
     */
    public function setFirstTradeSpotFromPolling($first_trade_spot_from_polling)
    {
        if (is_null($first_trade_spot_from_polling)) {
            throw new \InvalidArgumentException('non-nullable first_trade_spot_from_polling cannot be null');
        }
        $this->container['first_trade_spot_from_polling'] = $first_trade_spot_from_polling;

        return $this;
    }

    /**
     * Gets first_trade_spot_from_polling_external
     *
     * @return object|null
     */
    public function getFirstTradeSpotFromPollingExternal()
    {
        return $this->container['first_trade_spot_from_polling_external'];
    }

    /**
     * Sets first_trade_spot_from_polling_external
     *
     * @param object|null $first_trade_spot_from_polling_external This is the first TRADE_SPOT that we have seen on the specific source type in external format.
     *
     * @return self
     */
    public function setFirstTradeSpotFromPollingExternal($first_trade_spot_from_polling_external)
    {
        if (is_null($first_trade_spot_from_polling_external)) {
            throw new \InvalidArgumentException('non-nullable first_trade_spot_from_polling_external cannot be null');
        }
        $this->container['first_trade_spot_from_polling_external'] = $first_trade_spot_from_polling_external;

        return $this;
    }

    /**
     * Gets first_trade_spot_from_streaming
     *
     * @return object|null
     */
    public function getFirstTradeSpotFromStreaming()
    {
        return $this->container['first_trade_spot_from_streaming'];
    }

    /**
     * Sets first_trade_spot_from_streaming
     *
     * @param object|null $first_trade_spot_from_streaming This is the first TRADE_SPOT that we have seen on the specific source type in internal format.
     *
     * @return self
     */
    public function setFirstTradeSpotFromStreaming($first_trade_spot_from_streaming)
    {
        if (is_null($first_trade_spot_from_streaming)) {
            throw new \InvalidArgumentException('non-nullable first_trade_spot_from_streaming cannot be null');
        }
        $this->container['first_trade_spot_from_streaming'] = $first_trade_spot_from_streaming;

        return $this;
    }

    /**
     * Gets first_trade_spot_from_streaming_external
     *
     * @return object|null
     */
    public function getFirstTradeSpotFromStreamingExternal()
    {
        return $this->container['first_trade_spot_from_streaming_external'];
    }

    /**
     * Sets first_trade_spot_from_streaming_external
     *
     * @param object|null $first_trade_spot_from_streaming_external This is the first TRADE_SPOT that we have seen on the specific source type in external format.
     *
     * @return self
     */
    public function setFirstTradeSpotFromStreamingExternal($first_trade_spot_from_streaming_external)
    {
        if (is_null($first_trade_spot_from_streaming_external)) {
            throw new \InvalidArgumentException('non-nullable first_trade_spot_from_streaming_external cannot be null');
        }
        $this->container['first_trade_spot_from_streaming_external'] = $first_trade_spot_from_streaming_external;

        return $this;
    }

    /**
     * Gets host_migration_destination
     *
     * @return string|null
     */
    public function getHostMigrationDestination()
    {
        return $this->container['host_migration_destination'];
    }

    /**
     * Sets host_migration_destination
     *
     * @param string|null $host_migration_destination The migration destination vm hostname.
     *
     * @return self
     */
    public function setHostMigrationDestination($host_migration_destination)
    {
        if (is_null($host_migration_destination)) {
            throw new \InvalidArgumentException('non-nullable host_migration_destination cannot be null');
        }
        $this->container['host_migration_destination'] = $host_migration_destination;

        return $this;
    }

    /**
     * Gets host_migration_source
     *
     * @return string|null
     */
    public function getHostMigrationSource()
    {
        return $this->container['host_migration_source'];
    }

    /**
     * Sets host_migration_source
     *
     * @param string|null $host_migration_source The migration source vm hostname.
     *
     * @return self
     */
    public function setHostMigrationSource($host_migration_source)
    {
        if (is_null($host_migration_source)) {
            throw new \InvalidArgumentException('non-nullable host_migration_source cannot be null');
        }
        $this->container['host_migration_source'] = $host_migration_source;

        return $this;
    }

    /**
     * Gets host_migration_status
     *
     * @return string|null
     */
    public function getHostMigrationStatus()
    {
        return $this->container['host_migration_status'];
    }

    /**
     * Sets host_migration_status
     *
     * @param string|null $host_migration_status The migration status of the symbol, we only poll / stream / connect empty or SETTLED
     *
     * @return self
     */
    public function setHostMigrationStatus($host_migration_status)
    {
        if (is_null($host_migration_status)) {
            throw new \InvalidArgumentException('non-nullable host_migration_status cannot be null');
        }
        $this->container['host_migration_status'] = $host_migration_status;

        return $this;
    }

    /**
     * Gets instrument
     *
     * @return string|null
     */
    public function getInstrument()
    {
        return $this->container['instrument'];
    }

    /**
     * Sets instrument
     *
     * @param string|null $instrument The instrument ID as it is on the exchange with small modifications - we do not allow the following characters inside isntrument ids: ,/&?
     *
     * @return self
     */
    public function setInstrument($instrument)
    {
        if (is_null($instrument)) {
            throw new \InvalidArgumentException('non-nullable instrument cannot be null');
        }
        $this->container['instrument'] = $instrument;

        return $this;
    }

    /**
     * Gets instrument_external_data
     *
     * @return string|null
     */
    public function getInstrumentExternalData()
    {
        return $this->container['instrument_external_data'];
    }

    /**
     * Sets instrument_external_data
     *
     * @param string|null $instrument_external_data The full data we get from the polling endpoint for this specific instrument. This is a JSON stringified object with different properties per exchange.
     *
     * @return self
     */
    public function setInstrumentExternalData($instrument_external_data)
    {
        if (is_null($instrument_external_data)) {
            throw new \InvalidArgumentException('non-nullable instrument_external_data cannot be null');
        }
        $this->container['instrument_external_data'] = $instrument_external_data;

        return $this;
    }

    /**
     * Gets instrument_mapping
     *
     * @return object|null
     */
    public function getInstrumentMapping()
    {
        return $this->container['instrument_mapping'];
    }

    /**
     * Sets instrument_mapping
     *
     * @param object|null $instrument_mapping The current mapping information for this instrument
     *
     * @return self
     */
    public function setInstrumentMapping($instrument_mapping)
    {
        if (is_null($instrument_mapping)) {
            throw new \InvalidArgumentException('non-nullable instrument_mapping cannot be null');
        }
        $this->container['instrument_mapping'] = $instrument_mapping;

        return $this;
    }

    /**
     * Gets instrument_mapping_history
     *
     * @return string[]|null
     */
    public function getInstrumentMappingHistory()
    {
        return $this->container['instrument_mapping_history'];
    }

    /**
     * Sets instrument_mapping_history
     *
     * @param string[]|null $instrument_mapping_history Historical mapping information for this instrument
     *
     * @return self
     */
    public function setInstrumentMappingHistory($instrument_mapping_history)
    {
        if (is_null($instrument_mapping_history)) {
            throw new \InvalidArgumentException('non-nullable instrument_mapping_history cannot be null');
        }
        $this->container['instrument_mapping_history'] = $instrument_mapping_history;

        return $this;
    }

    /**
     * Gets instrument_source_backfill
     *
     * @return string|null
     */
    public function getInstrumentSourceBackfill()
    {
        return $this->container['instrument_source_backfill'];
    }

    /**
     * Sets instrument_source_backfill
     *
     * @param string|null $instrument_source_backfill Where do we get the instrument id / INSTRUMENT_{messageName}_REST_URI / INSTRUMENT_{messageName}_STREAMING_SUBSCRIPTION etc from.
     *
     * @return self
     */
    public function setInstrumentSourceBackfill($instrument_source_backfill)
    {
        if (is_null($instrument_source_backfill)) {
            throw new \InvalidArgumentException('non-nullable instrument_source_backfill cannot be null');
        }
        $this->container['instrument_source_backfill'] = $instrument_source_backfill;

        return $this;
    }

    /**
     * Gets instrument_source_blob
     *
     * @return string|null
     */
    public function getInstrumentSourceBlob()
    {
        return $this->container['instrument_source_blob'];
    }

    /**
     * Sets instrument_source_blob
     *
     * @param string|null $instrument_source_blob Where do we get the instrument id / INSTRUMENT_{messageName}_REST_URI / INSTRUMENT_{messageName}_STREAMING_SUBSCRIPTION etc from.
     *
     * @return self
     */
    public function setInstrumentSourceBlob($instrument_source_blob)
    {
        if (is_null($instrument_source_blob)) {
            throw new \InvalidArgumentException('non-nullable instrument_source_blob cannot be null');
        }
        $this->container['instrument_source_blob'] = $instrument_source_blob;

        return $this;
    }

    /**
     * Gets instrument_source_calculated
     *
     * @return string|null
     */
    public function getInstrumentSourceCalculated()
    {
        return $this->container['instrument_source_calculated'];
    }

    /**
     * Sets instrument_source_calculated
     *
     * @param string|null $instrument_source_calculated Where do we get the instrument id / INSTRUMENT_{messageName}_REST_URI / INSTRUMENT_{messageName}_STREAMING_SUBSCRIPTION etc from.
     *
     * @return self
     */
    public function setInstrumentSourceCalculated($instrument_source_calculated)
    {
        if (is_null($instrument_source_calculated)) {
            throw new \InvalidArgumentException('non-nullable instrument_source_calculated cannot be null');
        }
        $this->container['instrument_source_calculated'] = $instrument_source_calculated;

        return $this;
    }

    /**
     * Gets instrument_source_fix
     *
     * @return string|null
     */
    public function getInstrumentSourceFix()
    {
        return $this->container['instrument_source_fix'];
    }

    /**
     * Sets instrument_source_fix
     *
     * @param string|null $instrument_source_fix Where do we get the instrument id / INSTRUMENT_{messageName}_REST_URI / INSTRUMENT_{messageName}_STREAMING_SUBSCRIPTION etc from.
     *
     * @return self
     */
    public function setInstrumentSourceFix($instrument_source_fix)
    {
        if (is_null($instrument_source_fix)) {
            throw new \InvalidArgumentException('non-nullable instrument_source_fix cannot be null');
        }
        $this->container['instrument_source_fix'] = $instrument_source_fix;

        return $this;
    }

    /**
     * Gets instrument_source_go
     *
     * @return string|null
     */
    public function getInstrumentSourceGo()
    {
        return $this->container['instrument_source_go'];
    }

    /**
     * Sets instrument_source_go
     *
     * @param string|null $instrument_source_go Where do we get the instrument id / INSTRUMENT_{messageName}_REST_URI / INSTRUMENT_{messageName}_STREAMING_SUBSCRIPTION etc from.
     *
     * @return self
     */
    public function setInstrumentSourceGo($instrument_source_go)
    {
        if (is_null($instrument_source_go)) {
            throw new \InvalidArgumentException('non-nullable instrument_source_go cannot be null');
        }
        $this->container['instrument_source_go'] = $instrument_source_go;

        return $this;
    }

    /**
     * Gets instrument_source_polling
     *
     * @return string|null
     */
    public function getInstrumentSourcePolling()
    {
        return $this->container['instrument_source_polling'];
    }

    /**
     * Sets instrument_source_polling
     *
     * @param string|null $instrument_source_polling Where do we get the instrument id / INSTRUMENT_{messageName}_REST_URI / INSTRUMENT_{messageName}_STREAMING_SUBSCRIPTION etc from.
     *
     * @return self
     */
    public function setInstrumentSourcePolling($instrument_source_polling)
    {
        if (is_null($instrument_source_polling)) {
            throw new \InvalidArgumentException('non-nullable instrument_source_polling cannot be null');
        }
        $this->container['instrument_source_polling'] = $instrument_source_polling;

        return $this;
    }

    /**
     * Gets instrument_source_streaming
     *
     * @return string|null
     */
    public function getInstrumentSourceStreaming()
    {
        return $this->container['instrument_source_streaming'];
    }

    /**
     * Sets instrument_source_streaming
     *
     * @param string|null $instrument_source_streaming Where do we get the instrument id / INSTRUMENT_{messageName}_REST_URI / INSTRUMENT_{messageName}_STREAMING_SUBSCRIPTION etc from.
     *
     * @return self
     */
    public function setInstrumentSourceStreaming($instrument_source_streaming)
    {
        if (is_null($instrument_source_streaming)) {
            throw new \InvalidArgumentException('non-nullable instrument_source_streaming cannot be null');
        }
        $this->container['instrument_source_streaming'] = $instrument_source_streaming;

        return $this;
    }

    /**
     * Gets instrument_status
     *
     * @return string|null
     */
    public function getInstrumentStatus()
    {
        return $this->container['instrument_status'];
    }

    /**
     * Sets instrument_status
     *
     * @param string|null $instrument_status The status of the symbol, we only poll / stream / connect to the ACTIVE ones, for the RETIRED / IGNORED / EXPIRED  one we no longer query for data.
     *
     * @return self
     */
    public function setInstrumentStatus($instrument_status)
    {
        if (is_null($instrument_status)) {
            throw new \InvalidArgumentException('non-nullable instrument_status cannot be null');
        }
        $this->container['instrument_status'] = $instrument_status;

        return $this;
    }

    /**
     * Gets instrument_trade_spot_from_backfill_last_proxied_rest_request
     *
     * @return object|null
     */
    public function getInstrumentTradeSpotFromBackfillLastProxiedRestRequest()
    {
        return $this->container['instrument_trade_spot_from_backfill_last_proxied_rest_request'];
    }

    /**
     * Sets instrument_trade_spot_from_backfill_last_proxied_rest_request
     *
     * @param object|null $instrument_trade_spot_from_backfill_last_proxied_rest_request The last proxied REST request we sent to the proxy swarm to get TRADE_SPOT for the instrument.
     *
     * @return self
     */
    public function setInstrumentTradeSpotFromBackfillLastProxiedRestRequest($instrument_trade_spot_from_backfill_last_proxied_rest_request)
    {
        if (is_null($instrument_trade_spot_from_backfill_last_proxied_rest_request)) {
            throw new \InvalidArgumentException('non-nullable instrument_trade_spot_from_backfill_last_proxied_rest_request cannot be null');
        }
        $this->container['instrument_trade_spot_from_backfill_last_proxied_rest_request'] = $instrument_trade_spot_from_backfill_last_proxied_rest_request;

        return $this;
    }

    /**
     * Gets instrument_trade_spot_from_backfill_rest_uri_last_request_ts
     *
     * @return int|null
     */
    public function getInstrumentTradeSpotFromBackfillRestUriLastRequestTs()
    {
        return $this->container['instrument_trade_spot_from_backfill_rest_uri_last_request_ts'];
    }

    /**
     * Sets instrument_trade_spot_from_backfill_rest_uri_last_request_ts
     *
     * @param int|null $instrument_trade_spot_from_backfill_rest_uri_last_request_ts The last time we sent a request to the proxy swarm to get TRADE_SPOT for the instrument.
     *
     * @return self
     */
    public function setInstrumentTradeSpotFromBackfillRestUriLastRequestTs($instrument_trade_spot_from_backfill_rest_uri_last_request_ts)
    {
        if (is_null($instrument_trade_spot_from_backfill_rest_uri_last_request_ts)) {
            throw new \InvalidArgumentException('non-nullable instrument_trade_spot_from_backfill_rest_uri_last_request_ts cannot be null');
        }
        $this->container['instrument_trade_spot_from_backfill_rest_uri_last_request_ts'] = $instrument_trade_spot_from_backfill_rest_uri_last_request_ts;

        return $this;
    }

    /**
     * Gets instrument_trade_spot_from_backfill_rest_uri_last_response_ts
     *
     * @return int|null
     */
    public function getInstrumentTradeSpotFromBackfillRestUriLastResponseTs()
    {
        return $this->container['instrument_trade_spot_from_backfill_rest_uri_last_response_ts'];
    }

    /**
     * Sets instrument_trade_spot_from_backfill_rest_uri_last_response_ts
     *
     * @param int|null $instrument_trade_spot_from_backfill_rest_uri_last_response_ts The last time we received a request from the proxy swarm with TRADE_SPOT for this instrument.
     *
     * @return self
     */
    public function setInstrumentTradeSpotFromBackfillRestUriLastResponseTs($instrument_trade_spot_from_backfill_rest_uri_last_response_ts)
    {
        if (is_null($instrument_trade_spot_from_backfill_rest_uri_last_response_ts)) {
            throw new \InvalidArgumentException('non-nullable instrument_trade_spot_from_backfill_rest_uri_last_response_ts cannot be null');
        }
        $this->container['instrument_trade_spot_from_backfill_rest_uri_last_response_ts'] = $instrument_trade_spot_from_backfill_rest_uri_last_response_ts;

        return $this;
    }

    /**
     * Gets instrument_trade_spot_from_backfill_rest_uri_next_request_ts
     *
     * @return int|null
     */
    public function getInstrumentTradeSpotFromBackfillRestUriNextRequestTs()
    {
        return $this->container['instrument_trade_spot_from_backfill_rest_uri_next_request_ts'];
    }

    /**
     * Sets instrument_trade_spot_from_backfill_rest_uri_next_request_ts
     *
     * @param int|null $instrument_trade_spot_from_backfill_rest_uri_next_request_ts The next time we expect to make a request for TRADE_SPOT on this instrument.
     *
     * @return self
     */
    public function setInstrumentTradeSpotFromBackfillRestUriNextRequestTs($instrument_trade_spot_from_backfill_rest_uri_next_request_ts)
    {
        if (is_null($instrument_trade_spot_from_backfill_rest_uri_next_request_ts)) {
            throw new \InvalidArgumentException('non-nullable instrument_trade_spot_from_backfill_rest_uri_next_request_ts cannot be null');
        }
        $this->container['instrument_trade_spot_from_backfill_rest_uri_next_request_ts'] = $instrument_trade_spot_from_backfill_rest_uri_next_request_ts;

        return $this;
    }

    /**
     * Gets instrument_trade_spot_from_blob_last_proxied_rest_request
     *
     * @return object|null
     */
    public function getInstrumentTradeSpotFromBlobLastProxiedRestRequest()
    {
        return $this->container['instrument_trade_spot_from_blob_last_proxied_rest_request'];
    }

    /**
     * Sets instrument_trade_spot_from_blob_last_proxied_rest_request
     *
     * @param object|null $instrument_trade_spot_from_blob_last_proxied_rest_request The last proxied REST request we sent to the proxy swarm to get TRADE_SPOT for the instrument.
     *
     * @return self
     */
    public function setInstrumentTradeSpotFromBlobLastProxiedRestRequest($instrument_trade_spot_from_blob_last_proxied_rest_request)
    {
        if (is_null($instrument_trade_spot_from_blob_last_proxied_rest_request)) {
            throw new \InvalidArgumentException('non-nullable instrument_trade_spot_from_blob_last_proxied_rest_request cannot be null');
        }
        $this->container['instrument_trade_spot_from_blob_last_proxied_rest_request'] = $instrument_trade_spot_from_blob_last_proxied_rest_request;

        return $this;
    }

    /**
     * Gets instrument_trade_spot_from_blob_rest_uri_last_request_ts
     *
     * @return int|null
     */
    public function getInstrumentTradeSpotFromBlobRestUriLastRequestTs()
    {
        return $this->container['instrument_trade_spot_from_blob_rest_uri_last_request_ts'];
    }

    /**
     * Sets instrument_trade_spot_from_blob_rest_uri_last_request_ts
     *
     * @param int|null $instrument_trade_spot_from_blob_rest_uri_last_request_ts The last time we sent a request to the proxy swarm to get TRADE_SPOT for the instrument.
     *
     * @return self
     */
    public function setInstrumentTradeSpotFromBlobRestUriLastRequestTs($instrument_trade_spot_from_blob_rest_uri_last_request_ts)
    {
        if (is_null($instrument_trade_spot_from_blob_rest_uri_last_request_ts)) {
            throw new \InvalidArgumentException('non-nullable instrument_trade_spot_from_blob_rest_uri_last_request_ts cannot be null');
        }
        $this->container['instrument_trade_spot_from_blob_rest_uri_last_request_ts'] = $instrument_trade_spot_from_blob_rest_uri_last_request_ts;

        return $this;
    }

    /**
     * Gets instrument_trade_spot_from_blob_rest_uri_last_response_ts
     *
     * @return int|null
     */
    public function getInstrumentTradeSpotFromBlobRestUriLastResponseTs()
    {
        return $this->container['instrument_trade_spot_from_blob_rest_uri_last_response_ts'];
    }

    /**
     * Sets instrument_trade_spot_from_blob_rest_uri_last_response_ts
     *
     * @param int|null $instrument_trade_spot_from_blob_rest_uri_last_response_ts The last time we received a request from the proxy swarm with TRADE_SPOT for this instrument.
     *
     * @return self
     */
    public function setInstrumentTradeSpotFromBlobRestUriLastResponseTs($instrument_trade_spot_from_blob_rest_uri_last_response_ts)
    {
        if (is_null($instrument_trade_spot_from_blob_rest_uri_last_response_ts)) {
            throw new \InvalidArgumentException('non-nullable instrument_trade_spot_from_blob_rest_uri_last_response_ts cannot be null');
        }
        $this->container['instrument_trade_spot_from_blob_rest_uri_last_response_ts'] = $instrument_trade_spot_from_blob_rest_uri_last_response_ts;

        return $this;
    }

    /**
     * Gets instrument_trade_spot_from_blob_rest_uri_next_request_ts
     *
     * @return int|null
     */
    public function getInstrumentTradeSpotFromBlobRestUriNextRequestTs()
    {
        return $this->container['instrument_trade_spot_from_blob_rest_uri_next_request_ts'];
    }

    /**
     * Sets instrument_trade_spot_from_blob_rest_uri_next_request_ts
     *
     * @param int|null $instrument_trade_spot_from_blob_rest_uri_next_request_ts The next time we expect to make a request for TRADE_SPOT on this instrument.
     *
     * @return self
     */
    public function setInstrumentTradeSpotFromBlobRestUriNextRequestTs($instrument_trade_spot_from_blob_rest_uri_next_request_ts)
    {
        if (is_null($instrument_trade_spot_from_blob_rest_uri_next_request_ts)) {
            throw new \InvalidArgumentException('non-nullable instrument_trade_spot_from_blob_rest_uri_next_request_ts cannot be null');
        }
        $this->container['instrument_trade_spot_from_blob_rest_uri_next_request_ts'] = $instrument_trade_spot_from_blob_rest_uri_next_request_ts;

        return $this;
    }

    /**
     * Gets instrument_trade_spot_from_calculated_last_proxied_rest_request
     *
     * @return object|null
     */
    public function getInstrumentTradeSpotFromCalculatedLastProxiedRestRequest()
    {
        return $this->container['instrument_trade_spot_from_calculated_last_proxied_rest_request'];
    }

    /**
     * Sets instrument_trade_spot_from_calculated_last_proxied_rest_request
     *
     * @param object|null $instrument_trade_spot_from_calculated_last_proxied_rest_request The last proxied REST request we sent to the proxy swarm to get TRADE_SPOT for the instrument.
     *
     * @return self
     */
    public function setInstrumentTradeSpotFromCalculatedLastProxiedRestRequest($instrument_trade_spot_from_calculated_last_proxied_rest_request)
    {
        if (is_null($instrument_trade_spot_from_calculated_last_proxied_rest_request)) {
            throw new \InvalidArgumentException('non-nullable instrument_trade_spot_from_calculated_last_proxied_rest_request cannot be null');
        }
        $this->container['instrument_trade_spot_from_calculated_last_proxied_rest_request'] = $instrument_trade_spot_from_calculated_last_proxied_rest_request;

        return $this;
    }

    /**
     * Gets instrument_trade_spot_from_calculated_rest_uri_last_request_ts
     *
     * @return int|null
     */
    public function getInstrumentTradeSpotFromCalculatedRestUriLastRequestTs()
    {
        return $this->container['instrument_trade_spot_from_calculated_rest_uri_last_request_ts'];
    }

    /**
     * Sets instrument_trade_spot_from_calculated_rest_uri_last_request_ts
     *
     * @param int|null $instrument_trade_spot_from_calculated_rest_uri_last_request_ts The last time we sent a request to the proxy swarm to get TRADE_SPOT for the instrument.
     *
     * @return self
     */
    public function setInstrumentTradeSpotFromCalculatedRestUriLastRequestTs($instrument_trade_spot_from_calculated_rest_uri_last_request_ts)
    {
        if (is_null($instrument_trade_spot_from_calculated_rest_uri_last_request_ts)) {
            throw new \InvalidArgumentException('non-nullable instrument_trade_spot_from_calculated_rest_uri_last_request_ts cannot be null');
        }
        $this->container['instrument_trade_spot_from_calculated_rest_uri_last_request_ts'] = $instrument_trade_spot_from_calculated_rest_uri_last_request_ts;

        return $this;
    }

    /**
     * Gets instrument_trade_spot_from_calculated_rest_uri_last_response_ts
     *
     * @return int|null
     */
    public function getInstrumentTradeSpotFromCalculatedRestUriLastResponseTs()
    {
        return $this->container['instrument_trade_spot_from_calculated_rest_uri_last_response_ts'];
    }

    /**
     * Sets instrument_trade_spot_from_calculated_rest_uri_last_response_ts
     *
     * @param int|null $instrument_trade_spot_from_calculated_rest_uri_last_response_ts The last time we received a request from the proxy swarm with TRADE_SPOT for this instrument.
     *
     * @return self
     */
    public function setInstrumentTradeSpotFromCalculatedRestUriLastResponseTs($instrument_trade_spot_from_calculated_rest_uri_last_response_ts)
    {
        if (is_null($instrument_trade_spot_from_calculated_rest_uri_last_response_ts)) {
            throw new \InvalidArgumentException('non-nullable instrument_trade_spot_from_calculated_rest_uri_last_response_ts cannot be null');
        }
        $this->container['instrument_trade_spot_from_calculated_rest_uri_last_response_ts'] = $instrument_trade_spot_from_calculated_rest_uri_last_response_ts;

        return $this;
    }

    /**
     * Gets instrument_trade_spot_from_calculated_rest_uri_next_request_ts
     *
     * @return int|null
     */
    public function getInstrumentTradeSpotFromCalculatedRestUriNextRequestTs()
    {
        return $this->container['instrument_trade_spot_from_calculated_rest_uri_next_request_ts'];
    }

    /**
     * Sets instrument_trade_spot_from_calculated_rest_uri_next_request_ts
     *
     * @param int|null $instrument_trade_spot_from_calculated_rest_uri_next_request_ts The next time we expect to make a request for TRADE_SPOT on this instrument.
     *
     * @return self
     */
    public function setInstrumentTradeSpotFromCalculatedRestUriNextRequestTs($instrument_trade_spot_from_calculated_rest_uri_next_request_ts)
    {
        if (is_null($instrument_trade_spot_from_calculated_rest_uri_next_request_ts)) {
            throw new \InvalidArgumentException('non-nullable instrument_trade_spot_from_calculated_rest_uri_next_request_ts cannot be null');
        }
        $this->container['instrument_trade_spot_from_calculated_rest_uri_next_request_ts'] = $instrument_trade_spot_from_calculated_rest_uri_next_request_ts;

        return $this;
    }

    /**
     * Gets instrument_trade_spot_from_fix_last_proxied_rest_request
     *
     * @return object|null
     */
    public function getInstrumentTradeSpotFromFixLastProxiedRestRequest()
    {
        return $this->container['instrument_trade_spot_from_fix_last_proxied_rest_request'];
    }

    /**
     * Sets instrument_trade_spot_from_fix_last_proxied_rest_request
     *
     * @param object|null $instrument_trade_spot_from_fix_last_proxied_rest_request The last proxied REST request we sent to the proxy swarm to get TRADE_SPOT for the instrument.
     *
     * @return self
     */
    public function setInstrumentTradeSpotFromFixLastProxiedRestRequest($instrument_trade_spot_from_fix_last_proxied_rest_request)
    {
        if (is_null($instrument_trade_spot_from_fix_last_proxied_rest_request)) {
            throw new \InvalidArgumentException('non-nullable instrument_trade_spot_from_fix_last_proxied_rest_request cannot be null');
        }
        $this->container['instrument_trade_spot_from_fix_last_proxied_rest_request'] = $instrument_trade_spot_from_fix_last_proxied_rest_request;

        return $this;
    }

    /**
     * Gets instrument_trade_spot_from_fix_rest_uri_last_request_ts
     *
     * @return int|null
     */
    public function getInstrumentTradeSpotFromFixRestUriLastRequestTs()
    {
        return $this->container['instrument_trade_spot_from_fix_rest_uri_last_request_ts'];
    }

    /**
     * Sets instrument_trade_spot_from_fix_rest_uri_last_request_ts
     *
     * @param int|null $instrument_trade_spot_from_fix_rest_uri_last_request_ts The last time we sent a request to the proxy swarm to get TRADE_SPOT for the instrument.
     *
     * @return self
     */
    public function setInstrumentTradeSpotFromFixRestUriLastRequestTs($instrument_trade_spot_from_fix_rest_uri_last_request_ts)
    {
        if (is_null($instrument_trade_spot_from_fix_rest_uri_last_request_ts)) {
            throw new \InvalidArgumentException('non-nullable instrument_trade_spot_from_fix_rest_uri_last_request_ts cannot be null');
        }
        $this->container['instrument_trade_spot_from_fix_rest_uri_last_request_ts'] = $instrument_trade_spot_from_fix_rest_uri_last_request_ts;

        return $this;
    }

    /**
     * Gets instrument_trade_spot_from_fix_rest_uri_last_response_ts
     *
     * @return int|null
     */
    public function getInstrumentTradeSpotFromFixRestUriLastResponseTs()
    {
        return $this->container['instrument_trade_spot_from_fix_rest_uri_last_response_ts'];
    }

    /**
     * Sets instrument_trade_spot_from_fix_rest_uri_last_response_ts
     *
     * @param int|null $instrument_trade_spot_from_fix_rest_uri_last_response_ts The last time we received a request from the proxy swarm with TRADE_SPOT for this instrument.
     *
     * @return self
     */
    public function setInstrumentTradeSpotFromFixRestUriLastResponseTs($instrument_trade_spot_from_fix_rest_uri_last_response_ts)
    {
        if (is_null($instrument_trade_spot_from_fix_rest_uri_last_response_ts)) {
            throw new \InvalidArgumentException('non-nullable instrument_trade_spot_from_fix_rest_uri_last_response_ts cannot be null');
        }
        $this->container['instrument_trade_spot_from_fix_rest_uri_last_response_ts'] = $instrument_trade_spot_from_fix_rest_uri_last_response_ts;

        return $this;
    }

    /**
     * Gets instrument_trade_spot_from_fix_rest_uri_next_request_ts
     *
     * @return int|null
     */
    public function getInstrumentTradeSpotFromFixRestUriNextRequestTs()
    {
        return $this->container['instrument_trade_spot_from_fix_rest_uri_next_request_ts'];
    }

    /**
     * Sets instrument_trade_spot_from_fix_rest_uri_next_request_ts
     *
     * @param int|null $instrument_trade_spot_from_fix_rest_uri_next_request_ts The next time we expect to make a request for TRADE_SPOT on this instrument.
     *
     * @return self
     */
    public function setInstrumentTradeSpotFromFixRestUriNextRequestTs($instrument_trade_spot_from_fix_rest_uri_next_request_ts)
    {
        if (is_null($instrument_trade_spot_from_fix_rest_uri_next_request_ts)) {
            throw new \InvalidArgumentException('non-nullable instrument_trade_spot_from_fix_rest_uri_next_request_ts cannot be null');
        }
        $this->container['instrument_trade_spot_from_fix_rest_uri_next_request_ts'] = $instrument_trade_spot_from_fix_rest_uri_next_request_ts;

        return $this;
    }

    /**
     * Gets instrument_trade_spot_from_go_last_proxied_rest_request
     *
     * @return object|null
     */
    public function getInstrumentTradeSpotFromGoLastProxiedRestRequest()
    {
        return $this->container['instrument_trade_spot_from_go_last_proxied_rest_request'];
    }

    /**
     * Sets instrument_trade_spot_from_go_last_proxied_rest_request
     *
     * @param object|null $instrument_trade_spot_from_go_last_proxied_rest_request The last proxied REST request we sent to the proxy swarm to get TRADE_SPOT for the instrument.
     *
     * @return self
     */
    public function setInstrumentTradeSpotFromGoLastProxiedRestRequest($instrument_trade_spot_from_go_last_proxied_rest_request)
    {
        if (is_null($instrument_trade_spot_from_go_last_proxied_rest_request)) {
            throw new \InvalidArgumentException('non-nullable instrument_trade_spot_from_go_last_proxied_rest_request cannot be null');
        }
        $this->container['instrument_trade_spot_from_go_last_proxied_rest_request'] = $instrument_trade_spot_from_go_last_proxied_rest_request;

        return $this;
    }

    /**
     * Gets instrument_trade_spot_from_go_rest_uri_last_request_ts
     *
     * @return int|null
     */
    public function getInstrumentTradeSpotFromGoRestUriLastRequestTs()
    {
        return $this->container['instrument_trade_spot_from_go_rest_uri_last_request_ts'];
    }

    /**
     * Sets instrument_trade_spot_from_go_rest_uri_last_request_ts
     *
     * @param int|null $instrument_trade_spot_from_go_rest_uri_last_request_ts The last time we sent a request to the proxy swarm to get TRADE_SPOT for the instrument.
     *
     * @return self
     */
    public function setInstrumentTradeSpotFromGoRestUriLastRequestTs($instrument_trade_spot_from_go_rest_uri_last_request_ts)
    {
        if (is_null($instrument_trade_spot_from_go_rest_uri_last_request_ts)) {
            throw new \InvalidArgumentException('non-nullable instrument_trade_spot_from_go_rest_uri_last_request_ts cannot be null');
        }
        $this->container['instrument_trade_spot_from_go_rest_uri_last_request_ts'] = $instrument_trade_spot_from_go_rest_uri_last_request_ts;

        return $this;
    }

    /**
     * Gets instrument_trade_spot_from_go_rest_uri_last_response_ts
     *
     * @return int|null
     */
    public function getInstrumentTradeSpotFromGoRestUriLastResponseTs()
    {
        return $this->container['instrument_trade_spot_from_go_rest_uri_last_response_ts'];
    }

    /**
     * Sets instrument_trade_spot_from_go_rest_uri_last_response_ts
     *
     * @param int|null $instrument_trade_spot_from_go_rest_uri_last_response_ts The last time we received a request from the proxy swarm with TRADE_SPOT for this instrument.
     *
     * @return self
     */
    public function setInstrumentTradeSpotFromGoRestUriLastResponseTs($instrument_trade_spot_from_go_rest_uri_last_response_ts)
    {
        if (is_null($instrument_trade_spot_from_go_rest_uri_last_response_ts)) {
            throw new \InvalidArgumentException('non-nullable instrument_trade_spot_from_go_rest_uri_last_response_ts cannot be null');
        }
        $this->container['instrument_trade_spot_from_go_rest_uri_last_response_ts'] = $instrument_trade_spot_from_go_rest_uri_last_response_ts;

        return $this;
    }

    /**
     * Gets instrument_trade_spot_from_go_rest_uri_next_request_ts
     *
     * @return int|null
     */
    public function getInstrumentTradeSpotFromGoRestUriNextRequestTs()
    {
        return $this->container['instrument_trade_spot_from_go_rest_uri_next_request_ts'];
    }

    /**
     * Sets instrument_trade_spot_from_go_rest_uri_next_request_ts
     *
     * @param int|null $instrument_trade_spot_from_go_rest_uri_next_request_ts The next time we expect to make a request for TRADE_SPOT on this instrument.
     *
     * @return self
     */
    public function setInstrumentTradeSpotFromGoRestUriNextRequestTs($instrument_trade_spot_from_go_rest_uri_next_request_ts)
    {
        if (is_null($instrument_trade_spot_from_go_rest_uri_next_request_ts)) {
            throw new \InvalidArgumentException('non-nullable instrument_trade_spot_from_go_rest_uri_next_request_ts cannot be null');
        }
        $this->container['instrument_trade_spot_from_go_rest_uri_next_request_ts'] = $instrument_trade_spot_from_go_rest_uri_next_request_ts;

        return $this;
    }

    /**
     * Gets instrument_trade_spot_from_polling_last_proxied_rest_request
     *
     * @return object|null
     */
    public function getInstrumentTradeSpotFromPollingLastProxiedRestRequest()
    {
        return $this->container['instrument_trade_spot_from_polling_last_proxied_rest_request'];
    }

    /**
     * Sets instrument_trade_spot_from_polling_last_proxied_rest_request
     *
     * @param object|null $instrument_trade_spot_from_polling_last_proxied_rest_request The last proxied REST request we sent to the proxy swarm to get TRADE_SPOT for the instrument.
     *
     * @return self
     */
    public function setInstrumentTradeSpotFromPollingLastProxiedRestRequest($instrument_trade_spot_from_polling_last_proxied_rest_request)
    {
        if (is_null($instrument_trade_spot_from_polling_last_proxied_rest_request)) {
            throw new \InvalidArgumentException('non-nullable instrument_trade_spot_from_polling_last_proxied_rest_request cannot be null');
        }
        $this->container['instrument_trade_spot_from_polling_last_proxied_rest_request'] = $instrument_trade_spot_from_polling_last_proxied_rest_request;

        return $this;
    }

    /**
     * Gets instrument_trade_spot_from_polling_rest_uri_last_request_ts
     *
     * @return int|null
     */
    public function getInstrumentTradeSpotFromPollingRestUriLastRequestTs()
    {
        return $this->container['instrument_trade_spot_from_polling_rest_uri_last_request_ts'];
    }

    /**
     * Sets instrument_trade_spot_from_polling_rest_uri_last_request_ts
     *
     * @param int|null $instrument_trade_spot_from_polling_rest_uri_last_request_ts The last time we sent a request to the proxy swarm to get TRADE_SPOT for the instrument.
     *
     * @return self
     */
    public function setInstrumentTradeSpotFromPollingRestUriLastRequestTs($instrument_trade_spot_from_polling_rest_uri_last_request_ts)
    {
        if (is_null($instrument_trade_spot_from_polling_rest_uri_last_request_ts)) {
            throw new \InvalidArgumentException('non-nullable instrument_trade_spot_from_polling_rest_uri_last_request_ts cannot be null');
        }
        $this->container['instrument_trade_spot_from_polling_rest_uri_last_request_ts'] = $instrument_trade_spot_from_polling_rest_uri_last_request_ts;

        return $this;
    }

    /**
     * Gets instrument_trade_spot_from_polling_rest_uri_last_response_ts
     *
     * @return int|null
     */
    public function getInstrumentTradeSpotFromPollingRestUriLastResponseTs()
    {
        return $this->container['instrument_trade_spot_from_polling_rest_uri_last_response_ts'];
    }

    /**
     * Sets instrument_trade_spot_from_polling_rest_uri_last_response_ts
     *
     * @param int|null $instrument_trade_spot_from_polling_rest_uri_last_response_ts The last time we received a request from the proxy swarm with TRADE_SPOT for this instrument.
     *
     * @return self
     */
    public function setInstrumentTradeSpotFromPollingRestUriLastResponseTs($instrument_trade_spot_from_polling_rest_uri_last_response_ts)
    {
        if (is_null($instrument_trade_spot_from_polling_rest_uri_last_response_ts)) {
            throw new \InvalidArgumentException('non-nullable instrument_trade_spot_from_polling_rest_uri_last_response_ts cannot be null');
        }
        $this->container['instrument_trade_spot_from_polling_rest_uri_last_response_ts'] = $instrument_trade_spot_from_polling_rest_uri_last_response_ts;

        return $this;
    }

    /**
     * Gets instrument_trade_spot_from_polling_rest_uri_next_request_ts
     *
     * @return int|null
     */
    public function getInstrumentTradeSpotFromPollingRestUriNextRequestTs()
    {
        return $this->container['instrument_trade_spot_from_polling_rest_uri_next_request_ts'];
    }

    /**
     * Sets instrument_trade_spot_from_polling_rest_uri_next_request_ts
     *
     * @param int|null $instrument_trade_spot_from_polling_rest_uri_next_request_ts The next time we expect to make a request for TRADE_SPOT on this instrument.
     *
     * @return self
     */
    public function setInstrumentTradeSpotFromPollingRestUriNextRequestTs($instrument_trade_spot_from_polling_rest_uri_next_request_ts)
    {
        if (is_null($instrument_trade_spot_from_polling_rest_uri_next_request_ts)) {
            throw new \InvalidArgumentException('non-nullable instrument_trade_spot_from_polling_rest_uri_next_request_ts cannot be null');
        }
        $this->container['instrument_trade_spot_from_polling_rest_uri_next_request_ts'] = $instrument_trade_spot_from_polling_rest_uri_next_request_ts;

        return $this;
    }

    /**
     * Gets instrument_trade_spot_from_streaming_last_proxied_rest_request
     *
     * @return object|null
     */
    public function getInstrumentTradeSpotFromStreamingLastProxiedRestRequest()
    {
        return $this->container['instrument_trade_spot_from_streaming_last_proxied_rest_request'];
    }

    /**
     * Sets instrument_trade_spot_from_streaming_last_proxied_rest_request
     *
     * @param object|null $instrument_trade_spot_from_streaming_last_proxied_rest_request The last proxied REST request we sent to the proxy swarm to get TRADE_SPOT for the instrument.
     *
     * @return self
     */
    public function setInstrumentTradeSpotFromStreamingLastProxiedRestRequest($instrument_trade_spot_from_streaming_last_proxied_rest_request)
    {
        if (is_null($instrument_trade_spot_from_streaming_last_proxied_rest_request)) {
            throw new \InvalidArgumentException('non-nullable instrument_trade_spot_from_streaming_last_proxied_rest_request cannot be null');
        }
        $this->container['instrument_trade_spot_from_streaming_last_proxied_rest_request'] = $instrument_trade_spot_from_streaming_last_proxied_rest_request;

        return $this;
    }

    /**
     * Gets instrument_trade_spot_from_streaming_rest_uri_last_request_ts
     *
     * @return int|null
     */
    public function getInstrumentTradeSpotFromStreamingRestUriLastRequestTs()
    {
        return $this->container['instrument_trade_spot_from_streaming_rest_uri_last_request_ts'];
    }

    /**
     * Sets instrument_trade_spot_from_streaming_rest_uri_last_request_ts
     *
     * @param int|null $instrument_trade_spot_from_streaming_rest_uri_last_request_ts The last time we sent a request to the proxy swarm to get TRADE_SPOT for the instrument.
     *
     * @return self
     */
    public function setInstrumentTradeSpotFromStreamingRestUriLastRequestTs($instrument_trade_spot_from_streaming_rest_uri_last_request_ts)
    {
        if (is_null($instrument_trade_spot_from_streaming_rest_uri_last_request_ts)) {
            throw new \InvalidArgumentException('non-nullable instrument_trade_spot_from_streaming_rest_uri_last_request_ts cannot be null');
        }
        $this->container['instrument_trade_spot_from_streaming_rest_uri_last_request_ts'] = $instrument_trade_spot_from_streaming_rest_uri_last_request_ts;

        return $this;
    }

    /**
     * Gets instrument_trade_spot_from_streaming_rest_uri_last_response_ts
     *
     * @return int|null
     */
    public function getInstrumentTradeSpotFromStreamingRestUriLastResponseTs()
    {
        return $this->container['instrument_trade_spot_from_streaming_rest_uri_last_response_ts'];
    }

    /**
     * Sets instrument_trade_spot_from_streaming_rest_uri_last_response_ts
     *
     * @param int|null $instrument_trade_spot_from_streaming_rest_uri_last_response_ts The last time we received a request from the proxy swarm with TRADE_SPOT for this instrument.
     *
     * @return self
     */
    public function setInstrumentTradeSpotFromStreamingRestUriLastResponseTs($instrument_trade_spot_from_streaming_rest_uri_last_response_ts)
    {
        if (is_null($instrument_trade_spot_from_streaming_rest_uri_last_response_ts)) {
            throw new \InvalidArgumentException('non-nullable instrument_trade_spot_from_streaming_rest_uri_last_response_ts cannot be null');
        }
        $this->container['instrument_trade_spot_from_streaming_rest_uri_last_response_ts'] = $instrument_trade_spot_from_streaming_rest_uri_last_response_ts;

        return $this;
    }

    /**
     * Gets instrument_trade_spot_from_streaming_rest_uri_next_request_ts
     *
     * @return int|null
     */
    public function getInstrumentTradeSpotFromStreamingRestUriNextRequestTs()
    {
        return $this->container['instrument_trade_spot_from_streaming_rest_uri_next_request_ts'];
    }

    /**
     * Sets instrument_trade_spot_from_streaming_rest_uri_next_request_ts
     *
     * @param int|null $instrument_trade_spot_from_streaming_rest_uri_next_request_ts The next time we expect to make a request for TRADE_SPOT on this instrument.
     *
     * @return self
     */
    public function setInstrumentTradeSpotFromStreamingRestUriNextRequestTs($instrument_trade_spot_from_streaming_rest_uri_next_request_ts)
    {
        if (is_null($instrument_trade_spot_from_streaming_rest_uri_next_request_ts)) {
            throw new \InvalidArgumentException('non-nullable instrument_trade_spot_from_streaming_rest_uri_next_request_ts cannot be null');
        }
        $this->container['instrument_trade_spot_from_streaming_rest_uri_next_request_ts'] = $instrument_trade_spot_from_streaming_rest_uri_next_request_ts;

        return $this;
    }

    /**
     * Gets instrument_trade_spot_is_ready_for_streaming_integration
     *
     * @return bool|null
     */
    public function getInstrumentTradeSpotIsReadyForStreamingIntegration()
    {
        return $this->container['instrument_trade_spot_is_ready_for_streaming_integration'];
    }

    /**
     * Sets instrument_trade_spot_is_ready_for_streaming_integration
     *
     * @param bool|null $instrument_trade_spot_is_ready_for_streaming_integration This flags the exchange instrument as in ready to consume TRADE_SPOT via a streaming integration.
     *
     * @return self
     */
    public function setInstrumentTradeSpotIsReadyForStreamingIntegration($instrument_trade_spot_is_ready_for_streaming_integration)
    {
        if (is_null($instrument_trade_spot_is_ready_for_streaming_integration)) {
            throw new \InvalidArgumentException('non-nullable instrument_trade_spot_is_ready_for_streaming_integration cannot be null');
        }
        $this->container['instrument_trade_spot_is_ready_for_streaming_integration'] = $instrument_trade_spot_is_ready_for_streaming_integration;

        return $this;
    }

    /**
     * Gets instrument_trade_spot_rest_uri
     *
     * @return string|null
     */
    public function getInstrumentTradeSpotRestUri()
    {
        return $this->container['instrument_trade_spot_rest_uri'];
    }

    /**
     * Sets instrument_trade_spot_rest_uri
     *
     * @param string|null $instrument_trade_spot_rest_uri This is used to build up the request in some cases, this is where we put the id we use when querying for TRADE_SPOT.
     *
     * @return self
     */
    public function setInstrumentTradeSpotRestUri($instrument_trade_spot_rest_uri)
    {
        if (is_null($instrument_trade_spot_rest_uri)) {
            throw new \InvalidArgumentException('non-nullable instrument_trade_spot_rest_uri cannot be null');
        }
        $this->container['instrument_trade_spot_rest_uri'] = $instrument_trade_spot_rest_uri;

        return $this;
    }

    /**
     * Gets instrument_trade_spot_rest_url
     *
     * @return string|null
     */
    public function getInstrumentTradeSpotRestUrl()
    {
        return $this->container['instrument_trade_spot_rest_url'];
    }

    /**
     * Sets instrument_trade_spot_rest_url
     *
     * @param string|null $instrument_trade_spot_rest_url The URL we send to the proxy swarm to get TRADE_SPOT for the instrument.
     *
     * @return self
     */
    public function setInstrumentTradeSpotRestUrl($instrument_trade_spot_rest_url)
    {
        if (is_null($instrument_trade_spot_rest_url)) {
            throw new \InvalidArgumentException('non-nullable instrument_trade_spot_rest_url cannot be null');
        }
        $this->container['instrument_trade_spot_rest_url'] = $instrument_trade_spot_rest_url;

        return $this;
    }

    /**
     * Gets instrument_trade_spot_streaming_subscription
     *
     * @return string|null
     */
    public function getInstrumentTradeSpotStreamingSubscription()
    {
        return $this->container['instrument_trade_spot_streaming_subscription'];
    }

    /**
     * Sets instrument_trade_spot_streaming_subscription
     *
     * @param string|null $instrument_trade_spot_streaming_subscription This is used to build up the subscription in some cases, this is where we put the id we use when subscribing for TRADE_SPOT on this instrument.
     *
     * @return self
     */
    public function setInstrumentTradeSpotStreamingSubscription($instrument_trade_spot_streaming_subscription)
    {
        if (is_null($instrument_trade_spot_streaming_subscription)) {
            throw new \InvalidArgumentException('non-nullable instrument_trade_spot_streaming_subscription cannot be null');
        }
        $this->container['instrument_trade_spot_streaming_subscription'] = $instrument_trade_spot_streaming_subscription;

        return $this;
    }

    /**
     * Gets last_concurrent_batch_of_trades_spot_ms
     *
     * @return int|null
     */
    public function getLastConcurrentBatchOfTradesSpotMs()
    {
        return $this->container['last_concurrent_batch_of_trades_spot_ms'];
    }

    /**
     * Sets last_concurrent_batch_of_trades_spot_ms
     *
     * @param int|null $last_concurrent_batch_of_trades_spot_ms The timestamp last encountered where the batch of trades from TRADES_SPOT all occured at the same time. This is an issue when making the next request that requires polling by timestamp as a start/from parameter
     *
     * @return self
     */
    public function setLastConcurrentBatchOfTradesSpotMs($last_concurrent_batch_of_trades_spot_ms)
    {
        if (is_null($last_concurrent_batch_of_trades_spot_ms)) {
            throw new \InvalidArgumentException('non-nullable last_concurrent_batch_of_trades_spot_ms cannot be null');
        }
        $this->container['last_concurrent_batch_of_trades_spot_ms'] = $last_concurrent_batch_of_trades_spot_ms;

        return $this;
    }

    /**
     * Gets last_seen_on_blob_ts
     *
     * @return int|null
     */
    public function getLastSeenOnBlobTs()
    {
        return $this->container['last_seen_on_blob_ts'];
    }

    /**
     * Sets last_seen_on_blob_ts
     *
     * @param int|null $last_seen_on_blob_ts This is the last time instrument was seen on instrumentListSourceType BLOB.
     *
     * @return self
     */
    public function setLastSeenOnBlobTs($last_seen_on_blob_ts)
    {
        if (is_null($last_seen_on_blob_ts)) {
            throw new \InvalidArgumentException('non-nullable last_seen_on_blob_ts cannot be null');
        }
        $this->container['last_seen_on_blob_ts'] = $last_seen_on_blob_ts;

        return $this;
    }

    /**
     * Gets last_seen_on_fix_ts
     *
     * @return int|null
     */
    public function getLastSeenOnFixTs()
    {
        return $this->container['last_seen_on_fix_ts'];
    }

    /**
     * Sets last_seen_on_fix_ts
     *
     * @param int|null $last_seen_on_fix_ts This is the last time instrument was seen on instrumentListSourceType FIX.
     *
     * @return self
     */
    public function setLastSeenOnFixTs($last_seen_on_fix_ts)
    {
        if (is_null($last_seen_on_fix_ts)) {
            throw new \InvalidArgumentException('non-nullable last_seen_on_fix_ts cannot be null');
        }
        $this->container['last_seen_on_fix_ts'] = $last_seen_on_fix_ts;

        return $this;
    }

    /**
     * Gets last_seen_on_hardcoded_ts
     *
     * @return int|null
     */
    public function getLastSeenOnHardcodedTs()
    {
        return $this->container['last_seen_on_hardcoded_ts'];
    }

    /**
     * Sets last_seen_on_hardcoded_ts
     *
     * @param int|null $last_seen_on_hardcoded_ts This is the last time instrument was seen on instrumentListSourceType HARDCODED.
     *
     * @return self
     */
    public function setLastSeenOnHardcodedTs($last_seen_on_hardcoded_ts)
    {
        if (is_null($last_seen_on_hardcoded_ts)) {
            throw new \InvalidArgumentException('non-nullable last_seen_on_hardcoded_ts cannot be null');
        }
        $this->container['last_seen_on_hardcoded_ts'] = $last_seen_on_hardcoded_ts;

        return $this;
    }

    /**
     * Gets last_seen_on_index_composition_ts
     *
     * @return int|null
     */
    public function getLastSeenOnIndexCompositionTs()
    {
        return $this->container['last_seen_on_index_composition_ts'];
    }

    /**
     * Sets last_seen_on_index_composition_ts
     *
     * @param int|null $last_seen_on_index_composition_ts This is the last time instrument was seen on instrumentListSourceType INDEX_COMPOSITION.
     *
     * @return self
     */
    public function setLastSeenOnIndexCompositionTs($last_seen_on_index_composition_ts)
    {
        if (is_null($last_seen_on_index_composition_ts)) {
            throw new \InvalidArgumentException('non-nullable last_seen_on_index_composition_ts cannot be null');
        }
        $this->container['last_seen_on_index_composition_ts'] = $last_seen_on_index_composition_ts;

        return $this;
    }

    /**
     * Gets last_seen_on_nsq_ts
     *
     * @return int|null
     */
    public function getLastSeenOnNsqTs()
    {
        return $this->container['last_seen_on_nsq_ts'];
    }

    /**
     * Sets last_seen_on_nsq_ts
     *
     * @param int|null $last_seen_on_nsq_ts This is the last time instrument was seen on instrumentListSourceType NSQ.
     *
     * @return self
     */
    public function setLastSeenOnNsqTs($last_seen_on_nsq_ts)
    {
        if (is_null($last_seen_on_nsq_ts)) {
            throw new \InvalidArgumentException('non-nullable last_seen_on_nsq_ts cannot be null');
        }
        $this->container['last_seen_on_nsq_ts'] = $last_seen_on_nsq_ts;

        return $this;
    }

    /**
     * Gets last_seen_on_polling_ts
     *
     * @return int|null
     */
    public function getLastSeenOnPollingTs()
    {
        return $this->container['last_seen_on_polling_ts'];
    }

    /**
     * Sets last_seen_on_polling_ts
     *
     * @param int|null $last_seen_on_polling_ts This is the last time instrument was seen on instrumentListSourceType POLLING.
     *
     * @return self
     */
    public function setLastSeenOnPollingTs($last_seen_on_polling_ts)
    {
        if (is_null($last_seen_on_polling_ts)) {
            throw new \InvalidArgumentException('non-nullable last_seen_on_polling_ts cannot be null');
        }
        $this->container['last_seen_on_polling_ts'] = $last_seen_on_polling_ts;

        return $this;
    }

    /**
     * Gets last_seen_on_streaming_ts
     *
     * @return int|null
     */
    public function getLastSeenOnStreamingTs()
    {
        return $this->container['last_seen_on_streaming_ts'];
    }

    /**
     * Sets last_seen_on_streaming_ts
     *
     * @param int|null $last_seen_on_streaming_ts This is the last time instrument was seen on instrumentListSourceType STREAMING.
     *
     * @return self
     */
    public function setLastSeenOnStreamingTs($last_seen_on_streaming_ts)
    {
        if (is_null($last_seen_on_streaming_ts)) {
            throw new \InvalidArgumentException('non-nullable last_seen_on_streaming_ts cannot be null');
        }
        $this->container['last_seen_on_streaming_ts'] = $last_seen_on_streaming_ts;

        return $this;
    }

    /**
     * Gets last_trade_spot_from_backfill
     *
     * @return object|null
     */
    public function getLastTradeSpotFromBackfill()
    {
        return $this->container['last_trade_spot_from_backfill'];
    }

    /**
     * Sets last_trade_spot_from_backfill
     *
     * @param object|null $last_trade_spot_from_backfill This is the last TRADE_SPOT that we have seen on the specific source type in internal format.
     *
     * @return self
     */
    public function setLastTradeSpotFromBackfill($last_trade_spot_from_backfill)
    {
        if (is_null($last_trade_spot_from_backfill)) {
            throw new \InvalidArgumentException('non-nullable last_trade_spot_from_backfill cannot be null');
        }
        $this->container['last_trade_spot_from_backfill'] = $last_trade_spot_from_backfill;

        return $this;
    }

    /**
     * Gets last_trade_spot_from_backfill_external
     *
     * @return object|null
     */
    public function getLastTradeSpotFromBackfillExternal()
    {
        return $this->container['last_trade_spot_from_backfill_external'];
    }

    /**
     * Sets last_trade_spot_from_backfill_external
     *
     * @param object|null $last_trade_spot_from_backfill_external This is the last TRADE_SPOT that we have seen on the specific trade source in external format.
     *
     * @return self
     */
    public function setLastTradeSpotFromBackfillExternal($last_trade_spot_from_backfill_external)
    {
        if (is_null($last_trade_spot_from_backfill_external)) {
            throw new \InvalidArgumentException('non-nullable last_trade_spot_from_backfill_external cannot be null');
        }
        $this->container['last_trade_spot_from_backfill_external'] = $last_trade_spot_from_backfill_external;

        return $this;
    }

    /**
     * Gets last_trade_spot_from_blob
     *
     * @return object|null
     */
    public function getLastTradeSpotFromBlob()
    {
        return $this->container['last_trade_spot_from_blob'];
    }

    /**
     * Sets last_trade_spot_from_blob
     *
     * @param object|null $last_trade_spot_from_blob This is the last TRADE_SPOT that we have seen on the specific source type in internal format.
     *
     * @return self
     */
    public function setLastTradeSpotFromBlob($last_trade_spot_from_blob)
    {
        if (is_null($last_trade_spot_from_blob)) {
            throw new \InvalidArgumentException('non-nullable last_trade_spot_from_blob cannot be null');
        }
        $this->container['last_trade_spot_from_blob'] = $last_trade_spot_from_blob;

        return $this;
    }

    /**
     * Gets last_trade_spot_from_blob_external
     *
     * @return object|null
     */
    public function getLastTradeSpotFromBlobExternal()
    {
        return $this->container['last_trade_spot_from_blob_external'];
    }

    /**
     * Sets last_trade_spot_from_blob_external
     *
     * @param object|null $last_trade_spot_from_blob_external This is the last TRADE_SPOT that we have seen on the specific trade source in external format.
     *
     * @return self
     */
    public function setLastTradeSpotFromBlobExternal($last_trade_spot_from_blob_external)
    {
        if (is_null($last_trade_spot_from_blob_external)) {
            throw new \InvalidArgumentException('non-nullable last_trade_spot_from_blob_external cannot be null');
        }
        $this->container['last_trade_spot_from_blob_external'] = $last_trade_spot_from_blob_external;

        return $this;
    }

    /**
     * Gets last_trade_spot_from_calculated
     *
     * @return object|null
     */
    public function getLastTradeSpotFromCalculated()
    {
        return $this->container['last_trade_spot_from_calculated'];
    }

    /**
     * Sets last_trade_spot_from_calculated
     *
     * @param object|null $last_trade_spot_from_calculated This is the last TRADE_SPOT that we have seen on the specific source type in internal format.
     *
     * @return self
     */
    public function setLastTradeSpotFromCalculated($last_trade_spot_from_calculated)
    {
        if (is_null($last_trade_spot_from_calculated)) {
            throw new \InvalidArgumentException('non-nullable last_trade_spot_from_calculated cannot be null');
        }
        $this->container['last_trade_spot_from_calculated'] = $last_trade_spot_from_calculated;

        return $this;
    }

    /**
     * Gets last_trade_spot_from_calculated_external
     *
     * @return object|null
     */
    public function getLastTradeSpotFromCalculatedExternal()
    {
        return $this->container['last_trade_spot_from_calculated_external'];
    }

    /**
     * Sets last_trade_spot_from_calculated_external
     *
     * @param object|null $last_trade_spot_from_calculated_external This is the last TRADE_SPOT that we have seen on the specific trade source in external format.
     *
     * @return self
     */
    public function setLastTradeSpotFromCalculatedExternal($last_trade_spot_from_calculated_external)
    {
        if (is_null($last_trade_spot_from_calculated_external)) {
            throw new \InvalidArgumentException('non-nullable last_trade_spot_from_calculated_external cannot be null');
        }
        $this->container['last_trade_spot_from_calculated_external'] = $last_trade_spot_from_calculated_external;

        return $this;
    }

    /**
     * Gets last_trade_spot_from_fix
     *
     * @return object|null
     */
    public function getLastTradeSpotFromFix()
    {
        return $this->container['last_trade_spot_from_fix'];
    }

    /**
     * Sets last_trade_spot_from_fix
     *
     * @param object|null $last_trade_spot_from_fix This is the last TRADE_SPOT that we have seen on the specific source type in internal format.
     *
     * @return self
     */
    public function setLastTradeSpotFromFix($last_trade_spot_from_fix)
    {
        if (is_null($last_trade_spot_from_fix)) {
            throw new \InvalidArgumentException('non-nullable last_trade_spot_from_fix cannot be null');
        }
        $this->container['last_trade_spot_from_fix'] = $last_trade_spot_from_fix;

        return $this;
    }

    /**
     * Gets last_trade_spot_from_fix_external
     *
     * @return object|null
     */
    public function getLastTradeSpotFromFixExternal()
    {
        return $this->container['last_trade_spot_from_fix_external'];
    }

    /**
     * Sets last_trade_spot_from_fix_external
     *
     * @param object|null $last_trade_spot_from_fix_external This is the last TRADE_SPOT that we have seen on the specific trade source in external format.
     *
     * @return self
     */
    public function setLastTradeSpotFromFixExternal($last_trade_spot_from_fix_external)
    {
        if (is_null($last_trade_spot_from_fix_external)) {
            throw new \InvalidArgumentException('non-nullable last_trade_spot_from_fix_external cannot be null');
        }
        $this->container['last_trade_spot_from_fix_external'] = $last_trade_spot_from_fix_external;

        return $this;
    }

    /**
     * Gets last_trade_spot_from_go
     *
     * @return object|null
     */
    public function getLastTradeSpotFromGo()
    {
        return $this->container['last_trade_spot_from_go'];
    }

    /**
     * Sets last_trade_spot_from_go
     *
     * @param object|null $last_trade_spot_from_go This is the last TRADE_SPOT that we have seen on the specific source type in internal format.
     *
     * @return self
     */
    public function setLastTradeSpotFromGo($last_trade_spot_from_go)
    {
        if (is_null($last_trade_spot_from_go)) {
            throw new \InvalidArgumentException('non-nullable last_trade_spot_from_go cannot be null');
        }
        $this->container['last_trade_spot_from_go'] = $last_trade_spot_from_go;

        return $this;
    }

    /**
     * Gets last_trade_spot_from_go_external
     *
     * @return object|null
     */
    public function getLastTradeSpotFromGoExternal()
    {
        return $this->container['last_trade_spot_from_go_external'];
    }

    /**
     * Sets last_trade_spot_from_go_external
     *
     * @param object|null $last_trade_spot_from_go_external This is the last TRADE_SPOT that we have seen on the specific trade source in external format.
     *
     * @return self
     */
    public function setLastTradeSpotFromGoExternal($last_trade_spot_from_go_external)
    {
        if (is_null($last_trade_spot_from_go_external)) {
            throw new \InvalidArgumentException('non-nullable last_trade_spot_from_go_external cannot be null');
        }
        $this->container['last_trade_spot_from_go_external'] = $last_trade_spot_from_go_external;

        return $this;
    }

    /**
     * Gets last_trade_spot_from_polling
     *
     * @return object|null
     */
    public function getLastTradeSpotFromPolling()
    {
        return $this->container['last_trade_spot_from_polling'];
    }

    /**
     * Sets last_trade_spot_from_polling
     *
     * @param object|null $last_trade_spot_from_polling This is the last TRADE_SPOT that we have seen on the specific source type in internal format.
     *
     * @return self
     */
    public function setLastTradeSpotFromPolling($last_trade_spot_from_polling)
    {
        if (is_null($last_trade_spot_from_polling)) {
            throw new \InvalidArgumentException('non-nullable last_trade_spot_from_polling cannot be null');
        }
        $this->container['last_trade_spot_from_polling'] = $last_trade_spot_from_polling;

        return $this;
    }

    /**
     * Gets last_trade_spot_from_polling_external
     *
     * @return object|null
     */
    public function getLastTradeSpotFromPollingExternal()
    {
        return $this->container['last_trade_spot_from_polling_external'];
    }

    /**
     * Sets last_trade_spot_from_polling_external
     *
     * @param object|null $last_trade_spot_from_polling_external This is the last TRADE_SPOT that we have seen on the specific trade source in external format.
     *
     * @return self
     */
    public function setLastTradeSpotFromPollingExternal($last_trade_spot_from_polling_external)
    {
        if (is_null($last_trade_spot_from_polling_external)) {
            throw new \InvalidArgumentException('non-nullable last_trade_spot_from_polling_external cannot be null');
        }
        $this->container['last_trade_spot_from_polling_external'] = $last_trade_spot_from_polling_external;

        return $this;
    }

    /**
     * Gets last_trade_spot_from_streaming
     *
     * @return object|null
     */
    public function getLastTradeSpotFromStreaming()
    {
        return $this->container['last_trade_spot_from_streaming'];
    }

    /**
     * Sets last_trade_spot_from_streaming
     *
     * @param object|null $last_trade_spot_from_streaming This is the last TRADE_SPOT that we have seen on the specific source type in internal format.
     *
     * @return self
     */
    public function setLastTradeSpotFromStreaming($last_trade_spot_from_streaming)
    {
        if (is_null($last_trade_spot_from_streaming)) {
            throw new \InvalidArgumentException('non-nullable last_trade_spot_from_streaming cannot be null');
        }
        $this->container['last_trade_spot_from_streaming'] = $last_trade_spot_from_streaming;

        return $this;
    }

    /**
     * Gets last_trade_spot_from_streaming_external
     *
     * @return object|null
     */
    public function getLastTradeSpotFromStreamingExternal()
    {
        return $this->container['last_trade_spot_from_streaming_external'];
    }

    /**
     * Sets last_trade_spot_from_streaming_external
     *
     * @param object|null $last_trade_spot_from_streaming_external This is the last TRADE_SPOT that we have seen on the specific trade source in external format.
     *
     * @return self
     */
    public function setLastTradeSpotFromStreamingExternal($last_trade_spot_from_streaming_external)
    {
        if (is_null($last_trade_spot_from_streaming_external)) {
            throw new \InvalidArgumentException('non-nullable last_trade_spot_from_streaming_external cannot be null');
        }
        $this->container['last_trade_spot_from_streaming_external'] = $last_trade_spot_from_streaming_external;

        return $this;
    }

    /**
     * Gets metadata_version
     *
     * @return int|null
     */
    public function getMetadataVersion()
    {
        return $this->container['metadata_version'];
    }

    /**
     * Sets metadata_version
     *
     * @param int|null $metadata_version The version of metadata, used for version conversions/migrates.
     *
     * @return self
     */
    public function setMetadataVersion($metadata_version)
    {
        if (is_null($metadata_version)) {
            throw new \InvalidArgumentException('non-nullable metadata_version cannot be null');
        }
        $this->container['metadata_version'] = $metadata_version;

        return $this;
    }

    /**
     * Gets processing_trades_from_blob_status
     *
     * @return string|null
     */
    public function getProcessingTradesFromBlobStatus()
    {
        return $this->container['processing_trades_from_blob_status'];
    }

    /**
     * Sets processing_trades_from_blob_status
     *
     * @param string|null $processing_trades_from_blob_status This states the status of blob migration for this intrument on this exchange.
     *
     * @return self
     */
    public function setProcessingTradesFromBlobStatus($processing_trades_from_blob_status)
    {
        if (is_null($processing_trades_from_blob_status)) {
            throw new \InvalidArgumentException('non-nullable processing_trades_from_blob_status cannot be null');
        }
        $this->container['processing_trades_from_blob_status'] = $processing_trades_from_blob_status;

        return $this;
    }

    /**
     * Gets total_trades_spot
     *
     * @return int|null
     */
    public function getTotalTradesSpot()
    {
        return $this->container['total_trades_spot'];
    }

    /**
     * Sets total_trades_spot
     *
     * @param int|null $total_trades_spot This is both the CCSEQ and the total TRADES_SPOT we have processed on this instrument
     *
     * @return self
     */
    public function setTotalTradesSpot($total_trades_spot)
    {
        if (is_null($total_trades_spot)) {
            throw new \InvalidArgumentException('non-nullable total_trades_spot cannot be null');
        }
        $this->container['total_trades_spot'] = $total_trades_spot;

        return $this;
    }

    /**
     * Gets unstructured_trade_spot_from_backfill_internal_data
     *
     * @return object|null
     */
    public function getUnstructuredTradeSpotFromBackfillInternalData()
    {
        return $this->container['unstructured_trade_spot_from_backfill_internal_data'];
    }

    /**
     * Sets unstructured_trade_spot_from_backfill_internal_data
     *
     * @param object|null $unstructured_trade_spot_from_backfill_internal_data This is any extra helper TRADE_SPOT data that we would need for creating polling requests or subscribing with non standard information and anything that is very specific to one exchange API/Integration and it does not fit any of the other existing fields and is definitly only updated or written in only one service.
     *
     * @return self
     */
    public function setUnstructuredTradeSpotFromBackfillInternalData($unstructured_trade_spot_from_backfill_internal_data)
    {
        if (is_null($unstructured_trade_spot_from_backfill_internal_data)) {
            throw new \InvalidArgumentException('non-nullable unstructured_trade_spot_from_backfill_internal_data cannot be null');
        }
        $this->container['unstructured_trade_spot_from_backfill_internal_data'] = $unstructured_trade_spot_from_backfill_internal_data;

        return $this;
    }

    /**
     * Gets unstructured_trade_spot_from_blob_internal_data
     *
     * @return object|null
     */
    public function getUnstructuredTradeSpotFromBlobInternalData()
    {
        return $this->container['unstructured_trade_spot_from_blob_internal_data'];
    }

    /**
     * Sets unstructured_trade_spot_from_blob_internal_data
     *
     * @param object|null $unstructured_trade_spot_from_blob_internal_data This is any extra helper TRADE_SPOT data that we would need for creating polling requests or subscribing with non standard information and anything that is very specific to one exchange API/Integration and it does not fit any of the other existing fields and is definitly only updated or written in only one service.
     *
     * @return self
     */
    public function setUnstructuredTradeSpotFromBlobInternalData($unstructured_trade_spot_from_blob_internal_data)
    {
        if (is_null($unstructured_trade_spot_from_blob_internal_data)) {
            throw new \InvalidArgumentException('non-nullable unstructured_trade_spot_from_blob_internal_data cannot be null');
        }
        $this->container['unstructured_trade_spot_from_blob_internal_data'] = $unstructured_trade_spot_from_blob_internal_data;

        return $this;
    }

    /**
     * Gets unstructured_trade_spot_from_calculated_internal_data
     *
     * @return object|null
     */
    public function getUnstructuredTradeSpotFromCalculatedInternalData()
    {
        return $this->container['unstructured_trade_spot_from_calculated_internal_data'];
    }

    /**
     * Sets unstructured_trade_spot_from_calculated_internal_data
     *
     * @param object|null $unstructured_trade_spot_from_calculated_internal_data This is any extra helper TRADE_SPOT data that we would need for creating polling requests or subscribing with non standard information and anything that is very specific to one exchange API/Integration and it does not fit any of the other existing fields and is definitly only updated or written in only one service.
     *
     * @return self
     */
    public function setUnstructuredTradeSpotFromCalculatedInternalData($unstructured_trade_spot_from_calculated_internal_data)
    {
        if (is_null($unstructured_trade_spot_from_calculated_internal_data)) {
            throw new \InvalidArgumentException('non-nullable unstructured_trade_spot_from_calculated_internal_data cannot be null');
        }
        $this->container['unstructured_trade_spot_from_calculated_internal_data'] = $unstructured_trade_spot_from_calculated_internal_data;

        return $this;
    }

    /**
     * Gets unstructured_trade_spot_from_fix_internal_data
     *
     * @return object|null
     */
    public function getUnstructuredTradeSpotFromFixInternalData()
    {
        return $this->container['unstructured_trade_spot_from_fix_internal_data'];
    }

    /**
     * Sets unstructured_trade_spot_from_fix_internal_data
     *
     * @param object|null $unstructured_trade_spot_from_fix_internal_data This is any extra helper TRADE_SPOT data that we would need for creating polling requests or subscribing with non standard information and anything that is very specific to one exchange API/Integration and it does not fit any of the other existing fields and is definitly only updated or written in only one service.
     *
     * @return self
     */
    public function setUnstructuredTradeSpotFromFixInternalData($unstructured_trade_spot_from_fix_internal_data)
    {
        if (is_null($unstructured_trade_spot_from_fix_internal_data)) {
            throw new \InvalidArgumentException('non-nullable unstructured_trade_spot_from_fix_internal_data cannot be null');
        }
        $this->container['unstructured_trade_spot_from_fix_internal_data'] = $unstructured_trade_spot_from_fix_internal_data;

        return $this;
    }

    /**
     * Gets unstructured_trade_spot_from_go_internal_data
     *
     * @return object|null
     */
    public function getUnstructuredTradeSpotFromGoInternalData()
    {
        return $this->container['unstructured_trade_spot_from_go_internal_data'];
    }

    /**
     * Sets unstructured_trade_spot_from_go_internal_data
     *
     * @param object|null $unstructured_trade_spot_from_go_internal_data This is any extra helper TRADE_SPOT data that we would need for creating polling requests or subscribing with non standard information and anything that is very specific to one exchange API/Integration and it does not fit any of the other existing fields and is definitly only updated or written in only one service.
     *
     * @return self
     */
    public function setUnstructuredTradeSpotFromGoInternalData($unstructured_trade_spot_from_go_internal_data)
    {
        if (is_null($unstructured_trade_spot_from_go_internal_data)) {
            throw new \InvalidArgumentException('non-nullable unstructured_trade_spot_from_go_internal_data cannot be null');
        }
        $this->container['unstructured_trade_spot_from_go_internal_data'] = $unstructured_trade_spot_from_go_internal_data;

        return $this;
    }

    /**
     * Gets unstructured_trade_spot_from_polling_internal_data
     *
     * @return object|null
     */
    public function getUnstructuredTradeSpotFromPollingInternalData()
    {
        return $this->container['unstructured_trade_spot_from_polling_internal_data'];
    }

    /**
     * Sets unstructured_trade_spot_from_polling_internal_data
     *
     * @param object|null $unstructured_trade_spot_from_polling_internal_data This is any extra helper TRADE_SPOT data that we would need for creating polling requests or subscribing with non standard information and anything that is very specific to one exchange API/Integration and it does not fit any of the other existing fields and is definitly only updated or written in only one service.
     *
     * @return self
     */
    public function setUnstructuredTradeSpotFromPollingInternalData($unstructured_trade_spot_from_polling_internal_data)
    {
        if (is_null($unstructured_trade_spot_from_polling_internal_data)) {
            throw new \InvalidArgumentException('non-nullable unstructured_trade_spot_from_polling_internal_data cannot be null');
        }
        $this->container['unstructured_trade_spot_from_polling_internal_data'] = $unstructured_trade_spot_from_polling_internal_data;

        return $this;
    }

    /**
     * Gets unstructured_trade_spot_from_streaming_internal_data
     *
     * @return object|null
     */
    public function getUnstructuredTradeSpotFromStreamingInternalData()
    {
        return $this->container['unstructured_trade_spot_from_streaming_internal_data'];
    }

    /**
     * Sets unstructured_trade_spot_from_streaming_internal_data
     *
     * @param object|null $unstructured_trade_spot_from_streaming_internal_data This is any extra helper TRADE_SPOT data that we would need for creating polling requests or subscribing with non standard information and anything that is very specific to one exchange API/Integration and it does not fit any of the other existing fields and is definitly only updated or written in only one service.
     *
     * @return self
     */
    public function setUnstructuredTradeSpotFromStreamingInternalData($unstructured_trade_spot_from_streaming_internal_data)
    {
        if (is_null($unstructured_trade_spot_from_streaming_internal_data)) {
            throw new \InvalidArgumentException('non-nullable unstructured_trade_spot_from_streaming_internal_data cannot be null');
        }
        $this->container['unstructured_trade_spot_from_streaming_internal_data'] = $unstructured_trade_spot_from_streaming_internal_data;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


