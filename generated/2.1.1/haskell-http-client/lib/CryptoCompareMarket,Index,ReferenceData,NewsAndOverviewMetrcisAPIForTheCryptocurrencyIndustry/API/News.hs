{-
   CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry

   CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.

   OpenAPI Version: 3.0.3
   CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry API version: 2.1.1
   Contact: data@cryptocompare.com
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : CryptoCompareMarket,Index,ReferenceData,NewsAndOverviewMetrcisAPIForTheCryptocurrencyIndustry.API.News
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module CryptoCompareMarket,Index,ReferenceData,NewsAndOverviewMetrcisAPIForTheCryptocurrencyIndustry.API.News where

import CryptoCompareMarket,Index,ReferenceData,NewsAndOverviewMetrcisAPIForTheCryptocurrencyIndustry.Core
import CryptoCompareMarket,Index,ReferenceData,NewsAndOverviewMetrcisAPIForTheCryptocurrencyIndustry.MimeTypes
import CryptoCompareMarket,Index,ReferenceData,NewsAndOverviewMetrcisAPIForTheCryptocurrencyIndustry.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** News

-- *** newsV1ArticleList

-- | @GET \/news\/v1\/article\/list@
-- 
newsV1ArticleList
  :: CryptoCompareMarket,Index,ReferenceData,NewsAndOverviewMetrcisAPIForTheCryptocurrencyIndustryRequest NewsV1ArticleList MimeNoContent GENERICRESPONSE MimeJSON
newsV1ArticleList =
  _mkRequest "GET" ["/news/v1/article/list"]

data NewsV1ArticleList  

-- | /Optional Param/ "source_ids" - Get articles from specific sources; either by their ids or keys
instance HasOptionalParam NewsV1ArticleList SourceIds where
  applyOptionalParam req (SourceIds xs) =
    req `addQuery` toQueryColl CommaSeparated ("source_ids", Just xs)

-- | /Optional Param/ "lang" - The article Preferred language - English (EN), Portuguese (PT), Espanol (ES)
instance HasOptionalParam NewsV1ArticleList Lang where
  applyOptionalParam req (Lang xs) =
    req `addQuery` toQuery ("lang", Just xs)

-- | /Optional Param/ "categories" - News article categories to return
instance HasOptionalParam NewsV1ArticleList Categories where
  applyOptionalParam req (Categories xs) =
    req `addQuery` toQueryColl CommaSeparated ("categories", Just xs)

-- | /Optional Param/ "exclude_categories" - News article categories to exclude from results
instance HasOptionalParam NewsV1ArticleList ExcludeCategories where
  applyOptionalParam req (ExcludeCategories xs) =
    req `addQuery` toQueryColl CommaSeparated ("exclude_categories", Just xs)

-- | /Optional Param/ "to_ts" - Articles published on or before this timestamp
instance HasOptionalParam NewsV1ArticleList ToTs where
  applyOptionalParam req (ToTs xs) =
    req `addQuery` toQuery ("to_ts", Just xs)
-- | @application/json@
instance Produces NewsV1ArticleList MimeJSON


-- *** newsV1CategoryList

-- | @GET \/news\/v1\/category\/list@
-- 
newsV1CategoryList
  :: CryptoCompareMarket,Index,ReferenceData,NewsAndOverviewMetrcisAPIForTheCryptocurrencyIndustryRequest NewsV1CategoryList MimeNoContent GENERICRESPONSE MimeJSON
newsV1CategoryList =
  _mkRequest "GET" ["/news/v1/category/list"]

data NewsV1CategoryList  
-- | @application/json@
instance Produces NewsV1CategoryList MimeJSON


-- *** newsV1SourceList

-- | @GET \/news\/v1\/source\/list@
-- 
newsV1SourceList
  :: CryptoCompareMarket,Index,ReferenceData,NewsAndOverviewMetrcisAPIForTheCryptocurrencyIndustryRequest NewsV1SourceList MimeNoContent GENERICRESPONSE MimeJSON
newsV1SourceList =
  _mkRequest "GET" ["/news/v1/source/list"]

data NewsV1SourceList  

-- | /Optional Param/ "lang" - The article source Preferred language - English (EN), Portuguese (PT), Espanol (ES)
instance HasOptionalParam NewsV1SourceList Lang where
  applyOptionalParam req (Lang xs) =
    req `addQuery` toQuery ("lang", Just xs)

-- | /Optional Param/ "type" - RSS, API, TWITTER
instance HasOptionalParam NewsV1SourceList ParamType where
  applyOptionalParam req (ParamType xs) =
    req `addQuery` toQuery ("type", Just xs)

-- | /Optional Param/ "status" - The status for the  article source entry. Allowed values: ACTIVE, INACTIVE
instance HasOptionalParam NewsV1SourceList Status where
  applyOptionalParam req (Status xs) =
    req `addQuery` toQuery ("status", Just xs)
-- | @application/json@
instance Produces NewsV1SourceList MimeJSON

