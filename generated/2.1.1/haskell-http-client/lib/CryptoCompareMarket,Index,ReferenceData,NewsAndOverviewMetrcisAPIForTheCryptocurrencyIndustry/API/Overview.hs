{-
   CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry

   CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.

   OpenAPI Version: 3.0.3
   CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry API version: 2.1.1
   Contact: data@cryptocompare.com
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : CryptoCompareMarket,Index,ReferenceData,NewsAndOverviewMetrcisAPIForTheCryptocurrencyIndustry.API.Overview
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module CryptoCompareMarket,Index,ReferenceData,NewsAndOverviewMetrcisAPIForTheCryptocurrencyIndustry.API.Overview where

import CryptoCompareMarket,Index,ReferenceData,NewsAndOverviewMetrcisAPIForTheCryptocurrencyIndustry.Core
import CryptoCompareMarket,Index,ReferenceData,NewsAndOverviewMetrcisAPIForTheCryptocurrencyIndustry.MimeTypes
import CryptoCompareMarket,Index,ReferenceData,NewsAndOverviewMetrcisAPIForTheCryptocurrencyIndustry.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Overview

-- *** overviewV1HistoricalMarketcapAllAssetsDays

-- | @GET \/overview\/v1\/historical\/marketcap\/all\/assets\/days@
-- 
overviewV1HistoricalMarketcapAllAssetsDays
  :: CryptoCompareMarket,Index,ReferenceData,NewsAndOverviewMetrcisAPIForTheCryptocurrencyIndustryRequest OverviewV1HistoricalMarketcapAllAssetsDays MimeNoContent GENERICRESPONSE MimeJSON
overviewV1HistoricalMarketcapAllAssetsDays =
  _mkRequest "GET" ["/overview/v1/historical/marketcap/all/assets/days"]

data OverviewV1HistoricalMarketcapAllAssetsDays  

-- | /Optional Param/ "groups" - When requesting all market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME
instance HasOptionalParam OverviewV1HistoricalMarketcapAllAssetsDays GroupsText where
  applyOptionalParam req (GroupsText xs) =
    req `addQuery` toQueryColl CommaSeparated ("groups", Just xs)

-- | /Optional Param/ "limit" - The number of data points to return
instance HasOptionalParam OverviewV1HistoricalMarketcapAllAssetsDays Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | /Optional Param/ "to_ts" - Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}
instance HasOptionalParam OverviewV1HistoricalMarketcapAllAssetsDays ToTs where
  applyOptionalParam req (ToTs xs) =
    req `addQuery` toQuery ("to_ts", Just xs)

-- | /Optional Param/ "aggregate" - The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
instance HasOptionalParam OverviewV1HistoricalMarketcapAllAssetsDays Aggregate where
  applyOptionalParam req (Aggregate xs) =
    req `addQuery` toQuery ("aggregate", Just xs)

-- | /Optional Param/ "fill" - Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
instance HasOptionalParam OverviewV1HistoricalMarketcapAllAssetsDays Fill where
  applyOptionalParam req (Fill xs) =
    req `addQuery` toQuery ("fill", Just xs)

-- | /Optional Param/ "response_format" - The format of the data response in uppercase. It can be one of the following: JSON,CSV
instance HasOptionalParam OverviewV1HistoricalMarketcapAllAssetsDays ResponseFormat where
  applyOptionalParam req (ResponseFormat xs) =
    req `addQuery` toQuery ("response_format", Just xs)
-- | @application/json@
instance Produces OverviewV1HistoricalMarketcapAllAssetsDays MimeJSON


-- *** overviewV1HistoricalMarketcapAllAssetsHours

-- | @GET \/overview\/v1\/historical\/marketcap\/all\/assets\/hours@
-- 
overviewV1HistoricalMarketcapAllAssetsHours
  :: CryptoCompareMarket,Index,ReferenceData,NewsAndOverviewMetrcisAPIForTheCryptocurrencyIndustryRequest OverviewV1HistoricalMarketcapAllAssetsHours MimeNoContent GENERICRESPONSE MimeJSON
overviewV1HistoricalMarketcapAllAssetsHours =
  _mkRequest "GET" ["/overview/v1/historical/marketcap/all/assets/hours"]

data OverviewV1HistoricalMarketcapAllAssetsHours  

-- | /Optional Param/ "groups" - When requesting all market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME
instance HasOptionalParam OverviewV1HistoricalMarketcapAllAssetsHours GroupsText where
  applyOptionalParam req (GroupsText xs) =
    req `addQuery` toQueryColl CommaSeparated ("groups", Just xs)

-- | /Optional Param/ "limit" - The number of data points to return
instance HasOptionalParam OverviewV1HistoricalMarketcapAllAssetsHours Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | /Optional Param/ "to_ts" - Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}
instance HasOptionalParam OverviewV1HistoricalMarketcapAllAssetsHours ToTs where
  applyOptionalParam req (ToTs xs) =
    req `addQuery` toQuery ("to_ts", Just xs)

-- | /Optional Param/ "aggregate" - The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
instance HasOptionalParam OverviewV1HistoricalMarketcapAllAssetsHours Aggregate where
  applyOptionalParam req (Aggregate xs) =
    req `addQuery` toQuery ("aggregate", Just xs)

-- | /Optional Param/ "fill" - Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
instance HasOptionalParam OverviewV1HistoricalMarketcapAllAssetsHours Fill where
  applyOptionalParam req (Fill xs) =
    req `addQuery` toQuery ("fill", Just xs)

-- | /Optional Param/ "response_format" - The format of the data response in uppercase. It can be one of the following: JSON,CSV
instance HasOptionalParam OverviewV1HistoricalMarketcapAllAssetsHours ResponseFormat where
  applyOptionalParam req (ResponseFormat xs) =
    req `addQuery` toQuery ("response_format", Just xs)
-- | @application/json@
instance Produces OverviewV1HistoricalMarketcapAllAssetsHours MimeJSON


-- *** overviewV1HistoricalMarketcapFtwAssetsDays

-- | @GET \/overview\/v1\/historical\/marketcap\/ftw\/assets\/days@
-- 
overviewV1HistoricalMarketcapFtwAssetsDays
  :: CryptoCompareMarket,Index,ReferenceData,NewsAndOverviewMetrcisAPIForTheCryptocurrencyIndustryRequest OverviewV1HistoricalMarketcapFtwAssetsDays MimeNoContent GENERICRESPONSE MimeJSON
overviewV1HistoricalMarketcapFtwAssetsDays =
  _mkRequest "GET" ["/overview/v1/historical/marketcap/ftw/assets/days"]

data OverviewV1HistoricalMarketcapFtwAssetsDays  

-- | /Optional Param/ "groups" - When requesting ftw universe market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME
instance HasOptionalParam OverviewV1HistoricalMarketcapFtwAssetsDays GroupsText where
  applyOptionalParam req (GroupsText xs) =
    req `addQuery` toQueryColl CommaSeparated ("groups", Just xs)

-- | /Optional Param/ "limit" - The number of data points to return
instance HasOptionalParam OverviewV1HistoricalMarketcapFtwAssetsDays Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | /Optional Param/ "to_ts" - Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}
instance HasOptionalParam OverviewV1HistoricalMarketcapFtwAssetsDays ToTs where
  applyOptionalParam req (ToTs xs) =
    req `addQuery` toQuery ("to_ts", Just xs)

-- | /Optional Param/ "aggregate" - The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
instance HasOptionalParam OverviewV1HistoricalMarketcapFtwAssetsDays Aggregate where
  applyOptionalParam req (Aggregate xs) =
    req `addQuery` toQuery ("aggregate", Just xs)

-- | /Optional Param/ "fill" - Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
instance HasOptionalParam OverviewV1HistoricalMarketcapFtwAssetsDays Fill where
  applyOptionalParam req (Fill xs) =
    req `addQuery` toQuery ("fill", Just xs)

-- | /Optional Param/ "response_format" - The format of the data response in uppercase. It can be one of the following: JSON,CSV
instance HasOptionalParam OverviewV1HistoricalMarketcapFtwAssetsDays ResponseFormat where
  applyOptionalParam req (ResponseFormat xs) =
    req `addQuery` toQuery ("response_format", Just xs)
-- | @application/json@
instance Produces OverviewV1HistoricalMarketcapFtwAssetsDays MimeJSON


-- *** overviewV1HistoricalMarketcapFtwAssetsHours

-- | @GET \/overview\/v1\/historical\/marketcap\/ftw\/assets\/hours@
-- 
overviewV1HistoricalMarketcapFtwAssetsHours
  :: CryptoCompareMarket,Index,ReferenceData,NewsAndOverviewMetrcisAPIForTheCryptocurrencyIndustryRequest OverviewV1HistoricalMarketcapFtwAssetsHours MimeNoContent GENERICRESPONSE MimeJSON
overviewV1HistoricalMarketcapFtwAssetsHours =
  _mkRequest "GET" ["/overview/v1/historical/marketcap/ftw/assets/hours"]

data OverviewV1HistoricalMarketcapFtwAssetsHours  

-- | /Optional Param/ "groups" - When requesting ftw universe market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME
instance HasOptionalParam OverviewV1HistoricalMarketcapFtwAssetsHours GroupsText where
  applyOptionalParam req (GroupsText xs) =
    req `addQuery` toQueryColl CommaSeparated ("groups", Just xs)

-- | /Optional Param/ "limit" - The number of data points to return
instance HasOptionalParam OverviewV1HistoricalMarketcapFtwAssetsHours Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)

-- | /Optional Param/ "to_ts" - Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}
instance HasOptionalParam OverviewV1HistoricalMarketcapFtwAssetsHours ToTs where
  applyOptionalParam req (ToTs xs) =
    req `addQuery` toQuery ("to_ts", Just xs)

-- | /Optional Param/ "aggregate" - The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
instance HasOptionalParam OverviewV1HistoricalMarketcapFtwAssetsHours Aggregate where
  applyOptionalParam req (Aggregate xs) =
    req `addQuery` toQuery ("aggregate", Just xs)

-- | /Optional Param/ "fill" - Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
instance HasOptionalParam OverviewV1HistoricalMarketcapFtwAssetsHours Fill where
  applyOptionalParam req (Fill xs) =
    req `addQuery` toQuery ("fill", Just xs)

-- | /Optional Param/ "response_format" - The format of the data response in uppercase. It can be one of the following: JSON,CSV
instance HasOptionalParam OverviewV1HistoricalMarketcapFtwAssetsHours ResponseFormat where
  applyOptionalParam req (ResponseFormat xs) =
    req `addQuery` toQuery ("response_format", Just xs)
-- | @application/json@
instance Produces OverviewV1HistoricalMarketcapFtwAssetsHours MimeJSON


-- *** overviewV1LatestMarketcapAllTick

-- | @GET \/overview\/v1\/latest\/marketcap\/all\/tick@
-- 
overviewV1LatestMarketcapAllTick
  :: CryptoCompareMarket,Index,ReferenceData,NewsAndOverviewMetrcisAPIForTheCryptocurrencyIndustryRequest OverviewV1LatestMarketcapAllTick MimeNoContent GENERICRESPONSE MimeJSON
overviewV1LatestMarketcapAllTick =
  _mkRequest "GET" ["/overview/v1/latest/marketcap/all/tick"]

data OverviewV1LatestMarketcapAllTick  

-- | /Optional Param/ "groups" - When requesting all market cap tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,MOVING_24_HOUR
instance HasOptionalParam OverviewV1LatestMarketcapAllTick GroupsText where
  applyOptionalParam req (GroupsText xs) =
    req `addQuery` toQueryColl CommaSeparated ("groups", Just xs)
-- | @application/json@
instance Produces OverviewV1LatestMarketcapAllTick MimeJSON


-- *** overviewV1LatestMarketcapFtwTick

-- | @GET \/overview\/v1\/latest\/marketcap\/ftw\/tick@
-- 
overviewV1LatestMarketcapFtwTick
  :: CryptoCompareMarket,Index,ReferenceData,NewsAndOverviewMetrcisAPIForTheCryptocurrencyIndustryRequest OverviewV1LatestMarketcapFtwTick MimeNoContent GENERICRESPONSE MimeJSON
overviewV1LatestMarketcapFtwTick =
  _mkRequest "GET" ["/overview/v1/latest/marketcap/ftw/tick"]

data OverviewV1LatestMarketcapFtwTick  

-- | /Optional Param/ "groups" - When requesting ftw universe market cap tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,MOVING_24_HOUR
instance HasOptionalParam OverviewV1LatestMarketcapFtwTick GroupsText where
  applyOptionalParam req (GroupsText xs) =
    req `addQuery` toQueryColl CommaSeparated ("groups", Just xs)
-- | @application/json@
instance Produces OverviewV1LatestMarketcapFtwTick MimeJSON

