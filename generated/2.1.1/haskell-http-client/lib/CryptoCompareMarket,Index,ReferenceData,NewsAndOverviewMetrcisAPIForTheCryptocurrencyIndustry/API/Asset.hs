{-
   CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry

   CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.

   OpenAPI Version: 3.0.3
   CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry API version: 2.1.1
   Contact: data@cryptocompare.com
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : CryptoCompareMarket,Index,ReferenceData,NewsAndOverviewMetrcisAPIForTheCryptocurrencyIndustry.API.Asset
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module CryptoCompareMarket,Index,ReferenceData,NewsAndOverviewMetrcisAPIForTheCryptocurrencyIndustry.API.Asset where

import CryptoCompareMarket,Index,ReferenceData,NewsAndOverviewMetrcisAPIForTheCryptocurrencyIndustry.Core
import CryptoCompareMarket,Index,ReferenceData,NewsAndOverviewMetrcisAPIForTheCryptocurrencyIndustry.MimeTypes
import CryptoCompareMarket,Index,ReferenceData,NewsAndOverviewMetrcisAPIForTheCryptocurrencyIndustry.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Asset

-- *** assetV1DataByAddress

-- | @GET \/asset\/v1\/data\/by\/address@
-- 
assetV1DataByAddress
  :: Address -- ^ "address"
  -> ChainSymbol -- ^ "chainSymbol"
  -> CryptoCompareMarket,Index,ReferenceData,NewsAndOverviewMetrcisAPIForTheCryptocurrencyIndustryRequest AssetV1DataByAddress MimeNoContent GENERICRESPONSE MimeJSON
assetV1DataByAddress (Address address) (ChainSymbol chainSymbol) =
  _mkRequest "GET" ["/asset/v1/data/by/address"]
    `addQuery` toQuery ("address", Just address)
    `addQuery` toQuery ("chain_symbol", Just chainSymbol)

data AssetV1DataByAddress  
instance HasOptionalParam AssetV1DataByAddress Groups where
  applyOptionalParam req (Groups xs) =
    req `addQuery` toQuery ("groups", Just xs)
-- | @application/json@
instance Produces AssetV1DataByAddress MimeJSON


-- *** assetV1DataById

-- | @GET \/asset\/v1\/data\/by\/id@
-- 
assetV1DataById
  :: AssetId -- ^ "assetId" -  The asset id you are interested in
  -> CryptoCompareMarket,Index,ReferenceData,NewsAndOverviewMetrcisAPIForTheCryptocurrencyIndustryRequest AssetV1DataById MimeNoContent GENERICRESPONSE MimeJSON
assetV1DataById (AssetId assetId) =
  _mkRequest "GET" ["/asset/v1/data/by/id"]
    `addQuery` toQuery ("asset_id", Just assetId)

data AssetV1DataById  
instance HasOptionalParam AssetV1DataById Groups where
  applyOptionalParam req (Groups xs) =
    req `addQuery` toQuery ("groups", Just xs)
-- | @application/json@
instance Produces AssetV1DataById MimeJSON


-- *** assetV1DataBySymbol

-- | @GET \/asset\/v1\/data\/by\/symbol@
-- 
assetV1DataBySymbol
  :: AssetSymbol -- ^ "assetSymbol" -  The asset symbol you are interested in
  -> CryptoCompareMarket,Index,ReferenceData,NewsAndOverviewMetrcisAPIForTheCryptocurrencyIndustryRequest AssetV1DataBySymbol MimeNoContent GENERICRESPONSE MimeJSON
assetV1DataBySymbol (AssetSymbol assetSymbol) =
  _mkRequest "GET" ["/asset/v1/data/by/symbol"]
    `addQuery` toQuery ("asset_symbol", Just assetSymbol)

data AssetV1DataBySymbol  
instance HasOptionalParam AssetV1DataBySymbol Groups where
  applyOptionalParam req (Groups xs) =
    req `addQuery` toQuery ("groups", Just xs)
-- | @application/json@
instance Produces AssetV1DataBySymbol MimeJSON


-- *** assetV1TopList

-- | @GET \/asset\/v1\/top\/list@
-- 
assetV1TopList
  :: CryptoCompareMarket,Index,ReferenceData,NewsAndOverviewMetrcisAPIForTheCryptocurrencyIndustryRequest AssetV1TopList MimeNoContent GENERICRESPONSE MimeJSON
assetV1TopList =
  _mkRequest "GET" ["/asset/v1/top/list"]

data AssetV1TopList  

-- | /Optional Param/ "page" - The page number for the request to get {page_size} coins at the time.
instance HasOptionalParam AssetV1TopList Page where
  applyOptionalParam req (Page xs) =
    req `addQuery` toQuery ("page", Just xs)

-- | /Optional Param/ "page_size" - The number of items returned per page
instance HasOptionalParam AssetV1TopList PageSize where
  applyOptionalParam req (PageSize xs) =
    req `addQuery` toQuery ("page_size", Just xs)

-- | /Optional Param/ "asset_type" - The asset class/type
instance HasOptionalParam AssetV1TopList AssetType where
  applyOptionalParam req (AssetType xs) =
    req `addQuery` toQuery ("asset_type", Just xs)

-- | /Optional Param/ "sort_by" - Sort by field ( CREATED_ON,UPDATED_ON,SYMBOL )
instance HasOptionalParam AssetV1TopList SortBy where
  applyOptionalParam req (SortBy xs) =
    req `addQuery` toQuery ("sort_by", Just xs)

-- | /Optional Param/ "sort_direction" - Sort direction ( DESC,ASC )
instance HasOptionalParam AssetV1TopList SortDirection where
  applyOptionalParam req (SortDirection xs) =
    req `addQuery` toQuery ("sort_direction", Just xs)
instance HasOptionalParam AssetV1TopList Groups where
  applyOptionalParam req (Groups xs) =
    req `addQuery` toQuery ("groups", Just xs)
-- | @application/json@
instance Produces AssetV1TopList MimeJSON

