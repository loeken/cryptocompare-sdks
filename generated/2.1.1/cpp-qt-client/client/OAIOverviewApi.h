/**
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 * CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: data@cryptocompare.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOverviewApi_H
#define OAI_OAIOverviewApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAIGENERIC_RESPONSE.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOverviewApi : public QObject {
    Q_OBJECT

public:
    OAIOverviewApi(const int timeOut = 0);
    ~OAIOverviewApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  groups QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  to_ts qint32 [optional]
    * @param[in]  aggregate qint32 [optional]
    * @param[in]  fill bool [optional]
    * @param[in]  response_format QString [optional]
    */
    void overviewV1HistoricalMarketcapAllAssetsDays(const ::OpenAPI::OptionalParam<QList<QString>> &groups = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &to_ts = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &aggregate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &fill = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &response_format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  groups QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  to_ts qint32 [optional]
    * @param[in]  aggregate qint32 [optional]
    * @param[in]  fill bool [optional]
    * @param[in]  response_format QString [optional]
    */
    void overviewV1HistoricalMarketcapAllAssetsHours(const ::OpenAPI::OptionalParam<QList<QString>> &groups = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &to_ts = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &aggregate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &fill = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &response_format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  groups QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  to_ts qint32 [optional]
    * @param[in]  aggregate qint32 [optional]
    * @param[in]  fill bool [optional]
    * @param[in]  response_format QString [optional]
    */
    void overviewV1HistoricalMarketcapFtwAssetsDays(const ::OpenAPI::OptionalParam<QList<QString>> &groups = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &to_ts = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &aggregate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &fill = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &response_format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  groups QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  to_ts qint32 [optional]
    * @param[in]  aggregate qint32 [optional]
    * @param[in]  fill bool [optional]
    * @param[in]  response_format QString [optional]
    */
    void overviewV1HistoricalMarketcapFtwAssetsHours(const ::OpenAPI::OptionalParam<QList<QString>> &groups = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &to_ts = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &aggregate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &fill = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &response_format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  groups QList<QString> [optional]
    */
    void overviewV1LatestMarketcapAllTick(const ::OpenAPI::OptionalParam<QList<QString>> &groups = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  groups QList<QString> [optional]
    */
    void overviewV1LatestMarketcapFtwTick(const ::OpenAPI::OptionalParam<QList<QString>> &groups = ::OpenAPI::OptionalParam<QList<QString>>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void overviewV1HistoricalMarketcapAllAssetsDaysCallback(OAIHttpRequestWorker *worker);
    void overviewV1HistoricalMarketcapAllAssetsHoursCallback(OAIHttpRequestWorker *worker);
    void overviewV1HistoricalMarketcapFtwAssetsDaysCallback(OAIHttpRequestWorker *worker);
    void overviewV1HistoricalMarketcapFtwAssetsHoursCallback(OAIHttpRequestWorker *worker);
    void overviewV1LatestMarketcapAllTickCallback(OAIHttpRequestWorker *worker);
    void overviewV1LatestMarketcapFtwTickCallback(OAIHttpRequestWorker *worker);

signals:

    void overviewV1HistoricalMarketcapAllAssetsDaysSignal(OAIGENERIC_RESPONSE summary);
    void overviewV1HistoricalMarketcapAllAssetsHoursSignal(OAIGENERIC_RESPONSE summary);
    void overviewV1HistoricalMarketcapFtwAssetsDaysSignal(OAIGENERIC_RESPONSE summary);
    void overviewV1HistoricalMarketcapFtwAssetsHoursSignal(OAIGENERIC_RESPONSE summary);
    void overviewV1LatestMarketcapAllTickSignal(OAIGENERIC_RESPONSE summary);
    void overviewV1LatestMarketcapFtwTickSignal(OAIGENERIC_RESPONSE summary);

    void overviewV1HistoricalMarketcapAllAssetsDaysSignalFull(OAIHttpRequestWorker *worker, OAIGENERIC_RESPONSE summary);
    void overviewV1HistoricalMarketcapAllAssetsHoursSignalFull(OAIHttpRequestWorker *worker, OAIGENERIC_RESPONSE summary);
    void overviewV1HistoricalMarketcapFtwAssetsDaysSignalFull(OAIHttpRequestWorker *worker, OAIGENERIC_RESPONSE summary);
    void overviewV1HistoricalMarketcapFtwAssetsHoursSignalFull(OAIHttpRequestWorker *worker, OAIGENERIC_RESPONSE summary);
    void overviewV1LatestMarketcapAllTickSignalFull(OAIHttpRequestWorker *worker, OAIGENERIC_RESPONSE summary);
    void overviewV1LatestMarketcapFtwTickSignalFull(OAIHttpRequestWorker *worker, OAIGENERIC_RESPONSE summary);

    void overviewV1HistoricalMarketcapAllAssetsDaysSignalE(OAIGENERIC_RESPONSE summary, QNetworkReply::NetworkError error_type, QString error_str);
    void overviewV1HistoricalMarketcapAllAssetsHoursSignalE(OAIGENERIC_RESPONSE summary, QNetworkReply::NetworkError error_type, QString error_str);
    void overviewV1HistoricalMarketcapFtwAssetsDaysSignalE(OAIGENERIC_RESPONSE summary, QNetworkReply::NetworkError error_type, QString error_str);
    void overviewV1HistoricalMarketcapFtwAssetsHoursSignalE(OAIGENERIC_RESPONSE summary, QNetworkReply::NetworkError error_type, QString error_str);
    void overviewV1LatestMarketcapAllTickSignalE(OAIGENERIC_RESPONSE summary, QNetworkReply::NetworkError error_type, QString error_str);
    void overviewV1LatestMarketcapFtwTickSignalE(OAIGENERIC_RESPONSE summary, QNetworkReply::NetworkError error_type, QString error_str);

    void overviewV1HistoricalMarketcapAllAssetsDaysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void overviewV1HistoricalMarketcapAllAssetsHoursSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void overviewV1HistoricalMarketcapFtwAssetsDaysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void overviewV1HistoricalMarketcapFtwAssetsHoursSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void overviewV1LatestMarketcapAllTickSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void overviewV1LatestMarketcapFtwTickSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public slots:
    void tokenAvailable();
    
};

} // namespace OpenAPI
#endif
