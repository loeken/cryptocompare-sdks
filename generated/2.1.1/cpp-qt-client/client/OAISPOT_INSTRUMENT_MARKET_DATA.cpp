/**
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 * CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: data@cryptocompare.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISPOT_INSTRUMENT_MARKET_DATA.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISPOT_INSTRUMENT_MARKET_DATA::OAISPOT_INSTRUMENT_MARKET_DATA(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISPOT_INSTRUMENT_MARKET_DATA::OAISPOT_INSTRUMENT_MARKET_DATA() {
    this->initializeModel();
}

OAISPOT_INSTRUMENT_MARKET_DATA::~OAISPOT_INSTRUMENT_MARKET_DATA() {}

void OAISPOT_INSTRUMENT_MARKET_DATA::initializeModel() {

    m_base_isSet = false;
    m_base_isValid = false;

    m_ccseq_isSet = false;
    m_ccseq_isValid = false;

    m_current_day_high_isSet = false;
    m_current_day_high_isValid = false;

    m_current_day_low_isSet = false;
    m_current_day_low_isValid = false;

    m_current_day_open_isSet = false;
    m_current_day_open_isValid = false;

    m_current_day_quote_volume_isSet = false;
    m_current_day_quote_volume_isValid = false;

    m_current_day_quote_volume_buy_isSet = false;
    m_current_day_quote_volume_buy_isValid = false;

    m_current_day_quote_volume_sell_isSet = false;
    m_current_day_quote_volume_sell_isValid = false;

    m_current_day_quote_volume_unknown_isSet = false;
    m_current_day_quote_volume_unknown_isValid = false;

    m_current_day_total_trades_isSet = false;
    m_current_day_total_trades_isValid = false;

    m_current_day_total_trades_buy_isSet = false;
    m_current_day_total_trades_buy_isValid = false;

    m_current_day_total_trades_sell_isSet = false;
    m_current_day_total_trades_sell_isValid = false;

    m_current_day_total_trades_unknown_isSet = false;
    m_current_day_total_trades_unknown_isValid = false;

    m_current_day_volume_isSet = false;
    m_current_day_volume_isValid = false;

    m_current_day_volume_buy_isSet = false;
    m_current_day_volume_buy_isValid = false;

    m_current_day_volume_sell_isSet = false;
    m_current_day_volume_sell_isValid = false;

    m_current_day_volume_unknown_isSet = false;
    m_current_day_volume_unknown_isValid = false;

    m_current_hour_high_isSet = false;
    m_current_hour_high_isValid = false;

    m_current_hour_low_isSet = false;
    m_current_hour_low_isValid = false;

    m_current_hour_open_isSet = false;
    m_current_hour_open_isValid = false;

    m_current_hour_quote_volume_isSet = false;
    m_current_hour_quote_volume_isValid = false;

    m_current_hour_quote_volume_buy_isSet = false;
    m_current_hour_quote_volume_buy_isValid = false;

    m_current_hour_quote_volume_sell_isSet = false;
    m_current_hour_quote_volume_sell_isValid = false;

    m_current_hour_quote_volume_unknown_isSet = false;
    m_current_hour_quote_volume_unknown_isValid = false;

    m_current_hour_total_trades_isSet = false;
    m_current_hour_total_trades_isValid = false;

    m_current_hour_total_trades_buy_isSet = false;
    m_current_hour_total_trades_buy_isValid = false;

    m_current_hour_total_trades_sell_isSet = false;
    m_current_hour_total_trades_sell_isValid = false;

    m_current_hour_total_trades_unknown_isSet = false;
    m_current_hour_total_trades_unknown_isValid = false;

    m_current_hour_volume_isSet = false;
    m_current_hour_volume_isValid = false;

    m_current_hour_volume_buy_isSet = false;
    m_current_hour_volume_buy_isValid = false;

    m_current_hour_volume_sell_isSet = false;
    m_current_hour_volume_sell_isValid = false;

    m_current_hour_volume_unknown_isSet = false;
    m_current_hour_volume_unknown_isValid = false;

    m_current_month_high_isSet = false;
    m_current_month_high_isValid = false;

    m_current_month_low_isSet = false;
    m_current_month_low_isValid = false;

    m_current_month_open_isSet = false;
    m_current_month_open_isValid = false;

    m_current_month_quote_volume_isSet = false;
    m_current_month_quote_volume_isValid = false;

    m_current_month_quote_volume_buy_isSet = false;
    m_current_month_quote_volume_buy_isValid = false;

    m_current_month_quote_volume_sell_isSet = false;
    m_current_month_quote_volume_sell_isValid = false;

    m_current_month_quote_volume_unknown_isSet = false;
    m_current_month_quote_volume_unknown_isValid = false;

    m_current_month_total_trades_isSet = false;
    m_current_month_total_trades_isValid = false;

    m_current_month_total_trades_buy_isSet = false;
    m_current_month_total_trades_buy_isValid = false;

    m_current_month_total_trades_sell_isSet = false;
    m_current_month_total_trades_sell_isValid = false;

    m_current_month_total_trades_unknown_isSet = false;
    m_current_month_total_trades_unknown_isValid = false;

    m_current_month_volume_isSet = false;
    m_current_month_volume_isValid = false;

    m_current_month_volume_buy_isSet = false;
    m_current_month_volume_buy_isValid = false;

    m_current_month_volume_sell_isSet = false;
    m_current_month_volume_sell_isValid = false;

    m_current_month_volume_unknown_isSet = false;
    m_current_month_volume_unknown_isValid = false;

    m_current_week_high_isSet = false;
    m_current_week_high_isValid = false;

    m_current_week_low_isSet = false;
    m_current_week_low_isValid = false;

    m_current_week_open_isSet = false;
    m_current_week_open_isValid = false;

    m_current_week_quote_volume_isSet = false;
    m_current_week_quote_volume_isValid = false;

    m_current_week_quote_volume_buy_isSet = false;
    m_current_week_quote_volume_buy_isValid = false;

    m_current_week_quote_volume_sell_isSet = false;
    m_current_week_quote_volume_sell_isValid = false;

    m_current_week_quote_volume_unknown_isSet = false;
    m_current_week_quote_volume_unknown_isValid = false;

    m_current_week_total_trades_isSet = false;
    m_current_week_total_trades_isValid = false;

    m_current_week_total_trades_buy_isSet = false;
    m_current_week_total_trades_buy_isValid = false;

    m_current_week_total_trades_sell_isSet = false;
    m_current_week_total_trades_sell_isValid = false;

    m_current_week_total_trades_unknown_isSet = false;
    m_current_week_total_trades_unknown_isValid = false;

    m_current_week_volume_isSet = false;
    m_current_week_volume_isValid = false;

    m_current_week_volume_buy_isSet = false;
    m_current_week_volume_buy_isValid = false;

    m_current_week_volume_sell_isSet = false;
    m_current_week_volume_sell_isValid = false;

    m_current_week_volume_unknown_isSet = false;
    m_current_week_volume_unknown_isValid = false;

    m_current_year_high_isSet = false;
    m_current_year_high_isValid = false;

    m_current_year_low_isSet = false;
    m_current_year_low_isValid = false;

    m_current_year_open_isSet = false;
    m_current_year_open_isValid = false;

    m_current_year_quote_volume_isSet = false;
    m_current_year_quote_volume_isValid = false;

    m_current_year_quote_volume_buy_isSet = false;
    m_current_year_quote_volume_buy_isValid = false;

    m_current_year_quote_volume_sell_isSet = false;
    m_current_year_quote_volume_sell_isValid = false;

    m_current_year_quote_volume_unknown_isSet = false;
    m_current_year_quote_volume_unknown_isValid = false;

    m_current_year_total_trades_isSet = false;
    m_current_year_total_trades_isValid = false;

    m_current_year_total_trades_buy_isSet = false;
    m_current_year_total_trades_buy_isValid = false;

    m_current_year_total_trades_sell_isSet = false;
    m_current_year_total_trades_sell_isValid = false;

    m_current_year_total_trades_unknown_isSet = false;
    m_current_year_total_trades_unknown_isValid = false;

    m_current_year_volume_isSet = false;
    m_current_year_volume_isValid = false;

    m_current_year_volume_buy_isSet = false;
    m_current_year_volume_buy_isValid = false;

    m_current_year_volume_sell_isSet = false;
    m_current_year_volume_sell_isValid = false;

    m_current_year_volume_unknown_isSet = false;
    m_current_year_volume_unknown_isValid = false;

    m_instrument_isSet = false;
    m_instrument_isValid = false;

    m_last_processed_trade_ccseq_isSet = false;
    m_last_processed_trade_ccseq_isValid = false;

    m_last_processed_trade_price_isSet = false;
    m_last_processed_trade_price_isValid = false;

    m_last_processed_trade_quantity_isSet = false;
    m_last_processed_trade_quantity_isValid = false;

    m_last_processed_trade_quote_quantity_isSet = false;
    m_last_processed_trade_quote_quantity_isValid = false;

    m_last_processed_trade_side_isSet = false;
    m_last_processed_trade_side_isValid = false;

    m_last_processed_trade_ts_isSet = false;
    m_last_processed_trade_ts_isValid = false;

    m_last_trade_ccseq_isSet = false;
    m_last_trade_ccseq_isValid = false;

    m_last_trade_id_isSet = false;
    m_last_trade_id_isValid = false;

    m_last_trade_quantity_isSet = false;
    m_last_trade_quantity_isValid = false;

    m_last_trade_quote_quantity_isSet = false;
    m_last_trade_quote_quantity_isValid = false;

    m_last_trade_side_isSet = false;
    m_last_trade_side_isValid = false;

    m_lifetime_first_trade_ts_isSet = false;
    m_lifetime_first_trade_ts_isValid = false;

    m_lifetime_high_isSet = false;
    m_lifetime_high_isValid = false;

    m_lifetime_high_ts_isSet = false;
    m_lifetime_high_ts_isValid = false;

    m_lifetime_low_isSet = false;
    m_lifetime_low_isValid = false;

    m_lifetime_low_ts_isSet = false;
    m_lifetime_low_ts_isValid = false;

    m_lifetime_open_isSet = false;
    m_lifetime_open_isValid = false;

    m_lifetime_quote_volume_isSet = false;
    m_lifetime_quote_volume_isValid = false;

    m_lifetime_quote_volume_buy_isSet = false;
    m_lifetime_quote_volume_buy_isValid = false;

    m_lifetime_quote_volume_sell_isSet = false;
    m_lifetime_quote_volume_sell_isValid = false;

    m_lifetime_quote_volume_unknown_isSet = false;
    m_lifetime_quote_volume_unknown_isValid = false;

    m_lifetime_total_trades_isSet = false;
    m_lifetime_total_trades_isValid = false;

    m_lifetime_total_trades_buy_isSet = false;
    m_lifetime_total_trades_buy_isValid = false;

    m_lifetime_total_trades_sell_isSet = false;
    m_lifetime_total_trades_sell_isValid = false;

    m_lifetime_total_trades_unknown_isSet = false;
    m_lifetime_total_trades_unknown_isValid = false;

    m_lifetime_volume_isSet = false;
    m_lifetime_volume_isValid = false;

    m_lifetime_volume_buy_isSet = false;
    m_lifetime_volume_buy_isValid = false;

    m_lifetime_volume_sell_isSet = false;
    m_lifetime_volume_sell_isValid = false;

    m_lifetime_volume_unknown_isSet = false;
    m_lifetime_volume_unknown_isValid = false;

    m_mapped_instrument_isSet = false;
    m_mapped_instrument_isValid = false;

    m_market_isSet = false;
    m_market_isValid = false;

    m_moving_180_day_high_isSet = false;
    m_moving_180_day_high_isValid = false;

    m_moving_180_day_low_isSet = false;
    m_moving_180_day_low_isValid = false;

    m_moving_180_day_open_isSet = false;
    m_moving_180_day_open_isValid = false;

    m_moving_180_day_quote_volume_isSet = false;
    m_moving_180_day_quote_volume_isValid = false;

    m_moving_180_day_quote_volume_buy_isSet = false;
    m_moving_180_day_quote_volume_buy_isValid = false;

    m_moving_180_day_quote_volume_sell_isSet = false;
    m_moving_180_day_quote_volume_sell_isValid = false;

    m_moving_180_day_quote_volume_unknown_isSet = false;
    m_moving_180_day_quote_volume_unknown_isValid = false;

    m_moving_180_day_total_trades_isSet = false;
    m_moving_180_day_total_trades_isValid = false;

    m_moving_180_day_total_trades_buy_isSet = false;
    m_moving_180_day_total_trades_buy_isValid = false;

    m_moving_180_day_total_trades_sell_isSet = false;
    m_moving_180_day_total_trades_sell_isValid = false;

    m_moving_180_day_total_trades_unknown_isSet = false;
    m_moving_180_day_total_trades_unknown_isValid = false;

    m_moving_180_day_volume_isSet = false;
    m_moving_180_day_volume_isValid = false;

    m_moving_180_day_volume_buy_isSet = false;
    m_moving_180_day_volume_buy_isValid = false;

    m_moving_180_day_volume_sell_isSet = false;
    m_moving_180_day_volume_sell_isValid = false;

    m_moving_180_day_volume_unknown_isSet = false;
    m_moving_180_day_volume_unknown_isValid = false;

    m_moving_24_hour_high_isSet = false;
    m_moving_24_hour_high_isValid = false;

    m_moving_24_hour_low_isSet = false;
    m_moving_24_hour_low_isValid = false;

    m_moving_24_hour_open_isSet = false;
    m_moving_24_hour_open_isValid = false;

    m_moving_24_hour_quote_volume_isSet = false;
    m_moving_24_hour_quote_volume_isValid = false;

    m_moving_24_hour_quote_volume_buy_isSet = false;
    m_moving_24_hour_quote_volume_buy_isValid = false;

    m_moving_24_hour_quote_volume_sell_isSet = false;
    m_moving_24_hour_quote_volume_sell_isValid = false;

    m_moving_24_hour_quote_volume_unknown_isSet = false;
    m_moving_24_hour_quote_volume_unknown_isValid = false;

    m_moving_24_hour_total_trades_isSet = false;
    m_moving_24_hour_total_trades_isValid = false;

    m_moving_24_hour_total_trades_buy_isSet = false;
    m_moving_24_hour_total_trades_buy_isValid = false;

    m_moving_24_hour_total_trades_sell_isSet = false;
    m_moving_24_hour_total_trades_sell_isValid = false;

    m_moving_24_hour_total_trades_unknown_isSet = false;
    m_moving_24_hour_total_trades_unknown_isValid = false;

    m_moving_24_hour_volume_isSet = false;
    m_moving_24_hour_volume_isValid = false;

    m_moving_24_hour_volume_buy_isSet = false;
    m_moving_24_hour_volume_buy_isValid = false;

    m_moving_24_hour_volume_sell_isSet = false;
    m_moving_24_hour_volume_sell_isValid = false;

    m_moving_24_hour_volume_unknown_isSet = false;
    m_moving_24_hour_volume_unknown_isValid = false;

    m_moving_30_day_high_isSet = false;
    m_moving_30_day_high_isValid = false;

    m_moving_30_day_low_isSet = false;
    m_moving_30_day_low_isValid = false;

    m_moving_30_day_open_isSet = false;
    m_moving_30_day_open_isValid = false;

    m_moving_30_day_quote_volume_isSet = false;
    m_moving_30_day_quote_volume_isValid = false;

    m_moving_30_day_quote_volume_buy_isSet = false;
    m_moving_30_day_quote_volume_buy_isValid = false;

    m_moving_30_day_quote_volume_sell_isSet = false;
    m_moving_30_day_quote_volume_sell_isValid = false;

    m_moving_30_day_quote_volume_unknown_isSet = false;
    m_moving_30_day_quote_volume_unknown_isValid = false;

    m_moving_30_day_total_trades_isSet = false;
    m_moving_30_day_total_trades_isValid = false;

    m_moving_30_day_total_trades_buy_isSet = false;
    m_moving_30_day_total_trades_buy_isValid = false;

    m_moving_30_day_total_trades_sell_isSet = false;
    m_moving_30_day_total_trades_sell_isValid = false;

    m_moving_30_day_total_trades_unknown_isSet = false;
    m_moving_30_day_total_trades_unknown_isValid = false;

    m_moving_30_day_volume_isSet = false;
    m_moving_30_day_volume_isValid = false;

    m_moving_30_day_volume_buy_isSet = false;
    m_moving_30_day_volume_buy_isValid = false;

    m_moving_30_day_volume_sell_isSet = false;
    m_moving_30_day_volume_sell_isValid = false;

    m_moving_30_day_volume_unknown_isSet = false;
    m_moving_30_day_volume_unknown_isValid = false;

    m_moving_365_day_high_isSet = false;
    m_moving_365_day_high_isValid = false;

    m_moving_365_day_low_isSet = false;
    m_moving_365_day_low_isValid = false;

    m_moving_365_day_open_isSet = false;
    m_moving_365_day_open_isValid = false;

    m_moving_365_day_quote_volume_isSet = false;
    m_moving_365_day_quote_volume_isValid = false;

    m_moving_365_day_quote_volume_buy_isSet = false;
    m_moving_365_day_quote_volume_buy_isValid = false;

    m_moving_365_day_quote_volume_sell_isSet = false;
    m_moving_365_day_quote_volume_sell_isValid = false;

    m_moving_365_day_quote_volume_unknown_isSet = false;
    m_moving_365_day_quote_volume_unknown_isValid = false;

    m_moving_365_day_total_trades_isSet = false;
    m_moving_365_day_total_trades_isValid = false;

    m_moving_365_day_total_trades_buy_isSet = false;
    m_moving_365_day_total_trades_buy_isValid = false;

    m_moving_365_day_total_trades_sell_isSet = false;
    m_moving_365_day_total_trades_sell_isValid = false;

    m_moving_365_day_total_trades_unknown_isSet = false;
    m_moving_365_day_total_trades_unknown_isValid = false;

    m_moving_365_day_volume_isSet = false;
    m_moving_365_day_volume_isValid = false;

    m_moving_365_day_volume_buy_isSet = false;
    m_moving_365_day_volume_buy_isValid = false;

    m_moving_365_day_volume_sell_isSet = false;
    m_moving_365_day_volume_sell_isValid = false;

    m_moving_365_day_volume_unknown_isSet = false;
    m_moving_365_day_volume_unknown_isValid = false;

    m_moving_7_day_high_isSet = false;
    m_moving_7_day_high_isValid = false;

    m_moving_7_day_low_isSet = false;
    m_moving_7_day_low_isValid = false;

    m_moving_7_day_open_isSet = false;
    m_moving_7_day_open_isValid = false;

    m_moving_7_day_quote_volume_isSet = false;
    m_moving_7_day_quote_volume_isValid = false;

    m_moving_7_day_quote_volume_buy_isSet = false;
    m_moving_7_day_quote_volume_buy_isValid = false;

    m_moving_7_day_quote_volume_sell_isSet = false;
    m_moving_7_day_quote_volume_sell_isValid = false;

    m_moving_7_day_quote_volume_unknown_isSet = false;
    m_moving_7_day_quote_volume_unknown_isValid = false;

    m_moving_7_day_total_trades_isSet = false;
    m_moving_7_day_total_trades_isValid = false;

    m_moving_7_day_total_trades_buy_isSet = false;
    m_moving_7_day_total_trades_buy_isValid = false;

    m_moving_7_day_total_trades_sell_isSet = false;
    m_moving_7_day_total_trades_sell_isValid = false;

    m_moving_7_day_total_trades_unknown_isSet = false;
    m_moving_7_day_total_trades_unknown_isValid = false;

    m_moving_7_day_volume_isSet = false;
    m_moving_7_day_volume_isValid = false;

    m_moving_7_day_volume_buy_isSet = false;
    m_moving_7_day_volume_buy_isValid = false;

    m_moving_7_day_volume_sell_isSet = false;
    m_moving_7_day_volume_sell_isValid = false;

    m_moving_7_day_volume_unknown_isSet = false;
    m_moving_7_day_volume_unknown_isValid = false;

    m_moving_90_day_high_isSet = false;
    m_moving_90_day_high_isValid = false;

    m_moving_90_day_low_isSet = false;
    m_moving_90_day_low_isValid = false;

    m_moving_90_day_open_isSet = false;
    m_moving_90_day_open_isValid = false;

    m_moving_90_day_quote_volume_isSet = false;
    m_moving_90_day_quote_volume_isValid = false;

    m_moving_90_day_quote_volume_buy_isSet = false;
    m_moving_90_day_quote_volume_buy_isValid = false;

    m_moving_90_day_quote_volume_sell_isSet = false;
    m_moving_90_day_quote_volume_sell_isValid = false;

    m_moving_90_day_quote_volume_unknown_isSet = false;
    m_moving_90_day_quote_volume_unknown_isValid = false;

    m_moving_90_day_total_trades_isSet = false;
    m_moving_90_day_total_trades_isValid = false;

    m_moving_90_day_total_trades_buy_isSet = false;
    m_moving_90_day_total_trades_buy_isValid = false;

    m_moving_90_day_total_trades_sell_isSet = false;
    m_moving_90_day_total_trades_sell_isValid = false;

    m_moving_90_day_total_trades_unknown_isSet = false;
    m_moving_90_day_total_trades_unknown_isValid = false;

    m_moving_90_day_volume_isSet = false;
    m_moving_90_day_volume_isValid = false;

    m_moving_90_day_volume_buy_isSet = false;
    m_moving_90_day_volume_buy_isValid = false;

    m_moving_90_day_volume_sell_isSet = false;
    m_moving_90_day_volume_sell_isValid = false;

    m_moving_90_day_volume_unknown_isSet = false;
    m_moving_90_day_volume_unknown_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_price_flag_isSet = false;
    m_price_flag_isValid = false;

    m_price_last_update_ts_isSet = false;
    m_price_last_update_ts_isValid = false;

    m_quote_isSet = false;
    m_quote_isValid = false;

    m_top_ask_last_update_ts_isSet = false;
    m_top_ask_last_update_ts_isValid = false;

    m_top_ask_price_isSet = false;
    m_top_ask_price_isValid = false;

    m_top_ask_quantity_isSet = false;
    m_top_ask_quantity_isValid = false;

    m_top_bid_last_update_ts_isSet = false;
    m_top_bid_last_update_ts_isValid = false;

    m_top_bid_price_isSet = false;
    m_top_bid_price_isValid = false;

    m_top_bid_quantity_isSet = false;
    m_top_bid_quantity_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAISPOT_INSTRUMENT_MARKET_DATA::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISPOT_INSTRUMENT_MARKET_DATA::fromJsonObject(QJsonObject json) {

    m_base_isValid = ::OpenAPI::fromJsonValue(base, json[QString("BASE")]);
    m_base_isSet = !json[QString("BASE")].isNull() && m_base_isValid;

    m_ccseq_isValid = ::OpenAPI::fromJsonValue(ccseq, json[QString("CCSEQ")]);
    m_ccseq_isSet = !json[QString("CCSEQ")].isNull() && m_ccseq_isValid;

    m_current_day_high_isValid = ::OpenAPI::fromJsonValue(current_day_high, json[QString("CURRENT_DAY_HIGH")]);
    m_current_day_high_isSet = !json[QString("CURRENT_DAY_HIGH")].isNull() && m_current_day_high_isValid;

    m_current_day_low_isValid = ::OpenAPI::fromJsonValue(current_day_low, json[QString("CURRENT_DAY_LOW")]);
    m_current_day_low_isSet = !json[QString("CURRENT_DAY_LOW")].isNull() && m_current_day_low_isValid;

    m_current_day_open_isValid = ::OpenAPI::fromJsonValue(current_day_open, json[QString("CURRENT_DAY_OPEN")]);
    m_current_day_open_isSet = !json[QString("CURRENT_DAY_OPEN")].isNull() && m_current_day_open_isValid;

    m_current_day_quote_volume_isValid = ::OpenAPI::fromJsonValue(current_day_quote_volume, json[QString("CURRENT_DAY_QUOTE_VOLUME")]);
    m_current_day_quote_volume_isSet = !json[QString("CURRENT_DAY_QUOTE_VOLUME")].isNull() && m_current_day_quote_volume_isValid;

    m_current_day_quote_volume_buy_isValid = ::OpenAPI::fromJsonValue(current_day_quote_volume_buy, json[QString("CURRENT_DAY_QUOTE_VOLUME_BUY")]);
    m_current_day_quote_volume_buy_isSet = !json[QString("CURRENT_DAY_QUOTE_VOLUME_BUY")].isNull() && m_current_day_quote_volume_buy_isValid;

    m_current_day_quote_volume_sell_isValid = ::OpenAPI::fromJsonValue(current_day_quote_volume_sell, json[QString("CURRENT_DAY_QUOTE_VOLUME_SELL")]);
    m_current_day_quote_volume_sell_isSet = !json[QString("CURRENT_DAY_QUOTE_VOLUME_SELL")].isNull() && m_current_day_quote_volume_sell_isValid;

    m_current_day_quote_volume_unknown_isValid = ::OpenAPI::fromJsonValue(current_day_quote_volume_unknown, json[QString("CURRENT_DAY_QUOTE_VOLUME_UNKNOWN")]);
    m_current_day_quote_volume_unknown_isSet = !json[QString("CURRENT_DAY_QUOTE_VOLUME_UNKNOWN")].isNull() && m_current_day_quote_volume_unknown_isValid;

    m_current_day_total_trades_isValid = ::OpenAPI::fromJsonValue(current_day_total_trades, json[QString("CURRENT_DAY_TOTAL_TRADES")]);
    m_current_day_total_trades_isSet = !json[QString("CURRENT_DAY_TOTAL_TRADES")].isNull() && m_current_day_total_trades_isValid;

    m_current_day_total_trades_buy_isValid = ::OpenAPI::fromJsonValue(current_day_total_trades_buy, json[QString("CURRENT_DAY_TOTAL_TRADES_BUY")]);
    m_current_day_total_trades_buy_isSet = !json[QString("CURRENT_DAY_TOTAL_TRADES_BUY")].isNull() && m_current_day_total_trades_buy_isValid;

    m_current_day_total_trades_sell_isValid = ::OpenAPI::fromJsonValue(current_day_total_trades_sell, json[QString("CURRENT_DAY_TOTAL_TRADES_SELL")]);
    m_current_day_total_trades_sell_isSet = !json[QString("CURRENT_DAY_TOTAL_TRADES_SELL")].isNull() && m_current_day_total_trades_sell_isValid;

    m_current_day_total_trades_unknown_isValid = ::OpenAPI::fromJsonValue(current_day_total_trades_unknown, json[QString("CURRENT_DAY_TOTAL_TRADES_UNKNOWN")]);
    m_current_day_total_trades_unknown_isSet = !json[QString("CURRENT_DAY_TOTAL_TRADES_UNKNOWN")].isNull() && m_current_day_total_trades_unknown_isValid;

    m_current_day_volume_isValid = ::OpenAPI::fromJsonValue(current_day_volume, json[QString("CURRENT_DAY_VOLUME")]);
    m_current_day_volume_isSet = !json[QString("CURRENT_DAY_VOLUME")].isNull() && m_current_day_volume_isValid;

    m_current_day_volume_buy_isValid = ::OpenAPI::fromJsonValue(current_day_volume_buy, json[QString("CURRENT_DAY_VOLUME_BUY")]);
    m_current_day_volume_buy_isSet = !json[QString("CURRENT_DAY_VOLUME_BUY")].isNull() && m_current_day_volume_buy_isValid;

    m_current_day_volume_sell_isValid = ::OpenAPI::fromJsonValue(current_day_volume_sell, json[QString("CURRENT_DAY_VOLUME_SELL")]);
    m_current_day_volume_sell_isSet = !json[QString("CURRENT_DAY_VOLUME_SELL")].isNull() && m_current_day_volume_sell_isValid;

    m_current_day_volume_unknown_isValid = ::OpenAPI::fromJsonValue(current_day_volume_unknown, json[QString("CURRENT_DAY_VOLUME_UNKNOWN")]);
    m_current_day_volume_unknown_isSet = !json[QString("CURRENT_DAY_VOLUME_UNKNOWN")].isNull() && m_current_day_volume_unknown_isValid;

    m_current_hour_high_isValid = ::OpenAPI::fromJsonValue(current_hour_high, json[QString("CURRENT_HOUR_HIGH")]);
    m_current_hour_high_isSet = !json[QString("CURRENT_HOUR_HIGH")].isNull() && m_current_hour_high_isValid;

    m_current_hour_low_isValid = ::OpenAPI::fromJsonValue(current_hour_low, json[QString("CURRENT_HOUR_LOW")]);
    m_current_hour_low_isSet = !json[QString("CURRENT_HOUR_LOW")].isNull() && m_current_hour_low_isValid;

    m_current_hour_open_isValid = ::OpenAPI::fromJsonValue(current_hour_open, json[QString("CURRENT_HOUR_OPEN")]);
    m_current_hour_open_isSet = !json[QString("CURRENT_HOUR_OPEN")].isNull() && m_current_hour_open_isValid;

    m_current_hour_quote_volume_isValid = ::OpenAPI::fromJsonValue(current_hour_quote_volume, json[QString("CURRENT_HOUR_QUOTE_VOLUME")]);
    m_current_hour_quote_volume_isSet = !json[QString("CURRENT_HOUR_QUOTE_VOLUME")].isNull() && m_current_hour_quote_volume_isValid;

    m_current_hour_quote_volume_buy_isValid = ::OpenAPI::fromJsonValue(current_hour_quote_volume_buy, json[QString("CURRENT_HOUR_QUOTE_VOLUME_BUY")]);
    m_current_hour_quote_volume_buy_isSet = !json[QString("CURRENT_HOUR_QUOTE_VOLUME_BUY")].isNull() && m_current_hour_quote_volume_buy_isValid;

    m_current_hour_quote_volume_sell_isValid = ::OpenAPI::fromJsonValue(current_hour_quote_volume_sell, json[QString("CURRENT_HOUR_QUOTE_VOLUME_SELL")]);
    m_current_hour_quote_volume_sell_isSet = !json[QString("CURRENT_HOUR_QUOTE_VOLUME_SELL")].isNull() && m_current_hour_quote_volume_sell_isValid;

    m_current_hour_quote_volume_unknown_isValid = ::OpenAPI::fromJsonValue(current_hour_quote_volume_unknown, json[QString("CURRENT_HOUR_QUOTE_VOLUME_UNKNOWN")]);
    m_current_hour_quote_volume_unknown_isSet = !json[QString("CURRENT_HOUR_QUOTE_VOLUME_UNKNOWN")].isNull() && m_current_hour_quote_volume_unknown_isValid;

    m_current_hour_total_trades_isValid = ::OpenAPI::fromJsonValue(current_hour_total_trades, json[QString("CURRENT_HOUR_TOTAL_TRADES")]);
    m_current_hour_total_trades_isSet = !json[QString("CURRENT_HOUR_TOTAL_TRADES")].isNull() && m_current_hour_total_trades_isValid;

    m_current_hour_total_trades_buy_isValid = ::OpenAPI::fromJsonValue(current_hour_total_trades_buy, json[QString("CURRENT_HOUR_TOTAL_TRADES_BUY")]);
    m_current_hour_total_trades_buy_isSet = !json[QString("CURRENT_HOUR_TOTAL_TRADES_BUY")].isNull() && m_current_hour_total_trades_buy_isValid;

    m_current_hour_total_trades_sell_isValid = ::OpenAPI::fromJsonValue(current_hour_total_trades_sell, json[QString("CURRENT_HOUR_TOTAL_TRADES_SELL")]);
    m_current_hour_total_trades_sell_isSet = !json[QString("CURRENT_HOUR_TOTAL_TRADES_SELL")].isNull() && m_current_hour_total_trades_sell_isValid;

    m_current_hour_total_trades_unknown_isValid = ::OpenAPI::fromJsonValue(current_hour_total_trades_unknown, json[QString("CURRENT_HOUR_TOTAL_TRADES_UNKNOWN")]);
    m_current_hour_total_trades_unknown_isSet = !json[QString("CURRENT_HOUR_TOTAL_TRADES_UNKNOWN")].isNull() && m_current_hour_total_trades_unknown_isValid;

    m_current_hour_volume_isValid = ::OpenAPI::fromJsonValue(current_hour_volume, json[QString("CURRENT_HOUR_VOLUME")]);
    m_current_hour_volume_isSet = !json[QString("CURRENT_HOUR_VOLUME")].isNull() && m_current_hour_volume_isValid;

    m_current_hour_volume_buy_isValid = ::OpenAPI::fromJsonValue(current_hour_volume_buy, json[QString("CURRENT_HOUR_VOLUME_BUY")]);
    m_current_hour_volume_buy_isSet = !json[QString("CURRENT_HOUR_VOLUME_BUY")].isNull() && m_current_hour_volume_buy_isValid;

    m_current_hour_volume_sell_isValid = ::OpenAPI::fromJsonValue(current_hour_volume_sell, json[QString("CURRENT_HOUR_VOLUME_SELL")]);
    m_current_hour_volume_sell_isSet = !json[QString("CURRENT_HOUR_VOLUME_SELL")].isNull() && m_current_hour_volume_sell_isValid;

    m_current_hour_volume_unknown_isValid = ::OpenAPI::fromJsonValue(current_hour_volume_unknown, json[QString("CURRENT_HOUR_VOLUME_UNKNOWN")]);
    m_current_hour_volume_unknown_isSet = !json[QString("CURRENT_HOUR_VOLUME_UNKNOWN")].isNull() && m_current_hour_volume_unknown_isValid;

    m_current_month_high_isValid = ::OpenAPI::fromJsonValue(current_month_high, json[QString("CURRENT_MONTH_HIGH")]);
    m_current_month_high_isSet = !json[QString("CURRENT_MONTH_HIGH")].isNull() && m_current_month_high_isValid;

    m_current_month_low_isValid = ::OpenAPI::fromJsonValue(current_month_low, json[QString("CURRENT_MONTH_LOW")]);
    m_current_month_low_isSet = !json[QString("CURRENT_MONTH_LOW")].isNull() && m_current_month_low_isValid;

    m_current_month_open_isValid = ::OpenAPI::fromJsonValue(current_month_open, json[QString("CURRENT_MONTH_OPEN")]);
    m_current_month_open_isSet = !json[QString("CURRENT_MONTH_OPEN")].isNull() && m_current_month_open_isValid;

    m_current_month_quote_volume_isValid = ::OpenAPI::fromJsonValue(current_month_quote_volume, json[QString("CURRENT_MONTH_QUOTE_VOLUME")]);
    m_current_month_quote_volume_isSet = !json[QString("CURRENT_MONTH_QUOTE_VOLUME")].isNull() && m_current_month_quote_volume_isValid;

    m_current_month_quote_volume_buy_isValid = ::OpenAPI::fromJsonValue(current_month_quote_volume_buy, json[QString("CURRENT_MONTH_QUOTE_VOLUME_BUY")]);
    m_current_month_quote_volume_buy_isSet = !json[QString("CURRENT_MONTH_QUOTE_VOLUME_BUY")].isNull() && m_current_month_quote_volume_buy_isValid;

    m_current_month_quote_volume_sell_isValid = ::OpenAPI::fromJsonValue(current_month_quote_volume_sell, json[QString("CURRENT_MONTH_QUOTE_VOLUME_SELL")]);
    m_current_month_quote_volume_sell_isSet = !json[QString("CURRENT_MONTH_QUOTE_VOLUME_SELL")].isNull() && m_current_month_quote_volume_sell_isValid;

    m_current_month_quote_volume_unknown_isValid = ::OpenAPI::fromJsonValue(current_month_quote_volume_unknown, json[QString("CURRENT_MONTH_QUOTE_VOLUME_UNKNOWN")]);
    m_current_month_quote_volume_unknown_isSet = !json[QString("CURRENT_MONTH_QUOTE_VOLUME_UNKNOWN")].isNull() && m_current_month_quote_volume_unknown_isValid;

    m_current_month_total_trades_isValid = ::OpenAPI::fromJsonValue(current_month_total_trades, json[QString("CURRENT_MONTH_TOTAL_TRADES")]);
    m_current_month_total_trades_isSet = !json[QString("CURRENT_MONTH_TOTAL_TRADES")].isNull() && m_current_month_total_trades_isValid;

    m_current_month_total_trades_buy_isValid = ::OpenAPI::fromJsonValue(current_month_total_trades_buy, json[QString("CURRENT_MONTH_TOTAL_TRADES_BUY")]);
    m_current_month_total_trades_buy_isSet = !json[QString("CURRENT_MONTH_TOTAL_TRADES_BUY")].isNull() && m_current_month_total_trades_buy_isValid;

    m_current_month_total_trades_sell_isValid = ::OpenAPI::fromJsonValue(current_month_total_trades_sell, json[QString("CURRENT_MONTH_TOTAL_TRADES_SELL")]);
    m_current_month_total_trades_sell_isSet = !json[QString("CURRENT_MONTH_TOTAL_TRADES_SELL")].isNull() && m_current_month_total_trades_sell_isValid;

    m_current_month_total_trades_unknown_isValid = ::OpenAPI::fromJsonValue(current_month_total_trades_unknown, json[QString("CURRENT_MONTH_TOTAL_TRADES_UNKNOWN")]);
    m_current_month_total_trades_unknown_isSet = !json[QString("CURRENT_MONTH_TOTAL_TRADES_UNKNOWN")].isNull() && m_current_month_total_trades_unknown_isValid;

    m_current_month_volume_isValid = ::OpenAPI::fromJsonValue(current_month_volume, json[QString("CURRENT_MONTH_VOLUME")]);
    m_current_month_volume_isSet = !json[QString("CURRENT_MONTH_VOLUME")].isNull() && m_current_month_volume_isValid;

    m_current_month_volume_buy_isValid = ::OpenAPI::fromJsonValue(current_month_volume_buy, json[QString("CURRENT_MONTH_VOLUME_BUY")]);
    m_current_month_volume_buy_isSet = !json[QString("CURRENT_MONTH_VOLUME_BUY")].isNull() && m_current_month_volume_buy_isValid;

    m_current_month_volume_sell_isValid = ::OpenAPI::fromJsonValue(current_month_volume_sell, json[QString("CURRENT_MONTH_VOLUME_SELL")]);
    m_current_month_volume_sell_isSet = !json[QString("CURRENT_MONTH_VOLUME_SELL")].isNull() && m_current_month_volume_sell_isValid;

    m_current_month_volume_unknown_isValid = ::OpenAPI::fromJsonValue(current_month_volume_unknown, json[QString("CURRENT_MONTH_VOLUME_UNKNOWN")]);
    m_current_month_volume_unknown_isSet = !json[QString("CURRENT_MONTH_VOLUME_UNKNOWN")].isNull() && m_current_month_volume_unknown_isValid;

    m_current_week_high_isValid = ::OpenAPI::fromJsonValue(current_week_high, json[QString("CURRENT_WEEK_HIGH")]);
    m_current_week_high_isSet = !json[QString("CURRENT_WEEK_HIGH")].isNull() && m_current_week_high_isValid;

    m_current_week_low_isValid = ::OpenAPI::fromJsonValue(current_week_low, json[QString("CURRENT_WEEK_LOW")]);
    m_current_week_low_isSet = !json[QString("CURRENT_WEEK_LOW")].isNull() && m_current_week_low_isValid;

    m_current_week_open_isValid = ::OpenAPI::fromJsonValue(current_week_open, json[QString("CURRENT_WEEK_OPEN")]);
    m_current_week_open_isSet = !json[QString("CURRENT_WEEK_OPEN")].isNull() && m_current_week_open_isValid;

    m_current_week_quote_volume_isValid = ::OpenAPI::fromJsonValue(current_week_quote_volume, json[QString("CURRENT_WEEK_QUOTE_VOLUME")]);
    m_current_week_quote_volume_isSet = !json[QString("CURRENT_WEEK_QUOTE_VOLUME")].isNull() && m_current_week_quote_volume_isValid;

    m_current_week_quote_volume_buy_isValid = ::OpenAPI::fromJsonValue(current_week_quote_volume_buy, json[QString("CURRENT_WEEK_QUOTE_VOLUME_BUY")]);
    m_current_week_quote_volume_buy_isSet = !json[QString("CURRENT_WEEK_QUOTE_VOLUME_BUY")].isNull() && m_current_week_quote_volume_buy_isValid;

    m_current_week_quote_volume_sell_isValid = ::OpenAPI::fromJsonValue(current_week_quote_volume_sell, json[QString("CURRENT_WEEK_QUOTE_VOLUME_SELL")]);
    m_current_week_quote_volume_sell_isSet = !json[QString("CURRENT_WEEK_QUOTE_VOLUME_SELL")].isNull() && m_current_week_quote_volume_sell_isValid;

    m_current_week_quote_volume_unknown_isValid = ::OpenAPI::fromJsonValue(current_week_quote_volume_unknown, json[QString("CURRENT_WEEK_QUOTE_VOLUME_UNKNOWN")]);
    m_current_week_quote_volume_unknown_isSet = !json[QString("CURRENT_WEEK_QUOTE_VOLUME_UNKNOWN")].isNull() && m_current_week_quote_volume_unknown_isValid;

    m_current_week_total_trades_isValid = ::OpenAPI::fromJsonValue(current_week_total_trades, json[QString("CURRENT_WEEK_TOTAL_TRADES")]);
    m_current_week_total_trades_isSet = !json[QString("CURRENT_WEEK_TOTAL_TRADES")].isNull() && m_current_week_total_trades_isValid;

    m_current_week_total_trades_buy_isValid = ::OpenAPI::fromJsonValue(current_week_total_trades_buy, json[QString("CURRENT_WEEK_TOTAL_TRADES_BUY")]);
    m_current_week_total_trades_buy_isSet = !json[QString("CURRENT_WEEK_TOTAL_TRADES_BUY")].isNull() && m_current_week_total_trades_buy_isValid;

    m_current_week_total_trades_sell_isValid = ::OpenAPI::fromJsonValue(current_week_total_trades_sell, json[QString("CURRENT_WEEK_TOTAL_TRADES_SELL")]);
    m_current_week_total_trades_sell_isSet = !json[QString("CURRENT_WEEK_TOTAL_TRADES_SELL")].isNull() && m_current_week_total_trades_sell_isValid;

    m_current_week_total_trades_unknown_isValid = ::OpenAPI::fromJsonValue(current_week_total_trades_unknown, json[QString("CURRENT_WEEK_TOTAL_TRADES_UNKNOWN")]);
    m_current_week_total_trades_unknown_isSet = !json[QString("CURRENT_WEEK_TOTAL_TRADES_UNKNOWN")].isNull() && m_current_week_total_trades_unknown_isValid;

    m_current_week_volume_isValid = ::OpenAPI::fromJsonValue(current_week_volume, json[QString("CURRENT_WEEK_VOLUME")]);
    m_current_week_volume_isSet = !json[QString("CURRENT_WEEK_VOLUME")].isNull() && m_current_week_volume_isValid;

    m_current_week_volume_buy_isValid = ::OpenAPI::fromJsonValue(current_week_volume_buy, json[QString("CURRENT_WEEK_VOLUME_BUY")]);
    m_current_week_volume_buy_isSet = !json[QString("CURRENT_WEEK_VOLUME_BUY")].isNull() && m_current_week_volume_buy_isValid;

    m_current_week_volume_sell_isValid = ::OpenAPI::fromJsonValue(current_week_volume_sell, json[QString("CURRENT_WEEK_VOLUME_SELL")]);
    m_current_week_volume_sell_isSet = !json[QString("CURRENT_WEEK_VOLUME_SELL")].isNull() && m_current_week_volume_sell_isValid;

    m_current_week_volume_unknown_isValid = ::OpenAPI::fromJsonValue(current_week_volume_unknown, json[QString("CURRENT_WEEK_VOLUME_UNKNOWN")]);
    m_current_week_volume_unknown_isSet = !json[QString("CURRENT_WEEK_VOLUME_UNKNOWN")].isNull() && m_current_week_volume_unknown_isValid;

    m_current_year_high_isValid = ::OpenAPI::fromJsonValue(current_year_high, json[QString("CURRENT_YEAR_HIGH")]);
    m_current_year_high_isSet = !json[QString("CURRENT_YEAR_HIGH")].isNull() && m_current_year_high_isValid;

    m_current_year_low_isValid = ::OpenAPI::fromJsonValue(current_year_low, json[QString("CURRENT_YEAR_LOW")]);
    m_current_year_low_isSet = !json[QString("CURRENT_YEAR_LOW")].isNull() && m_current_year_low_isValid;

    m_current_year_open_isValid = ::OpenAPI::fromJsonValue(current_year_open, json[QString("CURRENT_YEAR_OPEN")]);
    m_current_year_open_isSet = !json[QString("CURRENT_YEAR_OPEN")].isNull() && m_current_year_open_isValid;

    m_current_year_quote_volume_isValid = ::OpenAPI::fromJsonValue(current_year_quote_volume, json[QString("CURRENT_YEAR_QUOTE_VOLUME")]);
    m_current_year_quote_volume_isSet = !json[QString("CURRENT_YEAR_QUOTE_VOLUME")].isNull() && m_current_year_quote_volume_isValid;

    m_current_year_quote_volume_buy_isValid = ::OpenAPI::fromJsonValue(current_year_quote_volume_buy, json[QString("CURRENT_YEAR_QUOTE_VOLUME_BUY")]);
    m_current_year_quote_volume_buy_isSet = !json[QString("CURRENT_YEAR_QUOTE_VOLUME_BUY")].isNull() && m_current_year_quote_volume_buy_isValid;

    m_current_year_quote_volume_sell_isValid = ::OpenAPI::fromJsonValue(current_year_quote_volume_sell, json[QString("CURRENT_YEAR_QUOTE_VOLUME_SELL")]);
    m_current_year_quote_volume_sell_isSet = !json[QString("CURRENT_YEAR_QUOTE_VOLUME_SELL")].isNull() && m_current_year_quote_volume_sell_isValid;

    m_current_year_quote_volume_unknown_isValid = ::OpenAPI::fromJsonValue(current_year_quote_volume_unknown, json[QString("CURRENT_YEAR_QUOTE_VOLUME_UNKNOWN")]);
    m_current_year_quote_volume_unknown_isSet = !json[QString("CURRENT_YEAR_QUOTE_VOLUME_UNKNOWN")].isNull() && m_current_year_quote_volume_unknown_isValid;

    m_current_year_total_trades_isValid = ::OpenAPI::fromJsonValue(current_year_total_trades, json[QString("CURRENT_YEAR_TOTAL_TRADES")]);
    m_current_year_total_trades_isSet = !json[QString("CURRENT_YEAR_TOTAL_TRADES")].isNull() && m_current_year_total_trades_isValid;

    m_current_year_total_trades_buy_isValid = ::OpenAPI::fromJsonValue(current_year_total_trades_buy, json[QString("CURRENT_YEAR_TOTAL_TRADES_BUY")]);
    m_current_year_total_trades_buy_isSet = !json[QString("CURRENT_YEAR_TOTAL_TRADES_BUY")].isNull() && m_current_year_total_trades_buy_isValid;

    m_current_year_total_trades_sell_isValid = ::OpenAPI::fromJsonValue(current_year_total_trades_sell, json[QString("CURRENT_YEAR_TOTAL_TRADES_SELL")]);
    m_current_year_total_trades_sell_isSet = !json[QString("CURRENT_YEAR_TOTAL_TRADES_SELL")].isNull() && m_current_year_total_trades_sell_isValid;

    m_current_year_total_trades_unknown_isValid = ::OpenAPI::fromJsonValue(current_year_total_trades_unknown, json[QString("CURRENT_YEAR_TOTAL_TRADES_UNKNOWN")]);
    m_current_year_total_trades_unknown_isSet = !json[QString("CURRENT_YEAR_TOTAL_TRADES_UNKNOWN")].isNull() && m_current_year_total_trades_unknown_isValid;

    m_current_year_volume_isValid = ::OpenAPI::fromJsonValue(current_year_volume, json[QString("CURRENT_YEAR_VOLUME")]);
    m_current_year_volume_isSet = !json[QString("CURRENT_YEAR_VOLUME")].isNull() && m_current_year_volume_isValid;

    m_current_year_volume_buy_isValid = ::OpenAPI::fromJsonValue(current_year_volume_buy, json[QString("CURRENT_YEAR_VOLUME_BUY")]);
    m_current_year_volume_buy_isSet = !json[QString("CURRENT_YEAR_VOLUME_BUY")].isNull() && m_current_year_volume_buy_isValid;

    m_current_year_volume_sell_isValid = ::OpenAPI::fromJsonValue(current_year_volume_sell, json[QString("CURRENT_YEAR_VOLUME_SELL")]);
    m_current_year_volume_sell_isSet = !json[QString("CURRENT_YEAR_VOLUME_SELL")].isNull() && m_current_year_volume_sell_isValid;

    m_current_year_volume_unknown_isValid = ::OpenAPI::fromJsonValue(current_year_volume_unknown, json[QString("CURRENT_YEAR_VOLUME_UNKNOWN")]);
    m_current_year_volume_unknown_isSet = !json[QString("CURRENT_YEAR_VOLUME_UNKNOWN")].isNull() && m_current_year_volume_unknown_isValid;

    m_instrument_isValid = ::OpenAPI::fromJsonValue(instrument, json[QString("INSTRUMENT")]);
    m_instrument_isSet = !json[QString("INSTRUMENT")].isNull() && m_instrument_isValid;

    m_last_processed_trade_ccseq_isValid = ::OpenAPI::fromJsonValue(last_processed_trade_ccseq, json[QString("LAST_PROCESSED_TRADE_CCSEQ")]);
    m_last_processed_trade_ccseq_isSet = !json[QString("LAST_PROCESSED_TRADE_CCSEQ")].isNull() && m_last_processed_trade_ccseq_isValid;

    m_last_processed_trade_price_isValid = ::OpenAPI::fromJsonValue(last_processed_trade_price, json[QString("LAST_PROCESSED_TRADE_PRICE")]);
    m_last_processed_trade_price_isSet = !json[QString("LAST_PROCESSED_TRADE_PRICE")].isNull() && m_last_processed_trade_price_isValid;

    m_last_processed_trade_quantity_isValid = ::OpenAPI::fromJsonValue(last_processed_trade_quantity, json[QString("LAST_PROCESSED_TRADE_QUANTITY")]);
    m_last_processed_trade_quantity_isSet = !json[QString("LAST_PROCESSED_TRADE_QUANTITY")].isNull() && m_last_processed_trade_quantity_isValid;

    m_last_processed_trade_quote_quantity_isValid = ::OpenAPI::fromJsonValue(last_processed_trade_quote_quantity, json[QString("LAST_PROCESSED_TRADE_QUOTE_QUANTITY")]);
    m_last_processed_trade_quote_quantity_isSet = !json[QString("LAST_PROCESSED_TRADE_QUOTE_QUANTITY")].isNull() && m_last_processed_trade_quote_quantity_isValid;

    m_last_processed_trade_side_isValid = ::OpenAPI::fromJsonValue(last_processed_trade_side, json[QString("LAST_PROCESSED_TRADE_SIDE")]);
    m_last_processed_trade_side_isSet = !json[QString("LAST_PROCESSED_TRADE_SIDE")].isNull() && m_last_processed_trade_side_isValid;

    m_last_processed_trade_ts_isValid = ::OpenAPI::fromJsonValue(last_processed_trade_ts, json[QString("LAST_PROCESSED_TRADE_TS")]);
    m_last_processed_trade_ts_isSet = !json[QString("LAST_PROCESSED_TRADE_TS")].isNull() && m_last_processed_trade_ts_isValid;

    m_last_trade_ccseq_isValid = ::OpenAPI::fromJsonValue(last_trade_ccseq, json[QString("LAST_TRADE_CCSEQ")]);
    m_last_trade_ccseq_isSet = !json[QString("LAST_TRADE_CCSEQ")].isNull() && m_last_trade_ccseq_isValid;

    m_last_trade_id_isValid = ::OpenAPI::fromJsonValue(last_trade_id, json[QString("LAST_TRADE_ID")]);
    m_last_trade_id_isSet = !json[QString("LAST_TRADE_ID")].isNull() && m_last_trade_id_isValid;

    m_last_trade_quantity_isValid = ::OpenAPI::fromJsonValue(last_trade_quantity, json[QString("LAST_TRADE_QUANTITY")]);
    m_last_trade_quantity_isSet = !json[QString("LAST_TRADE_QUANTITY")].isNull() && m_last_trade_quantity_isValid;

    m_last_trade_quote_quantity_isValid = ::OpenAPI::fromJsonValue(last_trade_quote_quantity, json[QString("LAST_TRADE_QUOTE_QUANTITY")]);
    m_last_trade_quote_quantity_isSet = !json[QString("LAST_TRADE_QUOTE_QUANTITY")].isNull() && m_last_trade_quote_quantity_isValid;

    m_last_trade_side_isValid = ::OpenAPI::fromJsonValue(last_trade_side, json[QString("LAST_TRADE_SIDE")]);
    m_last_trade_side_isSet = !json[QString("LAST_TRADE_SIDE")].isNull() && m_last_trade_side_isValid;

    m_lifetime_first_trade_ts_isValid = ::OpenAPI::fromJsonValue(lifetime_first_trade_ts, json[QString("LIFETIME_FIRST_TRADE_TS")]);
    m_lifetime_first_trade_ts_isSet = !json[QString("LIFETIME_FIRST_TRADE_TS")].isNull() && m_lifetime_first_trade_ts_isValid;

    m_lifetime_high_isValid = ::OpenAPI::fromJsonValue(lifetime_high, json[QString("LIFETIME_HIGH")]);
    m_lifetime_high_isSet = !json[QString("LIFETIME_HIGH")].isNull() && m_lifetime_high_isValid;

    m_lifetime_high_ts_isValid = ::OpenAPI::fromJsonValue(lifetime_high_ts, json[QString("LIFETIME_HIGH_TS")]);
    m_lifetime_high_ts_isSet = !json[QString("LIFETIME_HIGH_TS")].isNull() && m_lifetime_high_ts_isValid;

    m_lifetime_low_isValid = ::OpenAPI::fromJsonValue(lifetime_low, json[QString("LIFETIME_LOW")]);
    m_lifetime_low_isSet = !json[QString("LIFETIME_LOW")].isNull() && m_lifetime_low_isValid;

    m_lifetime_low_ts_isValid = ::OpenAPI::fromJsonValue(lifetime_low_ts, json[QString("LIFETIME_LOW_TS")]);
    m_lifetime_low_ts_isSet = !json[QString("LIFETIME_LOW_TS")].isNull() && m_lifetime_low_ts_isValid;

    m_lifetime_open_isValid = ::OpenAPI::fromJsonValue(lifetime_open, json[QString("LIFETIME_OPEN")]);
    m_lifetime_open_isSet = !json[QString("LIFETIME_OPEN")].isNull() && m_lifetime_open_isValid;

    m_lifetime_quote_volume_isValid = ::OpenAPI::fromJsonValue(lifetime_quote_volume, json[QString("LIFETIME_QUOTE_VOLUME")]);
    m_lifetime_quote_volume_isSet = !json[QString("LIFETIME_QUOTE_VOLUME")].isNull() && m_lifetime_quote_volume_isValid;

    m_lifetime_quote_volume_buy_isValid = ::OpenAPI::fromJsonValue(lifetime_quote_volume_buy, json[QString("LIFETIME_QUOTE_VOLUME_BUY")]);
    m_lifetime_quote_volume_buy_isSet = !json[QString("LIFETIME_QUOTE_VOLUME_BUY")].isNull() && m_lifetime_quote_volume_buy_isValid;

    m_lifetime_quote_volume_sell_isValid = ::OpenAPI::fromJsonValue(lifetime_quote_volume_sell, json[QString("LIFETIME_QUOTE_VOLUME_SELL")]);
    m_lifetime_quote_volume_sell_isSet = !json[QString("LIFETIME_QUOTE_VOLUME_SELL")].isNull() && m_lifetime_quote_volume_sell_isValid;

    m_lifetime_quote_volume_unknown_isValid = ::OpenAPI::fromJsonValue(lifetime_quote_volume_unknown, json[QString("LIFETIME_QUOTE_VOLUME_UNKNOWN")]);
    m_lifetime_quote_volume_unknown_isSet = !json[QString("LIFETIME_QUOTE_VOLUME_UNKNOWN")].isNull() && m_lifetime_quote_volume_unknown_isValid;

    m_lifetime_total_trades_isValid = ::OpenAPI::fromJsonValue(lifetime_total_trades, json[QString("LIFETIME_TOTAL_TRADES")]);
    m_lifetime_total_trades_isSet = !json[QString("LIFETIME_TOTAL_TRADES")].isNull() && m_lifetime_total_trades_isValid;

    m_lifetime_total_trades_buy_isValid = ::OpenAPI::fromJsonValue(lifetime_total_trades_buy, json[QString("LIFETIME_TOTAL_TRADES_BUY")]);
    m_lifetime_total_trades_buy_isSet = !json[QString("LIFETIME_TOTAL_TRADES_BUY")].isNull() && m_lifetime_total_trades_buy_isValid;

    m_lifetime_total_trades_sell_isValid = ::OpenAPI::fromJsonValue(lifetime_total_trades_sell, json[QString("LIFETIME_TOTAL_TRADES_SELL")]);
    m_lifetime_total_trades_sell_isSet = !json[QString("LIFETIME_TOTAL_TRADES_SELL")].isNull() && m_lifetime_total_trades_sell_isValid;

    m_lifetime_total_trades_unknown_isValid = ::OpenAPI::fromJsonValue(lifetime_total_trades_unknown, json[QString("LIFETIME_TOTAL_TRADES_UNKNOWN")]);
    m_lifetime_total_trades_unknown_isSet = !json[QString("LIFETIME_TOTAL_TRADES_UNKNOWN")].isNull() && m_lifetime_total_trades_unknown_isValid;

    m_lifetime_volume_isValid = ::OpenAPI::fromJsonValue(lifetime_volume, json[QString("LIFETIME_VOLUME")]);
    m_lifetime_volume_isSet = !json[QString("LIFETIME_VOLUME")].isNull() && m_lifetime_volume_isValid;

    m_lifetime_volume_buy_isValid = ::OpenAPI::fromJsonValue(lifetime_volume_buy, json[QString("LIFETIME_VOLUME_BUY")]);
    m_lifetime_volume_buy_isSet = !json[QString("LIFETIME_VOLUME_BUY")].isNull() && m_lifetime_volume_buy_isValid;

    m_lifetime_volume_sell_isValid = ::OpenAPI::fromJsonValue(lifetime_volume_sell, json[QString("LIFETIME_VOLUME_SELL")]);
    m_lifetime_volume_sell_isSet = !json[QString("LIFETIME_VOLUME_SELL")].isNull() && m_lifetime_volume_sell_isValid;

    m_lifetime_volume_unknown_isValid = ::OpenAPI::fromJsonValue(lifetime_volume_unknown, json[QString("LIFETIME_VOLUME_UNKNOWN")]);
    m_lifetime_volume_unknown_isSet = !json[QString("LIFETIME_VOLUME_UNKNOWN")].isNull() && m_lifetime_volume_unknown_isValid;

    m_mapped_instrument_isValid = ::OpenAPI::fromJsonValue(mapped_instrument, json[QString("MAPPED_INSTRUMENT")]);
    m_mapped_instrument_isSet = !json[QString("MAPPED_INSTRUMENT")].isNull() && m_mapped_instrument_isValid;

    m_market_isValid = ::OpenAPI::fromJsonValue(market, json[QString("MARKET")]);
    m_market_isSet = !json[QString("MARKET")].isNull() && m_market_isValid;

    m_moving_180_day_high_isValid = ::OpenAPI::fromJsonValue(moving_180_day_high, json[QString("MOVING_180_DAY_HIGH")]);
    m_moving_180_day_high_isSet = !json[QString("MOVING_180_DAY_HIGH")].isNull() && m_moving_180_day_high_isValid;

    m_moving_180_day_low_isValid = ::OpenAPI::fromJsonValue(moving_180_day_low, json[QString("MOVING_180_DAY_LOW")]);
    m_moving_180_day_low_isSet = !json[QString("MOVING_180_DAY_LOW")].isNull() && m_moving_180_day_low_isValid;

    m_moving_180_day_open_isValid = ::OpenAPI::fromJsonValue(moving_180_day_open, json[QString("MOVING_180_DAY_OPEN")]);
    m_moving_180_day_open_isSet = !json[QString("MOVING_180_DAY_OPEN")].isNull() && m_moving_180_day_open_isValid;

    m_moving_180_day_quote_volume_isValid = ::OpenAPI::fromJsonValue(moving_180_day_quote_volume, json[QString("MOVING_180_DAY_QUOTE_VOLUME")]);
    m_moving_180_day_quote_volume_isSet = !json[QString("MOVING_180_DAY_QUOTE_VOLUME")].isNull() && m_moving_180_day_quote_volume_isValid;

    m_moving_180_day_quote_volume_buy_isValid = ::OpenAPI::fromJsonValue(moving_180_day_quote_volume_buy, json[QString("MOVING_180_DAY_QUOTE_VOLUME_BUY")]);
    m_moving_180_day_quote_volume_buy_isSet = !json[QString("MOVING_180_DAY_QUOTE_VOLUME_BUY")].isNull() && m_moving_180_day_quote_volume_buy_isValid;

    m_moving_180_day_quote_volume_sell_isValid = ::OpenAPI::fromJsonValue(moving_180_day_quote_volume_sell, json[QString("MOVING_180_DAY_QUOTE_VOLUME_SELL")]);
    m_moving_180_day_quote_volume_sell_isSet = !json[QString("MOVING_180_DAY_QUOTE_VOLUME_SELL")].isNull() && m_moving_180_day_quote_volume_sell_isValid;

    m_moving_180_day_quote_volume_unknown_isValid = ::OpenAPI::fromJsonValue(moving_180_day_quote_volume_unknown, json[QString("MOVING_180_DAY_QUOTE_VOLUME_UNKNOWN")]);
    m_moving_180_day_quote_volume_unknown_isSet = !json[QString("MOVING_180_DAY_QUOTE_VOLUME_UNKNOWN")].isNull() && m_moving_180_day_quote_volume_unknown_isValid;

    m_moving_180_day_total_trades_isValid = ::OpenAPI::fromJsonValue(moving_180_day_total_trades, json[QString("MOVING_180_DAY_TOTAL_TRADES")]);
    m_moving_180_day_total_trades_isSet = !json[QString("MOVING_180_DAY_TOTAL_TRADES")].isNull() && m_moving_180_day_total_trades_isValid;

    m_moving_180_day_total_trades_buy_isValid = ::OpenAPI::fromJsonValue(moving_180_day_total_trades_buy, json[QString("MOVING_180_DAY_TOTAL_TRADES_BUY")]);
    m_moving_180_day_total_trades_buy_isSet = !json[QString("MOVING_180_DAY_TOTAL_TRADES_BUY")].isNull() && m_moving_180_day_total_trades_buy_isValid;

    m_moving_180_day_total_trades_sell_isValid = ::OpenAPI::fromJsonValue(moving_180_day_total_trades_sell, json[QString("MOVING_180_DAY_TOTAL_TRADES_SELL")]);
    m_moving_180_day_total_trades_sell_isSet = !json[QString("MOVING_180_DAY_TOTAL_TRADES_SELL")].isNull() && m_moving_180_day_total_trades_sell_isValid;

    m_moving_180_day_total_trades_unknown_isValid = ::OpenAPI::fromJsonValue(moving_180_day_total_trades_unknown, json[QString("MOVING_180_DAY_TOTAL_TRADES_UNKNOWN")]);
    m_moving_180_day_total_trades_unknown_isSet = !json[QString("MOVING_180_DAY_TOTAL_TRADES_UNKNOWN")].isNull() && m_moving_180_day_total_trades_unknown_isValid;

    m_moving_180_day_volume_isValid = ::OpenAPI::fromJsonValue(moving_180_day_volume, json[QString("MOVING_180_DAY_VOLUME")]);
    m_moving_180_day_volume_isSet = !json[QString("MOVING_180_DAY_VOLUME")].isNull() && m_moving_180_day_volume_isValid;

    m_moving_180_day_volume_buy_isValid = ::OpenAPI::fromJsonValue(moving_180_day_volume_buy, json[QString("MOVING_180_DAY_VOLUME_BUY")]);
    m_moving_180_day_volume_buy_isSet = !json[QString("MOVING_180_DAY_VOLUME_BUY")].isNull() && m_moving_180_day_volume_buy_isValid;

    m_moving_180_day_volume_sell_isValid = ::OpenAPI::fromJsonValue(moving_180_day_volume_sell, json[QString("MOVING_180_DAY_VOLUME_SELL")]);
    m_moving_180_day_volume_sell_isSet = !json[QString("MOVING_180_DAY_VOLUME_SELL")].isNull() && m_moving_180_day_volume_sell_isValid;

    m_moving_180_day_volume_unknown_isValid = ::OpenAPI::fromJsonValue(moving_180_day_volume_unknown, json[QString("MOVING_180_DAY_VOLUME_UNKNOWN")]);
    m_moving_180_day_volume_unknown_isSet = !json[QString("MOVING_180_DAY_VOLUME_UNKNOWN")].isNull() && m_moving_180_day_volume_unknown_isValid;

    m_moving_24_hour_high_isValid = ::OpenAPI::fromJsonValue(moving_24_hour_high, json[QString("MOVING_24_HOUR_HIGH")]);
    m_moving_24_hour_high_isSet = !json[QString("MOVING_24_HOUR_HIGH")].isNull() && m_moving_24_hour_high_isValid;

    m_moving_24_hour_low_isValid = ::OpenAPI::fromJsonValue(moving_24_hour_low, json[QString("MOVING_24_HOUR_LOW")]);
    m_moving_24_hour_low_isSet = !json[QString("MOVING_24_HOUR_LOW")].isNull() && m_moving_24_hour_low_isValid;

    m_moving_24_hour_open_isValid = ::OpenAPI::fromJsonValue(moving_24_hour_open, json[QString("MOVING_24_HOUR_OPEN")]);
    m_moving_24_hour_open_isSet = !json[QString("MOVING_24_HOUR_OPEN")].isNull() && m_moving_24_hour_open_isValid;

    m_moving_24_hour_quote_volume_isValid = ::OpenAPI::fromJsonValue(moving_24_hour_quote_volume, json[QString("MOVING_24_HOUR_QUOTE_VOLUME")]);
    m_moving_24_hour_quote_volume_isSet = !json[QString("MOVING_24_HOUR_QUOTE_VOLUME")].isNull() && m_moving_24_hour_quote_volume_isValid;

    m_moving_24_hour_quote_volume_buy_isValid = ::OpenAPI::fromJsonValue(moving_24_hour_quote_volume_buy, json[QString("MOVING_24_HOUR_QUOTE_VOLUME_BUY")]);
    m_moving_24_hour_quote_volume_buy_isSet = !json[QString("MOVING_24_HOUR_QUOTE_VOLUME_BUY")].isNull() && m_moving_24_hour_quote_volume_buy_isValid;

    m_moving_24_hour_quote_volume_sell_isValid = ::OpenAPI::fromJsonValue(moving_24_hour_quote_volume_sell, json[QString("MOVING_24_HOUR_QUOTE_VOLUME_SELL")]);
    m_moving_24_hour_quote_volume_sell_isSet = !json[QString("MOVING_24_HOUR_QUOTE_VOLUME_SELL")].isNull() && m_moving_24_hour_quote_volume_sell_isValid;

    m_moving_24_hour_quote_volume_unknown_isValid = ::OpenAPI::fromJsonValue(moving_24_hour_quote_volume_unknown, json[QString("MOVING_24_HOUR_QUOTE_VOLUME_UNKNOWN")]);
    m_moving_24_hour_quote_volume_unknown_isSet = !json[QString("MOVING_24_HOUR_QUOTE_VOLUME_UNKNOWN")].isNull() && m_moving_24_hour_quote_volume_unknown_isValid;

    m_moving_24_hour_total_trades_isValid = ::OpenAPI::fromJsonValue(moving_24_hour_total_trades, json[QString("MOVING_24_HOUR_TOTAL_TRADES")]);
    m_moving_24_hour_total_trades_isSet = !json[QString("MOVING_24_HOUR_TOTAL_TRADES")].isNull() && m_moving_24_hour_total_trades_isValid;

    m_moving_24_hour_total_trades_buy_isValid = ::OpenAPI::fromJsonValue(moving_24_hour_total_trades_buy, json[QString("MOVING_24_HOUR_TOTAL_TRADES_BUY")]);
    m_moving_24_hour_total_trades_buy_isSet = !json[QString("MOVING_24_HOUR_TOTAL_TRADES_BUY")].isNull() && m_moving_24_hour_total_trades_buy_isValid;

    m_moving_24_hour_total_trades_sell_isValid = ::OpenAPI::fromJsonValue(moving_24_hour_total_trades_sell, json[QString("MOVING_24_HOUR_TOTAL_TRADES_SELL")]);
    m_moving_24_hour_total_trades_sell_isSet = !json[QString("MOVING_24_HOUR_TOTAL_TRADES_SELL")].isNull() && m_moving_24_hour_total_trades_sell_isValid;

    m_moving_24_hour_total_trades_unknown_isValid = ::OpenAPI::fromJsonValue(moving_24_hour_total_trades_unknown, json[QString("MOVING_24_HOUR_TOTAL_TRADES_UNKNOWN")]);
    m_moving_24_hour_total_trades_unknown_isSet = !json[QString("MOVING_24_HOUR_TOTAL_TRADES_UNKNOWN")].isNull() && m_moving_24_hour_total_trades_unknown_isValid;

    m_moving_24_hour_volume_isValid = ::OpenAPI::fromJsonValue(moving_24_hour_volume, json[QString("MOVING_24_HOUR_VOLUME")]);
    m_moving_24_hour_volume_isSet = !json[QString("MOVING_24_HOUR_VOLUME")].isNull() && m_moving_24_hour_volume_isValid;

    m_moving_24_hour_volume_buy_isValid = ::OpenAPI::fromJsonValue(moving_24_hour_volume_buy, json[QString("MOVING_24_HOUR_VOLUME_BUY")]);
    m_moving_24_hour_volume_buy_isSet = !json[QString("MOVING_24_HOUR_VOLUME_BUY")].isNull() && m_moving_24_hour_volume_buy_isValid;

    m_moving_24_hour_volume_sell_isValid = ::OpenAPI::fromJsonValue(moving_24_hour_volume_sell, json[QString("MOVING_24_HOUR_VOLUME_SELL")]);
    m_moving_24_hour_volume_sell_isSet = !json[QString("MOVING_24_HOUR_VOLUME_SELL")].isNull() && m_moving_24_hour_volume_sell_isValid;

    m_moving_24_hour_volume_unknown_isValid = ::OpenAPI::fromJsonValue(moving_24_hour_volume_unknown, json[QString("MOVING_24_HOUR_VOLUME_UNKNOWN")]);
    m_moving_24_hour_volume_unknown_isSet = !json[QString("MOVING_24_HOUR_VOLUME_UNKNOWN")].isNull() && m_moving_24_hour_volume_unknown_isValid;

    m_moving_30_day_high_isValid = ::OpenAPI::fromJsonValue(moving_30_day_high, json[QString("MOVING_30_DAY_HIGH")]);
    m_moving_30_day_high_isSet = !json[QString("MOVING_30_DAY_HIGH")].isNull() && m_moving_30_day_high_isValid;

    m_moving_30_day_low_isValid = ::OpenAPI::fromJsonValue(moving_30_day_low, json[QString("MOVING_30_DAY_LOW")]);
    m_moving_30_day_low_isSet = !json[QString("MOVING_30_DAY_LOW")].isNull() && m_moving_30_day_low_isValid;

    m_moving_30_day_open_isValid = ::OpenAPI::fromJsonValue(moving_30_day_open, json[QString("MOVING_30_DAY_OPEN")]);
    m_moving_30_day_open_isSet = !json[QString("MOVING_30_DAY_OPEN")].isNull() && m_moving_30_day_open_isValid;

    m_moving_30_day_quote_volume_isValid = ::OpenAPI::fromJsonValue(moving_30_day_quote_volume, json[QString("MOVING_30_DAY_QUOTE_VOLUME")]);
    m_moving_30_day_quote_volume_isSet = !json[QString("MOVING_30_DAY_QUOTE_VOLUME")].isNull() && m_moving_30_day_quote_volume_isValid;

    m_moving_30_day_quote_volume_buy_isValid = ::OpenAPI::fromJsonValue(moving_30_day_quote_volume_buy, json[QString("MOVING_30_DAY_QUOTE_VOLUME_BUY")]);
    m_moving_30_day_quote_volume_buy_isSet = !json[QString("MOVING_30_DAY_QUOTE_VOLUME_BUY")].isNull() && m_moving_30_day_quote_volume_buy_isValid;

    m_moving_30_day_quote_volume_sell_isValid = ::OpenAPI::fromJsonValue(moving_30_day_quote_volume_sell, json[QString("MOVING_30_DAY_QUOTE_VOLUME_SELL")]);
    m_moving_30_day_quote_volume_sell_isSet = !json[QString("MOVING_30_DAY_QUOTE_VOLUME_SELL")].isNull() && m_moving_30_day_quote_volume_sell_isValid;

    m_moving_30_day_quote_volume_unknown_isValid = ::OpenAPI::fromJsonValue(moving_30_day_quote_volume_unknown, json[QString("MOVING_30_DAY_QUOTE_VOLUME_UNKNOWN")]);
    m_moving_30_day_quote_volume_unknown_isSet = !json[QString("MOVING_30_DAY_QUOTE_VOLUME_UNKNOWN")].isNull() && m_moving_30_day_quote_volume_unknown_isValid;

    m_moving_30_day_total_trades_isValid = ::OpenAPI::fromJsonValue(moving_30_day_total_trades, json[QString("MOVING_30_DAY_TOTAL_TRADES")]);
    m_moving_30_day_total_trades_isSet = !json[QString("MOVING_30_DAY_TOTAL_TRADES")].isNull() && m_moving_30_day_total_trades_isValid;

    m_moving_30_day_total_trades_buy_isValid = ::OpenAPI::fromJsonValue(moving_30_day_total_trades_buy, json[QString("MOVING_30_DAY_TOTAL_TRADES_BUY")]);
    m_moving_30_day_total_trades_buy_isSet = !json[QString("MOVING_30_DAY_TOTAL_TRADES_BUY")].isNull() && m_moving_30_day_total_trades_buy_isValid;

    m_moving_30_day_total_trades_sell_isValid = ::OpenAPI::fromJsonValue(moving_30_day_total_trades_sell, json[QString("MOVING_30_DAY_TOTAL_TRADES_SELL")]);
    m_moving_30_day_total_trades_sell_isSet = !json[QString("MOVING_30_DAY_TOTAL_TRADES_SELL")].isNull() && m_moving_30_day_total_trades_sell_isValid;

    m_moving_30_day_total_trades_unknown_isValid = ::OpenAPI::fromJsonValue(moving_30_day_total_trades_unknown, json[QString("MOVING_30_DAY_TOTAL_TRADES_UNKNOWN")]);
    m_moving_30_day_total_trades_unknown_isSet = !json[QString("MOVING_30_DAY_TOTAL_TRADES_UNKNOWN")].isNull() && m_moving_30_day_total_trades_unknown_isValid;

    m_moving_30_day_volume_isValid = ::OpenAPI::fromJsonValue(moving_30_day_volume, json[QString("MOVING_30_DAY_VOLUME")]);
    m_moving_30_day_volume_isSet = !json[QString("MOVING_30_DAY_VOLUME")].isNull() && m_moving_30_day_volume_isValid;

    m_moving_30_day_volume_buy_isValid = ::OpenAPI::fromJsonValue(moving_30_day_volume_buy, json[QString("MOVING_30_DAY_VOLUME_BUY")]);
    m_moving_30_day_volume_buy_isSet = !json[QString("MOVING_30_DAY_VOLUME_BUY")].isNull() && m_moving_30_day_volume_buy_isValid;

    m_moving_30_day_volume_sell_isValid = ::OpenAPI::fromJsonValue(moving_30_day_volume_sell, json[QString("MOVING_30_DAY_VOLUME_SELL")]);
    m_moving_30_day_volume_sell_isSet = !json[QString("MOVING_30_DAY_VOLUME_SELL")].isNull() && m_moving_30_day_volume_sell_isValid;

    m_moving_30_day_volume_unknown_isValid = ::OpenAPI::fromJsonValue(moving_30_day_volume_unknown, json[QString("MOVING_30_DAY_VOLUME_UNKNOWN")]);
    m_moving_30_day_volume_unknown_isSet = !json[QString("MOVING_30_DAY_VOLUME_UNKNOWN")].isNull() && m_moving_30_day_volume_unknown_isValid;

    m_moving_365_day_high_isValid = ::OpenAPI::fromJsonValue(moving_365_day_high, json[QString("MOVING_365_DAY_HIGH")]);
    m_moving_365_day_high_isSet = !json[QString("MOVING_365_DAY_HIGH")].isNull() && m_moving_365_day_high_isValid;

    m_moving_365_day_low_isValid = ::OpenAPI::fromJsonValue(moving_365_day_low, json[QString("MOVING_365_DAY_LOW")]);
    m_moving_365_day_low_isSet = !json[QString("MOVING_365_DAY_LOW")].isNull() && m_moving_365_day_low_isValid;

    m_moving_365_day_open_isValid = ::OpenAPI::fromJsonValue(moving_365_day_open, json[QString("MOVING_365_DAY_OPEN")]);
    m_moving_365_day_open_isSet = !json[QString("MOVING_365_DAY_OPEN")].isNull() && m_moving_365_day_open_isValid;

    m_moving_365_day_quote_volume_isValid = ::OpenAPI::fromJsonValue(moving_365_day_quote_volume, json[QString("MOVING_365_DAY_QUOTE_VOLUME")]);
    m_moving_365_day_quote_volume_isSet = !json[QString("MOVING_365_DAY_QUOTE_VOLUME")].isNull() && m_moving_365_day_quote_volume_isValid;

    m_moving_365_day_quote_volume_buy_isValid = ::OpenAPI::fromJsonValue(moving_365_day_quote_volume_buy, json[QString("MOVING_365_DAY_QUOTE_VOLUME_BUY")]);
    m_moving_365_day_quote_volume_buy_isSet = !json[QString("MOVING_365_DAY_QUOTE_VOLUME_BUY")].isNull() && m_moving_365_day_quote_volume_buy_isValid;

    m_moving_365_day_quote_volume_sell_isValid = ::OpenAPI::fromJsonValue(moving_365_day_quote_volume_sell, json[QString("MOVING_365_DAY_QUOTE_VOLUME_SELL")]);
    m_moving_365_day_quote_volume_sell_isSet = !json[QString("MOVING_365_DAY_QUOTE_VOLUME_SELL")].isNull() && m_moving_365_day_quote_volume_sell_isValid;

    m_moving_365_day_quote_volume_unknown_isValid = ::OpenAPI::fromJsonValue(moving_365_day_quote_volume_unknown, json[QString("MOVING_365_DAY_QUOTE_VOLUME_UNKNOWN")]);
    m_moving_365_day_quote_volume_unknown_isSet = !json[QString("MOVING_365_DAY_QUOTE_VOLUME_UNKNOWN")].isNull() && m_moving_365_day_quote_volume_unknown_isValid;

    m_moving_365_day_total_trades_isValid = ::OpenAPI::fromJsonValue(moving_365_day_total_trades, json[QString("MOVING_365_DAY_TOTAL_TRADES")]);
    m_moving_365_day_total_trades_isSet = !json[QString("MOVING_365_DAY_TOTAL_TRADES")].isNull() && m_moving_365_day_total_trades_isValid;

    m_moving_365_day_total_trades_buy_isValid = ::OpenAPI::fromJsonValue(moving_365_day_total_trades_buy, json[QString("MOVING_365_DAY_TOTAL_TRADES_BUY")]);
    m_moving_365_day_total_trades_buy_isSet = !json[QString("MOVING_365_DAY_TOTAL_TRADES_BUY")].isNull() && m_moving_365_day_total_trades_buy_isValid;

    m_moving_365_day_total_trades_sell_isValid = ::OpenAPI::fromJsonValue(moving_365_day_total_trades_sell, json[QString("MOVING_365_DAY_TOTAL_TRADES_SELL")]);
    m_moving_365_day_total_trades_sell_isSet = !json[QString("MOVING_365_DAY_TOTAL_TRADES_SELL")].isNull() && m_moving_365_day_total_trades_sell_isValid;

    m_moving_365_day_total_trades_unknown_isValid = ::OpenAPI::fromJsonValue(moving_365_day_total_trades_unknown, json[QString("MOVING_365_DAY_TOTAL_TRADES_UNKNOWN")]);
    m_moving_365_day_total_trades_unknown_isSet = !json[QString("MOVING_365_DAY_TOTAL_TRADES_UNKNOWN")].isNull() && m_moving_365_day_total_trades_unknown_isValid;

    m_moving_365_day_volume_isValid = ::OpenAPI::fromJsonValue(moving_365_day_volume, json[QString("MOVING_365_DAY_VOLUME")]);
    m_moving_365_day_volume_isSet = !json[QString("MOVING_365_DAY_VOLUME")].isNull() && m_moving_365_day_volume_isValid;

    m_moving_365_day_volume_buy_isValid = ::OpenAPI::fromJsonValue(moving_365_day_volume_buy, json[QString("MOVING_365_DAY_VOLUME_BUY")]);
    m_moving_365_day_volume_buy_isSet = !json[QString("MOVING_365_DAY_VOLUME_BUY")].isNull() && m_moving_365_day_volume_buy_isValid;

    m_moving_365_day_volume_sell_isValid = ::OpenAPI::fromJsonValue(moving_365_day_volume_sell, json[QString("MOVING_365_DAY_VOLUME_SELL")]);
    m_moving_365_day_volume_sell_isSet = !json[QString("MOVING_365_DAY_VOLUME_SELL")].isNull() && m_moving_365_day_volume_sell_isValid;

    m_moving_365_day_volume_unknown_isValid = ::OpenAPI::fromJsonValue(moving_365_day_volume_unknown, json[QString("MOVING_365_DAY_VOLUME_UNKNOWN")]);
    m_moving_365_day_volume_unknown_isSet = !json[QString("MOVING_365_DAY_VOLUME_UNKNOWN")].isNull() && m_moving_365_day_volume_unknown_isValid;

    m_moving_7_day_high_isValid = ::OpenAPI::fromJsonValue(moving_7_day_high, json[QString("MOVING_7_DAY_HIGH")]);
    m_moving_7_day_high_isSet = !json[QString("MOVING_7_DAY_HIGH")].isNull() && m_moving_7_day_high_isValid;

    m_moving_7_day_low_isValid = ::OpenAPI::fromJsonValue(moving_7_day_low, json[QString("MOVING_7_DAY_LOW")]);
    m_moving_7_day_low_isSet = !json[QString("MOVING_7_DAY_LOW")].isNull() && m_moving_7_day_low_isValid;

    m_moving_7_day_open_isValid = ::OpenAPI::fromJsonValue(moving_7_day_open, json[QString("MOVING_7_DAY_OPEN")]);
    m_moving_7_day_open_isSet = !json[QString("MOVING_7_DAY_OPEN")].isNull() && m_moving_7_day_open_isValid;

    m_moving_7_day_quote_volume_isValid = ::OpenAPI::fromJsonValue(moving_7_day_quote_volume, json[QString("MOVING_7_DAY_QUOTE_VOLUME")]);
    m_moving_7_day_quote_volume_isSet = !json[QString("MOVING_7_DAY_QUOTE_VOLUME")].isNull() && m_moving_7_day_quote_volume_isValid;

    m_moving_7_day_quote_volume_buy_isValid = ::OpenAPI::fromJsonValue(moving_7_day_quote_volume_buy, json[QString("MOVING_7_DAY_QUOTE_VOLUME_BUY")]);
    m_moving_7_day_quote_volume_buy_isSet = !json[QString("MOVING_7_DAY_QUOTE_VOLUME_BUY")].isNull() && m_moving_7_day_quote_volume_buy_isValid;

    m_moving_7_day_quote_volume_sell_isValid = ::OpenAPI::fromJsonValue(moving_7_day_quote_volume_sell, json[QString("MOVING_7_DAY_QUOTE_VOLUME_SELL")]);
    m_moving_7_day_quote_volume_sell_isSet = !json[QString("MOVING_7_DAY_QUOTE_VOLUME_SELL")].isNull() && m_moving_7_day_quote_volume_sell_isValid;

    m_moving_7_day_quote_volume_unknown_isValid = ::OpenAPI::fromJsonValue(moving_7_day_quote_volume_unknown, json[QString("MOVING_7_DAY_QUOTE_VOLUME_UNKNOWN")]);
    m_moving_7_day_quote_volume_unknown_isSet = !json[QString("MOVING_7_DAY_QUOTE_VOLUME_UNKNOWN")].isNull() && m_moving_7_day_quote_volume_unknown_isValid;

    m_moving_7_day_total_trades_isValid = ::OpenAPI::fromJsonValue(moving_7_day_total_trades, json[QString("MOVING_7_DAY_TOTAL_TRADES")]);
    m_moving_7_day_total_trades_isSet = !json[QString("MOVING_7_DAY_TOTAL_TRADES")].isNull() && m_moving_7_day_total_trades_isValid;

    m_moving_7_day_total_trades_buy_isValid = ::OpenAPI::fromJsonValue(moving_7_day_total_trades_buy, json[QString("MOVING_7_DAY_TOTAL_TRADES_BUY")]);
    m_moving_7_day_total_trades_buy_isSet = !json[QString("MOVING_7_DAY_TOTAL_TRADES_BUY")].isNull() && m_moving_7_day_total_trades_buy_isValid;

    m_moving_7_day_total_trades_sell_isValid = ::OpenAPI::fromJsonValue(moving_7_day_total_trades_sell, json[QString("MOVING_7_DAY_TOTAL_TRADES_SELL")]);
    m_moving_7_day_total_trades_sell_isSet = !json[QString("MOVING_7_DAY_TOTAL_TRADES_SELL")].isNull() && m_moving_7_day_total_trades_sell_isValid;

    m_moving_7_day_total_trades_unknown_isValid = ::OpenAPI::fromJsonValue(moving_7_day_total_trades_unknown, json[QString("MOVING_7_DAY_TOTAL_TRADES_UNKNOWN")]);
    m_moving_7_day_total_trades_unknown_isSet = !json[QString("MOVING_7_DAY_TOTAL_TRADES_UNKNOWN")].isNull() && m_moving_7_day_total_trades_unknown_isValid;

    m_moving_7_day_volume_isValid = ::OpenAPI::fromJsonValue(moving_7_day_volume, json[QString("MOVING_7_DAY_VOLUME")]);
    m_moving_7_day_volume_isSet = !json[QString("MOVING_7_DAY_VOLUME")].isNull() && m_moving_7_day_volume_isValid;

    m_moving_7_day_volume_buy_isValid = ::OpenAPI::fromJsonValue(moving_7_day_volume_buy, json[QString("MOVING_7_DAY_VOLUME_BUY")]);
    m_moving_7_day_volume_buy_isSet = !json[QString("MOVING_7_DAY_VOLUME_BUY")].isNull() && m_moving_7_day_volume_buy_isValid;

    m_moving_7_day_volume_sell_isValid = ::OpenAPI::fromJsonValue(moving_7_day_volume_sell, json[QString("MOVING_7_DAY_VOLUME_SELL")]);
    m_moving_7_day_volume_sell_isSet = !json[QString("MOVING_7_DAY_VOLUME_SELL")].isNull() && m_moving_7_day_volume_sell_isValid;

    m_moving_7_day_volume_unknown_isValid = ::OpenAPI::fromJsonValue(moving_7_day_volume_unknown, json[QString("MOVING_7_DAY_VOLUME_UNKNOWN")]);
    m_moving_7_day_volume_unknown_isSet = !json[QString("MOVING_7_DAY_VOLUME_UNKNOWN")].isNull() && m_moving_7_day_volume_unknown_isValid;

    m_moving_90_day_high_isValid = ::OpenAPI::fromJsonValue(moving_90_day_high, json[QString("MOVING_90_DAY_HIGH")]);
    m_moving_90_day_high_isSet = !json[QString("MOVING_90_DAY_HIGH")].isNull() && m_moving_90_day_high_isValid;

    m_moving_90_day_low_isValid = ::OpenAPI::fromJsonValue(moving_90_day_low, json[QString("MOVING_90_DAY_LOW")]);
    m_moving_90_day_low_isSet = !json[QString("MOVING_90_DAY_LOW")].isNull() && m_moving_90_day_low_isValid;

    m_moving_90_day_open_isValid = ::OpenAPI::fromJsonValue(moving_90_day_open, json[QString("MOVING_90_DAY_OPEN")]);
    m_moving_90_day_open_isSet = !json[QString("MOVING_90_DAY_OPEN")].isNull() && m_moving_90_day_open_isValid;

    m_moving_90_day_quote_volume_isValid = ::OpenAPI::fromJsonValue(moving_90_day_quote_volume, json[QString("MOVING_90_DAY_QUOTE_VOLUME")]);
    m_moving_90_day_quote_volume_isSet = !json[QString("MOVING_90_DAY_QUOTE_VOLUME")].isNull() && m_moving_90_day_quote_volume_isValid;

    m_moving_90_day_quote_volume_buy_isValid = ::OpenAPI::fromJsonValue(moving_90_day_quote_volume_buy, json[QString("MOVING_90_DAY_QUOTE_VOLUME_BUY")]);
    m_moving_90_day_quote_volume_buy_isSet = !json[QString("MOVING_90_DAY_QUOTE_VOLUME_BUY")].isNull() && m_moving_90_day_quote_volume_buy_isValid;

    m_moving_90_day_quote_volume_sell_isValid = ::OpenAPI::fromJsonValue(moving_90_day_quote_volume_sell, json[QString("MOVING_90_DAY_QUOTE_VOLUME_SELL")]);
    m_moving_90_day_quote_volume_sell_isSet = !json[QString("MOVING_90_DAY_QUOTE_VOLUME_SELL")].isNull() && m_moving_90_day_quote_volume_sell_isValid;

    m_moving_90_day_quote_volume_unknown_isValid = ::OpenAPI::fromJsonValue(moving_90_day_quote_volume_unknown, json[QString("MOVING_90_DAY_QUOTE_VOLUME_UNKNOWN")]);
    m_moving_90_day_quote_volume_unknown_isSet = !json[QString("MOVING_90_DAY_QUOTE_VOLUME_UNKNOWN")].isNull() && m_moving_90_day_quote_volume_unknown_isValid;

    m_moving_90_day_total_trades_isValid = ::OpenAPI::fromJsonValue(moving_90_day_total_trades, json[QString("MOVING_90_DAY_TOTAL_TRADES")]);
    m_moving_90_day_total_trades_isSet = !json[QString("MOVING_90_DAY_TOTAL_TRADES")].isNull() && m_moving_90_day_total_trades_isValid;

    m_moving_90_day_total_trades_buy_isValid = ::OpenAPI::fromJsonValue(moving_90_day_total_trades_buy, json[QString("MOVING_90_DAY_TOTAL_TRADES_BUY")]);
    m_moving_90_day_total_trades_buy_isSet = !json[QString("MOVING_90_DAY_TOTAL_TRADES_BUY")].isNull() && m_moving_90_day_total_trades_buy_isValid;

    m_moving_90_day_total_trades_sell_isValid = ::OpenAPI::fromJsonValue(moving_90_day_total_trades_sell, json[QString("MOVING_90_DAY_TOTAL_TRADES_SELL")]);
    m_moving_90_day_total_trades_sell_isSet = !json[QString("MOVING_90_DAY_TOTAL_TRADES_SELL")].isNull() && m_moving_90_day_total_trades_sell_isValid;

    m_moving_90_day_total_trades_unknown_isValid = ::OpenAPI::fromJsonValue(moving_90_day_total_trades_unknown, json[QString("MOVING_90_DAY_TOTAL_TRADES_UNKNOWN")]);
    m_moving_90_day_total_trades_unknown_isSet = !json[QString("MOVING_90_DAY_TOTAL_TRADES_UNKNOWN")].isNull() && m_moving_90_day_total_trades_unknown_isValid;

    m_moving_90_day_volume_isValid = ::OpenAPI::fromJsonValue(moving_90_day_volume, json[QString("MOVING_90_DAY_VOLUME")]);
    m_moving_90_day_volume_isSet = !json[QString("MOVING_90_DAY_VOLUME")].isNull() && m_moving_90_day_volume_isValid;

    m_moving_90_day_volume_buy_isValid = ::OpenAPI::fromJsonValue(moving_90_day_volume_buy, json[QString("MOVING_90_DAY_VOLUME_BUY")]);
    m_moving_90_day_volume_buy_isSet = !json[QString("MOVING_90_DAY_VOLUME_BUY")].isNull() && m_moving_90_day_volume_buy_isValid;

    m_moving_90_day_volume_sell_isValid = ::OpenAPI::fromJsonValue(moving_90_day_volume_sell, json[QString("MOVING_90_DAY_VOLUME_SELL")]);
    m_moving_90_day_volume_sell_isSet = !json[QString("MOVING_90_DAY_VOLUME_SELL")].isNull() && m_moving_90_day_volume_sell_isValid;

    m_moving_90_day_volume_unknown_isValid = ::OpenAPI::fromJsonValue(moving_90_day_volume_unknown, json[QString("MOVING_90_DAY_VOLUME_UNKNOWN")]);
    m_moving_90_day_volume_unknown_isSet = !json[QString("MOVING_90_DAY_VOLUME_UNKNOWN")].isNull() && m_moving_90_day_volume_unknown_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(price, json[QString("PRICE")]);
    m_price_isSet = !json[QString("PRICE")].isNull() && m_price_isValid;

    m_price_flag_isValid = ::OpenAPI::fromJsonValue(price_flag, json[QString("PRICE_FLAG")]);
    m_price_flag_isSet = !json[QString("PRICE_FLAG")].isNull() && m_price_flag_isValid;

    m_price_last_update_ts_isValid = ::OpenAPI::fromJsonValue(price_last_update_ts, json[QString("PRICE_LAST_UPDATE_TS")]);
    m_price_last_update_ts_isSet = !json[QString("PRICE_LAST_UPDATE_TS")].isNull() && m_price_last_update_ts_isValid;

    m_quote_isValid = ::OpenAPI::fromJsonValue(quote, json[QString("QUOTE")]);
    m_quote_isSet = !json[QString("QUOTE")].isNull() && m_quote_isValid;

    m_top_ask_last_update_ts_isValid = ::OpenAPI::fromJsonValue(top_ask_last_update_ts, json[QString("TOP_ASK_LAST_UPDATE_TS")]);
    m_top_ask_last_update_ts_isSet = !json[QString("TOP_ASK_LAST_UPDATE_TS")].isNull() && m_top_ask_last_update_ts_isValid;

    m_top_ask_price_isValid = ::OpenAPI::fromJsonValue(top_ask_price, json[QString("TOP_ASK_PRICE")]);
    m_top_ask_price_isSet = !json[QString("TOP_ASK_PRICE")].isNull() && m_top_ask_price_isValid;

    m_top_ask_quantity_isValid = ::OpenAPI::fromJsonValue(top_ask_quantity, json[QString("TOP_ASK_QUANTITY")]);
    m_top_ask_quantity_isSet = !json[QString("TOP_ASK_QUANTITY")].isNull() && m_top_ask_quantity_isValid;

    m_top_bid_last_update_ts_isValid = ::OpenAPI::fromJsonValue(top_bid_last_update_ts, json[QString("TOP_BID_LAST_UPDATE_TS")]);
    m_top_bid_last_update_ts_isSet = !json[QString("TOP_BID_LAST_UPDATE_TS")].isNull() && m_top_bid_last_update_ts_isValid;

    m_top_bid_price_isValid = ::OpenAPI::fromJsonValue(top_bid_price, json[QString("TOP_BID_PRICE")]);
    m_top_bid_price_isSet = !json[QString("TOP_BID_PRICE")].isNull() && m_top_bid_price_isValid;

    m_top_bid_quantity_isValid = ::OpenAPI::fromJsonValue(top_bid_quantity, json[QString("TOP_BID_QUANTITY")]);
    m_top_bid_quantity_isSet = !json[QString("TOP_BID_QUANTITY")].isNull() && m_top_bid_quantity_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(type, json[QString("TYPE")]);
    m_type_isSet = !json[QString("TYPE")].isNull() && m_type_isValid;
}

QString OAISPOT_INSTRUMENT_MARKET_DATA::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISPOT_INSTRUMENT_MARKET_DATA::asJsonObject() const {
    QJsonObject obj;
    if (m_base_isSet) {
        obj.insert(QString("BASE"), ::OpenAPI::toJsonValue(base));
    }
    if (m_ccseq_isSet) {
        obj.insert(QString("CCSEQ"), ::OpenAPI::toJsonValue(ccseq));
    }
    if (m_current_day_high_isSet) {
        obj.insert(QString("CURRENT_DAY_HIGH"), ::OpenAPI::toJsonValue(current_day_high));
    }
    if (m_current_day_low_isSet) {
        obj.insert(QString("CURRENT_DAY_LOW"), ::OpenAPI::toJsonValue(current_day_low));
    }
    if (m_current_day_open_isSet) {
        obj.insert(QString("CURRENT_DAY_OPEN"), ::OpenAPI::toJsonValue(current_day_open));
    }
    if (m_current_day_quote_volume_isSet) {
        obj.insert(QString("CURRENT_DAY_QUOTE_VOLUME"), ::OpenAPI::toJsonValue(current_day_quote_volume));
    }
    if (m_current_day_quote_volume_buy_isSet) {
        obj.insert(QString("CURRENT_DAY_QUOTE_VOLUME_BUY"), ::OpenAPI::toJsonValue(current_day_quote_volume_buy));
    }
    if (m_current_day_quote_volume_sell_isSet) {
        obj.insert(QString("CURRENT_DAY_QUOTE_VOLUME_SELL"), ::OpenAPI::toJsonValue(current_day_quote_volume_sell));
    }
    if (m_current_day_quote_volume_unknown_isSet) {
        obj.insert(QString("CURRENT_DAY_QUOTE_VOLUME_UNKNOWN"), ::OpenAPI::toJsonValue(current_day_quote_volume_unknown));
    }
    if (m_current_day_total_trades_isSet) {
        obj.insert(QString("CURRENT_DAY_TOTAL_TRADES"), ::OpenAPI::toJsonValue(current_day_total_trades));
    }
    if (m_current_day_total_trades_buy_isSet) {
        obj.insert(QString("CURRENT_DAY_TOTAL_TRADES_BUY"), ::OpenAPI::toJsonValue(current_day_total_trades_buy));
    }
    if (m_current_day_total_trades_sell_isSet) {
        obj.insert(QString("CURRENT_DAY_TOTAL_TRADES_SELL"), ::OpenAPI::toJsonValue(current_day_total_trades_sell));
    }
    if (m_current_day_total_trades_unknown_isSet) {
        obj.insert(QString("CURRENT_DAY_TOTAL_TRADES_UNKNOWN"), ::OpenAPI::toJsonValue(current_day_total_trades_unknown));
    }
    if (m_current_day_volume_isSet) {
        obj.insert(QString("CURRENT_DAY_VOLUME"), ::OpenAPI::toJsonValue(current_day_volume));
    }
    if (m_current_day_volume_buy_isSet) {
        obj.insert(QString("CURRENT_DAY_VOLUME_BUY"), ::OpenAPI::toJsonValue(current_day_volume_buy));
    }
    if (m_current_day_volume_sell_isSet) {
        obj.insert(QString("CURRENT_DAY_VOLUME_SELL"), ::OpenAPI::toJsonValue(current_day_volume_sell));
    }
    if (m_current_day_volume_unknown_isSet) {
        obj.insert(QString("CURRENT_DAY_VOLUME_UNKNOWN"), ::OpenAPI::toJsonValue(current_day_volume_unknown));
    }
    if (m_current_hour_high_isSet) {
        obj.insert(QString("CURRENT_HOUR_HIGH"), ::OpenAPI::toJsonValue(current_hour_high));
    }
    if (m_current_hour_low_isSet) {
        obj.insert(QString("CURRENT_HOUR_LOW"), ::OpenAPI::toJsonValue(current_hour_low));
    }
    if (m_current_hour_open_isSet) {
        obj.insert(QString("CURRENT_HOUR_OPEN"), ::OpenAPI::toJsonValue(current_hour_open));
    }
    if (m_current_hour_quote_volume_isSet) {
        obj.insert(QString("CURRENT_HOUR_QUOTE_VOLUME"), ::OpenAPI::toJsonValue(current_hour_quote_volume));
    }
    if (m_current_hour_quote_volume_buy_isSet) {
        obj.insert(QString("CURRENT_HOUR_QUOTE_VOLUME_BUY"), ::OpenAPI::toJsonValue(current_hour_quote_volume_buy));
    }
    if (m_current_hour_quote_volume_sell_isSet) {
        obj.insert(QString("CURRENT_HOUR_QUOTE_VOLUME_SELL"), ::OpenAPI::toJsonValue(current_hour_quote_volume_sell));
    }
    if (m_current_hour_quote_volume_unknown_isSet) {
        obj.insert(QString("CURRENT_HOUR_QUOTE_VOLUME_UNKNOWN"), ::OpenAPI::toJsonValue(current_hour_quote_volume_unknown));
    }
    if (m_current_hour_total_trades_isSet) {
        obj.insert(QString("CURRENT_HOUR_TOTAL_TRADES"), ::OpenAPI::toJsonValue(current_hour_total_trades));
    }
    if (m_current_hour_total_trades_buy_isSet) {
        obj.insert(QString("CURRENT_HOUR_TOTAL_TRADES_BUY"), ::OpenAPI::toJsonValue(current_hour_total_trades_buy));
    }
    if (m_current_hour_total_trades_sell_isSet) {
        obj.insert(QString("CURRENT_HOUR_TOTAL_TRADES_SELL"), ::OpenAPI::toJsonValue(current_hour_total_trades_sell));
    }
    if (m_current_hour_total_trades_unknown_isSet) {
        obj.insert(QString("CURRENT_HOUR_TOTAL_TRADES_UNKNOWN"), ::OpenAPI::toJsonValue(current_hour_total_trades_unknown));
    }
    if (m_current_hour_volume_isSet) {
        obj.insert(QString("CURRENT_HOUR_VOLUME"), ::OpenAPI::toJsonValue(current_hour_volume));
    }
    if (m_current_hour_volume_buy_isSet) {
        obj.insert(QString("CURRENT_HOUR_VOLUME_BUY"), ::OpenAPI::toJsonValue(current_hour_volume_buy));
    }
    if (m_current_hour_volume_sell_isSet) {
        obj.insert(QString("CURRENT_HOUR_VOLUME_SELL"), ::OpenAPI::toJsonValue(current_hour_volume_sell));
    }
    if (m_current_hour_volume_unknown_isSet) {
        obj.insert(QString("CURRENT_HOUR_VOLUME_UNKNOWN"), ::OpenAPI::toJsonValue(current_hour_volume_unknown));
    }
    if (m_current_month_high_isSet) {
        obj.insert(QString("CURRENT_MONTH_HIGH"), ::OpenAPI::toJsonValue(current_month_high));
    }
    if (m_current_month_low_isSet) {
        obj.insert(QString("CURRENT_MONTH_LOW"), ::OpenAPI::toJsonValue(current_month_low));
    }
    if (m_current_month_open_isSet) {
        obj.insert(QString("CURRENT_MONTH_OPEN"), ::OpenAPI::toJsonValue(current_month_open));
    }
    if (m_current_month_quote_volume_isSet) {
        obj.insert(QString("CURRENT_MONTH_QUOTE_VOLUME"), ::OpenAPI::toJsonValue(current_month_quote_volume));
    }
    if (m_current_month_quote_volume_buy_isSet) {
        obj.insert(QString("CURRENT_MONTH_QUOTE_VOLUME_BUY"), ::OpenAPI::toJsonValue(current_month_quote_volume_buy));
    }
    if (m_current_month_quote_volume_sell_isSet) {
        obj.insert(QString("CURRENT_MONTH_QUOTE_VOLUME_SELL"), ::OpenAPI::toJsonValue(current_month_quote_volume_sell));
    }
    if (m_current_month_quote_volume_unknown_isSet) {
        obj.insert(QString("CURRENT_MONTH_QUOTE_VOLUME_UNKNOWN"), ::OpenAPI::toJsonValue(current_month_quote_volume_unknown));
    }
    if (m_current_month_total_trades_isSet) {
        obj.insert(QString("CURRENT_MONTH_TOTAL_TRADES"), ::OpenAPI::toJsonValue(current_month_total_trades));
    }
    if (m_current_month_total_trades_buy_isSet) {
        obj.insert(QString("CURRENT_MONTH_TOTAL_TRADES_BUY"), ::OpenAPI::toJsonValue(current_month_total_trades_buy));
    }
    if (m_current_month_total_trades_sell_isSet) {
        obj.insert(QString("CURRENT_MONTH_TOTAL_TRADES_SELL"), ::OpenAPI::toJsonValue(current_month_total_trades_sell));
    }
    if (m_current_month_total_trades_unknown_isSet) {
        obj.insert(QString("CURRENT_MONTH_TOTAL_TRADES_UNKNOWN"), ::OpenAPI::toJsonValue(current_month_total_trades_unknown));
    }
    if (m_current_month_volume_isSet) {
        obj.insert(QString("CURRENT_MONTH_VOLUME"), ::OpenAPI::toJsonValue(current_month_volume));
    }
    if (m_current_month_volume_buy_isSet) {
        obj.insert(QString("CURRENT_MONTH_VOLUME_BUY"), ::OpenAPI::toJsonValue(current_month_volume_buy));
    }
    if (m_current_month_volume_sell_isSet) {
        obj.insert(QString("CURRENT_MONTH_VOLUME_SELL"), ::OpenAPI::toJsonValue(current_month_volume_sell));
    }
    if (m_current_month_volume_unknown_isSet) {
        obj.insert(QString("CURRENT_MONTH_VOLUME_UNKNOWN"), ::OpenAPI::toJsonValue(current_month_volume_unknown));
    }
    if (m_current_week_high_isSet) {
        obj.insert(QString("CURRENT_WEEK_HIGH"), ::OpenAPI::toJsonValue(current_week_high));
    }
    if (m_current_week_low_isSet) {
        obj.insert(QString("CURRENT_WEEK_LOW"), ::OpenAPI::toJsonValue(current_week_low));
    }
    if (m_current_week_open_isSet) {
        obj.insert(QString("CURRENT_WEEK_OPEN"), ::OpenAPI::toJsonValue(current_week_open));
    }
    if (m_current_week_quote_volume_isSet) {
        obj.insert(QString("CURRENT_WEEK_QUOTE_VOLUME"), ::OpenAPI::toJsonValue(current_week_quote_volume));
    }
    if (m_current_week_quote_volume_buy_isSet) {
        obj.insert(QString("CURRENT_WEEK_QUOTE_VOLUME_BUY"), ::OpenAPI::toJsonValue(current_week_quote_volume_buy));
    }
    if (m_current_week_quote_volume_sell_isSet) {
        obj.insert(QString("CURRENT_WEEK_QUOTE_VOLUME_SELL"), ::OpenAPI::toJsonValue(current_week_quote_volume_sell));
    }
    if (m_current_week_quote_volume_unknown_isSet) {
        obj.insert(QString("CURRENT_WEEK_QUOTE_VOLUME_UNKNOWN"), ::OpenAPI::toJsonValue(current_week_quote_volume_unknown));
    }
    if (m_current_week_total_trades_isSet) {
        obj.insert(QString("CURRENT_WEEK_TOTAL_TRADES"), ::OpenAPI::toJsonValue(current_week_total_trades));
    }
    if (m_current_week_total_trades_buy_isSet) {
        obj.insert(QString("CURRENT_WEEK_TOTAL_TRADES_BUY"), ::OpenAPI::toJsonValue(current_week_total_trades_buy));
    }
    if (m_current_week_total_trades_sell_isSet) {
        obj.insert(QString("CURRENT_WEEK_TOTAL_TRADES_SELL"), ::OpenAPI::toJsonValue(current_week_total_trades_sell));
    }
    if (m_current_week_total_trades_unknown_isSet) {
        obj.insert(QString("CURRENT_WEEK_TOTAL_TRADES_UNKNOWN"), ::OpenAPI::toJsonValue(current_week_total_trades_unknown));
    }
    if (m_current_week_volume_isSet) {
        obj.insert(QString("CURRENT_WEEK_VOLUME"), ::OpenAPI::toJsonValue(current_week_volume));
    }
    if (m_current_week_volume_buy_isSet) {
        obj.insert(QString("CURRENT_WEEK_VOLUME_BUY"), ::OpenAPI::toJsonValue(current_week_volume_buy));
    }
    if (m_current_week_volume_sell_isSet) {
        obj.insert(QString("CURRENT_WEEK_VOLUME_SELL"), ::OpenAPI::toJsonValue(current_week_volume_sell));
    }
    if (m_current_week_volume_unknown_isSet) {
        obj.insert(QString("CURRENT_WEEK_VOLUME_UNKNOWN"), ::OpenAPI::toJsonValue(current_week_volume_unknown));
    }
    if (m_current_year_high_isSet) {
        obj.insert(QString("CURRENT_YEAR_HIGH"), ::OpenAPI::toJsonValue(current_year_high));
    }
    if (m_current_year_low_isSet) {
        obj.insert(QString("CURRENT_YEAR_LOW"), ::OpenAPI::toJsonValue(current_year_low));
    }
    if (m_current_year_open_isSet) {
        obj.insert(QString("CURRENT_YEAR_OPEN"), ::OpenAPI::toJsonValue(current_year_open));
    }
    if (m_current_year_quote_volume_isSet) {
        obj.insert(QString("CURRENT_YEAR_QUOTE_VOLUME"), ::OpenAPI::toJsonValue(current_year_quote_volume));
    }
    if (m_current_year_quote_volume_buy_isSet) {
        obj.insert(QString("CURRENT_YEAR_QUOTE_VOLUME_BUY"), ::OpenAPI::toJsonValue(current_year_quote_volume_buy));
    }
    if (m_current_year_quote_volume_sell_isSet) {
        obj.insert(QString("CURRENT_YEAR_QUOTE_VOLUME_SELL"), ::OpenAPI::toJsonValue(current_year_quote_volume_sell));
    }
    if (m_current_year_quote_volume_unknown_isSet) {
        obj.insert(QString("CURRENT_YEAR_QUOTE_VOLUME_UNKNOWN"), ::OpenAPI::toJsonValue(current_year_quote_volume_unknown));
    }
    if (m_current_year_total_trades_isSet) {
        obj.insert(QString("CURRENT_YEAR_TOTAL_TRADES"), ::OpenAPI::toJsonValue(current_year_total_trades));
    }
    if (m_current_year_total_trades_buy_isSet) {
        obj.insert(QString("CURRENT_YEAR_TOTAL_TRADES_BUY"), ::OpenAPI::toJsonValue(current_year_total_trades_buy));
    }
    if (m_current_year_total_trades_sell_isSet) {
        obj.insert(QString("CURRENT_YEAR_TOTAL_TRADES_SELL"), ::OpenAPI::toJsonValue(current_year_total_trades_sell));
    }
    if (m_current_year_total_trades_unknown_isSet) {
        obj.insert(QString("CURRENT_YEAR_TOTAL_TRADES_UNKNOWN"), ::OpenAPI::toJsonValue(current_year_total_trades_unknown));
    }
    if (m_current_year_volume_isSet) {
        obj.insert(QString("CURRENT_YEAR_VOLUME"), ::OpenAPI::toJsonValue(current_year_volume));
    }
    if (m_current_year_volume_buy_isSet) {
        obj.insert(QString("CURRENT_YEAR_VOLUME_BUY"), ::OpenAPI::toJsonValue(current_year_volume_buy));
    }
    if (m_current_year_volume_sell_isSet) {
        obj.insert(QString("CURRENT_YEAR_VOLUME_SELL"), ::OpenAPI::toJsonValue(current_year_volume_sell));
    }
    if (m_current_year_volume_unknown_isSet) {
        obj.insert(QString("CURRENT_YEAR_VOLUME_UNKNOWN"), ::OpenAPI::toJsonValue(current_year_volume_unknown));
    }
    if (m_instrument_isSet) {
        obj.insert(QString("INSTRUMENT"), ::OpenAPI::toJsonValue(instrument));
    }
    if (m_last_processed_trade_ccseq_isSet) {
        obj.insert(QString("LAST_PROCESSED_TRADE_CCSEQ"), ::OpenAPI::toJsonValue(last_processed_trade_ccseq));
    }
    if (m_last_processed_trade_price_isSet) {
        obj.insert(QString("LAST_PROCESSED_TRADE_PRICE"), ::OpenAPI::toJsonValue(last_processed_trade_price));
    }
    if (m_last_processed_trade_quantity_isSet) {
        obj.insert(QString("LAST_PROCESSED_TRADE_QUANTITY"), ::OpenAPI::toJsonValue(last_processed_trade_quantity));
    }
    if (m_last_processed_trade_quote_quantity_isSet) {
        obj.insert(QString("LAST_PROCESSED_TRADE_QUOTE_QUANTITY"), ::OpenAPI::toJsonValue(last_processed_trade_quote_quantity));
    }
    if (m_last_processed_trade_side_isSet) {
        obj.insert(QString("LAST_PROCESSED_TRADE_SIDE"), ::OpenAPI::toJsonValue(last_processed_trade_side));
    }
    if (m_last_processed_trade_ts_isSet) {
        obj.insert(QString("LAST_PROCESSED_TRADE_TS"), ::OpenAPI::toJsonValue(last_processed_trade_ts));
    }
    if (m_last_trade_ccseq_isSet) {
        obj.insert(QString("LAST_TRADE_CCSEQ"), ::OpenAPI::toJsonValue(last_trade_ccseq));
    }
    if (m_last_trade_id_isSet) {
        obj.insert(QString("LAST_TRADE_ID"), ::OpenAPI::toJsonValue(last_trade_id));
    }
    if (m_last_trade_quantity_isSet) {
        obj.insert(QString("LAST_TRADE_QUANTITY"), ::OpenAPI::toJsonValue(last_trade_quantity));
    }
    if (m_last_trade_quote_quantity_isSet) {
        obj.insert(QString("LAST_TRADE_QUOTE_QUANTITY"), ::OpenAPI::toJsonValue(last_trade_quote_quantity));
    }
    if (m_last_trade_side_isSet) {
        obj.insert(QString("LAST_TRADE_SIDE"), ::OpenAPI::toJsonValue(last_trade_side));
    }
    if (m_lifetime_first_trade_ts_isSet) {
        obj.insert(QString("LIFETIME_FIRST_TRADE_TS"), ::OpenAPI::toJsonValue(lifetime_first_trade_ts));
    }
    if (m_lifetime_high_isSet) {
        obj.insert(QString("LIFETIME_HIGH"), ::OpenAPI::toJsonValue(lifetime_high));
    }
    if (m_lifetime_high_ts_isSet) {
        obj.insert(QString("LIFETIME_HIGH_TS"), ::OpenAPI::toJsonValue(lifetime_high_ts));
    }
    if (m_lifetime_low_isSet) {
        obj.insert(QString("LIFETIME_LOW"), ::OpenAPI::toJsonValue(lifetime_low));
    }
    if (m_lifetime_low_ts_isSet) {
        obj.insert(QString("LIFETIME_LOW_TS"), ::OpenAPI::toJsonValue(lifetime_low_ts));
    }
    if (m_lifetime_open_isSet) {
        obj.insert(QString("LIFETIME_OPEN"), ::OpenAPI::toJsonValue(lifetime_open));
    }
    if (m_lifetime_quote_volume_isSet) {
        obj.insert(QString("LIFETIME_QUOTE_VOLUME"), ::OpenAPI::toJsonValue(lifetime_quote_volume));
    }
    if (m_lifetime_quote_volume_buy_isSet) {
        obj.insert(QString("LIFETIME_QUOTE_VOLUME_BUY"), ::OpenAPI::toJsonValue(lifetime_quote_volume_buy));
    }
    if (m_lifetime_quote_volume_sell_isSet) {
        obj.insert(QString("LIFETIME_QUOTE_VOLUME_SELL"), ::OpenAPI::toJsonValue(lifetime_quote_volume_sell));
    }
    if (m_lifetime_quote_volume_unknown_isSet) {
        obj.insert(QString("LIFETIME_QUOTE_VOLUME_UNKNOWN"), ::OpenAPI::toJsonValue(lifetime_quote_volume_unknown));
    }
    if (m_lifetime_total_trades_isSet) {
        obj.insert(QString("LIFETIME_TOTAL_TRADES"), ::OpenAPI::toJsonValue(lifetime_total_trades));
    }
    if (m_lifetime_total_trades_buy_isSet) {
        obj.insert(QString("LIFETIME_TOTAL_TRADES_BUY"), ::OpenAPI::toJsonValue(lifetime_total_trades_buy));
    }
    if (m_lifetime_total_trades_sell_isSet) {
        obj.insert(QString("LIFETIME_TOTAL_TRADES_SELL"), ::OpenAPI::toJsonValue(lifetime_total_trades_sell));
    }
    if (m_lifetime_total_trades_unknown_isSet) {
        obj.insert(QString("LIFETIME_TOTAL_TRADES_UNKNOWN"), ::OpenAPI::toJsonValue(lifetime_total_trades_unknown));
    }
    if (m_lifetime_volume_isSet) {
        obj.insert(QString("LIFETIME_VOLUME"), ::OpenAPI::toJsonValue(lifetime_volume));
    }
    if (m_lifetime_volume_buy_isSet) {
        obj.insert(QString("LIFETIME_VOLUME_BUY"), ::OpenAPI::toJsonValue(lifetime_volume_buy));
    }
    if (m_lifetime_volume_sell_isSet) {
        obj.insert(QString("LIFETIME_VOLUME_SELL"), ::OpenAPI::toJsonValue(lifetime_volume_sell));
    }
    if (m_lifetime_volume_unknown_isSet) {
        obj.insert(QString("LIFETIME_VOLUME_UNKNOWN"), ::OpenAPI::toJsonValue(lifetime_volume_unknown));
    }
    if (m_mapped_instrument_isSet) {
        obj.insert(QString("MAPPED_INSTRUMENT"), ::OpenAPI::toJsonValue(mapped_instrument));
    }
    if (m_market_isSet) {
        obj.insert(QString("MARKET"), ::OpenAPI::toJsonValue(market));
    }
    if (m_moving_180_day_high_isSet) {
        obj.insert(QString("MOVING_180_DAY_HIGH"), ::OpenAPI::toJsonValue(moving_180_day_high));
    }
    if (m_moving_180_day_low_isSet) {
        obj.insert(QString("MOVING_180_DAY_LOW"), ::OpenAPI::toJsonValue(moving_180_day_low));
    }
    if (m_moving_180_day_open_isSet) {
        obj.insert(QString("MOVING_180_DAY_OPEN"), ::OpenAPI::toJsonValue(moving_180_day_open));
    }
    if (m_moving_180_day_quote_volume_isSet) {
        obj.insert(QString("MOVING_180_DAY_QUOTE_VOLUME"), ::OpenAPI::toJsonValue(moving_180_day_quote_volume));
    }
    if (m_moving_180_day_quote_volume_buy_isSet) {
        obj.insert(QString("MOVING_180_DAY_QUOTE_VOLUME_BUY"), ::OpenAPI::toJsonValue(moving_180_day_quote_volume_buy));
    }
    if (m_moving_180_day_quote_volume_sell_isSet) {
        obj.insert(QString("MOVING_180_DAY_QUOTE_VOLUME_SELL"), ::OpenAPI::toJsonValue(moving_180_day_quote_volume_sell));
    }
    if (m_moving_180_day_quote_volume_unknown_isSet) {
        obj.insert(QString("MOVING_180_DAY_QUOTE_VOLUME_UNKNOWN"), ::OpenAPI::toJsonValue(moving_180_day_quote_volume_unknown));
    }
    if (m_moving_180_day_total_trades_isSet) {
        obj.insert(QString("MOVING_180_DAY_TOTAL_TRADES"), ::OpenAPI::toJsonValue(moving_180_day_total_trades));
    }
    if (m_moving_180_day_total_trades_buy_isSet) {
        obj.insert(QString("MOVING_180_DAY_TOTAL_TRADES_BUY"), ::OpenAPI::toJsonValue(moving_180_day_total_trades_buy));
    }
    if (m_moving_180_day_total_trades_sell_isSet) {
        obj.insert(QString("MOVING_180_DAY_TOTAL_TRADES_SELL"), ::OpenAPI::toJsonValue(moving_180_day_total_trades_sell));
    }
    if (m_moving_180_day_total_trades_unknown_isSet) {
        obj.insert(QString("MOVING_180_DAY_TOTAL_TRADES_UNKNOWN"), ::OpenAPI::toJsonValue(moving_180_day_total_trades_unknown));
    }
    if (m_moving_180_day_volume_isSet) {
        obj.insert(QString("MOVING_180_DAY_VOLUME"), ::OpenAPI::toJsonValue(moving_180_day_volume));
    }
    if (m_moving_180_day_volume_buy_isSet) {
        obj.insert(QString("MOVING_180_DAY_VOLUME_BUY"), ::OpenAPI::toJsonValue(moving_180_day_volume_buy));
    }
    if (m_moving_180_day_volume_sell_isSet) {
        obj.insert(QString("MOVING_180_DAY_VOLUME_SELL"), ::OpenAPI::toJsonValue(moving_180_day_volume_sell));
    }
    if (m_moving_180_day_volume_unknown_isSet) {
        obj.insert(QString("MOVING_180_DAY_VOLUME_UNKNOWN"), ::OpenAPI::toJsonValue(moving_180_day_volume_unknown));
    }
    if (m_moving_24_hour_high_isSet) {
        obj.insert(QString("MOVING_24_HOUR_HIGH"), ::OpenAPI::toJsonValue(moving_24_hour_high));
    }
    if (m_moving_24_hour_low_isSet) {
        obj.insert(QString("MOVING_24_HOUR_LOW"), ::OpenAPI::toJsonValue(moving_24_hour_low));
    }
    if (m_moving_24_hour_open_isSet) {
        obj.insert(QString("MOVING_24_HOUR_OPEN"), ::OpenAPI::toJsonValue(moving_24_hour_open));
    }
    if (m_moving_24_hour_quote_volume_isSet) {
        obj.insert(QString("MOVING_24_HOUR_QUOTE_VOLUME"), ::OpenAPI::toJsonValue(moving_24_hour_quote_volume));
    }
    if (m_moving_24_hour_quote_volume_buy_isSet) {
        obj.insert(QString("MOVING_24_HOUR_QUOTE_VOLUME_BUY"), ::OpenAPI::toJsonValue(moving_24_hour_quote_volume_buy));
    }
    if (m_moving_24_hour_quote_volume_sell_isSet) {
        obj.insert(QString("MOVING_24_HOUR_QUOTE_VOLUME_SELL"), ::OpenAPI::toJsonValue(moving_24_hour_quote_volume_sell));
    }
    if (m_moving_24_hour_quote_volume_unknown_isSet) {
        obj.insert(QString("MOVING_24_HOUR_QUOTE_VOLUME_UNKNOWN"), ::OpenAPI::toJsonValue(moving_24_hour_quote_volume_unknown));
    }
    if (m_moving_24_hour_total_trades_isSet) {
        obj.insert(QString("MOVING_24_HOUR_TOTAL_TRADES"), ::OpenAPI::toJsonValue(moving_24_hour_total_trades));
    }
    if (m_moving_24_hour_total_trades_buy_isSet) {
        obj.insert(QString("MOVING_24_HOUR_TOTAL_TRADES_BUY"), ::OpenAPI::toJsonValue(moving_24_hour_total_trades_buy));
    }
    if (m_moving_24_hour_total_trades_sell_isSet) {
        obj.insert(QString("MOVING_24_HOUR_TOTAL_TRADES_SELL"), ::OpenAPI::toJsonValue(moving_24_hour_total_trades_sell));
    }
    if (m_moving_24_hour_total_trades_unknown_isSet) {
        obj.insert(QString("MOVING_24_HOUR_TOTAL_TRADES_UNKNOWN"), ::OpenAPI::toJsonValue(moving_24_hour_total_trades_unknown));
    }
    if (m_moving_24_hour_volume_isSet) {
        obj.insert(QString("MOVING_24_HOUR_VOLUME"), ::OpenAPI::toJsonValue(moving_24_hour_volume));
    }
    if (m_moving_24_hour_volume_buy_isSet) {
        obj.insert(QString("MOVING_24_HOUR_VOLUME_BUY"), ::OpenAPI::toJsonValue(moving_24_hour_volume_buy));
    }
    if (m_moving_24_hour_volume_sell_isSet) {
        obj.insert(QString("MOVING_24_HOUR_VOLUME_SELL"), ::OpenAPI::toJsonValue(moving_24_hour_volume_sell));
    }
    if (m_moving_24_hour_volume_unknown_isSet) {
        obj.insert(QString("MOVING_24_HOUR_VOLUME_UNKNOWN"), ::OpenAPI::toJsonValue(moving_24_hour_volume_unknown));
    }
    if (m_moving_30_day_high_isSet) {
        obj.insert(QString("MOVING_30_DAY_HIGH"), ::OpenAPI::toJsonValue(moving_30_day_high));
    }
    if (m_moving_30_day_low_isSet) {
        obj.insert(QString("MOVING_30_DAY_LOW"), ::OpenAPI::toJsonValue(moving_30_day_low));
    }
    if (m_moving_30_day_open_isSet) {
        obj.insert(QString("MOVING_30_DAY_OPEN"), ::OpenAPI::toJsonValue(moving_30_day_open));
    }
    if (m_moving_30_day_quote_volume_isSet) {
        obj.insert(QString("MOVING_30_DAY_QUOTE_VOLUME"), ::OpenAPI::toJsonValue(moving_30_day_quote_volume));
    }
    if (m_moving_30_day_quote_volume_buy_isSet) {
        obj.insert(QString("MOVING_30_DAY_QUOTE_VOLUME_BUY"), ::OpenAPI::toJsonValue(moving_30_day_quote_volume_buy));
    }
    if (m_moving_30_day_quote_volume_sell_isSet) {
        obj.insert(QString("MOVING_30_DAY_QUOTE_VOLUME_SELL"), ::OpenAPI::toJsonValue(moving_30_day_quote_volume_sell));
    }
    if (m_moving_30_day_quote_volume_unknown_isSet) {
        obj.insert(QString("MOVING_30_DAY_QUOTE_VOLUME_UNKNOWN"), ::OpenAPI::toJsonValue(moving_30_day_quote_volume_unknown));
    }
    if (m_moving_30_day_total_trades_isSet) {
        obj.insert(QString("MOVING_30_DAY_TOTAL_TRADES"), ::OpenAPI::toJsonValue(moving_30_day_total_trades));
    }
    if (m_moving_30_day_total_trades_buy_isSet) {
        obj.insert(QString("MOVING_30_DAY_TOTAL_TRADES_BUY"), ::OpenAPI::toJsonValue(moving_30_day_total_trades_buy));
    }
    if (m_moving_30_day_total_trades_sell_isSet) {
        obj.insert(QString("MOVING_30_DAY_TOTAL_TRADES_SELL"), ::OpenAPI::toJsonValue(moving_30_day_total_trades_sell));
    }
    if (m_moving_30_day_total_trades_unknown_isSet) {
        obj.insert(QString("MOVING_30_DAY_TOTAL_TRADES_UNKNOWN"), ::OpenAPI::toJsonValue(moving_30_day_total_trades_unknown));
    }
    if (m_moving_30_day_volume_isSet) {
        obj.insert(QString("MOVING_30_DAY_VOLUME"), ::OpenAPI::toJsonValue(moving_30_day_volume));
    }
    if (m_moving_30_day_volume_buy_isSet) {
        obj.insert(QString("MOVING_30_DAY_VOLUME_BUY"), ::OpenAPI::toJsonValue(moving_30_day_volume_buy));
    }
    if (m_moving_30_day_volume_sell_isSet) {
        obj.insert(QString("MOVING_30_DAY_VOLUME_SELL"), ::OpenAPI::toJsonValue(moving_30_day_volume_sell));
    }
    if (m_moving_30_day_volume_unknown_isSet) {
        obj.insert(QString("MOVING_30_DAY_VOLUME_UNKNOWN"), ::OpenAPI::toJsonValue(moving_30_day_volume_unknown));
    }
    if (m_moving_365_day_high_isSet) {
        obj.insert(QString("MOVING_365_DAY_HIGH"), ::OpenAPI::toJsonValue(moving_365_day_high));
    }
    if (m_moving_365_day_low_isSet) {
        obj.insert(QString("MOVING_365_DAY_LOW"), ::OpenAPI::toJsonValue(moving_365_day_low));
    }
    if (m_moving_365_day_open_isSet) {
        obj.insert(QString("MOVING_365_DAY_OPEN"), ::OpenAPI::toJsonValue(moving_365_day_open));
    }
    if (m_moving_365_day_quote_volume_isSet) {
        obj.insert(QString("MOVING_365_DAY_QUOTE_VOLUME"), ::OpenAPI::toJsonValue(moving_365_day_quote_volume));
    }
    if (m_moving_365_day_quote_volume_buy_isSet) {
        obj.insert(QString("MOVING_365_DAY_QUOTE_VOLUME_BUY"), ::OpenAPI::toJsonValue(moving_365_day_quote_volume_buy));
    }
    if (m_moving_365_day_quote_volume_sell_isSet) {
        obj.insert(QString("MOVING_365_DAY_QUOTE_VOLUME_SELL"), ::OpenAPI::toJsonValue(moving_365_day_quote_volume_sell));
    }
    if (m_moving_365_day_quote_volume_unknown_isSet) {
        obj.insert(QString("MOVING_365_DAY_QUOTE_VOLUME_UNKNOWN"), ::OpenAPI::toJsonValue(moving_365_day_quote_volume_unknown));
    }
    if (m_moving_365_day_total_trades_isSet) {
        obj.insert(QString("MOVING_365_DAY_TOTAL_TRADES"), ::OpenAPI::toJsonValue(moving_365_day_total_trades));
    }
    if (m_moving_365_day_total_trades_buy_isSet) {
        obj.insert(QString("MOVING_365_DAY_TOTAL_TRADES_BUY"), ::OpenAPI::toJsonValue(moving_365_day_total_trades_buy));
    }
    if (m_moving_365_day_total_trades_sell_isSet) {
        obj.insert(QString("MOVING_365_DAY_TOTAL_TRADES_SELL"), ::OpenAPI::toJsonValue(moving_365_day_total_trades_sell));
    }
    if (m_moving_365_day_total_trades_unknown_isSet) {
        obj.insert(QString("MOVING_365_DAY_TOTAL_TRADES_UNKNOWN"), ::OpenAPI::toJsonValue(moving_365_day_total_trades_unknown));
    }
    if (m_moving_365_day_volume_isSet) {
        obj.insert(QString("MOVING_365_DAY_VOLUME"), ::OpenAPI::toJsonValue(moving_365_day_volume));
    }
    if (m_moving_365_day_volume_buy_isSet) {
        obj.insert(QString("MOVING_365_DAY_VOLUME_BUY"), ::OpenAPI::toJsonValue(moving_365_day_volume_buy));
    }
    if (m_moving_365_day_volume_sell_isSet) {
        obj.insert(QString("MOVING_365_DAY_VOLUME_SELL"), ::OpenAPI::toJsonValue(moving_365_day_volume_sell));
    }
    if (m_moving_365_day_volume_unknown_isSet) {
        obj.insert(QString("MOVING_365_DAY_VOLUME_UNKNOWN"), ::OpenAPI::toJsonValue(moving_365_day_volume_unknown));
    }
    if (m_moving_7_day_high_isSet) {
        obj.insert(QString("MOVING_7_DAY_HIGH"), ::OpenAPI::toJsonValue(moving_7_day_high));
    }
    if (m_moving_7_day_low_isSet) {
        obj.insert(QString("MOVING_7_DAY_LOW"), ::OpenAPI::toJsonValue(moving_7_day_low));
    }
    if (m_moving_7_day_open_isSet) {
        obj.insert(QString("MOVING_7_DAY_OPEN"), ::OpenAPI::toJsonValue(moving_7_day_open));
    }
    if (m_moving_7_day_quote_volume_isSet) {
        obj.insert(QString("MOVING_7_DAY_QUOTE_VOLUME"), ::OpenAPI::toJsonValue(moving_7_day_quote_volume));
    }
    if (m_moving_7_day_quote_volume_buy_isSet) {
        obj.insert(QString("MOVING_7_DAY_QUOTE_VOLUME_BUY"), ::OpenAPI::toJsonValue(moving_7_day_quote_volume_buy));
    }
    if (m_moving_7_day_quote_volume_sell_isSet) {
        obj.insert(QString("MOVING_7_DAY_QUOTE_VOLUME_SELL"), ::OpenAPI::toJsonValue(moving_7_day_quote_volume_sell));
    }
    if (m_moving_7_day_quote_volume_unknown_isSet) {
        obj.insert(QString("MOVING_7_DAY_QUOTE_VOLUME_UNKNOWN"), ::OpenAPI::toJsonValue(moving_7_day_quote_volume_unknown));
    }
    if (m_moving_7_day_total_trades_isSet) {
        obj.insert(QString("MOVING_7_DAY_TOTAL_TRADES"), ::OpenAPI::toJsonValue(moving_7_day_total_trades));
    }
    if (m_moving_7_day_total_trades_buy_isSet) {
        obj.insert(QString("MOVING_7_DAY_TOTAL_TRADES_BUY"), ::OpenAPI::toJsonValue(moving_7_day_total_trades_buy));
    }
    if (m_moving_7_day_total_trades_sell_isSet) {
        obj.insert(QString("MOVING_7_DAY_TOTAL_TRADES_SELL"), ::OpenAPI::toJsonValue(moving_7_day_total_trades_sell));
    }
    if (m_moving_7_day_total_trades_unknown_isSet) {
        obj.insert(QString("MOVING_7_DAY_TOTAL_TRADES_UNKNOWN"), ::OpenAPI::toJsonValue(moving_7_day_total_trades_unknown));
    }
    if (m_moving_7_day_volume_isSet) {
        obj.insert(QString("MOVING_7_DAY_VOLUME"), ::OpenAPI::toJsonValue(moving_7_day_volume));
    }
    if (m_moving_7_day_volume_buy_isSet) {
        obj.insert(QString("MOVING_7_DAY_VOLUME_BUY"), ::OpenAPI::toJsonValue(moving_7_day_volume_buy));
    }
    if (m_moving_7_day_volume_sell_isSet) {
        obj.insert(QString("MOVING_7_DAY_VOLUME_SELL"), ::OpenAPI::toJsonValue(moving_7_day_volume_sell));
    }
    if (m_moving_7_day_volume_unknown_isSet) {
        obj.insert(QString("MOVING_7_DAY_VOLUME_UNKNOWN"), ::OpenAPI::toJsonValue(moving_7_day_volume_unknown));
    }
    if (m_moving_90_day_high_isSet) {
        obj.insert(QString("MOVING_90_DAY_HIGH"), ::OpenAPI::toJsonValue(moving_90_day_high));
    }
    if (m_moving_90_day_low_isSet) {
        obj.insert(QString("MOVING_90_DAY_LOW"), ::OpenAPI::toJsonValue(moving_90_day_low));
    }
    if (m_moving_90_day_open_isSet) {
        obj.insert(QString("MOVING_90_DAY_OPEN"), ::OpenAPI::toJsonValue(moving_90_day_open));
    }
    if (m_moving_90_day_quote_volume_isSet) {
        obj.insert(QString("MOVING_90_DAY_QUOTE_VOLUME"), ::OpenAPI::toJsonValue(moving_90_day_quote_volume));
    }
    if (m_moving_90_day_quote_volume_buy_isSet) {
        obj.insert(QString("MOVING_90_DAY_QUOTE_VOLUME_BUY"), ::OpenAPI::toJsonValue(moving_90_day_quote_volume_buy));
    }
    if (m_moving_90_day_quote_volume_sell_isSet) {
        obj.insert(QString("MOVING_90_DAY_QUOTE_VOLUME_SELL"), ::OpenAPI::toJsonValue(moving_90_day_quote_volume_sell));
    }
    if (m_moving_90_day_quote_volume_unknown_isSet) {
        obj.insert(QString("MOVING_90_DAY_QUOTE_VOLUME_UNKNOWN"), ::OpenAPI::toJsonValue(moving_90_day_quote_volume_unknown));
    }
    if (m_moving_90_day_total_trades_isSet) {
        obj.insert(QString("MOVING_90_DAY_TOTAL_TRADES"), ::OpenAPI::toJsonValue(moving_90_day_total_trades));
    }
    if (m_moving_90_day_total_trades_buy_isSet) {
        obj.insert(QString("MOVING_90_DAY_TOTAL_TRADES_BUY"), ::OpenAPI::toJsonValue(moving_90_day_total_trades_buy));
    }
    if (m_moving_90_day_total_trades_sell_isSet) {
        obj.insert(QString("MOVING_90_DAY_TOTAL_TRADES_SELL"), ::OpenAPI::toJsonValue(moving_90_day_total_trades_sell));
    }
    if (m_moving_90_day_total_trades_unknown_isSet) {
        obj.insert(QString("MOVING_90_DAY_TOTAL_TRADES_UNKNOWN"), ::OpenAPI::toJsonValue(moving_90_day_total_trades_unknown));
    }
    if (m_moving_90_day_volume_isSet) {
        obj.insert(QString("MOVING_90_DAY_VOLUME"), ::OpenAPI::toJsonValue(moving_90_day_volume));
    }
    if (m_moving_90_day_volume_buy_isSet) {
        obj.insert(QString("MOVING_90_DAY_VOLUME_BUY"), ::OpenAPI::toJsonValue(moving_90_day_volume_buy));
    }
    if (m_moving_90_day_volume_sell_isSet) {
        obj.insert(QString("MOVING_90_DAY_VOLUME_SELL"), ::OpenAPI::toJsonValue(moving_90_day_volume_sell));
    }
    if (m_moving_90_day_volume_unknown_isSet) {
        obj.insert(QString("MOVING_90_DAY_VOLUME_UNKNOWN"), ::OpenAPI::toJsonValue(moving_90_day_volume_unknown));
    }
    if (m_price_isSet) {
        obj.insert(QString("PRICE"), ::OpenAPI::toJsonValue(price));
    }
    if (m_price_flag_isSet) {
        obj.insert(QString("PRICE_FLAG"), ::OpenAPI::toJsonValue(price_flag));
    }
    if (m_price_last_update_ts_isSet) {
        obj.insert(QString("PRICE_LAST_UPDATE_TS"), ::OpenAPI::toJsonValue(price_last_update_ts));
    }
    if (m_quote_isSet) {
        obj.insert(QString("QUOTE"), ::OpenAPI::toJsonValue(quote));
    }
    if (m_top_ask_last_update_ts_isSet) {
        obj.insert(QString("TOP_ASK_LAST_UPDATE_TS"), ::OpenAPI::toJsonValue(top_ask_last_update_ts));
    }
    if (m_top_ask_price_isSet) {
        obj.insert(QString("TOP_ASK_PRICE"), ::OpenAPI::toJsonValue(top_ask_price));
    }
    if (m_top_ask_quantity_isSet) {
        obj.insert(QString("TOP_ASK_QUANTITY"), ::OpenAPI::toJsonValue(top_ask_quantity));
    }
    if (m_top_bid_last_update_ts_isSet) {
        obj.insert(QString("TOP_BID_LAST_UPDATE_TS"), ::OpenAPI::toJsonValue(top_bid_last_update_ts));
    }
    if (m_top_bid_price_isSet) {
        obj.insert(QString("TOP_BID_PRICE"), ::OpenAPI::toJsonValue(top_bid_price));
    }
    if (m_top_bid_quantity_isSet) {
        obj.insert(QString("TOP_BID_QUANTITY"), ::OpenAPI::toJsonValue(top_bid_quantity));
    }
    if (m_type_isSet) {
        obj.insert(QString("TYPE"), ::OpenAPI::toJsonValue(type));
    }
    return obj;
}

QString OAISPOT_INSTRUMENT_MARKET_DATA::getBase() const {
    return base;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setBase(const QString &base) {
    this->base = base;
    this->m_base_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_base_Set() const{
    return m_base_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_base_Valid() const{
    return m_base_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCcseq() const {
    return ccseq;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCcseq(const qint32 &ccseq) {
    this->ccseq = ccseq;
    this->m_ccseq_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_ccseq_Set() const{
    return m_ccseq_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_ccseq_Valid() const{
    return m_ccseq_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentDayHigh() const {
    return current_day_high;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentDayHigh(const qint32 &current_day_high) {
    this->current_day_high = current_day_high;
    this->m_current_day_high_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_day_high_Set() const{
    return m_current_day_high_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_day_high_Valid() const{
    return m_current_day_high_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentDayLow() const {
    return current_day_low;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentDayLow(const qint32 &current_day_low) {
    this->current_day_low = current_day_low;
    this->m_current_day_low_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_day_low_Set() const{
    return m_current_day_low_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_day_low_Valid() const{
    return m_current_day_low_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentDayOpen() const {
    return current_day_open;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentDayOpen(const qint32 &current_day_open) {
    this->current_day_open = current_day_open;
    this->m_current_day_open_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_day_open_Set() const{
    return m_current_day_open_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_day_open_Valid() const{
    return m_current_day_open_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentDayQuoteVolume() const {
    return current_day_quote_volume;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentDayQuoteVolume(const qint32 &current_day_quote_volume) {
    this->current_day_quote_volume = current_day_quote_volume;
    this->m_current_day_quote_volume_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_day_quote_volume_Set() const{
    return m_current_day_quote_volume_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_day_quote_volume_Valid() const{
    return m_current_day_quote_volume_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentDayQuoteVolumeBuy() const {
    return current_day_quote_volume_buy;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentDayQuoteVolumeBuy(const qint32 &current_day_quote_volume_buy) {
    this->current_day_quote_volume_buy = current_day_quote_volume_buy;
    this->m_current_day_quote_volume_buy_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_day_quote_volume_buy_Set() const{
    return m_current_day_quote_volume_buy_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_day_quote_volume_buy_Valid() const{
    return m_current_day_quote_volume_buy_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentDayQuoteVolumeSell() const {
    return current_day_quote_volume_sell;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentDayQuoteVolumeSell(const qint32 &current_day_quote_volume_sell) {
    this->current_day_quote_volume_sell = current_day_quote_volume_sell;
    this->m_current_day_quote_volume_sell_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_day_quote_volume_sell_Set() const{
    return m_current_day_quote_volume_sell_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_day_quote_volume_sell_Valid() const{
    return m_current_day_quote_volume_sell_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentDayQuoteVolumeUnknown() const {
    return current_day_quote_volume_unknown;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentDayQuoteVolumeUnknown(const qint32 &current_day_quote_volume_unknown) {
    this->current_day_quote_volume_unknown = current_day_quote_volume_unknown;
    this->m_current_day_quote_volume_unknown_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_day_quote_volume_unknown_Set() const{
    return m_current_day_quote_volume_unknown_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_day_quote_volume_unknown_Valid() const{
    return m_current_day_quote_volume_unknown_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentDayTotalTrades() const {
    return current_day_total_trades;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentDayTotalTrades(const qint32 &current_day_total_trades) {
    this->current_day_total_trades = current_day_total_trades;
    this->m_current_day_total_trades_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_day_total_trades_Set() const{
    return m_current_day_total_trades_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_day_total_trades_Valid() const{
    return m_current_day_total_trades_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentDayTotalTradesBuy() const {
    return current_day_total_trades_buy;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentDayTotalTradesBuy(const qint32 &current_day_total_trades_buy) {
    this->current_day_total_trades_buy = current_day_total_trades_buy;
    this->m_current_day_total_trades_buy_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_day_total_trades_buy_Set() const{
    return m_current_day_total_trades_buy_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_day_total_trades_buy_Valid() const{
    return m_current_day_total_trades_buy_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentDayTotalTradesSell() const {
    return current_day_total_trades_sell;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentDayTotalTradesSell(const qint32 &current_day_total_trades_sell) {
    this->current_day_total_trades_sell = current_day_total_trades_sell;
    this->m_current_day_total_trades_sell_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_day_total_trades_sell_Set() const{
    return m_current_day_total_trades_sell_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_day_total_trades_sell_Valid() const{
    return m_current_day_total_trades_sell_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentDayTotalTradesUnknown() const {
    return current_day_total_trades_unknown;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentDayTotalTradesUnknown(const qint32 &current_day_total_trades_unknown) {
    this->current_day_total_trades_unknown = current_day_total_trades_unknown;
    this->m_current_day_total_trades_unknown_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_day_total_trades_unknown_Set() const{
    return m_current_day_total_trades_unknown_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_day_total_trades_unknown_Valid() const{
    return m_current_day_total_trades_unknown_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentDayVolume() const {
    return current_day_volume;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentDayVolume(const qint32 &current_day_volume) {
    this->current_day_volume = current_day_volume;
    this->m_current_day_volume_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_day_volume_Set() const{
    return m_current_day_volume_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_day_volume_Valid() const{
    return m_current_day_volume_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentDayVolumeBuy() const {
    return current_day_volume_buy;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentDayVolumeBuy(const qint32 &current_day_volume_buy) {
    this->current_day_volume_buy = current_day_volume_buy;
    this->m_current_day_volume_buy_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_day_volume_buy_Set() const{
    return m_current_day_volume_buy_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_day_volume_buy_Valid() const{
    return m_current_day_volume_buy_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentDayVolumeSell() const {
    return current_day_volume_sell;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentDayVolumeSell(const qint32 &current_day_volume_sell) {
    this->current_day_volume_sell = current_day_volume_sell;
    this->m_current_day_volume_sell_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_day_volume_sell_Set() const{
    return m_current_day_volume_sell_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_day_volume_sell_Valid() const{
    return m_current_day_volume_sell_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentDayVolumeUnknown() const {
    return current_day_volume_unknown;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentDayVolumeUnknown(const qint32 &current_day_volume_unknown) {
    this->current_day_volume_unknown = current_day_volume_unknown;
    this->m_current_day_volume_unknown_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_day_volume_unknown_Set() const{
    return m_current_day_volume_unknown_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_day_volume_unknown_Valid() const{
    return m_current_day_volume_unknown_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentHourHigh() const {
    return current_hour_high;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentHourHigh(const qint32 &current_hour_high) {
    this->current_hour_high = current_hour_high;
    this->m_current_hour_high_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_hour_high_Set() const{
    return m_current_hour_high_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_hour_high_Valid() const{
    return m_current_hour_high_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentHourLow() const {
    return current_hour_low;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentHourLow(const qint32 &current_hour_low) {
    this->current_hour_low = current_hour_low;
    this->m_current_hour_low_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_hour_low_Set() const{
    return m_current_hour_low_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_hour_low_Valid() const{
    return m_current_hour_low_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentHourOpen() const {
    return current_hour_open;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentHourOpen(const qint32 &current_hour_open) {
    this->current_hour_open = current_hour_open;
    this->m_current_hour_open_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_hour_open_Set() const{
    return m_current_hour_open_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_hour_open_Valid() const{
    return m_current_hour_open_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentHourQuoteVolume() const {
    return current_hour_quote_volume;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentHourQuoteVolume(const qint32 &current_hour_quote_volume) {
    this->current_hour_quote_volume = current_hour_quote_volume;
    this->m_current_hour_quote_volume_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_hour_quote_volume_Set() const{
    return m_current_hour_quote_volume_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_hour_quote_volume_Valid() const{
    return m_current_hour_quote_volume_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentHourQuoteVolumeBuy() const {
    return current_hour_quote_volume_buy;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentHourQuoteVolumeBuy(const qint32 &current_hour_quote_volume_buy) {
    this->current_hour_quote_volume_buy = current_hour_quote_volume_buy;
    this->m_current_hour_quote_volume_buy_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_hour_quote_volume_buy_Set() const{
    return m_current_hour_quote_volume_buy_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_hour_quote_volume_buy_Valid() const{
    return m_current_hour_quote_volume_buy_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentHourQuoteVolumeSell() const {
    return current_hour_quote_volume_sell;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentHourQuoteVolumeSell(const qint32 &current_hour_quote_volume_sell) {
    this->current_hour_quote_volume_sell = current_hour_quote_volume_sell;
    this->m_current_hour_quote_volume_sell_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_hour_quote_volume_sell_Set() const{
    return m_current_hour_quote_volume_sell_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_hour_quote_volume_sell_Valid() const{
    return m_current_hour_quote_volume_sell_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentHourQuoteVolumeUnknown() const {
    return current_hour_quote_volume_unknown;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentHourQuoteVolumeUnknown(const qint32 &current_hour_quote_volume_unknown) {
    this->current_hour_quote_volume_unknown = current_hour_quote_volume_unknown;
    this->m_current_hour_quote_volume_unknown_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_hour_quote_volume_unknown_Set() const{
    return m_current_hour_quote_volume_unknown_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_hour_quote_volume_unknown_Valid() const{
    return m_current_hour_quote_volume_unknown_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentHourTotalTrades() const {
    return current_hour_total_trades;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentHourTotalTrades(const qint32 &current_hour_total_trades) {
    this->current_hour_total_trades = current_hour_total_trades;
    this->m_current_hour_total_trades_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_hour_total_trades_Set() const{
    return m_current_hour_total_trades_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_hour_total_trades_Valid() const{
    return m_current_hour_total_trades_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentHourTotalTradesBuy() const {
    return current_hour_total_trades_buy;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentHourTotalTradesBuy(const qint32 &current_hour_total_trades_buy) {
    this->current_hour_total_trades_buy = current_hour_total_trades_buy;
    this->m_current_hour_total_trades_buy_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_hour_total_trades_buy_Set() const{
    return m_current_hour_total_trades_buy_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_hour_total_trades_buy_Valid() const{
    return m_current_hour_total_trades_buy_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentHourTotalTradesSell() const {
    return current_hour_total_trades_sell;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentHourTotalTradesSell(const qint32 &current_hour_total_trades_sell) {
    this->current_hour_total_trades_sell = current_hour_total_trades_sell;
    this->m_current_hour_total_trades_sell_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_hour_total_trades_sell_Set() const{
    return m_current_hour_total_trades_sell_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_hour_total_trades_sell_Valid() const{
    return m_current_hour_total_trades_sell_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentHourTotalTradesUnknown() const {
    return current_hour_total_trades_unknown;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentHourTotalTradesUnknown(const qint32 &current_hour_total_trades_unknown) {
    this->current_hour_total_trades_unknown = current_hour_total_trades_unknown;
    this->m_current_hour_total_trades_unknown_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_hour_total_trades_unknown_Set() const{
    return m_current_hour_total_trades_unknown_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_hour_total_trades_unknown_Valid() const{
    return m_current_hour_total_trades_unknown_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentHourVolume() const {
    return current_hour_volume;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentHourVolume(const qint32 &current_hour_volume) {
    this->current_hour_volume = current_hour_volume;
    this->m_current_hour_volume_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_hour_volume_Set() const{
    return m_current_hour_volume_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_hour_volume_Valid() const{
    return m_current_hour_volume_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentHourVolumeBuy() const {
    return current_hour_volume_buy;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentHourVolumeBuy(const qint32 &current_hour_volume_buy) {
    this->current_hour_volume_buy = current_hour_volume_buy;
    this->m_current_hour_volume_buy_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_hour_volume_buy_Set() const{
    return m_current_hour_volume_buy_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_hour_volume_buy_Valid() const{
    return m_current_hour_volume_buy_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentHourVolumeSell() const {
    return current_hour_volume_sell;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentHourVolumeSell(const qint32 &current_hour_volume_sell) {
    this->current_hour_volume_sell = current_hour_volume_sell;
    this->m_current_hour_volume_sell_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_hour_volume_sell_Set() const{
    return m_current_hour_volume_sell_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_hour_volume_sell_Valid() const{
    return m_current_hour_volume_sell_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentHourVolumeUnknown() const {
    return current_hour_volume_unknown;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentHourVolumeUnknown(const qint32 &current_hour_volume_unknown) {
    this->current_hour_volume_unknown = current_hour_volume_unknown;
    this->m_current_hour_volume_unknown_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_hour_volume_unknown_Set() const{
    return m_current_hour_volume_unknown_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_hour_volume_unknown_Valid() const{
    return m_current_hour_volume_unknown_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentMonthHigh() const {
    return current_month_high;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentMonthHigh(const qint32 &current_month_high) {
    this->current_month_high = current_month_high;
    this->m_current_month_high_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_month_high_Set() const{
    return m_current_month_high_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_month_high_Valid() const{
    return m_current_month_high_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentMonthLow() const {
    return current_month_low;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentMonthLow(const qint32 &current_month_low) {
    this->current_month_low = current_month_low;
    this->m_current_month_low_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_month_low_Set() const{
    return m_current_month_low_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_month_low_Valid() const{
    return m_current_month_low_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentMonthOpen() const {
    return current_month_open;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentMonthOpen(const qint32 &current_month_open) {
    this->current_month_open = current_month_open;
    this->m_current_month_open_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_month_open_Set() const{
    return m_current_month_open_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_month_open_Valid() const{
    return m_current_month_open_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentMonthQuoteVolume() const {
    return current_month_quote_volume;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentMonthQuoteVolume(const qint32 &current_month_quote_volume) {
    this->current_month_quote_volume = current_month_quote_volume;
    this->m_current_month_quote_volume_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_month_quote_volume_Set() const{
    return m_current_month_quote_volume_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_month_quote_volume_Valid() const{
    return m_current_month_quote_volume_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentMonthQuoteVolumeBuy() const {
    return current_month_quote_volume_buy;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentMonthQuoteVolumeBuy(const qint32 &current_month_quote_volume_buy) {
    this->current_month_quote_volume_buy = current_month_quote_volume_buy;
    this->m_current_month_quote_volume_buy_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_month_quote_volume_buy_Set() const{
    return m_current_month_quote_volume_buy_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_month_quote_volume_buy_Valid() const{
    return m_current_month_quote_volume_buy_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentMonthQuoteVolumeSell() const {
    return current_month_quote_volume_sell;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentMonthQuoteVolumeSell(const qint32 &current_month_quote_volume_sell) {
    this->current_month_quote_volume_sell = current_month_quote_volume_sell;
    this->m_current_month_quote_volume_sell_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_month_quote_volume_sell_Set() const{
    return m_current_month_quote_volume_sell_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_month_quote_volume_sell_Valid() const{
    return m_current_month_quote_volume_sell_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentMonthQuoteVolumeUnknown() const {
    return current_month_quote_volume_unknown;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentMonthQuoteVolumeUnknown(const qint32 &current_month_quote_volume_unknown) {
    this->current_month_quote_volume_unknown = current_month_quote_volume_unknown;
    this->m_current_month_quote_volume_unknown_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_month_quote_volume_unknown_Set() const{
    return m_current_month_quote_volume_unknown_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_month_quote_volume_unknown_Valid() const{
    return m_current_month_quote_volume_unknown_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentMonthTotalTrades() const {
    return current_month_total_trades;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentMonthTotalTrades(const qint32 &current_month_total_trades) {
    this->current_month_total_trades = current_month_total_trades;
    this->m_current_month_total_trades_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_month_total_trades_Set() const{
    return m_current_month_total_trades_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_month_total_trades_Valid() const{
    return m_current_month_total_trades_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentMonthTotalTradesBuy() const {
    return current_month_total_trades_buy;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentMonthTotalTradesBuy(const qint32 &current_month_total_trades_buy) {
    this->current_month_total_trades_buy = current_month_total_trades_buy;
    this->m_current_month_total_trades_buy_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_month_total_trades_buy_Set() const{
    return m_current_month_total_trades_buy_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_month_total_trades_buy_Valid() const{
    return m_current_month_total_trades_buy_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentMonthTotalTradesSell() const {
    return current_month_total_trades_sell;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentMonthTotalTradesSell(const qint32 &current_month_total_trades_sell) {
    this->current_month_total_trades_sell = current_month_total_trades_sell;
    this->m_current_month_total_trades_sell_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_month_total_trades_sell_Set() const{
    return m_current_month_total_trades_sell_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_month_total_trades_sell_Valid() const{
    return m_current_month_total_trades_sell_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentMonthTotalTradesUnknown() const {
    return current_month_total_trades_unknown;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentMonthTotalTradesUnknown(const qint32 &current_month_total_trades_unknown) {
    this->current_month_total_trades_unknown = current_month_total_trades_unknown;
    this->m_current_month_total_trades_unknown_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_month_total_trades_unknown_Set() const{
    return m_current_month_total_trades_unknown_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_month_total_trades_unknown_Valid() const{
    return m_current_month_total_trades_unknown_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentMonthVolume() const {
    return current_month_volume;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentMonthVolume(const qint32 &current_month_volume) {
    this->current_month_volume = current_month_volume;
    this->m_current_month_volume_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_month_volume_Set() const{
    return m_current_month_volume_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_month_volume_Valid() const{
    return m_current_month_volume_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentMonthVolumeBuy() const {
    return current_month_volume_buy;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentMonthVolumeBuy(const qint32 &current_month_volume_buy) {
    this->current_month_volume_buy = current_month_volume_buy;
    this->m_current_month_volume_buy_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_month_volume_buy_Set() const{
    return m_current_month_volume_buy_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_month_volume_buy_Valid() const{
    return m_current_month_volume_buy_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentMonthVolumeSell() const {
    return current_month_volume_sell;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentMonthVolumeSell(const qint32 &current_month_volume_sell) {
    this->current_month_volume_sell = current_month_volume_sell;
    this->m_current_month_volume_sell_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_month_volume_sell_Set() const{
    return m_current_month_volume_sell_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_month_volume_sell_Valid() const{
    return m_current_month_volume_sell_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentMonthVolumeUnknown() const {
    return current_month_volume_unknown;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentMonthVolumeUnknown(const qint32 &current_month_volume_unknown) {
    this->current_month_volume_unknown = current_month_volume_unknown;
    this->m_current_month_volume_unknown_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_month_volume_unknown_Set() const{
    return m_current_month_volume_unknown_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_month_volume_unknown_Valid() const{
    return m_current_month_volume_unknown_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentWeekHigh() const {
    return current_week_high;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentWeekHigh(const qint32 &current_week_high) {
    this->current_week_high = current_week_high;
    this->m_current_week_high_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_week_high_Set() const{
    return m_current_week_high_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_week_high_Valid() const{
    return m_current_week_high_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentWeekLow() const {
    return current_week_low;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentWeekLow(const qint32 &current_week_low) {
    this->current_week_low = current_week_low;
    this->m_current_week_low_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_week_low_Set() const{
    return m_current_week_low_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_week_low_Valid() const{
    return m_current_week_low_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentWeekOpen() const {
    return current_week_open;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentWeekOpen(const qint32 &current_week_open) {
    this->current_week_open = current_week_open;
    this->m_current_week_open_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_week_open_Set() const{
    return m_current_week_open_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_week_open_Valid() const{
    return m_current_week_open_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentWeekQuoteVolume() const {
    return current_week_quote_volume;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentWeekQuoteVolume(const qint32 &current_week_quote_volume) {
    this->current_week_quote_volume = current_week_quote_volume;
    this->m_current_week_quote_volume_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_week_quote_volume_Set() const{
    return m_current_week_quote_volume_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_week_quote_volume_Valid() const{
    return m_current_week_quote_volume_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentWeekQuoteVolumeBuy() const {
    return current_week_quote_volume_buy;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentWeekQuoteVolumeBuy(const qint32 &current_week_quote_volume_buy) {
    this->current_week_quote_volume_buy = current_week_quote_volume_buy;
    this->m_current_week_quote_volume_buy_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_week_quote_volume_buy_Set() const{
    return m_current_week_quote_volume_buy_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_week_quote_volume_buy_Valid() const{
    return m_current_week_quote_volume_buy_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentWeekQuoteVolumeSell() const {
    return current_week_quote_volume_sell;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentWeekQuoteVolumeSell(const qint32 &current_week_quote_volume_sell) {
    this->current_week_quote_volume_sell = current_week_quote_volume_sell;
    this->m_current_week_quote_volume_sell_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_week_quote_volume_sell_Set() const{
    return m_current_week_quote_volume_sell_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_week_quote_volume_sell_Valid() const{
    return m_current_week_quote_volume_sell_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentWeekQuoteVolumeUnknown() const {
    return current_week_quote_volume_unknown;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentWeekQuoteVolumeUnknown(const qint32 &current_week_quote_volume_unknown) {
    this->current_week_quote_volume_unknown = current_week_quote_volume_unknown;
    this->m_current_week_quote_volume_unknown_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_week_quote_volume_unknown_Set() const{
    return m_current_week_quote_volume_unknown_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_week_quote_volume_unknown_Valid() const{
    return m_current_week_quote_volume_unknown_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentWeekTotalTrades() const {
    return current_week_total_trades;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentWeekTotalTrades(const qint32 &current_week_total_trades) {
    this->current_week_total_trades = current_week_total_trades;
    this->m_current_week_total_trades_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_week_total_trades_Set() const{
    return m_current_week_total_trades_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_week_total_trades_Valid() const{
    return m_current_week_total_trades_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentWeekTotalTradesBuy() const {
    return current_week_total_trades_buy;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentWeekTotalTradesBuy(const qint32 &current_week_total_trades_buy) {
    this->current_week_total_trades_buy = current_week_total_trades_buy;
    this->m_current_week_total_trades_buy_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_week_total_trades_buy_Set() const{
    return m_current_week_total_trades_buy_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_week_total_trades_buy_Valid() const{
    return m_current_week_total_trades_buy_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentWeekTotalTradesSell() const {
    return current_week_total_trades_sell;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentWeekTotalTradesSell(const qint32 &current_week_total_trades_sell) {
    this->current_week_total_trades_sell = current_week_total_trades_sell;
    this->m_current_week_total_trades_sell_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_week_total_trades_sell_Set() const{
    return m_current_week_total_trades_sell_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_week_total_trades_sell_Valid() const{
    return m_current_week_total_trades_sell_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentWeekTotalTradesUnknown() const {
    return current_week_total_trades_unknown;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentWeekTotalTradesUnknown(const qint32 &current_week_total_trades_unknown) {
    this->current_week_total_trades_unknown = current_week_total_trades_unknown;
    this->m_current_week_total_trades_unknown_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_week_total_trades_unknown_Set() const{
    return m_current_week_total_trades_unknown_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_week_total_trades_unknown_Valid() const{
    return m_current_week_total_trades_unknown_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentWeekVolume() const {
    return current_week_volume;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentWeekVolume(const qint32 &current_week_volume) {
    this->current_week_volume = current_week_volume;
    this->m_current_week_volume_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_week_volume_Set() const{
    return m_current_week_volume_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_week_volume_Valid() const{
    return m_current_week_volume_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentWeekVolumeBuy() const {
    return current_week_volume_buy;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentWeekVolumeBuy(const qint32 &current_week_volume_buy) {
    this->current_week_volume_buy = current_week_volume_buy;
    this->m_current_week_volume_buy_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_week_volume_buy_Set() const{
    return m_current_week_volume_buy_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_week_volume_buy_Valid() const{
    return m_current_week_volume_buy_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentWeekVolumeSell() const {
    return current_week_volume_sell;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentWeekVolumeSell(const qint32 &current_week_volume_sell) {
    this->current_week_volume_sell = current_week_volume_sell;
    this->m_current_week_volume_sell_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_week_volume_sell_Set() const{
    return m_current_week_volume_sell_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_week_volume_sell_Valid() const{
    return m_current_week_volume_sell_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentWeekVolumeUnknown() const {
    return current_week_volume_unknown;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentWeekVolumeUnknown(const qint32 &current_week_volume_unknown) {
    this->current_week_volume_unknown = current_week_volume_unknown;
    this->m_current_week_volume_unknown_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_week_volume_unknown_Set() const{
    return m_current_week_volume_unknown_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_week_volume_unknown_Valid() const{
    return m_current_week_volume_unknown_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentYearHigh() const {
    return current_year_high;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentYearHigh(const qint32 &current_year_high) {
    this->current_year_high = current_year_high;
    this->m_current_year_high_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_year_high_Set() const{
    return m_current_year_high_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_year_high_Valid() const{
    return m_current_year_high_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentYearLow() const {
    return current_year_low;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentYearLow(const qint32 &current_year_low) {
    this->current_year_low = current_year_low;
    this->m_current_year_low_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_year_low_Set() const{
    return m_current_year_low_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_year_low_Valid() const{
    return m_current_year_low_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentYearOpen() const {
    return current_year_open;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentYearOpen(const qint32 &current_year_open) {
    this->current_year_open = current_year_open;
    this->m_current_year_open_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_year_open_Set() const{
    return m_current_year_open_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_year_open_Valid() const{
    return m_current_year_open_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentYearQuoteVolume() const {
    return current_year_quote_volume;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentYearQuoteVolume(const qint32 &current_year_quote_volume) {
    this->current_year_quote_volume = current_year_quote_volume;
    this->m_current_year_quote_volume_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_year_quote_volume_Set() const{
    return m_current_year_quote_volume_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_year_quote_volume_Valid() const{
    return m_current_year_quote_volume_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentYearQuoteVolumeBuy() const {
    return current_year_quote_volume_buy;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentYearQuoteVolumeBuy(const qint32 &current_year_quote_volume_buy) {
    this->current_year_quote_volume_buy = current_year_quote_volume_buy;
    this->m_current_year_quote_volume_buy_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_year_quote_volume_buy_Set() const{
    return m_current_year_quote_volume_buy_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_year_quote_volume_buy_Valid() const{
    return m_current_year_quote_volume_buy_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentYearQuoteVolumeSell() const {
    return current_year_quote_volume_sell;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentYearQuoteVolumeSell(const qint32 &current_year_quote_volume_sell) {
    this->current_year_quote_volume_sell = current_year_quote_volume_sell;
    this->m_current_year_quote_volume_sell_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_year_quote_volume_sell_Set() const{
    return m_current_year_quote_volume_sell_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_year_quote_volume_sell_Valid() const{
    return m_current_year_quote_volume_sell_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentYearQuoteVolumeUnknown() const {
    return current_year_quote_volume_unknown;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentYearQuoteVolumeUnknown(const qint32 &current_year_quote_volume_unknown) {
    this->current_year_quote_volume_unknown = current_year_quote_volume_unknown;
    this->m_current_year_quote_volume_unknown_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_year_quote_volume_unknown_Set() const{
    return m_current_year_quote_volume_unknown_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_year_quote_volume_unknown_Valid() const{
    return m_current_year_quote_volume_unknown_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentYearTotalTrades() const {
    return current_year_total_trades;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentYearTotalTrades(const qint32 &current_year_total_trades) {
    this->current_year_total_trades = current_year_total_trades;
    this->m_current_year_total_trades_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_year_total_trades_Set() const{
    return m_current_year_total_trades_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_year_total_trades_Valid() const{
    return m_current_year_total_trades_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentYearTotalTradesBuy() const {
    return current_year_total_trades_buy;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentYearTotalTradesBuy(const qint32 &current_year_total_trades_buy) {
    this->current_year_total_trades_buy = current_year_total_trades_buy;
    this->m_current_year_total_trades_buy_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_year_total_trades_buy_Set() const{
    return m_current_year_total_trades_buy_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_year_total_trades_buy_Valid() const{
    return m_current_year_total_trades_buy_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentYearTotalTradesSell() const {
    return current_year_total_trades_sell;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentYearTotalTradesSell(const qint32 &current_year_total_trades_sell) {
    this->current_year_total_trades_sell = current_year_total_trades_sell;
    this->m_current_year_total_trades_sell_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_year_total_trades_sell_Set() const{
    return m_current_year_total_trades_sell_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_year_total_trades_sell_Valid() const{
    return m_current_year_total_trades_sell_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentYearTotalTradesUnknown() const {
    return current_year_total_trades_unknown;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentYearTotalTradesUnknown(const qint32 &current_year_total_trades_unknown) {
    this->current_year_total_trades_unknown = current_year_total_trades_unknown;
    this->m_current_year_total_trades_unknown_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_year_total_trades_unknown_Set() const{
    return m_current_year_total_trades_unknown_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_year_total_trades_unknown_Valid() const{
    return m_current_year_total_trades_unknown_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentYearVolume() const {
    return current_year_volume;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentYearVolume(const qint32 &current_year_volume) {
    this->current_year_volume = current_year_volume;
    this->m_current_year_volume_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_year_volume_Set() const{
    return m_current_year_volume_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_year_volume_Valid() const{
    return m_current_year_volume_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentYearVolumeBuy() const {
    return current_year_volume_buy;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentYearVolumeBuy(const qint32 &current_year_volume_buy) {
    this->current_year_volume_buy = current_year_volume_buy;
    this->m_current_year_volume_buy_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_year_volume_buy_Set() const{
    return m_current_year_volume_buy_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_year_volume_buy_Valid() const{
    return m_current_year_volume_buy_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentYearVolumeSell() const {
    return current_year_volume_sell;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentYearVolumeSell(const qint32 &current_year_volume_sell) {
    this->current_year_volume_sell = current_year_volume_sell;
    this->m_current_year_volume_sell_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_year_volume_sell_Set() const{
    return m_current_year_volume_sell_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_year_volume_sell_Valid() const{
    return m_current_year_volume_sell_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getCurrentYearVolumeUnknown() const {
    return current_year_volume_unknown;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setCurrentYearVolumeUnknown(const qint32 &current_year_volume_unknown) {
    this->current_year_volume_unknown = current_year_volume_unknown;
    this->m_current_year_volume_unknown_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_year_volume_unknown_Set() const{
    return m_current_year_volume_unknown_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_current_year_volume_unknown_Valid() const{
    return m_current_year_volume_unknown_isValid;
}

QString OAISPOT_INSTRUMENT_MARKET_DATA::getInstrument() const {
    return instrument;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setInstrument(const QString &instrument) {
    this->instrument = instrument;
    this->m_instrument_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_instrument_Set() const{
    return m_instrument_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_instrument_Valid() const{
    return m_instrument_isValid;
}

QString OAISPOT_INSTRUMENT_MARKET_DATA::getLastProcessedTradeCcseq() const {
    return last_processed_trade_ccseq;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setLastProcessedTradeCcseq(const QString &last_processed_trade_ccseq) {
    this->last_processed_trade_ccseq = last_processed_trade_ccseq;
    this->m_last_processed_trade_ccseq_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_last_processed_trade_ccseq_Set() const{
    return m_last_processed_trade_ccseq_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_last_processed_trade_ccseq_Valid() const{
    return m_last_processed_trade_ccseq_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getLastProcessedTradePrice() const {
    return last_processed_trade_price;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setLastProcessedTradePrice(const qint32 &last_processed_trade_price) {
    this->last_processed_trade_price = last_processed_trade_price;
    this->m_last_processed_trade_price_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_last_processed_trade_price_Set() const{
    return m_last_processed_trade_price_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_last_processed_trade_price_Valid() const{
    return m_last_processed_trade_price_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getLastProcessedTradeQuantity() const {
    return last_processed_trade_quantity;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setLastProcessedTradeQuantity(const qint32 &last_processed_trade_quantity) {
    this->last_processed_trade_quantity = last_processed_trade_quantity;
    this->m_last_processed_trade_quantity_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_last_processed_trade_quantity_Set() const{
    return m_last_processed_trade_quantity_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_last_processed_trade_quantity_Valid() const{
    return m_last_processed_trade_quantity_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getLastProcessedTradeQuoteQuantity() const {
    return last_processed_trade_quote_quantity;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setLastProcessedTradeQuoteQuantity(const qint32 &last_processed_trade_quote_quantity) {
    this->last_processed_trade_quote_quantity = last_processed_trade_quote_quantity;
    this->m_last_processed_trade_quote_quantity_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_last_processed_trade_quote_quantity_Set() const{
    return m_last_processed_trade_quote_quantity_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_last_processed_trade_quote_quantity_Valid() const{
    return m_last_processed_trade_quote_quantity_isValid;
}

QString OAISPOT_INSTRUMENT_MARKET_DATA::getLastProcessedTradeSide() const {
    return last_processed_trade_side;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setLastProcessedTradeSide(const QString &last_processed_trade_side) {
    this->last_processed_trade_side = last_processed_trade_side;
    this->m_last_processed_trade_side_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_last_processed_trade_side_Set() const{
    return m_last_processed_trade_side_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_last_processed_trade_side_Valid() const{
    return m_last_processed_trade_side_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getLastProcessedTradeTs() const {
    return last_processed_trade_ts;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setLastProcessedTradeTs(const qint32 &last_processed_trade_ts) {
    this->last_processed_trade_ts = last_processed_trade_ts;
    this->m_last_processed_trade_ts_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_last_processed_trade_ts_Set() const{
    return m_last_processed_trade_ts_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_last_processed_trade_ts_Valid() const{
    return m_last_processed_trade_ts_isValid;
}

QString OAISPOT_INSTRUMENT_MARKET_DATA::getLastTradeCcseq() const {
    return last_trade_ccseq;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setLastTradeCcseq(const QString &last_trade_ccseq) {
    this->last_trade_ccseq = last_trade_ccseq;
    this->m_last_trade_ccseq_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_last_trade_ccseq_Set() const{
    return m_last_trade_ccseq_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_last_trade_ccseq_Valid() const{
    return m_last_trade_ccseq_isValid;
}

QString OAISPOT_INSTRUMENT_MARKET_DATA::getLastTradeId() const {
    return last_trade_id;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setLastTradeId(const QString &last_trade_id) {
    this->last_trade_id = last_trade_id;
    this->m_last_trade_id_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_last_trade_id_Set() const{
    return m_last_trade_id_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_last_trade_id_Valid() const{
    return m_last_trade_id_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getLastTradeQuantity() const {
    return last_trade_quantity;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setLastTradeQuantity(const qint32 &last_trade_quantity) {
    this->last_trade_quantity = last_trade_quantity;
    this->m_last_trade_quantity_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_last_trade_quantity_Set() const{
    return m_last_trade_quantity_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_last_trade_quantity_Valid() const{
    return m_last_trade_quantity_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getLastTradeQuoteQuantity() const {
    return last_trade_quote_quantity;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setLastTradeQuoteQuantity(const qint32 &last_trade_quote_quantity) {
    this->last_trade_quote_quantity = last_trade_quote_quantity;
    this->m_last_trade_quote_quantity_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_last_trade_quote_quantity_Set() const{
    return m_last_trade_quote_quantity_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_last_trade_quote_quantity_Valid() const{
    return m_last_trade_quote_quantity_isValid;
}

QString OAISPOT_INSTRUMENT_MARKET_DATA::getLastTradeSide() const {
    return last_trade_side;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setLastTradeSide(const QString &last_trade_side) {
    this->last_trade_side = last_trade_side;
    this->m_last_trade_side_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_last_trade_side_Set() const{
    return m_last_trade_side_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_last_trade_side_Valid() const{
    return m_last_trade_side_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getLifetimeFirstTradeTs() const {
    return lifetime_first_trade_ts;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setLifetimeFirstTradeTs(const qint32 &lifetime_first_trade_ts) {
    this->lifetime_first_trade_ts = lifetime_first_trade_ts;
    this->m_lifetime_first_trade_ts_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_lifetime_first_trade_ts_Set() const{
    return m_lifetime_first_trade_ts_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_lifetime_first_trade_ts_Valid() const{
    return m_lifetime_first_trade_ts_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getLifetimeHigh() const {
    return lifetime_high;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setLifetimeHigh(const qint32 &lifetime_high) {
    this->lifetime_high = lifetime_high;
    this->m_lifetime_high_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_lifetime_high_Set() const{
    return m_lifetime_high_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_lifetime_high_Valid() const{
    return m_lifetime_high_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getLifetimeHighTs() const {
    return lifetime_high_ts;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setLifetimeHighTs(const qint32 &lifetime_high_ts) {
    this->lifetime_high_ts = lifetime_high_ts;
    this->m_lifetime_high_ts_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_lifetime_high_ts_Set() const{
    return m_lifetime_high_ts_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_lifetime_high_ts_Valid() const{
    return m_lifetime_high_ts_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getLifetimeLow() const {
    return lifetime_low;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setLifetimeLow(const qint32 &lifetime_low) {
    this->lifetime_low = lifetime_low;
    this->m_lifetime_low_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_lifetime_low_Set() const{
    return m_lifetime_low_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_lifetime_low_Valid() const{
    return m_lifetime_low_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getLifetimeLowTs() const {
    return lifetime_low_ts;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setLifetimeLowTs(const qint32 &lifetime_low_ts) {
    this->lifetime_low_ts = lifetime_low_ts;
    this->m_lifetime_low_ts_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_lifetime_low_ts_Set() const{
    return m_lifetime_low_ts_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_lifetime_low_ts_Valid() const{
    return m_lifetime_low_ts_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getLifetimeOpen() const {
    return lifetime_open;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setLifetimeOpen(const qint32 &lifetime_open) {
    this->lifetime_open = lifetime_open;
    this->m_lifetime_open_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_lifetime_open_Set() const{
    return m_lifetime_open_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_lifetime_open_Valid() const{
    return m_lifetime_open_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getLifetimeQuoteVolume() const {
    return lifetime_quote_volume;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setLifetimeQuoteVolume(const qint32 &lifetime_quote_volume) {
    this->lifetime_quote_volume = lifetime_quote_volume;
    this->m_lifetime_quote_volume_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_lifetime_quote_volume_Set() const{
    return m_lifetime_quote_volume_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_lifetime_quote_volume_Valid() const{
    return m_lifetime_quote_volume_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getLifetimeQuoteVolumeBuy() const {
    return lifetime_quote_volume_buy;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setLifetimeQuoteVolumeBuy(const qint32 &lifetime_quote_volume_buy) {
    this->lifetime_quote_volume_buy = lifetime_quote_volume_buy;
    this->m_lifetime_quote_volume_buy_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_lifetime_quote_volume_buy_Set() const{
    return m_lifetime_quote_volume_buy_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_lifetime_quote_volume_buy_Valid() const{
    return m_lifetime_quote_volume_buy_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getLifetimeQuoteVolumeSell() const {
    return lifetime_quote_volume_sell;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setLifetimeQuoteVolumeSell(const qint32 &lifetime_quote_volume_sell) {
    this->lifetime_quote_volume_sell = lifetime_quote_volume_sell;
    this->m_lifetime_quote_volume_sell_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_lifetime_quote_volume_sell_Set() const{
    return m_lifetime_quote_volume_sell_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_lifetime_quote_volume_sell_Valid() const{
    return m_lifetime_quote_volume_sell_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getLifetimeQuoteVolumeUnknown() const {
    return lifetime_quote_volume_unknown;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setLifetimeQuoteVolumeUnknown(const qint32 &lifetime_quote_volume_unknown) {
    this->lifetime_quote_volume_unknown = lifetime_quote_volume_unknown;
    this->m_lifetime_quote_volume_unknown_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_lifetime_quote_volume_unknown_Set() const{
    return m_lifetime_quote_volume_unknown_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_lifetime_quote_volume_unknown_Valid() const{
    return m_lifetime_quote_volume_unknown_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getLifetimeTotalTrades() const {
    return lifetime_total_trades;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setLifetimeTotalTrades(const qint32 &lifetime_total_trades) {
    this->lifetime_total_trades = lifetime_total_trades;
    this->m_lifetime_total_trades_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_lifetime_total_trades_Set() const{
    return m_lifetime_total_trades_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_lifetime_total_trades_Valid() const{
    return m_lifetime_total_trades_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getLifetimeTotalTradesBuy() const {
    return lifetime_total_trades_buy;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setLifetimeTotalTradesBuy(const qint32 &lifetime_total_trades_buy) {
    this->lifetime_total_trades_buy = lifetime_total_trades_buy;
    this->m_lifetime_total_trades_buy_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_lifetime_total_trades_buy_Set() const{
    return m_lifetime_total_trades_buy_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_lifetime_total_trades_buy_Valid() const{
    return m_lifetime_total_trades_buy_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getLifetimeTotalTradesSell() const {
    return lifetime_total_trades_sell;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setLifetimeTotalTradesSell(const qint32 &lifetime_total_trades_sell) {
    this->lifetime_total_trades_sell = lifetime_total_trades_sell;
    this->m_lifetime_total_trades_sell_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_lifetime_total_trades_sell_Set() const{
    return m_lifetime_total_trades_sell_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_lifetime_total_trades_sell_Valid() const{
    return m_lifetime_total_trades_sell_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getLifetimeTotalTradesUnknown() const {
    return lifetime_total_trades_unknown;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setLifetimeTotalTradesUnknown(const qint32 &lifetime_total_trades_unknown) {
    this->lifetime_total_trades_unknown = lifetime_total_trades_unknown;
    this->m_lifetime_total_trades_unknown_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_lifetime_total_trades_unknown_Set() const{
    return m_lifetime_total_trades_unknown_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_lifetime_total_trades_unknown_Valid() const{
    return m_lifetime_total_trades_unknown_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getLifetimeVolume() const {
    return lifetime_volume;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setLifetimeVolume(const qint32 &lifetime_volume) {
    this->lifetime_volume = lifetime_volume;
    this->m_lifetime_volume_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_lifetime_volume_Set() const{
    return m_lifetime_volume_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_lifetime_volume_Valid() const{
    return m_lifetime_volume_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getLifetimeVolumeBuy() const {
    return lifetime_volume_buy;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setLifetimeVolumeBuy(const qint32 &lifetime_volume_buy) {
    this->lifetime_volume_buy = lifetime_volume_buy;
    this->m_lifetime_volume_buy_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_lifetime_volume_buy_Set() const{
    return m_lifetime_volume_buy_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_lifetime_volume_buy_Valid() const{
    return m_lifetime_volume_buy_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getLifetimeVolumeSell() const {
    return lifetime_volume_sell;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setLifetimeVolumeSell(const qint32 &lifetime_volume_sell) {
    this->lifetime_volume_sell = lifetime_volume_sell;
    this->m_lifetime_volume_sell_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_lifetime_volume_sell_Set() const{
    return m_lifetime_volume_sell_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_lifetime_volume_sell_Valid() const{
    return m_lifetime_volume_sell_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getLifetimeVolumeUnknown() const {
    return lifetime_volume_unknown;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setLifetimeVolumeUnknown(const qint32 &lifetime_volume_unknown) {
    this->lifetime_volume_unknown = lifetime_volume_unknown;
    this->m_lifetime_volume_unknown_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_lifetime_volume_unknown_Set() const{
    return m_lifetime_volume_unknown_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_lifetime_volume_unknown_Valid() const{
    return m_lifetime_volume_unknown_isValid;
}

QString OAISPOT_INSTRUMENT_MARKET_DATA::getMappedInstrument() const {
    return mapped_instrument;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMappedInstrument(const QString &mapped_instrument) {
    this->mapped_instrument = mapped_instrument;
    this->m_mapped_instrument_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_mapped_instrument_Set() const{
    return m_mapped_instrument_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_mapped_instrument_Valid() const{
    return m_mapped_instrument_isValid;
}

QString OAISPOT_INSTRUMENT_MARKET_DATA::getMarket() const {
    return market;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMarket(const QString &market) {
    this->market = market;
    this->m_market_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_market_Set() const{
    return m_market_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_market_Valid() const{
    return m_market_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving180DayHigh() const {
    return moving_180_day_high;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving180DayHigh(const qint32 &moving_180_day_high) {
    this->moving_180_day_high = moving_180_day_high;
    this->m_moving_180_day_high_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_180_day_high_Set() const{
    return m_moving_180_day_high_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_180_day_high_Valid() const{
    return m_moving_180_day_high_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving180DayLow() const {
    return moving_180_day_low;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving180DayLow(const qint32 &moving_180_day_low) {
    this->moving_180_day_low = moving_180_day_low;
    this->m_moving_180_day_low_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_180_day_low_Set() const{
    return m_moving_180_day_low_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_180_day_low_Valid() const{
    return m_moving_180_day_low_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving180DayOpen() const {
    return moving_180_day_open;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving180DayOpen(const qint32 &moving_180_day_open) {
    this->moving_180_day_open = moving_180_day_open;
    this->m_moving_180_day_open_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_180_day_open_Set() const{
    return m_moving_180_day_open_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_180_day_open_Valid() const{
    return m_moving_180_day_open_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving180DayQuoteVolume() const {
    return moving_180_day_quote_volume;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving180DayQuoteVolume(const qint32 &moving_180_day_quote_volume) {
    this->moving_180_day_quote_volume = moving_180_day_quote_volume;
    this->m_moving_180_day_quote_volume_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_180_day_quote_volume_Set() const{
    return m_moving_180_day_quote_volume_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_180_day_quote_volume_Valid() const{
    return m_moving_180_day_quote_volume_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving180DayQuoteVolumeBuy() const {
    return moving_180_day_quote_volume_buy;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving180DayQuoteVolumeBuy(const qint32 &moving_180_day_quote_volume_buy) {
    this->moving_180_day_quote_volume_buy = moving_180_day_quote_volume_buy;
    this->m_moving_180_day_quote_volume_buy_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_180_day_quote_volume_buy_Set() const{
    return m_moving_180_day_quote_volume_buy_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_180_day_quote_volume_buy_Valid() const{
    return m_moving_180_day_quote_volume_buy_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving180DayQuoteVolumeSell() const {
    return moving_180_day_quote_volume_sell;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving180DayQuoteVolumeSell(const qint32 &moving_180_day_quote_volume_sell) {
    this->moving_180_day_quote_volume_sell = moving_180_day_quote_volume_sell;
    this->m_moving_180_day_quote_volume_sell_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_180_day_quote_volume_sell_Set() const{
    return m_moving_180_day_quote_volume_sell_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_180_day_quote_volume_sell_Valid() const{
    return m_moving_180_day_quote_volume_sell_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving180DayQuoteVolumeUnknown() const {
    return moving_180_day_quote_volume_unknown;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving180DayQuoteVolumeUnknown(const qint32 &moving_180_day_quote_volume_unknown) {
    this->moving_180_day_quote_volume_unknown = moving_180_day_quote_volume_unknown;
    this->m_moving_180_day_quote_volume_unknown_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_180_day_quote_volume_unknown_Set() const{
    return m_moving_180_day_quote_volume_unknown_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_180_day_quote_volume_unknown_Valid() const{
    return m_moving_180_day_quote_volume_unknown_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving180DayTotalTrades() const {
    return moving_180_day_total_trades;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving180DayTotalTrades(const qint32 &moving_180_day_total_trades) {
    this->moving_180_day_total_trades = moving_180_day_total_trades;
    this->m_moving_180_day_total_trades_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_180_day_total_trades_Set() const{
    return m_moving_180_day_total_trades_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_180_day_total_trades_Valid() const{
    return m_moving_180_day_total_trades_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving180DayTotalTradesBuy() const {
    return moving_180_day_total_trades_buy;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving180DayTotalTradesBuy(const qint32 &moving_180_day_total_trades_buy) {
    this->moving_180_day_total_trades_buy = moving_180_day_total_trades_buy;
    this->m_moving_180_day_total_trades_buy_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_180_day_total_trades_buy_Set() const{
    return m_moving_180_day_total_trades_buy_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_180_day_total_trades_buy_Valid() const{
    return m_moving_180_day_total_trades_buy_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving180DayTotalTradesSell() const {
    return moving_180_day_total_trades_sell;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving180DayTotalTradesSell(const qint32 &moving_180_day_total_trades_sell) {
    this->moving_180_day_total_trades_sell = moving_180_day_total_trades_sell;
    this->m_moving_180_day_total_trades_sell_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_180_day_total_trades_sell_Set() const{
    return m_moving_180_day_total_trades_sell_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_180_day_total_trades_sell_Valid() const{
    return m_moving_180_day_total_trades_sell_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving180DayTotalTradesUnknown() const {
    return moving_180_day_total_trades_unknown;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving180DayTotalTradesUnknown(const qint32 &moving_180_day_total_trades_unknown) {
    this->moving_180_day_total_trades_unknown = moving_180_day_total_trades_unknown;
    this->m_moving_180_day_total_trades_unknown_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_180_day_total_trades_unknown_Set() const{
    return m_moving_180_day_total_trades_unknown_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_180_day_total_trades_unknown_Valid() const{
    return m_moving_180_day_total_trades_unknown_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving180DayVolume() const {
    return moving_180_day_volume;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving180DayVolume(const qint32 &moving_180_day_volume) {
    this->moving_180_day_volume = moving_180_day_volume;
    this->m_moving_180_day_volume_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_180_day_volume_Set() const{
    return m_moving_180_day_volume_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_180_day_volume_Valid() const{
    return m_moving_180_day_volume_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving180DayVolumeBuy() const {
    return moving_180_day_volume_buy;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving180DayVolumeBuy(const qint32 &moving_180_day_volume_buy) {
    this->moving_180_day_volume_buy = moving_180_day_volume_buy;
    this->m_moving_180_day_volume_buy_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_180_day_volume_buy_Set() const{
    return m_moving_180_day_volume_buy_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_180_day_volume_buy_Valid() const{
    return m_moving_180_day_volume_buy_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving180DayVolumeSell() const {
    return moving_180_day_volume_sell;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving180DayVolumeSell(const qint32 &moving_180_day_volume_sell) {
    this->moving_180_day_volume_sell = moving_180_day_volume_sell;
    this->m_moving_180_day_volume_sell_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_180_day_volume_sell_Set() const{
    return m_moving_180_day_volume_sell_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_180_day_volume_sell_Valid() const{
    return m_moving_180_day_volume_sell_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving180DayVolumeUnknown() const {
    return moving_180_day_volume_unknown;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving180DayVolumeUnknown(const qint32 &moving_180_day_volume_unknown) {
    this->moving_180_day_volume_unknown = moving_180_day_volume_unknown;
    this->m_moving_180_day_volume_unknown_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_180_day_volume_unknown_Set() const{
    return m_moving_180_day_volume_unknown_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_180_day_volume_unknown_Valid() const{
    return m_moving_180_day_volume_unknown_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving24HourHigh() const {
    return moving_24_hour_high;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving24HourHigh(const qint32 &moving_24_hour_high) {
    this->moving_24_hour_high = moving_24_hour_high;
    this->m_moving_24_hour_high_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_24_hour_high_Set() const{
    return m_moving_24_hour_high_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_24_hour_high_Valid() const{
    return m_moving_24_hour_high_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving24HourLow() const {
    return moving_24_hour_low;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving24HourLow(const qint32 &moving_24_hour_low) {
    this->moving_24_hour_low = moving_24_hour_low;
    this->m_moving_24_hour_low_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_24_hour_low_Set() const{
    return m_moving_24_hour_low_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_24_hour_low_Valid() const{
    return m_moving_24_hour_low_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving24HourOpen() const {
    return moving_24_hour_open;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving24HourOpen(const qint32 &moving_24_hour_open) {
    this->moving_24_hour_open = moving_24_hour_open;
    this->m_moving_24_hour_open_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_24_hour_open_Set() const{
    return m_moving_24_hour_open_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_24_hour_open_Valid() const{
    return m_moving_24_hour_open_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving24HourQuoteVolume() const {
    return moving_24_hour_quote_volume;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving24HourQuoteVolume(const qint32 &moving_24_hour_quote_volume) {
    this->moving_24_hour_quote_volume = moving_24_hour_quote_volume;
    this->m_moving_24_hour_quote_volume_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_24_hour_quote_volume_Set() const{
    return m_moving_24_hour_quote_volume_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_24_hour_quote_volume_Valid() const{
    return m_moving_24_hour_quote_volume_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving24HourQuoteVolumeBuy() const {
    return moving_24_hour_quote_volume_buy;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving24HourQuoteVolumeBuy(const qint32 &moving_24_hour_quote_volume_buy) {
    this->moving_24_hour_quote_volume_buy = moving_24_hour_quote_volume_buy;
    this->m_moving_24_hour_quote_volume_buy_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_24_hour_quote_volume_buy_Set() const{
    return m_moving_24_hour_quote_volume_buy_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_24_hour_quote_volume_buy_Valid() const{
    return m_moving_24_hour_quote_volume_buy_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving24HourQuoteVolumeSell() const {
    return moving_24_hour_quote_volume_sell;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving24HourQuoteVolumeSell(const qint32 &moving_24_hour_quote_volume_sell) {
    this->moving_24_hour_quote_volume_sell = moving_24_hour_quote_volume_sell;
    this->m_moving_24_hour_quote_volume_sell_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_24_hour_quote_volume_sell_Set() const{
    return m_moving_24_hour_quote_volume_sell_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_24_hour_quote_volume_sell_Valid() const{
    return m_moving_24_hour_quote_volume_sell_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving24HourQuoteVolumeUnknown() const {
    return moving_24_hour_quote_volume_unknown;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving24HourQuoteVolumeUnknown(const qint32 &moving_24_hour_quote_volume_unknown) {
    this->moving_24_hour_quote_volume_unknown = moving_24_hour_quote_volume_unknown;
    this->m_moving_24_hour_quote_volume_unknown_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_24_hour_quote_volume_unknown_Set() const{
    return m_moving_24_hour_quote_volume_unknown_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_24_hour_quote_volume_unknown_Valid() const{
    return m_moving_24_hour_quote_volume_unknown_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving24HourTotalTrades() const {
    return moving_24_hour_total_trades;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving24HourTotalTrades(const qint32 &moving_24_hour_total_trades) {
    this->moving_24_hour_total_trades = moving_24_hour_total_trades;
    this->m_moving_24_hour_total_trades_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_24_hour_total_trades_Set() const{
    return m_moving_24_hour_total_trades_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_24_hour_total_trades_Valid() const{
    return m_moving_24_hour_total_trades_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving24HourTotalTradesBuy() const {
    return moving_24_hour_total_trades_buy;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving24HourTotalTradesBuy(const qint32 &moving_24_hour_total_trades_buy) {
    this->moving_24_hour_total_trades_buy = moving_24_hour_total_trades_buy;
    this->m_moving_24_hour_total_trades_buy_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_24_hour_total_trades_buy_Set() const{
    return m_moving_24_hour_total_trades_buy_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_24_hour_total_trades_buy_Valid() const{
    return m_moving_24_hour_total_trades_buy_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving24HourTotalTradesSell() const {
    return moving_24_hour_total_trades_sell;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving24HourTotalTradesSell(const qint32 &moving_24_hour_total_trades_sell) {
    this->moving_24_hour_total_trades_sell = moving_24_hour_total_trades_sell;
    this->m_moving_24_hour_total_trades_sell_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_24_hour_total_trades_sell_Set() const{
    return m_moving_24_hour_total_trades_sell_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_24_hour_total_trades_sell_Valid() const{
    return m_moving_24_hour_total_trades_sell_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving24HourTotalTradesUnknown() const {
    return moving_24_hour_total_trades_unknown;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving24HourTotalTradesUnknown(const qint32 &moving_24_hour_total_trades_unknown) {
    this->moving_24_hour_total_trades_unknown = moving_24_hour_total_trades_unknown;
    this->m_moving_24_hour_total_trades_unknown_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_24_hour_total_trades_unknown_Set() const{
    return m_moving_24_hour_total_trades_unknown_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_24_hour_total_trades_unknown_Valid() const{
    return m_moving_24_hour_total_trades_unknown_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving24HourVolume() const {
    return moving_24_hour_volume;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving24HourVolume(const qint32 &moving_24_hour_volume) {
    this->moving_24_hour_volume = moving_24_hour_volume;
    this->m_moving_24_hour_volume_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_24_hour_volume_Set() const{
    return m_moving_24_hour_volume_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_24_hour_volume_Valid() const{
    return m_moving_24_hour_volume_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving24HourVolumeBuy() const {
    return moving_24_hour_volume_buy;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving24HourVolumeBuy(const qint32 &moving_24_hour_volume_buy) {
    this->moving_24_hour_volume_buy = moving_24_hour_volume_buy;
    this->m_moving_24_hour_volume_buy_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_24_hour_volume_buy_Set() const{
    return m_moving_24_hour_volume_buy_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_24_hour_volume_buy_Valid() const{
    return m_moving_24_hour_volume_buy_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving24HourVolumeSell() const {
    return moving_24_hour_volume_sell;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving24HourVolumeSell(const qint32 &moving_24_hour_volume_sell) {
    this->moving_24_hour_volume_sell = moving_24_hour_volume_sell;
    this->m_moving_24_hour_volume_sell_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_24_hour_volume_sell_Set() const{
    return m_moving_24_hour_volume_sell_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_24_hour_volume_sell_Valid() const{
    return m_moving_24_hour_volume_sell_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving24HourVolumeUnknown() const {
    return moving_24_hour_volume_unknown;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving24HourVolumeUnknown(const qint32 &moving_24_hour_volume_unknown) {
    this->moving_24_hour_volume_unknown = moving_24_hour_volume_unknown;
    this->m_moving_24_hour_volume_unknown_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_24_hour_volume_unknown_Set() const{
    return m_moving_24_hour_volume_unknown_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_24_hour_volume_unknown_Valid() const{
    return m_moving_24_hour_volume_unknown_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving30DayHigh() const {
    return moving_30_day_high;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving30DayHigh(const qint32 &moving_30_day_high) {
    this->moving_30_day_high = moving_30_day_high;
    this->m_moving_30_day_high_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_30_day_high_Set() const{
    return m_moving_30_day_high_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_30_day_high_Valid() const{
    return m_moving_30_day_high_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving30DayLow() const {
    return moving_30_day_low;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving30DayLow(const qint32 &moving_30_day_low) {
    this->moving_30_day_low = moving_30_day_low;
    this->m_moving_30_day_low_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_30_day_low_Set() const{
    return m_moving_30_day_low_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_30_day_low_Valid() const{
    return m_moving_30_day_low_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving30DayOpen() const {
    return moving_30_day_open;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving30DayOpen(const qint32 &moving_30_day_open) {
    this->moving_30_day_open = moving_30_day_open;
    this->m_moving_30_day_open_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_30_day_open_Set() const{
    return m_moving_30_day_open_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_30_day_open_Valid() const{
    return m_moving_30_day_open_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving30DayQuoteVolume() const {
    return moving_30_day_quote_volume;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving30DayQuoteVolume(const qint32 &moving_30_day_quote_volume) {
    this->moving_30_day_quote_volume = moving_30_day_quote_volume;
    this->m_moving_30_day_quote_volume_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_30_day_quote_volume_Set() const{
    return m_moving_30_day_quote_volume_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_30_day_quote_volume_Valid() const{
    return m_moving_30_day_quote_volume_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving30DayQuoteVolumeBuy() const {
    return moving_30_day_quote_volume_buy;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving30DayQuoteVolumeBuy(const qint32 &moving_30_day_quote_volume_buy) {
    this->moving_30_day_quote_volume_buy = moving_30_day_quote_volume_buy;
    this->m_moving_30_day_quote_volume_buy_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_30_day_quote_volume_buy_Set() const{
    return m_moving_30_day_quote_volume_buy_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_30_day_quote_volume_buy_Valid() const{
    return m_moving_30_day_quote_volume_buy_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving30DayQuoteVolumeSell() const {
    return moving_30_day_quote_volume_sell;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving30DayQuoteVolumeSell(const qint32 &moving_30_day_quote_volume_sell) {
    this->moving_30_day_quote_volume_sell = moving_30_day_quote_volume_sell;
    this->m_moving_30_day_quote_volume_sell_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_30_day_quote_volume_sell_Set() const{
    return m_moving_30_day_quote_volume_sell_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_30_day_quote_volume_sell_Valid() const{
    return m_moving_30_day_quote_volume_sell_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving30DayQuoteVolumeUnknown() const {
    return moving_30_day_quote_volume_unknown;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving30DayQuoteVolumeUnknown(const qint32 &moving_30_day_quote_volume_unknown) {
    this->moving_30_day_quote_volume_unknown = moving_30_day_quote_volume_unknown;
    this->m_moving_30_day_quote_volume_unknown_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_30_day_quote_volume_unknown_Set() const{
    return m_moving_30_day_quote_volume_unknown_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_30_day_quote_volume_unknown_Valid() const{
    return m_moving_30_day_quote_volume_unknown_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving30DayTotalTrades() const {
    return moving_30_day_total_trades;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving30DayTotalTrades(const qint32 &moving_30_day_total_trades) {
    this->moving_30_day_total_trades = moving_30_day_total_trades;
    this->m_moving_30_day_total_trades_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_30_day_total_trades_Set() const{
    return m_moving_30_day_total_trades_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_30_day_total_trades_Valid() const{
    return m_moving_30_day_total_trades_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving30DayTotalTradesBuy() const {
    return moving_30_day_total_trades_buy;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving30DayTotalTradesBuy(const qint32 &moving_30_day_total_trades_buy) {
    this->moving_30_day_total_trades_buy = moving_30_day_total_trades_buy;
    this->m_moving_30_day_total_trades_buy_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_30_day_total_trades_buy_Set() const{
    return m_moving_30_day_total_trades_buy_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_30_day_total_trades_buy_Valid() const{
    return m_moving_30_day_total_trades_buy_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving30DayTotalTradesSell() const {
    return moving_30_day_total_trades_sell;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving30DayTotalTradesSell(const qint32 &moving_30_day_total_trades_sell) {
    this->moving_30_day_total_trades_sell = moving_30_day_total_trades_sell;
    this->m_moving_30_day_total_trades_sell_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_30_day_total_trades_sell_Set() const{
    return m_moving_30_day_total_trades_sell_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_30_day_total_trades_sell_Valid() const{
    return m_moving_30_day_total_trades_sell_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving30DayTotalTradesUnknown() const {
    return moving_30_day_total_trades_unknown;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving30DayTotalTradesUnknown(const qint32 &moving_30_day_total_trades_unknown) {
    this->moving_30_day_total_trades_unknown = moving_30_day_total_trades_unknown;
    this->m_moving_30_day_total_trades_unknown_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_30_day_total_trades_unknown_Set() const{
    return m_moving_30_day_total_trades_unknown_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_30_day_total_trades_unknown_Valid() const{
    return m_moving_30_day_total_trades_unknown_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving30DayVolume() const {
    return moving_30_day_volume;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving30DayVolume(const qint32 &moving_30_day_volume) {
    this->moving_30_day_volume = moving_30_day_volume;
    this->m_moving_30_day_volume_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_30_day_volume_Set() const{
    return m_moving_30_day_volume_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_30_day_volume_Valid() const{
    return m_moving_30_day_volume_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving30DayVolumeBuy() const {
    return moving_30_day_volume_buy;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving30DayVolumeBuy(const qint32 &moving_30_day_volume_buy) {
    this->moving_30_day_volume_buy = moving_30_day_volume_buy;
    this->m_moving_30_day_volume_buy_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_30_day_volume_buy_Set() const{
    return m_moving_30_day_volume_buy_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_30_day_volume_buy_Valid() const{
    return m_moving_30_day_volume_buy_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving30DayVolumeSell() const {
    return moving_30_day_volume_sell;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving30DayVolumeSell(const qint32 &moving_30_day_volume_sell) {
    this->moving_30_day_volume_sell = moving_30_day_volume_sell;
    this->m_moving_30_day_volume_sell_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_30_day_volume_sell_Set() const{
    return m_moving_30_day_volume_sell_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_30_day_volume_sell_Valid() const{
    return m_moving_30_day_volume_sell_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving30DayVolumeUnknown() const {
    return moving_30_day_volume_unknown;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving30DayVolumeUnknown(const qint32 &moving_30_day_volume_unknown) {
    this->moving_30_day_volume_unknown = moving_30_day_volume_unknown;
    this->m_moving_30_day_volume_unknown_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_30_day_volume_unknown_Set() const{
    return m_moving_30_day_volume_unknown_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_30_day_volume_unknown_Valid() const{
    return m_moving_30_day_volume_unknown_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving365DayHigh() const {
    return moving_365_day_high;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving365DayHigh(const qint32 &moving_365_day_high) {
    this->moving_365_day_high = moving_365_day_high;
    this->m_moving_365_day_high_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_365_day_high_Set() const{
    return m_moving_365_day_high_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_365_day_high_Valid() const{
    return m_moving_365_day_high_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving365DayLow() const {
    return moving_365_day_low;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving365DayLow(const qint32 &moving_365_day_low) {
    this->moving_365_day_low = moving_365_day_low;
    this->m_moving_365_day_low_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_365_day_low_Set() const{
    return m_moving_365_day_low_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_365_day_low_Valid() const{
    return m_moving_365_day_low_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving365DayOpen() const {
    return moving_365_day_open;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving365DayOpen(const qint32 &moving_365_day_open) {
    this->moving_365_day_open = moving_365_day_open;
    this->m_moving_365_day_open_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_365_day_open_Set() const{
    return m_moving_365_day_open_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_365_day_open_Valid() const{
    return m_moving_365_day_open_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving365DayQuoteVolume() const {
    return moving_365_day_quote_volume;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving365DayQuoteVolume(const qint32 &moving_365_day_quote_volume) {
    this->moving_365_day_quote_volume = moving_365_day_quote_volume;
    this->m_moving_365_day_quote_volume_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_365_day_quote_volume_Set() const{
    return m_moving_365_day_quote_volume_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_365_day_quote_volume_Valid() const{
    return m_moving_365_day_quote_volume_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving365DayQuoteVolumeBuy() const {
    return moving_365_day_quote_volume_buy;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving365DayQuoteVolumeBuy(const qint32 &moving_365_day_quote_volume_buy) {
    this->moving_365_day_quote_volume_buy = moving_365_day_quote_volume_buy;
    this->m_moving_365_day_quote_volume_buy_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_365_day_quote_volume_buy_Set() const{
    return m_moving_365_day_quote_volume_buy_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_365_day_quote_volume_buy_Valid() const{
    return m_moving_365_day_quote_volume_buy_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving365DayQuoteVolumeSell() const {
    return moving_365_day_quote_volume_sell;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving365DayQuoteVolumeSell(const qint32 &moving_365_day_quote_volume_sell) {
    this->moving_365_day_quote_volume_sell = moving_365_day_quote_volume_sell;
    this->m_moving_365_day_quote_volume_sell_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_365_day_quote_volume_sell_Set() const{
    return m_moving_365_day_quote_volume_sell_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_365_day_quote_volume_sell_Valid() const{
    return m_moving_365_day_quote_volume_sell_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving365DayQuoteVolumeUnknown() const {
    return moving_365_day_quote_volume_unknown;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving365DayQuoteVolumeUnknown(const qint32 &moving_365_day_quote_volume_unknown) {
    this->moving_365_day_quote_volume_unknown = moving_365_day_quote_volume_unknown;
    this->m_moving_365_day_quote_volume_unknown_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_365_day_quote_volume_unknown_Set() const{
    return m_moving_365_day_quote_volume_unknown_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_365_day_quote_volume_unknown_Valid() const{
    return m_moving_365_day_quote_volume_unknown_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving365DayTotalTrades() const {
    return moving_365_day_total_trades;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving365DayTotalTrades(const qint32 &moving_365_day_total_trades) {
    this->moving_365_day_total_trades = moving_365_day_total_trades;
    this->m_moving_365_day_total_trades_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_365_day_total_trades_Set() const{
    return m_moving_365_day_total_trades_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_365_day_total_trades_Valid() const{
    return m_moving_365_day_total_trades_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving365DayTotalTradesBuy() const {
    return moving_365_day_total_trades_buy;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving365DayTotalTradesBuy(const qint32 &moving_365_day_total_trades_buy) {
    this->moving_365_day_total_trades_buy = moving_365_day_total_trades_buy;
    this->m_moving_365_day_total_trades_buy_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_365_day_total_trades_buy_Set() const{
    return m_moving_365_day_total_trades_buy_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_365_day_total_trades_buy_Valid() const{
    return m_moving_365_day_total_trades_buy_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving365DayTotalTradesSell() const {
    return moving_365_day_total_trades_sell;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving365DayTotalTradesSell(const qint32 &moving_365_day_total_trades_sell) {
    this->moving_365_day_total_trades_sell = moving_365_day_total_trades_sell;
    this->m_moving_365_day_total_trades_sell_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_365_day_total_trades_sell_Set() const{
    return m_moving_365_day_total_trades_sell_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_365_day_total_trades_sell_Valid() const{
    return m_moving_365_day_total_trades_sell_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving365DayTotalTradesUnknown() const {
    return moving_365_day_total_trades_unknown;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving365DayTotalTradesUnknown(const qint32 &moving_365_day_total_trades_unknown) {
    this->moving_365_day_total_trades_unknown = moving_365_day_total_trades_unknown;
    this->m_moving_365_day_total_trades_unknown_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_365_day_total_trades_unknown_Set() const{
    return m_moving_365_day_total_trades_unknown_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_365_day_total_trades_unknown_Valid() const{
    return m_moving_365_day_total_trades_unknown_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving365DayVolume() const {
    return moving_365_day_volume;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving365DayVolume(const qint32 &moving_365_day_volume) {
    this->moving_365_day_volume = moving_365_day_volume;
    this->m_moving_365_day_volume_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_365_day_volume_Set() const{
    return m_moving_365_day_volume_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_365_day_volume_Valid() const{
    return m_moving_365_day_volume_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving365DayVolumeBuy() const {
    return moving_365_day_volume_buy;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving365DayVolumeBuy(const qint32 &moving_365_day_volume_buy) {
    this->moving_365_day_volume_buy = moving_365_day_volume_buy;
    this->m_moving_365_day_volume_buy_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_365_day_volume_buy_Set() const{
    return m_moving_365_day_volume_buy_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_365_day_volume_buy_Valid() const{
    return m_moving_365_day_volume_buy_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving365DayVolumeSell() const {
    return moving_365_day_volume_sell;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving365DayVolumeSell(const qint32 &moving_365_day_volume_sell) {
    this->moving_365_day_volume_sell = moving_365_day_volume_sell;
    this->m_moving_365_day_volume_sell_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_365_day_volume_sell_Set() const{
    return m_moving_365_day_volume_sell_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_365_day_volume_sell_Valid() const{
    return m_moving_365_day_volume_sell_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving365DayVolumeUnknown() const {
    return moving_365_day_volume_unknown;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving365DayVolumeUnknown(const qint32 &moving_365_day_volume_unknown) {
    this->moving_365_day_volume_unknown = moving_365_day_volume_unknown;
    this->m_moving_365_day_volume_unknown_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_365_day_volume_unknown_Set() const{
    return m_moving_365_day_volume_unknown_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_365_day_volume_unknown_Valid() const{
    return m_moving_365_day_volume_unknown_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving7DayHigh() const {
    return moving_7_day_high;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving7DayHigh(const qint32 &moving_7_day_high) {
    this->moving_7_day_high = moving_7_day_high;
    this->m_moving_7_day_high_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_7_day_high_Set() const{
    return m_moving_7_day_high_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_7_day_high_Valid() const{
    return m_moving_7_day_high_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving7DayLow() const {
    return moving_7_day_low;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving7DayLow(const qint32 &moving_7_day_low) {
    this->moving_7_day_low = moving_7_day_low;
    this->m_moving_7_day_low_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_7_day_low_Set() const{
    return m_moving_7_day_low_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_7_day_low_Valid() const{
    return m_moving_7_day_low_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving7DayOpen() const {
    return moving_7_day_open;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving7DayOpen(const qint32 &moving_7_day_open) {
    this->moving_7_day_open = moving_7_day_open;
    this->m_moving_7_day_open_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_7_day_open_Set() const{
    return m_moving_7_day_open_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_7_day_open_Valid() const{
    return m_moving_7_day_open_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving7DayQuoteVolume() const {
    return moving_7_day_quote_volume;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving7DayQuoteVolume(const qint32 &moving_7_day_quote_volume) {
    this->moving_7_day_quote_volume = moving_7_day_quote_volume;
    this->m_moving_7_day_quote_volume_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_7_day_quote_volume_Set() const{
    return m_moving_7_day_quote_volume_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_7_day_quote_volume_Valid() const{
    return m_moving_7_day_quote_volume_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving7DayQuoteVolumeBuy() const {
    return moving_7_day_quote_volume_buy;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving7DayQuoteVolumeBuy(const qint32 &moving_7_day_quote_volume_buy) {
    this->moving_7_day_quote_volume_buy = moving_7_day_quote_volume_buy;
    this->m_moving_7_day_quote_volume_buy_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_7_day_quote_volume_buy_Set() const{
    return m_moving_7_day_quote_volume_buy_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_7_day_quote_volume_buy_Valid() const{
    return m_moving_7_day_quote_volume_buy_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving7DayQuoteVolumeSell() const {
    return moving_7_day_quote_volume_sell;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving7DayQuoteVolumeSell(const qint32 &moving_7_day_quote_volume_sell) {
    this->moving_7_day_quote_volume_sell = moving_7_day_quote_volume_sell;
    this->m_moving_7_day_quote_volume_sell_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_7_day_quote_volume_sell_Set() const{
    return m_moving_7_day_quote_volume_sell_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_7_day_quote_volume_sell_Valid() const{
    return m_moving_7_day_quote_volume_sell_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving7DayQuoteVolumeUnknown() const {
    return moving_7_day_quote_volume_unknown;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving7DayQuoteVolumeUnknown(const qint32 &moving_7_day_quote_volume_unknown) {
    this->moving_7_day_quote_volume_unknown = moving_7_day_quote_volume_unknown;
    this->m_moving_7_day_quote_volume_unknown_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_7_day_quote_volume_unknown_Set() const{
    return m_moving_7_day_quote_volume_unknown_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_7_day_quote_volume_unknown_Valid() const{
    return m_moving_7_day_quote_volume_unknown_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving7DayTotalTrades() const {
    return moving_7_day_total_trades;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving7DayTotalTrades(const qint32 &moving_7_day_total_trades) {
    this->moving_7_day_total_trades = moving_7_day_total_trades;
    this->m_moving_7_day_total_trades_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_7_day_total_trades_Set() const{
    return m_moving_7_day_total_trades_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_7_day_total_trades_Valid() const{
    return m_moving_7_day_total_trades_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving7DayTotalTradesBuy() const {
    return moving_7_day_total_trades_buy;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving7DayTotalTradesBuy(const qint32 &moving_7_day_total_trades_buy) {
    this->moving_7_day_total_trades_buy = moving_7_day_total_trades_buy;
    this->m_moving_7_day_total_trades_buy_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_7_day_total_trades_buy_Set() const{
    return m_moving_7_day_total_trades_buy_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_7_day_total_trades_buy_Valid() const{
    return m_moving_7_day_total_trades_buy_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving7DayTotalTradesSell() const {
    return moving_7_day_total_trades_sell;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving7DayTotalTradesSell(const qint32 &moving_7_day_total_trades_sell) {
    this->moving_7_day_total_trades_sell = moving_7_day_total_trades_sell;
    this->m_moving_7_day_total_trades_sell_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_7_day_total_trades_sell_Set() const{
    return m_moving_7_day_total_trades_sell_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_7_day_total_trades_sell_Valid() const{
    return m_moving_7_day_total_trades_sell_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving7DayTotalTradesUnknown() const {
    return moving_7_day_total_trades_unknown;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving7DayTotalTradesUnknown(const qint32 &moving_7_day_total_trades_unknown) {
    this->moving_7_day_total_trades_unknown = moving_7_day_total_trades_unknown;
    this->m_moving_7_day_total_trades_unknown_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_7_day_total_trades_unknown_Set() const{
    return m_moving_7_day_total_trades_unknown_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_7_day_total_trades_unknown_Valid() const{
    return m_moving_7_day_total_trades_unknown_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving7DayVolume() const {
    return moving_7_day_volume;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving7DayVolume(const qint32 &moving_7_day_volume) {
    this->moving_7_day_volume = moving_7_day_volume;
    this->m_moving_7_day_volume_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_7_day_volume_Set() const{
    return m_moving_7_day_volume_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_7_day_volume_Valid() const{
    return m_moving_7_day_volume_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving7DayVolumeBuy() const {
    return moving_7_day_volume_buy;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving7DayVolumeBuy(const qint32 &moving_7_day_volume_buy) {
    this->moving_7_day_volume_buy = moving_7_day_volume_buy;
    this->m_moving_7_day_volume_buy_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_7_day_volume_buy_Set() const{
    return m_moving_7_day_volume_buy_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_7_day_volume_buy_Valid() const{
    return m_moving_7_day_volume_buy_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving7DayVolumeSell() const {
    return moving_7_day_volume_sell;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving7DayVolumeSell(const qint32 &moving_7_day_volume_sell) {
    this->moving_7_day_volume_sell = moving_7_day_volume_sell;
    this->m_moving_7_day_volume_sell_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_7_day_volume_sell_Set() const{
    return m_moving_7_day_volume_sell_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_7_day_volume_sell_Valid() const{
    return m_moving_7_day_volume_sell_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving7DayVolumeUnknown() const {
    return moving_7_day_volume_unknown;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving7DayVolumeUnknown(const qint32 &moving_7_day_volume_unknown) {
    this->moving_7_day_volume_unknown = moving_7_day_volume_unknown;
    this->m_moving_7_day_volume_unknown_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_7_day_volume_unknown_Set() const{
    return m_moving_7_day_volume_unknown_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_7_day_volume_unknown_Valid() const{
    return m_moving_7_day_volume_unknown_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving90DayHigh() const {
    return moving_90_day_high;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving90DayHigh(const qint32 &moving_90_day_high) {
    this->moving_90_day_high = moving_90_day_high;
    this->m_moving_90_day_high_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_90_day_high_Set() const{
    return m_moving_90_day_high_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_90_day_high_Valid() const{
    return m_moving_90_day_high_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving90DayLow() const {
    return moving_90_day_low;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving90DayLow(const qint32 &moving_90_day_low) {
    this->moving_90_day_low = moving_90_day_low;
    this->m_moving_90_day_low_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_90_day_low_Set() const{
    return m_moving_90_day_low_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_90_day_low_Valid() const{
    return m_moving_90_day_low_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving90DayOpen() const {
    return moving_90_day_open;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving90DayOpen(const qint32 &moving_90_day_open) {
    this->moving_90_day_open = moving_90_day_open;
    this->m_moving_90_day_open_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_90_day_open_Set() const{
    return m_moving_90_day_open_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_90_day_open_Valid() const{
    return m_moving_90_day_open_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving90DayQuoteVolume() const {
    return moving_90_day_quote_volume;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving90DayQuoteVolume(const qint32 &moving_90_day_quote_volume) {
    this->moving_90_day_quote_volume = moving_90_day_quote_volume;
    this->m_moving_90_day_quote_volume_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_90_day_quote_volume_Set() const{
    return m_moving_90_day_quote_volume_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_90_day_quote_volume_Valid() const{
    return m_moving_90_day_quote_volume_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving90DayQuoteVolumeBuy() const {
    return moving_90_day_quote_volume_buy;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving90DayQuoteVolumeBuy(const qint32 &moving_90_day_quote_volume_buy) {
    this->moving_90_day_quote_volume_buy = moving_90_day_quote_volume_buy;
    this->m_moving_90_day_quote_volume_buy_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_90_day_quote_volume_buy_Set() const{
    return m_moving_90_day_quote_volume_buy_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_90_day_quote_volume_buy_Valid() const{
    return m_moving_90_day_quote_volume_buy_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving90DayQuoteVolumeSell() const {
    return moving_90_day_quote_volume_sell;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving90DayQuoteVolumeSell(const qint32 &moving_90_day_quote_volume_sell) {
    this->moving_90_day_quote_volume_sell = moving_90_day_quote_volume_sell;
    this->m_moving_90_day_quote_volume_sell_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_90_day_quote_volume_sell_Set() const{
    return m_moving_90_day_quote_volume_sell_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_90_day_quote_volume_sell_Valid() const{
    return m_moving_90_day_quote_volume_sell_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving90DayQuoteVolumeUnknown() const {
    return moving_90_day_quote_volume_unknown;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving90DayQuoteVolumeUnknown(const qint32 &moving_90_day_quote_volume_unknown) {
    this->moving_90_day_quote_volume_unknown = moving_90_day_quote_volume_unknown;
    this->m_moving_90_day_quote_volume_unknown_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_90_day_quote_volume_unknown_Set() const{
    return m_moving_90_day_quote_volume_unknown_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_90_day_quote_volume_unknown_Valid() const{
    return m_moving_90_day_quote_volume_unknown_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving90DayTotalTrades() const {
    return moving_90_day_total_trades;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving90DayTotalTrades(const qint32 &moving_90_day_total_trades) {
    this->moving_90_day_total_trades = moving_90_day_total_trades;
    this->m_moving_90_day_total_trades_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_90_day_total_trades_Set() const{
    return m_moving_90_day_total_trades_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_90_day_total_trades_Valid() const{
    return m_moving_90_day_total_trades_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving90DayTotalTradesBuy() const {
    return moving_90_day_total_trades_buy;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving90DayTotalTradesBuy(const qint32 &moving_90_day_total_trades_buy) {
    this->moving_90_day_total_trades_buy = moving_90_day_total_trades_buy;
    this->m_moving_90_day_total_trades_buy_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_90_day_total_trades_buy_Set() const{
    return m_moving_90_day_total_trades_buy_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_90_day_total_trades_buy_Valid() const{
    return m_moving_90_day_total_trades_buy_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving90DayTotalTradesSell() const {
    return moving_90_day_total_trades_sell;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving90DayTotalTradesSell(const qint32 &moving_90_day_total_trades_sell) {
    this->moving_90_day_total_trades_sell = moving_90_day_total_trades_sell;
    this->m_moving_90_day_total_trades_sell_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_90_day_total_trades_sell_Set() const{
    return m_moving_90_day_total_trades_sell_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_90_day_total_trades_sell_Valid() const{
    return m_moving_90_day_total_trades_sell_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving90DayTotalTradesUnknown() const {
    return moving_90_day_total_trades_unknown;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving90DayTotalTradesUnknown(const qint32 &moving_90_day_total_trades_unknown) {
    this->moving_90_day_total_trades_unknown = moving_90_day_total_trades_unknown;
    this->m_moving_90_day_total_trades_unknown_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_90_day_total_trades_unknown_Set() const{
    return m_moving_90_day_total_trades_unknown_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_90_day_total_trades_unknown_Valid() const{
    return m_moving_90_day_total_trades_unknown_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving90DayVolume() const {
    return moving_90_day_volume;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving90DayVolume(const qint32 &moving_90_day_volume) {
    this->moving_90_day_volume = moving_90_day_volume;
    this->m_moving_90_day_volume_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_90_day_volume_Set() const{
    return m_moving_90_day_volume_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_90_day_volume_Valid() const{
    return m_moving_90_day_volume_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving90DayVolumeBuy() const {
    return moving_90_day_volume_buy;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving90DayVolumeBuy(const qint32 &moving_90_day_volume_buy) {
    this->moving_90_day_volume_buy = moving_90_day_volume_buy;
    this->m_moving_90_day_volume_buy_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_90_day_volume_buy_Set() const{
    return m_moving_90_day_volume_buy_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_90_day_volume_buy_Valid() const{
    return m_moving_90_day_volume_buy_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving90DayVolumeSell() const {
    return moving_90_day_volume_sell;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving90DayVolumeSell(const qint32 &moving_90_day_volume_sell) {
    this->moving_90_day_volume_sell = moving_90_day_volume_sell;
    this->m_moving_90_day_volume_sell_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_90_day_volume_sell_Set() const{
    return m_moving_90_day_volume_sell_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_90_day_volume_sell_Valid() const{
    return m_moving_90_day_volume_sell_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getMoving90DayVolumeUnknown() const {
    return moving_90_day_volume_unknown;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setMoving90DayVolumeUnknown(const qint32 &moving_90_day_volume_unknown) {
    this->moving_90_day_volume_unknown = moving_90_day_volume_unknown;
    this->m_moving_90_day_volume_unknown_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_90_day_volume_unknown_Set() const{
    return m_moving_90_day_volume_unknown_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_moving_90_day_volume_unknown_Valid() const{
    return m_moving_90_day_volume_unknown_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getPrice() const {
    return price;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setPrice(const qint32 &price) {
    this->price = price;
    this->m_price_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_price_Set() const{
    return m_price_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_price_Valid() const{
    return m_price_isValid;
}

QString OAISPOT_INSTRUMENT_MARKET_DATA::getPriceFlag() const {
    return price_flag;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setPriceFlag(const QString &price_flag) {
    this->price_flag = price_flag;
    this->m_price_flag_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_price_flag_Set() const{
    return m_price_flag_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_price_flag_Valid() const{
    return m_price_flag_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getPriceLastUpdateTs() const {
    return price_last_update_ts;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setPriceLastUpdateTs(const qint32 &price_last_update_ts) {
    this->price_last_update_ts = price_last_update_ts;
    this->m_price_last_update_ts_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_price_last_update_ts_Set() const{
    return m_price_last_update_ts_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_price_last_update_ts_Valid() const{
    return m_price_last_update_ts_isValid;
}

QString OAISPOT_INSTRUMENT_MARKET_DATA::getQuote() const {
    return quote;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setQuote(const QString &quote) {
    this->quote = quote;
    this->m_quote_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_quote_Set() const{
    return m_quote_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_quote_Valid() const{
    return m_quote_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getTopAskLastUpdateTs() const {
    return top_ask_last_update_ts;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setTopAskLastUpdateTs(const qint32 &top_ask_last_update_ts) {
    this->top_ask_last_update_ts = top_ask_last_update_ts;
    this->m_top_ask_last_update_ts_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_top_ask_last_update_ts_Set() const{
    return m_top_ask_last_update_ts_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_top_ask_last_update_ts_Valid() const{
    return m_top_ask_last_update_ts_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getTopAskPrice() const {
    return top_ask_price;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setTopAskPrice(const qint32 &top_ask_price) {
    this->top_ask_price = top_ask_price;
    this->m_top_ask_price_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_top_ask_price_Set() const{
    return m_top_ask_price_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_top_ask_price_Valid() const{
    return m_top_ask_price_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getTopAskQuantity() const {
    return top_ask_quantity;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setTopAskQuantity(const qint32 &top_ask_quantity) {
    this->top_ask_quantity = top_ask_quantity;
    this->m_top_ask_quantity_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_top_ask_quantity_Set() const{
    return m_top_ask_quantity_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_top_ask_quantity_Valid() const{
    return m_top_ask_quantity_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getTopBidLastUpdateTs() const {
    return top_bid_last_update_ts;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setTopBidLastUpdateTs(const qint32 &top_bid_last_update_ts) {
    this->top_bid_last_update_ts = top_bid_last_update_ts;
    this->m_top_bid_last_update_ts_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_top_bid_last_update_ts_Set() const{
    return m_top_bid_last_update_ts_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_top_bid_last_update_ts_Valid() const{
    return m_top_bid_last_update_ts_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getTopBidPrice() const {
    return top_bid_price;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setTopBidPrice(const qint32 &top_bid_price) {
    this->top_bid_price = top_bid_price;
    this->m_top_bid_price_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_top_bid_price_Set() const{
    return m_top_bid_price_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_top_bid_price_Valid() const{
    return m_top_bid_price_isValid;
}

qint32 OAISPOT_INSTRUMENT_MARKET_DATA::getTopBidQuantity() const {
    return top_bid_quantity;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setTopBidQuantity(const qint32 &top_bid_quantity) {
    this->top_bid_quantity = top_bid_quantity;
    this->m_top_bid_quantity_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_top_bid_quantity_Set() const{
    return m_top_bid_quantity_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_top_bid_quantity_Valid() const{
    return m_top_bid_quantity_isValid;
}

QString OAISPOT_INSTRUMENT_MARKET_DATA::getType() const {
    return type;
}
void OAISPOT_INSTRUMENT_MARKET_DATA::setType(const QString &type) {
    this->type = type;
    this->m_type_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_type_Set() const{
    return m_type_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::is_type_Valid() const{
    return m_type_isValid;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ccseq_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_day_high_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_day_low_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_day_open_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_day_quote_volume_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_day_quote_volume_buy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_day_quote_volume_sell_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_day_quote_volume_unknown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_day_total_trades_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_day_total_trades_buy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_day_total_trades_sell_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_day_total_trades_unknown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_day_volume_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_day_volume_buy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_day_volume_sell_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_day_volume_unknown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_hour_high_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_hour_low_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_hour_open_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_hour_quote_volume_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_hour_quote_volume_buy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_hour_quote_volume_sell_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_hour_quote_volume_unknown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_hour_total_trades_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_hour_total_trades_buy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_hour_total_trades_sell_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_hour_total_trades_unknown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_hour_volume_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_hour_volume_buy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_hour_volume_sell_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_hour_volume_unknown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_month_high_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_month_low_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_month_open_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_month_quote_volume_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_month_quote_volume_buy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_month_quote_volume_sell_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_month_quote_volume_unknown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_month_total_trades_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_month_total_trades_buy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_month_total_trades_sell_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_month_total_trades_unknown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_month_volume_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_month_volume_buy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_month_volume_sell_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_month_volume_unknown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_week_high_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_week_low_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_week_open_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_week_quote_volume_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_week_quote_volume_buy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_week_quote_volume_sell_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_week_quote_volume_unknown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_week_total_trades_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_week_total_trades_buy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_week_total_trades_sell_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_week_total_trades_unknown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_week_volume_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_week_volume_buy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_week_volume_sell_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_week_volume_unknown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_year_high_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_year_low_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_year_open_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_year_quote_volume_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_year_quote_volume_buy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_year_quote_volume_sell_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_year_quote_volume_unknown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_year_total_trades_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_year_total_trades_buy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_year_total_trades_sell_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_year_total_trades_unknown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_year_volume_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_year_volume_buy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_year_volume_sell_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_year_volume_unknown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instrument_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_processed_trade_ccseq_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_processed_trade_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_processed_trade_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_processed_trade_quote_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_processed_trade_side_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_processed_trade_ts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_trade_ccseq_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_trade_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_trade_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_trade_quote_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_trade_side_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifetime_first_trade_ts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifetime_high_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifetime_high_ts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifetime_low_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifetime_low_ts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifetime_open_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifetime_quote_volume_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifetime_quote_volume_buy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifetime_quote_volume_sell_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifetime_quote_volume_unknown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifetime_total_trades_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifetime_total_trades_buy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifetime_total_trades_sell_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifetime_total_trades_unknown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifetime_volume_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifetime_volume_buy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifetime_volume_sell_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifetime_volume_unknown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mapped_instrument_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_market_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_180_day_high_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_180_day_low_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_180_day_open_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_180_day_quote_volume_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_180_day_quote_volume_buy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_180_day_quote_volume_sell_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_180_day_quote_volume_unknown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_180_day_total_trades_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_180_day_total_trades_buy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_180_day_total_trades_sell_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_180_day_total_trades_unknown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_180_day_volume_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_180_day_volume_buy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_180_day_volume_sell_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_180_day_volume_unknown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_24_hour_high_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_24_hour_low_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_24_hour_open_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_24_hour_quote_volume_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_24_hour_quote_volume_buy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_24_hour_quote_volume_sell_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_24_hour_quote_volume_unknown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_24_hour_total_trades_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_24_hour_total_trades_buy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_24_hour_total_trades_sell_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_24_hour_total_trades_unknown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_24_hour_volume_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_24_hour_volume_buy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_24_hour_volume_sell_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_24_hour_volume_unknown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_30_day_high_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_30_day_low_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_30_day_open_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_30_day_quote_volume_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_30_day_quote_volume_buy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_30_day_quote_volume_sell_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_30_day_quote_volume_unknown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_30_day_total_trades_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_30_day_total_trades_buy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_30_day_total_trades_sell_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_30_day_total_trades_unknown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_30_day_volume_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_30_day_volume_buy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_30_day_volume_sell_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_30_day_volume_unknown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_365_day_high_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_365_day_low_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_365_day_open_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_365_day_quote_volume_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_365_day_quote_volume_buy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_365_day_quote_volume_sell_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_365_day_quote_volume_unknown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_365_day_total_trades_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_365_day_total_trades_buy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_365_day_total_trades_sell_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_365_day_total_trades_unknown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_365_day_volume_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_365_day_volume_buy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_365_day_volume_sell_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_365_day_volume_unknown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_7_day_high_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_7_day_low_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_7_day_open_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_7_day_quote_volume_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_7_day_quote_volume_buy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_7_day_quote_volume_sell_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_7_day_quote_volume_unknown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_7_day_total_trades_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_7_day_total_trades_buy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_7_day_total_trades_sell_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_7_day_total_trades_unknown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_7_day_volume_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_7_day_volume_buy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_7_day_volume_sell_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_7_day_volume_unknown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_90_day_high_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_90_day_low_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_90_day_open_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_90_day_quote_volume_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_90_day_quote_volume_buy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_90_day_quote_volume_sell_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_90_day_quote_volume_unknown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_90_day_total_trades_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_90_day_total_trades_buy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_90_day_total_trades_sell_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_90_day_total_trades_unknown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_90_day_volume_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_90_day_volume_buy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_90_day_volume_sell_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_90_day_volume_unknown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_last_update_ts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quote_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_ask_last_update_ts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_ask_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_ask_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_bid_last_update_ts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_bid_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_bid_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
