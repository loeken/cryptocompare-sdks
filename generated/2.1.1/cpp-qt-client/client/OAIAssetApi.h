/**
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 * CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: data@cryptocompare.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAssetApi_H
#define OAI_OAIAssetApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAIGENERIC_RESPONSE.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAssetApi : public QObject {
    Q_OBJECT

public:
    OAIAssetApi(const int timeOut = 0);
    ~OAIAssetApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  address QString [required]
    * @param[in]  chain_symbol QString [required]
    * @param[in]  groups QString [optional]
    */
    void assetV1DataByAddress(const QString &address, const QString &chain_symbol, const ::OpenAPI::OptionalParam<QString> &groups = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  asset_id qint32 [required]
    * @param[in]  groups QString [optional]
    */
    void assetV1DataById(const qint32 &asset_id, const ::OpenAPI::OptionalParam<QString> &groups = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  asset_symbol QString [required]
    * @param[in]  groups QString [optional]
    */
    void assetV1DataBySymbol(const QString &asset_symbol, const ::OpenAPI::OptionalParam<QString> &groups = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  asset_type QString [optional]
    * @param[in]  sort_by QString [optional]
    * @param[in]  sort_direction QString [optional]
    * @param[in]  groups QString [optional]
    */
    void assetV1TopList(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &asset_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &groups = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void assetV1DataByAddressCallback(OAIHttpRequestWorker *worker);
    void assetV1DataByIdCallback(OAIHttpRequestWorker *worker);
    void assetV1DataBySymbolCallback(OAIHttpRequestWorker *worker);
    void assetV1TopListCallback(OAIHttpRequestWorker *worker);

signals:

    void assetV1DataByAddressSignal(OAIGENERIC_RESPONSE summary);
    void assetV1DataByIdSignal(OAIGENERIC_RESPONSE summary);
    void assetV1DataBySymbolSignal(OAIGENERIC_RESPONSE summary);
    void assetV1TopListSignal(OAIGENERIC_RESPONSE summary);

    void assetV1DataByAddressSignalFull(OAIHttpRequestWorker *worker, OAIGENERIC_RESPONSE summary);
    void assetV1DataByIdSignalFull(OAIHttpRequestWorker *worker, OAIGENERIC_RESPONSE summary);
    void assetV1DataBySymbolSignalFull(OAIHttpRequestWorker *worker, OAIGENERIC_RESPONSE summary);
    void assetV1TopListSignalFull(OAIHttpRequestWorker *worker, OAIGENERIC_RESPONSE summary);

    void assetV1DataByAddressSignalE(OAIGENERIC_RESPONSE summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assetV1DataByIdSignalE(OAIGENERIC_RESPONSE summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assetV1DataBySymbolSignalE(OAIGENERIC_RESPONSE summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assetV1TopListSignalE(OAIGENERIC_RESPONSE summary, QNetworkReply::NetworkError error_type, QString error_str);

    void assetV1DataByAddressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetV1DataByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetV1DataBySymbolSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetV1TopListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public slots:
    void tokenAvailable();
    
};

} // namespace OpenAPI
#endif
