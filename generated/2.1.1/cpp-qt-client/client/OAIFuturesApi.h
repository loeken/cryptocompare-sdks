/**
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 * CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: data@cryptocompare.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFuturesApi_H
#define OAI_OAIFuturesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAIGENERIC_RESPONSE.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFuturesApi : public QObject {
    Q_OBJECT

public:
    OAIFuturesApi(const int timeOut = 0);
    ~OAIFuturesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  market QString [required]
    * @param[in]  instrument QString [required]
    * @param[in]  groups QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  to_ts qint32 [optional]
    * @param[in]  aggregate qint32 [optional]
    * @param[in]  fill bool [optional]
    * @param[in]  mapping_priority QString [optional]
    * @param[in]  response_format QString [optional]
    */
    void futuresV1HistoricalDays(const QString &market, const QString &instrument, const ::OpenAPI::OptionalParam<QList<QString>> &groups = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &to_ts = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &aggregate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &fill = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &mapping_priority = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  market QString [required]
    * @param[in]  instrument QString [required]
    * @param[in]  groups QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  to_ts qint32 [optional]
    * @param[in]  aggregate qint32 [optional]
    * @param[in]  fill bool [optional]
    * @param[in]  mapping_priority QString [optional]
    * @param[in]  response_format QString [optional]
    */
    void futuresV1HistoricalFundingRateDays(const QString &market, const QString &instrument, const ::OpenAPI::OptionalParam<QList<QString>> &groups = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &to_ts = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &aggregate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &fill = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &mapping_priority = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  market QString [required]
    * @param[in]  instrument QString [required]
    * @param[in]  groups QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  to_ts qint32 [optional]
    * @param[in]  aggregate qint32 [optional]
    * @param[in]  fill bool [optional]
    * @param[in]  mapping_priority QString [optional]
    * @param[in]  response_format QString [optional]
    */
    void futuresV1HistoricalFundingRateHours(const QString &market, const QString &instrument, const ::OpenAPI::OptionalParam<QList<QString>> &groups = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &to_ts = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &aggregate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &fill = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &mapping_priority = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  market QString [required]
    * @param[in]  instrument QString [required]
    * @param[in]  after_ts qint32 [optional]
    * @param[in]  last_ccseq qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  mapping_priority QString [optional]
    * @param[in]  response_format QString [optional]
    * @param[in]  return_404_on_empty_response bool [optional]
    */
    void futuresV1HistoricalFundingRateMessages(const QString &market, const QString &instrument, const ::OpenAPI::OptionalParam<qint32> &after_ts = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &last_ccseq = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &mapping_priority = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_404_on_empty_response = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  market QString [required]
    * @param[in]  instrument QString [required]
    * @param[in]  hour_ts qint32 [optional]
    * @param[in]  mapping_priority QString [optional]
    * @param[in]  response_format QString [optional]
    * @param[in]  return_404_on_empty_response bool [optional]
    */
    void futuresV1HistoricalFundingRateMessagesHour(const QString &market, const QString &instrument, const ::OpenAPI::OptionalParam<qint32> &hour_ts = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &mapping_priority = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_404_on_empty_response = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  market QString [required]
    * @param[in]  instrument QString [required]
    * @param[in]  groups QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  to_ts qint32 [optional]
    * @param[in]  aggregate qint32 [optional]
    * @param[in]  fill bool [optional]
    * @param[in]  mapping_priority QString [optional]
    * @param[in]  response_format QString [optional]
    */
    void futuresV1HistoricalFundingRateMinutes(const QString &market, const QString &instrument, const ::OpenAPI::OptionalParam<QList<QString>> &groups = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &to_ts = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &aggregate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &fill = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &mapping_priority = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  market QString [required]
    * @param[in]  instrument QString [required]
    * @param[in]  groups QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  to_ts qint32 [optional]
    * @param[in]  aggregate qint32 [optional]
    * @param[in]  fill bool [optional]
    * @param[in]  mapping_priority QString [optional]
    * @param[in]  response_format QString [optional]
    */
    void futuresV1HistoricalHours(const QString &market, const QString &instrument, const ::OpenAPI::OptionalParam<QList<QString>> &groups = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &to_ts = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &aggregate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &fill = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &mapping_priority = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  market QString [required]
    * @param[in]  instrument QString [required]
    * @param[in]  groups QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  to_ts qint32 [optional]
    * @param[in]  aggregate qint32 [optional]
    * @param[in]  fill bool [optional]
    * @param[in]  mapping_priority QString [optional]
    * @param[in]  response_format QString [optional]
    */
    void futuresV1HistoricalMinutes(const QString &market, const QString &instrument, const ::OpenAPI::OptionalParam<QList<QString>> &groups = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &to_ts = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &aggregate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &fill = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &mapping_priority = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  market QString [required]
    * @param[in]  instrument QString [required]
    * @param[in]  groups QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  to_ts qint32 [optional]
    * @param[in]  aggregate qint32 [optional]
    * @param[in]  fill bool [optional]
    * @param[in]  mapping_priority QString [optional]
    * @param[in]  response_format QString [optional]
    */
    void futuresV1HistoricalOpenInterestDays(const QString &market, const QString &instrument, const ::OpenAPI::OptionalParam<QList<QString>> &groups = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &to_ts = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &aggregate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &fill = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &mapping_priority = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  market QString [required]
    * @param[in]  instrument QString [required]
    * @param[in]  groups QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  to_ts qint32 [optional]
    * @param[in]  aggregate qint32 [optional]
    * @param[in]  fill bool [optional]
    * @param[in]  mapping_priority QString [optional]
    * @param[in]  response_format QString [optional]
    */
    void futuresV1HistoricalOpenInterestHours(const QString &market, const QString &instrument, const ::OpenAPI::OptionalParam<QList<QString>> &groups = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &to_ts = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &aggregate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &fill = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &mapping_priority = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  market QString [required]
    * @param[in]  instrument QString [required]
    * @param[in]  after_ts qint32 [optional]
    * @param[in]  last_ccseq qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  mapping_priority QString [optional]
    * @param[in]  response_format QString [optional]
    * @param[in]  return_404_on_empty_response bool [optional]
    */
    void futuresV1HistoricalOpenInterestMessages(const QString &market, const QString &instrument, const ::OpenAPI::OptionalParam<qint32> &after_ts = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &last_ccseq = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &mapping_priority = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_404_on_empty_response = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  market QString [required]
    * @param[in]  instrument QString [required]
    * @param[in]  hour_ts qint32 [optional]
    * @param[in]  mapping_priority QString [optional]
    * @param[in]  response_format QString [optional]
    * @param[in]  return_404_on_empty_response bool [optional]
    */
    void futuresV1HistoricalOpenInterestMessagesHour(const QString &market, const QString &instrument, const ::OpenAPI::OptionalParam<qint32> &hour_ts = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &mapping_priority = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_404_on_empty_response = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  market QString [required]
    * @param[in]  instrument QString [required]
    * @param[in]  groups QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  to_ts qint32 [optional]
    * @param[in]  aggregate qint32 [optional]
    * @param[in]  fill bool [optional]
    * @param[in]  mapping_priority QString [optional]
    * @param[in]  response_format QString [optional]
    */
    void futuresV1HistoricalOpenInterestMinutes(const QString &market, const QString &instrument, const ::OpenAPI::OptionalParam<QList<QString>> &groups = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &to_ts = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &aggregate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &fill = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &mapping_priority = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  market QString [required]
    * @param[in]  instrument QString [required]
    * @param[in]  after_ts qint32 [optional]
    * @param[in]  last_ccseq qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  mapping_priority QString [optional]
    * @param[in]  response_format QString [optional]
    * @param[in]  return_404_on_empty_response bool [optional]
    */
    void futuresV1HistoricalTrades(const QString &market, const QString &instrument, const ::OpenAPI::OptionalParam<qint32> &after_ts = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &last_ccseq = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &mapping_priority = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_404_on_empty_response = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  market QString [required]
    * @param[in]  instrument QString [required]
    * @param[in]  hour_ts qint32 [optional]
    * @param[in]  mapping_priority QString [optional]
    * @param[in]  response_format QString [optional]
    * @param[in]  return_404_on_empty_response bool [optional]
    */
    void futuresV1HistoricalTradesHour(const QString &market, const QString &instrument, const ::OpenAPI::OptionalParam<qint32> &hour_ts = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &mapping_priority = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_404_on_empty_response = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  market QString [required]
    * @param[in]  instruments QList<QString> [required]
    * @param[in]  groups QList<QString> [optional]
    * @param[in]  mapping_priority QString [optional]
    */
    void futuresV1LatestFundingRateTick(const QString &market, const QList<QString> &instruments, const ::OpenAPI::OptionalParam<QList<QString>> &groups = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &mapping_priority = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  market QString [required]
    * @param[in]  instruments QList<QString> [required]
    * @param[in]  groups QList<QString> [optional]
    * @param[in]  mapping_priority QString [optional]
    */
    void futuresV1LatestInstrumentMetadata(const QString &market, const QList<QString> &instruments, const ::OpenAPI::OptionalParam<QList<QString>> &groups = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &mapping_priority = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  market QString [required]
    * @param[in]  instruments QList<QString> [required]
    * @param[in]  groups QList<QString> [optional]
    * @param[in]  mapping_priority QString [optional]
    */
    void futuresV1LatestOpenInterestTick(const QString &market, const QList<QString> &instruments, const ::OpenAPI::OptionalParam<QList<QString>> &groups = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &mapping_priority = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  market QString [required]
    * @param[in]  instruments QList<QString> [required]
    * @param[in]  groups QList<QString> [optional]
    * @param[in]  mapping_priority QString [optional]
    */
    void futuresV1LatestTick(const QString &market, const QList<QString> &instruments, const ::OpenAPI::OptionalParam<QList<QString>> &groups = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &mapping_priority = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  market QString [optional]
    */
    void futuresV1Markets(const ::OpenAPI::OptionalParam<QString> &market = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  market QString [optional]
    * @param[in]  instrument QString [optional]
    * @param[in]  instrument_status QList<QString> [optional]
    */
    void futuresV1MarketsInstruments(const ::OpenAPI::OptionalParam<QString> &market = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &instrument = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &instrument_status = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  market QString [optional]
    * @param[in]  instrument QString [optional]
    * @param[in]  instrument_status QList<QString> [optional]
    */
    void futuresV1MarketsInstrumentsUnmapped(const ::OpenAPI::OptionalParam<QString> &market = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &instrument = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &instrument_status = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  market QString [required]
    * @param[in]  instrument QString [required]
    * @param[in]  groups QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  to_ts qint32 [optional]
    * @param[in]  aggregate qint32 [optional]
    * @param[in]  fill bool [optional]
    * @param[in]  mapping_priority QString [optional]
    * @param[in]  response_format QString [optional]
    */
    void indexV1HistoricalDays(const QString &market, const QString &instrument, const ::OpenAPI::OptionalParam<QList<QString>> &groups = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &to_ts = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &aggregate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &fill = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &mapping_priority = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  market QString [required]
    * @param[in]  instrument QString [required]
    * @param[in]  groups QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  to_ts qint32 [optional]
    * @param[in]  aggregate qint32 [optional]
    * @param[in]  fill bool [optional]
    * @param[in]  mapping_priority QString [optional]
    * @param[in]  response_format QString [optional]
    */
    void indexV1HistoricalHours(const QString &market, const QString &instrument, const ::OpenAPI::OptionalParam<QList<QString>> &groups = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &to_ts = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &aggregate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &fill = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &mapping_priority = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  market QString [required]
    * @param[in]  instrument QString [required]
    * @param[in]  after_ts qint32 [optional]
    * @param[in]  last_ccseq qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  mapping_priority QString [optional]
    * @param[in]  response_format QString [optional]
    * @param[in]  return_404_on_empty_response bool [optional]
    */
    void indexV1HistoricalMessages(const QString &market, const QString &instrument, const ::OpenAPI::OptionalParam<qint32> &after_ts = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &last_ccseq = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &mapping_priority = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_404_on_empty_response = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  market QString [required]
    * @param[in]  instrument QString [required]
    * @param[in]  hour_ts qint32 [optional]
    * @param[in]  mapping_priority QString [optional]
    * @param[in]  response_format QString [optional]
    * @param[in]  return_404_on_empty_response bool [optional]
    */
    void indexV1HistoricalMessagesHour(const QString &market, const QString &instrument, const ::OpenAPI::OptionalParam<qint32> &hour_ts = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &mapping_priority = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_404_on_empty_response = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  market QString [required]
    * @param[in]  instrument QString [required]
    * @param[in]  groups QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  to_ts qint32 [optional]
    * @param[in]  aggregate qint32 [optional]
    * @param[in]  fill bool [optional]
    * @param[in]  mapping_priority QString [optional]
    * @param[in]  response_format QString [optional]
    */
    void indexV1HistoricalMinutes(const QString &market, const QString &instrument, const ::OpenAPI::OptionalParam<QList<QString>> &groups = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &to_ts = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &aggregate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &fill = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &mapping_priority = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  market QString [required]
    * @param[in]  instruments QList<QString> [required]
    * @param[in]  groups QList<QString> [optional]
    * @param[in]  mapping_priority QString [optional]
    */
    void indexV1LatestInstrumentMetadata(const QString &market, const QList<QString> &instruments, const ::OpenAPI::OptionalParam<QList<QString>> &groups = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &mapping_priority = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  market QString [required]
    * @param[in]  instruments QList<QString> [required]
    * @param[in]  groups QList<QString> [optional]
    * @param[in]  mapping_priority QString [optional]
    */
    void indexV1LatestTick(const QString &market, const QList<QString> &instruments, const ::OpenAPI::OptionalParam<QList<QString>> &groups = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &mapping_priority = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  market QString [optional]
    */
    void indexV1Markets(const ::OpenAPI::OptionalParam<QString> &market = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  market QString [optional]
    * @param[in]  instrument QString [optional]
    * @param[in]  instrument_status QList<QString> [optional]
    */
    void indexV1MarketsInstruments(const ::OpenAPI::OptionalParam<QString> &market = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &instrument = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &instrument_status = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  market QString [optional]
    * @param[in]  instrument QString [optional]
    * @param[in]  instrument_status QList<QString> [optional]
    */
    void indexV1MarketsInstrumentsUnmapped(const ::OpenAPI::OptionalParam<QString> &market = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &instrument = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &instrument_status = ::OpenAPI::OptionalParam<QList<QString>>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void futuresV1HistoricalDaysCallback(OAIHttpRequestWorker *worker);
    void futuresV1HistoricalFundingRateDaysCallback(OAIHttpRequestWorker *worker);
    void futuresV1HistoricalFundingRateHoursCallback(OAIHttpRequestWorker *worker);
    void futuresV1HistoricalFundingRateMessagesCallback(OAIHttpRequestWorker *worker);
    void futuresV1HistoricalFundingRateMessagesHourCallback(OAIHttpRequestWorker *worker);
    void futuresV1HistoricalFundingRateMinutesCallback(OAIHttpRequestWorker *worker);
    void futuresV1HistoricalHoursCallback(OAIHttpRequestWorker *worker);
    void futuresV1HistoricalMinutesCallback(OAIHttpRequestWorker *worker);
    void futuresV1HistoricalOpenInterestDaysCallback(OAIHttpRequestWorker *worker);
    void futuresV1HistoricalOpenInterestHoursCallback(OAIHttpRequestWorker *worker);
    void futuresV1HistoricalOpenInterestMessagesCallback(OAIHttpRequestWorker *worker);
    void futuresV1HistoricalOpenInterestMessagesHourCallback(OAIHttpRequestWorker *worker);
    void futuresV1HistoricalOpenInterestMinutesCallback(OAIHttpRequestWorker *worker);
    void futuresV1HistoricalTradesCallback(OAIHttpRequestWorker *worker);
    void futuresV1HistoricalTradesHourCallback(OAIHttpRequestWorker *worker);
    void futuresV1LatestFundingRateTickCallback(OAIHttpRequestWorker *worker);
    void futuresV1LatestInstrumentMetadataCallback(OAIHttpRequestWorker *worker);
    void futuresV1LatestOpenInterestTickCallback(OAIHttpRequestWorker *worker);
    void futuresV1LatestTickCallback(OAIHttpRequestWorker *worker);
    void futuresV1MarketsCallback(OAIHttpRequestWorker *worker);
    void futuresV1MarketsInstrumentsCallback(OAIHttpRequestWorker *worker);
    void futuresV1MarketsInstrumentsUnmappedCallback(OAIHttpRequestWorker *worker);
    void indexV1HistoricalDaysCallback(OAIHttpRequestWorker *worker);
    void indexV1HistoricalHoursCallback(OAIHttpRequestWorker *worker);
    void indexV1HistoricalMessagesCallback(OAIHttpRequestWorker *worker);
    void indexV1HistoricalMessagesHourCallback(OAIHttpRequestWorker *worker);
    void indexV1HistoricalMinutesCallback(OAIHttpRequestWorker *worker);
    void indexV1LatestInstrumentMetadataCallback(OAIHttpRequestWorker *worker);
    void indexV1LatestTickCallback(OAIHttpRequestWorker *worker);
    void indexV1MarketsCallback(OAIHttpRequestWorker *worker);
    void indexV1MarketsInstrumentsCallback(OAIHttpRequestWorker *worker);
    void indexV1MarketsInstrumentsUnmappedCallback(OAIHttpRequestWorker *worker);

signals:

    void futuresV1HistoricalDaysSignal(OAIGENERIC_RESPONSE summary);
    void futuresV1HistoricalFundingRateDaysSignal(OAIGENERIC_RESPONSE summary);
    void futuresV1HistoricalFundingRateHoursSignal(OAIGENERIC_RESPONSE summary);
    void futuresV1HistoricalFundingRateMessagesSignal(OAIGENERIC_RESPONSE summary);
    void futuresV1HistoricalFundingRateMessagesHourSignal(OAIGENERIC_RESPONSE summary);
    void futuresV1HistoricalFundingRateMinutesSignal(OAIGENERIC_RESPONSE summary);
    void futuresV1HistoricalHoursSignal(OAIGENERIC_RESPONSE summary);
    void futuresV1HistoricalMinutesSignal(OAIGENERIC_RESPONSE summary);
    void futuresV1HistoricalOpenInterestDaysSignal(OAIGENERIC_RESPONSE summary);
    void futuresV1HistoricalOpenInterestHoursSignal(OAIGENERIC_RESPONSE summary);
    void futuresV1HistoricalOpenInterestMessagesSignal(OAIGENERIC_RESPONSE summary);
    void futuresV1HistoricalOpenInterestMessagesHourSignal(OAIGENERIC_RESPONSE summary);
    void futuresV1HistoricalOpenInterestMinutesSignal(OAIGENERIC_RESPONSE summary);
    void futuresV1HistoricalTradesSignal(OAIGENERIC_RESPONSE summary);
    void futuresV1HistoricalTradesHourSignal(OAIGENERIC_RESPONSE summary);
    void futuresV1LatestFundingRateTickSignal(OAIGENERIC_RESPONSE summary);
    void futuresV1LatestInstrumentMetadataSignal(OAIGENERIC_RESPONSE summary);
    void futuresV1LatestOpenInterestTickSignal(OAIGENERIC_RESPONSE summary);
    void futuresV1LatestTickSignal(OAIGENERIC_RESPONSE summary);
    void futuresV1MarketsSignal(OAIGENERIC_RESPONSE summary);
    void futuresV1MarketsInstrumentsSignal(OAIGENERIC_RESPONSE summary);
    void futuresV1MarketsInstrumentsUnmappedSignal(OAIGENERIC_RESPONSE summary);
    void indexV1HistoricalDaysSignal(OAIGENERIC_RESPONSE summary);
    void indexV1HistoricalHoursSignal(OAIGENERIC_RESPONSE summary);
    void indexV1HistoricalMessagesSignal(OAIGENERIC_RESPONSE summary);
    void indexV1HistoricalMessagesHourSignal(OAIGENERIC_RESPONSE summary);
    void indexV1HistoricalMinutesSignal(OAIGENERIC_RESPONSE summary);
    void indexV1LatestInstrumentMetadataSignal(OAIGENERIC_RESPONSE summary);
    void indexV1LatestTickSignal(OAIGENERIC_RESPONSE summary);
    void indexV1MarketsSignal(OAIGENERIC_RESPONSE summary);
    void indexV1MarketsInstrumentsSignal(OAIGENERIC_RESPONSE summary);
    void indexV1MarketsInstrumentsUnmappedSignal(OAIGENERIC_RESPONSE summary);

    void futuresV1HistoricalDaysSignalFull(OAIHttpRequestWorker *worker, OAIGENERIC_RESPONSE summary);
    void futuresV1HistoricalFundingRateDaysSignalFull(OAIHttpRequestWorker *worker, OAIGENERIC_RESPONSE summary);
    void futuresV1HistoricalFundingRateHoursSignalFull(OAIHttpRequestWorker *worker, OAIGENERIC_RESPONSE summary);
    void futuresV1HistoricalFundingRateMessagesSignalFull(OAIHttpRequestWorker *worker, OAIGENERIC_RESPONSE summary);
    void futuresV1HistoricalFundingRateMessagesHourSignalFull(OAIHttpRequestWorker *worker, OAIGENERIC_RESPONSE summary);
    void futuresV1HistoricalFundingRateMinutesSignalFull(OAIHttpRequestWorker *worker, OAIGENERIC_RESPONSE summary);
    void futuresV1HistoricalHoursSignalFull(OAIHttpRequestWorker *worker, OAIGENERIC_RESPONSE summary);
    void futuresV1HistoricalMinutesSignalFull(OAIHttpRequestWorker *worker, OAIGENERIC_RESPONSE summary);
    void futuresV1HistoricalOpenInterestDaysSignalFull(OAIHttpRequestWorker *worker, OAIGENERIC_RESPONSE summary);
    void futuresV1HistoricalOpenInterestHoursSignalFull(OAIHttpRequestWorker *worker, OAIGENERIC_RESPONSE summary);
    void futuresV1HistoricalOpenInterestMessagesSignalFull(OAIHttpRequestWorker *worker, OAIGENERIC_RESPONSE summary);
    void futuresV1HistoricalOpenInterestMessagesHourSignalFull(OAIHttpRequestWorker *worker, OAIGENERIC_RESPONSE summary);
    void futuresV1HistoricalOpenInterestMinutesSignalFull(OAIHttpRequestWorker *worker, OAIGENERIC_RESPONSE summary);
    void futuresV1HistoricalTradesSignalFull(OAIHttpRequestWorker *worker, OAIGENERIC_RESPONSE summary);
    void futuresV1HistoricalTradesHourSignalFull(OAIHttpRequestWorker *worker, OAIGENERIC_RESPONSE summary);
    void futuresV1LatestFundingRateTickSignalFull(OAIHttpRequestWorker *worker, OAIGENERIC_RESPONSE summary);
    void futuresV1LatestInstrumentMetadataSignalFull(OAIHttpRequestWorker *worker, OAIGENERIC_RESPONSE summary);
    void futuresV1LatestOpenInterestTickSignalFull(OAIHttpRequestWorker *worker, OAIGENERIC_RESPONSE summary);
    void futuresV1LatestTickSignalFull(OAIHttpRequestWorker *worker, OAIGENERIC_RESPONSE summary);
    void futuresV1MarketsSignalFull(OAIHttpRequestWorker *worker, OAIGENERIC_RESPONSE summary);
    void futuresV1MarketsInstrumentsSignalFull(OAIHttpRequestWorker *worker, OAIGENERIC_RESPONSE summary);
    void futuresV1MarketsInstrumentsUnmappedSignalFull(OAIHttpRequestWorker *worker, OAIGENERIC_RESPONSE summary);
    void indexV1HistoricalDaysSignalFull(OAIHttpRequestWorker *worker, OAIGENERIC_RESPONSE summary);
    void indexV1HistoricalHoursSignalFull(OAIHttpRequestWorker *worker, OAIGENERIC_RESPONSE summary);
    void indexV1HistoricalMessagesSignalFull(OAIHttpRequestWorker *worker, OAIGENERIC_RESPONSE summary);
    void indexV1HistoricalMessagesHourSignalFull(OAIHttpRequestWorker *worker, OAIGENERIC_RESPONSE summary);
    void indexV1HistoricalMinutesSignalFull(OAIHttpRequestWorker *worker, OAIGENERIC_RESPONSE summary);
    void indexV1LatestInstrumentMetadataSignalFull(OAIHttpRequestWorker *worker, OAIGENERIC_RESPONSE summary);
    void indexV1LatestTickSignalFull(OAIHttpRequestWorker *worker, OAIGENERIC_RESPONSE summary);
    void indexV1MarketsSignalFull(OAIHttpRequestWorker *worker, OAIGENERIC_RESPONSE summary);
    void indexV1MarketsInstrumentsSignalFull(OAIHttpRequestWorker *worker, OAIGENERIC_RESPONSE summary);
    void indexV1MarketsInstrumentsUnmappedSignalFull(OAIHttpRequestWorker *worker, OAIGENERIC_RESPONSE summary);

    void futuresV1HistoricalDaysSignalE(OAIGENERIC_RESPONSE summary, QNetworkReply::NetworkError error_type, QString error_str);
    void futuresV1HistoricalFundingRateDaysSignalE(OAIGENERIC_RESPONSE summary, QNetworkReply::NetworkError error_type, QString error_str);
    void futuresV1HistoricalFundingRateHoursSignalE(OAIGENERIC_RESPONSE summary, QNetworkReply::NetworkError error_type, QString error_str);
    void futuresV1HistoricalFundingRateMessagesSignalE(OAIGENERIC_RESPONSE summary, QNetworkReply::NetworkError error_type, QString error_str);
    void futuresV1HistoricalFundingRateMessagesHourSignalE(OAIGENERIC_RESPONSE summary, QNetworkReply::NetworkError error_type, QString error_str);
    void futuresV1HistoricalFundingRateMinutesSignalE(OAIGENERIC_RESPONSE summary, QNetworkReply::NetworkError error_type, QString error_str);
    void futuresV1HistoricalHoursSignalE(OAIGENERIC_RESPONSE summary, QNetworkReply::NetworkError error_type, QString error_str);
    void futuresV1HistoricalMinutesSignalE(OAIGENERIC_RESPONSE summary, QNetworkReply::NetworkError error_type, QString error_str);
    void futuresV1HistoricalOpenInterestDaysSignalE(OAIGENERIC_RESPONSE summary, QNetworkReply::NetworkError error_type, QString error_str);
    void futuresV1HistoricalOpenInterestHoursSignalE(OAIGENERIC_RESPONSE summary, QNetworkReply::NetworkError error_type, QString error_str);
    void futuresV1HistoricalOpenInterestMessagesSignalE(OAIGENERIC_RESPONSE summary, QNetworkReply::NetworkError error_type, QString error_str);
    void futuresV1HistoricalOpenInterestMessagesHourSignalE(OAIGENERIC_RESPONSE summary, QNetworkReply::NetworkError error_type, QString error_str);
    void futuresV1HistoricalOpenInterestMinutesSignalE(OAIGENERIC_RESPONSE summary, QNetworkReply::NetworkError error_type, QString error_str);
    void futuresV1HistoricalTradesSignalE(OAIGENERIC_RESPONSE summary, QNetworkReply::NetworkError error_type, QString error_str);
    void futuresV1HistoricalTradesHourSignalE(OAIGENERIC_RESPONSE summary, QNetworkReply::NetworkError error_type, QString error_str);
    void futuresV1LatestFundingRateTickSignalE(OAIGENERIC_RESPONSE summary, QNetworkReply::NetworkError error_type, QString error_str);
    void futuresV1LatestInstrumentMetadataSignalE(OAIGENERIC_RESPONSE summary, QNetworkReply::NetworkError error_type, QString error_str);
    void futuresV1LatestOpenInterestTickSignalE(OAIGENERIC_RESPONSE summary, QNetworkReply::NetworkError error_type, QString error_str);
    void futuresV1LatestTickSignalE(OAIGENERIC_RESPONSE summary, QNetworkReply::NetworkError error_type, QString error_str);
    void futuresV1MarketsSignalE(OAIGENERIC_RESPONSE summary, QNetworkReply::NetworkError error_type, QString error_str);
    void futuresV1MarketsInstrumentsSignalE(OAIGENERIC_RESPONSE summary, QNetworkReply::NetworkError error_type, QString error_str);
    void futuresV1MarketsInstrumentsUnmappedSignalE(OAIGENERIC_RESPONSE summary, QNetworkReply::NetworkError error_type, QString error_str);
    void indexV1HistoricalDaysSignalE(OAIGENERIC_RESPONSE summary, QNetworkReply::NetworkError error_type, QString error_str);
    void indexV1HistoricalHoursSignalE(OAIGENERIC_RESPONSE summary, QNetworkReply::NetworkError error_type, QString error_str);
    void indexV1HistoricalMessagesSignalE(OAIGENERIC_RESPONSE summary, QNetworkReply::NetworkError error_type, QString error_str);
    void indexV1HistoricalMessagesHourSignalE(OAIGENERIC_RESPONSE summary, QNetworkReply::NetworkError error_type, QString error_str);
    void indexV1HistoricalMinutesSignalE(OAIGENERIC_RESPONSE summary, QNetworkReply::NetworkError error_type, QString error_str);
    void indexV1LatestInstrumentMetadataSignalE(OAIGENERIC_RESPONSE summary, QNetworkReply::NetworkError error_type, QString error_str);
    void indexV1LatestTickSignalE(OAIGENERIC_RESPONSE summary, QNetworkReply::NetworkError error_type, QString error_str);
    void indexV1MarketsSignalE(OAIGENERIC_RESPONSE summary, QNetworkReply::NetworkError error_type, QString error_str);
    void indexV1MarketsInstrumentsSignalE(OAIGENERIC_RESPONSE summary, QNetworkReply::NetworkError error_type, QString error_str);
    void indexV1MarketsInstrumentsUnmappedSignalE(OAIGENERIC_RESPONSE summary, QNetworkReply::NetworkError error_type, QString error_str);

    void futuresV1HistoricalDaysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void futuresV1HistoricalFundingRateDaysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void futuresV1HistoricalFundingRateHoursSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void futuresV1HistoricalFundingRateMessagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void futuresV1HistoricalFundingRateMessagesHourSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void futuresV1HistoricalFundingRateMinutesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void futuresV1HistoricalHoursSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void futuresV1HistoricalMinutesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void futuresV1HistoricalOpenInterestDaysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void futuresV1HistoricalOpenInterestHoursSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void futuresV1HistoricalOpenInterestMessagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void futuresV1HistoricalOpenInterestMessagesHourSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void futuresV1HistoricalOpenInterestMinutesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void futuresV1HistoricalTradesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void futuresV1HistoricalTradesHourSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void futuresV1LatestFundingRateTickSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void futuresV1LatestInstrumentMetadataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void futuresV1LatestOpenInterestTickSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void futuresV1LatestTickSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void futuresV1MarketsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void futuresV1MarketsInstrumentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void futuresV1MarketsInstrumentsUnmappedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void indexV1HistoricalDaysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void indexV1HistoricalHoursSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void indexV1HistoricalMessagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void indexV1HistoricalMessagesHourSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void indexV1HistoricalMinutesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void indexV1LatestInstrumentMetadataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void indexV1LatestTickSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void indexV1MarketsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void indexV1MarketsInstrumentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void indexV1MarketsInstrumentsUnmappedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public slots:
    void tokenAvailable();
    
};

} // namespace OpenAPI
#endif
