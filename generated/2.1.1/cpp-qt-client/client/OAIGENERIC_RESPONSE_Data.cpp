/**
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 * CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: data@cryptocompare.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGENERIC_RESPONSE_Data.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGENERIC_RESPONSE_Data::OAIGENERIC_RESPONSE_Data(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGENERIC_RESPONSE_Data::OAIGENERIC_RESPONSE_Data() {
    this->initializeModel();
}

OAIGENERIC_RESPONSE_Data::~OAIGENERIC_RESPONSE_Data() {}

void OAIGENERIC_RESPONSE_Data::initializeModel() {

    m_no_data_isSet = false;
    m_no_data_isValid = false;
}

void OAIGENERIC_RESPONSE_Data::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGENERIC_RESPONSE_Data::fromJsonObject(QJsonObject json) {

    m_no_data_isValid = ::OpenAPI::fromJsonValue(no_data, json[QString("NO_DATA")]);
    m_no_data_isSet = !json[QString("NO_DATA")].isNull() && m_no_data_isValid;
}

QString OAIGENERIC_RESPONSE_Data::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGENERIC_RESPONSE_Data::asJsonObject() const {
    QJsonObject obj;
    if (m_no_data_isSet) {
        obj.insert(QString("NO_DATA"), ::OpenAPI::toJsonValue(no_data));
    }
    return obj;
}

QString OAIGENERIC_RESPONSE_Data::getNoData() const {
    return no_data;
}
void OAIGENERIC_RESPONSE_Data::setNoData(const QString &no_data) {
    this->no_data = no_data;
    this->m_no_data_isSet = true;
}

bool OAIGENERIC_RESPONSE_Data::is_no_data_Set() const{
    return m_no_data_isSet;
}

bool OAIGENERIC_RESPONSE_Data::is_no_data_Valid() const{
    return m_no_data_isValid;
}

bool OAIGENERIC_RESPONSE_Data::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_no_data_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGENERIC_RESPONSE_Data::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
