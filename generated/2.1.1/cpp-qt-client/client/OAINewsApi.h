/**
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 * CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: data@cryptocompare.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAINewsApi_H
#define OAI_OAINewsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAIGENERIC_RESPONSE.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAINewsApi : public QObject {
    Q_OBJECT

public:
    OAINewsApi(const int timeOut = 0);
    ~OAINewsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  source_ids QList<QString> [optional]
    * @param[in]  lang QString [optional]
    * @param[in]  categories QList<QString> [optional]
    * @param[in]  exclude_categories QList<QString> [optional]
    * @param[in]  to_ts qint32 [optional]
    */
    void newsV1ArticleList(const ::OpenAPI::OptionalParam<QList<QString>> &source_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &categories = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &exclude_categories = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &to_ts = ::OpenAPI::OptionalParam<qint32>());


    void newsV1CategoryList();

    /**
    * @param[in]  lang QString [optional]
    * @param[in]  type QString [optional]
    * @param[in]  status QString [optional]
    */
    void newsV1SourceList(const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void newsV1ArticleListCallback(OAIHttpRequestWorker *worker);
    void newsV1CategoryListCallback(OAIHttpRequestWorker *worker);
    void newsV1SourceListCallback(OAIHttpRequestWorker *worker);

signals:

    void newsV1ArticleListSignal(OAIGENERIC_RESPONSE summary);
    void newsV1CategoryListSignal(OAIGENERIC_RESPONSE summary);
    void newsV1SourceListSignal(OAIGENERIC_RESPONSE summary);

    void newsV1ArticleListSignalFull(OAIHttpRequestWorker *worker, OAIGENERIC_RESPONSE summary);
    void newsV1CategoryListSignalFull(OAIHttpRequestWorker *worker, OAIGENERIC_RESPONSE summary);
    void newsV1SourceListSignalFull(OAIHttpRequestWorker *worker, OAIGENERIC_RESPONSE summary);

    void newsV1ArticleListSignalE(OAIGENERIC_RESPONSE summary, QNetworkReply::NetworkError error_type, QString error_str);
    void newsV1CategoryListSignalE(OAIGENERIC_RESPONSE summary, QNetworkReply::NetworkError error_type, QString error_str);
    void newsV1SourceListSignalE(OAIGENERIC_RESPONSE summary, QNetworkReply::NetworkError error_type, QString error_str);

    void newsV1ArticleListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void newsV1CategoryListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void newsV1SourceListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public slots:
    void tokenAvailable();
    
};

} // namespace OpenAPI
#endif
