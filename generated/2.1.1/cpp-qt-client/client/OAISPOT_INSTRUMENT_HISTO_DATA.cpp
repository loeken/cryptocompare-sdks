/**
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 * CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: data@cryptocompare.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISPOT_INSTRUMENT_HISTO_DATA.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISPOT_INSTRUMENT_HISTO_DATA::OAISPOT_INSTRUMENT_HISTO_DATA(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISPOT_INSTRUMENT_HISTO_DATA::OAISPOT_INSTRUMENT_HISTO_DATA() {
    this->initializeModel();
}

OAISPOT_INSTRUMENT_HISTO_DATA::~OAISPOT_INSTRUMENT_HISTO_DATA() {}

void OAISPOT_INSTRUMENT_HISTO_DATA::initializeModel() {

    m_base_isSet = false;
    m_base_isValid = false;

    m_close_isSet = false;
    m_close_isValid = false;

    m_first_trade_price_isSet = false;
    m_first_trade_price_isValid = false;

    m_first_trade_timestamp_isSet = false;
    m_first_trade_timestamp_isValid = false;

    m_high_isSet = false;
    m_high_isValid = false;

    m_high_trade_price_isSet = false;
    m_high_trade_price_isValid = false;

    m_high_trade_timestamp_isSet = false;
    m_high_trade_timestamp_isValid = false;

    m_instrument_isSet = false;
    m_instrument_isValid = false;

    m_last_trade_price_isSet = false;
    m_last_trade_price_isValid = false;

    m_last_trade_timestamp_isSet = false;
    m_last_trade_timestamp_isValid = false;

    m_low_isSet = false;
    m_low_isValid = false;

    m_low_trade_price_isSet = false;
    m_low_trade_price_isValid = false;

    m_low_trade_timestamp_isSet = false;
    m_low_trade_timestamp_isValid = false;

    m_mapped_instrument_isSet = false;
    m_mapped_instrument_isValid = false;

    m_market_isSet = false;
    m_market_isValid = false;

    m_open_isSet = false;
    m_open_isValid = false;

    m_quote_isSet = false;
    m_quote_isValid = false;

    m_quote_volume_isSet = false;
    m_quote_volume_isValid = false;

    m_quote_volume_buy_isSet = false;
    m_quote_volume_buy_isValid = false;

    m_quote_volume_sell_isSet = false;
    m_quote_volume_sell_isValid = false;

    m_quote_volume_unknown_isSet = false;
    m_quote_volume_unknown_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_total_trades_isSet = false;
    m_total_trades_isValid = false;

    m_total_trades_buy_isSet = false;
    m_total_trades_buy_isValid = false;

    m_total_trades_sell_isSet = false;
    m_total_trades_sell_isValid = false;

    m_total_trades_unknown_isSet = false;
    m_total_trades_unknown_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;

    m_volume_isSet = false;
    m_volume_isValid = false;

    m_volume_buy_isSet = false;
    m_volume_buy_isValid = false;

    m_volume_sell_isSet = false;
    m_volume_sell_isValid = false;

    m_volume_unknown_isSet = false;
    m_volume_unknown_isValid = false;
}

void OAISPOT_INSTRUMENT_HISTO_DATA::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISPOT_INSTRUMENT_HISTO_DATA::fromJsonObject(QJsonObject json) {

    m_base_isValid = ::OpenAPI::fromJsonValue(base, json[QString("BASE")]);
    m_base_isSet = !json[QString("BASE")].isNull() && m_base_isValid;

    m_close_isValid = ::OpenAPI::fromJsonValue(close, json[QString("CLOSE")]);
    m_close_isSet = !json[QString("CLOSE")].isNull() && m_close_isValid;

    m_first_trade_price_isValid = ::OpenAPI::fromJsonValue(first_trade_price, json[QString("FIRST_TRADE_PRICE")]);
    m_first_trade_price_isSet = !json[QString("FIRST_TRADE_PRICE")].isNull() && m_first_trade_price_isValid;

    m_first_trade_timestamp_isValid = ::OpenAPI::fromJsonValue(first_trade_timestamp, json[QString("FIRST_TRADE_TIMESTAMP")]);
    m_first_trade_timestamp_isSet = !json[QString("FIRST_TRADE_TIMESTAMP")].isNull() && m_first_trade_timestamp_isValid;

    m_high_isValid = ::OpenAPI::fromJsonValue(high, json[QString("HIGH")]);
    m_high_isSet = !json[QString("HIGH")].isNull() && m_high_isValid;

    m_high_trade_price_isValid = ::OpenAPI::fromJsonValue(high_trade_price, json[QString("HIGH_TRADE_PRICE")]);
    m_high_trade_price_isSet = !json[QString("HIGH_TRADE_PRICE")].isNull() && m_high_trade_price_isValid;

    m_high_trade_timestamp_isValid = ::OpenAPI::fromJsonValue(high_trade_timestamp, json[QString("HIGH_TRADE_TIMESTAMP")]);
    m_high_trade_timestamp_isSet = !json[QString("HIGH_TRADE_TIMESTAMP")].isNull() && m_high_trade_timestamp_isValid;

    m_instrument_isValid = ::OpenAPI::fromJsonValue(instrument, json[QString("INSTRUMENT")]);
    m_instrument_isSet = !json[QString("INSTRUMENT")].isNull() && m_instrument_isValid;

    m_last_trade_price_isValid = ::OpenAPI::fromJsonValue(last_trade_price, json[QString("LAST_TRADE_PRICE")]);
    m_last_trade_price_isSet = !json[QString("LAST_TRADE_PRICE")].isNull() && m_last_trade_price_isValid;

    m_last_trade_timestamp_isValid = ::OpenAPI::fromJsonValue(last_trade_timestamp, json[QString("LAST_TRADE_TIMESTAMP")]);
    m_last_trade_timestamp_isSet = !json[QString("LAST_TRADE_TIMESTAMP")].isNull() && m_last_trade_timestamp_isValid;

    m_low_isValid = ::OpenAPI::fromJsonValue(low, json[QString("LOW")]);
    m_low_isSet = !json[QString("LOW")].isNull() && m_low_isValid;

    m_low_trade_price_isValid = ::OpenAPI::fromJsonValue(low_trade_price, json[QString("LOW_TRADE_PRICE")]);
    m_low_trade_price_isSet = !json[QString("LOW_TRADE_PRICE")].isNull() && m_low_trade_price_isValid;

    m_low_trade_timestamp_isValid = ::OpenAPI::fromJsonValue(low_trade_timestamp, json[QString("LOW_TRADE_TIMESTAMP")]);
    m_low_trade_timestamp_isSet = !json[QString("LOW_TRADE_TIMESTAMP")].isNull() && m_low_trade_timestamp_isValid;

    m_mapped_instrument_isValid = ::OpenAPI::fromJsonValue(mapped_instrument, json[QString("MAPPED_INSTRUMENT")]);
    m_mapped_instrument_isSet = !json[QString("MAPPED_INSTRUMENT")].isNull() && m_mapped_instrument_isValid;

    m_market_isValid = ::OpenAPI::fromJsonValue(market, json[QString("MARKET")]);
    m_market_isSet = !json[QString("MARKET")].isNull() && m_market_isValid;

    m_open_isValid = ::OpenAPI::fromJsonValue(open, json[QString("OPEN")]);
    m_open_isSet = !json[QString("OPEN")].isNull() && m_open_isValid;

    m_quote_isValid = ::OpenAPI::fromJsonValue(quote, json[QString("QUOTE")]);
    m_quote_isSet = !json[QString("QUOTE")].isNull() && m_quote_isValid;

    m_quote_volume_isValid = ::OpenAPI::fromJsonValue(quote_volume, json[QString("QUOTE_VOLUME")]);
    m_quote_volume_isSet = !json[QString("QUOTE_VOLUME")].isNull() && m_quote_volume_isValid;

    m_quote_volume_buy_isValid = ::OpenAPI::fromJsonValue(quote_volume_buy, json[QString("QUOTE_VOLUME_BUY")]);
    m_quote_volume_buy_isSet = !json[QString("QUOTE_VOLUME_BUY")].isNull() && m_quote_volume_buy_isValid;

    m_quote_volume_sell_isValid = ::OpenAPI::fromJsonValue(quote_volume_sell, json[QString("QUOTE_VOLUME_SELL")]);
    m_quote_volume_sell_isSet = !json[QString("QUOTE_VOLUME_SELL")].isNull() && m_quote_volume_sell_isValid;

    m_quote_volume_unknown_isValid = ::OpenAPI::fromJsonValue(quote_volume_unknown, json[QString("QUOTE_VOLUME_UNKNOWN")]);
    m_quote_volume_unknown_isSet = !json[QString("QUOTE_VOLUME_UNKNOWN")].isNull() && m_quote_volume_unknown_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(timestamp, json[QString("TIMESTAMP")]);
    m_timestamp_isSet = !json[QString("TIMESTAMP")].isNull() && m_timestamp_isValid;

    m_total_trades_isValid = ::OpenAPI::fromJsonValue(total_trades, json[QString("TOTAL_TRADES")]);
    m_total_trades_isSet = !json[QString("TOTAL_TRADES")].isNull() && m_total_trades_isValid;

    m_total_trades_buy_isValid = ::OpenAPI::fromJsonValue(total_trades_buy, json[QString("TOTAL_TRADES_BUY")]);
    m_total_trades_buy_isSet = !json[QString("TOTAL_TRADES_BUY")].isNull() && m_total_trades_buy_isValid;

    m_total_trades_sell_isValid = ::OpenAPI::fromJsonValue(total_trades_sell, json[QString("TOTAL_TRADES_SELL")]);
    m_total_trades_sell_isSet = !json[QString("TOTAL_TRADES_SELL")].isNull() && m_total_trades_sell_isValid;

    m_total_trades_unknown_isValid = ::OpenAPI::fromJsonValue(total_trades_unknown, json[QString("TOTAL_TRADES_UNKNOWN")]);
    m_total_trades_unknown_isSet = !json[QString("TOTAL_TRADES_UNKNOWN")].isNull() && m_total_trades_unknown_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(type, json[QString("TYPE")]);
    m_type_isSet = !json[QString("TYPE")].isNull() && m_type_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(unit, json[QString("UNIT")]);
    m_unit_isSet = !json[QString("UNIT")].isNull() && m_unit_isValid;

    m_volume_isValid = ::OpenAPI::fromJsonValue(volume, json[QString("VOLUME")]);
    m_volume_isSet = !json[QString("VOLUME")].isNull() && m_volume_isValid;

    m_volume_buy_isValid = ::OpenAPI::fromJsonValue(volume_buy, json[QString("VOLUME_BUY")]);
    m_volume_buy_isSet = !json[QString("VOLUME_BUY")].isNull() && m_volume_buy_isValid;

    m_volume_sell_isValid = ::OpenAPI::fromJsonValue(volume_sell, json[QString("VOLUME_SELL")]);
    m_volume_sell_isSet = !json[QString("VOLUME_SELL")].isNull() && m_volume_sell_isValid;

    m_volume_unknown_isValid = ::OpenAPI::fromJsonValue(volume_unknown, json[QString("VOLUME_UNKNOWN")]);
    m_volume_unknown_isSet = !json[QString("VOLUME_UNKNOWN")].isNull() && m_volume_unknown_isValid;
}

QString OAISPOT_INSTRUMENT_HISTO_DATA::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISPOT_INSTRUMENT_HISTO_DATA::asJsonObject() const {
    QJsonObject obj;
    if (m_base_isSet) {
        obj.insert(QString("BASE"), ::OpenAPI::toJsonValue(base));
    }
    if (m_close_isSet) {
        obj.insert(QString("CLOSE"), ::OpenAPI::toJsonValue(close));
    }
    if (m_first_trade_price_isSet) {
        obj.insert(QString("FIRST_TRADE_PRICE"), ::OpenAPI::toJsonValue(first_trade_price));
    }
    if (m_first_trade_timestamp_isSet) {
        obj.insert(QString("FIRST_TRADE_TIMESTAMP"), ::OpenAPI::toJsonValue(first_trade_timestamp));
    }
    if (m_high_isSet) {
        obj.insert(QString("HIGH"), ::OpenAPI::toJsonValue(high));
    }
    if (m_high_trade_price_isSet) {
        obj.insert(QString("HIGH_TRADE_PRICE"), ::OpenAPI::toJsonValue(high_trade_price));
    }
    if (m_high_trade_timestamp_isSet) {
        obj.insert(QString("HIGH_TRADE_TIMESTAMP"), ::OpenAPI::toJsonValue(high_trade_timestamp));
    }
    if (m_instrument_isSet) {
        obj.insert(QString("INSTRUMENT"), ::OpenAPI::toJsonValue(instrument));
    }
    if (m_last_trade_price_isSet) {
        obj.insert(QString("LAST_TRADE_PRICE"), ::OpenAPI::toJsonValue(last_trade_price));
    }
    if (m_last_trade_timestamp_isSet) {
        obj.insert(QString("LAST_TRADE_TIMESTAMP"), ::OpenAPI::toJsonValue(last_trade_timestamp));
    }
    if (m_low_isSet) {
        obj.insert(QString("LOW"), ::OpenAPI::toJsonValue(low));
    }
    if (m_low_trade_price_isSet) {
        obj.insert(QString("LOW_TRADE_PRICE"), ::OpenAPI::toJsonValue(low_trade_price));
    }
    if (m_low_trade_timestamp_isSet) {
        obj.insert(QString("LOW_TRADE_TIMESTAMP"), ::OpenAPI::toJsonValue(low_trade_timestamp));
    }
    if (m_mapped_instrument_isSet) {
        obj.insert(QString("MAPPED_INSTRUMENT"), ::OpenAPI::toJsonValue(mapped_instrument));
    }
    if (m_market_isSet) {
        obj.insert(QString("MARKET"), ::OpenAPI::toJsonValue(market));
    }
    if (m_open_isSet) {
        obj.insert(QString("OPEN"), ::OpenAPI::toJsonValue(open));
    }
    if (m_quote_isSet) {
        obj.insert(QString("QUOTE"), ::OpenAPI::toJsonValue(quote));
    }
    if (m_quote_volume_isSet) {
        obj.insert(QString("QUOTE_VOLUME"), ::OpenAPI::toJsonValue(quote_volume));
    }
    if (m_quote_volume_buy_isSet) {
        obj.insert(QString("QUOTE_VOLUME_BUY"), ::OpenAPI::toJsonValue(quote_volume_buy));
    }
    if (m_quote_volume_sell_isSet) {
        obj.insert(QString("QUOTE_VOLUME_SELL"), ::OpenAPI::toJsonValue(quote_volume_sell));
    }
    if (m_quote_volume_unknown_isSet) {
        obj.insert(QString("QUOTE_VOLUME_UNKNOWN"), ::OpenAPI::toJsonValue(quote_volume_unknown));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("TIMESTAMP"), ::OpenAPI::toJsonValue(timestamp));
    }
    if (m_total_trades_isSet) {
        obj.insert(QString("TOTAL_TRADES"), ::OpenAPI::toJsonValue(total_trades));
    }
    if (m_total_trades_buy_isSet) {
        obj.insert(QString("TOTAL_TRADES_BUY"), ::OpenAPI::toJsonValue(total_trades_buy));
    }
    if (m_total_trades_sell_isSet) {
        obj.insert(QString("TOTAL_TRADES_SELL"), ::OpenAPI::toJsonValue(total_trades_sell));
    }
    if (m_total_trades_unknown_isSet) {
        obj.insert(QString("TOTAL_TRADES_UNKNOWN"), ::OpenAPI::toJsonValue(total_trades_unknown));
    }
    if (m_type_isSet) {
        obj.insert(QString("TYPE"), ::OpenAPI::toJsonValue(type));
    }
    if (m_unit_isSet) {
        obj.insert(QString("UNIT"), ::OpenAPI::toJsonValue(unit));
    }
    if (m_volume_isSet) {
        obj.insert(QString("VOLUME"), ::OpenAPI::toJsonValue(volume));
    }
    if (m_volume_buy_isSet) {
        obj.insert(QString("VOLUME_BUY"), ::OpenAPI::toJsonValue(volume_buy));
    }
    if (m_volume_sell_isSet) {
        obj.insert(QString("VOLUME_SELL"), ::OpenAPI::toJsonValue(volume_sell));
    }
    if (m_volume_unknown_isSet) {
        obj.insert(QString("VOLUME_UNKNOWN"), ::OpenAPI::toJsonValue(volume_unknown));
    }
    return obj;
}

QString OAISPOT_INSTRUMENT_HISTO_DATA::getBase() const {
    return base;
}
void OAISPOT_INSTRUMENT_HISTO_DATA::setBase(const QString &base) {
    this->base = base;
    this->m_base_isSet = true;
}

bool OAISPOT_INSTRUMENT_HISTO_DATA::is_base_Set() const{
    return m_base_isSet;
}

bool OAISPOT_INSTRUMENT_HISTO_DATA::is_base_Valid() const{
    return m_base_isValid;
}

qint32 OAISPOT_INSTRUMENT_HISTO_DATA::getClose() const {
    return close;
}
void OAISPOT_INSTRUMENT_HISTO_DATA::setClose(const qint32 &close) {
    this->close = close;
    this->m_close_isSet = true;
}

bool OAISPOT_INSTRUMENT_HISTO_DATA::is_close_Set() const{
    return m_close_isSet;
}

bool OAISPOT_INSTRUMENT_HISTO_DATA::is_close_Valid() const{
    return m_close_isValid;
}

qint32 OAISPOT_INSTRUMENT_HISTO_DATA::getFirstTradePrice() const {
    return first_trade_price;
}
void OAISPOT_INSTRUMENT_HISTO_DATA::setFirstTradePrice(const qint32 &first_trade_price) {
    this->first_trade_price = first_trade_price;
    this->m_first_trade_price_isSet = true;
}

bool OAISPOT_INSTRUMENT_HISTO_DATA::is_first_trade_price_Set() const{
    return m_first_trade_price_isSet;
}

bool OAISPOT_INSTRUMENT_HISTO_DATA::is_first_trade_price_Valid() const{
    return m_first_trade_price_isValid;
}

qint32 OAISPOT_INSTRUMENT_HISTO_DATA::getFirstTradeTimestamp() const {
    return first_trade_timestamp;
}
void OAISPOT_INSTRUMENT_HISTO_DATA::setFirstTradeTimestamp(const qint32 &first_trade_timestamp) {
    this->first_trade_timestamp = first_trade_timestamp;
    this->m_first_trade_timestamp_isSet = true;
}

bool OAISPOT_INSTRUMENT_HISTO_DATA::is_first_trade_timestamp_Set() const{
    return m_first_trade_timestamp_isSet;
}

bool OAISPOT_INSTRUMENT_HISTO_DATA::is_first_trade_timestamp_Valid() const{
    return m_first_trade_timestamp_isValid;
}

qint32 OAISPOT_INSTRUMENT_HISTO_DATA::getHigh() const {
    return high;
}
void OAISPOT_INSTRUMENT_HISTO_DATA::setHigh(const qint32 &high) {
    this->high = high;
    this->m_high_isSet = true;
}

bool OAISPOT_INSTRUMENT_HISTO_DATA::is_high_Set() const{
    return m_high_isSet;
}

bool OAISPOT_INSTRUMENT_HISTO_DATA::is_high_Valid() const{
    return m_high_isValid;
}

qint32 OAISPOT_INSTRUMENT_HISTO_DATA::getHighTradePrice() const {
    return high_trade_price;
}
void OAISPOT_INSTRUMENT_HISTO_DATA::setHighTradePrice(const qint32 &high_trade_price) {
    this->high_trade_price = high_trade_price;
    this->m_high_trade_price_isSet = true;
}

bool OAISPOT_INSTRUMENT_HISTO_DATA::is_high_trade_price_Set() const{
    return m_high_trade_price_isSet;
}

bool OAISPOT_INSTRUMENT_HISTO_DATA::is_high_trade_price_Valid() const{
    return m_high_trade_price_isValid;
}

qint32 OAISPOT_INSTRUMENT_HISTO_DATA::getHighTradeTimestamp() const {
    return high_trade_timestamp;
}
void OAISPOT_INSTRUMENT_HISTO_DATA::setHighTradeTimestamp(const qint32 &high_trade_timestamp) {
    this->high_trade_timestamp = high_trade_timestamp;
    this->m_high_trade_timestamp_isSet = true;
}

bool OAISPOT_INSTRUMENT_HISTO_DATA::is_high_trade_timestamp_Set() const{
    return m_high_trade_timestamp_isSet;
}

bool OAISPOT_INSTRUMENT_HISTO_DATA::is_high_trade_timestamp_Valid() const{
    return m_high_trade_timestamp_isValid;
}

QString OAISPOT_INSTRUMENT_HISTO_DATA::getInstrument() const {
    return instrument;
}
void OAISPOT_INSTRUMENT_HISTO_DATA::setInstrument(const QString &instrument) {
    this->instrument = instrument;
    this->m_instrument_isSet = true;
}

bool OAISPOT_INSTRUMENT_HISTO_DATA::is_instrument_Set() const{
    return m_instrument_isSet;
}

bool OAISPOT_INSTRUMENT_HISTO_DATA::is_instrument_Valid() const{
    return m_instrument_isValid;
}

qint32 OAISPOT_INSTRUMENT_HISTO_DATA::getLastTradePrice() const {
    return last_trade_price;
}
void OAISPOT_INSTRUMENT_HISTO_DATA::setLastTradePrice(const qint32 &last_trade_price) {
    this->last_trade_price = last_trade_price;
    this->m_last_trade_price_isSet = true;
}

bool OAISPOT_INSTRUMENT_HISTO_DATA::is_last_trade_price_Set() const{
    return m_last_trade_price_isSet;
}

bool OAISPOT_INSTRUMENT_HISTO_DATA::is_last_trade_price_Valid() const{
    return m_last_trade_price_isValid;
}

qint32 OAISPOT_INSTRUMENT_HISTO_DATA::getLastTradeTimestamp() const {
    return last_trade_timestamp;
}
void OAISPOT_INSTRUMENT_HISTO_DATA::setLastTradeTimestamp(const qint32 &last_trade_timestamp) {
    this->last_trade_timestamp = last_trade_timestamp;
    this->m_last_trade_timestamp_isSet = true;
}

bool OAISPOT_INSTRUMENT_HISTO_DATA::is_last_trade_timestamp_Set() const{
    return m_last_trade_timestamp_isSet;
}

bool OAISPOT_INSTRUMENT_HISTO_DATA::is_last_trade_timestamp_Valid() const{
    return m_last_trade_timestamp_isValid;
}

qint32 OAISPOT_INSTRUMENT_HISTO_DATA::getLow() const {
    return low;
}
void OAISPOT_INSTRUMENT_HISTO_DATA::setLow(const qint32 &low) {
    this->low = low;
    this->m_low_isSet = true;
}

bool OAISPOT_INSTRUMENT_HISTO_DATA::is_low_Set() const{
    return m_low_isSet;
}

bool OAISPOT_INSTRUMENT_HISTO_DATA::is_low_Valid() const{
    return m_low_isValid;
}

qint32 OAISPOT_INSTRUMENT_HISTO_DATA::getLowTradePrice() const {
    return low_trade_price;
}
void OAISPOT_INSTRUMENT_HISTO_DATA::setLowTradePrice(const qint32 &low_trade_price) {
    this->low_trade_price = low_trade_price;
    this->m_low_trade_price_isSet = true;
}

bool OAISPOT_INSTRUMENT_HISTO_DATA::is_low_trade_price_Set() const{
    return m_low_trade_price_isSet;
}

bool OAISPOT_INSTRUMENT_HISTO_DATA::is_low_trade_price_Valid() const{
    return m_low_trade_price_isValid;
}

qint32 OAISPOT_INSTRUMENT_HISTO_DATA::getLowTradeTimestamp() const {
    return low_trade_timestamp;
}
void OAISPOT_INSTRUMENT_HISTO_DATA::setLowTradeTimestamp(const qint32 &low_trade_timestamp) {
    this->low_trade_timestamp = low_trade_timestamp;
    this->m_low_trade_timestamp_isSet = true;
}

bool OAISPOT_INSTRUMENT_HISTO_DATA::is_low_trade_timestamp_Set() const{
    return m_low_trade_timestamp_isSet;
}

bool OAISPOT_INSTRUMENT_HISTO_DATA::is_low_trade_timestamp_Valid() const{
    return m_low_trade_timestamp_isValid;
}

QString OAISPOT_INSTRUMENT_HISTO_DATA::getMappedInstrument() const {
    return mapped_instrument;
}
void OAISPOT_INSTRUMENT_HISTO_DATA::setMappedInstrument(const QString &mapped_instrument) {
    this->mapped_instrument = mapped_instrument;
    this->m_mapped_instrument_isSet = true;
}

bool OAISPOT_INSTRUMENT_HISTO_DATA::is_mapped_instrument_Set() const{
    return m_mapped_instrument_isSet;
}

bool OAISPOT_INSTRUMENT_HISTO_DATA::is_mapped_instrument_Valid() const{
    return m_mapped_instrument_isValid;
}

QString OAISPOT_INSTRUMENT_HISTO_DATA::getMarket() const {
    return market;
}
void OAISPOT_INSTRUMENT_HISTO_DATA::setMarket(const QString &market) {
    this->market = market;
    this->m_market_isSet = true;
}

bool OAISPOT_INSTRUMENT_HISTO_DATA::is_market_Set() const{
    return m_market_isSet;
}

bool OAISPOT_INSTRUMENT_HISTO_DATA::is_market_Valid() const{
    return m_market_isValid;
}

qint32 OAISPOT_INSTRUMENT_HISTO_DATA::getOpen() const {
    return open;
}
void OAISPOT_INSTRUMENT_HISTO_DATA::setOpen(const qint32 &open) {
    this->open = open;
    this->m_open_isSet = true;
}

bool OAISPOT_INSTRUMENT_HISTO_DATA::is_open_Set() const{
    return m_open_isSet;
}

bool OAISPOT_INSTRUMENT_HISTO_DATA::is_open_Valid() const{
    return m_open_isValid;
}

QString OAISPOT_INSTRUMENT_HISTO_DATA::getQuote() const {
    return quote;
}
void OAISPOT_INSTRUMENT_HISTO_DATA::setQuote(const QString &quote) {
    this->quote = quote;
    this->m_quote_isSet = true;
}

bool OAISPOT_INSTRUMENT_HISTO_DATA::is_quote_Set() const{
    return m_quote_isSet;
}

bool OAISPOT_INSTRUMENT_HISTO_DATA::is_quote_Valid() const{
    return m_quote_isValid;
}

qint32 OAISPOT_INSTRUMENT_HISTO_DATA::getQuoteVolume() const {
    return quote_volume;
}
void OAISPOT_INSTRUMENT_HISTO_DATA::setQuoteVolume(const qint32 &quote_volume) {
    this->quote_volume = quote_volume;
    this->m_quote_volume_isSet = true;
}

bool OAISPOT_INSTRUMENT_HISTO_DATA::is_quote_volume_Set() const{
    return m_quote_volume_isSet;
}

bool OAISPOT_INSTRUMENT_HISTO_DATA::is_quote_volume_Valid() const{
    return m_quote_volume_isValid;
}

qint32 OAISPOT_INSTRUMENT_HISTO_DATA::getQuoteVolumeBuy() const {
    return quote_volume_buy;
}
void OAISPOT_INSTRUMENT_HISTO_DATA::setQuoteVolumeBuy(const qint32 &quote_volume_buy) {
    this->quote_volume_buy = quote_volume_buy;
    this->m_quote_volume_buy_isSet = true;
}

bool OAISPOT_INSTRUMENT_HISTO_DATA::is_quote_volume_buy_Set() const{
    return m_quote_volume_buy_isSet;
}

bool OAISPOT_INSTRUMENT_HISTO_DATA::is_quote_volume_buy_Valid() const{
    return m_quote_volume_buy_isValid;
}

qint32 OAISPOT_INSTRUMENT_HISTO_DATA::getQuoteVolumeSell() const {
    return quote_volume_sell;
}
void OAISPOT_INSTRUMENT_HISTO_DATA::setQuoteVolumeSell(const qint32 &quote_volume_sell) {
    this->quote_volume_sell = quote_volume_sell;
    this->m_quote_volume_sell_isSet = true;
}

bool OAISPOT_INSTRUMENT_HISTO_DATA::is_quote_volume_sell_Set() const{
    return m_quote_volume_sell_isSet;
}

bool OAISPOT_INSTRUMENT_HISTO_DATA::is_quote_volume_sell_Valid() const{
    return m_quote_volume_sell_isValid;
}

qint32 OAISPOT_INSTRUMENT_HISTO_DATA::getQuoteVolumeUnknown() const {
    return quote_volume_unknown;
}
void OAISPOT_INSTRUMENT_HISTO_DATA::setQuoteVolumeUnknown(const qint32 &quote_volume_unknown) {
    this->quote_volume_unknown = quote_volume_unknown;
    this->m_quote_volume_unknown_isSet = true;
}

bool OAISPOT_INSTRUMENT_HISTO_DATA::is_quote_volume_unknown_Set() const{
    return m_quote_volume_unknown_isSet;
}

bool OAISPOT_INSTRUMENT_HISTO_DATA::is_quote_volume_unknown_Valid() const{
    return m_quote_volume_unknown_isValid;
}

qint32 OAISPOT_INSTRUMENT_HISTO_DATA::getTimestamp() const {
    return timestamp;
}
void OAISPOT_INSTRUMENT_HISTO_DATA::setTimestamp(const qint32 &timestamp) {
    this->timestamp = timestamp;
    this->m_timestamp_isSet = true;
}

bool OAISPOT_INSTRUMENT_HISTO_DATA::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAISPOT_INSTRUMENT_HISTO_DATA::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

qint32 OAISPOT_INSTRUMENT_HISTO_DATA::getTotalTrades() const {
    return total_trades;
}
void OAISPOT_INSTRUMENT_HISTO_DATA::setTotalTrades(const qint32 &total_trades) {
    this->total_trades = total_trades;
    this->m_total_trades_isSet = true;
}

bool OAISPOT_INSTRUMENT_HISTO_DATA::is_total_trades_Set() const{
    return m_total_trades_isSet;
}

bool OAISPOT_INSTRUMENT_HISTO_DATA::is_total_trades_Valid() const{
    return m_total_trades_isValid;
}

qint32 OAISPOT_INSTRUMENT_HISTO_DATA::getTotalTradesBuy() const {
    return total_trades_buy;
}
void OAISPOT_INSTRUMENT_HISTO_DATA::setTotalTradesBuy(const qint32 &total_trades_buy) {
    this->total_trades_buy = total_trades_buy;
    this->m_total_trades_buy_isSet = true;
}

bool OAISPOT_INSTRUMENT_HISTO_DATA::is_total_trades_buy_Set() const{
    return m_total_trades_buy_isSet;
}

bool OAISPOT_INSTRUMENT_HISTO_DATA::is_total_trades_buy_Valid() const{
    return m_total_trades_buy_isValid;
}

qint32 OAISPOT_INSTRUMENT_HISTO_DATA::getTotalTradesSell() const {
    return total_trades_sell;
}
void OAISPOT_INSTRUMENT_HISTO_DATA::setTotalTradesSell(const qint32 &total_trades_sell) {
    this->total_trades_sell = total_trades_sell;
    this->m_total_trades_sell_isSet = true;
}

bool OAISPOT_INSTRUMENT_HISTO_DATA::is_total_trades_sell_Set() const{
    return m_total_trades_sell_isSet;
}

bool OAISPOT_INSTRUMENT_HISTO_DATA::is_total_trades_sell_Valid() const{
    return m_total_trades_sell_isValid;
}

qint32 OAISPOT_INSTRUMENT_HISTO_DATA::getTotalTradesUnknown() const {
    return total_trades_unknown;
}
void OAISPOT_INSTRUMENT_HISTO_DATA::setTotalTradesUnknown(const qint32 &total_trades_unknown) {
    this->total_trades_unknown = total_trades_unknown;
    this->m_total_trades_unknown_isSet = true;
}

bool OAISPOT_INSTRUMENT_HISTO_DATA::is_total_trades_unknown_Set() const{
    return m_total_trades_unknown_isSet;
}

bool OAISPOT_INSTRUMENT_HISTO_DATA::is_total_trades_unknown_Valid() const{
    return m_total_trades_unknown_isValid;
}

QString OAISPOT_INSTRUMENT_HISTO_DATA::getType() const {
    return type;
}
void OAISPOT_INSTRUMENT_HISTO_DATA::setType(const QString &type) {
    this->type = type;
    this->m_type_isSet = true;
}

bool OAISPOT_INSTRUMENT_HISTO_DATA::is_type_Set() const{
    return m_type_isSet;
}

bool OAISPOT_INSTRUMENT_HISTO_DATA::is_type_Valid() const{
    return m_type_isValid;
}

QString OAISPOT_INSTRUMENT_HISTO_DATA::getUnit() const {
    return unit;
}
void OAISPOT_INSTRUMENT_HISTO_DATA::setUnit(const QString &unit) {
    this->unit = unit;
    this->m_unit_isSet = true;
}

bool OAISPOT_INSTRUMENT_HISTO_DATA::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAISPOT_INSTRUMENT_HISTO_DATA::is_unit_Valid() const{
    return m_unit_isValid;
}

qint32 OAISPOT_INSTRUMENT_HISTO_DATA::getVolume() const {
    return volume;
}
void OAISPOT_INSTRUMENT_HISTO_DATA::setVolume(const qint32 &volume) {
    this->volume = volume;
    this->m_volume_isSet = true;
}

bool OAISPOT_INSTRUMENT_HISTO_DATA::is_volume_Set() const{
    return m_volume_isSet;
}

bool OAISPOT_INSTRUMENT_HISTO_DATA::is_volume_Valid() const{
    return m_volume_isValid;
}

qint32 OAISPOT_INSTRUMENT_HISTO_DATA::getVolumeBuy() const {
    return volume_buy;
}
void OAISPOT_INSTRUMENT_HISTO_DATA::setVolumeBuy(const qint32 &volume_buy) {
    this->volume_buy = volume_buy;
    this->m_volume_buy_isSet = true;
}

bool OAISPOT_INSTRUMENT_HISTO_DATA::is_volume_buy_Set() const{
    return m_volume_buy_isSet;
}

bool OAISPOT_INSTRUMENT_HISTO_DATA::is_volume_buy_Valid() const{
    return m_volume_buy_isValid;
}

qint32 OAISPOT_INSTRUMENT_HISTO_DATA::getVolumeSell() const {
    return volume_sell;
}
void OAISPOT_INSTRUMENT_HISTO_DATA::setVolumeSell(const qint32 &volume_sell) {
    this->volume_sell = volume_sell;
    this->m_volume_sell_isSet = true;
}

bool OAISPOT_INSTRUMENT_HISTO_DATA::is_volume_sell_Set() const{
    return m_volume_sell_isSet;
}

bool OAISPOT_INSTRUMENT_HISTO_DATA::is_volume_sell_Valid() const{
    return m_volume_sell_isValid;
}

qint32 OAISPOT_INSTRUMENT_HISTO_DATA::getVolumeUnknown() const {
    return volume_unknown;
}
void OAISPOT_INSTRUMENT_HISTO_DATA::setVolumeUnknown(const qint32 &volume_unknown) {
    this->volume_unknown = volume_unknown;
    this->m_volume_unknown_isSet = true;
}

bool OAISPOT_INSTRUMENT_HISTO_DATA::is_volume_unknown_Set() const{
    return m_volume_unknown_isSet;
}

bool OAISPOT_INSTRUMENT_HISTO_DATA::is_volume_unknown_Valid() const{
    return m_volume_unknown_isValid;
}

bool OAISPOT_INSTRUMENT_HISTO_DATA::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_close_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_trade_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_trade_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_high_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_high_trade_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_high_trade_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instrument_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_trade_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_trade_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_low_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_low_trade_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_low_trade_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mapped_instrument_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_market_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quote_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quote_volume_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quote_volume_buy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quote_volume_sell_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quote_volume_unknown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_trades_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_trades_buy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_trades_sell_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_trades_unknown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_buy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_sell_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_unknown_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISPOT_INSTRUMENT_HISTO_DATA::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
