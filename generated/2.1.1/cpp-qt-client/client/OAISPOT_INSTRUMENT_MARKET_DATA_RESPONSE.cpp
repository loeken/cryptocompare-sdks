/**
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 * CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: data@cryptocompare.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISPOT_INSTRUMENT_MARKET_DATA_RESPONSE.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISPOT_INSTRUMENT_MARKET_DATA_RESPONSE::OAISPOT_INSTRUMENT_MARKET_DATA_RESPONSE(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISPOT_INSTRUMENT_MARKET_DATA_RESPONSE::OAISPOT_INSTRUMENT_MARKET_DATA_RESPONSE() {
    this->initializeModel();
}

OAISPOT_INSTRUMENT_MARKET_DATA_RESPONSE::~OAISPOT_INSTRUMENT_MARKET_DATA_RESPONSE() {}

void OAISPOT_INSTRUMENT_MARKET_DATA_RESPONSE::initializeModel() {

    m_data_isSet = false;
    m_data_isValid = false;

    m_err_isSet = false;
    m_err_isValid = false;
}

void OAISPOT_INSTRUMENT_MARKET_DATA_RESPONSE::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISPOT_INSTRUMENT_MARKET_DATA_RESPONSE::fromJsonObject(QJsonObject json) {

    m_data_isValid = ::OpenAPI::fromJsonValue(data, json[QString("Data")]);
    m_data_isSet = !json[QString("Data")].isNull() && m_data_isValid;

    m_err_isValid = ::OpenAPI::fromJsonValue(err, json[QString("Err")]);
    m_err_isSet = !json[QString("Err")].isNull() && m_err_isValid;
}

QString OAISPOT_INSTRUMENT_MARKET_DATA_RESPONSE::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISPOT_INSTRUMENT_MARKET_DATA_RESPONSE::asJsonObject() const {
    QJsonObject obj;
    if (data.size() > 0) {
        obj.insert(QString("Data"), ::OpenAPI::toJsonValue(data));
    }
    if (err.isSet()) {
        obj.insert(QString("Err"), ::OpenAPI::toJsonValue(err));
    }
    return obj;
}

QMap<QString, OAISPOT_INSTRUMENT_MARKET_DATA> OAISPOT_INSTRUMENT_MARKET_DATA_RESPONSE::getData() const {
    return data;
}
void OAISPOT_INSTRUMENT_MARKET_DATA_RESPONSE::setData(const QMap<QString, OAISPOT_INSTRUMENT_MARKET_DATA> &data) {
    this->data = data;
    this->m_data_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA_RESPONSE::is_data_Set() const{
    return m_data_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA_RESPONSE::is_data_Valid() const{
    return m_data_isValid;
}

OAISPOT_INSTRUMENT_MARKET_DATA_RESPONSE_Err OAISPOT_INSTRUMENT_MARKET_DATA_RESPONSE::getErr() const {
    return err;
}
void OAISPOT_INSTRUMENT_MARKET_DATA_RESPONSE::setErr(const OAISPOT_INSTRUMENT_MARKET_DATA_RESPONSE_Err &err) {
    this->err = err;
    this->m_err_isSet = true;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA_RESPONSE::is_err_Set() const{
    return m_err_isSet;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA_RESPONSE::is_err_Valid() const{
    return m_err_isValid;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA_RESPONSE::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (err.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISPOT_INSTRUMENT_MARKET_DATA_RESPONSE::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
