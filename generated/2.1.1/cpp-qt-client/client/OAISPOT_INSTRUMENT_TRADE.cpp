/**
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 * CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: data@cryptocompare.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISPOT_INSTRUMENT_TRADE.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISPOT_INSTRUMENT_TRADE::OAISPOT_INSTRUMENT_TRADE(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISPOT_INSTRUMENT_TRADE::OAISPOT_INSTRUMENT_TRADE() {
    this->initializeModel();
}

OAISPOT_INSTRUMENT_TRADE::~OAISPOT_INSTRUMENT_TRADE() {}

void OAISPOT_INSTRUMENT_TRADE::initializeModel() {

    m_base_isSet = false;
    m_base_isValid = false;

    m_ccseq_isSet = false;
    m_ccseq_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_instrument_isSet = false;
    m_instrument_isValid = false;

    m_mapped_instrument_isSet = false;
    m_mapped_instrument_isValid = false;

    m_market_isSet = false;
    m_market_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_quote_isSet = false;
    m_quote_isValid = false;

    m_quote_quantity_isSet = false;
    m_quote_quantity_isValid = false;

    m_received_timestamp_isSet = false;
    m_received_timestamp_isValid = false;

    m_received_timestamp_ns_isSet = false;
    m_received_timestamp_ns_isValid = false;

    m_side_isSet = false;
    m_side_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_timestamp_ns_isSet = false;
    m_timestamp_ns_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAISPOT_INSTRUMENT_TRADE::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISPOT_INSTRUMENT_TRADE::fromJsonObject(QJsonObject json) {

    m_base_isValid = ::OpenAPI::fromJsonValue(base, json[QString("BASE")]);
    m_base_isSet = !json[QString("BASE")].isNull() && m_base_isValid;

    m_ccseq_isValid = ::OpenAPI::fromJsonValue(ccseq, json[QString("CCSEQ")]);
    m_ccseq_isSet = !json[QString("CCSEQ")].isNull() && m_ccseq_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("ID")]);
    m_id_isSet = !json[QString("ID")].isNull() && m_id_isValid;

    m_instrument_isValid = ::OpenAPI::fromJsonValue(instrument, json[QString("INSTRUMENT")]);
    m_instrument_isSet = !json[QString("INSTRUMENT")].isNull() && m_instrument_isValid;

    m_mapped_instrument_isValid = ::OpenAPI::fromJsonValue(mapped_instrument, json[QString("MAPPED_INSTRUMENT")]);
    m_mapped_instrument_isSet = !json[QString("MAPPED_INSTRUMENT")].isNull() && m_mapped_instrument_isValid;

    m_market_isValid = ::OpenAPI::fromJsonValue(market, json[QString("MARKET")]);
    m_market_isSet = !json[QString("MARKET")].isNull() && m_market_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(price, json[QString("PRICE")]);
    m_price_isSet = !json[QString("PRICE")].isNull() && m_price_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(quantity, json[QString("QUANTITY")]);
    m_quantity_isSet = !json[QString("QUANTITY")].isNull() && m_quantity_isValid;

    m_quote_isValid = ::OpenAPI::fromJsonValue(quote, json[QString("QUOTE")]);
    m_quote_isSet = !json[QString("QUOTE")].isNull() && m_quote_isValid;

    m_quote_quantity_isValid = ::OpenAPI::fromJsonValue(quote_quantity, json[QString("QUOTE_QUANTITY")]);
    m_quote_quantity_isSet = !json[QString("QUOTE_QUANTITY")].isNull() && m_quote_quantity_isValid;

    m_received_timestamp_isValid = ::OpenAPI::fromJsonValue(received_timestamp, json[QString("RECEIVED_TIMESTAMP")]);
    m_received_timestamp_isSet = !json[QString("RECEIVED_TIMESTAMP")].isNull() && m_received_timestamp_isValid;

    m_received_timestamp_ns_isValid = ::OpenAPI::fromJsonValue(received_timestamp_ns, json[QString("RECEIVED_TIMESTAMP_NS")]);
    m_received_timestamp_ns_isSet = !json[QString("RECEIVED_TIMESTAMP_NS")].isNull() && m_received_timestamp_ns_isValid;

    m_side_isValid = ::OpenAPI::fromJsonValue(side, json[QString("SIDE")]);
    m_side_isSet = !json[QString("SIDE")].isNull() && m_side_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(source, json[QString("SOURCE")]);
    m_source_isSet = !json[QString("SOURCE")].isNull() && m_source_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(timestamp, json[QString("TIMESTAMP")]);
    m_timestamp_isSet = !json[QString("TIMESTAMP")].isNull() && m_timestamp_isValid;

    m_timestamp_ns_isValid = ::OpenAPI::fromJsonValue(timestamp_ns, json[QString("TIMESTAMP_NS")]);
    m_timestamp_ns_isSet = !json[QString("TIMESTAMP_NS")].isNull() && m_timestamp_ns_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(type, json[QString("TYPE")]);
    m_type_isSet = !json[QString("TYPE")].isNull() && m_type_isValid;
}

QString OAISPOT_INSTRUMENT_TRADE::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISPOT_INSTRUMENT_TRADE::asJsonObject() const {
    QJsonObject obj;
    if (m_base_isSet) {
        obj.insert(QString("BASE"), ::OpenAPI::toJsonValue(base));
    }
    if (m_ccseq_isSet) {
        obj.insert(QString("CCSEQ"), ::OpenAPI::toJsonValue(ccseq));
    }
    if (m_id_isSet) {
        obj.insert(QString("ID"), ::OpenAPI::toJsonValue(id));
    }
    if (m_instrument_isSet) {
        obj.insert(QString("INSTRUMENT"), ::OpenAPI::toJsonValue(instrument));
    }
    if (m_mapped_instrument_isSet) {
        obj.insert(QString("MAPPED_INSTRUMENT"), ::OpenAPI::toJsonValue(mapped_instrument));
    }
    if (m_market_isSet) {
        obj.insert(QString("MARKET"), ::OpenAPI::toJsonValue(market));
    }
    if (m_price_isSet) {
        obj.insert(QString("PRICE"), ::OpenAPI::toJsonValue(price));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("QUANTITY"), ::OpenAPI::toJsonValue(quantity));
    }
    if (m_quote_isSet) {
        obj.insert(QString("QUOTE"), ::OpenAPI::toJsonValue(quote));
    }
    if (m_quote_quantity_isSet) {
        obj.insert(QString("QUOTE_QUANTITY"), ::OpenAPI::toJsonValue(quote_quantity));
    }
    if (m_received_timestamp_isSet) {
        obj.insert(QString("RECEIVED_TIMESTAMP"), ::OpenAPI::toJsonValue(received_timestamp));
    }
    if (m_received_timestamp_ns_isSet) {
        obj.insert(QString("RECEIVED_TIMESTAMP_NS"), ::OpenAPI::toJsonValue(received_timestamp_ns));
    }
    if (m_side_isSet) {
        obj.insert(QString("SIDE"), ::OpenAPI::toJsonValue(side));
    }
    if (m_source_isSet) {
        obj.insert(QString("SOURCE"), ::OpenAPI::toJsonValue(source));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("TIMESTAMP"), ::OpenAPI::toJsonValue(timestamp));
    }
    if (m_timestamp_ns_isSet) {
        obj.insert(QString("TIMESTAMP_NS"), ::OpenAPI::toJsonValue(timestamp_ns));
    }
    if (m_type_isSet) {
        obj.insert(QString("TYPE"), ::OpenAPI::toJsonValue(type));
    }
    return obj;
}

QString OAISPOT_INSTRUMENT_TRADE::getBase() const {
    return base;
}
void OAISPOT_INSTRUMENT_TRADE::setBase(const QString &base) {
    this->base = base;
    this->m_base_isSet = true;
}

bool OAISPOT_INSTRUMENT_TRADE::is_base_Set() const{
    return m_base_isSet;
}

bool OAISPOT_INSTRUMENT_TRADE::is_base_Valid() const{
    return m_base_isValid;
}

qint32 OAISPOT_INSTRUMENT_TRADE::getCcseq() const {
    return ccseq;
}
void OAISPOT_INSTRUMENT_TRADE::setCcseq(const qint32 &ccseq) {
    this->ccseq = ccseq;
    this->m_ccseq_isSet = true;
}

bool OAISPOT_INSTRUMENT_TRADE::is_ccseq_Set() const{
    return m_ccseq_isSet;
}

bool OAISPOT_INSTRUMENT_TRADE::is_ccseq_Valid() const{
    return m_ccseq_isValid;
}

QString OAISPOT_INSTRUMENT_TRADE::getId() const {
    return id;
}
void OAISPOT_INSTRUMENT_TRADE::setId(const QString &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool OAISPOT_INSTRUMENT_TRADE::is_id_Set() const{
    return m_id_isSet;
}

bool OAISPOT_INSTRUMENT_TRADE::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISPOT_INSTRUMENT_TRADE::getInstrument() const {
    return instrument;
}
void OAISPOT_INSTRUMENT_TRADE::setInstrument(const QString &instrument) {
    this->instrument = instrument;
    this->m_instrument_isSet = true;
}

bool OAISPOT_INSTRUMENT_TRADE::is_instrument_Set() const{
    return m_instrument_isSet;
}

bool OAISPOT_INSTRUMENT_TRADE::is_instrument_Valid() const{
    return m_instrument_isValid;
}

QString OAISPOT_INSTRUMENT_TRADE::getMappedInstrument() const {
    return mapped_instrument;
}
void OAISPOT_INSTRUMENT_TRADE::setMappedInstrument(const QString &mapped_instrument) {
    this->mapped_instrument = mapped_instrument;
    this->m_mapped_instrument_isSet = true;
}

bool OAISPOT_INSTRUMENT_TRADE::is_mapped_instrument_Set() const{
    return m_mapped_instrument_isSet;
}

bool OAISPOT_INSTRUMENT_TRADE::is_mapped_instrument_Valid() const{
    return m_mapped_instrument_isValid;
}

QString OAISPOT_INSTRUMENT_TRADE::getMarket() const {
    return market;
}
void OAISPOT_INSTRUMENT_TRADE::setMarket(const QString &market) {
    this->market = market;
    this->m_market_isSet = true;
}

bool OAISPOT_INSTRUMENT_TRADE::is_market_Set() const{
    return m_market_isSet;
}

bool OAISPOT_INSTRUMENT_TRADE::is_market_Valid() const{
    return m_market_isValid;
}

qint32 OAISPOT_INSTRUMENT_TRADE::getPrice() const {
    return price;
}
void OAISPOT_INSTRUMENT_TRADE::setPrice(const qint32 &price) {
    this->price = price;
    this->m_price_isSet = true;
}

bool OAISPOT_INSTRUMENT_TRADE::is_price_Set() const{
    return m_price_isSet;
}

bool OAISPOT_INSTRUMENT_TRADE::is_price_Valid() const{
    return m_price_isValid;
}

qint32 OAISPOT_INSTRUMENT_TRADE::getQuantity() const {
    return quantity;
}
void OAISPOT_INSTRUMENT_TRADE::setQuantity(const qint32 &quantity) {
    this->quantity = quantity;
    this->m_quantity_isSet = true;
}

bool OAISPOT_INSTRUMENT_TRADE::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAISPOT_INSTRUMENT_TRADE::is_quantity_Valid() const{
    return m_quantity_isValid;
}

QString OAISPOT_INSTRUMENT_TRADE::getQuote() const {
    return quote;
}
void OAISPOT_INSTRUMENT_TRADE::setQuote(const QString &quote) {
    this->quote = quote;
    this->m_quote_isSet = true;
}

bool OAISPOT_INSTRUMENT_TRADE::is_quote_Set() const{
    return m_quote_isSet;
}

bool OAISPOT_INSTRUMENT_TRADE::is_quote_Valid() const{
    return m_quote_isValid;
}

qint32 OAISPOT_INSTRUMENT_TRADE::getQuoteQuantity() const {
    return quote_quantity;
}
void OAISPOT_INSTRUMENT_TRADE::setQuoteQuantity(const qint32 &quote_quantity) {
    this->quote_quantity = quote_quantity;
    this->m_quote_quantity_isSet = true;
}

bool OAISPOT_INSTRUMENT_TRADE::is_quote_quantity_Set() const{
    return m_quote_quantity_isSet;
}

bool OAISPOT_INSTRUMENT_TRADE::is_quote_quantity_Valid() const{
    return m_quote_quantity_isValid;
}

qint32 OAISPOT_INSTRUMENT_TRADE::getReceivedTimestamp() const {
    return received_timestamp;
}
void OAISPOT_INSTRUMENT_TRADE::setReceivedTimestamp(const qint32 &received_timestamp) {
    this->received_timestamp = received_timestamp;
    this->m_received_timestamp_isSet = true;
}

bool OAISPOT_INSTRUMENT_TRADE::is_received_timestamp_Set() const{
    return m_received_timestamp_isSet;
}

bool OAISPOT_INSTRUMENT_TRADE::is_received_timestamp_Valid() const{
    return m_received_timestamp_isValid;
}

qint32 OAISPOT_INSTRUMENT_TRADE::getReceivedTimestampNs() const {
    return received_timestamp_ns;
}
void OAISPOT_INSTRUMENT_TRADE::setReceivedTimestampNs(const qint32 &received_timestamp_ns) {
    this->received_timestamp_ns = received_timestamp_ns;
    this->m_received_timestamp_ns_isSet = true;
}

bool OAISPOT_INSTRUMENT_TRADE::is_received_timestamp_ns_Set() const{
    return m_received_timestamp_ns_isSet;
}

bool OAISPOT_INSTRUMENT_TRADE::is_received_timestamp_ns_Valid() const{
    return m_received_timestamp_ns_isValid;
}

QString OAISPOT_INSTRUMENT_TRADE::getSide() const {
    return side;
}
void OAISPOT_INSTRUMENT_TRADE::setSide(const QString &side) {
    this->side = side;
    this->m_side_isSet = true;
}

bool OAISPOT_INSTRUMENT_TRADE::is_side_Set() const{
    return m_side_isSet;
}

bool OAISPOT_INSTRUMENT_TRADE::is_side_Valid() const{
    return m_side_isValid;
}

QString OAISPOT_INSTRUMENT_TRADE::getSource() const {
    return source;
}
void OAISPOT_INSTRUMENT_TRADE::setSource(const QString &source) {
    this->source = source;
    this->m_source_isSet = true;
}

bool OAISPOT_INSTRUMENT_TRADE::is_source_Set() const{
    return m_source_isSet;
}

bool OAISPOT_INSTRUMENT_TRADE::is_source_Valid() const{
    return m_source_isValid;
}

qint32 OAISPOT_INSTRUMENT_TRADE::getTimestamp() const {
    return timestamp;
}
void OAISPOT_INSTRUMENT_TRADE::setTimestamp(const qint32 &timestamp) {
    this->timestamp = timestamp;
    this->m_timestamp_isSet = true;
}

bool OAISPOT_INSTRUMENT_TRADE::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAISPOT_INSTRUMENT_TRADE::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

qint32 OAISPOT_INSTRUMENT_TRADE::getTimestampNs() const {
    return timestamp_ns;
}
void OAISPOT_INSTRUMENT_TRADE::setTimestampNs(const qint32 &timestamp_ns) {
    this->timestamp_ns = timestamp_ns;
    this->m_timestamp_ns_isSet = true;
}

bool OAISPOT_INSTRUMENT_TRADE::is_timestamp_ns_Set() const{
    return m_timestamp_ns_isSet;
}

bool OAISPOT_INSTRUMENT_TRADE::is_timestamp_ns_Valid() const{
    return m_timestamp_ns_isValid;
}

QString OAISPOT_INSTRUMENT_TRADE::getType() const {
    return type;
}
void OAISPOT_INSTRUMENT_TRADE::setType(const QString &type) {
    this->type = type;
    this->m_type_isSet = true;
}

bool OAISPOT_INSTRUMENT_TRADE::is_type_Set() const{
    return m_type_isSet;
}

bool OAISPOT_INSTRUMENT_TRADE::is_type_Valid() const{
    return m_type_isValid;
}

bool OAISPOT_INSTRUMENT_TRADE::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ccseq_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instrument_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mapped_instrument_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_market_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quote_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quote_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_received_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_received_timestamp_ns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_side_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_ns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISPOT_INSTRUMENT_TRADE::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
