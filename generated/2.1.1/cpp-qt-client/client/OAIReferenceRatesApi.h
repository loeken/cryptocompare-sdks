/**
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 * CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: data@cryptocompare.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIReferenceRatesApi_H
#define OAI_OAIReferenceRatesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAIGENERIC_RESPONSE.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIReferenceRatesApi : public QObject {
    Q_OBJECT

public:
    OAIReferenceRatesApi(const int timeOut = 0);
    ~OAIReferenceRatesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  market QString [required]
    * @param[in]  instrument QString [required]
    * @param[in]  groups QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  to_ts qint32 [optional]
    * @param[in]  aggregate qint32 [optional]
    * @param[in]  fill bool [optional]
    * @param[in]  mapping_priority QString [optional]
    * @param[in]  response_format QString [optional]
    */
    void indexCcV1HistoricalDays(const QString &market, const QString &instrument, const ::OpenAPI::OptionalParam<QList<QString>> &groups = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &to_ts = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &aggregate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &fill = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &mapping_priority = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  market QString [required]
    * @param[in]  instrument QString [required]
    * @param[in]  groups QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  to_ts qint32 [optional]
    * @param[in]  aggregate qint32 [optional]
    * @param[in]  fill bool [optional]
    * @param[in]  mapping_priority QString [optional]
    * @param[in]  response_format QString [optional]
    */
    void indexCcV1HistoricalHours(const QString &market, const QString &instrument, const ::OpenAPI::OptionalParam<QList<QString>> &groups = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &to_ts = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &aggregate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &fill = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &mapping_priority = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  market QString [required]
    * @param[in]  instrument QString [required]
    * @param[in]  after_ts qint32 [optional]
    * @param[in]  last_ccseq qint32 [optional]
    * @param[in]  mapping_priority QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  response_format QString [optional]
    * @param[in]  return_404_on_empty_response bool [optional]
    */
    void indexCcV1HistoricalMessages(const QString &market, const QString &instrument, const ::OpenAPI::OptionalParam<qint32> &after_ts = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &last_ccseq = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &mapping_priority = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &response_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_404_on_empty_response = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  market QString [required]
    * @param[in]  instrument QString [required]
    * @param[in]  hour_ts qint32 [optional]
    * @param[in]  mapping_priority QString [optional]
    * @param[in]  response_format QString [optional]
    * @param[in]  return_404_on_empty_response bool [optional]
    */
    void indexCcV1HistoricalMessagesHour(const QString &market, const QString &instrument, const ::OpenAPI::OptionalParam<qint32> &hour_ts = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &mapping_priority = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_404_on_empty_response = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  market QString [required]
    * @param[in]  instrument QString [required]
    * @param[in]  groups QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  to_ts qint32 [optional]
    * @param[in]  aggregate qint32 [optional]
    * @param[in]  fill bool [optional]
    * @param[in]  mapping_priority QString [optional]
    * @param[in]  response_format QString [optional]
    */
    void indexCcV1HistoricalMinutes(const QString &market, const QString &instrument, const ::OpenAPI::OptionalParam<QList<QString>> &groups = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &to_ts = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &aggregate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &fill = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &mapping_priority = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  market QString [required]
    * @param[in]  instruments QList<QString> [required]
    * @param[in]  groups QList<QString> [optional]
    * @param[in]  mapping_priority QString [optional]
    */
    void indexCcV1LatestInstrumentMetadata(const QString &market, const QList<QString> &instruments, const ::OpenAPI::OptionalParam<QList<QString>> &groups = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &mapping_priority = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  market QString [required]
    * @param[in]  instruments QList<QString> [required]
    * @param[in]  groups QList<QString> [optional]
    * @param[in]  mapping_priority QString [optional]
    */
    void indexCcV1LatestTick(const QString &market, const QList<QString> &instruments, const ::OpenAPI::OptionalParam<QList<QString>> &groups = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &mapping_priority = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  market QString [optional]
    */
    void indexCcV1Markets(const ::OpenAPI::OptionalParam<QString> &market = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  market QString [optional]
    * @param[in]  instrument QString [optional]
    * @param[in]  instrument_status QList<QString> [optional]
    */
    void indexCcV1MarketsInstruments(const ::OpenAPI::OptionalParam<QString> &market = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &instrument = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &instrument_status = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  market QString [optional]
    * @param[in]  instrument QString [optional]
    * @param[in]  instrument_status QList<QString> [optional]
    */
    void indexCcV1MarketsInstrumentsUnmapped(const ::OpenAPI::OptionalParam<QString> &market = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &instrument = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &instrument_status = ::OpenAPI::OptionalParam<QList<QString>>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void indexCcV1HistoricalDaysCallback(OAIHttpRequestWorker *worker);
    void indexCcV1HistoricalHoursCallback(OAIHttpRequestWorker *worker);
    void indexCcV1HistoricalMessagesCallback(OAIHttpRequestWorker *worker);
    void indexCcV1HistoricalMessagesHourCallback(OAIHttpRequestWorker *worker);
    void indexCcV1HistoricalMinutesCallback(OAIHttpRequestWorker *worker);
    void indexCcV1LatestInstrumentMetadataCallback(OAIHttpRequestWorker *worker);
    void indexCcV1LatestTickCallback(OAIHttpRequestWorker *worker);
    void indexCcV1MarketsCallback(OAIHttpRequestWorker *worker);
    void indexCcV1MarketsInstrumentsCallback(OAIHttpRequestWorker *worker);
    void indexCcV1MarketsInstrumentsUnmappedCallback(OAIHttpRequestWorker *worker);

signals:

    void indexCcV1HistoricalDaysSignal(OAIGENERIC_RESPONSE summary);
    void indexCcV1HistoricalHoursSignal(OAIGENERIC_RESPONSE summary);
    void indexCcV1HistoricalMessagesSignal(OAIGENERIC_RESPONSE summary);
    void indexCcV1HistoricalMessagesHourSignal(OAIGENERIC_RESPONSE summary);
    void indexCcV1HistoricalMinutesSignal(OAIGENERIC_RESPONSE summary);
    void indexCcV1LatestInstrumentMetadataSignal(OAIGENERIC_RESPONSE summary);
    void indexCcV1LatestTickSignal(OAIGENERIC_RESPONSE summary);
    void indexCcV1MarketsSignal(OAIGENERIC_RESPONSE summary);
    void indexCcV1MarketsInstrumentsSignal(OAIGENERIC_RESPONSE summary);
    void indexCcV1MarketsInstrumentsUnmappedSignal(OAIGENERIC_RESPONSE summary);

    void indexCcV1HistoricalDaysSignalFull(OAIHttpRequestWorker *worker, OAIGENERIC_RESPONSE summary);
    void indexCcV1HistoricalHoursSignalFull(OAIHttpRequestWorker *worker, OAIGENERIC_RESPONSE summary);
    void indexCcV1HistoricalMessagesSignalFull(OAIHttpRequestWorker *worker, OAIGENERIC_RESPONSE summary);
    void indexCcV1HistoricalMessagesHourSignalFull(OAIHttpRequestWorker *worker, OAIGENERIC_RESPONSE summary);
    void indexCcV1HistoricalMinutesSignalFull(OAIHttpRequestWorker *worker, OAIGENERIC_RESPONSE summary);
    void indexCcV1LatestInstrumentMetadataSignalFull(OAIHttpRequestWorker *worker, OAIGENERIC_RESPONSE summary);
    void indexCcV1LatestTickSignalFull(OAIHttpRequestWorker *worker, OAIGENERIC_RESPONSE summary);
    void indexCcV1MarketsSignalFull(OAIHttpRequestWorker *worker, OAIGENERIC_RESPONSE summary);
    void indexCcV1MarketsInstrumentsSignalFull(OAIHttpRequestWorker *worker, OAIGENERIC_RESPONSE summary);
    void indexCcV1MarketsInstrumentsUnmappedSignalFull(OAIHttpRequestWorker *worker, OAIGENERIC_RESPONSE summary);

    void indexCcV1HistoricalDaysSignalE(OAIGENERIC_RESPONSE summary, QNetworkReply::NetworkError error_type, QString error_str);
    void indexCcV1HistoricalHoursSignalE(OAIGENERIC_RESPONSE summary, QNetworkReply::NetworkError error_type, QString error_str);
    void indexCcV1HistoricalMessagesSignalE(OAIGENERIC_RESPONSE summary, QNetworkReply::NetworkError error_type, QString error_str);
    void indexCcV1HistoricalMessagesHourSignalE(OAIGENERIC_RESPONSE summary, QNetworkReply::NetworkError error_type, QString error_str);
    void indexCcV1HistoricalMinutesSignalE(OAIGENERIC_RESPONSE summary, QNetworkReply::NetworkError error_type, QString error_str);
    void indexCcV1LatestInstrumentMetadataSignalE(OAIGENERIC_RESPONSE summary, QNetworkReply::NetworkError error_type, QString error_str);
    void indexCcV1LatestTickSignalE(OAIGENERIC_RESPONSE summary, QNetworkReply::NetworkError error_type, QString error_str);
    void indexCcV1MarketsSignalE(OAIGENERIC_RESPONSE summary, QNetworkReply::NetworkError error_type, QString error_str);
    void indexCcV1MarketsInstrumentsSignalE(OAIGENERIC_RESPONSE summary, QNetworkReply::NetworkError error_type, QString error_str);
    void indexCcV1MarketsInstrumentsUnmappedSignalE(OAIGENERIC_RESPONSE summary, QNetworkReply::NetworkError error_type, QString error_str);

    void indexCcV1HistoricalDaysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void indexCcV1HistoricalHoursSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void indexCcV1HistoricalMessagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void indexCcV1HistoricalMessagesHourSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void indexCcV1HistoricalMinutesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void indexCcV1LatestInstrumentMetadataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void indexCcV1LatestTickSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void indexCcV1MarketsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void indexCcV1MarketsInstrumentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void indexCcV1MarketsInstrumentsUnmappedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public slots:
    void tokenAvailable();
    
};

} // namespace OpenAPI
#endif
