=begin comment

CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry

CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.

The version of the OpenAPI document: 2.1.1
Contact: data@cryptocompare.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::ReferenceRatesApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# index_cc_v1_historical_days
#
# 
#
# @param string $market The exchange to obtain data from (required)
# @param string $instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
# @param ARRAY[string] $groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME (optional)
# @param int $limit The number of data points to return (optional, default to 30)
# @param int $to_ts Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
# @param int $aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
# @param boolean $fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
# @param string $mapping_priority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to 'CHECK_MAPPED_FIRST')
# @param string $response_format The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to 'JSON')
{
    my $params = {
    'market' => {
        data_type => 'string',
        description => 'The exchange to obtain data from',
        required => '1',
    },
    'instrument' => {
        data_type => 'string',
        description => 'The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.',
        required => '1',
    },
    'groups' => {
        data_type => 'ARRAY[string]',
        description => 'When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'The number of data points to return',
        required => '0',
    },
    'to_ts' => {
        data_type => 'int',
        description => 'Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}',
        required => '0',
    },
    'aggregate' => {
        data_type => 'int',
        description => 'The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries',
        required => '0',
    },
    'fill' => {
        data_type => 'boolean',
        description => 'Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.',
        required => '0',
    },
    'mapping_priority' => {
        data_type => 'string',
        description => 'The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST',
        required => '0',
    },
    'response_format' => {
        data_type => 'string',
        description => 'The format of the data response in uppercase. It can be one of the following: JSON,CSV',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'index_cc_v1_historical_days' } = {
        summary => '',
        params => $params,
        returns => 'GENERICRESPONSE',
        };
}
# @return GENERICRESPONSE
#
sub index_cc_v1_historical_days {
    my ($self, %args) = @_;

    # verify the required parameter 'market' is set
    unless (exists $args{'market'}) {
      croak("Missing the required parameter 'market' when calling index_cc_v1_historical_days");
    }

    # verify the required parameter 'instrument' is set
    unless (exists $args{'instrument'}) {
      croak("Missing the required parameter 'instrument' when calling index_cc_v1_historical_days");
    }

    # parse inputs
    my $_resource_path = '/index/cc/v1/historical/days';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'market'}) {
        $query_params->{'market'} = $self->{api_client}->to_query_value($args{'market'});
    }

    # query params
    if ( exists $args{'instrument'}) {
        $query_params->{'instrument'} = $self->{api_client}->to_query_value($args{'instrument'});
    }

    # query params
    if ( exists $args{'groups'}) {
        $query_params->{'groups'} = $self->{api_client}->to_query_value($args{'groups'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'to_ts'}) {
        $query_params->{'to_ts'} = $self->{api_client}->to_query_value($args{'to_ts'});
    }

    # query params
    if ( exists $args{'aggregate'}) {
        $query_params->{'aggregate'} = $self->{api_client}->to_query_value($args{'aggregate'});
    }

    # query params
    if ( exists $args{'fill'}) {
        $query_params->{'fill'} = $self->{api_client}->to_query_value($args{'fill'});
    }

    # query params
    if ( exists $args{'mapping_priority'}) {
        $query_params->{'mapping_priority'} = $self->{api_client}->to_query_value($args{'mapping_priority'});
    }

    # query params
    if ( exists $args{'response_format'}) {
        $query_params->{'response_format'} = $self->{api_client}->to_query_value($args{'response_format'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GENERICRESPONSE', $response);
    return $_response_object;
}

#
# index_cc_v1_historical_hours
#
# 
#
# @param string $market The exchange to obtain data from (required)
# @param string $instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
# @param ARRAY[string] $groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME (optional)
# @param int $limit The number of data points to return (optional, default to 30)
# @param int $to_ts Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
# @param int $aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
# @param boolean $fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
# @param string $mapping_priority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to 'CHECK_MAPPED_FIRST')
# @param string $response_format The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to 'JSON')
{
    my $params = {
    'market' => {
        data_type => 'string',
        description => 'The exchange to obtain data from',
        required => '1',
    },
    'instrument' => {
        data_type => 'string',
        description => 'The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.',
        required => '1',
    },
    'groups' => {
        data_type => 'ARRAY[string]',
        description => 'When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'The number of data points to return',
        required => '0',
    },
    'to_ts' => {
        data_type => 'int',
        description => 'Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}',
        required => '0',
    },
    'aggregate' => {
        data_type => 'int',
        description => 'The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries',
        required => '0',
    },
    'fill' => {
        data_type => 'boolean',
        description => 'Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.',
        required => '0',
    },
    'mapping_priority' => {
        data_type => 'string',
        description => 'The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST',
        required => '0',
    },
    'response_format' => {
        data_type => 'string',
        description => 'The format of the data response in uppercase. It can be one of the following: JSON,CSV',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'index_cc_v1_historical_hours' } = {
        summary => '',
        params => $params,
        returns => 'GENERICRESPONSE',
        };
}
# @return GENERICRESPONSE
#
sub index_cc_v1_historical_hours {
    my ($self, %args) = @_;

    # verify the required parameter 'market' is set
    unless (exists $args{'market'}) {
      croak("Missing the required parameter 'market' when calling index_cc_v1_historical_hours");
    }

    # verify the required parameter 'instrument' is set
    unless (exists $args{'instrument'}) {
      croak("Missing the required parameter 'instrument' when calling index_cc_v1_historical_hours");
    }

    # parse inputs
    my $_resource_path = '/index/cc/v1/historical/hours';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'market'}) {
        $query_params->{'market'} = $self->{api_client}->to_query_value($args{'market'});
    }

    # query params
    if ( exists $args{'instrument'}) {
        $query_params->{'instrument'} = $self->{api_client}->to_query_value($args{'instrument'});
    }

    # query params
    if ( exists $args{'groups'}) {
        $query_params->{'groups'} = $self->{api_client}->to_query_value($args{'groups'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'to_ts'}) {
        $query_params->{'to_ts'} = $self->{api_client}->to_query_value($args{'to_ts'});
    }

    # query params
    if ( exists $args{'aggregate'}) {
        $query_params->{'aggregate'} = $self->{api_client}->to_query_value($args{'aggregate'});
    }

    # query params
    if ( exists $args{'fill'}) {
        $query_params->{'fill'} = $self->{api_client}->to_query_value($args{'fill'});
    }

    # query params
    if ( exists $args{'mapping_priority'}) {
        $query_params->{'mapping_priority'} = $self->{api_client}->to_query_value($args{'mapping_priority'});
    }

    # query params
    if ( exists $args{'response_format'}) {
        $query_params->{'response_format'} = $self->{api_client}->to_query_value($args{'response_format'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GENERICRESPONSE', $response);
    return $_response_object;
}

#
# index_cc_v1_historical_messages
#
# 
#
# @param string $market The exchange to obtain data from (required)
# @param string $instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
# @param int $after_ts Unix timestamp in seconds of the earliest index message in the response (optional)
# @param int $last_ccseq The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request. (optional, default to 0)
# @param string $mapping_priority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to 'CHECK_MAPPED_FIRST')
# @param int $limit The maximum number of index messages to return (optional, default to 100)
# @param string $response_format The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to 'JSON')
# @param boolean $return_404_on_empty_response If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)
{
    my $params = {
    'market' => {
        data_type => 'string',
        description => 'The exchange to obtain data from',
        required => '1',
    },
    'instrument' => {
        data_type => 'string',
        description => 'The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.',
        required => '1',
    },
    'after_ts' => {
        data_type => 'int',
        description => 'Unix timestamp in seconds of the earliest index message in the response',
        required => '0',
    },
    'last_ccseq' => {
        data_type => 'int',
        description => 'The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request.',
        required => '0',
    },
    'mapping_priority' => {
        data_type => 'string',
        description => 'The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'The maximum number of index messages to return',
        required => '0',
    },
    'response_format' => {
        data_type => 'string',
        description => 'The format of the data response in uppercase. It can be one of the following: JSON,CSV',
        required => '0',
    },
    'return_404_on_empty_response' => {
        data_type => 'boolean',
        description => 'If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'index_cc_v1_historical_messages' } = {
        summary => '',
        params => $params,
        returns => 'GENERICRESPONSE',
        };
}
# @return GENERICRESPONSE
#
sub index_cc_v1_historical_messages {
    my ($self, %args) = @_;

    # verify the required parameter 'market' is set
    unless (exists $args{'market'}) {
      croak("Missing the required parameter 'market' when calling index_cc_v1_historical_messages");
    }

    # verify the required parameter 'instrument' is set
    unless (exists $args{'instrument'}) {
      croak("Missing the required parameter 'instrument' when calling index_cc_v1_historical_messages");
    }

    # parse inputs
    my $_resource_path = '/index/cc/v1/historical/messages';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'market'}) {
        $query_params->{'market'} = $self->{api_client}->to_query_value($args{'market'});
    }

    # query params
    if ( exists $args{'instrument'}) {
        $query_params->{'instrument'} = $self->{api_client}->to_query_value($args{'instrument'});
    }

    # query params
    if ( exists $args{'after_ts'}) {
        $query_params->{'after_ts'} = $self->{api_client}->to_query_value($args{'after_ts'});
    }

    # query params
    if ( exists $args{'last_ccseq'}) {
        $query_params->{'last_ccseq'} = $self->{api_client}->to_query_value($args{'last_ccseq'});
    }

    # query params
    if ( exists $args{'mapping_priority'}) {
        $query_params->{'mapping_priority'} = $self->{api_client}->to_query_value($args{'mapping_priority'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'response_format'}) {
        $query_params->{'response_format'} = $self->{api_client}->to_query_value($args{'response_format'});
    }

    # query params
    if ( exists $args{'return_404_on_empty_response'}) {
        $query_params->{'return_404_on_empty_response'} = $self->{api_client}->to_query_value($args{'return_404_on_empty_response'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(api_key_header api_key_query )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GENERICRESPONSE', $response);
    return $_response_object;
}

#
# index_cc_v1_historical_messages_hour
#
# 
#
# @param string $market The exchange to obtain data from (required)
# @param string $instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
# @param int $hour_ts Unix timestamp in seconds for the hour containing the index updates you are interested in. You can pass any timestamp in the hour but we will round it down the the full hour timestmap and return all index updates in that hour. (optional)
# @param string $mapping_priority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to 'CHECK_MAPPED_FIRST')
# @param string $response_format The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to 'JSON')
# @param boolean $return_404_on_empty_response If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)
{
    my $params = {
    'market' => {
        data_type => 'string',
        description => 'The exchange to obtain data from',
        required => '1',
    },
    'instrument' => {
        data_type => 'string',
        description => 'The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.',
        required => '1',
    },
    'hour_ts' => {
        data_type => 'int',
        description => 'Unix timestamp in seconds for the hour containing the index updates you are interested in. You can pass any timestamp in the hour but we will round it down the the full hour timestmap and return all index updates in that hour.',
        required => '0',
    },
    'mapping_priority' => {
        data_type => 'string',
        description => 'The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST',
        required => '0',
    },
    'response_format' => {
        data_type => 'string',
        description => 'The format of the data response in uppercase. It can be one of the following: JSON,CSV',
        required => '0',
    },
    'return_404_on_empty_response' => {
        data_type => 'boolean',
        description => 'If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'index_cc_v1_historical_messages_hour' } = {
        summary => '',
        params => $params,
        returns => 'GENERICRESPONSE',
        };
}
# @return GENERICRESPONSE
#
sub index_cc_v1_historical_messages_hour {
    my ($self, %args) = @_;

    # verify the required parameter 'market' is set
    unless (exists $args{'market'}) {
      croak("Missing the required parameter 'market' when calling index_cc_v1_historical_messages_hour");
    }

    # verify the required parameter 'instrument' is set
    unless (exists $args{'instrument'}) {
      croak("Missing the required parameter 'instrument' when calling index_cc_v1_historical_messages_hour");
    }

    # parse inputs
    my $_resource_path = '/index/cc/v1/historical/messages/hour';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'market'}) {
        $query_params->{'market'} = $self->{api_client}->to_query_value($args{'market'});
    }

    # query params
    if ( exists $args{'instrument'}) {
        $query_params->{'instrument'} = $self->{api_client}->to_query_value($args{'instrument'});
    }

    # query params
    if ( exists $args{'hour_ts'}) {
        $query_params->{'hour_ts'} = $self->{api_client}->to_query_value($args{'hour_ts'});
    }

    # query params
    if ( exists $args{'mapping_priority'}) {
        $query_params->{'mapping_priority'} = $self->{api_client}->to_query_value($args{'mapping_priority'});
    }

    # query params
    if ( exists $args{'response_format'}) {
        $query_params->{'response_format'} = $self->{api_client}->to_query_value($args{'response_format'});
    }

    # query params
    if ( exists $args{'return_404_on_empty_response'}) {
        $query_params->{'return_404_on_empty_response'} = $self->{api_client}->to_query_value($args{'return_404_on_empty_response'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(api_key_header api_key_query )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GENERICRESPONSE', $response);
    return $_response_object;
}

#
# index_cc_v1_historical_minutes
#
# 
#
# @param string $market The exchange to obtain data from (required)
# @param string $instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
# @param ARRAY[string] $groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME (optional)
# @param int $limit The number of data points to return (optional, default to 30)
# @param int $to_ts Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
# @param int $aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
# @param boolean $fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
# @param string $mapping_priority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to 'CHECK_MAPPED_FIRST')
# @param string $response_format The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to 'JSON')
{
    my $params = {
    'market' => {
        data_type => 'string',
        description => 'The exchange to obtain data from',
        required => '1',
    },
    'instrument' => {
        data_type => 'string',
        description => 'The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.',
        required => '1',
    },
    'groups' => {
        data_type => 'ARRAY[string]',
        description => 'When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'The number of data points to return',
        required => '0',
    },
    'to_ts' => {
        data_type => 'int',
        description => 'Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}',
        required => '0',
    },
    'aggregate' => {
        data_type => 'int',
        description => 'The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries',
        required => '0',
    },
    'fill' => {
        data_type => 'boolean',
        description => 'Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.',
        required => '0',
    },
    'mapping_priority' => {
        data_type => 'string',
        description => 'The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST',
        required => '0',
    },
    'response_format' => {
        data_type => 'string',
        description => 'The format of the data response in uppercase. It can be one of the following: JSON,CSV',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'index_cc_v1_historical_minutes' } = {
        summary => '',
        params => $params,
        returns => 'GENERICRESPONSE',
        };
}
# @return GENERICRESPONSE
#
sub index_cc_v1_historical_minutes {
    my ($self, %args) = @_;

    # verify the required parameter 'market' is set
    unless (exists $args{'market'}) {
      croak("Missing the required parameter 'market' when calling index_cc_v1_historical_minutes");
    }

    # verify the required parameter 'instrument' is set
    unless (exists $args{'instrument'}) {
      croak("Missing the required parameter 'instrument' when calling index_cc_v1_historical_minutes");
    }

    # parse inputs
    my $_resource_path = '/index/cc/v1/historical/minutes';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'market'}) {
        $query_params->{'market'} = $self->{api_client}->to_query_value($args{'market'});
    }

    # query params
    if ( exists $args{'instrument'}) {
        $query_params->{'instrument'} = $self->{api_client}->to_query_value($args{'instrument'});
    }

    # query params
    if ( exists $args{'groups'}) {
        $query_params->{'groups'} = $self->{api_client}->to_query_value($args{'groups'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'to_ts'}) {
        $query_params->{'to_ts'} = $self->{api_client}->to_query_value($args{'to_ts'});
    }

    # query params
    if ( exists $args{'aggregate'}) {
        $query_params->{'aggregate'} = $self->{api_client}->to_query_value($args{'aggregate'});
    }

    # query params
    if ( exists $args{'fill'}) {
        $query_params->{'fill'} = $self->{api_client}->to_query_value($args{'fill'});
    }

    # query params
    if ( exists $args{'mapping_priority'}) {
        $query_params->{'mapping_priority'} = $self->{api_client}->to_query_value($args{'mapping_priority'});
    }

    # query params
    if ( exists $args{'response_format'}) {
        $query_params->{'response_format'} = $self->{api_client}->to_query_value($args{'response_format'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GENERICRESPONSE', $response);
    return $_response_object;
}

#
# index_cc_v1_latest_instrument_metadata
#
# 
#
# @param string $market The exchange to obtain data from (required)
# @param ARRAY[string] $instruments A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first. (required)
# @param ARRAY[string] $groups When requesting metadata entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: STATUS,INTERNAL,GENERAL,MIGRATION,SOURCE (optional)
# @param string $mapping_priority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to 'CHECK_MAPPED_FIRST')
{
    my $params = {
    'market' => {
        data_type => 'string',
        description => 'The exchange to obtain data from',
        required => '1',
    },
    'instruments' => {
        data_type => 'ARRAY[string]',
        description => 'A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.',
        required => '1',
    },
    'groups' => {
        data_type => 'ARRAY[string]',
        description => 'When requesting metadata entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: STATUS,INTERNAL,GENERAL,MIGRATION,SOURCE',
        required => '0',
    },
    'mapping_priority' => {
        data_type => 'string',
        description => 'The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'index_cc_v1_latest_instrument_metadata' } = {
        summary => '',
        params => $params,
        returns => 'GENERICRESPONSE',
        };
}
# @return GENERICRESPONSE
#
sub index_cc_v1_latest_instrument_metadata {
    my ($self, %args) = @_;

    # verify the required parameter 'market' is set
    unless (exists $args{'market'}) {
      croak("Missing the required parameter 'market' when calling index_cc_v1_latest_instrument_metadata");
    }

    # verify the required parameter 'instruments' is set
    unless (exists $args{'instruments'}) {
      croak("Missing the required parameter 'instruments' when calling index_cc_v1_latest_instrument_metadata");
    }

    # parse inputs
    my $_resource_path = '/index/cc/v1/latest/instrument/metadata';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'market'}) {
        $query_params->{'market'} = $self->{api_client}->to_query_value($args{'market'});
    }

    # query params
    if ( exists $args{'instruments'}) {
        $query_params->{'instruments'} = $self->{api_client}->to_query_value($args{'instruments'});
    }

    # query params
    if ( exists $args{'groups'}) {
        $query_params->{'groups'} = $self->{api_client}->to_query_value($args{'groups'});
    }

    # query params
    if ( exists $args{'mapping_priority'}) {
        $query_params->{'mapping_priority'} = $self->{api_client}->to_query_value($args{'mapping_priority'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GENERICRESPONSE', $response);
    return $_response_object;
}

#
# index_cc_v1_latest_tick
#
# 
#
# @param string $market The exchange to obtain data from (required)
# @param ARRAY[string] $instruments A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first. (required)
# @param ARRAY[string] $groups When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME (optional)
# @param string $mapping_priority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to 'CHECK_MAPPED_FIRST')
{
    my $params = {
    'market' => {
        data_type => 'string',
        description => 'The exchange to obtain data from',
        required => '1',
    },
    'instruments' => {
        data_type => 'ARRAY[string]',
        description => 'A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.',
        required => '1',
    },
    'groups' => {
        data_type => 'ARRAY[string]',
        description => 'When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME',
        required => '0',
    },
    'mapping_priority' => {
        data_type => 'string',
        description => 'The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'index_cc_v1_latest_tick' } = {
        summary => '',
        params => $params,
        returns => 'GENERICRESPONSE',
        };
}
# @return GENERICRESPONSE
#
sub index_cc_v1_latest_tick {
    my ($self, %args) = @_;

    # verify the required parameter 'market' is set
    unless (exists $args{'market'}) {
      croak("Missing the required parameter 'market' when calling index_cc_v1_latest_tick");
    }

    # verify the required parameter 'instruments' is set
    unless (exists $args{'instruments'}) {
      croak("Missing the required parameter 'instruments' when calling index_cc_v1_latest_tick");
    }

    # parse inputs
    my $_resource_path = '/index/cc/v1/latest/tick';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'market'}) {
        $query_params->{'market'} = $self->{api_client}->to_query_value($args{'market'});
    }

    # query params
    if ( exists $args{'instruments'}) {
        $query_params->{'instruments'} = $self->{api_client}->to_query_value($args{'instruments'});
    }

    # query params
    if ( exists $args{'groups'}) {
        $query_params->{'groups'} = $self->{api_client}->to_query_value($args{'groups'});
    }

    # query params
    if ( exists $args{'mapping_priority'}) {
        $query_params->{'mapping_priority'} = $self->{api_client}->to_query_value($args{'mapping_priority'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GENERICRESPONSE', $response);
    return $_response_object;
}

#
# index_cc_v1_markets
#
# 
#
# @param string $market The exchange to obtain data from (optional, default to '')
{
    my $params = {
    'market' => {
        data_type => 'string',
        description => 'The exchange to obtain data from',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'index_cc_v1_markets' } = {
        summary => '',
        params => $params,
        returns => 'GENERICRESPONSE',
        };
}
# @return GENERICRESPONSE
#
sub index_cc_v1_markets {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/index/cc/v1/markets';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'market'}) {
        $query_params->{'market'} = $self->{api_client}->to_query_value($args{'market'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GENERICRESPONSE', $response);
    return $_response_object;
}

#
# index_cc_v1_markets_instruments
#
# 
#
# @param string $market The exchange to obtain data from (optional, default to '')
# @param string $instrument The mapped instrument to retrieve on a specific market. (optional, default to '')
# @param ARRAY[string] $instrument_status The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED (optional)
{
    my $params = {
    'market' => {
        data_type => 'string',
        description => 'The exchange to obtain data from',
        required => '0',
    },
    'instrument' => {
        data_type => 'string',
        description => 'The mapped instrument to retrieve on a specific market.',
        required => '0',
    },
    'instrument_status' => {
        data_type => 'ARRAY[string]',
        description => 'The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'index_cc_v1_markets_instruments' } = {
        summary => '',
        params => $params,
        returns => 'GENERICRESPONSE',
        };
}
# @return GENERICRESPONSE
#
sub index_cc_v1_markets_instruments {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/index/cc/v1/markets/instruments';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'market'}) {
        $query_params->{'market'} = $self->{api_client}->to_query_value($args{'market'});
    }

    # query params
    if ( exists $args{'instrument'}) {
        $query_params->{'instrument'} = $self->{api_client}->to_query_value($args{'instrument'});
    }

    # query params
    if ( exists $args{'instrument_status'}) {
        $query_params->{'instrument_status'} = $self->{api_client}->to_query_value($args{'instrument_status'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GENERICRESPONSE', $response);
    return $_response_object;
}

#
# index_cc_v1_markets_instruments_unmapped
#
# 
#
# @param string $market The exchange to obtain data from (optional, default to '')
# @param string $instrument The unmapped instrument to retrieve on a specific market. (optional, default to '')
# @param ARRAY[string] $instrument_status The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED (optional)
{
    my $params = {
    'market' => {
        data_type => 'string',
        description => 'The exchange to obtain data from',
        required => '0',
    },
    'instrument' => {
        data_type => 'string',
        description => 'The unmapped instrument to retrieve on a specific market.',
        required => '0',
    },
    'instrument_status' => {
        data_type => 'ARRAY[string]',
        description => 'The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'index_cc_v1_markets_instruments_unmapped' } = {
        summary => '',
        params => $params,
        returns => 'GENERICRESPONSE',
        };
}
# @return GENERICRESPONSE
#
sub index_cc_v1_markets_instruments_unmapped {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/index/cc/v1/markets/instruments/unmapped';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'market'}) {
        $query_params->{'market'} = $self->{api_client}->to_query_value($args{'market'});
    }

    # query params
    if ( exists $args{'instrument'}) {
        $query_params->{'instrument'} = $self->{api_client}->to_query_value($args{'instrument'});
    }

    # query params
    if ( exists $args{'instrument_status'}) {
        $query_params->{'instrument_status'} = $self->{api_client}->to_query_value($args{'instrument_status'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GENERICRESPONSE', $response);
    return $_response_object;
}

1;
