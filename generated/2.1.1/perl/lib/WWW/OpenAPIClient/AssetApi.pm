=begin comment

CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry

CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.

The version of the OpenAPI document: 2.1.1
Contact: data@cryptocompare.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::AssetApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# asset_v1_data_by_address
#
# 
#
# @param string $address  (required)
# @param string $chain_symbol  (required)
# @param string $groups  (optional, default to '')
{
    my $params = {
    'address' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'chain_symbol' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'groups' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'asset_v1_data_by_address' } = {
        summary => '',
        params => $params,
        returns => 'GENERICRESPONSE',
        };
}
# @return GENERICRESPONSE
#
sub asset_v1_data_by_address {
    my ($self, %args) = @_;

    # verify the required parameter 'address' is set
    unless (exists $args{'address'}) {
      croak("Missing the required parameter 'address' when calling asset_v1_data_by_address");
    }

    # verify the required parameter 'chain_symbol' is set
    unless (exists $args{'chain_symbol'}) {
      croak("Missing the required parameter 'chain_symbol' when calling asset_v1_data_by_address");
    }

    # parse inputs
    my $_resource_path = '/asset/v1/data/by/address';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'address'}) {
        $query_params->{'address'} = $self->{api_client}->to_query_value($args{'address'});
    }

    # query params
    if ( exists $args{'chain_symbol'}) {
        $query_params->{'chain_symbol'} = $self->{api_client}->to_query_value($args{'chain_symbol'});
    }

    # query params
    if ( exists $args{'groups'}) {
        $query_params->{'groups'} = $self->{api_client}->to_query_value($args{'groups'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GENERICRESPONSE', $response);
    return $_response_object;
}

#
# asset_v1_data_by_id
#
# 
#
# @param int $asset_id The asset id you are interested in (required)
# @param string $groups  (optional, default to '')
{
    my $params = {
    'asset_id' => {
        data_type => 'int',
        description => 'The asset id you are interested in',
        required => '1',
    },
    'groups' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'asset_v1_data_by_id' } = {
        summary => '',
        params => $params,
        returns => 'GENERICRESPONSE',
        };
}
# @return GENERICRESPONSE
#
sub asset_v1_data_by_id {
    my ($self, %args) = @_;

    # verify the required parameter 'asset_id' is set
    unless (exists $args{'asset_id'}) {
      croak("Missing the required parameter 'asset_id' when calling asset_v1_data_by_id");
    }

    # parse inputs
    my $_resource_path = '/asset/v1/data/by/id';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'asset_id'}) {
        $query_params->{'asset_id'} = $self->{api_client}->to_query_value($args{'asset_id'});
    }

    # query params
    if ( exists $args{'groups'}) {
        $query_params->{'groups'} = $self->{api_client}->to_query_value($args{'groups'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GENERICRESPONSE', $response);
    return $_response_object;
}

#
# asset_v1_data_by_symbol
#
# 
#
# @param string $asset_symbol The asset symbol you are interested in (required)
# @param string $groups  (optional, default to '')
{
    my $params = {
    'asset_symbol' => {
        data_type => 'string',
        description => 'The asset symbol you are interested in',
        required => '1',
    },
    'groups' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'asset_v1_data_by_symbol' } = {
        summary => '',
        params => $params,
        returns => 'GENERICRESPONSE',
        };
}
# @return GENERICRESPONSE
#
sub asset_v1_data_by_symbol {
    my ($self, %args) = @_;

    # verify the required parameter 'asset_symbol' is set
    unless (exists $args{'asset_symbol'}) {
      croak("Missing the required parameter 'asset_symbol' when calling asset_v1_data_by_symbol");
    }

    # parse inputs
    my $_resource_path = '/asset/v1/data/by/symbol';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'asset_symbol'}) {
        $query_params->{'asset_symbol'} = $self->{api_client}->to_query_value($args{'asset_symbol'});
    }

    # query params
    if ( exists $args{'groups'}) {
        $query_params->{'groups'} = $self->{api_client}->to_query_value($args{'groups'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GENERICRESPONSE', $response);
    return $_response_object;
}

#
# asset_v1_top_list
#
# 
#
# @param int $page The page number for the request to get {page_size} coins at the time. (optional, default to 1)
# @param int $page_size The number of items returned per page (optional, default to 100)
# @param string $asset_type The asset class/type (optional, default to '')
# @param string $sort_by Sort by field ( CREATED_ON,UPDATED_ON,SYMBOL ) (optional, default to 'CREATED_ON')
# @param string $sort_direction Sort direction ( DESC,ASC ) (optional, default to 'DESC')
# @param string $groups  (optional, default to '')
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'The page number for the request to get {page_size} coins at the time.',
        required => '0',
    },
    'page_size' => {
        data_type => 'int',
        description => 'The number of items returned per page',
        required => '0',
    },
    'asset_type' => {
        data_type => 'string',
        description => 'The asset class/type',
        required => '0',
    },
    'sort_by' => {
        data_type => 'string',
        description => 'Sort by field ( CREATED_ON,UPDATED_ON,SYMBOL )',
        required => '0',
    },
    'sort_direction' => {
        data_type => 'string',
        description => 'Sort direction ( DESC,ASC )',
        required => '0',
    },
    'groups' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'asset_v1_top_list' } = {
        summary => '',
        params => $params,
        returns => 'GENERICRESPONSE',
        };
}
# @return GENERICRESPONSE
#
sub asset_v1_top_list {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/asset/v1/top/list';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'page_size'}) {
        $query_params->{'page_size'} = $self->{api_client}->to_query_value($args{'page_size'});
    }

    # query params
    if ( exists $args{'asset_type'}) {
        $query_params->{'asset_type'} = $self->{api_client}->to_query_value($args{'asset_type'});
    }

    # query params
    if ( exists $args{'sort_by'}) {
        $query_params->{'sort_by'} = $self->{api_client}->to_query_value($args{'sort_by'});
    }

    # query params
    if ( exists $args{'sort_direction'}) {
        $query_params->{'sort_direction'} = $self->{api_client}->to_query_value($args{'sort_direction'});
    }

    # query params
    if ( exists $args{'groups'}) {
        $query_params->{'groups'} = $self->{api_client}->to_query_value($args{'groups'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GENERICRESPONSE', $response);
    return $_response_object;
}

1;
