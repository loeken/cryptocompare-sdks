/*
CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry

CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.

API version: 2.1.1
Contact: data@cryptocompare.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// FuturesApiService FuturesApi service
type FuturesApiService service

type ApiFuturesV1HistoricalDaysRequest struct {
	ctx context.Context
	ApiService *FuturesApiService
	market *string
	instrument *string
	groups *[]string
	limit *int32
	toTs *int32
	aggregate *int32
	fill *bool
	mappingPriority *string
	responseFormat *string
}

// The exchange to obtain data from
func (r ApiFuturesV1HistoricalDaysRequest) Market(market string) ApiFuturesV1HistoricalDaysRequest {
	r.market = &market
	return r
}

// The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
func (r ApiFuturesV1HistoricalDaysRequest) Instrument(instrument string) ApiFuturesV1HistoricalDaysRequest {
	r.instrument = &instrument
	return r
}

// When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME
func (r ApiFuturesV1HistoricalDaysRequest) Groups(groups []string) ApiFuturesV1HistoricalDaysRequest {
	r.groups = &groups
	return r
}

// The number of data points to return
func (r ApiFuturesV1HistoricalDaysRequest) Limit(limit int32) ApiFuturesV1HistoricalDaysRequest {
	r.limit = &limit
	return r
}

// Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
func (r ApiFuturesV1HistoricalDaysRequest) ToTs(toTs int32) ApiFuturesV1HistoricalDaysRequest {
	r.toTs = &toTs
	return r
}

// The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
func (r ApiFuturesV1HistoricalDaysRequest) Aggregate(aggregate int32) ApiFuturesV1HistoricalDaysRequest {
	r.aggregate = &aggregate
	return r
}

// Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
func (r ApiFuturesV1HistoricalDaysRequest) Fill(fill bool) ApiFuturesV1HistoricalDaysRequest {
	r.fill = &fill
	return r
}

// The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
func (r ApiFuturesV1HistoricalDaysRequest) MappingPriority(mappingPriority string) ApiFuturesV1HistoricalDaysRequest {
	r.mappingPriority = &mappingPriority
	return r
}

// The format of the data response in uppercase. It can be one of the following: JSON,CSV
func (r ApiFuturesV1HistoricalDaysRequest) ResponseFormat(responseFormat string) ApiFuturesV1HistoricalDaysRequest {
	r.responseFormat = &responseFormat
	return r
}

func (r ApiFuturesV1HistoricalDaysRequest) Execute() (*GENERICRESPONSE, *http.Response, error) {
	return r.ApiService.FuturesV1HistoricalDaysExecute(r)
}

/*
FuturesV1HistoricalDays Method for FuturesV1HistoricalDays

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFuturesV1HistoricalDaysRequest
*/
func (a *FuturesApiService) FuturesV1HistoricalDays(ctx context.Context) ApiFuturesV1HistoricalDaysRequest {
	return ApiFuturesV1HistoricalDaysRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GENERICRESPONSE
func (a *FuturesApiService) FuturesV1HistoricalDaysExecute(r ApiFuturesV1HistoricalDaysRequest) (*GENERICRESPONSE, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GENERICRESPONSE
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FuturesApiService.FuturesV1HistoricalDays")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/futures/v1/historical/days"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.market == nil {
		return localVarReturnValue, nil, reportError("market is required and must be specified")
	}
	if strlen(*r.market) < 2 {
		return localVarReturnValue, nil, reportError("market must have at least 2 elements")
	}
	if strlen(*r.market) > 30 {
		return localVarReturnValue, nil, reportError("market must have less than 30 elements")
	}
	if r.instrument == nil {
		return localVarReturnValue, nil, reportError("instrument is required and must be specified")
	}
	if strlen(*r.instrument) < 1 {
		return localVarReturnValue, nil, reportError("instrument must have at least 1 elements")
	}
	if strlen(*r.instrument) > 500 {
		return localVarReturnValue, nil, reportError("instrument must have less than 500 elements")
	}

	parameterAddToQuery(localVarQueryParams, "market", r.market, "")
	parameterAddToQuery(localVarQueryParams, "instrument", r.instrument, "")
	if r.groups != nil {
		parameterAddToQuery(localVarQueryParams, "groups", r.groups, "csv")
	}
	if r.limit != nil {
		parameterAddToQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.toTs != nil {
		parameterAddToQuery(localVarQueryParams, "to_ts", r.toTs, "")
	}
	if r.aggregate != nil {
		parameterAddToQuery(localVarQueryParams, "aggregate", r.aggregate, "")
	}
	if r.fill != nil {
		parameterAddToQuery(localVarQueryParams, "fill", r.fill, "")
	}
	if r.mappingPriority != nil {
		parameterAddToQuery(localVarQueryParams, "mapping_priority", r.mappingPriority, "")
	}
	if r.responseFormat != nil {
		parameterAddToQuery(localVarQueryParams, "response_format", r.responseFormat, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 502 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFuturesV1HistoricalFundingRateDaysRequest struct {
	ctx context.Context
	ApiService *FuturesApiService
	market *string
	instrument *string
	groups *[]string
	limit *int32
	toTs *int32
	aggregate *int32
	fill *bool
	mappingPriority *string
	responseFormat *string
}

// The exchange to obtain data from
func (r ApiFuturesV1HistoricalFundingRateDaysRequest) Market(market string) ApiFuturesV1HistoricalFundingRateDaysRequest {
	r.market = &market
	return r
}

// The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
func (r ApiFuturesV1HistoricalFundingRateDaysRequest) Instrument(instrument string) ApiFuturesV1HistoricalFundingRateDaysRequest {
	r.instrument = &instrument
	return r
}

// When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,OHLC,OHLC_MESSAGE,MESSAGE
func (r ApiFuturesV1HistoricalFundingRateDaysRequest) Groups(groups []string) ApiFuturesV1HistoricalFundingRateDaysRequest {
	r.groups = &groups
	return r
}

// The number of data points to return
func (r ApiFuturesV1HistoricalFundingRateDaysRequest) Limit(limit int32) ApiFuturesV1HistoricalFundingRateDaysRequest {
	r.limit = &limit
	return r
}

// Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
func (r ApiFuturesV1HistoricalFundingRateDaysRequest) ToTs(toTs int32) ApiFuturesV1HistoricalFundingRateDaysRequest {
	r.toTs = &toTs
	return r
}

// The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
func (r ApiFuturesV1HistoricalFundingRateDaysRequest) Aggregate(aggregate int32) ApiFuturesV1HistoricalFundingRateDaysRequest {
	r.aggregate = &aggregate
	return r
}

// Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
func (r ApiFuturesV1HistoricalFundingRateDaysRequest) Fill(fill bool) ApiFuturesV1HistoricalFundingRateDaysRequest {
	r.fill = &fill
	return r
}

// The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
func (r ApiFuturesV1HistoricalFundingRateDaysRequest) MappingPriority(mappingPriority string) ApiFuturesV1HistoricalFundingRateDaysRequest {
	r.mappingPriority = &mappingPriority
	return r
}

// The format of the data response in uppercase. It can be one of the following: JSON,CSV
func (r ApiFuturesV1HistoricalFundingRateDaysRequest) ResponseFormat(responseFormat string) ApiFuturesV1HistoricalFundingRateDaysRequest {
	r.responseFormat = &responseFormat
	return r
}

func (r ApiFuturesV1HistoricalFundingRateDaysRequest) Execute() (*GENERICRESPONSE, *http.Response, error) {
	return r.ApiService.FuturesV1HistoricalFundingRateDaysExecute(r)
}

/*
FuturesV1HistoricalFundingRateDays Method for FuturesV1HistoricalFundingRateDays

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFuturesV1HistoricalFundingRateDaysRequest
*/
func (a *FuturesApiService) FuturesV1HistoricalFundingRateDays(ctx context.Context) ApiFuturesV1HistoricalFundingRateDaysRequest {
	return ApiFuturesV1HistoricalFundingRateDaysRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GENERICRESPONSE
func (a *FuturesApiService) FuturesV1HistoricalFundingRateDaysExecute(r ApiFuturesV1HistoricalFundingRateDaysRequest) (*GENERICRESPONSE, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GENERICRESPONSE
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FuturesApiService.FuturesV1HistoricalFundingRateDays")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/futures/v1/historical/funding-rate/days"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.market == nil {
		return localVarReturnValue, nil, reportError("market is required and must be specified")
	}
	if strlen(*r.market) < 2 {
		return localVarReturnValue, nil, reportError("market must have at least 2 elements")
	}
	if strlen(*r.market) > 30 {
		return localVarReturnValue, nil, reportError("market must have less than 30 elements")
	}
	if r.instrument == nil {
		return localVarReturnValue, nil, reportError("instrument is required and must be specified")
	}
	if strlen(*r.instrument) < 1 {
		return localVarReturnValue, nil, reportError("instrument must have at least 1 elements")
	}
	if strlen(*r.instrument) > 500 {
		return localVarReturnValue, nil, reportError("instrument must have less than 500 elements")
	}

	parameterAddToQuery(localVarQueryParams, "market", r.market, "")
	parameterAddToQuery(localVarQueryParams, "instrument", r.instrument, "")
	if r.groups != nil {
		parameterAddToQuery(localVarQueryParams, "groups", r.groups, "csv")
	}
	if r.limit != nil {
		parameterAddToQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.toTs != nil {
		parameterAddToQuery(localVarQueryParams, "to_ts", r.toTs, "")
	}
	if r.aggregate != nil {
		parameterAddToQuery(localVarQueryParams, "aggregate", r.aggregate, "")
	}
	if r.fill != nil {
		parameterAddToQuery(localVarQueryParams, "fill", r.fill, "")
	}
	if r.mappingPriority != nil {
		parameterAddToQuery(localVarQueryParams, "mapping_priority", r.mappingPriority, "")
	}
	if r.responseFormat != nil {
		parameterAddToQuery(localVarQueryParams, "response_format", r.responseFormat, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 502 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFuturesV1HistoricalFundingRateHoursRequest struct {
	ctx context.Context
	ApiService *FuturesApiService
	market *string
	instrument *string
	groups *[]string
	limit *int32
	toTs *int32
	aggregate *int32
	fill *bool
	mappingPriority *string
	responseFormat *string
}

// The exchange to obtain data from
func (r ApiFuturesV1HistoricalFundingRateHoursRequest) Market(market string) ApiFuturesV1HistoricalFundingRateHoursRequest {
	r.market = &market
	return r
}

// The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
func (r ApiFuturesV1HistoricalFundingRateHoursRequest) Instrument(instrument string) ApiFuturesV1HistoricalFundingRateHoursRequest {
	r.instrument = &instrument
	return r
}

// When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,OHLC,OHLC_MESSAGE,MESSAGE
func (r ApiFuturesV1HistoricalFundingRateHoursRequest) Groups(groups []string) ApiFuturesV1HistoricalFundingRateHoursRequest {
	r.groups = &groups
	return r
}

// The number of data points to return
func (r ApiFuturesV1HistoricalFundingRateHoursRequest) Limit(limit int32) ApiFuturesV1HistoricalFundingRateHoursRequest {
	r.limit = &limit
	return r
}

// Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
func (r ApiFuturesV1HistoricalFundingRateHoursRequest) ToTs(toTs int32) ApiFuturesV1HistoricalFundingRateHoursRequest {
	r.toTs = &toTs
	return r
}

// The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
func (r ApiFuturesV1HistoricalFundingRateHoursRequest) Aggregate(aggregate int32) ApiFuturesV1HistoricalFundingRateHoursRequest {
	r.aggregate = &aggregate
	return r
}

// Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
func (r ApiFuturesV1HistoricalFundingRateHoursRequest) Fill(fill bool) ApiFuturesV1HistoricalFundingRateHoursRequest {
	r.fill = &fill
	return r
}

// The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
func (r ApiFuturesV1HistoricalFundingRateHoursRequest) MappingPriority(mappingPriority string) ApiFuturesV1HistoricalFundingRateHoursRequest {
	r.mappingPriority = &mappingPriority
	return r
}

// The format of the data response in uppercase. It can be one of the following: JSON,CSV
func (r ApiFuturesV1HistoricalFundingRateHoursRequest) ResponseFormat(responseFormat string) ApiFuturesV1HistoricalFundingRateHoursRequest {
	r.responseFormat = &responseFormat
	return r
}

func (r ApiFuturesV1HistoricalFundingRateHoursRequest) Execute() (*GENERICRESPONSE, *http.Response, error) {
	return r.ApiService.FuturesV1HistoricalFundingRateHoursExecute(r)
}

/*
FuturesV1HistoricalFundingRateHours Method for FuturesV1HistoricalFundingRateHours

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFuturesV1HistoricalFundingRateHoursRequest
*/
func (a *FuturesApiService) FuturesV1HistoricalFundingRateHours(ctx context.Context) ApiFuturesV1HistoricalFundingRateHoursRequest {
	return ApiFuturesV1HistoricalFundingRateHoursRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GENERICRESPONSE
func (a *FuturesApiService) FuturesV1HistoricalFundingRateHoursExecute(r ApiFuturesV1HistoricalFundingRateHoursRequest) (*GENERICRESPONSE, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GENERICRESPONSE
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FuturesApiService.FuturesV1HistoricalFundingRateHours")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/futures/v1/historical/funding-rate/hours"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.market == nil {
		return localVarReturnValue, nil, reportError("market is required and must be specified")
	}
	if strlen(*r.market) < 2 {
		return localVarReturnValue, nil, reportError("market must have at least 2 elements")
	}
	if strlen(*r.market) > 30 {
		return localVarReturnValue, nil, reportError("market must have less than 30 elements")
	}
	if r.instrument == nil {
		return localVarReturnValue, nil, reportError("instrument is required and must be specified")
	}
	if strlen(*r.instrument) < 1 {
		return localVarReturnValue, nil, reportError("instrument must have at least 1 elements")
	}
	if strlen(*r.instrument) > 500 {
		return localVarReturnValue, nil, reportError("instrument must have less than 500 elements")
	}

	parameterAddToQuery(localVarQueryParams, "market", r.market, "")
	parameterAddToQuery(localVarQueryParams, "instrument", r.instrument, "")
	if r.groups != nil {
		parameterAddToQuery(localVarQueryParams, "groups", r.groups, "csv")
	}
	if r.limit != nil {
		parameterAddToQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.toTs != nil {
		parameterAddToQuery(localVarQueryParams, "to_ts", r.toTs, "")
	}
	if r.aggregate != nil {
		parameterAddToQuery(localVarQueryParams, "aggregate", r.aggregate, "")
	}
	if r.fill != nil {
		parameterAddToQuery(localVarQueryParams, "fill", r.fill, "")
	}
	if r.mappingPriority != nil {
		parameterAddToQuery(localVarQueryParams, "mapping_priority", r.mappingPriority, "")
	}
	if r.responseFormat != nil {
		parameterAddToQuery(localVarQueryParams, "response_format", r.responseFormat, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 502 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFuturesV1HistoricalFundingRateMessagesRequest struct {
	ctx context.Context
	ApiService *FuturesApiService
	market *string
	instrument *string
	afterTs *int32
	lastCcseq *int32
	limit *int32
	mappingPriority *string
	responseFormat *string
	return404OnEmptyResponse *bool
}

// The exchange to obtain data from
func (r ApiFuturesV1HistoricalFundingRateMessagesRequest) Market(market string) ApiFuturesV1HistoricalFundingRateMessagesRequest {
	r.market = &market
	return r
}

// The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
func (r ApiFuturesV1HistoricalFundingRateMessagesRequest) Instrument(instrument string) ApiFuturesV1HistoricalFundingRateMessagesRequest {
	r.instrument = &instrument
	return r
}

// Unix timestamp in seconds of the earliest funding rate message in the response
func (r ApiFuturesV1HistoricalFundingRateMessagesRequest) AfterTs(afterTs int32) ApiFuturesV1HistoricalFundingRateMessagesRequest {
	r.afterTs = &afterTs
	return r
}

// The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request.
func (r ApiFuturesV1HistoricalFundingRateMessagesRequest) LastCcseq(lastCcseq int32) ApiFuturesV1HistoricalFundingRateMessagesRequest {
	r.lastCcseq = &lastCcseq
	return r
}

// The maximum number of funding rate messages to return
func (r ApiFuturesV1HistoricalFundingRateMessagesRequest) Limit(limit int32) ApiFuturesV1HistoricalFundingRateMessagesRequest {
	r.limit = &limit
	return r
}

// The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
func (r ApiFuturesV1HistoricalFundingRateMessagesRequest) MappingPriority(mappingPriority string) ApiFuturesV1HistoricalFundingRateMessagesRequest {
	r.mappingPriority = &mappingPriority
	return r
}

// The format of the data response in uppercase. It can be one of the following: JSON,CSV
func (r ApiFuturesV1HistoricalFundingRateMessagesRequest) ResponseFormat(responseFormat string) ApiFuturesV1HistoricalFundingRateMessagesRequest {
	r.responseFormat = &responseFormat
	return r
}

// If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.
func (r ApiFuturesV1HistoricalFundingRateMessagesRequest) Return404OnEmptyResponse(return404OnEmptyResponse bool) ApiFuturesV1HistoricalFundingRateMessagesRequest {
	r.return404OnEmptyResponse = &return404OnEmptyResponse
	return r
}

func (r ApiFuturesV1HistoricalFundingRateMessagesRequest) Execute() (*GENERICRESPONSE, *http.Response, error) {
	return r.ApiService.FuturesV1HistoricalFundingRateMessagesExecute(r)
}

/*
FuturesV1HistoricalFundingRateMessages Method for FuturesV1HistoricalFundingRateMessages

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFuturesV1HistoricalFundingRateMessagesRequest
*/
func (a *FuturesApiService) FuturesV1HistoricalFundingRateMessages(ctx context.Context) ApiFuturesV1HistoricalFundingRateMessagesRequest {
	return ApiFuturesV1HistoricalFundingRateMessagesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GENERICRESPONSE
func (a *FuturesApiService) FuturesV1HistoricalFundingRateMessagesExecute(r ApiFuturesV1HistoricalFundingRateMessagesRequest) (*GENERICRESPONSE, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GENERICRESPONSE
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FuturesApiService.FuturesV1HistoricalFundingRateMessages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/futures/v1/historical/funding-rate-messages"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.market == nil {
		return localVarReturnValue, nil, reportError("market is required and must be specified")
	}
	if strlen(*r.market) < 2 {
		return localVarReturnValue, nil, reportError("market must have at least 2 elements")
	}
	if strlen(*r.market) > 30 {
		return localVarReturnValue, nil, reportError("market must have less than 30 elements")
	}
	if r.instrument == nil {
		return localVarReturnValue, nil, reportError("instrument is required and must be specified")
	}
	if strlen(*r.instrument) < 1 {
		return localVarReturnValue, nil, reportError("instrument must have at least 1 elements")
	}
	if strlen(*r.instrument) > 500 {
		return localVarReturnValue, nil, reportError("instrument must have less than 500 elements")
	}

	parameterAddToQuery(localVarQueryParams, "market", r.market, "")
	parameterAddToQuery(localVarQueryParams, "instrument", r.instrument, "")
	if r.afterTs != nil {
		parameterAddToQuery(localVarQueryParams, "after_ts", r.afterTs, "")
	}
	if r.lastCcseq != nil {
		parameterAddToQuery(localVarQueryParams, "last_ccseq", r.lastCcseq, "")
	}
	if r.limit != nil {
		parameterAddToQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.mappingPriority != nil {
		parameterAddToQuery(localVarQueryParams, "mapping_priority", r.mappingPriority, "")
	}
	if r.responseFormat != nil {
		parameterAddToQuery(localVarQueryParams, "response_format", r.responseFormat, "")
	}
	if r.return404OnEmptyResponse != nil {
		parameterAddToQuery(localVarQueryParams, "return_404_on_empty_response", r.return404OnEmptyResponse, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key_header"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key_query"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 502 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFuturesV1HistoricalFundingRateMessagesHourRequest struct {
	ctx context.Context
	ApiService *FuturesApiService
	market *string
	instrument *string
	hourTs *int32
	mappingPriority *string
	responseFormat *string
	return404OnEmptyResponse *bool
}

// The exchange to obtain data from
func (r ApiFuturesV1HistoricalFundingRateMessagesHourRequest) Market(market string) ApiFuturesV1HistoricalFundingRateMessagesHourRequest {
	r.market = &market
	return r
}

// The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
func (r ApiFuturesV1HistoricalFundingRateMessagesHourRequest) Instrument(instrument string) ApiFuturesV1HistoricalFundingRateMessagesHourRequest {
	r.instrument = &instrument
	return r
}

// Unix timestamp in seconds for the hour containing the funding rate updates you are interested in. You can pass any timestamp in the hour but we will round it down the the full hour timestmap and return all funding rate updates in that hour.
func (r ApiFuturesV1HistoricalFundingRateMessagesHourRequest) HourTs(hourTs int32) ApiFuturesV1HistoricalFundingRateMessagesHourRequest {
	r.hourTs = &hourTs
	return r
}

// The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
func (r ApiFuturesV1HistoricalFundingRateMessagesHourRequest) MappingPriority(mappingPriority string) ApiFuturesV1HistoricalFundingRateMessagesHourRequest {
	r.mappingPriority = &mappingPriority
	return r
}

// The format of the data response in uppercase. It can be one of the following: JSON,CSV
func (r ApiFuturesV1HistoricalFundingRateMessagesHourRequest) ResponseFormat(responseFormat string) ApiFuturesV1HistoricalFundingRateMessagesHourRequest {
	r.responseFormat = &responseFormat
	return r
}

// If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.
func (r ApiFuturesV1HistoricalFundingRateMessagesHourRequest) Return404OnEmptyResponse(return404OnEmptyResponse bool) ApiFuturesV1HistoricalFundingRateMessagesHourRequest {
	r.return404OnEmptyResponse = &return404OnEmptyResponse
	return r
}

func (r ApiFuturesV1HistoricalFundingRateMessagesHourRequest) Execute() (*GENERICRESPONSE, *http.Response, error) {
	return r.ApiService.FuturesV1HistoricalFundingRateMessagesHourExecute(r)
}

/*
FuturesV1HistoricalFundingRateMessagesHour Method for FuturesV1HistoricalFundingRateMessagesHour

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFuturesV1HistoricalFundingRateMessagesHourRequest
*/
func (a *FuturesApiService) FuturesV1HistoricalFundingRateMessagesHour(ctx context.Context) ApiFuturesV1HistoricalFundingRateMessagesHourRequest {
	return ApiFuturesV1HistoricalFundingRateMessagesHourRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GENERICRESPONSE
func (a *FuturesApiService) FuturesV1HistoricalFundingRateMessagesHourExecute(r ApiFuturesV1HistoricalFundingRateMessagesHourRequest) (*GENERICRESPONSE, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GENERICRESPONSE
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FuturesApiService.FuturesV1HistoricalFundingRateMessagesHour")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/futures/v1/historical/funding-rate-messages/hour"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.market == nil {
		return localVarReturnValue, nil, reportError("market is required and must be specified")
	}
	if strlen(*r.market) < 2 {
		return localVarReturnValue, nil, reportError("market must have at least 2 elements")
	}
	if strlen(*r.market) > 30 {
		return localVarReturnValue, nil, reportError("market must have less than 30 elements")
	}
	if r.instrument == nil {
		return localVarReturnValue, nil, reportError("instrument is required and must be specified")
	}
	if strlen(*r.instrument) < 1 {
		return localVarReturnValue, nil, reportError("instrument must have at least 1 elements")
	}
	if strlen(*r.instrument) > 500 {
		return localVarReturnValue, nil, reportError("instrument must have less than 500 elements")
	}

	parameterAddToQuery(localVarQueryParams, "market", r.market, "")
	parameterAddToQuery(localVarQueryParams, "instrument", r.instrument, "")
	if r.hourTs != nil {
		parameterAddToQuery(localVarQueryParams, "hour_ts", r.hourTs, "")
	}
	if r.mappingPriority != nil {
		parameterAddToQuery(localVarQueryParams, "mapping_priority", r.mappingPriority, "")
	}
	if r.responseFormat != nil {
		parameterAddToQuery(localVarQueryParams, "response_format", r.responseFormat, "")
	}
	if r.return404OnEmptyResponse != nil {
		parameterAddToQuery(localVarQueryParams, "return_404_on_empty_response", r.return404OnEmptyResponse, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key_header"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key_query"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 502 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFuturesV1HistoricalFundingRateMinutesRequest struct {
	ctx context.Context
	ApiService *FuturesApiService
	market *string
	instrument *string
	groups *[]string
	limit *int32
	toTs *int32
	aggregate *int32
	fill *bool
	mappingPriority *string
	responseFormat *string
}

// The exchange to obtain data from
func (r ApiFuturesV1HistoricalFundingRateMinutesRequest) Market(market string) ApiFuturesV1HistoricalFundingRateMinutesRequest {
	r.market = &market
	return r
}

// The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
func (r ApiFuturesV1HistoricalFundingRateMinutesRequest) Instrument(instrument string) ApiFuturesV1HistoricalFundingRateMinutesRequest {
	r.instrument = &instrument
	return r
}

// When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,OHLC,OHLC_MESSAGE,MESSAGE
func (r ApiFuturesV1HistoricalFundingRateMinutesRequest) Groups(groups []string) ApiFuturesV1HistoricalFundingRateMinutesRequest {
	r.groups = &groups
	return r
}

// The number of data points to return
func (r ApiFuturesV1HistoricalFundingRateMinutesRequest) Limit(limit int32) ApiFuturesV1HistoricalFundingRateMinutesRequest {
	r.limit = &limit
	return r
}

// Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
func (r ApiFuturesV1HistoricalFundingRateMinutesRequest) ToTs(toTs int32) ApiFuturesV1HistoricalFundingRateMinutesRequest {
	r.toTs = &toTs
	return r
}

// The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
func (r ApiFuturesV1HistoricalFundingRateMinutesRequest) Aggregate(aggregate int32) ApiFuturesV1HistoricalFundingRateMinutesRequest {
	r.aggregate = &aggregate
	return r
}

// Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
func (r ApiFuturesV1HistoricalFundingRateMinutesRequest) Fill(fill bool) ApiFuturesV1HistoricalFundingRateMinutesRequest {
	r.fill = &fill
	return r
}

// The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
func (r ApiFuturesV1HistoricalFundingRateMinutesRequest) MappingPriority(mappingPriority string) ApiFuturesV1HistoricalFundingRateMinutesRequest {
	r.mappingPriority = &mappingPriority
	return r
}

// The format of the data response in uppercase. It can be one of the following: JSON,CSV
func (r ApiFuturesV1HistoricalFundingRateMinutesRequest) ResponseFormat(responseFormat string) ApiFuturesV1HistoricalFundingRateMinutesRequest {
	r.responseFormat = &responseFormat
	return r
}

func (r ApiFuturesV1HistoricalFundingRateMinutesRequest) Execute() (*GENERICRESPONSE, *http.Response, error) {
	return r.ApiService.FuturesV1HistoricalFundingRateMinutesExecute(r)
}

/*
FuturesV1HistoricalFundingRateMinutes Method for FuturesV1HistoricalFundingRateMinutes

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFuturesV1HistoricalFundingRateMinutesRequest
*/
func (a *FuturesApiService) FuturesV1HistoricalFundingRateMinutes(ctx context.Context) ApiFuturesV1HistoricalFundingRateMinutesRequest {
	return ApiFuturesV1HistoricalFundingRateMinutesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GENERICRESPONSE
func (a *FuturesApiService) FuturesV1HistoricalFundingRateMinutesExecute(r ApiFuturesV1HistoricalFundingRateMinutesRequest) (*GENERICRESPONSE, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GENERICRESPONSE
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FuturesApiService.FuturesV1HistoricalFundingRateMinutes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/futures/v1/historical/funding-rate/minutes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.market == nil {
		return localVarReturnValue, nil, reportError("market is required and must be specified")
	}
	if strlen(*r.market) < 2 {
		return localVarReturnValue, nil, reportError("market must have at least 2 elements")
	}
	if strlen(*r.market) > 30 {
		return localVarReturnValue, nil, reportError("market must have less than 30 elements")
	}
	if r.instrument == nil {
		return localVarReturnValue, nil, reportError("instrument is required and must be specified")
	}
	if strlen(*r.instrument) < 1 {
		return localVarReturnValue, nil, reportError("instrument must have at least 1 elements")
	}
	if strlen(*r.instrument) > 500 {
		return localVarReturnValue, nil, reportError("instrument must have less than 500 elements")
	}

	parameterAddToQuery(localVarQueryParams, "market", r.market, "")
	parameterAddToQuery(localVarQueryParams, "instrument", r.instrument, "")
	if r.groups != nil {
		parameterAddToQuery(localVarQueryParams, "groups", r.groups, "csv")
	}
	if r.limit != nil {
		parameterAddToQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.toTs != nil {
		parameterAddToQuery(localVarQueryParams, "to_ts", r.toTs, "")
	}
	if r.aggregate != nil {
		parameterAddToQuery(localVarQueryParams, "aggregate", r.aggregate, "")
	}
	if r.fill != nil {
		parameterAddToQuery(localVarQueryParams, "fill", r.fill, "")
	}
	if r.mappingPriority != nil {
		parameterAddToQuery(localVarQueryParams, "mapping_priority", r.mappingPriority, "")
	}
	if r.responseFormat != nil {
		parameterAddToQuery(localVarQueryParams, "response_format", r.responseFormat, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 502 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFuturesV1HistoricalHoursRequest struct {
	ctx context.Context
	ApiService *FuturesApiService
	market *string
	instrument *string
	groups *[]string
	limit *int32
	toTs *int32
	aggregate *int32
	fill *bool
	mappingPriority *string
	responseFormat *string
}

// The exchange to obtain data from
func (r ApiFuturesV1HistoricalHoursRequest) Market(market string) ApiFuturesV1HistoricalHoursRequest {
	r.market = &market
	return r
}

// The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
func (r ApiFuturesV1HistoricalHoursRequest) Instrument(instrument string) ApiFuturesV1HistoricalHoursRequest {
	r.instrument = &instrument
	return r
}

// When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME
func (r ApiFuturesV1HistoricalHoursRequest) Groups(groups []string) ApiFuturesV1HistoricalHoursRequest {
	r.groups = &groups
	return r
}

// The number of data points to return
func (r ApiFuturesV1HistoricalHoursRequest) Limit(limit int32) ApiFuturesV1HistoricalHoursRequest {
	r.limit = &limit
	return r
}

// Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
func (r ApiFuturesV1HistoricalHoursRequest) ToTs(toTs int32) ApiFuturesV1HistoricalHoursRequest {
	r.toTs = &toTs
	return r
}

// The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
func (r ApiFuturesV1HistoricalHoursRequest) Aggregate(aggregate int32) ApiFuturesV1HistoricalHoursRequest {
	r.aggregate = &aggregate
	return r
}

// Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
func (r ApiFuturesV1HistoricalHoursRequest) Fill(fill bool) ApiFuturesV1HistoricalHoursRequest {
	r.fill = &fill
	return r
}

// The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
func (r ApiFuturesV1HistoricalHoursRequest) MappingPriority(mappingPriority string) ApiFuturesV1HistoricalHoursRequest {
	r.mappingPriority = &mappingPriority
	return r
}

// The format of the data response in uppercase. It can be one of the following: JSON,CSV
func (r ApiFuturesV1HistoricalHoursRequest) ResponseFormat(responseFormat string) ApiFuturesV1HistoricalHoursRequest {
	r.responseFormat = &responseFormat
	return r
}

func (r ApiFuturesV1HistoricalHoursRequest) Execute() (*GENERICRESPONSE, *http.Response, error) {
	return r.ApiService.FuturesV1HistoricalHoursExecute(r)
}

/*
FuturesV1HistoricalHours Method for FuturesV1HistoricalHours

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFuturesV1HistoricalHoursRequest
*/
func (a *FuturesApiService) FuturesV1HistoricalHours(ctx context.Context) ApiFuturesV1HistoricalHoursRequest {
	return ApiFuturesV1HistoricalHoursRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GENERICRESPONSE
func (a *FuturesApiService) FuturesV1HistoricalHoursExecute(r ApiFuturesV1HistoricalHoursRequest) (*GENERICRESPONSE, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GENERICRESPONSE
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FuturesApiService.FuturesV1HistoricalHours")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/futures/v1/historical/hours"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.market == nil {
		return localVarReturnValue, nil, reportError("market is required and must be specified")
	}
	if strlen(*r.market) < 2 {
		return localVarReturnValue, nil, reportError("market must have at least 2 elements")
	}
	if strlen(*r.market) > 30 {
		return localVarReturnValue, nil, reportError("market must have less than 30 elements")
	}
	if r.instrument == nil {
		return localVarReturnValue, nil, reportError("instrument is required and must be specified")
	}
	if strlen(*r.instrument) < 1 {
		return localVarReturnValue, nil, reportError("instrument must have at least 1 elements")
	}
	if strlen(*r.instrument) > 500 {
		return localVarReturnValue, nil, reportError("instrument must have less than 500 elements")
	}

	parameterAddToQuery(localVarQueryParams, "market", r.market, "")
	parameterAddToQuery(localVarQueryParams, "instrument", r.instrument, "")
	if r.groups != nil {
		parameterAddToQuery(localVarQueryParams, "groups", r.groups, "csv")
	}
	if r.limit != nil {
		parameterAddToQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.toTs != nil {
		parameterAddToQuery(localVarQueryParams, "to_ts", r.toTs, "")
	}
	if r.aggregate != nil {
		parameterAddToQuery(localVarQueryParams, "aggregate", r.aggregate, "")
	}
	if r.fill != nil {
		parameterAddToQuery(localVarQueryParams, "fill", r.fill, "")
	}
	if r.mappingPriority != nil {
		parameterAddToQuery(localVarQueryParams, "mapping_priority", r.mappingPriority, "")
	}
	if r.responseFormat != nil {
		parameterAddToQuery(localVarQueryParams, "response_format", r.responseFormat, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 502 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFuturesV1HistoricalMinutesRequest struct {
	ctx context.Context
	ApiService *FuturesApiService
	market *string
	instrument *string
	groups *[]string
	limit *int32
	toTs *int32
	aggregate *int32
	fill *bool
	mappingPriority *string
	responseFormat *string
}

// The exchange to obtain data from
func (r ApiFuturesV1HistoricalMinutesRequest) Market(market string) ApiFuturesV1HistoricalMinutesRequest {
	r.market = &market
	return r
}

// The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
func (r ApiFuturesV1HistoricalMinutesRequest) Instrument(instrument string) ApiFuturesV1HistoricalMinutesRequest {
	r.instrument = &instrument
	return r
}

// When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME
func (r ApiFuturesV1HistoricalMinutesRequest) Groups(groups []string) ApiFuturesV1HistoricalMinutesRequest {
	r.groups = &groups
	return r
}

// The number of data points to return
func (r ApiFuturesV1HistoricalMinutesRequest) Limit(limit int32) ApiFuturesV1HistoricalMinutesRequest {
	r.limit = &limit
	return r
}

// Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
func (r ApiFuturesV1HistoricalMinutesRequest) ToTs(toTs int32) ApiFuturesV1HistoricalMinutesRequest {
	r.toTs = &toTs
	return r
}

// The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
func (r ApiFuturesV1HistoricalMinutesRequest) Aggregate(aggregate int32) ApiFuturesV1HistoricalMinutesRequest {
	r.aggregate = &aggregate
	return r
}

// Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
func (r ApiFuturesV1HistoricalMinutesRequest) Fill(fill bool) ApiFuturesV1HistoricalMinutesRequest {
	r.fill = &fill
	return r
}

// The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
func (r ApiFuturesV1HistoricalMinutesRequest) MappingPriority(mappingPriority string) ApiFuturesV1HistoricalMinutesRequest {
	r.mappingPriority = &mappingPriority
	return r
}

// The format of the data response in uppercase. It can be one of the following: JSON,CSV
func (r ApiFuturesV1HistoricalMinutesRequest) ResponseFormat(responseFormat string) ApiFuturesV1HistoricalMinutesRequest {
	r.responseFormat = &responseFormat
	return r
}

func (r ApiFuturesV1HistoricalMinutesRequest) Execute() (*GENERICRESPONSE, *http.Response, error) {
	return r.ApiService.FuturesV1HistoricalMinutesExecute(r)
}

/*
FuturesV1HistoricalMinutes Method for FuturesV1HistoricalMinutes

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFuturesV1HistoricalMinutesRequest
*/
func (a *FuturesApiService) FuturesV1HistoricalMinutes(ctx context.Context) ApiFuturesV1HistoricalMinutesRequest {
	return ApiFuturesV1HistoricalMinutesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GENERICRESPONSE
func (a *FuturesApiService) FuturesV1HistoricalMinutesExecute(r ApiFuturesV1HistoricalMinutesRequest) (*GENERICRESPONSE, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GENERICRESPONSE
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FuturesApiService.FuturesV1HistoricalMinutes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/futures/v1/historical/minutes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.market == nil {
		return localVarReturnValue, nil, reportError("market is required and must be specified")
	}
	if strlen(*r.market) < 2 {
		return localVarReturnValue, nil, reportError("market must have at least 2 elements")
	}
	if strlen(*r.market) > 30 {
		return localVarReturnValue, nil, reportError("market must have less than 30 elements")
	}
	if r.instrument == nil {
		return localVarReturnValue, nil, reportError("instrument is required and must be specified")
	}
	if strlen(*r.instrument) < 1 {
		return localVarReturnValue, nil, reportError("instrument must have at least 1 elements")
	}
	if strlen(*r.instrument) > 500 {
		return localVarReturnValue, nil, reportError("instrument must have less than 500 elements")
	}

	parameterAddToQuery(localVarQueryParams, "market", r.market, "")
	parameterAddToQuery(localVarQueryParams, "instrument", r.instrument, "")
	if r.groups != nil {
		parameterAddToQuery(localVarQueryParams, "groups", r.groups, "csv")
	}
	if r.limit != nil {
		parameterAddToQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.toTs != nil {
		parameterAddToQuery(localVarQueryParams, "to_ts", r.toTs, "")
	}
	if r.aggregate != nil {
		parameterAddToQuery(localVarQueryParams, "aggregate", r.aggregate, "")
	}
	if r.fill != nil {
		parameterAddToQuery(localVarQueryParams, "fill", r.fill, "")
	}
	if r.mappingPriority != nil {
		parameterAddToQuery(localVarQueryParams, "mapping_priority", r.mappingPriority, "")
	}
	if r.responseFormat != nil {
		parameterAddToQuery(localVarQueryParams, "response_format", r.responseFormat, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 502 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFuturesV1HistoricalOpenInterestDaysRequest struct {
	ctx context.Context
	ApiService *FuturesApiService
	market *string
	instrument *string
	groups *[]string
	limit *int32
	toTs *int32
	aggregate *int32
	fill *bool
	mappingPriority *string
	responseFormat *string
}

// The exchange to obtain data from
func (r ApiFuturesV1HistoricalOpenInterestDaysRequest) Market(market string) ApiFuturesV1HistoricalOpenInterestDaysRequest {
	r.market = &market
	return r
}

// The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
func (r ApiFuturesV1HistoricalOpenInterestDaysRequest) Instrument(instrument string) ApiFuturesV1HistoricalOpenInterestDaysRequest {
	r.instrument = &instrument
	return r
}

// When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_MESSAGE,MESSAGE
func (r ApiFuturesV1HistoricalOpenInterestDaysRequest) Groups(groups []string) ApiFuturesV1HistoricalOpenInterestDaysRequest {
	r.groups = &groups
	return r
}

// The number of data points to return
func (r ApiFuturesV1HistoricalOpenInterestDaysRequest) Limit(limit int32) ApiFuturesV1HistoricalOpenInterestDaysRequest {
	r.limit = &limit
	return r
}

// Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
func (r ApiFuturesV1HistoricalOpenInterestDaysRequest) ToTs(toTs int32) ApiFuturesV1HistoricalOpenInterestDaysRequest {
	r.toTs = &toTs
	return r
}

// The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
func (r ApiFuturesV1HistoricalOpenInterestDaysRequest) Aggregate(aggregate int32) ApiFuturesV1HistoricalOpenInterestDaysRequest {
	r.aggregate = &aggregate
	return r
}

// Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
func (r ApiFuturesV1HistoricalOpenInterestDaysRequest) Fill(fill bool) ApiFuturesV1HistoricalOpenInterestDaysRequest {
	r.fill = &fill
	return r
}

// The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
func (r ApiFuturesV1HistoricalOpenInterestDaysRequest) MappingPriority(mappingPriority string) ApiFuturesV1HistoricalOpenInterestDaysRequest {
	r.mappingPriority = &mappingPriority
	return r
}

// The format of the data response in uppercase. It can be one of the following: JSON,CSV
func (r ApiFuturesV1HistoricalOpenInterestDaysRequest) ResponseFormat(responseFormat string) ApiFuturesV1HistoricalOpenInterestDaysRequest {
	r.responseFormat = &responseFormat
	return r
}

func (r ApiFuturesV1HistoricalOpenInterestDaysRequest) Execute() (*GENERICRESPONSE, *http.Response, error) {
	return r.ApiService.FuturesV1HistoricalOpenInterestDaysExecute(r)
}

/*
FuturesV1HistoricalOpenInterestDays Method for FuturesV1HistoricalOpenInterestDays

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFuturesV1HistoricalOpenInterestDaysRequest
*/
func (a *FuturesApiService) FuturesV1HistoricalOpenInterestDays(ctx context.Context) ApiFuturesV1HistoricalOpenInterestDaysRequest {
	return ApiFuturesV1HistoricalOpenInterestDaysRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GENERICRESPONSE
func (a *FuturesApiService) FuturesV1HistoricalOpenInterestDaysExecute(r ApiFuturesV1HistoricalOpenInterestDaysRequest) (*GENERICRESPONSE, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GENERICRESPONSE
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FuturesApiService.FuturesV1HistoricalOpenInterestDays")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/futures/v1/historical/open-interest/days"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.market == nil {
		return localVarReturnValue, nil, reportError("market is required and must be specified")
	}
	if strlen(*r.market) < 2 {
		return localVarReturnValue, nil, reportError("market must have at least 2 elements")
	}
	if strlen(*r.market) > 30 {
		return localVarReturnValue, nil, reportError("market must have less than 30 elements")
	}
	if r.instrument == nil {
		return localVarReturnValue, nil, reportError("instrument is required and must be specified")
	}
	if strlen(*r.instrument) < 1 {
		return localVarReturnValue, nil, reportError("instrument must have at least 1 elements")
	}
	if strlen(*r.instrument) > 500 {
		return localVarReturnValue, nil, reportError("instrument must have less than 500 elements")
	}

	parameterAddToQuery(localVarQueryParams, "market", r.market, "")
	parameterAddToQuery(localVarQueryParams, "instrument", r.instrument, "")
	if r.groups != nil {
		parameterAddToQuery(localVarQueryParams, "groups", r.groups, "csv")
	}
	if r.limit != nil {
		parameterAddToQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.toTs != nil {
		parameterAddToQuery(localVarQueryParams, "to_ts", r.toTs, "")
	}
	if r.aggregate != nil {
		parameterAddToQuery(localVarQueryParams, "aggregate", r.aggregate, "")
	}
	if r.fill != nil {
		parameterAddToQuery(localVarQueryParams, "fill", r.fill, "")
	}
	if r.mappingPriority != nil {
		parameterAddToQuery(localVarQueryParams, "mapping_priority", r.mappingPriority, "")
	}
	if r.responseFormat != nil {
		parameterAddToQuery(localVarQueryParams, "response_format", r.responseFormat, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 502 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFuturesV1HistoricalOpenInterestHoursRequest struct {
	ctx context.Context
	ApiService *FuturesApiService
	market *string
	instrument *string
	groups *[]string
	limit *int32
	toTs *int32
	aggregate *int32
	fill *bool
	mappingPriority *string
	responseFormat *string
}

// The exchange to obtain data from
func (r ApiFuturesV1HistoricalOpenInterestHoursRequest) Market(market string) ApiFuturesV1HistoricalOpenInterestHoursRequest {
	r.market = &market
	return r
}

// The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
func (r ApiFuturesV1HistoricalOpenInterestHoursRequest) Instrument(instrument string) ApiFuturesV1HistoricalOpenInterestHoursRequest {
	r.instrument = &instrument
	return r
}

// When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_MESSAGE,MESSAGE
func (r ApiFuturesV1HistoricalOpenInterestHoursRequest) Groups(groups []string) ApiFuturesV1HistoricalOpenInterestHoursRequest {
	r.groups = &groups
	return r
}

// The number of data points to return
func (r ApiFuturesV1HistoricalOpenInterestHoursRequest) Limit(limit int32) ApiFuturesV1HistoricalOpenInterestHoursRequest {
	r.limit = &limit
	return r
}

// Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
func (r ApiFuturesV1HistoricalOpenInterestHoursRequest) ToTs(toTs int32) ApiFuturesV1HistoricalOpenInterestHoursRequest {
	r.toTs = &toTs
	return r
}

// The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
func (r ApiFuturesV1HistoricalOpenInterestHoursRequest) Aggregate(aggregate int32) ApiFuturesV1HistoricalOpenInterestHoursRequest {
	r.aggregate = &aggregate
	return r
}

// Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
func (r ApiFuturesV1HistoricalOpenInterestHoursRequest) Fill(fill bool) ApiFuturesV1HistoricalOpenInterestHoursRequest {
	r.fill = &fill
	return r
}

// The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
func (r ApiFuturesV1HistoricalOpenInterestHoursRequest) MappingPriority(mappingPriority string) ApiFuturesV1HistoricalOpenInterestHoursRequest {
	r.mappingPriority = &mappingPriority
	return r
}

// The format of the data response in uppercase. It can be one of the following: JSON,CSV
func (r ApiFuturesV1HistoricalOpenInterestHoursRequest) ResponseFormat(responseFormat string) ApiFuturesV1HistoricalOpenInterestHoursRequest {
	r.responseFormat = &responseFormat
	return r
}

func (r ApiFuturesV1HistoricalOpenInterestHoursRequest) Execute() (*GENERICRESPONSE, *http.Response, error) {
	return r.ApiService.FuturesV1HistoricalOpenInterestHoursExecute(r)
}

/*
FuturesV1HistoricalOpenInterestHours Method for FuturesV1HistoricalOpenInterestHours

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFuturesV1HistoricalOpenInterestHoursRequest
*/
func (a *FuturesApiService) FuturesV1HistoricalOpenInterestHours(ctx context.Context) ApiFuturesV1HistoricalOpenInterestHoursRequest {
	return ApiFuturesV1HistoricalOpenInterestHoursRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GENERICRESPONSE
func (a *FuturesApiService) FuturesV1HistoricalOpenInterestHoursExecute(r ApiFuturesV1HistoricalOpenInterestHoursRequest) (*GENERICRESPONSE, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GENERICRESPONSE
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FuturesApiService.FuturesV1HistoricalOpenInterestHours")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/futures/v1/historical/open-interest/hours"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.market == nil {
		return localVarReturnValue, nil, reportError("market is required and must be specified")
	}
	if strlen(*r.market) < 2 {
		return localVarReturnValue, nil, reportError("market must have at least 2 elements")
	}
	if strlen(*r.market) > 30 {
		return localVarReturnValue, nil, reportError("market must have less than 30 elements")
	}
	if r.instrument == nil {
		return localVarReturnValue, nil, reportError("instrument is required and must be specified")
	}
	if strlen(*r.instrument) < 1 {
		return localVarReturnValue, nil, reportError("instrument must have at least 1 elements")
	}
	if strlen(*r.instrument) > 500 {
		return localVarReturnValue, nil, reportError("instrument must have less than 500 elements")
	}

	parameterAddToQuery(localVarQueryParams, "market", r.market, "")
	parameterAddToQuery(localVarQueryParams, "instrument", r.instrument, "")
	if r.groups != nil {
		parameterAddToQuery(localVarQueryParams, "groups", r.groups, "csv")
	}
	if r.limit != nil {
		parameterAddToQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.toTs != nil {
		parameterAddToQuery(localVarQueryParams, "to_ts", r.toTs, "")
	}
	if r.aggregate != nil {
		parameterAddToQuery(localVarQueryParams, "aggregate", r.aggregate, "")
	}
	if r.fill != nil {
		parameterAddToQuery(localVarQueryParams, "fill", r.fill, "")
	}
	if r.mappingPriority != nil {
		parameterAddToQuery(localVarQueryParams, "mapping_priority", r.mappingPriority, "")
	}
	if r.responseFormat != nil {
		parameterAddToQuery(localVarQueryParams, "response_format", r.responseFormat, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 502 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFuturesV1HistoricalOpenInterestMessagesRequest struct {
	ctx context.Context
	ApiService *FuturesApiService
	market *string
	instrument *string
	afterTs *int32
	lastCcseq *int32
	limit *int32
	mappingPriority *string
	responseFormat *string
	return404OnEmptyResponse *bool
}

// The exchange to obtain data from
func (r ApiFuturesV1HistoricalOpenInterestMessagesRequest) Market(market string) ApiFuturesV1HistoricalOpenInterestMessagesRequest {
	r.market = &market
	return r
}

// The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
func (r ApiFuturesV1HistoricalOpenInterestMessagesRequest) Instrument(instrument string) ApiFuturesV1HistoricalOpenInterestMessagesRequest {
	r.instrument = &instrument
	return r
}

// Unix timestamp in seconds of the earliest open interest message in the response
func (r ApiFuturesV1HistoricalOpenInterestMessagesRequest) AfterTs(afterTs int32) ApiFuturesV1HistoricalOpenInterestMessagesRequest {
	r.afterTs = &afterTs
	return r
}

// The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request.
func (r ApiFuturesV1HistoricalOpenInterestMessagesRequest) LastCcseq(lastCcseq int32) ApiFuturesV1HistoricalOpenInterestMessagesRequest {
	r.lastCcseq = &lastCcseq
	return r
}

// The maximum number of open interest messages to return
func (r ApiFuturesV1HistoricalOpenInterestMessagesRequest) Limit(limit int32) ApiFuturesV1HistoricalOpenInterestMessagesRequest {
	r.limit = &limit
	return r
}

// The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
func (r ApiFuturesV1HistoricalOpenInterestMessagesRequest) MappingPriority(mappingPriority string) ApiFuturesV1HistoricalOpenInterestMessagesRequest {
	r.mappingPriority = &mappingPriority
	return r
}

// The format of the data response in uppercase. It can be one of the following: JSON,CSV
func (r ApiFuturesV1HistoricalOpenInterestMessagesRequest) ResponseFormat(responseFormat string) ApiFuturesV1HistoricalOpenInterestMessagesRequest {
	r.responseFormat = &responseFormat
	return r
}

// If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.
func (r ApiFuturesV1HistoricalOpenInterestMessagesRequest) Return404OnEmptyResponse(return404OnEmptyResponse bool) ApiFuturesV1HistoricalOpenInterestMessagesRequest {
	r.return404OnEmptyResponse = &return404OnEmptyResponse
	return r
}

func (r ApiFuturesV1HistoricalOpenInterestMessagesRequest) Execute() (*GENERICRESPONSE, *http.Response, error) {
	return r.ApiService.FuturesV1HistoricalOpenInterestMessagesExecute(r)
}

/*
FuturesV1HistoricalOpenInterestMessages Method for FuturesV1HistoricalOpenInterestMessages

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFuturesV1HistoricalOpenInterestMessagesRequest
*/
func (a *FuturesApiService) FuturesV1HistoricalOpenInterestMessages(ctx context.Context) ApiFuturesV1HistoricalOpenInterestMessagesRequest {
	return ApiFuturesV1HistoricalOpenInterestMessagesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GENERICRESPONSE
func (a *FuturesApiService) FuturesV1HistoricalOpenInterestMessagesExecute(r ApiFuturesV1HistoricalOpenInterestMessagesRequest) (*GENERICRESPONSE, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GENERICRESPONSE
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FuturesApiService.FuturesV1HistoricalOpenInterestMessages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/futures/v1/historical/open-interest-messages"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.market == nil {
		return localVarReturnValue, nil, reportError("market is required and must be specified")
	}
	if strlen(*r.market) < 2 {
		return localVarReturnValue, nil, reportError("market must have at least 2 elements")
	}
	if strlen(*r.market) > 30 {
		return localVarReturnValue, nil, reportError("market must have less than 30 elements")
	}
	if r.instrument == nil {
		return localVarReturnValue, nil, reportError("instrument is required and must be specified")
	}
	if strlen(*r.instrument) < 1 {
		return localVarReturnValue, nil, reportError("instrument must have at least 1 elements")
	}
	if strlen(*r.instrument) > 500 {
		return localVarReturnValue, nil, reportError("instrument must have less than 500 elements")
	}

	parameterAddToQuery(localVarQueryParams, "market", r.market, "")
	parameterAddToQuery(localVarQueryParams, "instrument", r.instrument, "")
	if r.afterTs != nil {
		parameterAddToQuery(localVarQueryParams, "after_ts", r.afterTs, "")
	}
	if r.lastCcseq != nil {
		parameterAddToQuery(localVarQueryParams, "last_ccseq", r.lastCcseq, "")
	}
	if r.limit != nil {
		parameterAddToQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.mappingPriority != nil {
		parameterAddToQuery(localVarQueryParams, "mapping_priority", r.mappingPriority, "")
	}
	if r.responseFormat != nil {
		parameterAddToQuery(localVarQueryParams, "response_format", r.responseFormat, "")
	}
	if r.return404OnEmptyResponse != nil {
		parameterAddToQuery(localVarQueryParams, "return_404_on_empty_response", r.return404OnEmptyResponse, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key_header"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key_query"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 502 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFuturesV1HistoricalOpenInterestMessagesHourRequest struct {
	ctx context.Context
	ApiService *FuturesApiService
	market *string
	instrument *string
	hourTs *int32
	mappingPriority *string
	responseFormat *string
	return404OnEmptyResponse *bool
}

// The exchange to obtain data from
func (r ApiFuturesV1HistoricalOpenInterestMessagesHourRequest) Market(market string) ApiFuturesV1HistoricalOpenInterestMessagesHourRequest {
	r.market = &market
	return r
}

// The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
func (r ApiFuturesV1HistoricalOpenInterestMessagesHourRequest) Instrument(instrument string) ApiFuturesV1HistoricalOpenInterestMessagesHourRequest {
	r.instrument = &instrument
	return r
}

// Unix timestamp in seconds for the hour containing the open interest updates you are interested in. You can pass any timestamp in the hour but we will round it down the the full hour timestmap and return all open interest updates in that hour.
func (r ApiFuturesV1HistoricalOpenInterestMessagesHourRequest) HourTs(hourTs int32) ApiFuturesV1HistoricalOpenInterestMessagesHourRequest {
	r.hourTs = &hourTs
	return r
}

// The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
func (r ApiFuturesV1HistoricalOpenInterestMessagesHourRequest) MappingPriority(mappingPriority string) ApiFuturesV1HistoricalOpenInterestMessagesHourRequest {
	r.mappingPriority = &mappingPriority
	return r
}

// The format of the data response in uppercase. It can be one of the following: JSON,CSV
func (r ApiFuturesV1HistoricalOpenInterestMessagesHourRequest) ResponseFormat(responseFormat string) ApiFuturesV1HistoricalOpenInterestMessagesHourRequest {
	r.responseFormat = &responseFormat
	return r
}

// If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.
func (r ApiFuturesV1HistoricalOpenInterestMessagesHourRequest) Return404OnEmptyResponse(return404OnEmptyResponse bool) ApiFuturesV1HistoricalOpenInterestMessagesHourRequest {
	r.return404OnEmptyResponse = &return404OnEmptyResponse
	return r
}

func (r ApiFuturesV1HistoricalOpenInterestMessagesHourRequest) Execute() (*GENERICRESPONSE, *http.Response, error) {
	return r.ApiService.FuturesV1HistoricalOpenInterestMessagesHourExecute(r)
}

/*
FuturesV1HistoricalOpenInterestMessagesHour Method for FuturesV1HistoricalOpenInterestMessagesHour

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFuturesV1HistoricalOpenInterestMessagesHourRequest
*/
func (a *FuturesApiService) FuturesV1HistoricalOpenInterestMessagesHour(ctx context.Context) ApiFuturesV1HistoricalOpenInterestMessagesHourRequest {
	return ApiFuturesV1HistoricalOpenInterestMessagesHourRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GENERICRESPONSE
func (a *FuturesApiService) FuturesV1HistoricalOpenInterestMessagesHourExecute(r ApiFuturesV1HistoricalOpenInterestMessagesHourRequest) (*GENERICRESPONSE, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GENERICRESPONSE
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FuturesApiService.FuturesV1HistoricalOpenInterestMessagesHour")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/futures/v1/historical/open-interest-messages/hour"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.market == nil {
		return localVarReturnValue, nil, reportError("market is required and must be specified")
	}
	if strlen(*r.market) < 2 {
		return localVarReturnValue, nil, reportError("market must have at least 2 elements")
	}
	if strlen(*r.market) > 30 {
		return localVarReturnValue, nil, reportError("market must have less than 30 elements")
	}
	if r.instrument == nil {
		return localVarReturnValue, nil, reportError("instrument is required and must be specified")
	}
	if strlen(*r.instrument) < 1 {
		return localVarReturnValue, nil, reportError("instrument must have at least 1 elements")
	}
	if strlen(*r.instrument) > 500 {
		return localVarReturnValue, nil, reportError("instrument must have less than 500 elements")
	}

	parameterAddToQuery(localVarQueryParams, "market", r.market, "")
	parameterAddToQuery(localVarQueryParams, "instrument", r.instrument, "")
	if r.hourTs != nil {
		parameterAddToQuery(localVarQueryParams, "hour_ts", r.hourTs, "")
	}
	if r.mappingPriority != nil {
		parameterAddToQuery(localVarQueryParams, "mapping_priority", r.mappingPriority, "")
	}
	if r.responseFormat != nil {
		parameterAddToQuery(localVarQueryParams, "response_format", r.responseFormat, "")
	}
	if r.return404OnEmptyResponse != nil {
		parameterAddToQuery(localVarQueryParams, "return_404_on_empty_response", r.return404OnEmptyResponse, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key_header"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key_query"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 502 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFuturesV1HistoricalOpenInterestMinutesRequest struct {
	ctx context.Context
	ApiService *FuturesApiService
	market *string
	instrument *string
	groups *[]string
	limit *int32
	toTs *int32
	aggregate *int32
	fill *bool
	mappingPriority *string
	responseFormat *string
}

// The exchange to obtain data from
func (r ApiFuturesV1HistoricalOpenInterestMinutesRequest) Market(market string) ApiFuturesV1HistoricalOpenInterestMinutesRequest {
	r.market = &market
	return r
}

// The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
func (r ApiFuturesV1HistoricalOpenInterestMinutesRequest) Instrument(instrument string) ApiFuturesV1HistoricalOpenInterestMinutesRequest {
	r.instrument = &instrument
	return r
}

// When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_MESSAGE,MESSAGE
func (r ApiFuturesV1HistoricalOpenInterestMinutesRequest) Groups(groups []string) ApiFuturesV1HistoricalOpenInterestMinutesRequest {
	r.groups = &groups
	return r
}

// The number of data points to return
func (r ApiFuturesV1HistoricalOpenInterestMinutesRequest) Limit(limit int32) ApiFuturesV1HistoricalOpenInterestMinutesRequest {
	r.limit = &limit
	return r
}

// Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
func (r ApiFuturesV1HistoricalOpenInterestMinutesRequest) ToTs(toTs int32) ApiFuturesV1HistoricalOpenInterestMinutesRequest {
	r.toTs = &toTs
	return r
}

// The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
func (r ApiFuturesV1HistoricalOpenInterestMinutesRequest) Aggregate(aggregate int32) ApiFuturesV1HistoricalOpenInterestMinutesRequest {
	r.aggregate = &aggregate
	return r
}

// Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
func (r ApiFuturesV1HistoricalOpenInterestMinutesRequest) Fill(fill bool) ApiFuturesV1HistoricalOpenInterestMinutesRequest {
	r.fill = &fill
	return r
}

// The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
func (r ApiFuturesV1HistoricalOpenInterestMinutesRequest) MappingPriority(mappingPriority string) ApiFuturesV1HistoricalOpenInterestMinutesRequest {
	r.mappingPriority = &mappingPriority
	return r
}

// The format of the data response in uppercase. It can be one of the following: JSON,CSV
func (r ApiFuturesV1HistoricalOpenInterestMinutesRequest) ResponseFormat(responseFormat string) ApiFuturesV1HistoricalOpenInterestMinutesRequest {
	r.responseFormat = &responseFormat
	return r
}

func (r ApiFuturesV1HistoricalOpenInterestMinutesRequest) Execute() (*GENERICRESPONSE, *http.Response, error) {
	return r.ApiService.FuturesV1HistoricalOpenInterestMinutesExecute(r)
}

/*
FuturesV1HistoricalOpenInterestMinutes Method for FuturesV1HistoricalOpenInterestMinutes

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFuturesV1HistoricalOpenInterestMinutesRequest
*/
func (a *FuturesApiService) FuturesV1HistoricalOpenInterestMinutes(ctx context.Context) ApiFuturesV1HistoricalOpenInterestMinutesRequest {
	return ApiFuturesV1HistoricalOpenInterestMinutesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GENERICRESPONSE
func (a *FuturesApiService) FuturesV1HistoricalOpenInterestMinutesExecute(r ApiFuturesV1HistoricalOpenInterestMinutesRequest) (*GENERICRESPONSE, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GENERICRESPONSE
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FuturesApiService.FuturesV1HistoricalOpenInterestMinutes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/futures/v1/historical/open-interest/minutes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.market == nil {
		return localVarReturnValue, nil, reportError("market is required and must be specified")
	}
	if strlen(*r.market) < 2 {
		return localVarReturnValue, nil, reportError("market must have at least 2 elements")
	}
	if strlen(*r.market) > 30 {
		return localVarReturnValue, nil, reportError("market must have less than 30 elements")
	}
	if r.instrument == nil {
		return localVarReturnValue, nil, reportError("instrument is required and must be specified")
	}
	if strlen(*r.instrument) < 1 {
		return localVarReturnValue, nil, reportError("instrument must have at least 1 elements")
	}
	if strlen(*r.instrument) > 500 {
		return localVarReturnValue, nil, reportError("instrument must have less than 500 elements")
	}

	parameterAddToQuery(localVarQueryParams, "market", r.market, "")
	parameterAddToQuery(localVarQueryParams, "instrument", r.instrument, "")
	if r.groups != nil {
		parameterAddToQuery(localVarQueryParams, "groups", r.groups, "csv")
	}
	if r.limit != nil {
		parameterAddToQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.toTs != nil {
		parameterAddToQuery(localVarQueryParams, "to_ts", r.toTs, "")
	}
	if r.aggregate != nil {
		parameterAddToQuery(localVarQueryParams, "aggregate", r.aggregate, "")
	}
	if r.fill != nil {
		parameterAddToQuery(localVarQueryParams, "fill", r.fill, "")
	}
	if r.mappingPriority != nil {
		parameterAddToQuery(localVarQueryParams, "mapping_priority", r.mappingPriority, "")
	}
	if r.responseFormat != nil {
		parameterAddToQuery(localVarQueryParams, "response_format", r.responseFormat, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 502 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFuturesV1HistoricalTradesRequest struct {
	ctx context.Context
	ApiService *FuturesApiService
	market *string
	instrument *string
	afterTs *int32
	lastCcseq *int32
	limit *int32
	mappingPriority *string
	responseFormat *string
	return404OnEmptyResponse *bool
}

// The exchange to obtain data from
func (r ApiFuturesV1HistoricalTradesRequest) Market(market string) ApiFuturesV1HistoricalTradesRequest {
	r.market = &market
	return r
}

// The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
func (r ApiFuturesV1HistoricalTradesRequest) Instrument(instrument string) ApiFuturesV1HistoricalTradesRequest {
	r.instrument = &instrument
	return r
}

// Unix timestamp in seconds of the earliest trade in the response.
func (r ApiFuturesV1HistoricalTradesRequest) AfterTs(afterTs int32) ApiFuturesV1HistoricalTradesRequest {
	r.afterTs = &afterTs
	return r
}

// The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request.
func (r ApiFuturesV1HistoricalTradesRequest) LastCcseq(lastCcseq int32) ApiFuturesV1HistoricalTradesRequest {
	r.lastCcseq = &lastCcseq
	return r
}

// The maximum number of trades to return
func (r ApiFuturesV1HistoricalTradesRequest) Limit(limit int32) ApiFuturesV1HistoricalTradesRequest {
	r.limit = &limit
	return r
}

// The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
func (r ApiFuturesV1HistoricalTradesRequest) MappingPriority(mappingPriority string) ApiFuturesV1HistoricalTradesRequest {
	r.mappingPriority = &mappingPriority
	return r
}

// The format of the data response in uppercase. It can be one of the following: JSON,CSV
func (r ApiFuturesV1HistoricalTradesRequest) ResponseFormat(responseFormat string) ApiFuturesV1HistoricalTradesRequest {
	r.responseFormat = &responseFormat
	return r
}

// If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.
func (r ApiFuturesV1HistoricalTradesRequest) Return404OnEmptyResponse(return404OnEmptyResponse bool) ApiFuturesV1HistoricalTradesRequest {
	r.return404OnEmptyResponse = &return404OnEmptyResponse
	return r
}

func (r ApiFuturesV1HistoricalTradesRequest) Execute() (*GENERICRESPONSE, *http.Response, error) {
	return r.ApiService.FuturesV1HistoricalTradesExecute(r)
}

/*
FuturesV1HistoricalTrades Method for FuturesV1HistoricalTrades

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFuturesV1HistoricalTradesRequest
*/
func (a *FuturesApiService) FuturesV1HistoricalTrades(ctx context.Context) ApiFuturesV1HistoricalTradesRequest {
	return ApiFuturesV1HistoricalTradesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GENERICRESPONSE
func (a *FuturesApiService) FuturesV1HistoricalTradesExecute(r ApiFuturesV1HistoricalTradesRequest) (*GENERICRESPONSE, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GENERICRESPONSE
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FuturesApiService.FuturesV1HistoricalTrades")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/futures/v1/historical/trades"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.market == nil {
		return localVarReturnValue, nil, reportError("market is required and must be specified")
	}
	if strlen(*r.market) < 2 {
		return localVarReturnValue, nil, reportError("market must have at least 2 elements")
	}
	if strlen(*r.market) > 30 {
		return localVarReturnValue, nil, reportError("market must have less than 30 elements")
	}
	if r.instrument == nil {
		return localVarReturnValue, nil, reportError("instrument is required and must be specified")
	}
	if strlen(*r.instrument) < 1 {
		return localVarReturnValue, nil, reportError("instrument must have at least 1 elements")
	}
	if strlen(*r.instrument) > 500 {
		return localVarReturnValue, nil, reportError("instrument must have less than 500 elements")
	}

	parameterAddToQuery(localVarQueryParams, "market", r.market, "")
	parameterAddToQuery(localVarQueryParams, "instrument", r.instrument, "")
	if r.afterTs != nil {
		parameterAddToQuery(localVarQueryParams, "after_ts", r.afterTs, "")
	}
	if r.lastCcseq != nil {
		parameterAddToQuery(localVarQueryParams, "last_ccseq", r.lastCcseq, "")
	}
	if r.limit != nil {
		parameterAddToQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.mappingPriority != nil {
		parameterAddToQuery(localVarQueryParams, "mapping_priority", r.mappingPriority, "")
	}
	if r.responseFormat != nil {
		parameterAddToQuery(localVarQueryParams, "response_format", r.responseFormat, "")
	}
	if r.return404OnEmptyResponse != nil {
		parameterAddToQuery(localVarQueryParams, "return_404_on_empty_response", r.return404OnEmptyResponse, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key_header"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key_query"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 502 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFuturesV1HistoricalTradesHourRequest struct {
	ctx context.Context
	ApiService *FuturesApiService
	market *string
	instrument *string
	hourTs *int32
	mappingPriority *string
	responseFormat *string
	return404OnEmptyResponse *bool
}

// The exchange to obtain data from
func (r ApiFuturesV1HistoricalTradesHourRequest) Market(market string) ApiFuturesV1HistoricalTradesHourRequest {
	r.market = &market
	return r
}

// The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
func (r ApiFuturesV1HistoricalTradesHourRequest) Instrument(instrument string) ApiFuturesV1HistoricalTradesHourRequest {
	r.instrument = &instrument
	return r
}

// Unix timestamp in seconds for the hour containing the trades you are interested in. You can pass any timestamp within an hour but we will round it down the the full hour timestmap and return all trades in that hour.
func (r ApiFuturesV1HistoricalTradesHourRequest) HourTs(hourTs int32) ApiFuturesV1HistoricalTradesHourRequest {
	r.hourTs = &hourTs
	return r
}

// The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
func (r ApiFuturesV1HistoricalTradesHourRequest) MappingPriority(mappingPriority string) ApiFuturesV1HistoricalTradesHourRequest {
	r.mappingPriority = &mappingPriority
	return r
}

// The format of the data response in uppercase. It can be one of the following: JSON,CSV
func (r ApiFuturesV1HistoricalTradesHourRequest) ResponseFormat(responseFormat string) ApiFuturesV1HistoricalTradesHourRequest {
	r.responseFormat = &responseFormat
	return r
}

// If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.
func (r ApiFuturesV1HistoricalTradesHourRequest) Return404OnEmptyResponse(return404OnEmptyResponse bool) ApiFuturesV1HistoricalTradesHourRequest {
	r.return404OnEmptyResponse = &return404OnEmptyResponse
	return r
}

func (r ApiFuturesV1HistoricalTradesHourRequest) Execute() (*GENERICRESPONSE, *http.Response, error) {
	return r.ApiService.FuturesV1HistoricalTradesHourExecute(r)
}

/*
FuturesV1HistoricalTradesHour Method for FuturesV1HistoricalTradesHour

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFuturesV1HistoricalTradesHourRequest
*/
func (a *FuturesApiService) FuturesV1HistoricalTradesHour(ctx context.Context) ApiFuturesV1HistoricalTradesHourRequest {
	return ApiFuturesV1HistoricalTradesHourRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GENERICRESPONSE
func (a *FuturesApiService) FuturesV1HistoricalTradesHourExecute(r ApiFuturesV1HistoricalTradesHourRequest) (*GENERICRESPONSE, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GENERICRESPONSE
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FuturesApiService.FuturesV1HistoricalTradesHour")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/futures/v1/historical/trades/hour"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.market == nil {
		return localVarReturnValue, nil, reportError("market is required and must be specified")
	}
	if strlen(*r.market) < 2 {
		return localVarReturnValue, nil, reportError("market must have at least 2 elements")
	}
	if strlen(*r.market) > 30 {
		return localVarReturnValue, nil, reportError("market must have less than 30 elements")
	}
	if r.instrument == nil {
		return localVarReturnValue, nil, reportError("instrument is required and must be specified")
	}
	if strlen(*r.instrument) < 1 {
		return localVarReturnValue, nil, reportError("instrument must have at least 1 elements")
	}
	if strlen(*r.instrument) > 500 {
		return localVarReturnValue, nil, reportError("instrument must have less than 500 elements")
	}

	parameterAddToQuery(localVarQueryParams, "market", r.market, "")
	parameterAddToQuery(localVarQueryParams, "instrument", r.instrument, "")
	if r.hourTs != nil {
		parameterAddToQuery(localVarQueryParams, "hour_ts", r.hourTs, "")
	}
	if r.mappingPriority != nil {
		parameterAddToQuery(localVarQueryParams, "mapping_priority", r.mappingPriority, "")
	}
	if r.responseFormat != nil {
		parameterAddToQuery(localVarQueryParams, "response_format", r.responseFormat, "")
	}
	if r.return404OnEmptyResponse != nil {
		parameterAddToQuery(localVarQueryParams, "return_404_on_empty_response", r.return404OnEmptyResponse, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key_header"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key_query"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 502 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFuturesV1LatestFundingRateTickRequest struct {
	ctx context.Context
	ApiService *FuturesApiService
	market *string
	instruments *[]string
	groups *[]string
	mappingPriority *string
}

// The exchange to obtain data from
func (r ApiFuturesV1LatestFundingRateTickRequest) Market(market string) ApiFuturesV1LatestFundingRateTickRequest {
	r.market = &market
	return r
}

// A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.
func (r ApiFuturesV1LatestFundingRateTickRequest) Instruments(instruments []string) ApiFuturesV1LatestFundingRateTickRequest {
	r.instruments = &instruments
	return r
}

// When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME
func (r ApiFuturesV1LatestFundingRateTickRequest) Groups(groups []string) ApiFuturesV1LatestFundingRateTickRequest {
	r.groups = &groups
	return r
}

// The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
func (r ApiFuturesV1LatestFundingRateTickRequest) MappingPriority(mappingPriority string) ApiFuturesV1LatestFundingRateTickRequest {
	r.mappingPriority = &mappingPriority
	return r
}

func (r ApiFuturesV1LatestFundingRateTickRequest) Execute() (*GENERICRESPONSE, *http.Response, error) {
	return r.ApiService.FuturesV1LatestFundingRateTickExecute(r)
}

/*
FuturesV1LatestFundingRateTick Method for FuturesV1LatestFundingRateTick

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFuturesV1LatestFundingRateTickRequest
*/
func (a *FuturesApiService) FuturesV1LatestFundingRateTick(ctx context.Context) ApiFuturesV1LatestFundingRateTickRequest {
	return ApiFuturesV1LatestFundingRateTickRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GENERICRESPONSE
func (a *FuturesApiService) FuturesV1LatestFundingRateTickExecute(r ApiFuturesV1LatestFundingRateTickRequest) (*GENERICRESPONSE, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GENERICRESPONSE
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FuturesApiService.FuturesV1LatestFundingRateTick")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/futures/v1/latest/funding-rate/tick"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.market == nil {
		return localVarReturnValue, nil, reportError("market is required and must be specified")
	}
	if strlen(*r.market) < 2 {
		return localVarReturnValue, nil, reportError("market must have at least 2 elements")
	}
	if strlen(*r.market) > 30 {
		return localVarReturnValue, nil, reportError("market must have less than 30 elements")
	}
	if r.instruments == nil {
		return localVarReturnValue, nil, reportError("instruments is required and must be specified")
	}
	if len(*r.instruments) < 1 {
		return localVarReturnValue, nil, reportError("instruments must have at least 1 elements")
	}
	if len(*r.instruments) > 25 {
		return localVarReturnValue, nil, reportError("instruments must have less than 25 elements")
	}

	parameterAddToQuery(localVarQueryParams, "market", r.market, "")
	parameterAddToQuery(localVarQueryParams, "instruments", r.instruments, "csv")
	if r.groups != nil {
		parameterAddToQuery(localVarQueryParams, "groups", r.groups, "csv")
	}
	if r.mappingPriority != nil {
		parameterAddToQuery(localVarQueryParams, "mapping_priority", r.mappingPriority, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 502 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFuturesV1LatestInstrumentMetadataRequest struct {
	ctx context.Context
	ApiService *FuturesApiService
	market *string
	instruments *[]string
	groups *[]string
	mappingPriority *string
}

// The exchange to obtain data from
func (r ApiFuturesV1LatestInstrumentMetadataRequest) Market(market string) ApiFuturesV1LatestInstrumentMetadataRequest {
	r.market = &market
	return r
}

// A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.
func (r ApiFuturesV1LatestInstrumentMetadataRequest) Instruments(instruments []string) ApiFuturesV1LatestInstrumentMetadataRequest {
	r.instruments = &instruments
	return r
}

// When requesting metadata entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: STATUS,INTERNAL,GENERAL,MIGRATION,SOURCE
func (r ApiFuturesV1LatestInstrumentMetadataRequest) Groups(groups []string) ApiFuturesV1LatestInstrumentMetadataRequest {
	r.groups = &groups
	return r
}

// The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
func (r ApiFuturesV1LatestInstrumentMetadataRequest) MappingPriority(mappingPriority string) ApiFuturesV1LatestInstrumentMetadataRequest {
	r.mappingPriority = &mappingPriority
	return r
}

func (r ApiFuturesV1LatestInstrumentMetadataRequest) Execute() (*GENERICRESPONSE, *http.Response, error) {
	return r.ApiService.FuturesV1LatestInstrumentMetadataExecute(r)
}

/*
FuturesV1LatestInstrumentMetadata Method for FuturesV1LatestInstrumentMetadata

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFuturesV1LatestInstrumentMetadataRequest
*/
func (a *FuturesApiService) FuturesV1LatestInstrumentMetadata(ctx context.Context) ApiFuturesV1LatestInstrumentMetadataRequest {
	return ApiFuturesV1LatestInstrumentMetadataRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GENERICRESPONSE
func (a *FuturesApiService) FuturesV1LatestInstrumentMetadataExecute(r ApiFuturesV1LatestInstrumentMetadataRequest) (*GENERICRESPONSE, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GENERICRESPONSE
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FuturesApiService.FuturesV1LatestInstrumentMetadata")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/futures/v1/latest/instrument/metadata"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.market == nil {
		return localVarReturnValue, nil, reportError("market is required and must be specified")
	}
	if strlen(*r.market) < 2 {
		return localVarReturnValue, nil, reportError("market must have at least 2 elements")
	}
	if strlen(*r.market) > 30 {
		return localVarReturnValue, nil, reportError("market must have less than 30 elements")
	}
	if r.instruments == nil {
		return localVarReturnValue, nil, reportError("instruments is required and must be specified")
	}
	if len(*r.instruments) < 1 {
		return localVarReturnValue, nil, reportError("instruments must have at least 1 elements")
	}
	if len(*r.instruments) > 25 {
		return localVarReturnValue, nil, reportError("instruments must have less than 25 elements")
	}

	parameterAddToQuery(localVarQueryParams, "market", r.market, "")
	parameterAddToQuery(localVarQueryParams, "instruments", r.instruments, "csv")
	if r.groups != nil {
		parameterAddToQuery(localVarQueryParams, "groups", r.groups, "csv")
	}
	if r.mappingPriority != nil {
		parameterAddToQuery(localVarQueryParams, "mapping_priority", r.mappingPriority, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 502 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFuturesV1LatestOpenInterestTickRequest struct {
	ctx context.Context
	ApiService *FuturesApiService
	market *string
	instruments *[]string
	groups *[]string
	mappingPriority *string
}

// The exchange to obtain data from
func (r ApiFuturesV1LatestOpenInterestTickRequest) Market(market string) ApiFuturesV1LatestOpenInterestTickRequest {
	r.market = &market
	return r
}

// A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.
func (r ApiFuturesV1LatestOpenInterestTickRequest) Instruments(instruments []string) ApiFuturesV1LatestOpenInterestTickRequest {
	r.instruments = &instruments
	return r
}

// When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME
func (r ApiFuturesV1LatestOpenInterestTickRequest) Groups(groups []string) ApiFuturesV1LatestOpenInterestTickRequest {
	r.groups = &groups
	return r
}

// The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
func (r ApiFuturesV1LatestOpenInterestTickRequest) MappingPriority(mappingPriority string) ApiFuturesV1LatestOpenInterestTickRequest {
	r.mappingPriority = &mappingPriority
	return r
}

func (r ApiFuturesV1LatestOpenInterestTickRequest) Execute() (*GENERICRESPONSE, *http.Response, error) {
	return r.ApiService.FuturesV1LatestOpenInterestTickExecute(r)
}

/*
FuturesV1LatestOpenInterestTick Method for FuturesV1LatestOpenInterestTick

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFuturesV1LatestOpenInterestTickRequest
*/
func (a *FuturesApiService) FuturesV1LatestOpenInterestTick(ctx context.Context) ApiFuturesV1LatestOpenInterestTickRequest {
	return ApiFuturesV1LatestOpenInterestTickRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GENERICRESPONSE
func (a *FuturesApiService) FuturesV1LatestOpenInterestTickExecute(r ApiFuturesV1LatestOpenInterestTickRequest) (*GENERICRESPONSE, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GENERICRESPONSE
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FuturesApiService.FuturesV1LatestOpenInterestTick")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/futures/v1/latest/open-interest/tick"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.market == nil {
		return localVarReturnValue, nil, reportError("market is required and must be specified")
	}
	if strlen(*r.market) < 2 {
		return localVarReturnValue, nil, reportError("market must have at least 2 elements")
	}
	if strlen(*r.market) > 30 {
		return localVarReturnValue, nil, reportError("market must have less than 30 elements")
	}
	if r.instruments == nil {
		return localVarReturnValue, nil, reportError("instruments is required and must be specified")
	}
	if len(*r.instruments) < 1 {
		return localVarReturnValue, nil, reportError("instruments must have at least 1 elements")
	}
	if len(*r.instruments) > 25 {
		return localVarReturnValue, nil, reportError("instruments must have less than 25 elements")
	}

	parameterAddToQuery(localVarQueryParams, "market", r.market, "")
	parameterAddToQuery(localVarQueryParams, "instruments", r.instruments, "csv")
	if r.groups != nil {
		parameterAddToQuery(localVarQueryParams, "groups", r.groups, "csv")
	}
	if r.mappingPriority != nil {
		parameterAddToQuery(localVarQueryParams, "mapping_priority", r.mappingPriority, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 502 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFuturesV1LatestTickRequest struct {
	ctx context.Context
	ApiService *FuturesApiService
	market *string
	instruments *[]string
	groups *[]string
	mappingPriority *string
}

// The exchange to obtain data from
func (r ApiFuturesV1LatestTickRequest) Market(market string) ApiFuturesV1LatestTickRequest {
	r.market = &market
	return r
}

// A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.
func (r ApiFuturesV1LatestTickRequest) Instruments(instruments []string) ApiFuturesV1LatestTickRequest {
	r.instruments = &instruments
	return r
}

// When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,LAST_UPDATE,TOP_OF_BOOK,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME
func (r ApiFuturesV1LatestTickRequest) Groups(groups []string) ApiFuturesV1LatestTickRequest {
	r.groups = &groups
	return r
}

// The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
func (r ApiFuturesV1LatestTickRequest) MappingPriority(mappingPriority string) ApiFuturesV1LatestTickRequest {
	r.mappingPriority = &mappingPriority
	return r
}

func (r ApiFuturesV1LatestTickRequest) Execute() (*GENERICRESPONSE, *http.Response, error) {
	return r.ApiService.FuturesV1LatestTickExecute(r)
}

/*
FuturesV1LatestTick Method for FuturesV1LatestTick

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFuturesV1LatestTickRequest
*/
func (a *FuturesApiService) FuturesV1LatestTick(ctx context.Context) ApiFuturesV1LatestTickRequest {
	return ApiFuturesV1LatestTickRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GENERICRESPONSE
func (a *FuturesApiService) FuturesV1LatestTickExecute(r ApiFuturesV1LatestTickRequest) (*GENERICRESPONSE, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GENERICRESPONSE
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FuturesApiService.FuturesV1LatestTick")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/futures/v1/latest/tick"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.market == nil {
		return localVarReturnValue, nil, reportError("market is required and must be specified")
	}
	if strlen(*r.market) < 2 {
		return localVarReturnValue, nil, reportError("market must have at least 2 elements")
	}
	if strlen(*r.market) > 30 {
		return localVarReturnValue, nil, reportError("market must have less than 30 elements")
	}
	if r.instruments == nil {
		return localVarReturnValue, nil, reportError("instruments is required and must be specified")
	}
	if len(*r.instruments) < 1 {
		return localVarReturnValue, nil, reportError("instruments must have at least 1 elements")
	}
	if len(*r.instruments) > 25 {
		return localVarReturnValue, nil, reportError("instruments must have less than 25 elements")
	}

	parameterAddToQuery(localVarQueryParams, "market", r.market, "")
	parameterAddToQuery(localVarQueryParams, "instruments", r.instruments, "csv")
	if r.groups != nil {
		parameterAddToQuery(localVarQueryParams, "groups", r.groups, "csv")
	}
	if r.mappingPriority != nil {
		parameterAddToQuery(localVarQueryParams, "mapping_priority", r.mappingPriority, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 502 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFuturesV1MarketsRequest struct {
	ctx context.Context
	ApiService *FuturesApiService
	market *string
}

// The exchange to obtain data from
func (r ApiFuturesV1MarketsRequest) Market(market string) ApiFuturesV1MarketsRequest {
	r.market = &market
	return r
}

func (r ApiFuturesV1MarketsRequest) Execute() (*GENERICRESPONSE, *http.Response, error) {
	return r.ApiService.FuturesV1MarketsExecute(r)
}

/*
FuturesV1Markets Method for FuturesV1Markets

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFuturesV1MarketsRequest
*/
func (a *FuturesApiService) FuturesV1Markets(ctx context.Context) ApiFuturesV1MarketsRequest {
	return ApiFuturesV1MarketsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GENERICRESPONSE
func (a *FuturesApiService) FuturesV1MarketsExecute(r ApiFuturesV1MarketsRequest) (*GENERICRESPONSE, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GENERICRESPONSE
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FuturesApiService.FuturesV1Markets")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/futures/v1/markets"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.market != nil {
		parameterAddToQuery(localVarQueryParams, "market", r.market, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 502 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFuturesV1MarketsInstrumentsRequest struct {
	ctx context.Context
	ApiService *FuturesApiService
	market *string
	instrument *string
	instrumentStatus *[]string
}

// The exchange to obtain data from
func (r ApiFuturesV1MarketsInstrumentsRequest) Market(market string) ApiFuturesV1MarketsInstrumentsRequest {
	r.market = &market
	return r
}

// The mapped instrument to retrieve on a specific market.
func (r ApiFuturesV1MarketsInstrumentsRequest) Instrument(instrument string) ApiFuturesV1MarketsInstrumentsRequest {
	r.instrument = &instrument
	return r
}

// The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED
func (r ApiFuturesV1MarketsInstrumentsRequest) InstrumentStatus(instrumentStatus []string) ApiFuturesV1MarketsInstrumentsRequest {
	r.instrumentStatus = &instrumentStatus
	return r
}

func (r ApiFuturesV1MarketsInstrumentsRequest) Execute() (*GENERICRESPONSE, *http.Response, error) {
	return r.ApiService.FuturesV1MarketsInstrumentsExecute(r)
}

/*
FuturesV1MarketsInstruments Method for FuturesV1MarketsInstruments

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFuturesV1MarketsInstrumentsRequest
*/
func (a *FuturesApiService) FuturesV1MarketsInstruments(ctx context.Context) ApiFuturesV1MarketsInstrumentsRequest {
	return ApiFuturesV1MarketsInstrumentsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GENERICRESPONSE
func (a *FuturesApiService) FuturesV1MarketsInstrumentsExecute(r ApiFuturesV1MarketsInstrumentsRequest) (*GENERICRESPONSE, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GENERICRESPONSE
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FuturesApiService.FuturesV1MarketsInstruments")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/futures/v1/markets/instruments"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.market != nil {
		parameterAddToQuery(localVarQueryParams, "market", r.market, "")
	}
	if r.instrument != nil {
		parameterAddToQuery(localVarQueryParams, "instrument", r.instrument, "")
	}
	if r.instrumentStatus != nil {
		parameterAddToQuery(localVarQueryParams, "instrument_status", r.instrumentStatus, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 502 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFuturesV1MarketsInstrumentsUnmappedRequest struct {
	ctx context.Context
	ApiService *FuturesApiService
	market *string
	instrument *string
	instrumentStatus *[]string
}

// The exchange to obtain data from
func (r ApiFuturesV1MarketsInstrumentsUnmappedRequest) Market(market string) ApiFuturesV1MarketsInstrumentsUnmappedRequest {
	r.market = &market
	return r
}

// The unmapped instrument to retrieve on a specific market.
func (r ApiFuturesV1MarketsInstrumentsUnmappedRequest) Instrument(instrument string) ApiFuturesV1MarketsInstrumentsUnmappedRequest {
	r.instrument = &instrument
	return r
}

// The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED
func (r ApiFuturesV1MarketsInstrumentsUnmappedRequest) InstrumentStatus(instrumentStatus []string) ApiFuturesV1MarketsInstrumentsUnmappedRequest {
	r.instrumentStatus = &instrumentStatus
	return r
}

func (r ApiFuturesV1MarketsInstrumentsUnmappedRequest) Execute() (*GENERICRESPONSE, *http.Response, error) {
	return r.ApiService.FuturesV1MarketsInstrumentsUnmappedExecute(r)
}

/*
FuturesV1MarketsInstrumentsUnmapped Method for FuturesV1MarketsInstrumentsUnmapped

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFuturesV1MarketsInstrumentsUnmappedRequest
*/
func (a *FuturesApiService) FuturesV1MarketsInstrumentsUnmapped(ctx context.Context) ApiFuturesV1MarketsInstrumentsUnmappedRequest {
	return ApiFuturesV1MarketsInstrumentsUnmappedRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GENERICRESPONSE
func (a *FuturesApiService) FuturesV1MarketsInstrumentsUnmappedExecute(r ApiFuturesV1MarketsInstrumentsUnmappedRequest) (*GENERICRESPONSE, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GENERICRESPONSE
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FuturesApiService.FuturesV1MarketsInstrumentsUnmapped")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/futures/v1/markets/instruments/unmapped"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.market != nil {
		parameterAddToQuery(localVarQueryParams, "market", r.market, "")
	}
	if r.instrument != nil {
		parameterAddToQuery(localVarQueryParams, "instrument", r.instrument, "")
	}
	if r.instrumentStatus != nil {
		parameterAddToQuery(localVarQueryParams, "instrument_status", r.instrumentStatus, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 502 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIndexV1HistoricalDaysRequest struct {
	ctx context.Context
	ApiService *FuturesApiService
	market *string
	instrument *string
	groups *[]string
	limit *int32
	toTs *int32
	aggregate *int32
	fill *bool
	mappingPriority *string
	responseFormat *string
}

// The exchange to obtain data from
func (r ApiIndexV1HistoricalDaysRequest) Market(market string) ApiIndexV1HistoricalDaysRequest {
	r.market = &market
	return r
}

// The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
func (r ApiIndexV1HistoricalDaysRequest) Instrument(instrument string) ApiIndexV1HistoricalDaysRequest {
	r.instrument = &instrument
	return r
}

// When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME
func (r ApiIndexV1HistoricalDaysRequest) Groups(groups []string) ApiIndexV1HistoricalDaysRequest {
	r.groups = &groups
	return r
}

// The number of data points to return
func (r ApiIndexV1HistoricalDaysRequest) Limit(limit int32) ApiIndexV1HistoricalDaysRequest {
	r.limit = &limit
	return r
}

// Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
func (r ApiIndexV1HistoricalDaysRequest) ToTs(toTs int32) ApiIndexV1HistoricalDaysRequest {
	r.toTs = &toTs
	return r
}

// The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
func (r ApiIndexV1HistoricalDaysRequest) Aggregate(aggregate int32) ApiIndexV1HistoricalDaysRequest {
	r.aggregate = &aggregate
	return r
}

// Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
func (r ApiIndexV1HistoricalDaysRequest) Fill(fill bool) ApiIndexV1HistoricalDaysRequest {
	r.fill = &fill
	return r
}

// The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
func (r ApiIndexV1HistoricalDaysRequest) MappingPriority(mappingPriority string) ApiIndexV1HistoricalDaysRequest {
	r.mappingPriority = &mappingPriority
	return r
}

// The format of the data response in uppercase. It can be one of the following: JSON,CSV
func (r ApiIndexV1HistoricalDaysRequest) ResponseFormat(responseFormat string) ApiIndexV1HistoricalDaysRequest {
	r.responseFormat = &responseFormat
	return r
}

func (r ApiIndexV1HistoricalDaysRequest) Execute() (*GENERICRESPONSE, *http.Response, error) {
	return r.ApiService.IndexV1HistoricalDaysExecute(r)
}

/*
IndexV1HistoricalDays Method for IndexV1HistoricalDays

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiIndexV1HistoricalDaysRequest
*/
func (a *FuturesApiService) IndexV1HistoricalDays(ctx context.Context) ApiIndexV1HistoricalDaysRequest {
	return ApiIndexV1HistoricalDaysRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GENERICRESPONSE
func (a *FuturesApiService) IndexV1HistoricalDaysExecute(r ApiIndexV1HistoricalDaysRequest) (*GENERICRESPONSE, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GENERICRESPONSE
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FuturesApiService.IndexV1HistoricalDays")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/index/v1/historical/days"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.market == nil {
		return localVarReturnValue, nil, reportError("market is required and must be specified")
	}
	if strlen(*r.market) < 2 {
		return localVarReturnValue, nil, reportError("market must have at least 2 elements")
	}
	if strlen(*r.market) > 30 {
		return localVarReturnValue, nil, reportError("market must have less than 30 elements")
	}
	if r.instrument == nil {
		return localVarReturnValue, nil, reportError("instrument is required and must be specified")
	}
	if strlen(*r.instrument) < 1 {
		return localVarReturnValue, nil, reportError("instrument must have at least 1 elements")
	}
	if strlen(*r.instrument) > 500 {
		return localVarReturnValue, nil, reportError("instrument must have less than 500 elements")
	}

	parameterAddToQuery(localVarQueryParams, "market", r.market, "")
	parameterAddToQuery(localVarQueryParams, "instrument", r.instrument, "")
	if r.groups != nil {
		parameterAddToQuery(localVarQueryParams, "groups", r.groups, "csv")
	}
	if r.limit != nil {
		parameterAddToQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.toTs != nil {
		parameterAddToQuery(localVarQueryParams, "to_ts", r.toTs, "")
	}
	if r.aggregate != nil {
		parameterAddToQuery(localVarQueryParams, "aggregate", r.aggregate, "")
	}
	if r.fill != nil {
		parameterAddToQuery(localVarQueryParams, "fill", r.fill, "")
	}
	if r.mappingPriority != nil {
		parameterAddToQuery(localVarQueryParams, "mapping_priority", r.mappingPriority, "")
	}
	if r.responseFormat != nil {
		parameterAddToQuery(localVarQueryParams, "response_format", r.responseFormat, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 502 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIndexV1HistoricalHoursRequest struct {
	ctx context.Context
	ApiService *FuturesApiService
	market *string
	instrument *string
	groups *[]string
	limit *int32
	toTs *int32
	aggregate *int32
	fill *bool
	mappingPriority *string
	responseFormat *string
}

// The exchange to obtain data from
func (r ApiIndexV1HistoricalHoursRequest) Market(market string) ApiIndexV1HistoricalHoursRequest {
	r.market = &market
	return r
}

// The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
func (r ApiIndexV1HistoricalHoursRequest) Instrument(instrument string) ApiIndexV1HistoricalHoursRequest {
	r.instrument = &instrument
	return r
}

// When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME
func (r ApiIndexV1HistoricalHoursRequest) Groups(groups []string) ApiIndexV1HistoricalHoursRequest {
	r.groups = &groups
	return r
}

// The number of data points to return
func (r ApiIndexV1HistoricalHoursRequest) Limit(limit int32) ApiIndexV1HistoricalHoursRequest {
	r.limit = &limit
	return r
}

// Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
func (r ApiIndexV1HistoricalHoursRequest) ToTs(toTs int32) ApiIndexV1HistoricalHoursRequest {
	r.toTs = &toTs
	return r
}

// The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
func (r ApiIndexV1HistoricalHoursRequest) Aggregate(aggregate int32) ApiIndexV1HistoricalHoursRequest {
	r.aggregate = &aggregate
	return r
}

// Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
func (r ApiIndexV1HistoricalHoursRequest) Fill(fill bool) ApiIndexV1HistoricalHoursRequest {
	r.fill = &fill
	return r
}

// The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
func (r ApiIndexV1HistoricalHoursRequest) MappingPriority(mappingPriority string) ApiIndexV1HistoricalHoursRequest {
	r.mappingPriority = &mappingPriority
	return r
}

// The format of the data response in uppercase. It can be one of the following: JSON,CSV
func (r ApiIndexV1HistoricalHoursRequest) ResponseFormat(responseFormat string) ApiIndexV1HistoricalHoursRequest {
	r.responseFormat = &responseFormat
	return r
}

func (r ApiIndexV1HistoricalHoursRequest) Execute() (*GENERICRESPONSE, *http.Response, error) {
	return r.ApiService.IndexV1HistoricalHoursExecute(r)
}

/*
IndexV1HistoricalHours Method for IndexV1HistoricalHours

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiIndexV1HistoricalHoursRequest
*/
func (a *FuturesApiService) IndexV1HistoricalHours(ctx context.Context) ApiIndexV1HistoricalHoursRequest {
	return ApiIndexV1HistoricalHoursRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GENERICRESPONSE
func (a *FuturesApiService) IndexV1HistoricalHoursExecute(r ApiIndexV1HistoricalHoursRequest) (*GENERICRESPONSE, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GENERICRESPONSE
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FuturesApiService.IndexV1HistoricalHours")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/index/v1/historical/hours"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.market == nil {
		return localVarReturnValue, nil, reportError("market is required and must be specified")
	}
	if strlen(*r.market) < 2 {
		return localVarReturnValue, nil, reportError("market must have at least 2 elements")
	}
	if strlen(*r.market) > 30 {
		return localVarReturnValue, nil, reportError("market must have less than 30 elements")
	}
	if r.instrument == nil {
		return localVarReturnValue, nil, reportError("instrument is required and must be specified")
	}
	if strlen(*r.instrument) < 1 {
		return localVarReturnValue, nil, reportError("instrument must have at least 1 elements")
	}
	if strlen(*r.instrument) > 500 {
		return localVarReturnValue, nil, reportError("instrument must have less than 500 elements")
	}

	parameterAddToQuery(localVarQueryParams, "market", r.market, "")
	parameterAddToQuery(localVarQueryParams, "instrument", r.instrument, "")
	if r.groups != nil {
		parameterAddToQuery(localVarQueryParams, "groups", r.groups, "csv")
	}
	if r.limit != nil {
		parameterAddToQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.toTs != nil {
		parameterAddToQuery(localVarQueryParams, "to_ts", r.toTs, "")
	}
	if r.aggregate != nil {
		parameterAddToQuery(localVarQueryParams, "aggregate", r.aggregate, "")
	}
	if r.fill != nil {
		parameterAddToQuery(localVarQueryParams, "fill", r.fill, "")
	}
	if r.mappingPriority != nil {
		parameterAddToQuery(localVarQueryParams, "mapping_priority", r.mappingPriority, "")
	}
	if r.responseFormat != nil {
		parameterAddToQuery(localVarQueryParams, "response_format", r.responseFormat, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 502 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIndexV1HistoricalMessagesRequest struct {
	ctx context.Context
	ApiService *FuturesApiService
	market *string
	instrument *string
	afterTs *int32
	lastCcseq *int32
	limit *int32
	mappingPriority *string
	responseFormat *string
	return404OnEmptyResponse *bool
}

// The exchange to obtain data from
func (r ApiIndexV1HistoricalMessagesRequest) Market(market string) ApiIndexV1HistoricalMessagesRequest {
	r.market = &market
	return r
}

// The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
func (r ApiIndexV1HistoricalMessagesRequest) Instrument(instrument string) ApiIndexV1HistoricalMessagesRequest {
	r.instrument = &instrument
	return r
}

// Unix timestamp in seconds of the earliest index message in the response
func (r ApiIndexV1HistoricalMessagesRequest) AfterTs(afterTs int32) ApiIndexV1HistoricalMessagesRequest {
	r.afterTs = &afterTs
	return r
}

// The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request.
func (r ApiIndexV1HistoricalMessagesRequest) LastCcseq(lastCcseq int32) ApiIndexV1HistoricalMessagesRequest {
	r.lastCcseq = &lastCcseq
	return r
}

// The maximum number of index messages to return
func (r ApiIndexV1HistoricalMessagesRequest) Limit(limit int32) ApiIndexV1HistoricalMessagesRequest {
	r.limit = &limit
	return r
}

// The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
func (r ApiIndexV1HistoricalMessagesRequest) MappingPriority(mappingPriority string) ApiIndexV1HistoricalMessagesRequest {
	r.mappingPriority = &mappingPriority
	return r
}

// The format of the data response in uppercase. It can be one of the following: JSON,CSV
func (r ApiIndexV1HistoricalMessagesRequest) ResponseFormat(responseFormat string) ApiIndexV1HistoricalMessagesRequest {
	r.responseFormat = &responseFormat
	return r
}

// If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.
func (r ApiIndexV1HistoricalMessagesRequest) Return404OnEmptyResponse(return404OnEmptyResponse bool) ApiIndexV1HistoricalMessagesRequest {
	r.return404OnEmptyResponse = &return404OnEmptyResponse
	return r
}

func (r ApiIndexV1HistoricalMessagesRequest) Execute() (*GENERICRESPONSE, *http.Response, error) {
	return r.ApiService.IndexV1HistoricalMessagesExecute(r)
}

/*
IndexV1HistoricalMessages Method for IndexV1HistoricalMessages

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiIndexV1HistoricalMessagesRequest
*/
func (a *FuturesApiService) IndexV1HistoricalMessages(ctx context.Context) ApiIndexV1HistoricalMessagesRequest {
	return ApiIndexV1HistoricalMessagesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GENERICRESPONSE
func (a *FuturesApiService) IndexV1HistoricalMessagesExecute(r ApiIndexV1HistoricalMessagesRequest) (*GENERICRESPONSE, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GENERICRESPONSE
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FuturesApiService.IndexV1HistoricalMessages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/index/v1/historical/messages"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.market == nil {
		return localVarReturnValue, nil, reportError("market is required and must be specified")
	}
	if strlen(*r.market) < 2 {
		return localVarReturnValue, nil, reportError("market must have at least 2 elements")
	}
	if strlen(*r.market) > 30 {
		return localVarReturnValue, nil, reportError("market must have less than 30 elements")
	}
	if r.instrument == nil {
		return localVarReturnValue, nil, reportError("instrument is required and must be specified")
	}
	if strlen(*r.instrument) < 1 {
		return localVarReturnValue, nil, reportError("instrument must have at least 1 elements")
	}
	if strlen(*r.instrument) > 500 {
		return localVarReturnValue, nil, reportError("instrument must have less than 500 elements")
	}

	parameterAddToQuery(localVarQueryParams, "market", r.market, "")
	parameterAddToQuery(localVarQueryParams, "instrument", r.instrument, "")
	if r.afterTs != nil {
		parameterAddToQuery(localVarQueryParams, "after_ts", r.afterTs, "")
	}
	if r.lastCcseq != nil {
		parameterAddToQuery(localVarQueryParams, "last_ccseq", r.lastCcseq, "")
	}
	if r.limit != nil {
		parameterAddToQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.mappingPriority != nil {
		parameterAddToQuery(localVarQueryParams, "mapping_priority", r.mappingPriority, "")
	}
	if r.responseFormat != nil {
		parameterAddToQuery(localVarQueryParams, "response_format", r.responseFormat, "")
	}
	if r.return404OnEmptyResponse != nil {
		parameterAddToQuery(localVarQueryParams, "return_404_on_empty_response", r.return404OnEmptyResponse, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key_header"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key_query"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 502 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIndexV1HistoricalMessagesHourRequest struct {
	ctx context.Context
	ApiService *FuturesApiService
	market *string
	instrument *string
	hourTs *int32
	mappingPriority *string
	responseFormat *string
	return404OnEmptyResponse *bool
}

// The exchange to obtain data from
func (r ApiIndexV1HistoricalMessagesHourRequest) Market(market string) ApiIndexV1HistoricalMessagesHourRequest {
	r.market = &market
	return r
}

// The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
func (r ApiIndexV1HistoricalMessagesHourRequest) Instrument(instrument string) ApiIndexV1HistoricalMessagesHourRequest {
	r.instrument = &instrument
	return r
}

// Unix timestamp in seconds for the hour containing the index updates you are interested in. You can pass any timestamp in the hour but we will round it down the the full hour timestmap and return all index updates in that hour.
func (r ApiIndexV1HistoricalMessagesHourRequest) HourTs(hourTs int32) ApiIndexV1HistoricalMessagesHourRequest {
	r.hourTs = &hourTs
	return r
}

// The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
func (r ApiIndexV1HistoricalMessagesHourRequest) MappingPriority(mappingPriority string) ApiIndexV1HistoricalMessagesHourRequest {
	r.mappingPriority = &mappingPriority
	return r
}

// The format of the data response in uppercase. It can be one of the following: JSON,CSV
func (r ApiIndexV1HistoricalMessagesHourRequest) ResponseFormat(responseFormat string) ApiIndexV1HistoricalMessagesHourRequest {
	r.responseFormat = &responseFormat
	return r
}

// If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.
func (r ApiIndexV1HistoricalMessagesHourRequest) Return404OnEmptyResponse(return404OnEmptyResponse bool) ApiIndexV1HistoricalMessagesHourRequest {
	r.return404OnEmptyResponse = &return404OnEmptyResponse
	return r
}

func (r ApiIndexV1HistoricalMessagesHourRequest) Execute() (*GENERICRESPONSE, *http.Response, error) {
	return r.ApiService.IndexV1HistoricalMessagesHourExecute(r)
}

/*
IndexV1HistoricalMessagesHour Method for IndexV1HistoricalMessagesHour

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiIndexV1HistoricalMessagesHourRequest
*/
func (a *FuturesApiService) IndexV1HistoricalMessagesHour(ctx context.Context) ApiIndexV1HistoricalMessagesHourRequest {
	return ApiIndexV1HistoricalMessagesHourRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GENERICRESPONSE
func (a *FuturesApiService) IndexV1HistoricalMessagesHourExecute(r ApiIndexV1HistoricalMessagesHourRequest) (*GENERICRESPONSE, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GENERICRESPONSE
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FuturesApiService.IndexV1HistoricalMessagesHour")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/index/v1/historical/messages/hour"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.market == nil {
		return localVarReturnValue, nil, reportError("market is required and must be specified")
	}
	if strlen(*r.market) < 2 {
		return localVarReturnValue, nil, reportError("market must have at least 2 elements")
	}
	if strlen(*r.market) > 30 {
		return localVarReturnValue, nil, reportError("market must have less than 30 elements")
	}
	if r.instrument == nil {
		return localVarReturnValue, nil, reportError("instrument is required and must be specified")
	}
	if strlen(*r.instrument) < 1 {
		return localVarReturnValue, nil, reportError("instrument must have at least 1 elements")
	}
	if strlen(*r.instrument) > 500 {
		return localVarReturnValue, nil, reportError("instrument must have less than 500 elements")
	}

	parameterAddToQuery(localVarQueryParams, "market", r.market, "")
	parameterAddToQuery(localVarQueryParams, "instrument", r.instrument, "")
	if r.hourTs != nil {
		parameterAddToQuery(localVarQueryParams, "hour_ts", r.hourTs, "")
	}
	if r.mappingPriority != nil {
		parameterAddToQuery(localVarQueryParams, "mapping_priority", r.mappingPriority, "")
	}
	if r.responseFormat != nil {
		parameterAddToQuery(localVarQueryParams, "response_format", r.responseFormat, "")
	}
	if r.return404OnEmptyResponse != nil {
		parameterAddToQuery(localVarQueryParams, "return_404_on_empty_response", r.return404OnEmptyResponse, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key_header"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key_query"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 502 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIndexV1HistoricalMinutesRequest struct {
	ctx context.Context
	ApiService *FuturesApiService
	market *string
	instrument *string
	groups *[]string
	limit *int32
	toTs *int32
	aggregate *int32
	fill *bool
	mappingPriority *string
	responseFormat *string
}

// The exchange to obtain data from
func (r ApiIndexV1HistoricalMinutesRequest) Market(market string) ApiIndexV1HistoricalMinutesRequest {
	r.market = &market
	return r
}

// The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
func (r ApiIndexV1HistoricalMinutesRequest) Instrument(instrument string) ApiIndexV1HistoricalMinutesRequest {
	r.instrument = &instrument
	return r
}

// When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME
func (r ApiIndexV1HistoricalMinutesRequest) Groups(groups []string) ApiIndexV1HistoricalMinutesRequest {
	r.groups = &groups
	return r
}

// The number of data points to return
func (r ApiIndexV1HistoricalMinutesRequest) Limit(limit int32) ApiIndexV1HistoricalMinutesRequest {
	r.limit = &limit
	return r
}

// Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
func (r ApiIndexV1HistoricalMinutesRequest) ToTs(toTs int32) ApiIndexV1HistoricalMinutesRequest {
	r.toTs = &toTs
	return r
}

// The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
func (r ApiIndexV1HistoricalMinutesRequest) Aggregate(aggregate int32) ApiIndexV1HistoricalMinutesRequest {
	r.aggregate = &aggregate
	return r
}

// Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
func (r ApiIndexV1HistoricalMinutesRequest) Fill(fill bool) ApiIndexV1HistoricalMinutesRequest {
	r.fill = &fill
	return r
}

// The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
func (r ApiIndexV1HistoricalMinutesRequest) MappingPriority(mappingPriority string) ApiIndexV1HistoricalMinutesRequest {
	r.mappingPriority = &mappingPriority
	return r
}

// The format of the data response in uppercase. It can be one of the following: JSON,CSV
func (r ApiIndexV1HistoricalMinutesRequest) ResponseFormat(responseFormat string) ApiIndexV1HistoricalMinutesRequest {
	r.responseFormat = &responseFormat
	return r
}

func (r ApiIndexV1HistoricalMinutesRequest) Execute() (*GENERICRESPONSE, *http.Response, error) {
	return r.ApiService.IndexV1HistoricalMinutesExecute(r)
}

/*
IndexV1HistoricalMinutes Method for IndexV1HistoricalMinutes

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiIndexV1HistoricalMinutesRequest
*/
func (a *FuturesApiService) IndexV1HistoricalMinutes(ctx context.Context) ApiIndexV1HistoricalMinutesRequest {
	return ApiIndexV1HistoricalMinutesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GENERICRESPONSE
func (a *FuturesApiService) IndexV1HistoricalMinutesExecute(r ApiIndexV1HistoricalMinutesRequest) (*GENERICRESPONSE, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GENERICRESPONSE
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FuturesApiService.IndexV1HistoricalMinutes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/index/v1/historical/minutes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.market == nil {
		return localVarReturnValue, nil, reportError("market is required and must be specified")
	}
	if strlen(*r.market) < 2 {
		return localVarReturnValue, nil, reportError("market must have at least 2 elements")
	}
	if strlen(*r.market) > 30 {
		return localVarReturnValue, nil, reportError("market must have less than 30 elements")
	}
	if r.instrument == nil {
		return localVarReturnValue, nil, reportError("instrument is required and must be specified")
	}
	if strlen(*r.instrument) < 1 {
		return localVarReturnValue, nil, reportError("instrument must have at least 1 elements")
	}
	if strlen(*r.instrument) > 500 {
		return localVarReturnValue, nil, reportError("instrument must have less than 500 elements")
	}

	parameterAddToQuery(localVarQueryParams, "market", r.market, "")
	parameterAddToQuery(localVarQueryParams, "instrument", r.instrument, "")
	if r.groups != nil {
		parameterAddToQuery(localVarQueryParams, "groups", r.groups, "csv")
	}
	if r.limit != nil {
		parameterAddToQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.toTs != nil {
		parameterAddToQuery(localVarQueryParams, "to_ts", r.toTs, "")
	}
	if r.aggregate != nil {
		parameterAddToQuery(localVarQueryParams, "aggregate", r.aggregate, "")
	}
	if r.fill != nil {
		parameterAddToQuery(localVarQueryParams, "fill", r.fill, "")
	}
	if r.mappingPriority != nil {
		parameterAddToQuery(localVarQueryParams, "mapping_priority", r.mappingPriority, "")
	}
	if r.responseFormat != nil {
		parameterAddToQuery(localVarQueryParams, "response_format", r.responseFormat, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 502 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIndexV1LatestInstrumentMetadataRequest struct {
	ctx context.Context
	ApiService *FuturesApiService
	market *string
	instruments *[]string
	groups *[]string
	mappingPriority *string
}

// The exchange to obtain data from
func (r ApiIndexV1LatestInstrumentMetadataRequest) Market(market string) ApiIndexV1LatestInstrumentMetadataRequest {
	r.market = &market
	return r
}

// A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.
func (r ApiIndexV1LatestInstrumentMetadataRequest) Instruments(instruments []string) ApiIndexV1LatestInstrumentMetadataRequest {
	r.instruments = &instruments
	return r
}

// When requesting metadata entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: STATUS,INTERNAL,GENERAL,MIGRATION,SOURCE
func (r ApiIndexV1LatestInstrumentMetadataRequest) Groups(groups []string) ApiIndexV1LatestInstrumentMetadataRequest {
	r.groups = &groups
	return r
}

// The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
func (r ApiIndexV1LatestInstrumentMetadataRequest) MappingPriority(mappingPriority string) ApiIndexV1LatestInstrumentMetadataRequest {
	r.mappingPriority = &mappingPriority
	return r
}

func (r ApiIndexV1LatestInstrumentMetadataRequest) Execute() (*GENERICRESPONSE, *http.Response, error) {
	return r.ApiService.IndexV1LatestInstrumentMetadataExecute(r)
}

/*
IndexV1LatestInstrumentMetadata Method for IndexV1LatestInstrumentMetadata

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiIndexV1LatestInstrumentMetadataRequest
*/
func (a *FuturesApiService) IndexV1LatestInstrumentMetadata(ctx context.Context) ApiIndexV1LatestInstrumentMetadataRequest {
	return ApiIndexV1LatestInstrumentMetadataRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GENERICRESPONSE
func (a *FuturesApiService) IndexV1LatestInstrumentMetadataExecute(r ApiIndexV1LatestInstrumentMetadataRequest) (*GENERICRESPONSE, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GENERICRESPONSE
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FuturesApiService.IndexV1LatestInstrumentMetadata")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/index/v1/latest/instrument/metadata"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.market == nil {
		return localVarReturnValue, nil, reportError("market is required and must be specified")
	}
	if strlen(*r.market) < 2 {
		return localVarReturnValue, nil, reportError("market must have at least 2 elements")
	}
	if strlen(*r.market) > 30 {
		return localVarReturnValue, nil, reportError("market must have less than 30 elements")
	}
	if r.instruments == nil {
		return localVarReturnValue, nil, reportError("instruments is required and must be specified")
	}
	if len(*r.instruments) < 1 {
		return localVarReturnValue, nil, reportError("instruments must have at least 1 elements")
	}
	if len(*r.instruments) > 25 {
		return localVarReturnValue, nil, reportError("instruments must have less than 25 elements")
	}

	parameterAddToQuery(localVarQueryParams, "market", r.market, "")
	parameterAddToQuery(localVarQueryParams, "instruments", r.instruments, "csv")
	if r.groups != nil {
		parameterAddToQuery(localVarQueryParams, "groups", r.groups, "csv")
	}
	if r.mappingPriority != nil {
		parameterAddToQuery(localVarQueryParams, "mapping_priority", r.mappingPriority, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 502 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIndexV1LatestTickRequest struct {
	ctx context.Context
	ApiService *FuturesApiService
	market *string
	instruments *[]string
	groups *[]string
	mappingPriority *string
}

// The exchange to obtain data from
func (r ApiIndexV1LatestTickRequest) Market(market string) ApiIndexV1LatestTickRequest {
	r.market = &market
	return r
}

// A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.
func (r ApiIndexV1LatestTickRequest) Instruments(instruments []string) ApiIndexV1LatestTickRequest {
	r.instruments = &instruments
	return r
}

// When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME
func (r ApiIndexV1LatestTickRequest) Groups(groups []string) ApiIndexV1LatestTickRequest {
	r.groups = &groups
	return r
}

// The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
func (r ApiIndexV1LatestTickRequest) MappingPriority(mappingPriority string) ApiIndexV1LatestTickRequest {
	r.mappingPriority = &mappingPriority
	return r
}

func (r ApiIndexV1LatestTickRequest) Execute() (*GENERICRESPONSE, *http.Response, error) {
	return r.ApiService.IndexV1LatestTickExecute(r)
}

/*
IndexV1LatestTick Method for IndexV1LatestTick

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiIndexV1LatestTickRequest
*/
func (a *FuturesApiService) IndexV1LatestTick(ctx context.Context) ApiIndexV1LatestTickRequest {
	return ApiIndexV1LatestTickRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GENERICRESPONSE
func (a *FuturesApiService) IndexV1LatestTickExecute(r ApiIndexV1LatestTickRequest) (*GENERICRESPONSE, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GENERICRESPONSE
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FuturesApiService.IndexV1LatestTick")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/index/v1/latest/tick"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.market == nil {
		return localVarReturnValue, nil, reportError("market is required and must be specified")
	}
	if strlen(*r.market) < 2 {
		return localVarReturnValue, nil, reportError("market must have at least 2 elements")
	}
	if strlen(*r.market) > 30 {
		return localVarReturnValue, nil, reportError("market must have less than 30 elements")
	}
	if r.instruments == nil {
		return localVarReturnValue, nil, reportError("instruments is required and must be specified")
	}
	if len(*r.instruments) < 1 {
		return localVarReturnValue, nil, reportError("instruments must have at least 1 elements")
	}
	if len(*r.instruments) > 25 {
		return localVarReturnValue, nil, reportError("instruments must have less than 25 elements")
	}

	parameterAddToQuery(localVarQueryParams, "market", r.market, "")
	parameterAddToQuery(localVarQueryParams, "instruments", r.instruments, "csv")
	if r.groups != nil {
		parameterAddToQuery(localVarQueryParams, "groups", r.groups, "csv")
	}
	if r.mappingPriority != nil {
		parameterAddToQuery(localVarQueryParams, "mapping_priority", r.mappingPriority, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 502 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIndexV1MarketsRequest struct {
	ctx context.Context
	ApiService *FuturesApiService
	market *string
}

// The exchange to obtain data from
func (r ApiIndexV1MarketsRequest) Market(market string) ApiIndexV1MarketsRequest {
	r.market = &market
	return r
}

func (r ApiIndexV1MarketsRequest) Execute() (*GENERICRESPONSE, *http.Response, error) {
	return r.ApiService.IndexV1MarketsExecute(r)
}

/*
IndexV1Markets Method for IndexV1Markets

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiIndexV1MarketsRequest
*/
func (a *FuturesApiService) IndexV1Markets(ctx context.Context) ApiIndexV1MarketsRequest {
	return ApiIndexV1MarketsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GENERICRESPONSE
func (a *FuturesApiService) IndexV1MarketsExecute(r ApiIndexV1MarketsRequest) (*GENERICRESPONSE, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GENERICRESPONSE
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FuturesApiService.IndexV1Markets")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/index/v1/markets"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.market != nil {
		parameterAddToQuery(localVarQueryParams, "market", r.market, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 502 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIndexV1MarketsInstrumentsRequest struct {
	ctx context.Context
	ApiService *FuturesApiService
	market *string
	instrument *string
	instrumentStatus *[]string
}

// The exchange to obtain data from
func (r ApiIndexV1MarketsInstrumentsRequest) Market(market string) ApiIndexV1MarketsInstrumentsRequest {
	r.market = &market
	return r
}

// The mapped instrument to retrieve on a specific market.
func (r ApiIndexV1MarketsInstrumentsRequest) Instrument(instrument string) ApiIndexV1MarketsInstrumentsRequest {
	r.instrument = &instrument
	return r
}

// The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED
func (r ApiIndexV1MarketsInstrumentsRequest) InstrumentStatus(instrumentStatus []string) ApiIndexV1MarketsInstrumentsRequest {
	r.instrumentStatus = &instrumentStatus
	return r
}

func (r ApiIndexV1MarketsInstrumentsRequest) Execute() (*GENERICRESPONSE, *http.Response, error) {
	return r.ApiService.IndexV1MarketsInstrumentsExecute(r)
}

/*
IndexV1MarketsInstruments Method for IndexV1MarketsInstruments

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiIndexV1MarketsInstrumentsRequest
*/
func (a *FuturesApiService) IndexV1MarketsInstruments(ctx context.Context) ApiIndexV1MarketsInstrumentsRequest {
	return ApiIndexV1MarketsInstrumentsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GENERICRESPONSE
func (a *FuturesApiService) IndexV1MarketsInstrumentsExecute(r ApiIndexV1MarketsInstrumentsRequest) (*GENERICRESPONSE, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GENERICRESPONSE
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FuturesApiService.IndexV1MarketsInstruments")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/index/v1/markets/instruments"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.market != nil {
		parameterAddToQuery(localVarQueryParams, "market", r.market, "")
	}
	if r.instrument != nil {
		parameterAddToQuery(localVarQueryParams, "instrument", r.instrument, "")
	}
	if r.instrumentStatus != nil {
		parameterAddToQuery(localVarQueryParams, "instrument_status", r.instrumentStatus, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 502 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIndexV1MarketsInstrumentsUnmappedRequest struct {
	ctx context.Context
	ApiService *FuturesApiService
	market *string
	instrument *string
	instrumentStatus *[]string
}

// The exchange to obtain data from
func (r ApiIndexV1MarketsInstrumentsUnmappedRequest) Market(market string) ApiIndexV1MarketsInstrumentsUnmappedRequest {
	r.market = &market
	return r
}

// The unmapped instrument to retrieve on a specific market.
func (r ApiIndexV1MarketsInstrumentsUnmappedRequest) Instrument(instrument string) ApiIndexV1MarketsInstrumentsUnmappedRequest {
	r.instrument = &instrument
	return r
}

// The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED
func (r ApiIndexV1MarketsInstrumentsUnmappedRequest) InstrumentStatus(instrumentStatus []string) ApiIndexV1MarketsInstrumentsUnmappedRequest {
	r.instrumentStatus = &instrumentStatus
	return r
}

func (r ApiIndexV1MarketsInstrumentsUnmappedRequest) Execute() (*GENERICRESPONSE, *http.Response, error) {
	return r.ApiService.IndexV1MarketsInstrumentsUnmappedExecute(r)
}

/*
IndexV1MarketsInstrumentsUnmapped Method for IndexV1MarketsInstrumentsUnmapped

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiIndexV1MarketsInstrumentsUnmappedRequest
*/
func (a *FuturesApiService) IndexV1MarketsInstrumentsUnmapped(ctx context.Context) ApiIndexV1MarketsInstrumentsUnmappedRequest {
	return ApiIndexV1MarketsInstrumentsUnmappedRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GENERICRESPONSE
func (a *FuturesApiService) IndexV1MarketsInstrumentsUnmappedExecute(r ApiIndexV1MarketsInstrumentsUnmappedRequest) (*GENERICRESPONSE, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GENERICRESPONSE
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FuturesApiService.IndexV1MarketsInstrumentsUnmapped")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/index/v1/markets/instruments/unmapped"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.market != nil {
		parameterAddToQuery(localVarQueryParams, "market", r.market, "")
	}
	if r.instrument != nil {
		parameterAddToQuery(localVarQueryParams, "instrument", r.instrument, "")
	}
	if r.instrumentStatus != nil {
		parameterAddToQuery(localVarQueryParams, "instrument_status", r.instrumentStatus, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 502 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
