/*
CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry

CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.

API version: 2.1.1
Contact: data@cryptocompare.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SPOTINSTRUMENTTRADE type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SPOTINSTRUMENTTRADE{}

// SPOTINSTRUMENTTRADE struct for SPOTINSTRUMENTTRADE
type SPOTINSTRUMENTTRADE struct {
	// The mapped from asset (base / symbol/ coin). Only available on instruments that have been mapped (e.g. BTC).
	BASE *string `json:"BASE,omitempty"`
	// Our internal sequence number for this trade, this is unique per market / exchange and trading pair. Should always be increasing by 1 for each new trade we discover, not in chronological order.
	CCSEQ *int32 `json:"CCSEQ,omitempty"`
	// The trade ID as reported by the market / exchange. If the exchange does not provide a trade ID, this will be the timestamp of the trade + a number from 0 - 999. This preserves uniqueness, assuming there would never be more than 999 trades in any given second.
	ID *string `json:"ID,omitempty"`
	// The unmapped instrument ID as given by the exchange (e.g. BTCUSD, BTC_USD, XBT-ZUSD, BTC-USD).
	INSTRUMENT *string `json:"INSTRUMENT,omitempty"`
	// The mapped instrument ID, as derived from our mapping rules. This takes the form: \"BASE-QUOTE\". Only available on instruments that have been mapped (e.g. BTC-USD).
	MAPPED_INSTRUMENT *string `json:"MAPPED_INSTRUMENT,omitempty"`
	// The market / exchange under consideration (e.g. Coinbase, Kraken, etc.).
	MARKET *string `json:"MARKET,omitempty"`
	// The price in the to instrument (quote / counter symbol / coin) of the trade. For a BTC-USD trade, this is how much was paid for one BTC in USD. For futures, this will be the price of the contract.
	PRICE *int32 `json:"PRICE,omitempty"`
	// The volume of the trade, given in the from instrument (base symbol / coin/ contract). For a spot BTC-USD trade, this is how much BTC was traded at the trade price. For a futures BTCUSDPERP, this is the BTC equivalent for the contracts traded.
	QUANTITY *int32 `json:"QUANTITY,omitempty"`
	// The mapped to asset (quote / counter symbol / coin). Only available on instruments that have been mapped (e.g. USD).
	QUOTE *string `json:"QUOTE,omitempty"`
	// The volume of the trade, given in the to instrument (quote / counter symbol / coin). This is equivalent to QUANTITY * PRICE. E.g. for a BTC-USD trade, this is how much USD was paid in total for the volume of BTC traded. For futures this is the quote currency equivalent for the contracts traded.
	QUOTE_QUANTITY *int32 `json:"QUOTE_QUANTITY,omitempty"`
	// The timestamp in seconds that the trade was received. This varies from the trade taking place on the market by a few millisconds to a few seconds depending on the market / exchange API options / rate limits.
	RECEIVED_TIMESTAMP *int32 `json:"RECEIVED_TIMESTAMP,omitempty"`
	// The nanosecond part of the received timestamp.
	RECEIVED_TIMESTAMP_NS *int32 `json:"RECEIVED_TIMESTAMP_NS,omitempty"`
	// The side of the trade: SELL, BUY or UNKNOWN. If the exchange / api does not provide a side, \"UNKNOWN\" will be returned.
	SIDE *string `json:"SIDE,omitempty"`
	// The source of the trade update: POLLING, STREAMING, GO, BLOB etc.
	SOURCE *string `json:"SOURCE,omitempty"`
	// The timestamp in seconds as reported by the market / exchange or the received timestamp if the market / exchange does not provide one.
	TIMESTAMP *int32 `json:"TIMESTAMP,omitempty"`
	// The nanosecond part of the reported timestamp.
	TIMESTAMP_NS *int32 `json:"TIMESTAMP_NS,omitempty"`
	// The type of the message.
	TYPE *string `json:"TYPE,omitempty"`
}

// NewSPOTINSTRUMENTTRADE instantiates a new SPOTINSTRUMENTTRADE object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSPOTINSTRUMENTTRADE() *SPOTINSTRUMENTTRADE {
	this := SPOTINSTRUMENTTRADE{}
	return &this
}

// NewSPOTINSTRUMENTTRADEWithDefaults instantiates a new SPOTINSTRUMENTTRADE object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSPOTINSTRUMENTTRADEWithDefaults() *SPOTINSTRUMENTTRADE {
	this := SPOTINSTRUMENTTRADE{}
	return &this
}

// GetBASE returns the BASE field value if set, zero value otherwise.
func (o *SPOTINSTRUMENTTRADE) GetBASE() string {
	if o == nil || isNil(o.BASE) {
		var ret string
		return ret
	}
	return *o.BASE
}

// GetBASEOk returns a tuple with the BASE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SPOTINSTRUMENTTRADE) GetBASEOk() (*string, bool) {
	if o == nil || isNil(o.BASE) {
		return nil, false
	}
	return o.BASE, true
}

// HasBASE returns a boolean if a field has been set.
func (o *SPOTINSTRUMENTTRADE) HasBASE() bool {
	if o != nil && !isNil(o.BASE) {
		return true
	}

	return false
}

// SetBASE gets a reference to the given string and assigns it to the BASE field.
func (o *SPOTINSTRUMENTTRADE) SetBASE(v string) {
	o.BASE = &v
}

// GetCCSEQ returns the CCSEQ field value if set, zero value otherwise.
func (o *SPOTINSTRUMENTTRADE) GetCCSEQ() int32 {
	if o == nil || isNil(o.CCSEQ) {
		var ret int32
		return ret
	}
	return *o.CCSEQ
}

// GetCCSEQOk returns a tuple with the CCSEQ field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SPOTINSTRUMENTTRADE) GetCCSEQOk() (*int32, bool) {
	if o == nil || isNil(o.CCSEQ) {
		return nil, false
	}
	return o.CCSEQ, true
}

// HasCCSEQ returns a boolean if a field has been set.
func (o *SPOTINSTRUMENTTRADE) HasCCSEQ() bool {
	if o != nil && !isNil(o.CCSEQ) {
		return true
	}

	return false
}

// SetCCSEQ gets a reference to the given int32 and assigns it to the CCSEQ field.
func (o *SPOTINSTRUMENTTRADE) SetCCSEQ(v int32) {
	o.CCSEQ = &v
}

// GetID returns the ID field value if set, zero value otherwise.
func (o *SPOTINSTRUMENTTRADE) GetID() string {
	if o == nil || isNil(o.ID) {
		var ret string
		return ret
	}
	return *o.ID
}

// GetIDOk returns a tuple with the ID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SPOTINSTRUMENTTRADE) GetIDOk() (*string, bool) {
	if o == nil || isNil(o.ID) {
		return nil, false
	}
	return o.ID, true
}

// HasID returns a boolean if a field has been set.
func (o *SPOTINSTRUMENTTRADE) HasID() bool {
	if o != nil && !isNil(o.ID) {
		return true
	}

	return false
}

// SetID gets a reference to the given string and assigns it to the ID field.
func (o *SPOTINSTRUMENTTRADE) SetID(v string) {
	o.ID = &v
}

// GetINSTRUMENT returns the INSTRUMENT field value if set, zero value otherwise.
func (o *SPOTINSTRUMENTTRADE) GetINSTRUMENT() string {
	if o == nil || isNil(o.INSTRUMENT) {
		var ret string
		return ret
	}
	return *o.INSTRUMENT
}

// GetINSTRUMENTOk returns a tuple with the INSTRUMENT field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SPOTINSTRUMENTTRADE) GetINSTRUMENTOk() (*string, bool) {
	if o == nil || isNil(o.INSTRUMENT) {
		return nil, false
	}
	return o.INSTRUMENT, true
}

// HasINSTRUMENT returns a boolean if a field has been set.
func (o *SPOTINSTRUMENTTRADE) HasINSTRUMENT() bool {
	if o != nil && !isNil(o.INSTRUMENT) {
		return true
	}

	return false
}

// SetINSTRUMENT gets a reference to the given string and assigns it to the INSTRUMENT field.
func (o *SPOTINSTRUMENTTRADE) SetINSTRUMENT(v string) {
	o.INSTRUMENT = &v
}

// GetMAPPED_INSTRUMENT returns the MAPPED_INSTRUMENT field value if set, zero value otherwise.
func (o *SPOTINSTRUMENTTRADE) GetMAPPED_INSTRUMENT() string {
	if o == nil || isNil(o.MAPPED_INSTRUMENT) {
		var ret string
		return ret
	}
	return *o.MAPPED_INSTRUMENT
}

// GetMAPPED_INSTRUMENTOk returns a tuple with the MAPPED_INSTRUMENT field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SPOTINSTRUMENTTRADE) GetMAPPED_INSTRUMENTOk() (*string, bool) {
	if o == nil || isNil(o.MAPPED_INSTRUMENT) {
		return nil, false
	}
	return o.MAPPED_INSTRUMENT, true
}

// HasMAPPED_INSTRUMENT returns a boolean if a field has been set.
func (o *SPOTINSTRUMENTTRADE) HasMAPPED_INSTRUMENT() bool {
	if o != nil && !isNil(o.MAPPED_INSTRUMENT) {
		return true
	}

	return false
}

// SetMAPPED_INSTRUMENT gets a reference to the given string and assigns it to the MAPPED_INSTRUMENT field.
func (o *SPOTINSTRUMENTTRADE) SetMAPPED_INSTRUMENT(v string) {
	o.MAPPED_INSTRUMENT = &v
}

// GetMARKET returns the MARKET field value if set, zero value otherwise.
func (o *SPOTINSTRUMENTTRADE) GetMARKET() string {
	if o == nil || isNil(o.MARKET) {
		var ret string
		return ret
	}
	return *o.MARKET
}

// GetMARKETOk returns a tuple with the MARKET field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SPOTINSTRUMENTTRADE) GetMARKETOk() (*string, bool) {
	if o == nil || isNil(o.MARKET) {
		return nil, false
	}
	return o.MARKET, true
}

// HasMARKET returns a boolean if a field has been set.
func (o *SPOTINSTRUMENTTRADE) HasMARKET() bool {
	if o != nil && !isNil(o.MARKET) {
		return true
	}

	return false
}

// SetMARKET gets a reference to the given string and assigns it to the MARKET field.
func (o *SPOTINSTRUMENTTRADE) SetMARKET(v string) {
	o.MARKET = &v
}

// GetPRICE returns the PRICE field value if set, zero value otherwise.
func (o *SPOTINSTRUMENTTRADE) GetPRICE() int32 {
	if o == nil || isNil(o.PRICE) {
		var ret int32
		return ret
	}
	return *o.PRICE
}

// GetPRICEOk returns a tuple with the PRICE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SPOTINSTRUMENTTRADE) GetPRICEOk() (*int32, bool) {
	if o == nil || isNil(o.PRICE) {
		return nil, false
	}
	return o.PRICE, true
}

// HasPRICE returns a boolean if a field has been set.
func (o *SPOTINSTRUMENTTRADE) HasPRICE() bool {
	if o != nil && !isNil(o.PRICE) {
		return true
	}

	return false
}

// SetPRICE gets a reference to the given int32 and assigns it to the PRICE field.
func (o *SPOTINSTRUMENTTRADE) SetPRICE(v int32) {
	o.PRICE = &v
}

// GetQUANTITY returns the QUANTITY field value if set, zero value otherwise.
func (o *SPOTINSTRUMENTTRADE) GetQUANTITY() int32 {
	if o == nil || isNil(o.QUANTITY) {
		var ret int32
		return ret
	}
	return *o.QUANTITY
}

// GetQUANTITYOk returns a tuple with the QUANTITY field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SPOTINSTRUMENTTRADE) GetQUANTITYOk() (*int32, bool) {
	if o == nil || isNil(o.QUANTITY) {
		return nil, false
	}
	return o.QUANTITY, true
}

// HasQUANTITY returns a boolean if a field has been set.
func (o *SPOTINSTRUMENTTRADE) HasQUANTITY() bool {
	if o != nil && !isNil(o.QUANTITY) {
		return true
	}

	return false
}

// SetQUANTITY gets a reference to the given int32 and assigns it to the QUANTITY field.
func (o *SPOTINSTRUMENTTRADE) SetQUANTITY(v int32) {
	o.QUANTITY = &v
}

// GetQUOTE returns the QUOTE field value if set, zero value otherwise.
func (o *SPOTINSTRUMENTTRADE) GetQUOTE() string {
	if o == nil || isNil(o.QUOTE) {
		var ret string
		return ret
	}
	return *o.QUOTE
}

// GetQUOTEOk returns a tuple with the QUOTE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SPOTINSTRUMENTTRADE) GetQUOTEOk() (*string, bool) {
	if o == nil || isNil(o.QUOTE) {
		return nil, false
	}
	return o.QUOTE, true
}

// HasQUOTE returns a boolean if a field has been set.
func (o *SPOTINSTRUMENTTRADE) HasQUOTE() bool {
	if o != nil && !isNil(o.QUOTE) {
		return true
	}

	return false
}

// SetQUOTE gets a reference to the given string and assigns it to the QUOTE field.
func (o *SPOTINSTRUMENTTRADE) SetQUOTE(v string) {
	o.QUOTE = &v
}

// GetQUOTE_QUANTITY returns the QUOTE_QUANTITY field value if set, zero value otherwise.
func (o *SPOTINSTRUMENTTRADE) GetQUOTE_QUANTITY() int32 {
	if o == nil || isNil(o.QUOTE_QUANTITY) {
		var ret int32
		return ret
	}
	return *o.QUOTE_QUANTITY
}

// GetQUOTE_QUANTITYOk returns a tuple with the QUOTE_QUANTITY field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SPOTINSTRUMENTTRADE) GetQUOTE_QUANTITYOk() (*int32, bool) {
	if o == nil || isNil(o.QUOTE_QUANTITY) {
		return nil, false
	}
	return o.QUOTE_QUANTITY, true
}

// HasQUOTE_QUANTITY returns a boolean if a field has been set.
func (o *SPOTINSTRUMENTTRADE) HasQUOTE_QUANTITY() bool {
	if o != nil && !isNil(o.QUOTE_QUANTITY) {
		return true
	}

	return false
}

// SetQUOTE_QUANTITY gets a reference to the given int32 and assigns it to the QUOTE_QUANTITY field.
func (o *SPOTINSTRUMENTTRADE) SetQUOTE_QUANTITY(v int32) {
	o.QUOTE_QUANTITY = &v
}

// GetRECEIVED_TIMESTAMP returns the RECEIVED_TIMESTAMP field value if set, zero value otherwise.
func (o *SPOTINSTRUMENTTRADE) GetRECEIVED_TIMESTAMP() int32 {
	if o == nil || isNil(o.RECEIVED_TIMESTAMP) {
		var ret int32
		return ret
	}
	return *o.RECEIVED_TIMESTAMP
}

// GetRECEIVED_TIMESTAMPOk returns a tuple with the RECEIVED_TIMESTAMP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SPOTINSTRUMENTTRADE) GetRECEIVED_TIMESTAMPOk() (*int32, bool) {
	if o == nil || isNil(o.RECEIVED_TIMESTAMP) {
		return nil, false
	}
	return o.RECEIVED_TIMESTAMP, true
}

// HasRECEIVED_TIMESTAMP returns a boolean if a field has been set.
func (o *SPOTINSTRUMENTTRADE) HasRECEIVED_TIMESTAMP() bool {
	if o != nil && !isNil(o.RECEIVED_TIMESTAMP) {
		return true
	}

	return false
}

// SetRECEIVED_TIMESTAMP gets a reference to the given int32 and assigns it to the RECEIVED_TIMESTAMP field.
func (o *SPOTINSTRUMENTTRADE) SetRECEIVED_TIMESTAMP(v int32) {
	o.RECEIVED_TIMESTAMP = &v
}

// GetRECEIVED_TIMESTAMP_NS returns the RECEIVED_TIMESTAMP_NS field value if set, zero value otherwise.
func (o *SPOTINSTRUMENTTRADE) GetRECEIVED_TIMESTAMP_NS() int32 {
	if o == nil || isNil(o.RECEIVED_TIMESTAMP_NS) {
		var ret int32
		return ret
	}
	return *o.RECEIVED_TIMESTAMP_NS
}

// GetRECEIVED_TIMESTAMP_NSOk returns a tuple with the RECEIVED_TIMESTAMP_NS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SPOTINSTRUMENTTRADE) GetRECEIVED_TIMESTAMP_NSOk() (*int32, bool) {
	if o == nil || isNil(o.RECEIVED_TIMESTAMP_NS) {
		return nil, false
	}
	return o.RECEIVED_TIMESTAMP_NS, true
}

// HasRECEIVED_TIMESTAMP_NS returns a boolean if a field has been set.
func (o *SPOTINSTRUMENTTRADE) HasRECEIVED_TIMESTAMP_NS() bool {
	if o != nil && !isNil(o.RECEIVED_TIMESTAMP_NS) {
		return true
	}

	return false
}

// SetRECEIVED_TIMESTAMP_NS gets a reference to the given int32 and assigns it to the RECEIVED_TIMESTAMP_NS field.
func (o *SPOTINSTRUMENTTRADE) SetRECEIVED_TIMESTAMP_NS(v int32) {
	o.RECEIVED_TIMESTAMP_NS = &v
}

// GetSIDE returns the SIDE field value if set, zero value otherwise.
func (o *SPOTINSTRUMENTTRADE) GetSIDE() string {
	if o == nil || isNil(o.SIDE) {
		var ret string
		return ret
	}
	return *o.SIDE
}

// GetSIDEOk returns a tuple with the SIDE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SPOTINSTRUMENTTRADE) GetSIDEOk() (*string, bool) {
	if o == nil || isNil(o.SIDE) {
		return nil, false
	}
	return o.SIDE, true
}

// HasSIDE returns a boolean if a field has been set.
func (o *SPOTINSTRUMENTTRADE) HasSIDE() bool {
	if o != nil && !isNil(o.SIDE) {
		return true
	}

	return false
}

// SetSIDE gets a reference to the given string and assigns it to the SIDE field.
func (o *SPOTINSTRUMENTTRADE) SetSIDE(v string) {
	o.SIDE = &v
}

// GetSOURCE returns the SOURCE field value if set, zero value otherwise.
func (o *SPOTINSTRUMENTTRADE) GetSOURCE() string {
	if o == nil || isNil(o.SOURCE) {
		var ret string
		return ret
	}
	return *o.SOURCE
}

// GetSOURCEOk returns a tuple with the SOURCE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SPOTINSTRUMENTTRADE) GetSOURCEOk() (*string, bool) {
	if o == nil || isNil(o.SOURCE) {
		return nil, false
	}
	return o.SOURCE, true
}

// HasSOURCE returns a boolean if a field has been set.
func (o *SPOTINSTRUMENTTRADE) HasSOURCE() bool {
	if o != nil && !isNil(o.SOURCE) {
		return true
	}

	return false
}

// SetSOURCE gets a reference to the given string and assigns it to the SOURCE field.
func (o *SPOTINSTRUMENTTRADE) SetSOURCE(v string) {
	o.SOURCE = &v
}

// GetTIMESTAMP returns the TIMESTAMP field value if set, zero value otherwise.
func (o *SPOTINSTRUMENTTRADE) GetTIMESTAMP() int32 {
	if o == nil || isNil(o.TIMESTAMP) {
		var ret int32
		return ret
	}
	return *o.TIMESTAMP
}

// GetTIMESTAMPOk returns a tuple with the TIMESTAMP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SPOTINSTRUMENTTRADE) GetTIMESTAMPOk() (*int32, bool) {
	if o == nil || isNil(o.TIMESTAMP) {
		return nil, false
	}
	return o.TIMESTAMP, true
}

// HasTIMESTAMP returns a boolean if a field has been set.
func (o *SPOTINSTRUMENTTRADE) HasTIMESTAMP() bool {
	if o != nil && !isNil(o.TIMESTAMP) {
		return true
	}

	return false
}

// SetTIMESTAMP gets a reference to the given int32 and assigns it to the TIMESTAMP field.
func (o *SPOTINSTRUMENTTRADE) SetTIMESTAMP(v int32) {
	o.TIMESTAMP = &v
}

// GetTIMESTAMP_NS returns the TIMESTAMP_NS field value if set, zero value otherwise.
func (o *SPOTINSTRUMENTTRADE) GetTIMESTAMP_NS() int32 {
	if o == nil || isNil(o.TIMESTAMP_NS) {
		var ret int32
		return ret
	}
	return *o.TIMESTAMP_NS
}

// GetTIMESTAMP_NSOk returns a tuple with the TIMESTAMP_NS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SPOTINSTRUMENTTRADE) GetTIMESTAMP_NSOk() (*int32, bool) {
	if o == nil || isNil(o.TIMESTAMP_NS) {
		return nil, false
	}
	return o.TIMESTAMP_NS, true
}

// HasTIMESTAMP_NS returns a boolean if a field has been set.
func (o *SPOTINSTRUMENTTRADE) HasTIMESTAMP_NS() bool {
	if o != nil && !isNil(o.TIMESTAMP_NS) {
		return true
	}

	return false
}

// SetTIMESTAMP_NS gets a reference to the given int32 and assigns it to the TIMESTAMP_NS field.
func (o *SPOTINSTRUMENTTRADE) SetTIMESTAMP_NS(v int32) {
	o.TIMESTAMP_NS = &v
}

// GetTYPE returns the TYPE field value if set, zero value otherwise.
func (o *SPOTINSTRUMENTTRADE) GetTYPE() string {
	if o == nil || isNil(o.TYPE) {
		var ret string
		return ret
	}
	return *o.TYPE
}

// GetTYPEOk returns a tuple with the TYPE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SPOTINSTRUMENTTRADE) GetTYPEOk() (*string, bool) {
	if o == nil || isNil(o.TYPE) {
		return nil, false
	}
	return o.TYPE, true
}

// HasTYPE returns a boolean if a field has been set.
func (o *SPOTINSTRUMENTTRADE) HasTYPE() bool {
	if o != nil && !isNil(o.TYPE) {
		return true
	}

	return false
}

// SetTYPE gets a reference to the given string and assigns it to the TYPE field.
func (o *SPOTINSTRUMENTTRADE) SetTYPE(v string) {
	o.TYPE = &v
}

func (o SPOTINSTRUMENTTRADE) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SPOTINSTRUMENTTRADE) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.BASE) {
		toSerialize["BASE"] = o.BASE
	}
	if !isNil(o.CCSEQ) {
		toSerialize["CCSEQ"] = o.CCSEQ
	}
	if !isNil(o.ID) {
		toSerialize["ID"] = o.ID
	}
	if !isNil(o.INSTRUMENT) {
		toSerialize["INSTRUMENT"] = o.INSTRUMENT
	}
	if !isNil(o.MAPPED_INSTRUMENT) {
		toSerialize["MAPPED_INSTRUMENT"] = o.MAPPED_INSTRUMENT
	}
	if !isNil(o.MARKET) {
		toSerialize["MARKET"] = o.MARKET
	}
	if !isNil(o.PRICE) {
		toSerialize["PRICE"] = o.PRICE
	}
	if !isNil(o.QUANTITY) {
		toSerialize["QUANTITY"] = o.QUANTITY
	}
	if !isNil(o.QUOTE) {
		toSerialize["QUOTE"] = o.QUOTE
	}
	if !isNil(o.QUOTE_QUANTITY) {
		toSerialize["QUOTE_QUANTITY"] = o.QUOTE_QUANTITY
	}
	if !isNil(o.RECEIVED_TIMESTAMP) {
		toSerialize["RECEIVED_TIMESTAMP"] = o.RECEIVED_TIMESTAMP
	}
	if !isNil(o.RECEIVED_TIMESTAMP_NS) {
		toSerialize["RECEIVED_TIMESTAMP_NS"] = o.RECEIVED_TIMESTAMP_NS
	}
	if !isNil(o.SIDE) {
		toSerialize["SIDE"] = o.SIDE
	}
	if !isNil(o.SOURCE) {
		toSerialize["SOURCE"] = o.SOURCE
	}
	if !isNil(o.TIMESTAMP) {
		toSerialize["TIMESTAMP"] = o.TIMESTAMP
	}
	if !isNil(o.TIMESTAMP_NS) {
		toSerialize["TIMESTAMP_NS"] = o.TIMESTAMP_NS
	}
	if !isNil(o.TYPE) {
		toSerialize["TYPE"] = o.TYPE
	}
	return toSerialize, nil
}

type NullableSPOTINSTRUMENTTRADE struct {
	value *SPOTINSTRUMENTTRADE
	isSet bool
}

func (v NullableSPOTINSTRUMENTTRADE) Get() *SPOTINSTRUMENTTRADE {
	return v.value
}

func (v *NullableSPOTINSTRUMENTTRADE) Set(val *SPOTINSTRUMENTTRADE) {
	v.value = val
	v.isSet = true
}

func (v NullableSPOTINSTRUMENTTRADE) IsSet() bool {
	return v.isSet
}

func (v *NullableSPOTINSTRUMENTTRADE) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSPOTINSTRUMENTTRADE(val *SPOTINSTRUMENTTRADE) *NullableSPOTINSTRUMENTTRADE {
	return &NullableSPOTINSTRUMENTTRADE{value: val, isSet: true}
}

func (v NullableSPOTINSTRUMENTTRADE) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSPOTINSTRUMENTTRADE) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


