/*
CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry

CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.

API version: 2.1.1
Contact: data@cryptocompare.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SPOTINSTRUMENTHISTODATA type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SPOTINSTRUMENTHISTODATA{}

// SPOTINSTRUMENTHISTODATA struct for SPOTINSTRUMENTHISTODATA
type SPOTINSTRUMENTHISTODATA struct {
	// The mapped from asset (base / symbol/ coin) (e.g. BTC). Only available on instruments that have mapping.
	BASE *string `json:"BASE,omitempty"`
	// The price of the last trade in this time period. If there were no trades in the time period, the open price will be given.
	CLOSE *int32 `json:"CLOSE,omitempty"`
	// The price of the first trade in the time period. This is only available when there is at least one trade in the time period.
	FIRST_TRADE_PRICE *int32 `json:"FIRST_TRADE_PRICE,omitempty"`
	// The timestamp, in seconds, of the first trade in this time perio. This is only available when there is at least one trade in the time period.
	FIRST_TRADE_TIMESTAMP *int32 `json:"FIRST_TRADE_TIMESTAMP,omitempty"`
	// The highest trade price in the time period. If there were no trades in the time period, the open price will be given.
	HIGH *int32 `json:"HIGH,omitempty"`
	// The highest value of the trades in the time period. This is only available when there is at least one trade in the time period.
	HIGH_TRADE_PRICE *int32 `json:"HIGH_TRADE_PRICE,omitempty"`
	// The timestamp, in seconds, of the highest trade in the time period. This is only available when there is at least one trade in the time period.
	HIGH_TRADE_TIMESTAMP *int32 `json:"HIGH_TRADE_TIMESTAMP,omitempty"`
	// The unmapped instrument ID
	INSTRUMENT *string `json:"INSTRUMENT,omitempty"`
	// The last trade price in the time period. This is only available when there is at least one trade in the time period.
	LAST_TRADE_PRICE *int32 `json:"LAST_TRADE_PRICE,omitempty"`
	// The timestamp, in seconds, of the last trade in this time period. This is only available when there is at least one trade in the time period.
	LAST_TRADE_TIMESTAMP *int32 `json:"LAST_TRADE_TIMESTAMP,omitempty"`
	// The lowest trade price in the time period. If there were no trades in the time period, the open price will be given.
	LOW *int32 `json:"LOW,omitempty"`
	// The lowest value of the trades in the time period. This is only available when there is at least one trade in the time period.
	LOW_TRADE_PRICE *int32 `json:"LOW_TRADE_PRICE,omitempty"`
	// The timestamp, in seconds, of the lowest trade in the time period. This is only available when there is at least one trade in the time period.
	LOW_TRADE_TIMESTAMP *int32 `json:"LOW_TRADE_TIMESTAMP,omitempty"`
	// The instrument ID, as derived from our mapping rules. This takes the form \"BASE-QUOTE\" (e.g. BTC-USD). Only available on instruments that have been mapped.
	MAPPED_INSTRUMENT *string `json:"MAPPED_INSTRUMENT,omitempty"`
	// The market / exchange under consideration (e.g. gemini, kraken, coinbase, etc).
	MARKET *string `json:"MARKET,omitempty"`
	// The open price for the historical period, this is based on the closest trade before the period start.
	OPEN *int32 `json:"OPEN,omitempty"`
	// The mapped to asset (quote / counter symbol / coin) (e.g. USD). Only available on instruments that have mapping.
	QUOTE *string `json:"QUOTE,omitempty"`
	// The sum of all the trade volumes in the To asset (quote/counter symbol/coin) for the time period. If there were no trades in the time period, 0 will be returned.
	QUOTE_VOLUME *int32 `json:"QUOTE_VOLUME,omitempty"`
	// The sum of all the BUY trade volumes in the to asset (quote/counter symbol/coin) for the time period.
	QUOTE_VOLUME_BUY *int32 `json:"QUOTE_VOLUME_BUY,omitempty"`
	// The sum of all the SELL trade volumes in the To asset (quote/counter symbol/coin) for the time period.
	QUOTE_VOLUME_SELL *int32 `json:"QUOTE_VOLUME_SELL,omitempty"`
	// The sum of all the UNKNOWN trade volumes in the To asset (quote/counter symbol/coin) for the time period.
	QUOTE_VOLUME_UNKNOWN *int32 `json:"QUOTE_VOLUME_UNKNOWN,omitempty"`
	// The timestamp in seconds of the beginning of the histo period. For minute it would be every minute at the beginning of the minute, for hour it would be the start of the hour and for daily it is 00:00 GMT.
	TIMESTAMP *int32 `json:"TIMESTAMP,omitempty"`
	// The total number of trades seen in this time period. If there were no trades in the time period, 0 will be returned.
	TOTAL_TRADES *int32 `json:"TOTAL_TRADES,omitempty"`
	// The total number of BUY trades seen in this time period. If there were no trades in the time period, 0 will be returned.
	TOTAL_TRADES_BUY *int32 `json:"TOTAL_TRADES_BUY,omitempty"`
	// The total number of SELL trades seen in this time period. If there were no trades in the time period, 0 will be returned.
	TOTAL_TRADES_SELL *int32 `json:"TOTAL_TRADES_SELL,omitempty"`
	// The total number of UNKNOWN trades seen in this time period. If there were no trades in the time period, 0 will be returned.
	TOTAL_TRADES_UNKNOWN *int32 `json:"TOTAL_TRADES_UNKNOWN,omitempty"`
	// The type of the message.
	TYPE *string `json:"TYPE,omitempty"`
	// The unit of the historical period update: MINUTE for minute, HOUR for hour and DAY for day.
	UNIT *string `json:"UNIT,omitempty"`
	// The sum of all the trade volumes in the from asset (base symbol / coin) for the time period. If there were no trades in the time period, 0 will be returned.
	VOLUME *int32 `json:"VOLUME,omitempty"`
	// The sum of all the BUY trade volumes in the from asset (base symbol / coin) for the time period.
	VOLUME_BUY *int32 `json:"VOLUME_BUY,omitempty"`
	// The sum of all the SELL trade volumes in the from asset (base symbol / coin) for the time period.
	VOLUME_SELL *int32 `json:"VOLUME_SELL,omitempty"`
	// The sum of all the UNKNOWN trade volumes in the from asset (base symbol / coin) for the time period.
	VOLUME_UNKNOWN *int32 `json:"VOLUME_UNKNOWN,omitempty"`
}

// NewSPOTINSTRUMENTHISTODATA instantiates a new SPOTINSTRUMENTHISTODATA object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSPOTINSTRUMENTHISTODATA() *SPOTINSTRUMENTHISTODATA {
	this := SPOTINSTRUMENTHISTODATA{}
	return &this
}

// NewSPOTINSTRUMENTHISTODATAWithDefaults instantiates a new SPOTINSTRUMENTHISTODATA object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSPOTINSTRUMENTHISTODATAWithDefaults() *SPOTINSTRUMENTHISTODATA {
	this := SPOTINSTRUMENTHISTODATA{}
	return &this
}

// GetBASE returns the BASE field value if set, zero value otherwise.
func (o *SPOTINSTRUMENTHISTODATA) GetBASE() string {
	if o == nil || isNil(o.BASE) {
		var ret string
		return ret
	}
	return *o.BASE
}

// GetBASEOk returns a tuple with the BASE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SPOTINSTRUMENTHISTODATA) GetBASEOk() (*string, bool) {
	if o == nil || isNil(o.BASE) {
		return nil, false
	}
	return o.BASE, true
}

// HasBASE returns a boolean if a field has been set.
func (o *SPOTINSTRUMENTHISTODATA) HasBASE() bool {
	if o != nil && !isNil(o.BASE) {
		return true
	}

	return false
}

// SetBASE gets a reference to the given string and assigns it to the BASE field.
func (o *SPOTINSTRUMENTHISTODATA) SetBASE(v string) {
	o.BASE = &v
}

// GetCLOSE returns the CLOSE field value if set, zero value otherwise.
func (o *SPOTINSTRUMENTHISTODATA) GetCLOSE() int32 {
	if o == nil || isNil(o.CLOSE) {
		var ret int32
		return ret
	}
	return *o.CLOSE
}

// GetCLOSEOk returns a tuple with the CLOSE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SPOTINSTRUMENTHISTODATA) GetCLOSEOk() (*int32, bool) {
	if o == nil || isNil(o.CLOSE) {
		return nil, false
	}
	return o.CLOSE, true
}

// HasCLOSE returns a boolean if a field has been set.
func (o *SPOTINSTRUMENTHISTODATA) HasCLOSE() bool {
	if o != nil && !isNil(o.CLOSE) {
		return true
	}

	return false
}

// SetCLOSE gets a reference to the given int32 and assigns it to the CLOSE field.
func (o *SPOTINSTRUMENTHISTODATA) SetCLOSE(v int32) {
	o.CLOSE = &v
}

// GetFIRST_TRADE_PRICE returns the FIRST_TRADE_PRICE field value if set, zero value otherwise.
func (o *SPOTINSTRUMENTHISTODATA) GetFIRST_TRADE_PRICE() int32 {
	if o == nil || isNil(o.FIRST_TRADE_PRICE) {
		var ret int32
		return ret
	}
	return *o.FIRST_TRADE_PRICE
}

// GetFIRST_TRADE_PRICEOk returns a tuple with the FIRST_TRADE_PRICE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SPOTINSTRUMENTHISTODATA) GetFIRST_TRADE_PRICEOk() (*int32, bool) {
	if o == nil || isNil(o.FIRST_TRADE_PRICE) {
		return nil, false
	}
	return o.FIRST_TRADE_PRICE, true
}

// HasFIRST_TRADE_PRICE returns a boolean if a field has been set.
func (o *SPOTINSTRUMENTHISTODATA) HasFIRST_TRADE_PRICE() bool {
	if o != nil && !isNil(o.FIRST_TRADE_PRICE) {
		return true
	}

	return false
}

// SetFIRST_TRADE_PRICE gets a reference to the given int32 and assigns it to the FIRST_TRADE_PRICE field.
func (o *SPOTINSTRUMENTHISTODATA) SetFIRST_TRADE_PRICE(v int32) {
	o.FIRST_TRADE_PRICE = &v
}

// GetFIRST_TRADE_TIMESTAMP returns the FIRST_TRADE_TIMESTAMP field value if set, zero value otherwise.
func (o *SPOTINSTRUMENTHISTODATA) GetFIRST_TRADE_TIMESTAMP() int32 {
	if o == nil || isNil(o.FIRST_TRADE_TIMESTAMP) {
		var ret int32
		return ret
	}
	return *o.FIRST_TRADE_TIMESTAMP
}

// GetFIRST_TRADE_TIMESTAMPOk returns a tuple with the FIRST_TRADE_TIMESTAMP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SPOTINSTRUMENTHISTODATA) GetFIRST_TRADE_TIMESTAMPOk() (*int32, bool) {
	if o == nil || isNil(o.FIRST_TRADE_TIMESTAMP) {
		return nil, false
	}
	return o.FIRST_TRADE_TIMESTAMP, true
}

// HasFIRST_TRADE_TIMESTAMP returns a boolean if a field has been set.
func (o *SPOTINSTRUMENTHISTODATA) HasFIRST_TRADE_TIMESTAMP() bool {
	if o != nil && !isNil(o.FIRST_TRADE_TIMESTAMP) {
		return true
	}

	return false
}

// SetFIRST_TRADE_TIMESTAMP gets a reference to the given int32 and assigns it to the FIRST_TRADE_TIMESTAMP field.
func (o *SPOTINSTRUMENTHISTODATA) SetFIRST_TRADE_TIMESTAMP(v int32) {
	o.FIRST_TRADE_TIMESTAMP = &v
}

// GetHIGH returns the HIGH field value if set, zero value otherwise.
func (o *SPOTINSTRUMENTHISTODATA) GetHIGH() int32 {
	if o == nil || isNil(o.HIGH) {
		var ret int32
		return ret
	}
	return *o.HIGH
}

// GetHIGHOk returns a tuple with the HIGH field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SPOTINSTRUMENTHISTODATA) GetHIGHOk() (*int32, bool) {
	if o == nil || isNil(o.HIGH) {
		return nil, false
	}
	return o.HIGH, true
}

// HasHIGH returns a boolean if a field has been set.
func (o *SPOTINSTRUMENTHISTODATA) HasHIGH() bool {
	if o != nil && !isNil(o.HIGH) {
		return true
	}

	return false
}

// SetHIGH gets a reference to the given int32 and assigns it to the HIGH field.
func (o *SPOTINSTRUMENTHISTODATA) SetHIGH(v int32) {
	o.HIGH = &v
}

// GetHIGH_TRADE_PRICE returns the HIGH_TRADE_PRICE field value if set, zero value otherwise.
func (o *SPOTINSTRUMENTHISTODATA) GetHIGH_TRADE_PRICE() int32 {
	if o == nil || isNil(o.HIGH_TRADE_PRICE) {
		var ret int32
		return ret
	}
	return *o.HIGH_TRADE_PRICE
}

// GetHIGH_TRADE_PRICEOk returns a tuple with the HIGH_TRADE_PRICE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SPOTINSTRUMENTHISTODATA) GetHIGH_TRADE_PRICEOk() (*int32, bool) {
	if o == nil || isNil(o.HIGH_TRADE_PRICE) {
		return nil, false
	}
	return o.HIGH_TRADE_PRICE, true
}

// HasHIGH_TRADE_PRICE returns a boolean if a field has been set.
func (o *SPOTINSTRUMENTHISTODATA) HasHIGH_TRADE_PRICE() bool {
	if o != nil && !isNil(o.HIGH_TRADE_PRICE) {
		return true
	}

	return false
}

// SetHIGH_TRADE_PRICE gets a reference to the given int32 and assigns it to the HIGH_TRADE_PRICE field.
func (o *SPOTINSTRUMENTHISTODATA) SetHIGH_TRADE_PRICE(v int32) {
	o.HIGH_TRADE_PRICE = &v
}

// GetHIGH_TRADE_TIMESTAMP returns the HIGH_TRADE_TIMESTAMP field value if set, zero value otherwise.
func (o *SPOTINSTRUMENTHISTODATA) GetHIGH_TRADE_TIMESTAMP() int32 {
	if o == nil || isNil(o.HIGH_TRADE_TIMESTAMP) {
		var ret int32
		return ret
	}
	return *o.HIGH_TRADE_TIMESTAMP
}

// GetHIGH_TRADE_TIMESTAMPOk returns a tuple with the HIGH_TRADE_TIMESTAMP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SPOTINSTRUMENTHISTODATA) GetHIGH_TRADE_TIMESTAMPOk() (*int32, bool) {
	if o == nil || isNil(o.HIGH_TRADE_TIMESTAMP) {
		return nil, false
	}
	return o.HIGH_TRADE_TIMESTAMP, true
}

// HasHIGH_TRADE_TIMESTAMP returns a boolean if a field has been set.
func (o *SPOTINSTRUMENTHISTODATA) HasHIGH_TRADE_TIMESTAMP() bool {
	if o != nil && !isNil(o.HIGH_TRADE_TIMESTAMP) {
		return true
	}

	return false
}

// SetHIGH_TRADE_TIMESTAMP gets a reference to the given int32 and assigns it to the HIGH_TRADE_TIMESTAMP field.
func (o *SPOTINSTRUMENTHISTODATA) SetHIGH_TRADE_TIMESTAMP(v int32) {
	o.HIGH_TRADE_TIMESTAMP = &v
}

// GetINSTRUMENT returns the INSTRUMENT field value if set, zero value otherwise.
func (o *SPOTINSTRUMENTHISTODATA) GetINSTRUMENT() string {
	if o == nil || isNil(o.INSTRUMENT) {
		var ret string
		return ret
	}
	return *o.INSTRUMENT
}

// GetINSTRUMENTOk returns a tuple with the INSTRUMENT field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SPOTINSTRUMENTHISTODATA) GetINSTRUMENTOk() (*string, bool) {
	if o == nil || isNil(o.INSTRUMENT) {
		return nil, false
	}
	return o.INSTRUMENT, true
}

// HasINSTRUMENT returns a boolean if a field has been set.
func (o *SPOTINSTRUMENTHISTODATA) HasINSTRUMENT() bool {
	if o != nil && !isNil(o.INSTRUMENT) {
		return true
	}

	return false
}

// SetINSTRUMENT gets a reference to the given string and assigns it to the INSTRUMENT field.
func (o *SPOTINSTRUMENTHISTODATA) SetINSTRUMENT(v string) {
	o.INSTRUMENT = &v
}

// GetLAST_TRADE_PRICE returns the LAST_TRADE_PRICE field value if set, zero value otherwise.
func (o *SPOTINSTRUMENTHISTODATA) GetLAST_TRADE_PRICE() int32 {
	if o == nil || isNil(o.LAST_TRADE_PRICE) {
		var ret int32
		return ret
	}
	return *o.LAST_TRADE_PRICE
}

// GetLAST_TRADE_PRICEOk returns a tuple with the LAST_TRADE_PRICE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SPOTINSTRUMENTHISTODATA) GetLAST_TRADE_PRICEOk() (*int32, bool) {
	if o == nil || isNil(o.LAST_TRADE_PRICE) {
		return nil, false
	}
	return o.LAST_TRADE_PRICE, true
}

// HasLAST_TRADE_PRICE returns a boolean if a field has been set.
func (o *SPOTINSTRUMENTHISTODATA) HasLAST_TRADE_PRICE() bool {
	if o != nil && !isNil(o.LAST_TRADE_PRICE) {
		return true
	}

	return false
}

// SetLAST_TRADE_PRICE gets a reference to the given int32 and assigns it to the LAST_TRADE_PRICE field.
func (o *SPOTINSTRUMENTHISTODATA) SetLAST_TRADE_PRICE(v int32) {
	o.LAST_TRADE_PRICE = &v
}

// GetLAST_TRADE_TIMESTAMP returns the LAST_TRADE_TIMESTAMP field value if set, zero value otherwise.
func (o *SPOTINSTRUMENTHISTODATA) GetLAST_TRADE_TIMESTAMP() int32 {
	if o == nil || isNil(o.LAST_TRADE_TIMESTAMP) {
		var ret int32
		return ret
	}
	return *o.LAST_TRADE_TIMESTAMP
}

// GetLAST_TRADE_TIMESTAMPOk returns a tuple with the LAST_TRADE_TIMESTAMP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SPOTINSTRUMENTHISTODATA) GetLAST_TRADE_TIMESTAMPOk() (*int32, bool) {
	if o == nil || isNil(o.LAST_TRADE_TIMESTAMP) {
		return nil, false
	}
	return o.LAST_TRADE_TIMESTAMP, true
}

// HasLAST_TRADE_TIMESTAMP returns a boolean if a field has been set.
func (o *SPOTINSTRUMENTHISTODATA) HasLAST_TRADE_TIMESTAMP() bool {
	if o != nil && !isNil(o.LAST_TRADE_TIMESTAMP) {
		return true
	}

	return false
}

// SetLAST_TRADE_TIMESTAMP gets a reference to the given int32 and assigns it to the LAST_TRADE_TIMESTAMP field.
func (o *SPOTINSTRUMENTHISTODATA) SetLAST_TRADE_TIMESTAMP(v int32) {
	o.LAST_TRADE_TIMESTAMP = &v
}

// GetLOW returns the LOW field value if set, zero value otherwise.
func (o *SPOTINSTRUMENTHISTODATA) GetLOW() int32 {
	if o == nil || isNil(o.LOW) {
		var ret int32
		return ret
	}
	return *o.LOW
}

// GetLOWOk returns a tuple with the LOW field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SPOTINSTRUMENTHISTODATA) GetLOWOk() (*int32, bool) {
	if o == nil || isNil(o.LOW) {
		return nil, false
	}
	return o.LOW, true
}

// HasLOW returns a boolean if a field has been set.
func (o *SPOTINSTRUMENTHISTODATA) HasLOW() bool {
	if o != nil && !isNil(o.LOW) {
		return true
	}

	return false
}

// SetLOW gets a reference to the given int32 and assigns it to the LOW field.
func (o *SPOTINSTRUMENTHISTODATA) SetLOW(v int32) {
	o.LOW = &v
}

// GetLOW_TRADE_PRICE returns the LOW_TRADE_PRICE field value if set, zero value otherwise.
func (o *SPOTINSTRUMENTHISTODATA) GetLOW_TRADE_PRICE() int32 {
	if o == nil || isNil(o.LOW_TRADE_PRICE) {
		var ret int32
		return ret
	}
	return *o.LOW_TRADE_PRICE
}

// GetLOW_TRADE_PRICEOk returns a tuple with the LOW_TRADE_PRICE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SPOTINSTRUMENTHISTODATA) GetLOW_TRADE_PRICEOk() (*int32, bool) {
	if o == nil || isNil(o.LOW_TRADE_PRICE) {
		return nil, false
	}
	return o.LOW_TRADE_PRICE, true
}

// HasLOW_TRADE_PRICE returns a boolean if a field has been set.
func (o *SPOTINSTRUMENTHISTODATA) HasLOW_TRADE_PRICE() bool {
	if o != nil && !isNil(o.LOW_TRADE_PRICE) {
		return true
	}

	return false
}

// SetLOW_TRADE_PRICE gets a reference to the given int32 and assigns it to the LOW_TRADE_PRICE field.
func (o *SPOTINSTRUMENTHISTODATA) SetLOW_TRADE_PRICE(v int32) {
	o.LOW_TRADE_PRICE = &v
}

// GetLOW_TRADE_TIMESTAMP returns the LOW_TRADE_TIMESTAMP field value if set, zero value otherwise.
func (o *SPOTINSTRUMENTHISTODATA) GetLOW_TRADE_TIMESTAMP() int32 {
	if o == nil || isNil(o.LOW_TRADE_TIMESTAMP) {
		var ret int32
		return ret
	}
	return *o.LOW_TRADE_TIMESTAMP
}

// GetLOW_TRADE_TIMESTAMPOk returns a tuple with the LOW_TRADE_TIMESTAMP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SPOTINSTRUMENTHISTODATA) GetLOW_TRADE_TIMESTAMPOk() (*int32, bool) {
	if o == nil || isNil(o.LOW_TRADE_TIMESTAMP) {
		return nil, false
	}
	return o.LOW_TRADE_TIMESTAMP, true
}

// HasLOW_TRADE_TIMESTAMP returns a boolean if a field has been set.
func (o *SPOTINSTRUMENTHISTODATA) HasLOW_TRADE_TIMESTAMP() bool {
	if o != nil && !isNil(o.LOW_TRADE_TIMESTAMP) {
		return true
	}

	return false
}

// SetLOW_TRADE_TIMESTAMP gets a reference to the given int32 and assigns it to the LOW_TRADE_TIMESTAMP field.
func (o *SPOTINSTRUMENTHISTODATA) SetLOW_TRADE_TIMESTAMP(v int32) {
	o.LOW_TRADE_TIMESTAMP = &v
}

// GetMAPPED_INSTRUMENT returns the MAPPED_INSTRUMENT field value if set, zero value otherwise.
func (o *SPOTINSTRUMENTHISTODATA) GetMAPPED_INSTRUMENT() string {
	if o == nil || isNil(o.MAPPED_INSTRUMENT) {
		var ret string
		return ret
	}
	return *o.MAPPED_INSTRUMENT
}

// GetMAPPED_INSTRUMENTOk returns a tuple with the MAPPED_INSTRUMENT field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SPOTINSTRUMENTHISTODATA) GetMAPPED_INSTRUMENTOk() (*string, bool) {
	if o == nil || isNil(o.MAPPED_INSTRUMENT) {
		return nil, false
	}
	return o.MAPPED_INSTRUMENT, true
}

// HasMAPPED_INSTRUMENT returns a boolean if a field has been set.
func (o *SPOTINSTRUMENTHISTODATA) HasMAPPED_INSTRUMENT() bool {
	if o != nil && !isNil(o.MAPPED_INSTRUMENT) {
		return true
	}

	return false
}

// SetMAPPED_INSTRUMENT gets a reference to the given string and assigns it to the MAPPED_INSTRUMENT field.
func (o *SPOTINSTRUMENTHISTODATA) SetMAPPED_INSTRUMENT(v string) {
	o.MAPPED_INSTRUMENT = &v
}

// GetMARKET returns the MARKET field value if set, zero value otherwise.
func (o *SPOTINSTRUMENTHISTODATA) GetMARKET() string {
	if o == nil || isNil(o.MARKET) {
		var ret string
		return ret
	}
	return *o.MARKET
}

// GetMARKETOk returns a tuple with the MARKET field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SPOTINSTRUMENTHISTODATA) GetMARKETOk() (*string, bool) {
	if o == nil || isNil(o.MARKET) {
		return nil, false
	}
	return o.MARKET, true
}

// HasMARKET returns a boolean if a field has been set.
func (o *SPOTINSTRUMENTHISTODATA) HasMARKET() bool {
	if o != nil && !isNil(o.MARKET) {
		return true
	}

	return false
}

// SetMARKET gets a reference to the given string and assigns it to the MARKET field.
func (o *SPOTINSTRUMENTHISTODATA) SetMARKET(v string) {
	o.MARKET = &v
}

// GetOPEN returns the OPEN field value if set, zero value otherwise.
func (o *SPOTINSTRUMENTHISTODATA) GetOPEN() int32 {
	if o == nil || isNil(o.OPEN) {
		var ret int32
		return ret
	}
	return *o.OPEN
}

// GetOPENOk returns a tuple with the OPEN field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SPOTINSTRUMENTHISTODATA) GetOPENOk() (*int32, bool) {
	if o == nil || isNil(o.OPEN) {
		return nil, false
	}
	return o.OPEN, true
}

// HasOPEN returns a boolean if a field has been set.
func (o *SPOTINSTRUMENTHISTODATA) HasOPEN() bool {
	if o != nil && !isNil(o.OPEN) {
		return true
	}

	return false
}

// SetOPEN gets a reference to the given int32 and assigns it to the OPEN field.
func (o *SPOTINSTRUMENTHISTODATA) SetOPEN(v int32) {
	o.OPEN = &v
}

// GetQUOTE returns the QUOTE field value if set, zero value otherwise.
func (o *SPOTINSTRUMENTHISTODATA) GetQUOTE() string {
	if o == nil || isNil(o.QUOTE) {
		var ret string
		return ret
	}
	return *o.QUOTE
}

// GetQUOTEOk returns a tuple with the QUOTE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SPOTINSTRUMENTHISTODATA) GetQUOTEOk() (*string, bool) {
	if o == nil || isNil(o.QUOTE) {
		return nil, false
	}
	return o.QUOTE, true
}

// HasQUOTE returns a boolean if a field has been set.
func (o *SPOTINSTRUMENTHISTODATA) HasQUOTE() bool {
	if o != nil && !isNil(o.QUOTE) {
		return true
	}

	return false
}

// SetQUOTE gets a reference to the given string and assigns it to the QUOTE field.
func (o *SPOTINSTRUMENTHISTODATA) SetQUOTE(v string) {
	o.QUOTE = &v
}

// GetQUOTE_VOLUME returns the QUOTE_VOLUME field value if set, zero value otherwise.
func (o *SPOTINSTRUMENTHISTODATA) GetQUOTE_VOLUME() int32 {
	if o == nil || isNil(o.QUOTE_VOLUME) {
		var ret int32
		return ret
	}
	return *o.QUOTE_VOLUME
}

// GetQUOTE_VOLUMEOk returns a tuple with the QUOTE_VOLUME field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SPOTINSTRUMENTHISTODATA) GetQUOTE_VOLUMEOk() (*int32, bool) {
	if o == nil || isNil(o.QUOTE_VOLUME) {
		return nil, false
	}
	return o.QUOTE_VOLUME, true
}

// HasQUOTE_VOLUME returns a boolean if a field has been set.
func (o *SPOTINSTRUMENTHISTODATA) HasQUOTE_VOLUME() bool {
	if o != nil && !isNil(o.QUOTE_VOLUME) {
		return true
	}

	return false
}

// SetQUOTE_VOLUME gets a reference to the given int32 and assigns it to the QUOTE_VOLUME field.
func (o *SPOTINSTRUMENTHISTODATA) SetQUOTE_VOLUME(v int32) {
	o.QUOTE_VOLUME = &v
}

// GetQUOTE_VOLUME_BUY returns the QUOTE_VOLUME_BUY field value if set, zero value otherwise.
func (o *SPOTINSTRUMENTHISTODATA) GetQUOTE_VOLUME_BUY() int32 {
	if o == nil || isNil(o.QUOTE_VOLUME_BUY) {
		var ret int32
		return ret
	}
	return *o.QUOTE_VOLUME_BUY
}

// GetQUOTE_VOLUME_BUYOk returns a tuple with the QUOTE_VOLUME_BUY field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SPOTINSTRUMENTHISTODATA) GetQUOTE_VOLUME_BUYOk() (*int32, bool) {
	if o == nil || isNil(o.QUOTE_VOLUME_BUY) {
		return nil, false
	}
	return o.QUOTE_VOLUME_BUY, true
}

// HasQUOTE_VOLUME_BUY returns a boolean if a field has been set.
func (o *SPOTINSTRUMENTHISTODATA) HasQUOTE_VOLUME_BUY() bool {
	if o != nil && !isNil(o.QUOTE_VOLUME_BUY) {
		return true
	}

	return false
}

// SetQUOTE_VOLUME_BUY gets a reference to the given int32 and assigns it to the QUOTE_VOLUME_BUY field.
func (o *SPOTINSTRUMENTHISTODATA) SetQUOTE_VOLUME_BUY(v int32) {
	o.QUOTE_VOLUME_BUY = &v
}

// GetQUOTE_VOLUME_SELL returns the QUOTE_VOLUME_SELL field value if set, zero value otherwise.
func (o *SPOTINSTRUMENTHISTODATA) GetQUOTE_VOLUME_SELL() int32 {
	if o == nil || isNil(o.QUOTE_VOLUME_SELL) {
		var ret int32
		return ret
	}
	return *o.QUOTE_VOLUME_SELL
}

// GetQUOTE_VOLUME_SELLOk returns a tuple with the QUOTE_VOLUME_SELL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SPOTINSTRUMENTHISTODATA) GetQUOTE_VOLUME_SELLOk() (*int32, bool) {
	if o == nil || isNil(o.QUOTE_VOLUME_SELL) {
		return nil, false
	}
	return o.QUOTE_VOLUME_SELL, true
}

// HasQUOTE_VOLUME_SELL returns a boolean if a field has been set.
func (o *SPOTINSTRUMENTHISTODATA) HasQUOTE_VOLUME_SELL() bool {
	if o != nil && !isNil(o.QUOTE_VOLUME_SELL) {
		return true
	}

	return false
}

// SetQUOTE_VOLUME_SELL gets a reference to the given int32 and assigns it to the QUOTE_VOLUME_SELL field.
func (o *SPOTINSTRUMENTHISTODATA) SetQUOTE_VOLUME_SELL(v int32) {
	o.QUOTE_VOLUME_SELL = &v
}

// GetQUOTE_VOLUME_UNKNOWN returns the QUOTE_VOLUME_UNKNOWN field value if set, zero value otherwise.
func (o *SPOTINSTRUMENTHISTODATA) GetQUOTE_VOLUME_UNKNOWN() int32 {
	if o == nil || isNil(o.QUOTE_VOLUME_UNKNOWN) {
		var ret int32
		return ret
	}
	return *o.QUOTE_VOLUME_UNKNOWN
}

// GetQUOTE_VOLUME_UNKNOWNOk returns a tuple with the QUOTE_VOLUME_UNKNOWN field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SPOTINSTRUMENTHISTODATA) GetQUOTE_VOLUME_UNKNOWNOk() (*int32, bool) {
	if o == nil || isNil(o.QUOTE_VOLUME_UNKNOWN) {
		return nil, false
	}
	return o.QUOTE_VOLUME_UNKNOWN, true
}

// HasQUOTE_VOLUME_UNKNOWN returns a boolean if a field has been set.
func (o *SPOTINSTRUMENTHISTODATA) HasQUOTE_VOLUME_UNKNOWN() bool {
	if o != nil && !isNil(o.QUOTE_VOLUME_UNKNOWN) {
		return true
	}

	return false
}

// SetQUOTE_VOLUME_UNKNOWN gets a reference to the given int32 and assigns it to the QUOTE_VOLUME_UNKNOWN field.
func (o *SPOTINSTRUMENTHISTODATA) SetQUOTE_VOLUME_UNKNOWN(v int32) {
	o.QUOTE_VOLUME_UNKNOWN = &v
}

// GetTIMESTAMP returns the TIMESTAMP field value if set, zero value otherwise.
func (o *SPOTINSTRUMENTHISTODATA) GetTIMESTAMP() int32 {
	if o == nil || isNil(o.TIMESTAMP) {
		var ret int32
		return ret
	}
	return *o.TIMESTAMP
}

// GetTIMESTAMPOk returns a tuple with the TIMESTAMP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SPOTINSTRUMENTHISTODATA) GetTIMESTAMPOk() (*int32, bool) {
	if o == nil || isNil(o.TIMESTAMP) {
		return nil, false
	}
	return o.TIMESTAMP, true
}

// HasTIMESTAMP returns a boolean if a field has been set.
func (o *SPOTINSTRUMENTHISTODATA) HasTIMESTAMP() bool {
	if o != nil && !isNil(o.TIMESTAMP) {
		return true
	}

	return false
}

// SetTIMESTAMP gets a reference to the given int32 and assigns it to the TIMESTAMP field.
func (o *SPOTINSTRUMENTHISTODATA) SetTIMESTAMP(v int32) {
	o.TIMESTAMP = &v
}

// GetTOTAL_TRADES returns the TOTAL_TRADES field value if set, zero value otherwise.
func (o *SPOTINSTRUMENTHISTODATA) GetTOTAL_TRADES() int32 {
	if o == nil || isNil(o.TOTAL_TRADES) {
		var ret int32
		return ret
	}
	return *o.TOTAL_TRADES
}

// GetTOTAL_TRADESOk returns a tuple with the TOTAL_TRADES field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SPOTINSTRUMENTHISTODATA) GetTOTAL_TRADESOk() (*int32, bool) {
	if o == nil || isNil(o.TOTAL_TRADES) {
		return nil, false
	}
	return o.TOTAL_TRADES, true
}

// HasTOTAL_TRADES returns a boolean if a field has been set.
func (o *SPOTINSTRUMENTHISTODATA) HasTOTAL_TRADES() bool {
	if o != nil && !isNil(o.TOTAL_TRADES) {
		return true
	}

	return false
}

// SetTOTAL_TRADES gets a reference to the given int32 and assigns it to the TOTAL_TRADES field.
func (o *SPOTINSTRUMENTHISTODATA) SetTOTAL_TRADES(v int32) {
	o.TOTAL_TRADES = &v
}

// GetTOTAL_TRADES_BUY returns the TOTAL_TRADES_BUY field value if set, zero value otherwise.
func (o *SPOTINSTRUMENTHISTODATA) GetTOTAL_TRADES_BUY() int32 {
	if o == nil || isNil(o.TOTAL_TRADES_BUY) {
		var ret int32
		return ret
	}
	return *o.TOTAL_TRADES_BUY
}

// GetTOTAL_TRADES_BUYOk returns a tuple with the TOTAL_TRADES_BUY field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SPOTINSTRUMENTHISTODATA) GetTOTAL_TRADES_BUYOk() (*int32, bool) {
	if o == nil || isNil(o.TOTAL_TRADES_BUY) {
		return nil, false
	}
	return o.TOTAL_TRADES_BUY, true
}

// HasTOTAL_TRADES_BUY returns a boolean if a field has been set.
func (o *SPOTINSTRUMENTHISTODATA) HasTOTAL_TRADES_BUY() bool {
	if o != nil && !isNil(o.TOTAL_TRADES_BUY) {
		return true
	}

	return false
}

// SetTOTAL_TRADES_BUY gets a reference to the given int32 and assigns it to the TOTAL_TRADES_BUY field.
func (o *SPOTINSTRUMENTHISTODATA) SetTOTAL_TRADES_BUY(v int32) {
	o.TOTAL_TRADES_BUY = &v
}

// GetTOTAL_TRADES_SELL returns the TOTAL_TRADES_SELL field value if set, zero value otherwise.
func (o *SPOTINSTRUMENTHISTODATA) GetTOTAL_TRADES_SELL() int32 {
	if o == nil || isNil(o.TOTAL_TRADES_SELL) {
		var ret int32
		return ret
	}
	return *o.TOTAL_TRADES_SELL
}

// GetTOTAL_TRADES_SELLOk returns a tuple with the TOTAL_TRADES_SELL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SPOTINSTRUMENTHISTODATA) GetTOTAL_TRADES_SELLOk() (*int32, bool) {
	if o == nil || isNil(o.TOTAL_TRADES_SELL) {
		return nil, false
	}
	return o.TOTAL_TRADES_SELL, true
}

// HasTOTAL_TRADES_SELL returns a boolean if a field has been set.
func (o *SPOTINSTRUMENTHISTODATA) HasTOTAL_TRADES_SELL() bool {
	if o != nil && !isNil(o.TOTAL_TRADES_SELL) {
		return true
	}

	return false
}

// SetTOTAL_TRADES_SELL gets a reference to the given int32 and assigns it to the TOTAL_TRADES_SELL field.
func (o *SPOTINSTRUMENTHISTODATA) SetTOTAL_TRADES_SELL(v int32) {
	o.TOTAL_TRADES_SELL = &v
}

// GetTOTAL_TRADES_UNKNOWN returns the TOTAL_TRADES_UNKNOWN field value if set, zero value otherwise.
func (o *SPOTINSTRUMENTHISTODATA) GetTOTAL_TRADES_UNKNOWN() int32 {
	if o == nil || isNil(o.TOTAL_TRADES_UNKNOWN) {
		var ret int32
		return ret
	}
	return *o.TOTAL_TRADES_UNKNOWN
}

// GetTOTAL_TRADES_UNKNOWNOk returns a tuple with the TOTAL_TRADES_UNKNOWN field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SPOTINSTRUMENTHISTODATA) GetTOTAL_TRADES_UNKNOWNOk() (*int32, bool) {
	if o == nil || isNil(o.TOTAL_TRADES_UNKNOWN) {
		return nil, false
	}
	return o.TOTAL_TRADES_UNKNOWN, true
}

// HasTOTAL_TRADES_UNKNOWN returns a boolean if a field has been set.
func (o *SPOTINSTRUMENTHISTODATA) HasTOTAL_TRADES_UNKNOWN() bool {
	if o != nil && !isNil(o.TOTAL_TRADES_UNKNOWN) {
		return true
	}

	return false
}

// SetTOTAL_TRADES_UNKNOWN gets a reference to the given int32 and assigns it to the TOTAL_TRADES_UNKNOWN field.
func (o *SPOTINSTRUMENTHISTODATA) SetTOTAL_TRADES_UNKNOWN(v int32) {
	o.TOTAL_TRADES_UNKNOWN = &v
}

// GetTYPE returns the TYPE field value if set, zero value otherwise.
func (o *SPOTINSTRUMENTHISTODATA) GetTYPE() string {
	if o == nil || isNil(o.TYPE) {
		var ret string
		return ret
	}
	return *o.TYPE
}

// GetTYPEOk returns a tuple with the TYPE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SPOTINSTRUMENTHISTODATA) GetTYPEOk() (*string, bool) {
	if o == nil || isNil(o.TYPE) {
		return nil, false
	}
	return o.TYPE, true
}

// HasTYPE returns a boolean if a field has been set.
func (o *SPOTINSTRUMENTHISTODATA) HasTYPE() bool {
	if o != nil && !isNil(o.TYPE) {
		return true
	}

	return false
}

// SetTYPE gets a reference to the given string and assigns it to the TYPE field.
func (o *SPOTINSTRUMENTHISTODATA) SetTYPE(v string) {
	o.TYPE = &v
}

// GetUNIT returns the UNIT field value if set, zero value otherwise.
func (o *SPOTINSTRUMENTHISTODATA) GetUNIT() string {
	if o == nil || isNil(o.UNIT) {
		var ret string
		return ret
	}
	return *o.UNIT
}

// GetUNITOk returns a tuple with the UNIT field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SPOTINSTRUMENTHISTODATA) GetUNITOk() (*string, bool) {
	if o == nil || isNil(o.UNIT) {
		return nil, false
	}
	return o.UNIT, true
}

// HasUNIT returns a boolean if a field has been set.
func (o *SPOTINSTRUMENTHISTODATA) HasUNIT() bool {
	if o != nil && !isNil(o.UNIT) {
		return true
	}

	return false
}

// SetUNIT gets a reference to the given string and assigns it to the UNIT field.
func (o *SPOTINSTRUMENTHISTODATA) SetUNIT(v string) {
	o.UNIT = &v
}

// GetVOLUME returns the VOLUME field value if set, zero value otherwise.
func (o *SPOTINSTRUMENTHISTODATA) GetVOLUME() int32 {
	if o == nil || isNil(o.VOLUME) {
		var ret int32
		return ret
	}
	return *o.VOLUME
}

// GetVOLUMEOk returns a tuple with the VOLUME field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SPOTINSTRUMENTHISTODATA) GetVOLUMEOk() (*int32, bool) {
	if o == nil || isNil(o.VOLUME) {
		return nil, false
	}
	return o.VOLUME, true
}

// HasVOLUME returns a boolean if a field has been set.
func (o *SPOTINSTRUMENTHISTODATA) HasVOLUME() bool {
	if o != nil && !isNil(o.VOLUME) {
		return true
	}

	return false
}

// SetVOLUME gets a reference to the given int32 and assigns it to the VOLUME field.
func (o *SPOTINSTRUMENTHISTODATA) SetVOLUME(v int32) {
	o.VOLUME = &v
}

// GetVOLUME_BUY returns the VOLUME_BUY field value if set, zero value otherwise.
func (o *SPOTINSTRUMENTHISTODATA) GetVOLUME_BUY() int32 {
	if o == nil || isNil(o.VOLUME_BUY) {
		var ret int32
		return ret
	}
	return *o.VOLUME_BUY
}

// GetVOLUME_BUYOk returns a tuple with the VOLUME_BUY field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SPOTINSTRUMENTHISTODATA) GetVOLUME_BUYOk() (*int32, bool) {
	if o == nil || isNil(o.VOLUME_BUY) {
		return nil, false
	}
	return o.VOLUME_BUY, true
}

// HasVOLUME_BUY returns a boolean if a field has been set.
func (o *SPOTINSTRUMENTHISTODATA) HasVOLUME_BUY() bool {
	if o != nil && !isNil(o.VOLUME_BUY) {
		return true
	}

	return false
}

// SetVOLUME_BUY gets a reference to the given int32 and assigns it to the VOLUME_BUY field.
func (o *SPOTINSTRUMENTHISTODATA) SetVOLUME_BUY(v int32) {
	o.VOLUME_BUY = &v
}

// GetVOLUME_SELL returns the VOLUME_SELL field value if set, zero value otherwise.
func (o *SPOTINSTRUMENTHISTODATA) GetVOLUME_SELL() int32 {
	if o == nil || isNil(o.VOLUME_SELL) {
		var ret int32
		return ret
	}
	return *o.VOLUME_SELL
}

// GetVOLUME_SELLOk returns a tuple with the VOLUME_SELL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SPOTINSTRUMENTHISTODATA) GetVOLUME_SELLOk() (*int32, bool) {
	if o == nil || isNil(o.VOLUME_SELL) {
		return nil, false
	}
	return o.VOLUME_SELL, true
}

// HasVOLUME_SELL returns a boolean if a field has been set.
func (o *SPOTINSTRUMENTHISTODATA) HasVOLUME_SELL() bool {
	if o != nil && !isNil(o.VOLUME_SELL) {
		return true
	}

	return false
}

// SetVOLUME_SELL gets a reference to the given int32 and assigns it to the VOLUME_SELL field.
func (o *SPOTINSTRUMENTHISTODATA) SetVOLUME_SELL(v int32) {
	o.VOLUME_SELL = &v
}

// GetVOLUME_UNKNOWN returns the VOLUME_UNKNOWN field value if set, zero value otherwise.
func (o *SPOTINSTRUMENTHISTODATA) GetVOLUME_UNKNOWN() int32 {
	if o == nil || isNil(o.VOLUME_UNKNOWN) {
		var ret int32
		return ret
	}
	return *o.VOLUME_UNKNOWN
}

// GetVOLUME_UNKNOWNOk returns a tuple with the VOLUME_UNKNOWN field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SPOTINSTRUMENTHISTODATA) GetVOLUME_UNKNOWNOk() (*int32, bool) {
	if o == nil || isNil(o.VOLUME_UNKNOWN) {
		return nil, false
	}
	return o.VOLUME_UNKNOWN, true
}

// HasVOLUME_UNKNOWN returns a boolean if a field has been set.
func (o *SPOTINSTRUMENTHISTODATA) HasVOLUME_UNKNOWN() bool {
	if o != nil && !isNil(o.VOLUME_UNKNOWN) {
		return true
	}

	return false
}

// SetVOLUME_UNKNOWN gets a reference to the given int32 and assigns it to the VOLUME_UNKNOWN field.
func (o *SPOTINSTRUMENTHISTODATA) SetVOLUME_UNKNOWN(v int32) {
	o.VOLUME_UNKNOWN = &v
}

func (o SPOTINSTRUMENTHISTODATA) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SPOTINSTRUMENTHISTODATA) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.BASE) {
		toSerialize["BASE"] = o.BASE
	}
	if !isNil(o.CLOSE) {
		toSerialize["CLOSE"] = o.CLOSE
	}
	if !isNil(o.FIRST_TRADE_PRICE) {
		toSerialize["FIRST_TRADE_PRICE"] = o.FIRST_TRADE_PRICE
	}
	if !isNil(o.FIRST_TRADE_TIMESTAMP) {
		toSerialize["FIRST_TRADE_TIMESTAMP"] = o.FIRST_TRADE_TIMESTAMP
	}
	if !isNil(o.HIGH) {
		toSerialize["HIGH"] = o.HIGH
	}
	if !isNil(o.HIGH_TRADE_PRICE) {
		toSerialize["HIGH_TRADE_PRICE"] = o.HIGH_TRADE_PRICE
	}
	if !isNil(o.HIGH_TRADE_TIMESTAMP) {
		toSerialize["HIGH_TRADE_TIMESTAMP"] = o.HIGH_TRADE_TIMESTAMP
	}
	if !isNil(o.INSTRUMENT) {
		toSerialize["INSTRUMENT"] = o.INSTRUMENT
	}
	if !isNil(o.LAST_TRADE_PRICE) {
		toSerialize["LAST_TRADE_PRICE"] = o.LAST_TRADE_PRICE
	}
	if !isNil(o.LAST_TRADE_TIMESTAMP) {
		toSerialize["LAST_TRADE_TIMESTAMP"] = o.LAST_TRADE_TIMESTAMP
	}
	if !isNil(o.LOW) {
		toSerialize["LOW"] = o.LOW
	}
	if !isNil(o.LOW_TRADE_PRICE) {
		toSerialize["LOW_TRADE_PRICE"] = o.LOW_TRADE_PRICE
	}
	if !isNil(o.LOW_TRADE_TIMESTAMP) {
		toSerialize["LOW_TRADE_TIMESTAMP"] = o.LOW_TRADE_TIMESTAMP
	}
	if !isNil(o.MAPPED_INSTRUMENT) {
		toSerialize["MAPPED_INSTRUMENT"] = o.MAPPED_INSTRUMENT
	}
	if !isNil(o.MARKET) {
		toSerialize["MARKET"] = o.MARKET
	}
	if !isNil(o.OPEN) {
		toSerialize["OPEN"] = o.OPEN
	}
	if !isNil(o.QUOTE) {
		toSerialize["QUOTE"] = o.QUOTE
	}
	if !isNil(o.QUOTE_VOLUME) {
		toSerialize["QUOTE_VOLUME"] = o.QUOTE_VOLUME
	}
	if !isNil(o.QUOTE_VOLUME_BUY) {
		toSerialize["QUOTE_VOLUME_BUY"] = o.QUOTE_VOLUME_BUY
	}
	if !isNil(o.QUOTE_VOLUME_SELL) {
		toSerialize["QUOTE_VOLUME_SELL"] = o.QUOTE_VOLUME_SELL
	}
	if !isNil(o.QUOTE_VOLUME_UNKNOWN) {
		toSerialize["QUOTE_VOLUME_UNKNOWN"] = o.QUOTE_VOLUME_UNKNOWN
	}
	if !isNil(o.TIMESTAMP) {
		toSerialize["TIMESTAMP"] = o.TIMESTAMP
	}
	if !isNil(o.TOTAL_TRADES) {
		toSerialize["TOTAL_TRADES"] = o.TOTAL_TRADES
	}
	if !isNil(o.TOTAL_TRADES_BUY) {
		toSerialize["TOTAL_TRADES_BUY"] = o.TOTAL_TRADES_BUY
	}
	if !isNil(o.TOTAL_TRADES_SELL) {
		toSerialize["TOTAL_TRADES_SELL"] = o.TOTAL_TRADES_SELL
	}
	if !isNil(o.TOTAL_TRADES_UNKNOWN) {
		toSerialize["TOTAL_TRADES_UNKNOWN"] = o.TOTAL_TRADES_UNKNOWN
	}
	if !isNil(o.TYPE) {
		toSerialize["TYPE"] = o.TYPE
	}
	if !isNil(o.UNIT) {
		toSerialize["UNIT"] = o.UNIT
	}
	if !isNil(o.VOLUME) {
		toSerialize["VOLUME"] = o.VOLUME
	}
	if !isNil(o.VOLUME_BUY) {
		toSerialize["VOLUME_BUY"] = o.VOLUME_BUY
	}
	if !isNil(o.VOLUME_SELL) {
		toSerialize["VOLUME_SELL"] = o.VOLUME_SELL
	}
	if !isNil(o.VOLUME_UNKNOWN) {
		toSerialize["VOLUME_UNKNOWN"] = o.VOLUME_UNKNOWN
	}
	return toSerialize, nil
}

type NullableSPOTINSTRUMENTHISTODATA struct {
	value *SPOTINSTRUMENTHISTODATA
	isSet bool
}

func (v NullableSPOTINSTRUMENTHISTODATA) Get() *SPOTINSTRUMENTHISTODATA {
	return v.value
}

func (v *NullableSPOTINSTRUMENTHISTODATA) Set(val *SPOTINSTRUMENTHISTODATA) {
	v.value = val
	v.isSet = true
}

func (v NullableSPOTINSTRUMENTHISTODATA) IsSet() bool {
	return v.isSet
}

func (v *NullableSPOTINSTRUMENTHISTODATA) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSPOTINSTRUMENTHISTODATA(val *SPOTINSTRUMENTHISTODATA) *NullableSPOTINSTRUMENTHISTODATA {
	return &NullableSPOTINSTRUMENTHISTODATA{value: val, isSet: true}
}

func (v NullableSPOTINSTRUMENTHISTODATA) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSPOTINSTRUMENTHISTODATA) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


