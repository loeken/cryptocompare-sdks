/*
CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry

CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.

API version: 2.1.1
Contact: data@cryptocompare.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ErrorErr type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ErrorErr{}

// ErrorErr struct for ErrorErr
type ErrorErr struct {
	// A message describing the error
	Message *string `json:"message,omitempty"`
	OtherInfo *ErrorErrOtherInfo `json:"other_info,omitempty"`
	// A public facing error type. If you want to treat a specific error use the type.
	Type *int32 `json:"type,omitempty"`
}

// NewErrorErr instantiates a new ErrorErr object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorErr() *ErrorErr {
	this := ErrorErr{}
	return &this
}

// NewErrorErrWithDefaults instantiates a new ErrorErr object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorErrWithDefaults() *ErrorErr {
	this := ErrorErr{}
	return &this
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *ErrorErr) GetMessage() string {
	if o == nil || isNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorErr) GetMessageOk() (*string, bool) {
	if o == nil || isNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *ErrorErr) HasMessage() bool {
	if o != nil && !isNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *ErrorErr) SetMessage(v string) {
	o.Message = &v
}

// GetOtherInfo returns the OtherInfo field value if set, zero value otherwise.
func (o *ErrorErr) GetOtherInfo() ErrorErrOtherInfo {
	if o == nil || isNil(o.OtherInfo) {
		var ret ErrorErrOtherInfo
		return ret
	}
	return *o.OtherInfo
}

// GetOtherInfoOk returns a tuple with the OtherInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorErr) GetOtherInfoOk() (*ErrorErrOtherInfo, bool) {
	if o == nil || isNil(o.OtherInfo) {
		return nil, false
	}
	return o.OtherInfo, true
}

// HasOtherInfo returns a boolean if a field has been set.
func (o *ErrorErr) HasOtherInfo() bool {
	if o != nil && !isNil(o.OtherInfo) {
		return true
	}

	return false
}

// SetOtherInfo gets a reference to the given ErrorErrOtherInfo and assigns it to the OtherInfo field.
func (o *ErrorErr) SetOtherInfo(v ErrorErrOtherInfo) {
	o.OtherInfo = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ErrorErr) GetType() int32 {
	if o == nil || isNil(o.Type) {
		var ret int32
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorErr) GetTypeOk() (*int32, bool) {
	if o == nil || isNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ErrorErr) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given int32 and assigns it to the Type field.
func (o *ErrorErr) SetType(v int32) {
	o.Type = &v
}

func (o ErrorErr) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ErrorErr) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !isNil(o.OtherInfo) {
		toSerialize["other_info"] = o.OtherInfo
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableErrorErr struct {
	value *ErrorErr
	isSet bool
}

func (v NullableErrorErr) Get() *ErrorErr {
	return v.value
}

func (v *NullableErrorErr) Set(val *ErrorErr) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorErr) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorErr) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorErr(val *ErrorErr) *NullableErrorErr {
	return &NullableErrorErr{value: val, isSet: true}
}

func (v NullableErrorErr) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorErr) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


