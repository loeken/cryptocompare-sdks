/*
CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry

CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.

API version: 2.1.1
Contact: data@cryptocompare.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// SpotApiService SpotApi service
type SpotApiService service

type ApiSpotV1HistoricalDaysRequest struct {
	ctx context.Context
	ApiService *SpotApiService
	market *string
	instrument *string
	groups *[]string
	limit *int32
	toTs *int32
	aggregate *int32
	fill *bool
	mappingPriority *string
	responseFormat *string
}

// The exchange to obtain data from
func (r ApiSpotV1HistoricalDaysRequest) Market(market string) ApiSpotV1HistoricalDaysRequest {
	r.market = &market
	return r
}

// The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
func (r ApiSpotV1HistoricalDaysRequest) Instrument(instrument string) ApiSpotV1HistoricalDaysRequest {
	r.instrument = &instrument
	return r
}

// When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME
func (r ApiSpotV1HistoricalDaysRequest) Groups(groups []string) ApiSpotV1HistoricalDaysRequest {
	r.groups = &groups
	return r
}

// The number of data points to return
func (r ApiSpotV1HistoricalDaysRequest) Limit(limit int32) ApiSpotV1HistoricalDaysRequest {
	r.limit = &limit
	return r
}

// Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
func (r ApiSpotV1HistoricalDaysRequest) ToTs(toTs int32) ApiSpotV1HistoricalDaysRequest {
	r.toTs = &toTs
	return r
}

// The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
func (r ApiSpotV1HistoricalDaysRequest) Aggregate(aggregate int32) ApiSpotV1HistoricalDaysRequest {
	r.aggregate = &aggregate
	return r
}

// Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
func (r ApiSpotV1HistoricalDaysRequest) Fill(fill bool) ApiSpotV1HistoricalDaysRequest {
	r.fill = &fill
	return r
}

// The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
func (r ApiSpotV1HistoricalDaysRequest) MappingPriority(mappingPriority string) ApiSpotV1HistoricalDaysRequest {
	r.mappingPriority = &mappingPriority
	return r
}

// The format of the data response in uppercase. It can be one of the following: JSON,CSV
func (r ApiSpotV1HistoricalDaysRequest) ResponseFormat(responseFormat string) ApiSpotV1HistoricalDaysRequest {
	r.responseFormat = &responseFormat
	return r
}

func (r ApiSpotV1HistoricalDaysRequest) Execute() (*SPOTINSTRUMENTHISTODATARESPONSE, *http.Response, error) {
	return r.ApiService.SpotV1HistoricalDaysExecute(r)
}

/*
SpotV1HistoricalDays Method for SpotV1HistoricalDays

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSpotV1HistoricalDaysRequest
*/
func (a *SpotApiService) SpotV1HistoricalDays(ctx context.Context) ApiSpotV1HistoricalDaysRequest {
	return ApiSpotV1HistoricalDaysRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SPOTINSTRUMENTHISTODATARESPONSE
func (a *SpotApiService) SpotV1HistoricalDaysExecute(r ApiSpotV1HistoricalDaysRequest) (*SPOTINSTRUMENTHISTODATARESPONSE, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SPOTINSTRUMENTHISTODATARESPONSE
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SpotApiService.SpotV1HistoricalDays")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/spot/v1/historical/days"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.market == nil {
		return localVarReturnValue, nil, reportError("market is required and must be specified")
	}
	if strlen(*r.market) < 2 {
		return localVarReturnValue, nil, reportError("market must have at least 2 elements")
	}
	if strlen(*r.market) > 30 {
		return localVarReturnValue, nil, reportError("market must have less than 30 elements")
	}
	if r.instrument == nil {
		return localVarReturnValue, nil, reportError("instrument is required and must be specified")
	}
	if strlen(*r.instrument) < 1 {
		return localVarReturnValue, nil, reportError("instrument must have at least 1 elements")
	}
	if strlen(*r.instrument) > 500 {
		return localVarReturnValue, nil, reportError("instrument must have less than 500 elements")
	}

	parameterAddToQuery(localVarQueryParams, "market", r.market, "")
	parameterAddToQuery(localVarQueryParams, "instrument", r.instrument, "")
	if r.groups != nil {
		parameterAddToQuery(localVarQueryParams, "groups", r.groups, "csv")
	}
	if r.limit != nil {
		parameterAddToQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.toTs != nil {
		parameterAddToQuery(localVarQueryParams, "to_ts", r.toTs, "")
	}
	if r.aggregate != nil {
		parameterAddToQuery(localVarQueryParams, "aggregate", r.aggregate, "")
	}
	if r.fill != nil {
		parameterAddToQuery(localVarQueryParams, "fill", r.fill, "")
	}
	if r.mappingPriority != nil {
		parameterAddToQuery(localVarQueryParams, "mapping_priority", r.mappingPriority, "")
	}
	if r.responseFormat != nil {
		parameterAddToQuery(localVarQueryParams, "response_format", r.responseFormat, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 502 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSpotV1HistoricalHoursRequest struct {
	ctx context.Context
	ApiService *SpotApiService
	market *string
	instrument *string
	groups *[]string
	limit *int32
	toTs *int32
	aggregate *int32
	fill *bool
	mappingPriority *string
	responseFormat *string
}

// The exchange to obtain data from
func (r ApiSpotV1HistoricalHoursRequest) Market(market string) ApiSpotV1HistoricalHoursRequest {
	r.market = &market
	return r
}

// The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
func (r ApiSpotV1HistoricalHoursRequest) Instrument(instrument string) ApiSpotV1HistoricalHoursRequest {
	r.instrument = &instrument
	return r
}

// When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME
func (r ApiSpotV1HistoricalHoursRequest) Groups(groups []string) ApiSpotV1HistoricalHoursRequest {
	r.groups = &groups
	return r
}

// The number of data points to return
func (r ApiSpotV1HistoricalHoursRequest) Limit(limit int32) ApiSpotV1HistoricalHoursRequest {
	r.limit = &limit
	return r
}

// Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
func (r ApiSpotV1HistoricalHoursRequest) ToTs(toTs int32) ApiSpotV1HistoricalHoursRequest {
	r.toTs = &toTs
	return r
}

// The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
func (r ApiSpotV1HistoricalHoursRequest) Aggregate(aggregate int32) ApiSpotV1HistoricalHoursRequest {
	r.aggregate = &aggregate
	return r
}

// Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
func (r ApiSpotV1HistoricalHoursRequest) Fill(fill bool) ApiSpotV1HistoricalHoursRequest {
	r.fill = &fill
	return r
}

// The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
func (r ApiSpotV1HistoricalHoursRequest) MappingPriority(mappingPriority string) ApiSpotV1HistoricalHoursRequest {
	r.mappingPriority = &mappingPriority
	return r
}

// The format of the data response in uppercase. It can be one of the following: JSON,CSV
func (r ApiSpotV1HistoricalHoursRequest) ResponseFormat(responseFormat string) ApiSpotV1HistoricalHoursRequest {
	r.responseFormat = &responseFormat
	return r
}

func (r ApiSpotV1HistoricalHoursRequest) Execute() (*SPOTINSTRUMENTHISTODATARESPONSE, *http.Response, error) {
	return r.ApiService.SpotV1HistoricalHoursExecute(r)
}

/*
SpotV1HistoricalHours Method for SpotV1HistoricalHours

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSpotV1HistoricalHoursRequest
*/
func (a *SpotApiService) SpotV1HistoricalHours(ctx context.Context) ApiSpotV1HistoricalHoursRequest {
	return ApiSpotV1HistoricalHoursRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SPOTINSTRUMENTHISTODATARESPONSE
func (a *SpotApiService) SpotV1HistoricalHoursExecute(r ApiSpotV1HistoricalHoursRequest) (*SPOTINSTRUMENTHISTODATARESPONSE, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SPOTINSTRUMENTHISTODATARESPONSE
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SpotApiService.SpotV1HistoricalHours")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/spot/v1/historical/hours"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.market == nil {
		return localVarReturnValue, nil, reportError("market is required and must be specified")
	}
	if strlen(*r.market) < 2 {
		return localVarReturnValue, nil, reportError("market must have at least 2 elements")
	}
	if strlen(*r.market) > 30 {
		return localVarReturnValue, nil, reportError("market must have less than 30 elements")
	}
	if r.instrument == nil {
		return localVarReturnValue, nil, reportError("instrument is required and must be specified")
	}
	if strlen(*r.instrument) < 1 {
		return localVarReturnValue, nil, reportError("instrument must have at least 1 elements")
	}
	if strlen(*r.instrument) > 500 {
		return localVarReturnValue, nil, reportError("instrument must have less than 500 elements")
	}

	parameterAddToQuery(localVarQueryParams, "market", r.market, "")
	parameterAddToQuery(localVarQueryParams, "instrument", r.instrument, "")
	if r.groups != nil {
		parameterAddToQuery(localVarQueryParams, "groups", r.groups, "csv")
	}
	if r.limit != nil {
		parameterAddToQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.toTs != nil {
		parameterAddToQuery(localVarQueryParams, "to_ts", r.toTs, "")
	}
	if r.aggregate != nil {
		parameterAddToQuery(localVarQueryParams, "aggregate", r.aggregate, "")
	}
	if r.fill != nil {
		parameterAddToQuery(localVarQueryParams, "fill", r.fill, "")
	}
	if r.mappingPriority != nil {
		parameterAddToQuery(localVarQueryParams, "mapping_priority", r.mappingPriority, "")
	}
	if r.responseFormat != nil {
		parameterAddToQuery(localVarQueryParams, "response_format", r.responseFormat, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 502 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSpotV1HistoricalMinutesRequest struct {
	ctx context.Context
	ApiService *SpotApiService
	market *string
	instrument *string
	groups *[]string
	limit *int32
	toTs *int32
	aggregate *int32
	fill *bool
	mappingPriority *string
	responseFormat *string
}

// The exchange to obtain data from
func (r ApiSpotV1HistoricalMinutesRequest) Market(market string) ApiSpotV1HistoricalMinutesRequest {
	r.market = &market
	return r
}

// The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
func (r ApiSpotV1HistoricalMinutesRequest) Instrument(instrument string) ApiSpotV1HistoricalMinutesRequest {
	r.instrument = &instrument
	return r
}

// When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME
func (r ApiSpotV1HistoricalMinutesRequest) Groups(groups []string) ApiSpotV1HistoricalMinutesRequest {
	r.groups = &groups
	return r
}

// The number of data points to return
func (r ApiSpotV1HistoricalMinutesRequest) Limit(limit int32) ApiSpotV1HistoricalMinutesRequest {
	r.limit = &limit
	return r
}

// Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
func (r ApiSpotV1HistoricalMinutesRequest) ToTs(toTs int32) ApiSpotV1HistoricalMinutesRequest {
	r.toTs = &toTs
	return r
}

// The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
func (r ApiSpotV1HistoricalMinutesRequest) Aggregate(aggregate int32) ApiSpotV1HistoricalMinutesRequest {
	r.aggregate = &aggregate
	return r
}

// Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
func (r ApiSpotV1HistoricalMinutesRequest) Fill(fill bool) ApiSpotV1HistoricalMinutesRequest {
	r.fill = &fill
	return r
}

// The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
func (r ApiSpotV1HistoricalMinutesRequest) MappingPriority(mappingPriority string) ApiSpotV1HistoricalMinutesRequest {
	r.mappingPriority = &mappingPriority
	return r
}

// The format of the data response in uppercase. It can be one of the following: JSON,CSV
func (r ApiSpotV1HistoricalMinutesRequest) ResponseFormat(responseFormat string) ApiSpotV1HistoricalMinutesRequest {
	r.responseFormat = &responseFormat
	return r
}

func (r ApiSpotV1HistoricalMinutesRequest) Execute() (*SPOTINSTRUMENTHISTODATARESPONSE, *http.Response, error) {
	return r.ApiService.SpotV1HistoricalMinutesExecute(r)
}

/*
SpotV1HistoricalMinutes Method for SpotV1HistoricalMinutes

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSpotV1HistoricalMinutesRequest
*/
func (a *SpotApiService) SpotV1HistoricalMinutes(ctx context.Context) ApiSpotV1HistoricalMinutesRequest {
	return ApiSpotV1HistoricalMinutesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SPOTINSTRUMENTHISTODATARESPONSE
func (a *SpotApiService) SpotV1HistoricalMinutesExecute(r ApiSpotV1HistoricalMinutesRequest) (*SPOTINSTRUMENTHISTODATARESPONSE, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SPOTINSTRUMENTHISTODATARESPONSE
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SpotApiService.SpotV1HistoricalMinutes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/spot/v1/historical/minutes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.market == nil {
		return localVarReturnValue, nil, reportError("market is required and must be specified")
	}
	if strlen(*r.market) < 2 {
		return localVarReturnValue, nil, reportError("market must have at least 2 elements")
	}
	if strlen(*r.market) > 30 {
		return localVarReturnValue, nil, reportError("market must have less than 30 elements")
	}
	if r.instrument == nil {
		return localVarReturnValue, nil, reportError("instrument is required and must be specified")
	}
	if strlen(*r.instrument) < 1 {
		return localVarReturnValue, nil, reportError("instrument must have at least 1 elements")
	}
	if strlen(*r.instrument) > 500 {
		return localVarReturnValue, nil, reportError("instrument must have less than 500 elements")
	}

	parameterAddToQuery(localVarQueryParams, "market", r.market, "")
	parameterAddToQuery(localVarQueryParams, "instrument", r.instrument, "")
	if r.groups != nil {
		parameterAddToQuery(localVarQueryParams, "groups", r.groups, "csv")
	}
	if r.limit != nil {
		parameterAddToQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.toTs != nil {
		parameterAddToQuery(localVarQueryParams, "to_ts", r.toTs, "")
	}
	if r.aggregate != nil {
		parameterAddToQuery(localVarQueryParams, "aggregate", r.aggregate, "")
	}
	if r.fill != nil {
		parameterAddToQuery(localVarQueryParams, "fill", r.fill, "")
	}
	if r.mappingPriority != nil {
		parameterAddToQuery(localVarQueryParams, "mapping_priority", r.mappingPriority, "")
	}
	if r.responseFormat != nil {
		parameterAddToQuery(localVarQueryParams, "response_format", r.responseFormat, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 502 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSpotV1HistoricalOrderbookL2SnapshotMinuteRequest struct {
	ctx context.Context
	ApiService *SpotApiService
	market *string
	instrument *string
	minuteTs *int32
	depth *int32
	mappingPriority *string
	responseFormat *string
}

// The exchange to obtain data from
func (r ApiSpotV1HistoricalOrderbookL2SnapshotMinuteRequest) Market(market string) ApiSpotV1HistoricalOrderbookL2SnapshotMinuteRequest {
	r.market = &market
	return r
}

// The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
func (r ApiSpotV1HistoricalOrderbookL2SnapshotMinuteRequest) Instrument(instrument string) ApiSpotV1HistoricalOrderbookL2SnapshotMinuteRequest {
	r.instrument = &instrument
	return r
}

// Unix timestamp in seconds for the minute of the orderbook snapshot you are interested in. You can pass any timestamp within a minute but we will round it down the the full minute timestmap and return the orderbook l2 snapshot at that minute.
func (r ApiSpotV1HistoricalOrderbookL2SnapshotMinuteRequest) MinuteTs(minuteTs int32) ApiSpotV1HistoricalOrderbookL2SnapshotMinuteRequest {
	r.minuteTs = &minuteTs
	return r
}

// The number of top bids and asks to return.
func (r ApiSpotV1HistoricalOrderbookL2SnapshotMinuteRequest) Depth(depth int32) ApiSpotV1HistoricalOrderbookL2SnapshotMinuteRequest {
	r.depth = &depth
	return r
}

// The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
func (r ApiSpotV1HistoricalOrderbookL2SnapshotMinuteRequest) MappingPriority(mappingPriority string) ApiSpotV1HistoricalOrderbookL2SnapshotMinuteRequest {
	r.mappingPriority = &mappingPriority
	return r
}

// The format of the data response in uppercase. It can be one of the following: JSON,CSV
func (r ApiSpotV1HistoricalOrderbookL2SnapshotMinuteRequest) ResponseFormat(responseFormat string) ApiSpotV1HistoricalOrderbookL2SnapshotMinuteRequest {
	r.responseFormat = &responseFormat
	return r
}

func (r ApiSpotV1HistoricalOrderbookL2SnapshotMinuteRequest) Execute() (*GENERICRESPONSE, *http.Response, error) {
	return r.ApiService.SpotV1HistoricalOrderbookL2SnapshotMinuteExecute(r)
}

/*
SpotV1HistoricalOrderbookL2SnapshotMinute Method for SpotV1HistoricalOrderbookL2SnapshotMinute

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSpotV1HistoricalOrderbookL2SnapshotMinuteRequest
*/
func (a *SpotApiService) SpotV1HistoricalOrderbookL2SnapshotMinute(ctx context.Context) ApiSpotV1HistoricalOrderbookL2SnapshotMinuteRequest {
	return ApiSpotV1HistoricalOrderbookL2SnapshotMinuteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GENERICRESPONSE
func (a *SpotApiService) SpotV1HistoricalOrderbookL2SnapshotMinuteExecute(r ApiSpotV1HistoricalOrderbookL2SnapshotMinuteRequest) (*GENERICRESPONSE, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GENERICRESPONSE
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SpotApiService.SpotV1HistoricalOrderbookL2SnapshotMinute")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/spot/v1/historical/orderbook/l2/snapshot/minute"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.market == nil {
		return localVarReturnValue, nil, reportError("market is required and must be specified")
	}
	if strlen(*r.market) < 2 {
		return localVarReturnValue, nil, reportError("market must have at least 2 elements")
	}
	if strlen(*r.market) > 30 {
		return localVarReturnValue, nil, reportError("market must have less than 30 elements")
	}
	if r.instrument == nil {
		return localVarReturnValue, nil, reportError("instrument is required and must be specified")
	}
	if strlen(*r.instrument) < 1 {
		return localVarReturnValue, nil, reportError("instrument must have at least 1 elements")
	}
	if strlen(*r.instrument) > 500 {
		return localVarReturnValue, nil, reportError("instrument must have less than 500 elements")
	}
	if r.minuteTs == nil {
		return localVarReturnValue, nil, reportError("minuteTs is required and must be specified")
	}

	parameterAddToQuery(localVarQueryParams, "market", r.market, "")
	parameterAddToQuery(localVarQueryParams, "instrument", r.instrument, "")
	parameterAddToQuery(localVarQueryParams, "minute_ts", r.minuteTs, "")
	if r.depth != nil {
		parameterAddToQuery(localVarQueryParams, "depth", r.depth, "")
	}
	if r.mappingPriority != nil {
		parameterAddToQuery(localVarQueryParams, "mapping_priority", r.mappingPriority, "")
	}
	if r.responseFormat != nil {
		parameterAddToQuery(localVarQueryParams, "response_format", r.responseFormat, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key_header"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key_query"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 502 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSpotV1HistoricalTradesRequest struct {
	ctx context.Context
	ApiService *SpotApiService
	market *string
	instrument *string
	afterTs *int32
	lastCcseq *int32
	limit *int32
	mappingPriority *string
	responseFormat *string
	return404OnEmptyResponse *bool
}

// The exchange to obtain data from
func (r ApiSpotV1HistoricalTradesRequest) Market(market string) ApiSpotV1HistoricalTradesRequest {
	r.market = &market
	return r
}

// The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
func (r ApiSpotV1HistoricalTradesRequest) Instrument(instrument string) ApiSpotV1HistoricalTradesRequest {
	r.instrument = &instrument
	return r
}

// Unix timestamp in seconds of the earliest trade in the response.
func (r ApiSpotV1HistoricalTradesRequest) AfterTs(afterTs int32) ApiSpotV1HistoricalTradesRequest {
	r.afterTs = &afterTs
	return r
}

// The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request.
func (r ApiSpotV1HistoricalTradesRequest) LastCcseq(lastCcseq int32) ApiSpotV1HistoricalTradesRequest {
	r.lastCcseq = &lastCcseq
	return r
}

// The maximum number of trades to return
func (r ApiSpotV1HistoricalTradesRequest) Limit(limit int32) ApiSpotV1HistoricalTradesRequest {
	r.limit = &limit
	return r
}

// The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
func (r ApiSpotV1HistoricalTradesRequest) MappingPriority(mappingPriority string) ApiSpotV1HistoricalTradesRequest {
	r.mappingPriority = &mappingPriority
	return r
}

// The format of the data response in uppercase. It can be one of the following: JSON,CSV
func (r ApiSpotV1HistoricalTradesRequest) ResponseFormat(responseFormat string) ApiSpotV1HistoricalTradesRequest {
	r.responseFormat = &responseFormat
	return r
}

// If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.
func (r ApiSpotV1HistoricalTradesRequest) Return404OnEmptyResponse(return404OnEmptyResponse bool) ApiSpotV1HistoricalTradesRequest {
	r.return404OnEmptyResponse = &return404OnEmptyResponse
	return r
}

func (r ApiSpotV1HistoricalTradesRequest) Execute() (*SPOTINSTRUMENTTRADERESPONSE, *http.Response, error) {
	return r.ApiService.SpotV1HistoricalTradesExecute(r)
}

/*
SpotV1HistoricalTrades Method for SpotV1HistoricalTrades

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSpotV1HistoricalTradesRequest
*/
func (a *SpotApiService) SpotV1HistoricalTrades(ctx context.Context) ApiSpotV1HistoricalTradesRequest {
	return ApiSpotV1HistoricalTradesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SPOTINSTRUMENTTRADERESPONSE
func (a *SpotApiService) SpotV1HistoricalTradesExecute(r ApiSpotV1HistoricalTradesRequest) (*SPOTINSTRUMENTTRADERESPONSE, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SPOTINSTRUMENTTRADERESPONSE
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SpotApiService.SpotV1HistoricalTrades")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/spot/v1/historical/trades"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.market == nil {
		return localVarReturnValue, nil, reportError("market is required and must be specified")
	}
	if strlen(*r.market) < 2 {
		return localVarReturnValue, nil, reportError("market must have at least 2 elements")
	}
	if strlen(*r.market) > 30 {
		return localVarReturnValue, nil, reportError("market must have less than 30 elements")
	}
	if r.instrument == nil {
		return localVarReturnValue, nil, reportError("instrument is required and must be specified")
	}
	if strlen(*r.instrument) < 1 {
		return localVarReturnValue, nil, reportError("instrument must have at least 1 elements")
	}
	if strlen(*r.instrument) > 500 {
		return localVarReturnValue, nil, reportError("instrument must have less than 500 elements")
	}

	parameterAddToQuery(localVarQueryParams, "market", r.market, "")
	parameterAddToQuery(localVarQueryParams, "instrument", r.instrument, "")
	if r.afterTs != nil {
		parameterAddToQuery(localVarQueryParams, "after_ts", r.afterTs, "")
	}
	if r.lastCcseq != nil {
		parameterAddToQuery(localVarQueryParams, "last_ccseq", r.lastCcseq, "")
	}
	if r.limit != nil {
		parameterAddToQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.mappingPriority != nil {
		parameterAddToQuery(localVarQueryParams, "mapping_priority", r.mappingPriority, "")
	}
	if r.responseFormat != nil {
		parameterAddToQuery(localVarQueryParams, "response_format", r.responseFormat, "")
	}
	if r.return404OnEmptyResponse != nil {
		parameterAddToQuery(localVarQueryParams, "return_404_on_empty_response", r.return404OnEmptyResponse, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key_header"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key_query"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 502 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSpotV1HistoricalTradesHourRequest struct {
	ctx context.Context
	ApiService *SpotApiService
	market *string
	instrument *string
	hourTs *int32
	mappingPriority *string
	responseFormat *string
	return404OnEmptyResponse *bool
}

// The exchange to obtain data from
func (r ApiSpotV1HistoricalTradesHourRequest) Market(market string) ApiSpotV1HistoricalTradesHourRequest {
	r.market = &market
	return r
}

// The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
func (r ApiSpotV1HistoricalTradesHourRequest) Instrument(instrument string) ApiSpotV1HistoricalTradesHourRequest {
	r.instrument = &instrument
	return r
}

// Unix timestamp in seconds for the hour containing the trades you are interested in. You can pass any timestamp within an hour but we will round it down the the full hour timestmap and return all trades in that hour.
func (r ApiSpotV1HistoricalTradesHourRequest) HourTs(hourTs int32) ApiSpotV1HistoricalTradesHourRequest {
	r.hourTs = &hourTs
	return r
}

// The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
func (r ApiSpotV1HistoricalTradesHourRequest) MappingPriority(mappingPriority string) ApiSpotV1HistoricalTradesHourRequest {
	r.mappingPriority = &mappingPriority
	return r
}

// The format of the data response in uppercase. It can be one of the following: JSON,CSV
func (r ApiSpotV1HistoricalTradesHourRequest) ResponseFormat(responseFormat string) ApiSpotV1HistoricalTradesHourRequest {
	r.responseFormat = &responseFormat
	return r
}

// If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.
func (r ApiSpotV1HistoricalTradesHourRequest) Return404OnEmptyResponse(return404OnEmptyResponse bool) ApiSpotV1HistoricalTradesHourRequest {
	r.return404OnEmptyResponse = &return404OnEmptyResponse
	return r
}

func (r ApiSpotV1HistoricalTradesHourRequest) Execute() (*SPOTINSTRUMENTTRADERESPONSE, *http.Response, error) {
	return r.ApiService.SpotV1HistoricalTradesHourExecute(r)
}

/*
SpotV1HistoricalTradesHour Method for SpotV1HistoricalTradesHour

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSpotV1HistoricalTradesHourRequest
*/
func (a *SpotApiService) SpotV1HistoricalTradesHour(ctx context.Context) ApiSpotV1HistoricalTradesHourRequest {
	return ApiSpotV1HistoricalTradesHourRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SPOTINSTRUMENTTRADERESPONSE
func (a *SpotApiService) SpotV1HistoricalTradesHourExecute(r ApiSpotV1HistoricalTradesHourRequest) (*SPOTINSTRUMENTTRADERESPONSE, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SPOTINSTRUMENTTRADERESPONSE
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SpotApiService.SpotV1HistoricalTradesHour")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/spot/v1/historical/trades/hour"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.market == nil {
		return localVarReturnValue, nil, reportError("market is required and must be specified")
	}
	if strlen(*r.market) < 2 {
		return localVarReturnValue, nil, reportError("market must have at least 2 elements")
	}
	if strlen(*r.market) > 30 {
		return localVarReturnValue, nil, reportError("market must have less than 30 elements")
	}
	if r.instrument == nil {
		return localVarReturnValue, nil, reportError("instrument is required and must be specified")
	}
	if strlen(*r.instrument) < 1 {
		return localVarReturnValue, nil, reportError("instrument must have at least 1 elements")
	}
	if strlen(*r.instrument) > 500 {
		return localVarReturnValue, nil, reportError("instrument must have less than 500 elements")
	}

	parameterAddToQuery(localVarQueryParams, "market", r.market, "")
	parameterAddToQuery(localVarQueryParams, "instrument", r.instrument, "")
	if r.hourTs != nil {
		parameterAddToQuery(localVarQueryParams, "hour_ts", r.hourTs, "")
	}
	if r.mappingPriority != nil {
		parameterAddToQuery(localVarQueryParams, "mapping_priority", r.mappingPriority, "")
	}
	if r.responseFormat != nil {
		parameterAddToQuery(localVarQueryParams, "response_format", r.responseFormat, "")
	}
	if r.return404OnEmptyResponse != nil {
		parameterAddToQuery(localVarQueryParams, "return_404_on_empty_response", r.return404OnEmptyResponse, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key_header"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key_query"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 502 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSpotV1LatestInstrumentMetadataRequest struct {
	ctx context.Context
	ApiService *SpotApiService
	market *string
	instruments *[]string
	groups *[]string
	mappingPriority *string
}

// The exchange to obtain data from
func (r ApiSpotV1LatestInstrumentMetadataRequest) Market(market string) ApiSpotV1LatestInstrumentMetadataRequest {
	r.market = &market
	return r
}

// A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.
func (r ApiSpotV1LatestInstrumentMetadataRequest) Instruments(instruments []string) ApiSpotV1LatestInstrumentMetadataRequest {
	r.instruments = &instruments
	return r
}

// When requesting metadata entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: STATUS,INTERNAL,GENERAL,MIGRATION,SOURCE
func (r ApiSpotV1LatestInstrumentMetadataRequest) Groups(groups []string) ApiSpotV1LatestInstrumentMetadataRequest {
	r.groups = &groups
	return r
}

// The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
func (r ApiSpotV1LatestInstrumentMetadataRequest) MappingPriority(mappingPriority string) ApiSpotV1LatestInstrumentMetadataRequest {
	r.mappingPriority = &mappingPriority
	return r
}

func (r ApiSpotV1LatestInstrumentMetadataRequest) Execute() (*SPOTINSTRUMENTMETADATARESPONSE, *http.Response, error) {
	return r.ApiService.SpotV1LatestInstrumentMetadataExecute(r)
}

/*
SpotV1LatestInstrumentMetadata Method for SpotV1LatestInstrumentMetadata

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSpotV1LatestInstrumentMetadataRequest
*/
func (a *SpotApiService) SpotV1LatestInstrumentMetadata(ctx context.Context) ApiSpotV1LatestInstrumentMetadataRequest {
	return ApiSpotV1LatestInstrumentMetadataRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SPOTINSTRUMENTMETADATARESPONSE
func (a *SpotApiService) SpotV1LatestInstrumentMetadataExecute(r ApiSpotV1LatestInstrumentMetadataRequest) (*SPOTINSTRUMENTMETADATARESPONSE, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SPOTINSTRUMENTMETADATARESPONSE
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SpotApiService.SpotV1LatestInstrumentMetadata")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/spot/v1/latest/instrument/metadata"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.market == nil {
		return localVarReturnValue, nil, reportError("market is required and must be specified")
	}
	if strlen(*r.market) < 2 {
		return localVarReturnValue, nil, reportError("market must have at least 2 elements")
	}
	if strlen(*r.market) > 30 {
		return localVarReturnValue, nil, reportError("market must have less than 30 elements")
	}
	if r.instruments == nil {
		return localVarReturnValue, nil, reportError("instruments is required and must be specified")
	}
	if len(*r.instruments) < 1 {
		return localVarReturnValue, nil, reportError("instruments must have at least 1 elements")
	}
	if len(*r.instruments) > 25 {
		return localVarReturnValue, nil, reportError("instruments must have less than 25 elements")
	}

	parameterAddToQuery(localVarQueryParams, "market", r.market, "")
	parameterAddToQuery(localVarQueryParams, "instruments", r.instruments, "csv")
	if r.groups != nil {
		parameterAddToQuery(localVarQueryParams, "groups", r.groups, "csv")
	}
	if r.mappingPriority != nil {
		parameterAddToQuery(localVarQueryParams, "mapping_priority", r.mappingPriority, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 502 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSpotV1LatestTickRequest struct {
	ctx context.Context
	ApiService *SpotApiService
	market *string
	instruments *[]string
	groups *[]string
	mappingPriority *string
}

// The exchange to obtain data from
func (r ApiSpotV1LatestTickRequest) Market(market string) ApiSpotV1LatestTickRequest {
	r.market = &market
	return r
}

// A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.
func (r ApiSpotV1LatestTickRequest) Instruments(instruments []string) ApiSpotV1LatestTickRequest {
	r.instruments = &instruments
	return r
}

// When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,LAST_UPDATE,LAST_PROCESSED,TOP_OF_BOOK,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME
func (r ApiSpotV1LatestTickRequest) Groups(groups []string) ApiSpotV1LatestTickRequest {
	r.groups = &groups
	return r
}

// The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
func (r ApiSpotV1LatestTickRequest) MappingPriority(mappingPriority string) ApiSpotV1LatestTickRequest {
	r.mappingPriority = &mappingPriority
	return r
}

func (r ApiSpotV1LatestTickRequest) Execute() (*SPOTINSTRUMENTMARKETDATARESPONSE, *http.Response, error) {
	return r.ApiService.SpotV1LatestTickExecute(r)
}

/*
SpotV1LatestTick Method for SpotV1LatestTick

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSpotV1LatestTickRequest
*/
func (a *SpotApiService) SpotV1LatestTick(ctx context.Context) ApiSpotV1LatestTickRequest {
	return ApiSpotV1LatestTickRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SPOTINSTRUMENTMARKETDATARESPONSE
func (a *SpotApiService) SpotV1LatestTickExecute(r ApiSpotV1LatestTickRequest) (*SPOTINSTRUMENTMARKETDATARESPONSE, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SPOTINSTRUMENTMARKETDATARESPONSE
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SpotApiService.SpotV1LatestTick")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/spot/v1/latest/tick"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.market == nil {
		return localVarReturnValue, nil, reportError("market is required and must be specified")
	}
	if strlen(*r.market) < 2 {
		return localVarReturnValue, nil, reportError("market must have at least 2 elements")
	}
	if strlen(*r.market) > 30 {
		return localVarReturnValue, nil, reportError("market must have less than 30 elements")
	}
	if r.instruments == nil {
		return localVarReturnValue, nil, reportError("instruments is required and must be specified")
	}
	if len(*r.instruments) < 1 {
		return localVarReturnValue, nil, reportError("instruments must have at least 1 elements")
	}
	if len(*r.instruments) > 25 {
		return localVarReturnValue, nil, reportError("instruments must have less than 25 elements")
	}

	parameterAddToQuery(localVarQueryParams, "market", r.market, "")
	parameterAddToQuery(localVarQueryParams, "instruments", r.instruments, "csv")
	if r.groups != nil {
		parameterAddToQuery(localVarQueryParams, "groups", r.groups, "csv")
	}
	if r.mappingPriority != nil {
		parameterAddToQuery(localVarQueryParams, "mapping_priority", r.mappingPriority, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 502 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSpotV1MarketsRequest struct {
	ctx context.Context
	ApiService *SpotApiService
	market *string
}

// The exchange to obtain data from
func (r ApiSpotV1MarketsRequest) Market(market string) ApiSpotV1MarketsRequest {
	r.market = &market
	return r
}

func (r ApiSpotV1MarketsRequest) Execute() (*GENERICRESPONSE, *http.Response, error) {
	return r.ApiService.SpotV1MarketsExecute(r)
}

/*
SpotV1Markets Method for SpotV1Markets

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSpotV1MarketsRequest
*/
func (a *SpotApiService) SpotV1Markets(ctx context.Context) ApiSpotV1MarketsRequest {
	return ApiSpotV1MarketsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GENERICRESPONSE
func (a *SpotApiService) SpotV1MarketsExecute(r ApiSpotV1MarketsRequest) (*GENERICRESPONSE, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GENERICRESPONSE
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SpotApiService.SpotV1Markets")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/spot/v1/markets"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.market != nil {
		parameterAddToQuery(localVarQueryParams, "market", r.market, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 502 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSpotV1MarketsInstrumentsRequest struct {
	ctx context.Context
	ApiService *SpotApiService
	market *string
	instrument *string
	instrumentStatus *[]string
}

// The exchange to obtain data from
func (r ApiSpotV1MarketsInstrumentsRequest) Market(market string) ApiSpotV1MarketsInstrumentsRequest {
	r.market = &market
	return r
}

// The mapped instrument to retrieve on a specific market.
func (r ApiSpotV1MarketsInstrumentsRequest) Instrument(instrument string) ApiSpotV1MarketsInstrumentsRequest {
	r.instrument = &instrument
	return r
}

// The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED
func (r ApiSpotV1MarketsInstrumentsRequest) InstrumentStatus(instrumentStatus []string) ApiSpotV1MarketsInstrumentsRequest {
	r.instrumentStatus = &instrumentStatus
	return r
}

func (r ApiSpotV1MarketsInstrumentsRequest) Execute() (*GENERICRESPONSE, *http.Response, error) {
	return r.ApiService.SpotV1MarketsInstrumentsExecute(r)
}

/*
SpotV1MarketsInstruments Method for SpotV1MarketsInstruments

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSpotV1MarketsInstrumentsRequest
*/
func (a *SpotApiService) SpotV1MarketsInstruments(ctx context.Context) ApiSpotV1MarketsInstrumentsRequest {
	return ApiSpotV1MarketsInstrumentsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GENERICRESPONSE
func (a *SpotApiService) SpotV1MarketsInstrumentsExecute(r ApiSpotV1MarketsInstrumentsRequest) (*GENERICRESPONSE, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GENERICRESPONSE
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SpotApiService.SpotV1MarketsInstruments")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/spot/v1/markets/instruments"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.market != nil {
		parameterAddToQuery(localVarQueryParams, "market", r.market, "")
	}
	if r.instrument != nil {
		parameterAddToQuery(localVarQueryParams, "instrument", r.instrument, "")
	}
	if r.instrumentStatus != nil {
		parameterAddToQuery(localVarQueryParams, "instrument_status", r.instrumentStatus, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 502 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSpotV1MarketsInstrumentsUnmappedRequest struct {
	ctx context.Context
	ApiService *SpotApiService
	market *string
	instrument *string
	instrumentStatus *[]string
}

// The exchange to obtain data from
func (r ApiSpotV1MarketsInstrumentsUnmappedRequest) Market(market string) ApiSpotV1MarketsInstrumentsUnmappedRequest {
	r.market = &market
	return r
}

// The unmapped instrument to retrieve on a specific market.
func (r ApiSpotV1MarketsInstrumentsUnmappedRequest) Instrument(instrument string) ApiSpotV1MarketsInstrumentsUnmappedRequest {
	r.instrument = &instrument
	return r
}

// The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED
func (r ApiSpotV1MarketsInstrumentsUnmappedRequest) InstrumentStatus(instrumentStatus []string) ApiSpotV1MarketsInstrumentsUnmappedRequest {
	r.instrumentStatus = &instrumentStatus
	return r
}

func (r ApiSpotV1MarketsInstrumentsUnmappedRequest) Execute() (*GENERICRESPONSE, *http.Response, error) {
	return r.ApiService.SpotV1MarketsInstrumentsUnmappedExecute(r)
}

/*
SpotV1MarketsInstrumentsUnmapped Method for SpotV1MarketsInstrumentsUnmapped

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSpotV1MarketsInstrumentsUnmappedRequest
*/
func (a *SpotApiService) SpotV1MarketsInstrumentsUnmapped(ctx context.Context) ApiSpotV1MarketsInstrumentsUnmappedRequest {
	return ApiSpotV1MarketsInstrumentsUnmappedRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GENERICRESPONSE
func (a *SpotApiService) SpotV1MarketsInstrumentsUnmappedExecute(r ApiSpotV1MarketsInstrumentsUnmappedRequest) (*GENERICRESPONSE, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GENERICRESPONSE
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SpotApiService.SpotV1MarketsInstrumentsUnmapped")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/spot/v1/markets/instruments/unmapped"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.market != nil {
		parameterAddToQuery(localVarQueryParams, "market", r.market, "")
	}
	if r.instrument != nil {
		parameterAddToQuery(localVarQueryParams, "instrument", r.instrument, "")
	}
	if r.instrumentStatus != nil {
		parameterAddToQuery(localVarQueryParams, "instrument_status", r.instrumentStatus, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 502 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
