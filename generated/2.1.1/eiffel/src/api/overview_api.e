note
 description:"[
		CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 		CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
  		The version of the OpenAPI document: 2.1.1
 	    Contact: data@cryptocompare.com

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"

class
	OVERVIEW_API

inherit

    API_I


feature -- API Access


	overview_v1_historical_marketcap_all_assets_days (groups: detachable LIST [STRING_32]; limit: INTEGER_32; to_ts: INTEGER_32; aggregate: INTEGER_32; fill: BOOLEAN; response_format: STRING_32): detachable GENERIC_RESPONSE
			-- 
			-- 
			-- 
			-- argument: groups When requesting all market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME (optional, default to [])
			-- 
			-- argument: limit The number of data points to return (optional, default to 30)
			-- 
			-- argument: to_ts Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional, default to null)
			-- 
			-- argument: aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
			-- 
			-- argument: fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
			-- 
			-- argument: response_format The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
			-- 
			-- 
			-- Result GENERIC_RESPONSE
		require
			limit_is_less_or_equal_than: limit <= 2000
     		limit_is_greater_or_equal_than: limit >= 1
			aggregate_is_less_or_equal_than: aggregate <= 30
     		aggregate_is_greater_or_equal_than: aggregate >= 1
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/overview/v1/historical/marketcap/all/assets/days"
			l_request.fill_query_params(api_client.parameter_to_tuple("csv", "groups", groups));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "to_ts", to_ts));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "aggregate", aggregate));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fill", fill));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "response_format", response_format));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { GENERIC_RESPONSE } l_response.data ({ GENERIC_RESPONSE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	overview_v1_historical_marketcap_all_assets_hours (groups: detachable LIST [STRING_32]; limit: INTEGER_32; to_ts: INTEGER_32; aggregate: INTEGER_32; fill: BOOLEAN; response_format: STRING_32): detachable GENERIC_RESPONSE
			-- 
			-- 
			-- 
			-- argument: groups When requesting all market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME (optional, default to [])
			-- 
			-- argument: limit The number of data points to return (optional, default to 30)
			-- 
			-- argument: to_ts Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional, default to null)
			-- 
			-- argument: aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
			-- 
			-- argument: fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
			-- 
			-- argument: response_format The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
			-- 
			-- 
			-- Result GENERIC_RESPONSE
		require
			limit_is_less_or_equal_than: limit <= 2000
     		limit_is_greater_or_equal_than: limit >= 1
			aggregate_is_less_or_equal_than: aggregate <= 30
     		aggregate_is_greater_or_equal_than: aggregate >= 1
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/overview/v1/historical/marketcap/all/assets/hours"
			l_request.fill_query_params(api_client.parameter_to_tuple("csv", "groups", groups));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "to_ts", to_ts));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "aggregate", aggregate));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fill", fill));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "response_format", response_format));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { GENERIC_RESPONSE } l_response.data ({ GENERIC_RESPONSE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	overview_v1_historical_marketcap_ftw_assets_days (groups: detachable LIST [STRING_32]; limit: INTEGER_32; to_ts: INTEGER_32; aggregate: INTEGER_32; fill: BOOLEAN; response_format: STRING_32): detachable GENERIC_RESPONSE
			-- 
			-- 
			-- 
			-- argument: groups When requesting ftw universe market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME (optional, default to [])
			-- 
			-- argument: limit The number of data points to return (optional, default to 30)
			-- 
			-- argument: to_ts Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional, default to null)
			-- 
			-- argument: aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
			-- 
			-- argument: fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
			-- 
			-- argument: response_format The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
			-- 
			-- 
			-- Result GENERIC_RESPONSE
		require
			limit_is_less_or_equal_than: limit <= 2000
     		limit_is_greater_or_equal_than: limit >= 1
			aggregate_is_less_or_equal_than: aggregate <= 30
     		aggregate_is_greater_or_equal_than: aggregate >= 1
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/overview/v1/historical/marketcap/ftw/assets/days"
			l_request.fill_query_params(api_client.parameter_to_tuple("csv", "groups", groups));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "to_ts", to_ts));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "aggregate", aggregate));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fill", fill));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "response_format", response_format));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { GENERIC_RESPONSE } l_response.data ({ GENERIC_RESPONSE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	overview_v1_historical_marketcap_ftw_assets_hours (groups: detachable LIST [STRING_32]; limit: INTEGER_32; to_ts: INTEGER_32; aggregate: INTEGER_32; fill: BOOLEAN; response_format: STRING_32): detachable GENERIC_RESPONSE
			-- 
			-- 
			-- 
			-- argument: groups When requesting ftw universe market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME (optional, default to [])
			-- 
			-- argument: limit The number of data points to return (optional, default to 30)
			-- 
			-- argument: to_ts Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional, default to null)
			-- 
			-- argument: aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
			-- 
			-- argument: fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
			-- 
			-- argument: response_format The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
			-- 
			-- 
			-- Result GENERIC_RESPONSE
		require
			limit_is_less_or_equal_than: limit <= 2000
     		limit_is_greater_or_equal_than: limit >= 1
			aggregate_is_less_or_equal_than: aggregate <= 30
     		aggregate_is_greater_or_equal_than: aggregate >= 1
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/overview/v1/historical/marketcap/ftw/assets/hours"
			l_request.fill_query_params(api_client.parameter_to_tuple("csv", "groups", groups));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "to_ts", to_ts));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "aggregate", aggregate));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fill", fill));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "response_format", response_format));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { GENERIC_RESPONSE } l_response.data ({ GENERIC_RESPONSE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	overview_v1_latest_marketcap_all_tick (groups: detachable LIST [STRING_32]): detachable GENERIC_RESPONSE
			-- 
			-- 
			-- 
			-- argument: groups When requesting all market cap tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,MOVING_24_HOUR (optional, default to [])
			-- 
			-- 
			-- Result GENERIC_RESPONSE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/overview/v1/latest/marketcap/all/tick"
			l_request.fill_query_params(api_client.parameter_to_tuple("csv", "groups", groups));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { GENERIC_RESPONSE } l_response.data ({ GENERIC_RESPONSE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	overview_v1_latest_marketcap_ftw_tick (groups: detachable LIST [STRING_32]): detachable GENERIC_RESPONSE
			-- 
			-- 
			-- 
			-- argument: groups When requesting ftw universe market cap tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,MOVING_24_HOUR (optional, default to [])
			-- 
			-- 
			-- Result GENERIC_RESPONSE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/overview/v1/latest/marketcap/ftw/tick"
			l_request.fill_query_params(api_client.parameter_to_tuple("csv", "groups", groups));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { GENERIC_RESPONSE } l_response.data ({ GENERIC_RESPONSE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end


end
