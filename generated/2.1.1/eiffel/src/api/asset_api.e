note
 description:"[
		CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 		CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
  		The version of the OpenAPI document: 2.1.1
 	    Contact: data@cryptocompare.com

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"

class
	ASSET_API

inherit

    API_I


feature -- API Access


	asset_v1_data_by_address (address: STRING_32; chain_symbol: STRING_32; groups: STRING_32): detachable GENERIC_RESPONSE
			-- 
			-- 
			-- 
			-- argument: address  (required)
			-- 
			-- argument: chain_symbol  (required)
			-- 
			-- argument: groups  (optional, default to )
			-- 
			-- 
			-- Result GENERIC_RESPONSE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/asset/v1/data/by/address"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "address", address));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "chain_symbol", chain_symbol));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "groups", groups));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { GENERIC_RESPONSE } l_response.data ({ GENERIC_RESPONSE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	asset_v1_data_by_id (asset_id: INTEGER_32; groups: STRING_32): detachable GENERIC_RESPONSE
			-- 
			-- 
			-- 
			-- argument: asset_id The asset id you are interested in (required)
			-- 
			-- argument: groups  (optional, default to )
			-- 
			-- 
			-- Result GENERIC_RESPONSE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/asset/v1/data/by/id"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "asset_id", asset_id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "groups", groups));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { GENERIC_RESPONSE } l_response.data ({ GENERIC_RESPONSE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	asset_v1_data_by_symbol (asset_symbol: STRING_32; groups: STRING_32): detachable GENERIC_RESPONSE
			-- 
			-- 
			-- 
			-- argument: asset_symbol The asset symbol you are interested in (required)
			-- 
			-- argument: groups  (optional, default to )
			-- 
			-- 
			-- Result GENERIC_RESPONSE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/asset/v1/data/by/symbol"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "asset_symbol", asset_symbol));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "groups", groups));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { GENERIC_RESPONSE } l_response.data ({ GENERIC_RESPONSE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	asset_v1_top_list (page: INTEGER_32; page_size: INTEGER_32; asset_type: STRING_32; sort_by: STRING_32; sort_direction: STRING_32; groups: STRING_32): detachable GENERIC_RESPONSE
			-- 
			-- 
			-- 
			-- argument: page The page number for the request to get {page_size} coins at the time. (optional, default to 1)
			-- 
			-- argument: page_size The number of items returned per page (optional, default to 100)
			-- 
			-- argument: asset_type The asset class/type (optional, default to )
			-- 
			-- argument: sort_by Sort by field ( CREATED_ON,UPDATED_ON,SYMBOL ) (optional, default to CREATED_ON)
			-- 
			-- argument: sort_direction Sort direction ( DESC,ASC ) (optional, default to DESC)
			-- 
			-- argument: groups  (optional, default to )
			-- 
			-- 
			-- Result GENERIC_RESPONSE
		require
			page_is_less_or_equal_than: page <= 100
     		page_is_greater_or_equal_than: page >= 1
			page_size_is_less_or_equal_than: page_size <= 100
     		page_size_is_greater_or_equal_than: page_size >= 10
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/asset/v1/top/list"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "page", page));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "page_size", page_size));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "asset_type", asset_type));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "sort_by", sort_by));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "sort_direction", sort_direction));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "groups", groups));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { GENERIC_RESPONSE } l_response.data ({ GENERIC_RESPONSE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end


end
