note
 description:"[
		CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 		CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
  		The version of the OpenAPI document: 2.1.1
 	    Contact: data@cryptocompare.com

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"

class
	NEWS_API

inherit

    API_I


feature -- API Access


	news_v1_article_list (source_ids: detachable LIST [STRING_32]; lang: STRING_32; categories: detachable LIST [STRING_32]; exclude_categories: detachable LIST [STRING_32]; to_ts: INTEGER_32): detachable GENERIC_RESPONSE
			-- 
			-- 
			-- 
			-- argument: source_ids Get articles from specific sources; either by their ids or keys (optional, default to [""])
			-- 
			-- argument: lang The article Preferred language - English (EN), Portuguese (PT), Espanol (ES) (optional, default to EN)
			-- 
			-- argument: categories News article categories to return (optional, default to [""])
			-- 
			-- argument: exclude_categories News article categories to exclude from results (optional, default to [""])
			-- 
			-- argument: to_ts Articles published on or before this timestamp (optional, default to -1)
			-- 
			-- 
			-- Result GENERIC_RESPONSE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/news/v1/article/list"
			l_request.fill_query_params(api_client.parameter_to_tuple("csv", "source_ids", source_ids));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "lang", lang));
			l_request.fill_query_params(api_client.parameter_to_tuple("csv", "categories", categories));
			l_request.fill_query_params(api_client.parameter_to_tuple("csv", "exclude_categories", exclude_categories));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "to_ts", to_ts));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { GENERIC_RESPONSE } l_response.data ({ GENERIC_RESPONSE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	news_v1_category_list : detachable GENERIC_RESPONSE
			-- 
			-- 
			-- 
			-- 
			-- Result GENERIC_RESPONSE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/news/v1/category/list"


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { GENERIC_RESPONSE } l_response.data ({ GENERIC_RESPONSE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	news_v1_source_list (lang: STRING_32; type: STRING_32; status: STRING_32): detachable GENERIC_RESPONSE
			-- 
			-- 
			-- 
			-- argument: lang The article source Preferred language - English (EN), Portuguese (PT), Espanol (ES) (optional, default to EN)
			-- 
			-- argument: type RSS, API, TWITTER (optional, default to RSS)
			-- 
			-- argument: status The status for the  article source entry. Allowed values: ACTIVE, INACTIVE (optional, default to ACTIVE)
			-- 
			-- 
			-- Result GENERIC_RESPONSE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/news/v1/source/list"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "lang", lang));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "type", type));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "status", status));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { GENERIC_RESPONSE } l_response.data ({ GENERIC_RESPONSE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end


end
