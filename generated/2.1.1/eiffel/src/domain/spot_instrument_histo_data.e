note
 description:"[
		CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 		CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
  		The version of the OpenAPI document: 2.1.1
 	    Contact: data@cryptocompare.com

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class SPOT_INSTRUMENT_HISTO_DATA




feature --Access

    BASE: detachable STRING_32
      -- The mapped from asset (base / symbol/ coin) (e.g. BTC). Only available on instruments that have mapping.
 	CLOSE: INTEGER_32
    	 -- The price of the last trade in this time period. If there were no trades in the time period, the open price will be given.
 	FIRST_TRADE_PRICE: INTEGER_32
    	 -- The price of the first trade in the time period. This is only available when there is at least one trade in the time period.
 	FIRST_TRADE_TIMESTAMP: INTEGER_32
    	 -- The timestamp, in seconds, of the first trade in this time perio. This is only available when there is at least one trade in the time period.
 	HIGH: INTEGER_32
    	 -- The highest trade price in the time period. If there were no trades in the time period, the open price will be given.
 	HIGH_TRADE_PRICE: INTEGER_32
    	 -- The highest value of the trades in the time period. This is only available when there is at least one trade in the time period.
 	HIGH_TRADE_TIMESTAMP: INTEGER_32
    	 -- The timestamp, in seconds, of the highest trade in the time period. This is only available when there is at least one trade in the time period.
    INSTRUMENT: detachable STRING_32
      -- The unmapped instrument ID
 	LAST_TRADE_PRICE: INTEGER_32
    	 -- The last trade price in the time period. This is only available when there is at least one trade in the time period.
 	LAST_TRADE_TIMESTAMP: INTEGER_32
    	 -- The timestamp, in seconds, of the last trade in this time period. This is only available when there is at least one trade in the time period.
 	LOW: INTEGER_32
    	 -- The lowest trade price in the time period. If there were no trades in the time period, the open price will be given.
 	LOW_TRADE_PRICE: INTEGER_32
    	 -- The lowest value of the trades in the time period. This is only available when there is at least one trade in the time period.
 	LOW_TRADE_TIMESTAMP: INTEGER_32
    	 -- The timestamp, in seconds, of the lowest trade in the time period. This is only available when there is at least one trade in the time period.
    MAPPED_INSTRUMENT: detachable STRING_32
      -- The instrument ID, as derived from our mapping rules. This takes the form \"BASE-QUOTE\" (e.g. BTC-USD). Only available on instruments that have been mapped.
    MARKET: detachable STRING_32
      -- The market / exchange under consideration (e.g. gemini, kraken, coinbase, etc).
 	OPEN: INTEGER_32
    	 -- The open price for the historical period, this is based on the closest trade before the period start.
    QUOTE: detachable STRING_32
      -- The mapped to asset (quote / counter symbol / coin) (e.g. USD). Only available on instruments that have mapping.
 	QUOTE_VOLUME: INTEGER_32
    	 -- The sum of all the trade volumes in the To asset (quote/counter symbol/coin) for the time period. If there were no trades in the time period, 0 will be returned.
 	QUOTE_VOLUME_BUY: INTEGER_32
    	 -- The sum of all the BUY trade volumes in the to asset (quote/counter symbol/coin) for the time period.
 	QUOTE_VOLUME_SELL: INTEGER_32
    	 -- The sum of all the SELL trade volumes in the To asset (quote/counter symbol/coin) for the time period.
 	QUOTE_VOLUME_UNKNOWN: INTEGER_32
    	 -- The sum of all the UNKNOWN trade volumes in the To asset (quote/counter symbol/coin) for the time period.
 	TIMESTAMP: INTEGER_32
    	 -- The timestamp in seconds of the beginning of the histo period. For minute it would be every minute at the beginning of the minute, for hour it would be the start of the hour and for daily it is 00:00 GMT.
 	TOTAL_TRADES: INTEGER_32
    	 -- The total number of trades seen in this time period. If there were no trades in the time period, 0 will be returned.
 	TOTAL_TRADES_BUY: INTEGER_32
    	 -- The total number of BUY trades seen in this time period. If there were no trades in the time period, 0 will be returned.
 	TOTAL_TRADES_SELL: INTEGER_32
    	 -- The total number of SELL trades seen in this time period. If there were no trades in the time period, 0 will be returned.
 	TOTAL_TRADES_UNKNOWN: INTEGER_32
    	 -- The total number of UNKNOWN trades seen in this time period. If there were no trades in the time period, 0 will be returned.
    TYPE: detachable STRING_32
      -- The type of the message.
    UNIT: detachable STRING_32
      -- The unit of the historical period update: MINUTE for minute, HOUR for hour and DAY for day.
 	VOLUME: INTEGER_32
    	 -- The sum of all the trade volumes in the from asset (base symbol / coin) for the time period. If there were no trades in the time period, 0 will be returned.
 	VOLUME_BUY: INTEGER_32
    	 -- The sum of all the BUY trade volumes in the from asset (base symbol / coin) for the time period.
 	VOLUME_SELL: INTEGER_32
    	 -- The sum of all the SELL trade volumes in the from asset (base symbol / coin) for the time period.
 	VOLUME_UNKNOWN: INTEGER_32
    	 -- The sum of all the UNKNOWN trade volumes in the from asset (base symbol / coin) for the time period.

feature -- Change Element

    set_BASE (a_name: like BASE)
        -- Set 'BASE' with 'a_name'.
      do
        BASE := a_name
      ensure
        BASE_set: BASE = a_name
      end

    set_CLOSE (a_name: like CLOSE)
        -- Set 'CLOSE' with 'a_name'.
      do
        CLOSE := a_name
      ensure
        CLOSE_set: CLOSE = a_name
      end

    set_FIRST_TRADE_PRICE (a_name: like FIRST_TRADE_PRICE)
        -- Set 'FIRST_TRADE_PRICE' with 'a_name'.
      do
        FIRST_TRADE_PRICE := a_name
      ensure
        FIRST_TRADE_PRICE_set: FIRST_TRADE_PRICE = a_name
      end

    set_FIRST_TRADE_TIMESTAMP (a_name: like FIRST_TRADE_TIMESTAMP)
        -- Set 'FIRST_TRADE_TIMESTAMP' with 'a_name'.
      do
        FIRST_TRADE_TIMESTAMP := a_name
      ensure
        FIRST_TRADE_TIMESTAMP_set: FIRST_TRADE_TIMESTAMP = a_name
      end

    set_HIGH (a_name: like HIGH)
        -- Set 'HIGH' with 'a_name'.
      do
        HIGH := a_name
      ensure
        HIGH_set: HIGH = a_name
      end

    set_HIGH_TRADE_PRICE (a_name: like HIGH_TRADE_PRICE)
        -- Set 'HIGH_TRADE_PRICE' with 'a_name'.
      do
        HIGH_TRADE_PRICE := a_name
      ensure
        HIGH_TRADE_PRICE_set: HIGH_TRADE_PRICE = a_name
      end

    set_HIGH_TRADE_TIMESTAMP (a_name: like HIGH_TRADE_TIMESTAMP)
        -- Set 'HIGH_TRADE_TIMESTAMP' with 'a_name'.
      do
        HIGH_TRADE_TIMESTAMP := a_name
      ensure
        HIGH_TRADE_TIMESTAMP_set: HIGH_TRADE_TIMESTAMP = a_name
      end

    set_INSTRUMENT (a_name: like INSTRUMENT)
        -- Set 'INSTRUMENT' with 'a_name'.
      do
        INSTRUMENT := a_name
      ensure
        INSTRUMENT_set: INSTRUMENT = a_name
      end

    set_LAST_TRADE_PRICE (a_name: like LAST_TRADE_PRICE)
        -- Set 'LAST_TRADE_PRICE' with 'a_name'.
      do
        LAST_TRADE_PRICE := a_name
      ensure
        LAST_TRADE_PRICE_set: LAST_TRADE_PRICE = a_name
      end

    set_LAST_TRADE_TIMESTAMP (a_name: like LAST_TRADE_TIMESTAMP)
        -- Set 'LAST_TRADE_TIMESTAMP' with 'a_name'.
      do
        LAST_TRADE_TIMESTAMP := a_name
      ensure
        LAST_TRADE_TIMESTAMP_set: LAST_TRADE_TIMESTAMP = a_name
      end

    set_LOW (a_name: like LOW)
        -- Set 'LOW' with 'a_name'.
      do
        LOW := a_name
      ensure
        LOW_set: LOW = a_name
      end

    set_LOW_TRADE_PRICE (a_name: like LOW_TRADE_PRICE)
        -- Set 'LOW_TRADE_PRICE' with 'a_name'.
      do
        LOW_TRADE_PRICE := a_name
      ensure
        LOW_TRADE_PRICE_set: LOW_TRADE_PRICE = a_name
      end

    set_LOW_TRADE_TIMESTAMP (a_name: like LOW_TRADE_TIMESTAMP)
        -- Set 'LOW_TRADE_TIMESTAMP' with 'a_name'.
      do
        LOW_TRADE_TIMESTAMP := a_name
      ensure
        LOW_TRADE_TIMESTAMP_set: LOW_TRADE_TIMESTAMP = a_name
      end

    set_MAPPED_INSTRUMENT (a_name: like MAPPED_INSTRUMENT)
        -- Set 'MAPPED_INSTRUMENT' with 'a_name'.
      do
        MAPPED_INSTRUMENT := a_name
      ensure
        MAPPED_INSTRUMENT_set: MAPPED_INSTRUMENT = a_name
      end

    set_MARKET (a_name: like MARKET)
        -- Set 'MARKET' with 'a_name'.
      do
        MARKET := a_name
      ensure
        MARKET_set: MARKET = a_name
      end

    set_OPEN (a_name: like OPEN)
        -- Set 'OPEN' with 'a_name'.
      do
        OPEN := a_name
      ensure
        OPEN_set: OPEN = a_name
      end

    set_QUOTE (a_name: like QUOTE)
        -- Set 'QUOTE' with 'a_name'.
      do
        QUOTE := a_name
      ensure
        QUOTE_set: QUOTE = a_name
      end

    set_QUOTE_VOLUME (a_name: like QUOTE_VOLUME)
        -- Set 'QUOTE_VOLUME' with 'a_name'.
      do
        QUOTE_VOLUME := a_name
      ensure
        QUOTE_VOLUME_set: QUOTE_VOLUME = a_name
      end

    set_QUOTE_VOLUME_BUY (a_name: like QUOTE_VOLUME_BUY)
        -- Set 'QUOTE_VOLUME_BUY' with 'a_name'.
      do
        QUOTE_VOLUME_BUY := a_name
      ensure
        QUOTE_VOLUME_BUY_set: QUOTE_VOLUME_BUY = a_name
      end

    set_QUOTE_VOLUME_SELL (a_name: like QUOTE_VOLUME_SELL)
        -- Set 'QUOTE_VOLUME_SELL' with 'a_name'.
      do
        QUOTE_VOLUME_SELL := a_name
      ensure
        QUOTE_VOLUME_SELL_set: QUOTE_VOLUME_SELL = a_name
      end

    set_QUOTE_VOLUME_UNKNOWN (a_name: like QUOTE_VOLUME_UNKNOWN)
        -- Set 'QUOTE_VOLUME_UNKNOWN' with 'a_name'.
      do
        QUOTE_VOLUME_UNKNOWN := a_name
      ensure
        QUOTE_VOLUME_UNKNOWN_set: QUOTE_VOLUME_UNKNOWN = a_name
      end

    set_TIMESTAMP (a_name: like TIMESTAMP)
        -- Set 'TIMESTAMP' with 'a_name'.
      do
        TIMESTAMP := a_name
      ensure
        TIMESTAMP_set: TIMESTAMP = a_name
      end

    set_TOTAL_TRADES (a_name: like TOTAL_TRADES)
        -- Set 'TOTAL_TRADES' with 'a_name'.
      do
        TOTAL_TRADES := a_name
      ensure
        TOTAL_TRADES_set: TOTAL_TRADES = a_name
      end

    set_TOTAL_TRADES_BUY (a_name: like TOTAL_TRADES_BUY)
        -- Set 'TOTAL_TRADES_BUY' with 'a_name'.
      do
        TOTAL_TRADES_BUY := a_name
      ensure
        TOTAL_TRADES_BUY_set: TOTAL_TRADES_BUY = a_name
      end

    set_TOTAL_TRADES_SELL (a_name: like TOTAL_TRADES_SELL)
        -- Set 'TOTAL_TRADES_SELL' with 'a_name'.
      do
        TOTAL_TRADES_SELL := a_name
      ensure
        TOTAL_TRADES_SELL_set: TOTAL_TRADES_SELL = a_name
      end

    set_TOTAL_TRADES_UNKNOWN (a_name: like TOTAL_TRADES_UNKNOWN)
        -- Set 'TOTAL_TRADES_UNKNOWN' with 'a_name'.
      do
        TOTAL_TRADES_UNKNOWN := a_name
      ensure
        TOTAL_TRADES_UNKNOWN_set: TOTAL_TRADES_UNKNOWN = a_name
      end

    set_TYPE (a_name: like TYPE)
        -- Set 'TYPE' with 'a_name'.
      do
        TYPE := a_name
      ensure
        TYPE_set: TYPE = a_name
      end

    set_UNIT (a_name: like UNIT)
        -- Set 'UNIT' with 'a_name'.
      do
        UNIT := a_name
      ensure
        UNIT_set: UNIT = a_name
      end

    set_VOLUME (a_name: like VOLUME)
        -- Set 'VOLUME' with 'a_name'.
      do
        VOLUME := a_name
      ensure
        VOLUME_set: VOLUME = a_name
      end

    set_VOLUME_BUY (a_name: like VOLUME_BUY)
        -- Set 'VOLUME_BUY' with 'a_name'.
      do
        VOLUME_BUY := a_name
      ensure
        VOLUME_BUY_set: VOLUME_BUY = a_name
      end

    set_VOLUME_SELL (a_name: like VOLUME_SELL)
        -- Set 'VOLUME_SELL' with 'a_name'.
      do
        VOLUME_SELL := a_name
      ensure
        VOLUME_SELL_set: VOLUME_SELL = a_name
      end

    set_VOLUME_UNKNOWN (a_name: like VOLUME_UNKNOWN)
        -- Set 'VOLUME_UNKNOWN' with 'a_name'.
      do
        VOLUME_UNKNOWN := a_name
      ensure
        VOLUME_UNKNOWN_set: VOLUME_UNKNOWN = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass SPOT_INSTRUMENT_HISTO_DATA%N")
        if attached BASE as l_BASE then
          Result.append ("%NBASE:")
          Result.append (l_BASE.out)
          Result.append ("%N")
        end
        if attached CLOSE as l_CLOSE then
          Result.append ("%NCLOSE:")
          Result.append (l_CLOSE.out)
          Result.append ("%N")
        end
        if attached FIRST_TRADE_PRICE as l_FIRST_TRADE_PRICE then
          Result.append ("%NFIRST_TRADE_PRICE:")
          Result.append (l_FIRST_TRADE_PRICE.out)
          Result.append ("%N")
        end
        if attached FIRST_TRADE_TIMESTAMP as l_FIRST_TRADE_TIMESTAMP then
          Result.append ("%NFIRST_TRADE_TIMESTAMP:")
          Result.append (l_FIRST_TRADE_TIMESTAMP.out)
          Result.append ("%N")
        end
        if attached HIGH as l_HIGH then
          Result.append ("%NHIGH:")
          Result.append (l_HIGH.out)
          Result.append ("%N")
        end
        if attached HIGH_TRADE_PRICE as l_HIGH_TRADE_PRICE then
          Result.append ("%NHIGH_TRADE_PRICE:")
          Result.append (l_HIGH_TRADE_PRICE.out)
          Result.append ("%N")
        end
        if attached HIGH_TRADE_TIMESTAMP as l_HIGH_TRADE_TIMESTAMP then
          Result.append ("%NHIGH_TRADE_TIMESTAMP:")
          Result.append (l_HIGH_TRADE_TIMESTAMP.out)
          Result.append ("%N")
        end
        if attached INSTRUMENT as l_INSTRUMENT then
          Result.append ("%NINSTRUMENT:")
          Result.append (l_INSTRUMENT.out)
          Result.append ("%N")
        end
        if attached LAST_TRADE_PRICE as l_LAST_TRADE_PRICE then
          Result.append ("%NLAST_TRADE_PRICE:")
          Result.append (l_LAST_TRADE_PRICE.out)
          Result.append ("%N")
        end
        if attached LAST_TRADE_TIMESTAMP as l_LAST_TRADE_TIMESTAMP then
          Result.append ("%NLAST_TRADE_TIMESTAMP:")
          Result.append (l_LAST_TRADE_TIMESTAMP.out)
          Result.append ("%N")
        end
        if attached LOW as l_LOW then
          Result.append ("%NLOW:")
          Result.append (l_LOW.out)
          Result.append ("%N")
        end
        if attached LOW_TRADE_PRICE as l_LOW_TRADE_PRICE then
          Result.append ("%NLOW_TRADE_PRICE:")
          Result.append (l_LOW_TRADE_PRICE.out)
          Result.append ("%N")
        end
        if attached LOW_TRADE_TIMESTAMP as l_LOW_TRADE_TIMESTAMP then
          Result.append ("%NLOW_TRADE_TIMESTAMP:")
          Result.append (l_LOW_TRADE_TIMESTAMP.out)
          Result.append ("%N")
        end
        if attached MAPPED_INSTRUMENT as l_MAPPED_INSTRUMENT then
          Result.append ("%NMAPPED_INSTRUMENT:")
          Result.append (l_MAPPED_INSTRUMENT.out)
          Result.append ("%N")
        end
        if attached MARKET as l_MARKET then
          Result.append ("%NMARKET:")
          Result.append (l_MARKET.out)
          Result.append ("%N")
        end
        if attached OPEN as l_OPEN then
          Result.append ("%NOPEN:")
          Result.append (l_OPEN.out)
          Result.append ("%N")
        end
        if attached QUOTE as l_QUOTE then
          Result.append ("%NQUOTE:")
          Result.append (l_QUOTE.out)
          Result.append ("%N")
        end
        if attached QUOTE_VOLUME as l_QUOTE_VOLUME then
          Result.append ("%NQUOTE_VOLUME:")
          Result.append (l_QUOTE_VOLUME.out)
          Result.append ("%N")
        end
        if attached QUOTE_VOLUME_BUY as l_QUOTE_VOLUME_BUY then
          Result.append ("%NQUOTE_VOLUME_BUY:")
          Result.append (l_QUOTE_VOLUME_BUY.out)
          Result.append ("%N")
        end
        if attached QUOTE_VOLUME_SELL as l_QUOTE_VOLUME_SELL then
          Result.append ("%NQUOTE_VOLUME_SELL:")
          Result.append (l_QUOTE_VOLUME_SELL.out)
          Result.append ("%N")
        end
        if attached QUOTE_VOLUME_UNKNOWN as l_QUOTE_VOLUME_UNKNOWN then
          Result.append ("%NQUOTE_VOLUME_UNKNOWN:")
          Result.append (l_QUOTE_VOLUME_UNKNOWN.out)
          Result.append ("%N")
        end
        if attached TIMESTAMP as l_TIMESTAMP then
          Result.append ("%NTIMESTAMP:")
          Result.append (l_TIMESTAMP.out)
          Result.append ("%N")
        end
        if attached TOTAL_TRADES as l_TOTAL_TRADES then
          Result.append ("%NTOTAL_TRADES:")
          Result.append (l_TOTAL_TRADES.out)
          Result.append ("%N")
        end
        if attached TOTAL_TRADES_BUY as l_TOTAL_TRADES_BUY then
          Result.append ("%NTOTAL_TRADES_BUY:")
          Result.append (l_TOTAL_TRADES_BUY.out)
          Result.append ("%N")
        end
        if attached TOTAL_TRADES_SELL as l_TOTAL_TRADES_SELL then
          Result.append ("%NTOTAL_TRADES_SELL:")
          Result.append (l_TOTAL_TRADES_SELL.out)
          Result.append ("%N")
        end
        if attached TOTAL_TRADES_UNKNOWN as l_TOTAL_TRADES_UNKNOWN then
          Result.append ("%NTOTAL_TRADES_UNKNOWN:")
          Result.append (l_TOTAL_TRADES_UNKNOWN.out)
          Result.append ("%N")
        end
        if attached TYPE as l_TYPE then
          Result.append ("%NTYPE:")
          Result.append (l_TYPE.out)
          Result.append ("%N")
        end
        if attached UNIT as l_UNIT then
          Result.append ("%NUNIT:")
          Result.append (l_UNIT.out)
          Result.append ("%N")
        end
        if attached VOLUME as l_VOLUME then
          Result.append ("%NVOLUME:")
          Result.append (l_VOLUME.out)
          Result.append ("%N")
        end
        if attached VOLUME_BUY as l_VOLUME_BUY then
          Result.append ("%NVOLUME_BUY:")
          Result.append (l_VOLUME_BUY.out)
          Result.append ("%N")
        end
        if attached VOLUME_SELL as l_VOLUME_SELL then
          Result.append ("%NVOLUME_SELL:")
          Result.append (l_VOLUME_SELL.out)
          Result.append ("%N")
        end
        if attached VOLUME_UNKNOWN as l_VOLUME_UNKNOWN then
          Result.append ("%NVOLUME_UNKNOWN:")
          Result.append (l_VOLUME_UNKNOWN.out)
          Result.append ("%N")
        end
      end
end

