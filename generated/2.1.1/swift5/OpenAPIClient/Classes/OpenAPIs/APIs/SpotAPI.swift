//
// SpotAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class SpotAPI {

    /**
     * enum for parameter mappingPriority
     */
    public enum MappingPriority_spotV1HistoricalDays: String, CaseIterable {
        case mappedFirst = "CHECK_MAPPED_FIRST"
        case unmappedFirst = "CHECK_UNMAPPED_FIRST"
    }

    /**
     * enum for parameter responseFormat
     */
    public enum ResponseFormat_spotV1HistoricalDays: String, CaseIterable {
        case json = "JSON"
        case csv = "CSV"
    }

    /**

     - parameter market: (query) The exchange to obtain data from 
     - parameter instrument: (query) The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. 
     - parameter groups: (query) When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME (optional)
     - parameter limit: (query) The number of data points to return (optional, default to 30)
     - parameter toTs: (query) Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     - parameter aggregate: (query) The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     - parameter fill: (query) Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     - parameter mappingPriority: (query) The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to .checkMappedFirst)
     - parameter responseFormat: (query) The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to .json)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func spotV1HistoricalDays(market: String, instrument: String, groups: [String]? = nil, limit: Int? = nil, toTs: Int? = nil, aggregate: Int? = nil, fill: Bool? = nil, mappingPriority: MappingPriority_spotV1HistoricalDays? = nil, responseFormat: ResponseFormat_spotV1HistoricalDays? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SPOTINSTRUMENTHISTODATARESPONSE?, _ error: Error?) -> Void)) -> RequestTask {
        return spotV1HistoricalDaysWithRequestBuilder(market: market, instrument: instrument, groups: groups, limit: limit, toTs: toTs, aggregate: aggregate, fill: fill, mappingPriority: mappingPriority, responseFormat: responseFormat).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /spot/v1/historical/days
     - parameter market: (query) The exchange to obtain data from 
     - parameter instrument: (query) The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. 
     - parameter groups: (query) When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME (optional)
     - parameter limit: (query) The number of data points to return (optional, default to 30)
     - parameter toTs: (query) Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     - parameter aggregate: (query) The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     - parameter fill: (query) Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     - parameter mappingPriority: (query) The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to .checkMappedFirst)
     - parameter responseFormat: (query) The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to .json)
     - returns: RequestBuilder<SPOTINSTRUMENTHISTODATARESPONSE> 
     */
    open class func spotV1HistoricalDaysWithRequestBuilder(market: String, instrument: String, groups: [String]? = nil, limit: Int? = nil, toTs: Int? = nil, aggregate: Int? = nil, fill: Bool? = nil, mappingPriority: MappingPriority_spotV1HistoricalDays? = nil, responseFormat: ResponseFormat_spotV1HistoricalDays? = nil) -> RequestBuilder<SPOTINSTRUMENTHISTODATARESPONSE> {
        let localVariablePath = "/spot/v1/historical/days"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "market": (wrappedValue: market.encodeToJSON(), isExplode: false),
            "instrument": (wrappedValue: instrument.encodeToJSON(), isExplode: false),
            "groups": (wrappedValue: groups?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: false),
            "to_ts": (wrappedValue: toTs?.encodeToJSON(), isExplode: false),
            "aggregate": (wrappedValue: aggregate?.encodeToJSON(), isExplode: false),
            "fill": (wrappedValue: fill?.encodeToJSON(), isExplode: false),
            "mapping_priority": (wrappedValue: mappingPriority?.encodeToJSON(), isExplode: false),
            "response_format": (wrappedValue: responseFormat?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SPOTINSTRUMENTHISTODATARESPONSE>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter mappingPriority
     */
    public enum MappingPriority_spotV1HistoricalHours: String, CaseIterable {
        case mappedFirst = "CHECK_MAPPED_FIRST"
        case unmappedFirst = "CHECK_UNMAPPED_FIRST"
    }

    /**
     * enum for parameter responseFormat
     */
    public enum ResponseFormat_spotV1HistoricalHours: String, CaseIterable {
        case json = "JSON"
        case csv = "CSV"
    }

    /**

     - parameter market: (query) The exchange to obtain data from 
     - parameter instrument: (query) The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. 
     - parameter groups: (query) When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME (optional)
     - parameter limit: (query) The number of data points to return (optional, default to 30)
     - parameter toTs: (query) Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     - parameter aggregate: (query) The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     - parameter fill: (query) Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     - parameter mappingPriority: (query) The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to .checkMappedFirst)
     - parameter responseFormat: (query) The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to .json)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func spotV1HistoricalHours(market: String, instrument: String, groups: [String]? = nil, limit: Int? = nil, toTs: Int? = nil, aggregate: Int? = nil, fill: Bool? = nil, mappingPriority: MappingPriority_spotV1HistoricalHours? = nil, responseFormat: ResponseFormat_spotV1HistoricalHours? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SPOTINSTRUMENTHISTODATARESPONSE?, _ error: Error?) -> Void)) -> RequestTask {
        return spotV1HistoricalHoursWithRequestBuilder(market: market, instrument: instrument, groups: groups, limit: limit, toTs: toTs, aggregate: aggregate, fill: fill, mappingPriority: mappingPriority, responseFormat: responseFormat).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /spot/v1/historical/hours
     - parameter market: (query) The exchange to obtain data from 
     - parameter instrument: (query) The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. 
     - parameter groups: (query) When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME (optional)
     - parameter limit: (query) The number of data points to return (optional, default to 30)
     - parameter toTs: (query) Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     - parameter aggregate: (query) The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     - parameter fill: (query) Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     - parameter mappingPriority: (query) The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to .checkMappedFirst)
     - parameter responseFormat: (query) The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to .json)
     - returns: RequestBuilder<SPOTINSTRUMENTHISTODATARESPONSE> 
     */
    open class func spotV1HistoricalHoursWithRequestBuilder(market: String, instrument: String, groups: [String]? = nil, limit: Int? = nil, toTs: Int? = nil, aggregate: Int? = nil, fill: Bool? = nil, mappingPriority: MappingPriority_spotV1HistoricalHours? = nil, responseFormat: ResponseFormat_spotV1HistoricalHours? = nil) -> RequestBuilder<SPOTINSTRUMENTHISTODATARESPONSE> {
        let localVariablePath = "/spot/v1/historical/hours"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "market": (wrappedValue: market.encodeToJSON(), isExplode: false),
            "instrument": (wrappedValue: instrument.encodeToJSON(), isExplode: false),
            "groups": (wrappedValue: groups?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: false),
            "to_ts": (wrappedValue: toTs?.encodeToJSON(), isExplode: false),
            "aggregate": (wrappedValue: aggregate?.encodeToJSON(), isExplode: false),
            "fill": (wrappedValue: fill?.encodeToJSON(), isExplode: false),
            "mapping_priority": (wrappedValue: mappingPriority?.encodeToJSON(), isExplode: false),
            "response_format": (wrappedValue: responseFormat?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SPOTINSTRUMENTHISTODATARESPONSE>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter mappingPriority
     */
    public enum MappingPriority_spotV1HistoricalMinutes: String, CaseIterable {
        case mappedFirst = "CHECK_MAPPED_FIRST"
        case unmappedFirst = "CHECK_UNMAPPED_FIRST"
    }

    /**
     * enum for parameter responseFormat
     */
    public enum ResponseFormat_spotV1HistoricalMinutes: String, CaseIterable {
        case json = "JSON"
        case csv = "CSV"
    }

    /**

     - parameter market: (query) The exchange to obtain data from 
     - parameter instrument: (query) The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. 
     - parameter groups: (query) When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME (optional)
     - parameter limit: (query) The number of data points to return (optional, default to 30)
     - parameter toTs: (query) Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     - parameter aggregate: (query) The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     - parameter fill: (query) Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     - parameter mappingPriority: (query) The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to .checkMappedFirst)
     - parameter responseFormat: (query) The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to .json)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func spotV1HistoricalMinutes(market: String, instrument: String, groups: [String]? = nil, limit: Int? = nil, toTs: Int? = nil, aggregate: Int? = nil, fill: Bool? = nil, mappingPriority: MappingPriority_spotV1HistoricalMinutes? = nil, responseFormat: ResponseFormat_spotV1HistoricalMinutes? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SPOTINSTRUMENTHISTODATARESPONSE?, _ error: Error?) -> Void)) -> RequestTask {
        return spotV1HistoricalMinutesWithRequestBuilder(market: market, instrument: instrument, groups: groups, limit: limit, toTs: toTs, aggregate: aggregate, fill: fill, mappingPriority: mappingPriority, responseFormat: responseFormat).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /spot/v1/historical/minutes
     - parameter market: (query) The exchange to obtain data from 
     - parameter instrument: (query) The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. 
     - parameter groups: (query) When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME (optional)
     - parameter limit: (query) The number of data points to return (optional, default to 30)
     - parameter toTs: (query) Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     - parameter aggregate: (query) The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     - parameter fill: (query) Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     - parameter mappingPriority: (query) The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to .checkMappedFirst)
     - parameter responseFormat: (query) The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to .json)
     - returns: RequestBuilder<SPOTINSTRUMENTHISTODATARESPONSE> 
     */
    open class func spotV1HistoricalMinutesWithRequestBuilder(market: String, instrument: String, groups: [String]? = nil, limit: Int? = nil, toTs: Int? = nil, aggregate: Int? = nil, fill: Bool? = nil, mappingPriority: MappingPriority_spotV1HistoricalMinutes? = nil, responseFormat: ResponseFormat_spotV1HistoricalMinutes? = nil) -> RequestBuilder<SPOTINSTRUMENTHISTODATARESPONSE> {
        let localVariablePath = "/spot/v1/historical/minutes"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "market": (wrappedValue: market.encodeToJSON(), isExplode: false),
            "instrument": (wrappedValue: instrument.encodeToJSON(), isExplode: false),
            "groups": (wrappedValue: groups?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: false),
            "to_ts": (wrappedValue: toTs?.encodeToJSON(), isExplode: false),
            "aggregate": (wrappedValue: aggregate?.encodeToJSON(), isExplode: false),
            "fill": (wrappedValue: fill?.encodeToJSON(), isExplode: false),
            "mapping_priority": (wrappedValue: mappingPriority?.encodeToJSON(), isExplode: false),
            "response_format": (wrappedValue: responseFormat?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SPOTINSTRUMENTHISTODATARESPONSE>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter mappingPriority
     */
    public enum MappingPriority_spotV1HistoricalOrderbookL2SnapshotMinute: String, CaseIterable {
        case mappedFirst = "CHECK_MAPPED_FIRST"
        case unmappedFirst = "CHECK_UNMAPPED_FIRST"
    }

    /**
     * enum for parameter responseFormat
     */
    public enum ResponseFormat_spotV1HistoricalOrderbookL2SnapshotMinute: String, CaseIterable {
        case json = "JSON"
        case csv = "CSV"
    }

    /**

     - parameter market: (query) The exchange to obtain data from 
     - parameter instrument: (query) The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. 
     - parameter minuteTs: (query) Unix timestamp in seconds for the minute of the orderbook snapshot you are interested in. You can pass any timestamp within a minute but we will round it down the the full minute timestmap and return the orderbook l2 snapshot at that minute. 
     - parameter depth: (query) The number of top bids and asks to return. (optional, default to 50)
     - parameter mappingPriority: (query) The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to .checkMappedFirst)
     - parameter responseFormat: (query) The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to .json)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func spotV1HistoricalOrderbookL2SnapshotMinute(market: String, instrument: String, minuteTs: Int, depth: Int? = nil, mappingPriority: MappingPriority_spotV1HistoricalOrderbookL2SnapshotMinute? = nil, responseFormat: ResponseFormat_spotV1HistoricalOrderbookL2SnapshotMinute? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GENERICRESPONSE?, _ error: Error?) -> Void)) -> RequestTask {
        return spotV1HistoricalOrderbookL2SnapshotMinuteWithRequestBuilder(market: market, instrument: instrument, minuteTs: minuteTs, depth: depth, mappingPriority: mappingPriority, responseFormat: responseFormat).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /spot/v1/historical/orderbook/l2/snapshot/minute
     - API Key:
       - type: apiKey authorization (HEADER)
       - name: api_key_header
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: api_key_query
     - parameter market: (query) The exchange to obtain data from 
     - parameter instrument: (query) The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. 
     - parameter minuteTs: (query) Unix timestamp in seconds for the minute of the orderbook snapshot you are interested in. You can pass any timestamp within a minute but we will round it down the the full minute timestmap and return the orderbook l2 snapshot at that minute. 
     - parameter depth: (query) The number of top bids and asks to return. (optional, default to 50)
     - parameter mappingPriority: (query) The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to .checkMappedFirst)
     - parameter responseFormat: (query) The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to .json)
     - returns: RequestBuilder<GENERICRESPONSE> 
     */
    open class func spotV1HistoricalOrderbookL2SnapshotMinuteWithRequestBuilder(market: String, instrument: String, minuteTs: Int, depth: Int? = nil, mappingPriority: MappingPriority_spotV1HistoricalOrderbookL2SnapshotMinute? = nil, responseFormat: ResponseFormat_spotV1HistoricalOrderbookL2SnapshotMinute? = nil) -> RequestBuilder<GENERICRESPONSE> {
        let localVariablePath = "/spot/v1/historical/orderbook/l2/snapshot/minute"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "market": (wrappedValue: market.encodeToJSON(), isExplode: false),
            "instrument": (wrappedValue: instrument.encodeToJSON(), isExplode: false),
            "minute_ts": (wrappedValue: minuteTs.encodeToJSON(), isExplode: false),
            "depth": (wrappedValue: depth?.encodeToJSON(), isExplode: false),
            "mapping_priority": (wrappedValue: mappingPriority?.encodeToJSON(), isExplode: false),
            "response_format": (wrappedValue: responseFormat?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GENERICRESPONSE>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter mappingPriority
     */
    public enum MappingPriority_spotV1HistoricalTrades: String, CaseIterable {
        case mappedFirst = "CHECK_MAPPED_FIRST"
        case unmappedFirst = "CHECK_UNMAPPED_FIRST"
    }

    /**
     * enum for parameter responseFormat
     */
    public enum ResponseFormat_spotV1HistoricalTrades: String, CaseIterable {
        case json = "JSON"
        case csv = "CSV"
    }

    /**

     - parameter market: (query) The exchange to obtain data from 
     - parameter instrument: (query) The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. 
     - parameter afterTs: (query) Unix timestamp in seconds of the earliest trade in the response. (optional)
     - parameter lastCcseq: (query) The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request. (optional, default to 0)
     - parameter limit: (query) The maximum number of trades to return (optional, default to 100)
     - parameter mappingPriority: (query) The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to .checkMappedFirst)
     - parameter responseFormat: (query) The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to .json)
     - parameter return404OnEmptyResponse: (query) If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func spotV1HistoricalTrades(market: String, instrument: String, afterTs: Int? = nil, lastCcseq: Int? = nil, limit: Int? = nil, mappingPriority: MappingPriority_spotV1HistoricalTrades? = nil, responseFormat: ResponseFormat_spotV1HistoricalTrades? = nil, return404OnEmptyResponse: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SPOTINSTRUMENTTRADERESPONSE?, _ error: Error?) -> Void)) -> RequestTask {
        return spotV1HistoricalTradesWithRequestBuilder(market: market, instrument: instrument, afterTs: afterTs, lastCcseq: lastCcseq, limit: limit, mappingPriority: mappingPriority, responseFormat: responseFormat, return404OnEmptyResponse: return404OnEmptyResponse).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /spot/v1/historical/trades
     - API Key:
       - type: apiKey authorization (HEADER)
       - name: api_key_header
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: api_key_query
     - parameter market: (query) The exchange to obtain data from 
     - parameter instrument: (query) The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. 
     - parameter afterTs: (query) Unix timestamp in seconds of the earliest trade in the response. (optional)
     - parameter lastCcseq: (query) The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request. (optional, default to 0)
     - parameter limit: (query) The maximum number of trades to return (optional, default to 100)
     - parameter mappingPriority: (query) The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to .checkMappedFirst)
     - parameter responseFormat: (query) The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to .json)
     - parameter return404OnEmptyResponse: (query) If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)
     - returns: RequestBuilder<SPOTINSTRUMENTTRADERESPONSE> 
     */
    open class func spotV1HistoricalTradesWithRequestBuilder(market: String, instrument: String, afterTs: Int? = nil, lastCcseq: Int? = nil, limit: Int? = nil, mappingPriority: MappingPriority_spotV1HistoricalTrades? = nil, responseFormat: ResponseFormat_spotV1HistoricalTrades? = nil, return404OnEmptyResponse: Bool? = nil) -> RequestBuilder<SPOTINSTRUMENTTRADERESPONSE> {
        let localVariablePath = "/spot/v1/historical/trades"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "market": (wrappedValue: market.encodeToJSON(), isExplode: false),
            "instrument": (wrappedValue: instrument.encodeToJSON(), isExplode: false),
            "after_ts": (wrappedValue: afterTs?.encodeToJSON(), isExplode: false),
            "last_ccseq": (wrappedValue: lastCcseq?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: false),
            "mapping_priority": (wrappedValue: mappingPriority?.encodeToJSON(), isExplode: false),
            "response_format": (wrappedValue: responseFormat?.encodeToJSON(), isExplode: false),
            "return_404_on_empty_response": (wrappedValue: return404OnEmptyResponse?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SPOTINSTRUMENTTRADERESPONSE>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter mappingPriority
     */
    public enum MappingPriority_spotV1HistoricalTradesHour: String, CaseIterable {
        case mappedFirst = "CHECK_MAPPED_FIRST"
        case unmappedFirst = "CHECK_UNMAPPED_FIRST"
    }

    /**
     * enum for parameter responseFormat
     */
    public enum ResponseFormat_spotV1HistoricalTradesHour: String, CaseIterable {
        case json = "JSON"
        case csv = "CSV"
    }

    /**

     - parameter market: (query) The exchange to obtain data from 
     - parameter instrument: (query) The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. 
     - parameter hourTs: (query) Unix timestamp in seconds for the hour containing the trades you are interested in. You can pass any timestamp within an hour but we will round it down the the full hour timestmap and return all trades in that hour. (optional)
     - parameter mappingPriority: (query) The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to .checkMappedFirst)
     - parameter responseFormat: (query) The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to .json)
     - parameter return404OnEmptyResponse: (query) If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func spotV1HistoricalTradesHour(market: String, instrument: String, hourTs: Int? = nil, mappingPriority: MappingPriority_spotV1HistoricalTradesHour? = nil, responseFormat: ResponseFormat_spotV1HistoricalTradesHour? = nil, return404OnEmptyResponse: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SPOTINSTRUMENTTRADERESPONSE?, _ error: Error?) -> Void)) -> RequestTask {
        return spotV1HistoricalTradesHourWithRequestBuilder(market: market, instrument: instrument, hourTs: hourTs, mappingPriority: mappingPriority, responseFormat: responseFormat, return404OnEmptyResponse: return404OnEmptyResponse).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /spot/v1/historical/trades/hour
     - API Key:
       - type: apiKey authorization (HEADER)
       - name: api_key_header
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: api_key_query
     - parameter market: (query) The exchange to obtain data from 
     - parameter instrument: (query) The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. 
     - parameter hourTs: (query) Unix timestamp in seconds for the hour containing the trades you are interested in. You can pass any timestamp within an hour but we will round it down the the full hour timestmap and return all trades in that hour. (optional)
     - parameter mappingPriority: (query) The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to .checkMappedFirst)
     - parameter responseFormat: (query) The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to .json)
     - parameter return404OnEmptyResponse: (query) If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)
     - returns: RequestBuilder<SPOTINSTRUMENTTRADERESPONSE> 
     */
    open class func spotV1HistoricalTradesHourWithRequestBuilder(market: String, instrument: String, hourTs: Int? = nil, mappingPriority: MappingPriority_spotV1HistoricalTradesHour? = nil, responseFormat: ResponseFormat_spotV1HistoricalTradesHour? = nil, return404OnEmptyResponse: Bool? = nil) -> RequestBuilder<SPOTINSTRUMENTTRADERESPONSE> {
        let localVariablePath = "/spot/v1/historical/trades/hour"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "market": (wrappedValue: market.encodeToJSON(), isExplode: false),
            "instrument": (wrappedValue: instrument.encodeToJSON(), isExplode: false),
            "hour_ts": (wrappedValue: hourTs?.encodeToJSON(), isExplode: false),
            "mapping_priority": (wrappedValue: mappingPriority?.encodeToJSON(), isExplode: false),
            "response_format": (wrappedValue: responseFormat?.encodeToJSON(), isExplode: false),
            "return_404_on_empty_response": (wrappedValue: return404OnEmptyResponse?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SPOTINSTRUMENTTRADERESPONSE>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter mappingPriority
     */
    public enum MappingPriority_spotV1LatestInstrumentMetadata: String, CaseIterable {
        case mappedFirst = "CHECK_MAPPED_FIRST"
        case unmappedFirst = "CHECK_UNMAPPED_FIRST"
    }

    /**

     - parameter market: (query) The exchange to obtain data from 
     - parameter instruments: (query) A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first. 
     - parameter groups: (query) When requesting metadata entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: STATUS,INTERNAL,GENERAL,MIGRATION,SOURCE (optional)
     - parameter mappingPriority: (query) The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to .checkMappedFirst)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func spotV1LatestInstrumentMetadata(market: String, instruments: [String], groups: [String]? = nil, mappingPriority: MappingPriority_spotV1LatestInstrumentMetadata? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SPOTINSTRUMENTMETADATARESPONSE?, _ error: Error?) -> Void)) -> RequestTask {
        return spotV1LatestInstrumentMetadataWithRequestBuilder(market: market, instruments: instruments, groups: groups, mappingPriority: mappingPriority).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /spot/v1/latest/instrument/metadata
     - parameter market: (query) The exchange to obtain data from 
     - parameter instruments: (query) A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first. 
     - parameter groups: (query) When requesting metadata entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: STATUS,INTERNAL,GENERAL,MIGRATION,SOURCE (optional)
     - parameter mappingPriority: (query) The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to .checkMappedFirst)
     - returns: RequestBuilder<SPOTINSTRUMENTMETADATARESPONSE> 
     */
    open class func spotV1LatestInstrumentMetadataWithRequestBuilder(market: String, instruments: [String], groups: [String]? = nil, mappingPriority: MappingPriority_spotV1LatestInstrumentMetadata? = nil) -> RequestBuilder<SPOTINSTRUMENTMETADATARESPONSE> {
        let localVariablePath = "/spot/v1/latest/instrument/metadata"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "market": (wrappedValue: market.encodeToJSON(), isExplode: false),
            "instruments": (wrappedValue: instruments.encodeToJSON(), isExplode: false),
            "groups": (wrappedValue: groups?.encodeToJSON(), isExplode: false),
            "mapping_priority": (wrappedValue: mappingPriority?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SPOTINSTRUMENTMETADATARESPONSE>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter mappingPriority
     */
    public enum MappingPriority_spotV1LatestTick: String, CaseIterable {
        case mappedFirst = "CHECK_MAPPED_FIRST"
        case unmappedFirst = "CHECK_UNMAPPED_FIRST"
    }

    /**

     - parameter market: (query) The exchange to obtain data from 
     - parameter instruments: (query) A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first. 
     - parameter groups: (query) When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,LAST_UPDATE,LAST_PROCESSED,TOP_OF_BOOK,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME (optional)
     - parameter mappingPriority: (query) The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to .checkMappedFirst)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func spotV1LatestTick(market: String, instruments: [String], groups: [String]? = nil, mappingPriority: MappingPriority_spotV1LatestTick? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SPOTINSTRUMENTMARKETDATARESPONSE?, _ error: Error?) -> Void)) -> RequestTask {
        return spotV1LatestTickWithRequestBuilder(market: market, instruments: instruments, groups: groups, mappingPriority: mappingPriority).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /spot/v1/latest/tick
     - parameter market: (query) The exchange to obtain data from 
     - parameter instruments: (query) A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first. 
     - parameter groups: (query) When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,LAST_UPDATE,LAST_PROCESSED,TOP_OF_BOOK,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME (optional)
     - parameter mappingPriority: (query) The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to .checkMappedFirst)
     - returns: RequestBuilder<SPOTINSTRUMENTMARKETDATARESPONSE> 
     */
    open class func spotV1LatestTickWithRequestBuilder(market: String, instruments: [String], groups: [String]? = nil, mappingPriority: MappingPriority_spotV1LatestTick? = nil) -> RequestBuilder<SPOTINSTRUMENTMARKETDATARESPONSE> {
        let localVariablePath = "/spot/v1/latest/tick"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "market": (wrappedValue: market.encodeToJSON(), isExplode: false),
            "instruments": (wrappedValue: instruments.encodeToJSON(), isExplode: false),
            "groups": (wrappedValue: groups?.encodeToJSON(), isExplode: false),
            "mapping_priority": (wrappedValue: mappingPriority?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SPOTINSTRUMENTMARKETDATARESPONSE>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter market: (query) The exchange to obtain data from (optional, default to "")
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func spotV1Markets(market: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GENERICRESPONSE?, _ error: Error?) -> Void)) -> RequestTask {
        return spotV1MarketsWithRequestBuilder(market: market).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /spot/v1/markets
     - parameter market: (query) The exchange to obtain data from (optional, default to "")
     - returns: RequestBuilder<GENERICRESPONSE> 
     */
    open class func spotV1MarketsWithRequestBuilder(market: String? = nil) -> RequestBuilder<GENERICRESPONSE> {
        let localVariablePath = "/spot/v1/markets"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "market": (wrappedValue: market?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GENERICRESPONSE>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter instrumentStatus
     */
    public enum InstrumentStatus_spotV1MarketsInstruments: String, CaseIterable {
        case active = "ACTIVE"
        case ignored = "IGNORED"
        case retired = "RETIRED"
        case expired = "EXPIRED"
    }

    /**

     - parameter market: (query) The exchange to obtain data from (optional, default to "")
     - parameter instrument: (query) The mapped instrument to retrieve on a specific market. (optional, default to "")
     - parameter instrumentStatus: (query) The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func spotV1MarketsInstruments(market: String? = nil, instrument: String? = nil, instrumentStatus: [InstrumentStatus_spotV1MarketsInstruments]? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GENERICRESPONSE?, _ error: Error?) -> Void)) -> RequestTask {
        return spotV1MarketsInstrumentsWithRequestBuilder(market: market, instrument: instrument, instrumentStatus: instrumentStatus).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /spot/v1/markets/instruments
     - parameter market: (query) The exchange to obtain data from (optional, default to "")
     - parameter instrument: (query) The mapped instrument to retrieve on a specific market. (optional, default to "")
     - parameter instrumentStatus: (query) The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED (optional)
     - returns: RequestBuilder<GENERICRESPONSE> 
     */
    open class func spotV1MarketsInstrumentsWithRequestBuilder(market: String? = nil, instrument: String? = nil, instrumentStatus: [InstrumentStatus_spotV1MarketsInstruments]? = nil) -> RequestBuilder<GENERICRESPONSE> {
        let localVariablePath = "/spot/v1/markets/instruments"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "market": (wrappedValue: market?.encodeToJSON(), isExplode: false),
            "instrument": (wrappedValue: instrument?.encodeToJSON(), isExplode: false),
            "instrument_status": (wrappedValue: instrumentStatus?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GENERICRESPONSE>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter instrumentStatus
     */
    public enum InstrumentStatus_spotV1MarketsInstrumentsUnmapped: String, CaseIterable {
        case active = "ACTIVE"
        case ignored = "IGNORED"
        case retired = "RETIRED"
        case expired = "EXPIRED"
    }

    /**

     - parameter market: (query) The exchange to obtain data from (optional, default to "")
     - parameter instrument: (query) The unmapped instrument to retrieve on a specific market. (optional, default to "")
     - parameter instrumentStatus: (query) The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func spotV1MarketsInstrumentsUnmapped(market: String? = nil, instrument: String? = nil, instrumentStatus: [InstrumentStatus_spotV1MarketsInstrumentsUnmapped]? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GENERICRESPONSE?, _ error: Error?) -> Void)) -> RequestTask {
        return spotV1MarketsInstrumentsUnmappedWithRequestBuilder(market: market, instrument: instrument, instrumentStatus: instrumentStatus).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /spot/v1/markets/instruments/unmapped
     - parameter market: (query) The exchange to obtain data from (optional, default to "")
     - parameter instrument: (query) The unmapped instrument to retrieve on a specific market. (optional, default to "")
     - parameter instrumentStatus: (query) The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED (optional)
     - returns: RequestBuilder<GENERICRESPONSE> 
     */
    open class func spotV1MarketsInstrumentsUnmappedWithRequestBuilder(market: String? = nil, instrument: String? = nil, instrumentStatus: [InstrumentStatus_spotV1MarketsInstrumentsUnmapped]? = nil) -> RequestBuilder<GENERICRESPONSE> {
        let localVariablePath = "/spot/v1/markets/instruments/unmapped"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "market": (wrappedValue: market?.encodeToJSON(), isExplode: false),
            "instrument": (wrappedValue: instrument?.encodeToJSON(), isExplode: false),
            "instrument_status": (wrappedValue: instrumentStatus?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GENERICRESPONSE>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
