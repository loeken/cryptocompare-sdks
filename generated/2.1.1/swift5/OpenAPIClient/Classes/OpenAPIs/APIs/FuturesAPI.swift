//
// FuturesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class FuturesAPI {

    /**
     * enum for parameter mappingPriority
     */
    public enum MappingPriority_futuresV1HistoricalDays: String, CaseIterable {
        case mappedFirst = "CHECK_MAPPED_FIRST"
        case unmappedFirst = "CHECK_UNMAPPED_FIRST"
    }

    /**
     * enum for parameter responseFormat
     */
    public enum ResponseFormat_futuresV1HistoricalDays: String, CaseIterable {
        case json = "JSON"
        case csv = "CSV"
    }

    /**

     - parameter market: (query) The exchange to obtain data from 
     - parameter instrument: (query) The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. 
     - parameter groups: (query) When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME (optional)
     - parameter limit: (query) The number of data points to return (optional, default to 30)
     - parameter toTs: (query) Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     - parameter aggregate: (query) The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     - parameter fill: (query) Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     - parameter mappingPriority: (query) The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to .checkMappedFirst)
     - parameter responseFormat: (query) The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to .json)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func futuresV1HistoricalDays(market: String, instrument: String, groups: [String]? = nil, limit: Int? = nil, toTs: Int? = nil, aggregate: Int? = nil, fill: Bool? = nil, mappingPriority: MappingPriority_futuresV1HistoricalDays? = nil, responseFormat: ResponseFormat_futuresV1HistoricalDays? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GENERICRESPONSE?, _ error: Error?) -> Void)) -> RequestTask {
        return futuresV1HistoricalDaysWithRequestBuilder(market: market, instrument: instrument, groups: groups, limit: limit, toTs: toTs, aggregate: aggregate, fill: fill, mappingPriority: mappingPriority, responseFormat: responseFormat).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /futures/v1/historical/days
     - parameter market: (query) The exchange to obtain data from 
     - parameter instrument: (query) The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. 
     - parameter groups: (query) When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME (optional)
     - parameter limit: (query) The number of data points to return (optional, default to 30)
     - parameter toTs: (query) Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     - parameter aggregate: (query) The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     - parameter fill: (query) Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     - parameter mappingPriority: (query) The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to .checkMappedFirst)
     - parameter responseFormat: (query) The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to .json)
     - returns: RequestBuilder<GENERICRESPONSE> 
     */
    open class func futuresV1HistoricalDaysWithRequestBuilder(market: String, instrument: String, groups: [String]? = nil, limit: Int? = nil, toTs: Int? = nil, aggregate: Int? = nil, fill: Bool? = nil, mappingPriority: MappingPriority_futuresV1HistoricalDays? = nil, responseFormat: ResponseFormat_futuresV1HistoricalDays? = nil) -> RequestBuilder<GENERICRESPONSE> {
        let localVariablePath = "/futures/v1/historical/days"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "market": (wrappedValue: market.encodeToJSON(), isExplode: false),
            "instrument": (wrappedValue: instrument.encodeToJSON(), isExplode: false),
            "groups": (wrappedValue: groups?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: false),
            "to_ts": (wrappedValue: toTs?.encodeToJSON(), isExplode: false),
            "aggregate": (wrappedValue: aggregate?.encodeToJSON(), isExplode: false),
            "fill": (wrappedValue: fill?.encodeToJSON(), isExplode: false),
            "mapping_priority": (wrappedValue: mappingPriority?.encodeToJSON(), isExplode: false),
            "response_format": (wrappedValue: responseFormat?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GENERICRESPONSE>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter mappingPriority
     */
    public enum MappingPriority_futuresV1HistoricalFundingRateDays: String, CaseIterable {
        case mappedFirst = "CHECK_MAPPED_FIRST"
        case unmappedFirst = "CHECK_UNMAPPED_FIRST"
    }

    /**
     * enum for parameter responseFormat
     */
    public enum ResponseFormat_futuresV1HistoricalFundingRateDays: String, CaseIterable {
        case json = "JSON"
        case csv = "CSV"
    }

    /**

     - parameter market: (query) The exchange to obtain data from 
     - parameter instrument: (query) The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. 
     - parameter groups: (query) When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,OHLC,OHLC_MESSAGE,MESSAGE (optional)
     - parameter limit: (query) The number of data points to return (optional, default to 30)
     - parameter toTs: (query) Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     - parameter aggregate: (query) The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     - parameter fill: (query) Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     - parameter mappingPriority: (query) The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to .checkMappedFirst)
     - parameter responseFormat: (query) The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to .json)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func futuresV1HistoricalFundingRateDays(market: String, instrument: String, groups: [String]? = nil, limit: Int? = nil, toTs: Int? = nil, aggregate: Int? = nil, fill: Bool? = nil, mappingPriority: MappingPriority_futuresV1HistoricalFundingRateDays? = nil, responseFormat: ResponseFormat_futuresV1HistoricalFundingRateDays? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GENERICRESPONSE?, _ error: Error?) -> Void)) -> RequestTask {
        return futuresV1HistoricalFundingRateDaysWithRequestBuilder(market: market, instrument: instrument, groups: groups, limit: limit, toTs: toTs, aggregate: aggregate, fill: fill, mappingPriority: mappingPriority, responseFormat: responseFormat).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /futures/v1/historical/funding-rate/days
     - parameter market: (query) The exchange to obtain data from 
     - parameter instrument: (query) The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. 
     - parameter groups: (query) When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,OHLC,OHLC_MESSAGE,MESSAGE (optional)
     - parameter limit: (query) The number of data points to return (optional, default to 30)
     - parameter toTs: (query) Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     - parameter aggregate: (query) The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     - parameter fill: (query) Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     - parameter mappingPriority: (query) The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to .checkMappedFirst)
     - parameter responseFormat: (query) The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to .json)
     - returns: RequestBuilder<GENERICRESPONSE> 
     */
    open class func futuresV1HistoricalFundingRateDaysWithRequestBuilder(market: String, instrument: String, groups: [String]? = nil, limit: Int? = nil, toTs: Int? = nil, aggregate: Int? = nil, fill: Bool? = nil, mappingPriority: MappingPriority_futuresV1HistoricalFundingRateDays? = nil, responseFormat: ResponseFormat_futuresV1HistoricalFundingRateDays? = nil) -> RequestBuilder<GENERICRESPONSE> {
        let localVariablePath = "/futures/v1/historical/funding-rate/days"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "market": (wrappedValue: market.encodeToJSON(), isExplode: false),
            "instrument": (wrappedValue: instrument.encodeToJSON(), isExplode: false),
            "groups": (wrappedValue: groups?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: false),
            "to_ts": (wrappedValue: toTs?.encodeToJSON(), isExplode: false),
            "aggregate": (wrappedValue: aggregate?.encodeToJSON(), isExplode: false),
            "fill": (wrappedValue: fill?.encodeToJSON(), isExplode: false),
            "mapping_priority": (wrappedValue: mappingPriority?.encodeToJSON(), isExplode: false),
            "response_format": (wrappedValue: responseFormat?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GENERICRESPONSE>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter mappingPriority
     */
    public enum MappingPriority_futuresV1HistoricalFundingRateHours: String, CaseIterable {
        case mappedFirst = "CHECK_MAPPED_FIRST"
        case unmappedFirst = "CHECK_UNMAPPED_FIRST"
    }

    /**
     * enum for parameter responseFormat
     */
    public enum ResponseFormat_futuresV1HistoricalFundingRateHours: String, CaseIterable {
        case json = "JSON"
        case csv = "CSV"
    }

    /**

     - parameter market: (query) The exchange to obtain data from 
     - parameter instrument: (query) The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. 
     - parameter groups: (query) When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,OHLC,OHLC_MESSAGE,MESSAGE (optional)
     - parameter limit: (query) The number of data points to return (optional, default to 30)
     - parameter toTs: (query) Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     - parameter aggregate: (query) The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     - parameter fill: (query) Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     - parameter mappingPriority: (query) The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to .checkMappedFirst)
     - parameter responseFormat: (query) The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to .json)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func futuresV1HistoricalFundingRateHours(market: String, instrument: String, groups: [String]? = nil, limit: Int? = nil, toTs: Int? = nil, aggregate: Int? = nil, fill: Bool? = nil, mappingPriority: MappingPriority_futuresV1HistoricalFundingRateHours? = nil, responseFormat: ResponseFormat_futuresV1HistoricalFundingRateHours? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GENERICRESPONSE?, _ error: Error?) -> Void)) -> RequestTask {
        return futuresV1HistoricalFundingRateHoursWithRequestBuilder(market: market, instrument: instrument, groups: groups, limit: limit, toTs: toTs, aggregate: aggregate, fill: fill, mappingPriority: mappingPriority, responseFormat: responseFormat).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /futures/v1/historical/funding-rate/hours
     - parameter market: (query) The exchange to obtain data from 
     - parameter instrument: (query) The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. 
     - parameter groups: (query) When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,OHLC,OHLC_MESSAGE,MESSAGE (optional)
     - parameter limit: (query) The number of data points to return (optional, default to 30)
     - parameter toTs: (query) Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     - parameter aggregate: (query) The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     - parameter fill: (query) Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     - parameter mappingPriority: (query) The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to .checkMappedFirst)
     - parameter responseFormat: (query) The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to .json)
     - returns: RequestBuilder<GENERICRESPONSE> 
     */
    open class func futuresV1HistoricalFundingRateHoursWithRequestBuilder(market: String, instrument: String, groups: [String]? = nil, limit: Int? = nil, toTs: Int? = nil, aggregate: Int? = nil, fill: Bool? = nil, mappingPriority: MappingPriority_futuresV1HistoricalFundingRateHours? = nil, responseFormat: ResponseFormat_futuresV1HistoricalFundingRateHours? = nil) -> RequestBuilder<GENERICRESPONSE> {
        let localVariablePath = "/futures/v1/historical/funding-rate/hours"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "market": (wrappedValue: market.encodeToJSON(), isExplode: false),
            "instrument": (wrappedValue: instrument.encodeToJSON(), isExplode: false),
            "groups": (wrappedValue: groups?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: false),
            "to_ts": (wrappedValue: toTs?.encodeToJSON(), isExplode: false),
            "aggregate": (wrappedValue: aggregate?.encodeToJSON(), isExplode: false),
            "fill": (wrappedValue: fill?.encodeToJSON(), isExplode: false),
            "mapping_priority": (wrappedValue: mappingPriority?.encodeToJSON(), isExplode: false),
            "response_format": (wrappedValue: responseFormat?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GENERICRESPONSE>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter mappingPriority
     */
    public enum MappingPriority_futuresV1HistoricalFundingRateMessages: String, CaseIterable {
        case mappedFirst = "CHECK_MAPPED_FIRST"
        case unmappedFirst = "CHECK_UNMAPPED_FIRST"
    }

    /**
     * enum for parameter responseFormat
     */
    public enum ResponseFormat_futuresV1HistoricalFundingRateMessages: String, CaseIterable {
        case json = "JSON"
        case csv = "CSV"
    }

    /**

     - parameter market: (query) The exchange to obtain data from 
     - parameter instrument: (query) The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. 
     - parameter afterTs: (query) Unix timestamp in seconds of the earliest funding rate message in the response (optional)
     - parameter lastCcseq: (query) The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request. (optional, default to 0)
     - parameter limit: (query) The maximum number of funding rate messages to return (optional, default to 100)
     - parameter mappingPriority: (query) The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to .checkMappedFirst)
     - parameter responseFormat: (query) The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to .json)
     - parameter return404OnEmptyResponse: (query) If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func futuresV1HistoricalFundingRateMessages(market: String, instrument: String, afterTs: Int? = nil, lastCcseq: Int? = nil, limit: Int? = nil, mappingPriority: MappingPriority_futuresV1HistoricalFundingRateMessages? = nil, responseFormat: ResponseFormat_futuresV1HistoricalFundingRateMessages? = nil, return404OnEmptyResponse: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GENERICRESPONSE?, _ error: Error?) -> Void)) -> RequestTask {
        return futuresV1HistoricalFundingRateMessagesWithRequestBuilder(market: market, instrument: instrument, afterTs: afterTs, lastCcseq: lastCcseq, limit: limit, mappingPriority: mappingPriority, responseFormat: responseFormat, return404OnEmptyResponse: return404OnEmptyResponse).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /futures/v1/historical/funding-rate-messages
     - API Key:
       - type: apiKey authorization (HEADER)
       - name: api_key_header
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: api_key_query
     - parameter market: (query) The exchange to obtain data from 
     - parameter instrument: (query) The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. 
     - parameter afterTs: (query) Unix timestamp in seconds of the earliest funding rate message in the response (optional)
     - parameter lastCcseq: (query) The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request. (optional, default to 0)
     - parameter limit: (query) The maximum number of funding rate messages to return (optional, default to 100)
     - parameter mappingPriority: (query) The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to .checkMappedFirst)
     - parameter responseFormat: (query) The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to .json)
     - parameter return404OnEmptyResponse: (query) If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)
     - returns: RequestBuilder<GENERICRESPONSE> 
     */
    open class func futuresV1HistoricalFundingRateMessagesWithRequestBuilder(market: String, instrument: String, afterTs: Int? = nil, lastCcseq: Int? = nil, limit: Int? = nil, mappingPriority: MappingPriority_futuresV1HistoricalFundingRateMessages? = nil, responseFormat: ResponseFormat_futuresV1HistoricalFundingRateMessages? = nil, return404OnEmptyResponse: Bool? = nil) -> RequestBuilder<GENERICRESPONSE> {
        let localVariablePath = "/futures/v1/historical/funding-rate-messages"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "market": (wrappedValue: market.encodeToJSON(), isExplode: false),
            "instrument": (wrappedValue: instrument.encodeToJSON(), isExplode: false),
            "after_ts": (wrappedValue: afterTs?.encodeToJSON(), isExplode: false),
            "last_ccseq": (wrappedValue: lastCcseq?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: false),
            "mapping_priority": (wrappedValue: mappingPriority?.encodeToJSON(), isExplode: false),
            "response_format": (wrappedValue: responseFormat?.encodeToJSON(), isExplode: false),
            "return_404_on_empty_response": (wrappedValue: return404OnEmptyResponse?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GENERICRESPONSE>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter mappingPriority
     */
    public enum MappingPriority_futuresV1HistoricalFundingRateMessagesHour: String, CaseIterable {
        case mappedFirst = "CHECK_MAPPED_FIRST"
        case unmappedFirst = "CHECK_UNMAPPED_FIRST"
    }

    /**
     * enum for parameter responseFormat
     */
    public enum ResponseFormat_futuresV1HistoricalFundingRateMessagesHour: String, CaseIterable {
        case json = "JSON"
        case csv = "CSV"
    }

    /**

     - parameter market: (query) The exchange to obtain data from 
     - parameter instrument: (query) The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. 
     - parameter hourTs: (query) Unix timestamp in seconds for the hour containing the funding rate updates you are interested in. You can pass any timestamp in the hour but we will round it down the the full hour timestmap and return all funding rate updates in that hour. (optional)
     - parameter mappingPriority: (query) The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to .checkMappedFirst)
     - parameter responseFormat: (query) The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to .json)
     - parameter return404OnEmptyResponse: (query) If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func futuresV1HistoricalFundingRateMessagesHour(market: String, instrument: String, hourTs: Int? = nil, mappingPriority: MappingPriority_futuresV1HistoricalFundingRateMessagesHour? = nil, responseFormat: ResponseFormat_futuresV1HistoricalFundingRateMessagesHour? = nil, return404OnEmptyResponse: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GENERICRESPONSE?, _ error: Error?) -> Void)) -> RequestTask {
        return futuresV1HistoricalFundingRateMessagesHourWithRequestBuilder(market: market, instrument: instrument, hourTs: hourTs, mappingPriority: mappingPriority, responseFormat: responseFormat, return404OnEmptyResponse: return404OnEmptyResponse).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /futures/v1/historical/funding-rate-messages/hour
     - API Key:
       - type: apiKey authorization (HEADER)
       - name: api_key_header
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: api_key_query
     - parameter market: (query) The exchange to obtain data from 
     - parameter instrument: (query) The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. 
     - parameter hourTs: (query) Unix timestamp in seconds for the hour containing the funding rate updates you are interested in. You can pass any timestamp in the hour but we will round it down the the full hour timestmap and return all funding rate updates in that hour. (optional)
     - parameter mappingPriority: (query) The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to .checkMappedFirst)
     - parameter responseFormat: (query) The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to .json)
     - parameter return404OnEmptyResponse: (query) If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)
     - returns: RequestBuilder<GENERICRESPONSE> 
     */
    open class func futuresV1HistoricalFundingRateMessagesHourWithRequestBuilder(market: String, instrument: String, hourTs: Int? = nil, mappingPriority: MappingPriority_futuresV1HistoricalFundingRateMessagesHour? = nil, responseFormat: ResponseFormat_futuresV1HistoricalFundingRateMessagesHour? = nil, return404OnEmptyResponse: Bool? = nil) -> RequestBuilder<GENERICRESPONSE> {
        let localVariablePath = "/futures/v1/historical/funding-rate-messages/hour"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "market": (wrappedValue: market.encodeToJSON(), isExplode: false),
            "instrument": (wrappedValue: instrument.encodeToJSON(), isExplode: false),
            "hour_ts": (wrappedValue: hourTs?.encodeToJSON(), isExplode: false),
            "mapping_priority": (wrappedValue: mappingPriority?.encodeToJSON(), isExplode: false),
            "response_format": (wrappedValue: responseFormat?.encodeToJSON(), isExplode: false),
            "return_404_on_empty_response": (wrappedValue: return404OnEmptyResponse?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GENERICRESPONSE>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter mappingPriority
     */
    public enum MappingPriority_futuresV1HistoricalFundingRateMinutes: String, CaseIterable {
        case mappedFirst = "CHECK_MAPPED_FIRST"
        case unmappedFirst = "CHECK_UNMAPPED_FIRST"
    }

    /**
     * enum for parameter responseFormat
     */
    public enum ResponseFormat_futuresV1HistoricalFundingRateMinutes: String, CaseIterable {
        case json = "JSON"
        case csv = "CSV"
    }

    /**

     - parameter market: (query) The exchange to obtain data from 
     - parameter instrument: (query) The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. 
     - parameter groups: (query) When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,OHLC,OHLC_MESSAGE,MESSAGE (optional)
     - parameter limit: (query) The number of data points to return (optional, default to 30)
     - parameter toTs: (query) Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     - parameter aggregate: (query) The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     - parameter fill: (query) Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     - parameter mappingPriority: (query) The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to .checkMappedFirst)
     - parameter responseFormat: (query) The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to .json)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func futuresV1HistoricalFundingRateMinutes(market: String, instrument: String, groups: [String]? = nil, limit: Int? = nil, toTs: Int? = nil, aggregate: Int? = nil, fill: Bool? = nil, mappingPriority: MappingPriority_futuresV1HistoricalFundingRateMinutes? = nil, responseFormat: ResponseFormat_futuresV1HistoricalFundingRateMinutes? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GENERICRESPONSE?, _ error: Error?) -> Void)) -> RequestTask {
        return futuresV1HistoricalFundingRateMinutesWithRequestBuilder(market: market, instrument: instrument, groups: groups, limit: limit, toTs: toTs, aggregate: aggregate, fill: fill, mappingPriority: mappingPriority, responseFormat: responseFormat).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /futures/v1/historical/funding-rate/minutes
     - parameter market: (query) The exchange to obtain data from 
     - parameter instrument: (query) The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. 
     - parameter groups: (query) When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,OHLC,OHLC_MESSAGE,MESSAGE (optional)
     - parameter limit: (query) The number of data points to return (optional, default to 30)
     - parameter toTs: (query) Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     - parameter aggregate: (query) The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     - parameter fill: (query) Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     - parameter mappingPriority: (query) The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to .checkMappedFirst)
     - parameter responseFormat: (query) The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to .json)
     - returns: RequestBuilder<GENERICRESPONSE> 
     */
    open class func futuresV1HistoricalFundingRateMinutesWithRequestBuilder(market: String, instrument: String, groups: [String]? = nil, limit: Int? = nil, toTs: Int? = nil, aggregate: Int? = nil, fill: Bool? = nil, mappingPriority: MappingPriority_futuresV1HistoricalFundingRateMinutes? = nil, responseFormat: ResponseFormat_futuresV1HistoricalFundingRateMinutes? = nil) -> RequestBuilder<GENERICRESPONSE> {
        let localVariablePath = "/futures/v1/historical/funding-rate/minutes"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "market": (wrappedValue: market.encodeToJSON(), isExplode: false),
            "instrument": (wrappedValue: instrument.encodeToJSON(), isExplode: false),
            "groups": (wrappedValue: groups?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: false),
            "to_ts": (wrappedValue: toTs?.encodeToJSON(), isExplode: false),
            "aggregate": (wrappedValue: aggregate?.encodeToJSON(), isExplode: false),
            "fill": (wrappedValue: fill?.encodeToJSON(), isExplode: false),
            "mapping_priority": (wrappedValue: mappingPriority?.encodeToJSON(), isExplode: false),
            "response_format": (wrappedValue: responseFormat?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GENERICRESPONSE>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter mappingPriority
     */
    public enum MappingPriority_futuresV1HistoricalHours: String, CaseIterable {
        case mappedFirst = "CHECK_MAPPED_FIRST"
        case unmappedFirst = "CHECK_UNMAPPED_FIRST"
    }

    /**
     * enum for parameter responseFormat
     */
    public enum ResponseFormat_futuresV1HistoricalHours: String, CaseIterable {
        case json = "JSON"
        case csv = "CSV"
    }

    /**

     - parameter market: (query) The exchange to obtain data from 
     - parameter instrument: (query) The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. 
     - parameter groups: (query) When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME (optional)
     - parameter limit: (query) The number of data points to return (optional, default to 30)
     - parameter toTs: (query) Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     - parameter aggregate: (query) The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     - parameter fill: (query) Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     - parameter mappingPriority: (query) The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to .checkMappedFirst)
     - parameter responseFormat: (query) The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to .json)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func futuresV1HistoricalHours(market: String, instrument: String, groups: [String]? = nil, limit: Int? = nil, toTs: Int? = nil, aggregate: Int? = nil, fill: Bool? = nil, mappingPriority: MappingPriority_futuresV1HistoricalHours? = nil, responseFormat: ResponseFormat_futuresV1HistoricalHours? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GENERICRESPONSE?, _ error: Error?) -> Void)) -> RequestTask {
        return futuresV1HistoricalHoursWithRequestBuilder(market: market, instrument: instrument, groups: groups, limit: limit, toTs: toTs, aggregate: aggregate, fill: fill, mappingPriority: mappingPriority, responseFormat: responseFormat).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /futures/v1/historical/hours
     - parameter market: (query) The exchange to obtain data from 
     - parameter instrument: (query) The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. 
     - parameter groups: (query) When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME (optional)
     - parameter limit: (query) The number of data points to return (optional, default to 30)
     - parameter toTs: (query) Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     - parameter aggregate: (query) The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     - parameter fill: (query) Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     - parameter mappingPriority: (query) The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to .checkMappedFirst)
     - parameter responseFormat: (query) The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to .json)
     - returns: RequestBuilder<GENERICRESPONSE> 
     */
    open class func futuresV1HistoricalHoursWithRequestBuilder(market: String, instrument: String, groups: [String]? = nil, limit: Int? = nil, toTs: Int? = nil, aggregate: Int? = nil, fill: Bool? = nil, mappingPriority: MappingPriority_futuresV1HistoricalHours? = nil, responseFormat: ResponseFormat_futuresV1HistoricalHours? = nil) -> RequestBuilder<GENERICRESPONSE> {
        let localVariablePath = "/futures/v1/historical/hours"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "market": (wrappedValue: market.encodeToJSON(), isExplode: false),
            "instrument": (wrappedValue: instrument.encodeToJSON(), isExplode: false),
            "groups": (wrappedValue: groups?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: false),
            "to_ts": (wrappedValue: toTs?.encodeToJSON(), isExplode: false),
            "aggregate": (wrappedValue: aggregate?.encodeToJSON(), isExplode: false),
            "fill": (wrappedValue: fill?.encodeToJSON(), isExplode: false),
            "mapping_priority": (wrappedValue: mappingPriority?.encodeToJSON(), isExplode: false),
            "response_format": (wrappedValue: responseFormat?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GENERICRESPONSE>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter mappingPriority
     */
    public enum MappingPriority_futuresV1HistoricalMinutes: String, CaseIterable {
        case mappedFirst = "CHECK_MAPPED_FIRST"
        case unmappedFirst = "CHECK_UNMAPPED_FIRST"
    }

    /**
     * enum for parameter responseFormat
     */
    public enum ResponseFormat_futuresV1HistoricalMinutes: String, CaseIterable {
        case json = "JSON"
        case csv = "CSV"
    }

    /**

     - parameter market: (query) The exchange to obtain data from 
     - parameter instrument: (query) The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. 
     - parameter groups: (query) When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME (optional)
     - parameter limit: (query) The number of data points to return (optional, default to 30)
     - parameter toTs: (query) Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     - parameter aggregate: (query) The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     - parameter fill: (query) Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     - parameter mappingPriority: (query) The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to .checkMappedFirst)
     - parameter responseFormat: (query) The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to .json)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func futuresV1HistoricalMinutes(market: String, instrument: String, groups: [String]? = nil, limit: Int? = nil, toTs: Int? = nil, aggregate: Int? = nil, fill: Bool? = nil, mappingPriority: MappingPriority_futuresV1HistoricalMinutes? = nil, responseFormat: ResponseFormat_futuresV1HistoricalMinutes? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GENERICRESPONSE?, _ error: Error?) -> Void)) -> RequestTask {
        return futuresV1HistoricalMinutesWithRequestBuilder(market: market, instrument: instrument, groups: groups, limit: limit, toTs: toTs, aggregate: aggregate, fill: fill, mappingPriority: mappingPriority, responseFormat: responseFormat).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /futures/v1/historical/minutes
     - parameter market: (query) The exchange to obtain data from 
     - parameter instrument: (query) The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. 
     - parameter groups: (query) When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME (optional)
     - parameter limit: (query) The number of data points to return (optional, default to 30)
     - parameter toTs: (query) Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     - parameter aggregate: (query) The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     - parameter fill: (query) Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     - parameter mappingPriority: (query) The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to .checkMappedFirst)
     - parameter responseFormat: (query) The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to .json)
     - returns: RequestBuilder<GENERICRESPONSE> 
     */
    open class func futuresV1HistoricalMinutesWithRequestBuilder(market: String, instrument: String, groups: [String]? = nil, limit: Int? = nil, toTs: Int? = nil, aggregate: Int? = nil, fill: Bool? = nil, mappingPriority: MappingPriority_futuresV1HistoricalMinutes? = nil, responseFormat: ResponseFormat_futuresV1HistoricalMinutes? = nil) -> RequestBuilder<GENERICRESPONSE> {
        let localVariablePath = "/futures/v1/historical/minutes"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "market": (wrappedValue: market.encodeToJSON(), isExplode: false),
            "instrument": (wrappedValue: instrument.encodeToJSON(), isExplode: false),
            "groups": (wrappedValue: groups?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: false),
            "to_ts": (wrappedValue: toTs?.encodeToJSON(), isExplode: false),
            "aggregate": (wrappedValue: aggregate?.encodeToJSON(), isExplode: false),
            "fill": (wrappedValue: fill?.encodeToJSON(), isExplode: false),
            "mapping_priority": (wrappedValue: mappingPriority?.encodeToJSON(), isExplode: false),
            "response_format": (wrappedValue: responseFormat?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GENERICRESPONSE>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter mappingPriority
     */
    public enum MappingPriority_futuresV1HistoricalOpenInterestDays: String, CaseIterable {
        case mappedFirst = "CHECK_MAPPED_FIRST"
        case unmappedFirst = "CHECK_UNMAPPED_FIRST"
    }

    /**
     * enum for parameter responseFormat
     */
    public enum ResponseFormat_futuresV1HistoricalOpenInterestDays: String, CaseIterable {
        case json = "JSON"
        case csv = "CSV"
    }

    /**

     - parameter market: (query) The exchange to obtain data from 
     - parameter instrument: (query) The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. 
     - parameter groups: (query) When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_MESSAGE,MESSAGE (optional)
     - parameter limit: (query) The number of data points to return (optional, default to 30)
     - parameter toTs: (query) Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     - parameter aggregate: (query) The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     - parameter fill: (query) Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     - parameter mappingPriority: (query) The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to .checkMappedFirst)
     - parameter responseFormat: (query) The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to .json)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func futuresV1HistoricalOpenInterestDays(market: String, instrument: String, groups: [String]? = nil, limit: Int? = nil, toTs: Int? = nil, aggregate: Int? = nil, fill: Bool? = nil, mappingPriority: MappingPriority_futuresV1HistoricalOpenInterestDays? = nil, responseFormat: ResponseFormat_futuresV1HistoricalOpenInterestDays? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GENERICRESPONSE?, _ error: Error?) -> Void)) -> RequestTask {
        return futuresV1HistoricalOpenInterestDaysWithRequestBuilder(market: market, instrument: instrument, groups: groups, limit: limit, toTs: toTs, aggregate: aggregate, fill: fill, mappingPriority: mappingPriority, responseFormat: responseFormat).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /futures/v1/historical/open-interest/days
     - parameter market: (query) The exchange to obtain data from 
     - parameter instrument: (query) The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. 
     - parameter groups: (query) When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_MESSAGE,MESSAGE (optional)
     - parameter limit: (query) The number of data points to return (optional, default to 30)
     - parameter toTs: (query) Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     - parameter aggregate: (query) The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     - parameter fill: (query) Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     - parameter mappingPriority: (query) The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to .checkMappedFirst)
     - parameter responseFormat: (query) The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to .json)
     - returns: RequestBuilder<GENERICRESPONSE> 
     */
    open class func futuresV1HistoricalOpenInterestDaysWithRequestBuilder(market: String, instrument: String, groups: [String]? = nil, limit: Int? = nil, toTs: Int? = nil, aggregate: Int? = nil, fill: Bool? = nil, mappingPriority: MappingPriority_futuresV1HistoricalOpenInterestDays? = nil, responseFormat: ResponseFormat_futuresV1HistoricalOpenInterestDays? = nil) -> RequestBuilder<GENERICRESPONSE> {
        let localVariablePath = "/futures/v1/historical/open-interest/days"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "market": (wrappedValue: market.encodeToJSON(), isExplode: false),
            "instrument": (wrappedValue: instrument.encodeToJSON(), isExplode: false),
            "groups": (wrappedValue: groups?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: false),
            "to_ts": (wrappedValue: toTs?.encodeToJSON(), isExplode: false),
            "aggregate": (wrappedValue: aggregate?.encodeToJSON(), isExplode: false),
            "fill": (wrappedValue: fill?.encodeToJSON(), isExplode: false),
            "mapping_priority": (wrappedValue: mappingPriority?.encodeToJSON(), isExplode: false),
            "response_format": (wrappedValue: responseFormat?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GENERICRESPONSE>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter mappingPriority
     */
    public enum MappingPriority_futuresV1HistoricalOpenInterestHours: String, CaseIterable {
        case mappedFirst = "CHECK_MAPPED_FIRST"
        case unmappedFirst = "CHECK_UNMAPPED_FIRST"
    }

    /**
     * enum for parameter responseFormat
     */
    public enum ResponseFormat_futuresV1HistoricalOpenInterestHours: String, CaseIterable {
        case json = "JSON"
        case csv = "CSV"
    }

    /**

     - parameter market: (query) The exchange to obtain data from 
     - parameter instrument: (query) The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. 
     - parameter groups: (query) When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_MESSAGE,MESSAGE (optional)
     - parameter limit: (query) The number of data points to return (optional, default to 30)
     - parameter toTs: (query) Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     - parameter aggregate: (query) The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     - parameter fill: (query) Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     - parameter mappingPriority: (query) The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to .checkMappedFirst)
     - parameter responseFormat: (query) The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to .json)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func futuresV1HistoricalOpenInterestHours(market: String, instrument: String, groups: [String]? = nil, limit: Int? = nil, toTs: Int? = nil, aggregate: Int? = nil, fill: Bool? = nil, mappingPriority: MappingPriority_futuresV1HistoricalOpenInterestHours? = nil, responseFormat: ResponseFormat_futuresV1HistoricalOpenInterestHours? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GENERICRESPONSE?, _ error: Error?) -> Void)) -> RequestTask {
        return futuresV1HistoricalOpenInterestHoursWithRequestBuilder(market: market, instrument: instrument, groups: groups, limit: limit, toTs: toTs, aggregate: aggregate, fill: fill, mappingPriority: mappingPriority, responseFormat: responseFormat).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /futures/v1/historical/open-interest/hours
     - parameter market: (query) The exchange to obtain data from 
     - parameter instrument: (query) The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. 
     - parameter groups: (query) When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_MESSAGE,MESSAGE (optional)
     - parameter limit: (query) The number of data points to return (optional, default to 30)
     - parameter toTs: (query) Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     - parameter aggregate: (query) The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     - parameter fill: (query) Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     - parameter mappingPriority: (query) The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to .checkMappedFirst)
     - parameter responseFormat: (query) The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to .json)
     - returns: RequestBuilder<GENERICRESPONSE> 
     */
    open class func futuresV1HistoricalOpenInterestHoursWithRequestBuilder(market: String, instrument: String, groups: [String]? = nil, limit: Int? = nil, toTs: Int? = nil, aggregate: Int? = nil, fill: Bool? = nil, mappingPriority: MappingPriority_futuresV1HistoricalOpenInterestHours? = nil, responseFormat: ResponseFormat_futuresV1HistoricalOpenInterestHours? = nil) -> RequestBuilder<GENERICRESPONSE> {
        let localVariablePath = "/futures/v1/historical/open-interest/hours"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "market": (wrappedValue: market.encodeToJSON(), isExplode: false),
            "instrument": (wrappedValue: instrument.encodeToJSON(), isExplode: false),
            "groups": (wrappedValue: groups?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: false),
            "to_ts": (wrappedValue: toTs?.encodeToJSON(), isExplode: false),
            "aggregate": (wrappedValue: aggregate?.encodeToJSON(), isExplode: false),
            "fill": (wrappedValue: fill?.encodeToJSON(), isExplode: false),
            "mapping_priority": (wrappedValue: mappingPriority?.encodeToJSON(), isExplode: false),
            "response_format": (wrappedValue: responseFormat?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GENERICRESPONSE>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter mappingPriority
     */
    public enum MappingPriority_futuresV1HistoricalOpenInterestMessages: String, CaseIterable {
        case mappedFirst = "CHECK_MAPPED_FIRST"
        case unmappedFirst = "CHECK_UNMAPPED_FIRST"
    }

    /**
     * enum for parameter responseFormat
     */
    public enum ResponseFormat_futuresV1HistoricalOpenInterestMessages: String, CaseIterable {
        case json = "JSON"
        case csv = "CSV"
    }

    /**

     - parameter market: (query) The exchange to obtain data from 
     - parameter instrument: (query) The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. 
     - parameter afterTs: (query) Unix timestamp in seconds of the earliest open interest message in the response (optional)
     - parameter lastCcseq: (query) The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request. (optional, default to 0)
     - parameter limit: (query) The maximum number of open interest messages to return (optional, default to 100)
     - parameter mappingPriority: (query) The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to .checkMappedFirst)
     - parameter responseFormat: (query) The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to .json)
     - parameter return404OnEmptyResponse: (query) If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func futuresV1HistoricalOpenInterestMessages(market: String, instrument: String, afterTs: Int? = nil, lastCcseq: Int? = nil, limit: Int? = nil, mappingPriority: MappingPriority_futuresV1HistoricalOpenInterestMessages? = nil, responseFormat: ResponseFormat_futuresV1HistoricalOpenInterestMessages? = nil, return404OnEmptyResponse: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GENERICRESPONSE?, _ error: Error?) -> Void)) -> RequestTask {
        return futuresV1HistoricalOpenInterestMessagesWithRequestBuilder(market: market, instrument: instrument, afterTs: afterTs, lastCcseq: lastCcseq, limit: limit, mappingPriority: mappingPriority, responseFormat: responseFormat, return404OnEmptyResponse: return404OnEmptyResponse).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /futures/v1/historical/open-interest-messages
     - API Key:
       - type: apiKey authorization (HEADER)
       - name: api_key_header
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: api_key_query
     - parameter market: (query) The exchange to obtain data from 
     - parameter instrument: (query) The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. 
     - parameter afterTs: (query) Unix timestamp in seconds of the earliest open interest message in the response (optional)
     - parameter lastCcseq: (query) The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request. (optional, default to 0)
     - parameter limit: (query) The maximum number of open interest messages to return (optional, default to 100)
     - parameter mappingPriority: (query) The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to .checkMappedFirst)
     - parameter responseFormat: (query) The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to .json)
     - parameter return404OnEmptyResponse: (query) If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)
     - returns: RequestBuilder<GENERICRESPONSE> 
     */
    open class func futuresV1HistoricalOpenInterestMessagesWithRequestBuilder(market: String, instrument: String, afterTs: Int? = nil, lastCcseq: Int? = nil, limit: Int? = nil, mappingPriority: MappingPriority_futuresV1HistoricalOpenInterestMessages? = nil, responseFormat: ResponseFormat_futuresV1HistoricalOpenInterestMessages? = nil, return404OnEmptyResponse: Bool? = nil) -> RequestBuilder<GENERICRESPONSE> {
        let localVariablePath = "/futures/v1/historical/open-interest-messages"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "market": (wrappedValue: market.encodeToJSON(), isExplode: false),
            "instrument": (wrappedValue: instrument.encodeToJSON(), isExplode: false),
            "after_ts": (wrappedValue: afterTs?.encodeToJSON(), isExplode: false),
            "last_ccseq": (wrappedValue: lastCcseq?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: false),
            "mapping_priority": (wrappedValue: mappingPriority?.encodeToJSON(), isExplode: false),
            "response_format": (wrappedValue: responseFormat?.encodeToJSON(), isExplode: false),
            "return_404_on_empty_response": (wrappedValue: return404OnEmptyResponse?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GENERICRESPONSE>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter mappingPriority
     */
    public enum MappingPriority_futuresV1HistoricalOpenInterestMessagesHour: String, CaseIterable {
        case mappedFirst = "CHECK_MAPPED_FIRST"
        case unmappedFirst = "CHECK_UNMAPPED_FIRST"
    }

    /**
     * enum for parameter responseFormat
     */
    public enum ResponseFormat_futuresV1HistoricalOpenInterestMessagesHour: String, CaseIterable {
        case json = "JSON"
        case csv = "CSV"
    }

    /**

     - parameter market: (query) The exchange to obtain data from 
     - parameter instrument: (query) The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. 
     - parameter hourTs: (query) Unix timestamp in seconds for the hour containing the open interest updates you are interested in. You can pass any timestamp in the hour but we will round it down the the full hour timestmap and return all open interest updates in that hour. (optional)
     - parameter mappingPriority: (query) The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to .checkMappedFirst)
     - parameter responseFormat: (query) The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to .json)
     - parameter return404OnEmptyResponse: (query) If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func futuresV1HistoricalOpenInterestMessagesHour(market: String, instrument: String, hourTs: Int? = nil, mappingPriority: MappingPriority_futuresV1HistoricalOpenInterestMessagesHour? = nil, responseFormat: ResponseFormat_futuresV1HistoricalOpenInterestMessagesHour? = nil, return404OnEmptyResponse: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GENERICRESPONSE?, _ error: Error?) -> Void)) -> RequestTask {
        return futuresV1HistoricalOpenInterestMessagesHourWithRequestBuilder(market: market, instrument: instrument, hourTs: hourTs, mappingPriority: mappingPriority, responseFormat: responseFormat, return404OnEmptyResponse: return404OnEmptyResponse).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /futures/v1/historical/open-interest-messages/hour
     - API Key:
       - type: apiKey authorization (HEADER)
       - name: api_key_header
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: api_key_query
     - parameter market: (query) The exchange to obtain data from 
     - parameter instrument: (query) The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. 
     - parameter hourTs: (query) Unix timestamp in seconds for the hour containing the open interest updates you are interested in. You can pass any timestamp in the hour but we will round it down the the full hour timestmap and return all open interest updates in that hour. (optional)
     - parameter mappingPriority: (query) The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to .checkMappedFirst)
     - parameter responseFormat: (query) The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to .json)
     - parameter return404OnEmptyResponse: (query) If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)
     - returns: RequestBuilder<GENERICRESPONSE> 
     */
    open class func futuresV1HistoricalOpenInterestMessagesHourWithRequestBuilder(market: String, instrument: String, hourTs: Int? = nil, mappingPriority: MappingPriority_futuresV1HistoricalOpenInterestMessagesHour? = nil, responseFormat: ResponseFormat_futuresV1HistoricalOpenInterestMessagesHour? = nil, return404OnEmptyResponse: Bool? = nil) -> RequestBuilder<GENERICRESPONSE> {
        let localVariablePath = "/futures/v1/historical/open-interest-messages/hour"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "market": (wrappedValue: market.encodeToJSON(), isExplode: false),
            "instrument": (wrappedValue: instrument.encodeToJSON(), isExplode: false),
            "hour_ts": (wrappedValue: hourTs?.encodeToJSON(), isExplode: false),
            "mapping_priority": (wrappedValue: mappingPriority?.encodeToJSON(), isExplode: false),
            "response_format": (wrappedValue: responseFormat?.encodeToJSON(), isExplode: false),
            "return_404_on_empty_response": (wrappedValue: return404OnEmptyResponse?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GENERICRESPONSE>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter mappingPriority
     */
    public enum MappingPriority_futuresV1HistoricalOpenInterestMinutes: String, CaseIterable {
        case mappedFirst = "CHECK_MAPPED_FIRST"
        case unmappedFirst = "CHECK_UNMAPPED_FIRST"
    }

    /**
     * enum for parameter responseFormat
     */
    public enum ResponseFormat_futuresV1HistoricalOpenInterestMinutes: String, CaseIterable {
        case json = "JSON"
        case csv = "CSV"
    }

    /**

     - parameter market: (query) The exchange to obtain data from 
     - parameter instrument: (query) The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. 
     - parameter groups: (query) When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_MESSAGE,MESSAGE (optional)
     - parameter limit: (query) The number of data points to return (optional, default to 30)
     - parameter toTs: (query) Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     - parameter aggregate: (query) The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     - parameter fill: (query) Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     - parameter mappingPriority: (query) The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to .checkMappedFirst)
     - parameter responseFormat: (query) The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to .json)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func futuresV1HistoricalOpenInterestMinutes(market: String, instrument: String, groups: [String]? = nil, limit: Int? = nil, toTs: Int? = nil, aggregate: Int? = nil, fill: Bool? = nil, mappingPriority: MappingPriority_futuresV1HistoricalOpenInterestMinutes? = nil, responseFormat: ResponseFormat_futuresV1HistoricalOpenInterestMinutes? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GENERICRESPONSE?, _ error: Error?) -> Void)) -> RequestTask {
        return futuresV1HistoricalOpenInterestMinutesWithRequestBuilder(market: market, instrument: instrument, groups: groups, limit: limit, toTs: toTs, aggregate: aggregate, fill: fill, mappingPriority: mappingPriority, responseFormat: responseFormat).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /futures/v1/historical/open-interest/minutes
     - parameter market: (query) The exchange to obtain data from 
     - parameter instrument: (query) The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. 
     - parameter groups: (query) When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_MESSAGE,MESSAGE (optional)
     - parameter limit: (query) The number of data points to return (optional, default to 30)
     - parameter toTs: (query) Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     - parameter aggregate: (query) The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     - parameter fill: (query) Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     - parameter mappingPriority: (query) The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to .checkMappedFirst)
     - parameter responseFormat: (query) The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to .json)
     - returns: RequestBuilder<GENERICRESPONSE> 
     */
    open class func futuresV1HistoricalOpenInterestMinutesWithRequestBuilder(market: String, instrument: String, groups: [String]? = nil, limit: Int? = nil, toTs: Int? = nil, aggregate: Int? = nil, fill: Bool? = nil, mappingPriority: MappingPriority_futuresV1HistoricalOpenInterestMinutes? = nil, responseFormat: ResponseFormat_futuresV1HistoricalOpenInterestMinutes? = nil) -> RequestBuilder<GENERICRESPONSE> {
        let localVariablePath = "/futures/v1/historical/open-interest/minutes"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "market": (wrappedValue: market.encodeToJSON(), isExplode: false),
            "instrument": (wrappedValue: instrument.encodeToJSON(), isExplode: false),
            "groups": (wrappedValue: groups?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: false),
            "to_ts": (wrappedValue: toTs?.encodeToJSON(), isExplode: false),
            "aggregate": (wrappedValue: aggregate?.encodeToJSON(), isExplode: false),
            "fill": (wrappedValue: fill?.encodeToJSON(), isExplode: false),
            "mapping_priority": (wrappedValue: mappingPriority?.encodeToJSON(), isExplode: false),
            "response_format": (wrappedValue: responseFormat?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GENERICRESPONSE>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter mappingPriority
     */
    public enum MappingPriority_futuresV1HistoricalTrades: String, CaseIterable {
        case mappedFirst = "CHECK_MAPPED_FIRST"
        case unmappedFirst = "CHECK_UNMAPPED_FIRST"
    }

    /**
     * enum for parameter responseFormat
     */
    public enum ResponseFormat_futuresV1HistoricalTrades: String, CaseIterable {
        case json = "JSON"
        case csv = "CSV"
    }

    /**

     - parameter market: (query) The exchange to obtain data from 
     - parameter instrument: (query) The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. 
     - parameter afterTs: (query) Unix timestamp in seconds of the earliest trade in the response. (optional)
     - parameter lastCcseq: (query) The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request. (optional, default to 0)
     - parameter limit: (query) The maximum number of trades to return (optional, default to 100)
     - parameter mappingPriority: (query) The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to .checkMappedFirst)
     - parameter responseFormat: (query) The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to .json)
     - parameter return404OnEmptyResponse: (query) If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func futuresV1HistoricalTrades(market: String, instrument: String, afterTs: Int? = nil, lastCcseq: Int? = nil, limit: Int? = nil, mappingPriority: MappingPriority_futuresV1HistoricalTrades? = nil, responseFormat: ResponseFormat_futuresV1HistoricalTrades? = nil, return404OnEmptyResponse: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GENERICRESPONSE?, _ error: Error?) -> Void)) -> RequestTask {
        return futuresV1HistoricalTradesWithRequestBuilder(market: market, instrument: instrument, afterTs: afterTs, lastCcseq: lastCcseq, limit: limit, mappingPriority: mappingPriority, responseFormat: responseFormat, return404OnEmptyResponse: return404OnEmptyResponse).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /futures/v1/historical/trades
     - API Key:
       - type: apiKey authorization (HEADER)
       - name: api_key_header
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: api_key_query
     - parameter market: (query) The exchange to obtain data from 
     - parameter instrument: (query) The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. 
     - parameter afterTs: (query) Unix timestamp in seconds of the earliest trade in the response. (optional)
     - parameter lastCcseq: (query) The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request. (optional, default to 0)
     - parameter limit: (query) The maximum number of trades to return (optional, default to 100)
     - parameter mappingPriority: (query) The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to .checkMappedFirst)
     - parameter responseFormat: (query) The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to .json)
     - parameter return404OnEmptyResponse: (query) If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)
     - returns: RequestBuilder<GENERICRESPONSE> 
     */
    open class func futuresV1HistoricalTradesWithRequestBuilder(market: String, instrument: String, afterTs: Int? = nil, lastCcseq: Int? = nil, limit: Int? = nil, mappingPriority: MappingPriority_futuresV1HistoricalTrades? = nil, responseFormat: ResponseFormat_futuresV1HistoricalTrades? = nil, return404OnEmptyResponse: Bool? = nil) -> RequestBuilder<GENERICRESPONSE> {
        let localVariablePath = "/futures/v1/historical/trades"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "market": (wrappedValue: market.encodeToJSON(), isExplode: false),
            "instrument": (wrappedValue: instrument.encodeToJSON(), isExplode: false),
            "after_ts": (wrappedValue: afterTs?.encodeToJSON(), isExplode: false),
            "last_ccseq": (wrappedValue: lastCcseq?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: false),
            "mapping_priority": (wrappedValue: mappingPriority?.encodeToJSON(), isExplode: false),
            "response_format": (wrappedValue: responseFormat?.encodeToJSON(), isExplode: false),
            "return_404_on_empty_response": (wrappedValue: return404OnEmptyResponse?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GENERICRESPONSE>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter mappingPriority
     */
    public enum MappingPriority_futuresV1HistoricalTradesHour: String, CaseIterable {
        case mappedFirst = "CHECK_MAPPED_FIRST"
        case unmappedFirst = "CHECK_UNMAPPED_FIRST"
    }

    /**
     * enum for parameter responseFormat
     */
    public enum ResponseFormat_futuresV1HistoricalTradesHour: String, CaseIterable {
        case json = "JSON"
        case csv = "CSV"
    }

    /**

     - parameter market: (query) The exchange to obtain data from 
     - parameter instrument: (query) The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. 
     - parameter hourTs: (query) Unix timestamp in seconds for the hour containing the trades you are interested in. You can pass any timestamp within an hour but we will round it down the the full hour timestmap and return all trades in that hour. (optional)
     - parameter mappingPriority: (query) The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to .checkMappedFirst)
     - parameter responseFormat: (query) The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to .json)
     - parameter return404OnEmptyResponse: (query) If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func futuresV1HistoricalTradesHour(market: String, instrument: String, hourTs: Int? = nil, mappingPriority: MappingPriority_futuresV1HistoricalTradesHour? = nil, responseFormat: ResponseFormat_futuresV1HistoricalTradesHour? = nil, return404OnEmptyResponse: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GENERICRESPONSE?, _ error: Error?) -> Void)) -> RequestTask {
        return futuresV1HistoricalTradesHourWithRequestBuilder(market: market, instrument: instrument, hourTs: hourTs, mappingPriority: mappingPriority, responseFormat: responseFormat, return404OnEmptyResponse: return404OnEmptyResponse).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /futures/v1/historical/trades/hour
     - API Key:
       - type: apiKey authorization (HEADER)
       - name: api_key_header
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: api_key_query
     - parameter market: (query) The exchange to obtain data from 
     - parameter instrument: (query) The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. 
     - parameter hourTs: (query) Unix timestamp in seconds for the hour containing the trades you are interested in. You can pass any timestamp within an hour but we will round it down the the full hour timestmap and return all trades in that hour. (optional)
     - parameter mappingPriority: (query) The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to .checkMappedFirst)
     - parameter responseFormat: (query) The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to .json)
     - parameter return404OnEmptyResponse: (query) If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)
     - returns: RequestBuilder<GENERICRESPONSE> 
     */
    open class func futuresV1HistoricalTradesHourWithRequestBuilder(market: String, instrument: String, hourTs: Int? = nil, mappingPriority: MappingPriority_futuresV1HistoricalTradesHour? = nil, responseFormat: ResponseFormat_futuresV1HistoricalTradesHour? = nil, return404OnEmptyResponse: Bool? = nil) -> RequestBuilder<GENERICRESPONSE> {
        let localVariablePath = "/futures/v1/historical/trades/hour"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "market": (wrappedValue: market.encodeToJSON(), isExplode: false),
            "instrument": (wrappedValue: instrument.encodeToJSON(), isExplode: false),
            "hour_ts": (wrappedValue: hourTs?.encodeToJSON(), isExplode: false),
            "mapping_priority": (wrappedValue: mappingPriority?.encodeToJSON(), isExplode: false),
            "response_format": (wrappedValue: responseFormat?.encodeToJSON(), isExplode: false),
            "return_404_on_empty_response": (wrappedValue: return404OnEmptyResponse?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GENERICRESPONSE>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter mappingPriority
     */
    public enum MappingPriority_futuresV1LatestFundingRateTick: String, CaseIterable {
        case mappedFirst = "CHECK_MAPPED_FIRST"
        case unmappedFirst = "CHECK_UNMAPPED_FIRST"
    }

    /**

     - parameter market: (query) The exchange to obtain data from 
     - parameter instruments: (query) A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first. 
     - parameter groups: (query) When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME (optional)
     - parameter mappingPriority: (query) The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to .checkMappedFirst)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func futuresV1LatestFundingRateTick(market: String, instruments: [String], groups: [String]? = nil, mappingPriority: MappingPriority_futuresV1LatestFundingRateTick? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GENERICRESPONSE?, _ error: Error?) -> Void)) -> RequestTask {
        return futuresV1LatestFundingRateTickWithRequestBuilder(market: market, instruments: instruments, groups: groups, mappingPriority: mappingPriority).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /futures/v1/latest/funding-rate/tick
     - parameter market: (query) The exchange to obtain data from 
     - parameter instruments: (query) A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first. 
     - parameter groups: (query) When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME (optional)
     - parameter mappingPriority: (query) The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to .checkMappedFirst)
     - returns: RequestBuilder<GENERICRESPONSE> 
     */
    open class func futuresV1LatestFundingRateTickWithRequestBuilder(market: String, instruments: [String], groups: [String]? = nil, mappingPriority: MappingPriority_futuresV1LatestFundingRateTick? = nil) -> RequestBuilder<GENERICRESPONSE> {
        let localVariablePath = "/futures/v1/latest/funding-rate/tick"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "market": (wrappedValue: market.encodeToJSON(), isExplode: false),
            "instruments": (wrappedValue: instruments.encodeToJSON(), isExplode: false),
            "groups": (wrappedValue: groups?.encodeToJSON(), isExplode: false),
            "mapping_priority": (wrappedValue: mappingPriority?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GENERICRESPONSE>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter mappingPriority
     */
    public enum MappingPriority_futuresV1LatestInstrumentMetadata: String, CaseIterable {
        case mappedFirst = "CHECK_MAPPED_FIRST"
        case unmappedFirst = "CHECK_UNMAPPED_FIRST"
    }

    /**

     - parameter market: (query) The exchange to obtain data from 
     - parameter instruments: (query) A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first. 
     - parameter groups: (query) When requesting metadata entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: STATUS,INTERNAL,GENERAL,MIGRATION,SOURCE (optional)
     - parameter mappingPriority: (query) The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to .checkMappedFirst)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func futuresV1LatestInstrumentMetadata(market: String, instruments: [String], groups: [String]? = nil, mappingPriority: MappingPriority_futuresV1LatestInstrumentMetadata? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GENERICRESPONSE?, _ error: Error?) -> Void)) -> RequestTask {
        return futuresV1LatestInstrumentMetadataWithRequestBuilder(market: market, instruments: instruments, groups: groups, mappingPriority: mappingPriority).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /futures/v1/latest/instrument/metadata
     - parameter market: (query) The exchange to obtain data from 
     - parameter instruments: (query) A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first. 
     - parameter groups: (query) When requesting metadata entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: STATUS,INTERNAL,GENERAL,MIGRATION,SOURCE (optional)
     - parameter mappingPriority: (query) The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to .checkMappedFirst)
     - returns: RequestBuilder<GENERICRESPONSE> 
     */
    open class func futuresV1LatestInstrumentMetadataWithRequestBuilder(market: String, instruments: [String], groups: [String]? = nil, mappingPriority: MappingPriority_futuresV1LatestInstrumentMetadata? = nil) -> RequestBuilder<GENERICRESPONSE> {
        let localVariablePath = "/futures/v1/latest/instrument/metadata"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "market": (wrappedValue: market.encodeToJSON(), isExplode: false),
            "instruments": (wrappedValue: instruments.encodeToJSON(), isExplode: false),
            "groups": (wrappedValue: groups?.encodeToJSON(), isExplode: false),
            "mapping_priority": (wrappedValue: mappingPriority?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GENERICRESPONSE>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter mappingPriority
     */
    public enum MappingPriority_futuresV1LatestOpenInterestTick: String, CaseIterable {
        case mappedFirst = "CHECK_MAPPED_FIRST"
        case unmappedFirst = "CHECK_UNMAPPED_FIRST"
    }

    /**

     - parameter market: (query) The exchange to obtain data from 
     - parameter instruments: (query) A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first. 
     - parameter groups: (query) When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME (optional)
     - parameter mappingPriority: (query) The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to .checkMappedFirst)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func futuresV1LatestOpenInterestTick(market: String, instruments: [String], groups: [String]? = nil, mappingPriority: MappingPriority_futuresV1LatestOpenInterestTick? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GENERICRESPONSE?, _ error: Error?) -> Void)) -> RequestTask {
        return futuresV1LatestOpenInterestTickWithRequestBuilder(market: market, instruments: instruments, groups: groups, mappingPriority: mappingPriority).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /futures/v1/latest/open-interest/tick
     - parameter market: (query) The exchange to obtain data from 
     - parameter instruments: (query) A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first. 
     - parameter groups: (query) When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME (optional)
     - parameter mappingPriority: (query) The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to .checkMappedFirst)
     - returns: RequestBuilder<GENERICRESPONSE> 
     */
    open class func futuresV1LatestOpenInterestTickWithRequestBuilder(market: String, instruments: [String], groups: [String]? = nil, mappingPriority: MappingPriority_futuresV1LatestOpenInterestTick? = nil) -> RequestBuilder<GENERICRESPONSE> {
        let localVariablePath = "/futures/v1/latest/open-interest/tick"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "market": (wrappedValue: market.encodeToJSON(), isExplode: false),
            "instruments": (wrappedValue: instruments.encodeToJSON(), isExplode: false),
            "groups": (wrappedValue: groups?.encodeToJSON(), isExplode: false),
            "mapping_priority": (wrappedValue: mappingPriority?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GENERICRESPONSE>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter mappingPriority
     */
    public enum MappingPriority_futuresV1LatestTick: String, CaseIterable {
        case mappedFirst = "CHECK_MAPPED_FIRST"
        case unmappedFirst = "CHECK_UNMAPPED_FIRST"
    }

    /**

     - parameter market: (query) The exchange to obtain data from 
     - parameter instruments: (query) A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first. 
     - parameter groups: (query) When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,LAST_UPDATE,TOP_OF_BOOK,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME (optional)
     - parameter mappingPriority: (query) The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to .checkMappedFirst)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func futuresV1LatestTick(market: String, instruments: [String], groups: [String]? = nil, mappingPriority: MappingPriority_futuresV1LatestTick? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GENERICRESPONSE?, _ error: Error?) -> Void)) -> RequestTask {
        return futuresV1LatestTickWithRequestBuilder(market: market, instruments: instruments, groups: groups, mappingPriority: mappingPriority).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /futures/v1/latest/tick
     - parameter market: (query) The exchange to obtain data from 
     - parameter instruments: (query) A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first. 
     - parameter groups: (query) When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,LAST_UPDATE,TOP_OF_BOOK,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME (optional)
     - parameter mappingPriority: (query) The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to .checkMappedFirst)
     - returns: RequestBuilder<GENERICRESPONSE> 
     */
    open class func futuresV1LatestTickWithRequestBuilder(market: String, instruments: [String], groups: [String]? = nil, mappingPriority: MappingPriority_futuresV1LatestTick? = nil) -> RequestBuilder<GENERICRESPONSE> {
        let localVariablePath = "/futures/v1/latest/tick"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "market": (wrappedValue: market.encodeToJSON(), isExplode: false),
            "instruments": (wrappedValue: instruments.encodeToJSON(), isExplode: false),
            "groups": (wrappedValue: groups?.encodeToJSON(), isExplode: false),
            "mapping_priority": (wrappedValue: mappingPriority?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GENERICRESPONSE>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter market: (query) The exchange to obtain data from (optional, default to "")
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func futuresV1Markets(market: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GENERICRESPONSE?, _ error: Error?) -> Void)) -> RequestTask {
        return futuresV1MarketsWithRequestBuilder(market: market).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /futures/v1/markets
     - parameter market: (query) The exchange to obtain data from (optional, default to "")
     - returns: RequestBuilder<GENERICRESPONSE> 
     */
    open class func futuresV1MarketsWithRequestBuilder(market: String? = nil) -> RequestBuilder<GENERICRESPONSE> {
        let localVariablePath = "/futures/v1/markets"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "market": (wrappedValue: market?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GENERICRESPONSE>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter instrumentStatus
     */
    public enum InstrumentStatus_futuresV1MarketsInstruments: String, CaseIterable {
        case active = "ACTIVE"
        case ignored = "IGNORED"
        case retired = "RETIRED"
        case expired = "EXPIRED"
    }

    /**

     - parameter market: (query) The exchange to obtain data from (optional, default to "")
     - parameter instrument: (query) The mapped instrument to retrieve on a specific market. (optional, default to "")
     - parameter instrumentStatus: (query) The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func futuresV1MarketsInstruments(market: String? = nil, instrument: String? = nil, instrumentStatus: [InstrumentStatus_futuresV1MarketsInstruments]? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GENERICRESPONSE?, _ error: Error?) -> Void)) -> RequestTask {
        return futuresV1MarketsInstrumentsWithRequestBuilder(market: market, instrument: instrument, instrumentStatus: instrumentStatus).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /futures/v1/markets/instruments
     - parameter market: (query) The exchange to obtain data from (optional, default to "")
     - parameter instrument: (query) The mapped instrument to retrieve on a specific market. (optional, default to "")
     - parameter instrumentStatus: (query) The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED (optional)
     - returns: RequestBuilder<GENERICRESPONSE> 
     */
    open class func futuresV1MarketsInstrumentsWithRequestBuilder(market: String? = nil, instrument: String? = nil, instrumentStatus: [InstrumentStatus_futuresV1MarketsInstruments]? = nil) -> RequestBuilder<GENERICRESPONSE> {
        let localVariablePath = "/futures/v1/markets/instruments"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "market": (wrappedValue: market?.encodeToJSON(), isExplode: false),
            "instrument": (wrappedValue: instrument?.encodeToJSON(), isExplode: false),
            "instrument_status": (wrappedValue: instrumentStatus?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GENERICRESPONSE>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter instrumentStatus
     */
    public enum InstrumentStatus_futuresV1MarketsInstrumentsUnmapped: String, CaseIterable {
        case active = "ACTIVE"
        case ignored = "IGNORED"
        case retired = "RETIRED"
        case expired = "EXPIRED"
    }

    /**

     - parameter market: (query) The exchange to obtain data from (optional, default to "")
     - parameter instrument: (query) The unmapped instrument to retrieve on a specific market. (optional, default to "")
     - parameter instrumentStatus: (query) The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func futuresV1MarketsInstrumentsUnmapped(market: String? = nil, instrument: String? = nil, instrumentStatus: [InstrumentStatus_futuresV1MarketsInstrumentsUnmapped]? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GENERICRESPONSE?, _ error: Error?) -> Void)) -> RequestTask {
        return futuresV1MarketsInstrumentsUnmappedWithRequestBuilder(market: market, instrument: instrument, instrumentStatus: instrumentStatus).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /futures/v1/markets/instruments/unmapped
     - parameter market: (query) The exchange to obtain data from (optional, default to "")
     - parameter instrument: (query) The unmapped instrument to retrieve on a specific market. (optional, default to "")
     - parameter instrumentStatus: (query) The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED (optional)
     - returns: RequestBuilder<GENERICRESPONSE> 
     */
    open class func futuresV1MarketsInstrumentsUnmappedWithRequestBuilder(market: String? = nil, instrument: String? = nil, instrumentStatus: [InstrumentStatus_futuresV1MarketsInstrumentsUnmapped]? = nil) -> RequestBuilder<GENERICRESPONSE> {
        let localVariablePath = "/futures/v1/markets/instruments/unmapped"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "market": (wrappedValue: market?.encodeToJSON(), isExplode: false),
            "instrument": (wrappedValue: instrument?.encodeToJSON(), isExplode: false),
            "instrument_status": (wrappedValue: instrumentStatus?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GENERICRESPONSE>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter mappingPriority
     */
    public enum MappingPriority_indexV1HistoricalDays: String, CaseIterable {
        case mappedFirst = "CHECK_MAPPED_FIRST"
        case unmappedFirst = "CHECK_UNMAPPED_FIRST"
    }

    /**
     * enum for parameter responseFormat
     */
    public enum ResponseFormat_indexV1HistoricalDays: String, CaseIterable {
        case json = "JSON"
        case csv = "CSV"
    }

    /**

     - parameter market: (query) The exchange to obtain data from 
     - parameter instrument: (query) The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. 
     - parameter groups: (query) When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME (optional)
     - parameter limit: (query) The number of data points to return (optional, default to 30)
     - parameter toTs: (query) Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     - parameter aggregate: (query) The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     - parameter fill: (query) Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     - parameter mappingPriority: (query) The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to .checkMappedFirst)
     - parameter responseFormat: (query) The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to .json)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func indexV1HistoricalDays(market: String, instrument: String, groups: [String]? = nil, limit: Int? = nil, toTs: Int? = nil, aggregate: Int? = nil, fill: Bool? = nil, mappingPriority: MappingPriority_indexV1HistoricalDays? = nil, responseFormat: ResponseFormat_indexV1HistoricalDays? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GENERICRESPONSE?, _ error: Error?) -> Void)) -> RequestTask {
        return indexV1HistoricalDaysWithRequestBuilder(market: market, instrument: instrument, groups: groups, limit: limit, toTs: toTs, aggregate: aggregate, fill: fill, mappingPriority: mappingPriority, responseFormat: responseFormat).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /index/v1/historical/days
     - parameter market: (query) The exchange to obtain data from 
     - parameter instrument: (query) The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. 
     - parameter groups: (query) When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME (optional)
     - parameter limit: (query) The number of data points to return (optional, default to 30)
     - parameter toTs: (query) Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     - parameter aggregate: (query) The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     - parameter fill: (query) Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     - parameter mappingPriority: (query) The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to .checkMappedFirst)
     - parameter responseFormat: (query) The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to .json)
     - returns: RequestBuilder<GENERICRESPONSE> 
     */
    open class func indexV1HistoricalDaysWithRequestBuilder(market: String, instrument: String, groups: [String]? = nil, limit: Int? = nil, toTs: Int? = nil, aggregate: Int? = nil, fill: Bool? = nil, mappingPriority: MappingPriority_indexV1HistoricalDays? = nil, responseFormat: ResponseFormat_indexV1HistoricalDays? = nil) -> RequestBuilder<GENERICRESPONSE> {
        let localVariablePath = "/index/v1/historical/days"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "market": (wrappedValue: market.encodeToJSON(), isExplode: false),
            "instrument": (wrappedValue: instrument.encodeToJSON(), isExplode: false),
            "groups": (wrappedValue: groups?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: false),
            "to_ts": (wrappedValue: toTs?.encodeToJSON(), isExplode: false),
            "aggregate": (wrappedValue: aggregate?.encodeToJSON(), isExplode: false),
            "fill": (wrappedValue: fill?.encodeToJSON(), isExplode: false),
            "mapping_priority": (wrappedValue: mappingPriority?.encodeToJSON(), isExplode: false),
            "response_format": (wrappedValue: responseFormat?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GENERICRESPONSE>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter mappingPriority
     */
    public enum MappingPriority_indexV1HistoricalHours: String, CaseIterable {
        case mappedFirst = "CHECK_MAPPED_FIRST"
        case unmappedFirst = "CHECK_UNMAPPED_FIRST"
    }

    /**
     * enum for parameter responseFormat
     */
    public enum ResponseFormat_indexV1HistoricalHours: String, CaseIterable {
        case json = "JSON"
        case csv = "CSV"
    }

    /**

     - parameter market: (query) The exchange to obtain data from 
     - parameter instrument: (query) The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. 
     - parameter groups: (query) When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME (optional)
     - parameter limit: (query) The number of data points to return (optional, default to 30)
     - parameter toTs: (query) Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     - parameter aggregate: (query) The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     - parameter fill: (query) Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     - parameter mappingPriority: (query) The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to .checkMappedFirst)
     - parameter responseFormat: (query) The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to .json)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func indexV1HistoricalHours(market: String, instrument: String, groups: [String]? = nil, limit: Int? = nil, toTs: Int? = nil, aggregate: Int? = nil, fill: Bool? = nil, mappingPriority: MappingPriority_indexV1HistoricalHours? = nil, responseFormat: ResponseFormat_indexV1HistoricalHours? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GENERICRESPONSE?, _ error: Error?) -> Void)) -> RequestTask {
        return indexV1HistoricalHoursWithRequestBuilder(market: market, instrument: instrument, groups: groups, limit: limit, toTs: toTs, aggregate: aggregate, fill: fill, mappingPriority: mappingPriority, responseFormat: responseFormat).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /index/v1/historical/hours
     - parameter market: (query) The exchange to obtain data from 
     - parameter instrument: (query) The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. 
     - parameter groups: (query) When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME (optional)
     - parameter limit: (query) The number of data points to return (optional, default to 30)
     - parameter toTs: (query) Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     - parameter aggregate: (query) The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     - parameter fill: (query) Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     - parameter mappingPriority: (query) The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to .checkMappedFirst)
     - parameter responseFormat: (query) The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to .json)
     - returns: RequestBuilder<GENERICRESPONSE> 
     */
    open class func indexV1HistoricalHoursWithRequestBuilder(market: String, instrument: String, groups: [String]? = nil, limit: Int? = nil, toTs: Int? = nil, aggregate: Int? = nil, fill: Bool? = nil, mappingPriority: MappingPriority_indexV1HistoricalHours? = nil, responseFormat: ResponseFormat_indexV1HistoricalHours? = nil) -> RequestBuilder<GENERICRESPONSE> {
        let localVariablePath = "/index/v1/historical/hours"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "market": (wrappedValue: market.encodeToJSON(), isExplode: false),
            "instrument": (wrappedValue: instrument.encodeToJSON(), isExplode: false),
            "groups": (wrappedValue: groups?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: false),
            "to_ts": (wrappedValue: toTs?.encodeToJSON(), isExplode: false),
            "aggregate": (wrappedValue: aggregate?.encodeToJSON(), isExplode: false),
            "fill": (wrappedValue: fill?.encodeToJSON(), isExplode: false),
            "mapping_priority": (wrappedValue: mappingPriority?.encodeToJSON(), isExplode: false),
            "response_format": (wrappedValue: responseFormat?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GENERICRESPONSE>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter mappingPriority
     */
    public enum MappingPriority_indexV1HistoricalMessages: String, CaseIterable {
        case mappedFirst = "CHECK_MAPPED_FIRST"
        case unmappedFirst = "CHECK_UNMAPPED_FIRST"
    }

    /**
     * enum for parameter responseFormat
     */
    public enum ResponseFormat_indexV1HistoricalMessages: String, CaseIterable {
        case json = "JSON"
        case csv = "CSV"
    }

    /**

     - parameter market: (query) The exchange to obtain data from 
     - parameter instrument: (query) The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. 
     - parameter afterTs: (query) Unix timestamp in seconds of the earliest index message in the response (optional)
     - parameter lastCcseq: (query) The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request. (optional, default to 0)
     - parameter limit: (query) The maximum number of index messages to return (optional, default to 100)
     - parameter mappingPriority: (query) The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to .checkMappedFirst)
     - parameter responseFormat: (query) The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to .json)
     - parameter return404OnEmptyResponse: (query) If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func indexV1HistoricalMessages(market: String, instrument: String, afterTs: Int? = nil, lastCcseq: Int? = nil, limit: Int? = nil, mappingPriority: MappingPriority_indexV1HistoricalMessages? = nil, responseFormat: ResponseFormat_indexV1HistoricalMessages? = nil, return404OnEmptyResponse: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GENERICRESPONSE?, _ error: Error?) -> Void)) -> RequestTask {
        return indexV1HistoricalMessagesWithRequestBuilder(market: market, instrument: instrument, afterTs: afterTs, lastCcseq: lastCcseq, limit: limit, mappingPriority: mappingPriority, responseFormat: responseFormat, return404OnEmptyResponse: return404OnEmptyResponse).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /index/v1/historical/messages
     - API Key:
       - type: apiKey authorization (HEADER)
       - name: api_key_header
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: api_key_query
     - parameter market: (query) The exchange to obtain data from 
     - parameter instrument: (query) The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. 
     - parameter afterTs: (query) Unix timestamp in seconds of the earliest index message in the response (optional)
     - parameter lastCcseq: (query) The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request. (optional, default to 0)
     - parameter limit: (query) The maximum number of index messages to return (optional, default to 100)
     - parameter mappingPriority: (query) The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to .checkMappedFirst)
     - parameter responseFormat: (query) The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to .json)
     - parameter return404OnEmptyResponse: (query) If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)
     - returns: RequestBuilder<GENERICRESPONSE> 
     */
    open class func indexV1HistoricalMessagesWithRequestBuilder(market: String, instrument: String, afterTs: Int? = nil, lastCcseq: Int? = nil, limit: Int? = nil, mappingPriority: MappingPriority_indexV1HistoricalMessages? = nil, responseFormat: ResponseFormat_indexV1HistoricalMessages? = nil, return404OnEmptyResponse: Bool? = nil) -> RequestBuilder<GENERICRESPONSE> {
        let localVariablePath = "/index/v1/historical/messages"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "market": (wrappedValue: market.encodeToJSON(), isExplode: false),
            "instrument": (wrappedValue: instrument.encodeToJSON(), isExplode: false),
            "after_ts": (wrappedValue: afterTs?.encodeToJSON(), isExplode: false),
            "last_ccseq": (wrappedValue: lastCcseq?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: false),
            "mapping_priority": (wrappedValue: mappingPriority?.encodeToJSON(), isExplode: false),
            "response_format": (wrappedValue: responseFormat?.encodeToJSON(), isExplode: false),
            "return_404_on_empty_response": (wrappedValue: return404OnEmptyResponse?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GENERICRESPONSE>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter mappingPriority
     */
    public enum MappingPriority_indexV1HistoricalMessagesHour: String, CaseIterable {
        case mappedFirst = "CHECK_MAPPED_FIRST"
        case unmappedFirst = "CHECK_UNMAPPED_FIRST"
    }

    /**
     * enum for parameter responseFormat
     */
    public enum ResponseFormat_indexV1HistoricalMessagesHour: String, CaseIterable {
        case json = "JSON"
        case csv = "CSV"
    }

    /**

     - parameter market: (query) The exchange to obtain data from 
     - parameter instrument: (query) The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. 
     - parameter hourTs: (query) Unix timestamp in seconds for the hour containing the index updates you are interested in. You can pass any timestamp in the hour but we will round it down the the full hour timestmap and return all index updates in that hour. (optional)
     - parameter mappingPriority: (query) The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to .checkMappedFirst)
     - parameter responseFormat: (query) The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to .json)
     - parameter return404OnEmptyResponse: (query) If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func indexV1HistoricalMessagesHour(market: String, instrument: String, hourTs: Int? = nil, mappingPriority: MappingPriority_indexV1HistoricalMessagesHour? = nil, responseFormat: ResponseFormat_indexV1HistoricalMessagesHour? = nil, return404OnEmptyResponse: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GENERICRESPONSE?, _ error: Error?) -> Void)) -> RequestTask {
        return indexV1HistoricalMessagesHourWithRequestBuilder(market: market, instrument: instrument, hourTs: hourTs, mappingPriority: mappingPriority, responseFormat: responseFormat, return404OnEmptyResponse: return404OnEmptyResponse).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /index/v1/historical/messages/hour
     - API Key:
       - type: apiKey authorization (HEADER)
       - name: api_key_header
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: api_key_query
     - parameter market: (query) The exchange to obtain data from 
     - parameter instrument: (query) The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. 
     - parameter hourTs: (query) Unix timestamp in seconds for the hour containing the index updates you are interested in. You can pass any timestamp in the hour but we will round it down the the full hour timestmap and return all index updates in that hour. (optional)
     - parameter mappingPriority: (query) The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to .checkMappedFirst)
     - parameter responseFormat: (query) The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to .json)
     - parameter return404OnEmptyResponse: (query) If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)
     - returns: RequestBuilder<GENERICRESPONSE> 
     */
    open class func indexV1HistoricalMessagesHourWithRequestBuilder(market: String, instrument: String, hourTs: Int? = nil, mappingPriority: MappingPriority_indexV1HistoricalMessagesHour? = nil, responseFormat: ResponseFormat_indexV1HistoricalMessagesHour? = nil, return404OnEmptyResponse: Bool? = nil) -> RequestBuilder<GENERICRESPONSE> {
        let localVariablePath = "/index/v1/historical/messages/hour"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "market": (wrappedValue: market.encodeToJSON(), isExplode: false),
            "instrument": (wrappedValue: instrument.encodeToJSON(), isExplode: false),
            "hour_ts": (wrappedValue: hourTs?.encodeToJSON(), isExplode: false),
            "mapping_priority": (wrappedValue: mappingPriority?.encodeToJSON(), isExplode: false),
            "response_format": (wrappedValue: responseFormat?.encodeToJSON(), isExplode: false),
            "return_404_on_empty_response": (wrappedValue: return404OnEmptyResponse?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GENERICRESPONSE>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter mappingPriority
     */
    public enum MappingPriority_indexV1HistoricalMinutes: String, CaseIterable {
        case mappedFirst = "CHECK_MAPPED_FIRST"
        case unmappedFirst = "CHECK_UNMAPPED_FIRST"
    }

    /**
     * enum for parameter responseFormat
     */
    public enum ResponseFormat_indexV1HistoricalMinutes: String, CaseIterable {
        case json = "JSON"
        case csv = "CSV"
    }

    /**

     - parameter market: (query) The exchange to obtain data from 
     - parameter instrument: (query) The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. 
     - parameter groups: (query) When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME (optional)
     - parameter limit: (query) The number of data points to return (optional, default to 30)
     - parameter toTs: (query) Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     - parameter aggregate: (query) The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     - parameter fill: (query) Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     - parameter mappingPriority: (query) The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to .checkMappedFirst)
     - parameter responseFormat: (query) The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to .json)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func indexV1HistoricalMinutes(market: String, instrument: String, groups: [String]? = nil, limit: Int? = nil, toTs: Int? = nil, aggregate: Int? = nil, fill: Bool? = nil, mappingPriority: MappingPriority_indexV1HistoricalMinutes? = nil, responseFormat: ResponseFormat_indexV1HistoricalMinutes? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GENERICRESPONSE?, _ error: Error?) -> Void)) -> RequestTask {
        return indexV1HistoricalMinutesWithRequestBuilder(market: market, instrument: instrument, groups: groups, limit: limit, toTs: toTs, aggregate: aggregate, fill: fill, mappingPriority: mappingPriority, responseFormat: responseFormat).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /index/v1/historical/minutes
     - parameter market: (query) The exchange to obtain data from 
     - parameter instrument: (query) The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. 
     - parameter groups: (query) When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME (optional)
     - parameter limit: (query) The number of data points to return (optional, default to 30)
     - parameter toTs: (query) Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     - parameter aggregate: (query) The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     - parameter fill: (query) Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     - parameter mappingPriority: (query) The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to .checkMappedFirst)
     - parameter responseFormat: (query) The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to .json)
     - returns: RequestBuilder<GENERICRESPONSE> 
     */
    open class func indexV1HistoricalMinutesWithRequestBuilder(market: String, instrument: String, groups: [String]? = nil, limit: Int? = nil, toTs: Int? = nil, aggregate: Int? = nil, fill: Bool? = nil, mappingPriority: MappingPriority_indexV1HistoricalMinutes? = nil, responseFormat: ResponseFormat_indexV1HistoricalMinutes? = nil) -> RequestBuilder<GENERICRESPONSE> {
        let localVariablePath = "/index/v1/historical/minutes"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "market": (wrappedValue: market.encodeToJSON(), isExplode: false),
            "instrument": (wrappedValue: instrument.encodeToJSON(), isExplode: false),
            "groups": (wrappedValue: groups?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: false),
            "to_ts": (wrappedValue: toTs?.encodeToJSON(), isExplode: false),
            "aggregate": (wrappedValue: aggregate?.encodeToJSON(), isExplode: false),
            "fill": (wrappedValue: fill?.encodeToJSON(), isExplode: false),
            "mapping_priority": (wrappedValue: mappingPriority?.encodeToJSON(), isExplode: false),
            "response_format": (wrappedValue: responseFormat?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GENERICRESPONSE>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter mappingPriority
     */
    public enum MappingPriority_indexV1LatestInstrumentMetadata: String, CaseIterable {
        case mappedFirst = "CHECK_MAPPED_FIRST"
        case unmappedFirst = "CHECK_UNMAPPED_FIRST"
    }

    /**

     - parameter market: (query) The exchange to obtain data from 
     - parameter instruments: (query) A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first. 
     - parameter groups: (query) When requesting metadata entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: STATUS,INTERNAL,GENERAL,MIGRATION,SOURCE (optional)
     - parameter mappingPriority: (query) The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to .checkMappedFirst)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func indexV1LatestInstrumentMetadata(market: String, instruments: [String], groups: [String]? = nil, mappingPriority: MappingPriority_indexV1LatestInstrumentMetadata? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GENERICRESPONSE?, _ error: Error?) -> Void)) -> RequestTask {
        return indexV1LatestInstrumentMetadataWithRequestBuilder(market: market, instruments: instruments, groups: groups, mappingPriority: mappingPriority).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /index/v1/latest/instrument/metadata
     - parameter market: (query) The exchange to obtain data from 
     - parameter instruments: (query) A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first. 
     - parameter groups: (query) When requesting metadata entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: STATUS,INTERNAL,GENERAL,MIGRATION,SOURCE (optional)
     - parameter mappingPriority: (query) The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to .checkMappedFirst)
     - returns: RequestBuilder<GENERICRESPONSE> 
     */
    open class func indexV1LatestInstrumentMetadataWithRequestBuilder(market: String, instruments: [String], groups: [String]? = nil, mappingPriority: MappingPriority_indexV1LatestInstrumentMetadata? = nil) -> RequestBuilder<GENERICRESPONSE> {
        let localVariablePath = "/index/v1/latest/instrument/metadata"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "market": (wrappedValue: market.encodeToJSON(), isExplode: false),
            "instruments": (wrappedValue: instruments.encodeToJSON(), isExplode: false),
            "groups": (wrappedValue: groups?.encodeToJSON(), isExplode: false),
            "mapping_priority": (wrappedValue: mappingPriority?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GENERICRESPONSE>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter mappingPriority
     */
    public enum MappingPriority_indexV1LatestTick: String, CaseIterable {
        case mappedFirst = "CHECK_MAPPED_FIRST"
        case unmappedFirst = "CHECK_UNMAPPED_FIRST"
    }

    /**

     - parameter market: (query) The exchange to obtain data from 
     - parameter instruments: (query) A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first. 
     - parameter groups: (query) When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME (optional)
     - parameter mappingPriority: (query) The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to .checkMappedFirst)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func indexV1LatestTick(market: String, instruments: [String], groups: [String]? = nil, mappingPriority: MappingPriority_indexV1LatestTick? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GENERICRESPONSE?, _ error: Error?) -> Void)) -> RequestTask {
        return indexV1LatestTickWithRequestBuilder(market: market, instruments: instruments, groups: groups, mappingPriority: mappingPriority).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /index/v1/latest/tick
     - parameter market: (query) The exchange to obtain data from 
     - parameter instruments: (query) A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first. 
     - parameter groups: (query) When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME (optional)
     - parameter mappingPriority: (query) The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to .checkMappedFirst)
     - returns: RequestBuilder<GENERICRESPONSE> 
     */
    open class func indexV1LatestTickWithRequestBuilder(market: String, instruments: [String], groups: [String]? = nil, mappingPriority: MappingPriority_indexV1LatestTick? = nil) -> RequestBuilder<GENERICRESPONSE> {
        let localVariablePath = "/index/v1/latest/tick"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "market": (wrappedValue: market.encodeToJSON(), isExplode: false),
            "instruments": (wrappedValue: instruments.encodeToJSON(), isExplode: false),
            "groups": (wrappedValue: groups?.encodeToJSON(), isExplode: false),
            "mapping_priority": (wrappedValue: mappingPriority?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GENERICRESPONSE>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter market: (query) The exchange to obtain data from (optional, default to "")
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func indexV1Markets(market: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GENERICRESPONSE?, _ error: Error?) -> Void)) -> RequestTask {
        return indexV1MarketsWithRequestBuilder(market: market).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /index/v1/markets
     - parameter market: (query) The exchange to obtain data from (optional, default to "")
     - returns: RequestBuilder<GENERICRESPONSE> 
     */
    open class func indexV1MarketsWithRequestBuilder(market: String? = nil) -> RequestBuilder<GENERICRESPONSE> {
        let localVariablePath = "/index/v1/markets"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "market": (wrappedValue: market?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GENERICRESPONSE>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter instrumentStatus
     */
    public enum InstrumentStatus_indexV1MarketsInstruments: String, CaseIterable {
        case active = "ACTIVE"
        case ignored = "IGNORED"
        case retired = "RETIRED"
        case expired = "EXPIRED"
    }

    /**

     - parameter market: (query) The exchange to obtain data from (optional, default to "")
     - parameter instrument: (query) The mapped instrument to retrieve on a specific market. (optional, default to "")
     - parameter instrumentStatus: (query) The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func indexV1MarketsInstruments(market: String? = nil, instrument: String? = nil, instrumentStatus: [InstrumentStatus_indexV1MarketsInstruments]? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GENERICRESPONSE?, _ error: Error?) -> Void)) -> RequestTask {
        return indexV1MarketsInstrumentsWithRequestBuilder(market: market, instrument: instrument, instrumentStatus: instrumentStatus).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /index/v1/markets/instruments
     - parameter market: (query) The exchange to obtain data from (optional, default to "")
     - parameter instrument: (query) The mapped instrument to retrieve on a specific market. (optional, default to "")
     - parameter instrumentStatus: (query) The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED (optional)
     - returns: RequestBuilder<GENERICRESPONSE> 
     */
    open class func indexV1MarketsInstrumentsWithRequestBuilder(market: String? = nil, instrument: String? = nil, instrumentStatus: [InstrumentStatus_indexV1MarketsInstruments]? = nil) -> RequestBuilder<GENERICRESPONSE> {
        let localVariablePath = "/index/v1/markets/instruments"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "market": (wrappedValue: market?.encodeToJSON(), isExplode: false),
            "instrument": (wrappedValue: instrument?.encodeToJSON(), isExplode: false),
            "instrument_status": (wrappedValue: instrumentStatus?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GENERICRESPONSE>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter instrumentStatus
     */
    public enum InstrumentStatus_indexV1MarketsInstrumentsUnmapped: String, CaseIterable {
        case active = "ACTIVE"
        case ignored = "IGNORED"
        case retired = "RETIRED"
        case expired = "EXPIRED"
    }

    /**

     - parameter market: (query) The exchange to obtain data from (optional, default to "")
     - parameter instrument: (query) The unmapped instrument to retrieve on a specific market. (optional, default to "")
     - parameter instrumentStatus: (query) The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func indexV1MarketsInstrumentsUnmapped(market: String? = nil, instrument: String? = nil, instrumentStatus: [InstrumentStatus_indexV1MarketsInstrumentsUnmapped]? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GENERICRESPONSE?, _ error: Error?) -> Void)) -> RequestTask {
        return indexV1MarketsInstrumentsUnmappedWithRequestBuilder(market: market, instrument: instrument, instrumentStatus: instrumentStatus).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /index/v1/markets/instruments/unmapped
     - parameter market: (query) The exchange to obtain data from (optional, default to "")
     - parameter instrument: (query) The unmapped instrument to retrieve on a specific market. (optional, default to "")
     - parameter instrumentStatus: (query) The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED (optional)
     - returns: RequestBuilder<GENERICRESPONSE> 
     */
    open class func indexV1MarketsInstrumentsUnmappedWithRequestBuilder(market: String? = nil, instrument: String? = nil, instrumentStatus: [InstrumentStatus_indexV1MarketsInstrumentsUnmapped]? = nil) -> RequestBuilder<GENERICRESPONSE> {
        let localVariablePath = "/index/v1/markets/instruments/unmapped"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "market": (wrappedValue: market?.encodeToJSON(), isExplode: false),
            "instrument": (wrappedValue: instrument?.encodeToJSON(), isExplode: false),
            "instrument_status": (wrappedValue: instrumentStatus?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GENERICRESPONSE>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
