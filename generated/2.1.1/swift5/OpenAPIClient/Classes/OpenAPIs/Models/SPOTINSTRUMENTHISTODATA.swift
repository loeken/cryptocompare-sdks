//
// SPOTINSTRUMENTHISTODATA.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct SPOTINSTRUMENTHISTODATA: Codable, JSONEncodable, Hashable {

    /** The mapped from asset (base / symbol/ coin) (e.g. BTC). Only available on instruments that have mapping. */
    public var BASE: String?
    /** The price of the last trade in this time period. If there were no trades in the time period, the open price will be given. */
    public var CLOSE: Int?
    /** The price of the first trade in the time period. This is only available when there is at least one trade in the time period. */
    public var FIRST_TRADE_PRICE: Int?
    /** The timestamp, in seconds, of the first trade in this time perio. This is only available when there is at least one trade in the time period. */
    public var FIRST_TRADE_TIMESTAMP: Int?
    /** The highest trade price in the time period. If there were no trades in the time period, the open price will be given. */
    public var HIGH: Int?
    /** The highest value of the trades in the time period. This is only available when there is at least one trade in the time period. */
    public var HIGH_TRADE_PRICE: Int?
    /** The timestamp, in seconds, of the highest trade in the time period. This is only available when there is at least one trade in the time period. */
    public var HIGH_TRADE_TIMESTAMP: Int?
    /** The unmapped instrument ID */
    public var INSTRUMENT: String?
    /** The last trade price in the time period. This is only available when there is at least one trade in the time period. */
    public var LAST_TRADE_PRICE: Int?
    /** The timestamp, in seconds, of the last trade in this time period. This is only available when there is at least one trade in the time period. */
    public var LAST_TRADE_TIMESTAMP: Int?
    /** The lowest trade price in the time period. If there were no trades in the time period, the open price will be given. */
    public var LOW: Int?
    /** The lowest value of the trades in the time period. This is only available when there is at least one trade in the time period. */
    public var LOW_TRADE_PRICE: Int?
    /** The timestamp, in seconds, of the lowest trade in the time period. This is only available when there is at least one trade in the time period. */
    public var LOW_TRADE_TIMESTAMP: Int?
    /** The instrument ID, as derived from our mapping rules. This takes the form \"BASE-QUOTE\" (e.g. BTC-USD). Only available on instruments that have been mapped. */
    public var MAPPED_INSTRUMENT: String?
    /** The market / exchange under consideration (e.g. gemini, kraken, coinbase, etc). */
    public var MARKET: String?
    /** The open price for the historical period, this is based on the closest trade before the period start. */
    public var OPEN: Int?
    /** The mapped to asset (quote / counter symbol / coin) (e.g. USD). Only available on instruments that have mapping. */
    public var QUOTE: String?
    /** The sum of all the trade volumes in the To asset (quote/counter symbol/coin) for the time period. If there were no trades in the time period, 0 will be returned. */
    public var QUOTE_VOLUME: Int?
    /** The sum of all the BUY trade volumes in the to asset (quote/counter symbol/coin) for the time period. */
    public var QUOTE_VOLUME_BUY: Int?
    /** The sum of all the SELL trade volumes in the To asset (quote/counter symbol/coin) for the time period. */
    public var QUOTE_VOLUME_SELL: Int?
    /** The sum of all the UNKNOWN trade volumes in the To asset (quote/counter symbol/coin) for the time period. */
    public var QUOTE_VOLUME_UNKNOWN: Int?
    /** The timestamp in seconds of the beginning of the histo period. For minute it would be every minute at the beginning of the minute, for hour it would be the start of the hour and for daily it is 00:00 GMT. */
    public var TIMESTAMP: Int?
    /** The total number of trades seen in this time period. If there were no trades in the time period, 0 will be returned. */
    public var TOTAL_TRADES: Int?
    /** The total number of BUY trades seen in this time period. If there were no trades in the time period, 0 will be returned. */
    public var TOTAL_TRADES_BUY: Int?
    /** The total number of SELL trades seen in this time period. If there were no trades in the time period, 0 will be returned. */
    public var TOTAL_TRADES_SELL: Int?
    /** The total number of UNKNOWN trades seen in this time period. If there were no trades in the time period, 0 will be returned. */
    public var TOTAL_TRADES_UNKNOWN: Int?
    /** The type of the message. */
    public var TYPE: String?
    /** The unit of the historical period update: MINUTE for minute, HOUR for hour and DAY for day. */
    public var UNIT: String?
    /** The sum of all the trade volumes in the from asset (base symbol / coin) for the time period. If there were no trades in the time period, 0 will be returned. */
    public var VOLUME: Int?
    /** The sum of all the BUY trade volumes in the from asset (base symbol / coin) for the time period. */
    public var VOLUME_BUY: Int?
    /** The sum of all the SELL trade volumes in the from asset (base symbol / coin) for the time period. */
    public var VOLUME_SELL: Int?
    /** The sum of all the UNKNOWN trade volumes in the from asset (base symbol / coin) for the time period. */
    public var VOLUME_UNKNOWN: Int?

    public init(BASE: String? = nil, CLOSE: Int? = nil, FIRST_TRADE_PRICE: Int? = nil, FIRST_TRADE_TIMESTAMP: Int? = nil, HIGH: Int? = nil, HIGH_TRADE_PRICE: Int? = nil, HIGH_TRADE_TIMESTAMP: Int? = nil, INSTRUMENT: String? = nil, LAST_TRADE_PRICE: Int? = nil, LAST_TRADE_TIMESTAMP: Int? = nil, LOW: Int? = nil, LOW_TRADE_PRICE: Int? = nil, LOW_TRADE_TIMESTAMP: Int? = nil, MAPPED_INSTRUMENT: String? = nil, MARKET: String? = nil, OPEN: Int? = nil, QUOTE: String? = nil, QUOTE_VOLUME: Int? = nil, QUOTE_VOLUME_BUY: Int? = nil, QUOTE_VOLUME_SELL: Int? = nil, QUOTE_VOLUME_UNKNOWN: Int? = nil, TIMESTAMP: Int? = nil, TOTAL_TRADES: Int? = nil, TOTAL_TRADES_BUY: Int? = nil, TOTAL_TRADES_SELL: Int? = nil, TOTAL_TRADES_UNKNOWN: Int? = nil, TYPE: String? = nil, UNIT: String? = nil, VOLUME: Int? = nil, VOLUME_BUY: Int? = nil, VOLUME_SELL: Int? = nil, VOLUME_UNKNOWN: Int? = nil) {
        self.BASE = BASE
        self.CLOSE = CLOSE
        self.FIRST_TRADE_PRICE = FIRST_TRADE_PRICE
        self.FIRST_TRADE_TIMESTAMP = FIRST_TRADE_TIMESTAMP
        self.HIGH = HIGH
        self.HIGH_TRADE_PRICE = HIGH_TRADE_PRICE
        self.HIGH_TRADE_TIMESTAMP = HIGH_TRADE_TIMESTAMP
        self.INSTRUMENT = INSTRUMENT
        self.LAST_TRADE_PRICE = LAST_TRADE_PRICE
        self.LAST_TRADE_TIMESTAMP = LAST_TRADE_TIMESTAMP
        self.LOW = LOW
        self.LOW_TRADE_PRICE = LOW_TRADE_PRICE
        self.LOW_TRADE_TIMESTAMP = LOW_TRADE_TIMESTAMP
        self.MAPPED_INSTRUMENT = MAPPED_INSTRUMENT
        self.MARKET = MARKET
        self.OPEN = OPEN
        self.QUOTE = QUOTE
        self.QUOTE_VOLUME = QUOTE_VOLUME
        self.QUOTE_VOLUME_BUY = QUOTE_VOLUME_BUY
        self.QUOTE_VOLUME_SELL = QUOTE_VOLUME_SELL
        self.QUOTE_VOLUME_UNKNOWN = QUOTE_VOLUME_UNKNOWN
        self.TIMESTAMP = TIMESTAMP
        self.TOTAL_TRADES = TOTAL_TRADES
        self.TOTAL_TRADES_BUY = TOTAL_TRADES_BUY
        self.TOTAL_TRADES_SELL = TOTAL_TRADES_SELL
        self.TOTAL_TRADES_UNKNOWN = TOTAL_TRADES_UNKNOWN
        self.TYPE = TYPE
        self.UNIT = UNIT
        self.VOLUME = VOLUME
        self.VOLUME_BUY = VOLUME_BUY
        self.VOLUME_SELL = VOLUME_SELL
        self.VOLUME_UNKNOWN = VOLUME_UNKNOWN
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case BASE
        case CLOSE
        case FIRST_TRADE_PRICE
        case FIRST_TRADE_TIMESTAMP
        case HIGH
        case HIGH_TRADE_PRICE
        case HIGH_TRADE_TIMESTAMP
        case INSTRUMENT
        case LAST_TRADE_PRICE
        case LAST_TRADE_TIMESTAMP
        case LOW
        case LOW_TRADE_PRICE
        case LOW_TRADE_TIMESTAMP
        case MAPPED_INSTRUMENT
        case MARKET
        case OPEN
        case QUOTE
        case QUOTE_VOLUME
        case QUOTE_VOLUME_BUY
        case QUOTE_VOLUME_SELL
        case QUOTE_VOLUME_UNKNOWN
        case TIMESTAMP
        case TOTAL_TRADES
        case TOTAL_TRADES_BUY
        case TOTAL_TRADES_SELL
        case TOTAL_TRADES_UNKNOWN
        case TYPE
        case UNIT
        case VOLUME
        case VOLUME_BUY
        case VOLUME_SELL
        case VOLUME_UNKNOWN
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(BASE, forKey: .BASE)
        try container.encodeIfPresent(CLOSE, forKey: .CLOSE)
        try container.encodeIfPresent(FIRST_TRADE_PRICE, forKey: .FIRST_TRADE_PRICE)
        try container.encodeIfPresent(FIRST_TRADE_TIMESTAMP, forKey: .FIRST_TRADE_TIMESTAMP)
        try container.encodeIfPresent(HIGH, forKey: .HIGH)
        try container.encodeIfPresent(HIGH_TRADE_PRICE, forKey: .HIGH_TRADE_PRICE)
        try container.encodeIfPresent(HIGH_TRADE_TIMESTAMP, forKey: .HIGH_TRADE_TIMESTAMP)
        try container.encodeIfPresent(INSTRUMENT, forKey: .INSTRUMENT)
        try container.encodeIfPresent(LAST_TRADE_PRICE, forKey: .LAST_TRADE_PRICE)
        try container.encodeIfPresent(LAST_TRADE_TIMESTAMP, forKey: .LAST_TRADE_TIMESTAMP)
        try container.encodeIfPresent(LOW, forKey: .LOW)
        try container.encodeIfPresent(LOW_TRADE_PRICE, forKey: .LOW_TRADE_PRICE)
        try container.encodeIfPresent(LOW_TRADE_TIMESTAMP, forKey: .LOW_TRADE_TIMESTAMP)
        try container.encodeIfPresent(MAPPED_INSTRUMENT, forKey: .MAPPED_INSTRUMENT)
        try container.encodeIfPresent(MARKET, forKey: .MARKET)
        try container.encodeIfPresent(OPEN, forKey: .OPEN)
        try container.encodeIfPresent(QUOTE, forKey: .QUOTE)
        try container.encodeIfPresent(QUOTE_VOLUME, forKey: .QUOTE_VOLUME)
        try container.encodeIfPresent(QUOTE_VOLUME_BUY, forKey: .QUOTE_VOLUME_BUY)
        try container.encodeIfPresent(QUOTE_VOLUME_SELL, forKey: .QUOTE_VOLUME_SELL)
        try container.encodeIfPresent(QUOTE_VOLUME_UNKNOWN, forKey: .QUOTE_VOLUME_UNKNOWN)
        try container.encodeIfPresent(TIMESTAMP, forKey: .TIMESTAMP)
        try container.encodeIfPresent(TOTAL_TRADES, forKey: .TOTAL_TRADES)
        try container.encodeIfPresent(TOTAL_TRADES_BUY, forKey: .TOTAL_TRADES_BUY)
        try container.encodeIfPresent(TOTAL_TRADES_SELL, forKey: .TOTAL_TRADES_SELL)
        try container.encodeIfPresent(TOTAL_TRADES_UNKNOWN, forKey: .TOTAL_TRADES_UNKNOWN)
        try container.encodeIfPresent(TYPE, forKey: .TYPE)
        try container.encodeIfPresent(UNIT, forKey: .UNIT)
        try container.encodeIfPresent(VOLUME, forKey: .VOLUME)
        try container.encodeIfPresent(VOLUME_BUY, forKey: .VOLUME_BUY)
        try container.encodeIfPresent(VOLUME_SELL, forKey: .VOLUME_SELL)
        try container.encodeIfPresent(VOLUME_UNKNOWN, forKey: .VOLUME_UNKNOWN)
    }
}

