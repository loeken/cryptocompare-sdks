/*
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 * CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: data@cryptocompare.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error;
import org.openapitools.client.model.GENERICRESPONSE;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class OverviewApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OverviewApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OverviewApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for overviewV1HistoricalMarketcapAllAssetsDays
     * @param groups When requesting all market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME (optional)
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call overviewV1HistoricalMarketcapAllAssetsDaysCall(List<String> groups, Integer limit, Integer toTs, Integer aggregate, Boolean fill, String responseFormat, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/overview/v1/historical/marketcap/all/assets/days";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (groups != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "groups", groups));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (toTs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to_ts", toTs));
        }

        if (aggregate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aggregate", aggregate));
        }

        if (fill != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fill", fill));
        }

        if (responseFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("response_format", responseFormat));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call overviewV1HistoricalMarketcapAllAssetsDaysValidateBeforeCall(List<String> groups, Integer limit, Integer toTs, Integer aggregate, Boolean fill, String responseFormat, final ApiCallback _callback) throws ApiException {
        return overviewV1HistoricalMarketcapAllAssetsDaysCall(groups, limit, toTs, aggregate, fill, responseFormat, _callback);

    }

    /**
     * 
     * 
     * @param groups When requesting all market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME (optional)
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @return GENERICRESPONSE
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public GENERICRESPONSE overviewV1HistoricalMarketcapAllAssetsDays(List<String> groups, Integer limit, Integer toTs, Integer aggregate, Boolean fill, String responseFormat) throws ApiException {
        ApiResponse<GENERICRESPONSE> localVarResp = overviewV1HistoricalMarketcapAllAssetsDaysWithHttpInfo(groups, limit, toTs, aggregate, fill, responseFormat);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param groups When requesting all market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME (optional)
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @return ApiResponse&lt;GENERICRESPONSE&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GENERICRESPONSE> overviewV1HistoricalMarketcapAllAssetsDaysWithHttpInfo(List<String> groups, Integer limit, Integer toTs, Integer aggregate, Boolean fill, String responseFormat) throws ApiException {
        okhttp3.Call localVarCall = overviewV1HistoricalMarketcapAllAssetsDaysValidateBeforeCall(groups, limit, toTs, aggregate, fill, responseFormat, null);
        Type localVarReturnType = new TypeToken<GENERICRESPONSE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param groups When requesting all market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME (optional)
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call overviewV1HistoricalMarketcapAllAssetsDaysAsync(List<String> groups, Integer limit, Integer toTs, Integer aggregate, Boolean fill, String responseFormat, final ApiCallback<GENERICRESPONSE> _callback) throws ApiException {

        okhttp3.Call localVarCall = overviewV1HistoricalMarketcapAllAssetsDaysValidateBeforeCall(groups, limit, toTs, aggregate, fill, responseFormat, _callback);
        Type localVarReturnType = new TypeToken<GENERICRESPONSE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for overviewV1HistoricalMarketcapAllAssetsHours
     * @param groups When requesting all market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME (optional)
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call overviewV1HistoricalMarketcapAllAssetsHoursCall(List<String> groups, Integer limit, Integer toTs, Integer aggregate, Boolean fill, String responseFormat, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/overview/v1/historical/marketcap/all/assets/hours";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (groups != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "groups", groups));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (toTs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to_ts", toTs));
        }

        if (aggregate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aggregate", aggregate));
        }

        if (fill != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fill", fill));
        }

        if (responseFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("response_format", responseFormat));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call overviewV1HistoricalMarketcapAllAssetsHoursValidateBeforeCall(List<String> groups, Integer limit, Integer toTs, Integer aggregate, Boolean fill, String responseFormat, final ApiCallback _callback) throws ApiException {
        return overviewV1HistoricalMarketcapAllAssetsHoursCall(groups, limit, toTs, aggregate, fill, responseFormat, _callback);

    }

    /**
     * 
     * 
     * @param groups When requesting all market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME (optional)
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @return GENERICRESPONSE
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public GENERICRESPONSE overviewV1HistoricalMarketcapAllAssetsHours(List<String> groups, Integer limit, Integer toTs, Integer aggregate, Boolean fill, String responseFormat) throws ApiException {
        ApiResponse<GENERICRESPONSE> localVarResp = overviewV1HistoricalMarketcapAllAssetsHoursWithHttpInfo(groups, limit, toTs, aggregate, fill, responseFormat);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param groups When requesting all market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME (optional)
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @return ApiResponse&lt;GENERICRESPONSE&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GENERICRESPONSE> overviewV1HistoricalMarketcapAllAssetsHoursWithHttpInfo(List<String> groups, Integer limit, Integer toTs, Integer aggregate, Boolean fill, String responseFormat) throws ApiException {
        okhttp3.Call localVarCall = overviewV1HistoricalMarketcapAllAssetsHoursValidateBeforeCall(groups, limit, toTs, aggregate, fill, responseFormat, null);
        Type localVarReturnType = new TypeToken<GENERICRESPONSE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param groups When requesting all market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME (optional)
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call overviewV1HistoricalMarketcapAllAssetsHoursAsync(List<String> groups, Integer limit, Integer toTs, Integer aggregate, Boolean fill, String responseFormat, final ApiCallback<GENERICRESPONSE> _callback) throws ApiException {

        okhttp3.Call localVarCall = overviewV1HistoricalMarketcapAllAssetsHoursValidateBeforeCall(groups, limit, toTs, aggregate, fill, responseFormat, _callback);
        Type localVarReturnType = new TypeToken<GENERICRESPONSE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for overviewV1HistoricalMarketcapFtwAssetsDays
     * @param groups When requesting ftw universe market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME (optional)
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call overviewV1HistoricalMarketcapFtwAssetsDaysCall(List<String> groups, Integer limit, Integer toTs, Integer aggregate, Boolean fill, String responseFormat, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/overview/v1/historical/marketcap/ftw/assets/days";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (groups != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "groups", groups));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (toTs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to_ts", toTs));
        }

        if (aggregate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aggregate", aggregate));
        }

        if (fill != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fill", fill));
        }

        if (responseFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("response_format", responseFormat));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call overviewV1HistoricalMarketcapFtwAssetsDaysValidateBeforeCall(List<String> groups, Integer limit, Integer toTs, Integer aggregate, Boolean fill, String responseFormat, final ApiCallback _callback) throws ApiException {
        return overviewV1HistoricalMarketcapFtwAssetsDaysCall(groups, limit, toTs, aggregate, fill, responseFormat, _callback);

    }

    /**
     * 
     * 
     * @param groups When requesting ftw universe market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME (optional)
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @return GENERICRESPONSE
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public GENERICRESPONSE overviewV1HistoricalMarketcapFtwAssetsDays(List<String> groups, Integer limit, Integer toTs, Integer aggregate, Boolean fill, String responseFormat) throws ApiException {
        ApiResponse<GENERICRESPONSE> localVarResp = overviewV1HistoricalMarketcapFtwAssetsDaysWithHttpInfo(groups, limit, toTs, aggregate, fill, responseFormat);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param groups When requesting ftw universe market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME (optional)
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @return ApiResponse&lt;GENERICRESPONSE&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GENERICRESPONSE> overviewV1HistoricalMarketcapFtwAssetsDaysWithHttpInfo(List<String> groups, Integer limit, Integer toTs, Integer aggregate, Boolean fill, String responseFormat) throws ApiException {
        okhttp3.Call localVarCall = overviewV1HistoricalMarketcapFtwAssetsDaysValidateBeforeCall(groups, limit, toTs, aggregate, fill, responseFormat, null);
        Type localVarReturnType = new TypeToken<GENERICRESPONSE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param groups When requesting ftw universe market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME (optional)
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call overviewV1HistoricalMarketcapFtwAssetsDaysAsync(List<String> groups, Integer limit, Integer toTs, Integer aggregate, Boolean fill, String responseFormat, final ApiCallback<GENERICRESPONSE> _callback) throws ApiException {

        okhttp3.Call localVarCall = overviewV1HistoricalMarketcapFtwAssetsDaysValidateBeforeCall(groups, limit, toTs, aggregate, fill, responseFormat, _callback);
        Type localVarReturnType = new TypeToken<GENERICRESPONSE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for overviewV1HistoricalMarketcapFtwAssetsHours
     * @param groups When requesting ftw universe market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME (optional)
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call overviewV1HistoricalMarketcapFtwAssetsHoursCall(List<String> groups, Integer limit, Integer toTs, Integer aggregate, Boolean fill, String responseFormat, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/overview/v1/historical/marketcap/ftw/assets/hours";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (groups != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "groups", groups));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (toTs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to_ts", toTs));
        }

        if (aggregate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aggregate", aggregate));
        }

        if (fill != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fill", fill));
        }

        if (responseFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("response_format", responseFormat));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call overviewV1HistoricalMarketcapFtwAssetsHoursValidateBeforeCall(List<String> groups, Integer limit, Integer toTs, Integer aggregate, Boolean fill, String responseFormat, final ApiCallback _callback) throws ApiException {
        return overviewV1HistoricalMarketcapFtwAssetsHoursCall(groups, limit, toTs, aggregate, fill, responseFormat, _callback);

    }

    /**
     * 
     * 
     * @param groups When requesting ftw universe market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME (optional)
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @return GENERICRESPONSE
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public GENERICRESPONSE overviewV1HistoricalMarketcapFtwAssetsHours(List<String> groups, Integer limit, Integer toTs, Integer aggregate, Boolean fill, String responseFormat) throws ApiException {
        ApiResponse<GENERICRESPONSE> localVarResp = overviewV1HistoricalMarketcapFtwAssetsHoursWithHttpInfo(groups, limit, toTs, aggregate, fill, responseFormat);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param groups When requesting ftw universe market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME (optional)
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @return ApiResponse&lt;GENERICRESPONSE&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GENERICRESPONSE> overviewV1HistoricalMarketcapFtwAssetsHoursWithHttpInfo(List<String> groups, Integer limit, Integer toTs, Integer aggregate, Boolean fill, String responseFormat) throws ApiException {
        okhttp3.Call localVarCall = overviewV1HistoricalMarketcapFtwAssetsHoursValidateBeforeCall(groups, limit, toTs, aggregate, fill, responseFormat, null);
        Type localVarReturnType = new TypeToken<GENERICRESPONSE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param groups When requesting ftw universe market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME (optional)
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call overviewV1HistoricalMarketcapFtwAssetsHoursAsync(List<String> groups, Integer limit, Integer toTs, Integer aggregate, Boolean fill, String responseFormat, final ApiCallback<GENERICRESPONSE> _callback) throws ApiException {

        okhttp3.Call localVarCall = overviewV1HistoricalMarketcapFtwAssetsHoursValidateBeforeCall(groups, limit, toTs, aggregate, fill, responseFormat, _callback);
        Type localVarReturnType = new TypeToken<GENERICRESPONSE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for overviewV1LatestMarketcapAllTick
     * @param groups When requesting all market cap tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,MOVING_24_HOUR (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call overviewV1LatestMarketcapAllTickCall(List<String> groups, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/overview/v1/latest/marketcap/all/tick";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (groups != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "groups", groups));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call overviewV1LatestMarketcapAllTickValidateBeforeCall(List<String> groups, final ApiCallback _callback) throws ApiException {
        return overviewV1LatestMarketcapAllTickCall(groups, _callback);

    }

    /**
     * 
     * 
     * @param groups When requesting all market cap tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,MOVING_24_HOUR (optional)
     * @return GENERICRESPONSE
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public GENERICRESPONSE overviewV1LatestMarketcapAllTick(List<String> groups) throws ApiException {
        ApiResponse<GENERICRESPONSE> localVarResp = overviewV1LatestMarketcapAllTickWithHttpInfo(groups);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param groups When requesting all market cap tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,MOVING_24_HOUR (optional)
     * @return ApiResponse&lt;GENERICRESPONSE&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GENERICRESPONSE> overviewV1LatestMarketcapAllTickWithHttpInfo(List<String> groups) throws ApiException {
        okhttp3.Call localVarCall = overviewV1LatestMarketcapAllTickValidateBeforeCall(groups, null);
        Type localVarReturnType = new TypeToken<GENERICRESPONSE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param groups When requesting all market cap tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,MOVING_24_HOUR (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call overviewV1LatestMarketcapAllTickAsync(List<String> groups, final ApiCallback<GENERICRESPONSE> _callback) throws ApiException {

        okhttp3.Call localVarCall = overviewV1LatestMarketcapAllTickValidateBeforeCall(groups, _callback);
        Type localVarReturnType = new TypeToken<GENERICRESPONSE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for overviewV1LatestMarketcapFtwTick
     * @param groups When requesting ftw universe market cap tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,MOVING_24_HOUR (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call overviewV1LatestMarketcapFtwTickCall(List<String> groups, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/overview/v1/latest/marketcap/ftw/tick";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (groups != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "groups", groups));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call overviewV1LatestMarketcapFtwTickValidateBeforeCall(List<String> groups, final ApiCallback _callback) throws ApiException {
        return overviewV1LatestMarketcapFtwTickCall(groups, _callback);

    }

    /**
     * 
     * 
     * @param groups When requesting ftw universe market cap tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,MOVING_24_HOUR (optional)
     * @return GENERICRESPONSE
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public GENERICRESPONSE overviewV1LatestMarketcapFtwTick(List<String> groups) throws ApiException {
        ApiResponse<GENERICRESPONSE> localVarResp = overviewV1LatestMarketcapFtwTickWithHttpInfo(groups);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param groups When requesting ftw universe market cap tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,MOVING_24_HOUR (optional)
     * @return ApiResponse&lt;GENERICRESPONSE&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GENERICRESPONSE> overviewV1LatestMarketcapFtwTickWithHttpInfo(List<String> groups) throws ApiException {
        okhttp3.Call localVarCall = overviewV1LatestMarketcapFtwTickValidateBeforeCall(groups, null);
        Type localVarReturnType = new TypeToken<GENERICRESPONSE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param groups When requesting ftw universe market cap tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,MOVING_24_HOUR (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call overviewV1LatestMarketcapFtwTickAsync(List<String> groups, final ApiCallback<GENERICRESPONSE> _callback) throws ApiException {

        okhttp3.Call localVarCall = overviewV1LatestMarketcapFtwTickValidateBeforeCall(groups, _callback);
        Type localVarReturnType = new TypeToken<GENERICRESPONSE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
