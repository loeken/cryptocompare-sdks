/*
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 * CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: data@cryptocompare.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.SPOTINSTRUMENTHISTODATA;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SPOTINSTRUMENTHISTODATARESPONSE
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-03T11:55:58.153362Z[Etc/UTC]")
public class SPOTINSTRUMENTHISTODATARESPONSE {
  public static final String SERIALIZED_NAME_DATA = "Data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private List<SPOTINSTRUMENTHISTODATA> data = null;

  public static final String SERIALIZED_NAME_ERR = "Err";
  @SerializedName(SERIALIZED_NAME_ERR)
  private Object err;

  public SPOTINSTRUMENTHISTODATARESPONSE() {
  }

  public SPOTINSTRUMENTHISTODATARESPONSE data(List<SPOTINSTRUMENTHISTODATA> data) {
    
    this.data = data;
    return this;
  }

  public SPOTINSTRUMENTHISTODATARESPONSE addDataItem(SPOTINSTRUMENTHISTODATA dataItem) {
    if (this.data == null) {
      this.data = new ArrayList<>();
    }
    this.data.add(dataItem);
    return this;
  }

   /**
   * Get data
   * @return data
  **/
  @javax.annotation.Nullable

  public List<SPOTINSTRUMENTHISTODATA> getData() {
    return data;
  }


  public void setData(List<SPOTINSTRUMENTHISTODATA> data) {
    this.data = data;
  }


  public SPOTINSTRUMENTHISTODATARESPONSE err(Object err) {
    
    this.err = err;
    return this;
  }

   /**
   * Get err
   * @return err
  **/
  @javax.annotation.Nullable

  public Object getErr() {
    return err;
  }


  public void setErr(Object err) {
    this.err = err;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SPOTINSTRUMENTHISTODATARESPONSE SPOT_INSTRUMENT_HISTO_DATA_RESPONSE = (SPOTINSTRUMENTHISTODATARESPONSE) o;
    return Objects.equals(this.data, SPOT_INSTRUMENT_HISTO_DATA_RESPONSE.data) &&
        Objects.equals(this.err, SPOT_INSTRUMENT_HISTO_DATA_RESPONSE.err);
  }

  @Override
  public int hashCode() {
    return Objects.hash(data, err);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SPOTINSTRUMENTHISTODATARESPONSE {\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    err: ").append(toIndentedString(err)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Data");
    openapiFields.add("Err");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SPOTINSTRUMENTHISTODATARESPONSE
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SPOTINSTRUMENTHISTODATARESPONSE.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SPOTINSTRUMENTHISTODATARESPONSE is not found in the empty JSON string", SPOTINSTRUMENTHISTODATARESPONSE.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!SPOTINSTRUMENTHISTODATARESPONSE.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SPOTINSTRUMENTHISTODATARESPONSE` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("Data") != null && !jsonObj.get("Data").isJsonNull()) {
        JsonArray jsonArraydata = jsonObj.getAsJsonArray("Data");
        if (jsonArraydata != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Data").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Data` to be an array in the JSON string but got `%s`", jsonObj.get("Data").toString()));
          }

          // validate the optional field `Data` (array)
          for (int i = 0; i < jsonArraydata.size(); i++) {
            SPOTINSTRUMENTHISTODATA.validateJsonObject(jsonArraydata.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SPOTINSTRUMENTHISTODATARESPONSE.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SPOTINSTRUMENTHISTODATARESPONSE' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SPOTINSTRUMENTHISTODATARESPONSE> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SPOTINSTRUMENTHISTODATARESPONSE.class));

       return (TypeAdapter<T>) new TypeAdapter<SPOTINSTRUMENTHISTODATARESPONSE>() {
           @Override
           public void write(JsonWriter out, SPOTINSTRUMENTHISTODATARESPONSE value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SPOTINSTRUMENTHISTODATARESPONSE read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SPOTINSTRUMENTHISTODATARESPONSE given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SPOTINSTRUMENTHISTODATARESPONSE
  * @throws IOException if the JSON string is invalid with respect to SPOTINSTRUMENTHISTODATARESPONSE
  */
  public static SPOTINSTRUMENTHISTODATARESPONSE fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SPOTINSTRUMENTHISTODATARESPONSE.class);
  }

 /**
  * Convert an instance of SPOTINSTRUMENTHISTODATARESPONSE to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

