/*
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 * CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: data@cryptocompare.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error;
import org.openapitools.client.model.GENERICRESPONSE;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ReferenceRatesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReferenceRatesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReferenceRatesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for indexCcV1HistoricalDays
     * @param market The exchange to obtain data from (required)
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
     * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME (optional)
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexCcV1HistoricalDaysCall(String market, String instrument, List<String> groups, Integer limit, Integer toTs, Integer aggregate, Boolean fill, String mappingPriority, String responseFormat, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/index/cc/v1/historical/days";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (market != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("market", market));
        }

        if (instrument != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("instrument", instrument));
        }

        if (groups != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "groups", groups));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (toTs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to_ts", toTs));
        }

        if (aggregate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aggregate", aggregate));
        }

        if (fill != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fill", fill));
        }

        if (mappingPriority != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mapping_priority", mappingPriority));
        }

        if (responseFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("response_format", responseFormat));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call indexCcV1HistoricalDaysValidateBeforeCall(String market, String instrument, List<String> groups, Integer limit, Integer toTs, Integer aggregate, Boolean fill, String mappingPriority, String responseFormat, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'market' is set
        if (market == null) {
            throw new ApiException("Missing the required parameter 'market' when calling indexCcV1HistoricalDays(Async)");
        }

        // verify the required parameter 'instrument' is set
        if (instrument == null) {
            throw new ApiException("Missing the required parameter 'instrument' when calling indexCcV1HistoricalDays(Async)");
        }

        return indexCcV1HistoricalDaysCall(market, instrument, groups, limit, toTs, aggregate, fill, mappingPriority, responseFormat, _callback);

    }

    /**
     * 
     * 
     * @param market The exchange to obtain data from (required)
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
     * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME (optional)
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @return GENERICRESPONSE
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public GENERICRESPONSE indexCcV1HistoricalDays(String market, String instrument, List<String> groups, Integer limit, Integer toTs, Integer aggregate, Boolean fill, String mappingPriority, String responseFormat) throws ApiException {
        ApiResponse<GENERICRESPONSE> localVarResp = indexCcV1HistoricalDaysWithHttpInfo(market, instrument, groups, limit, toTs, aggregate, fill, mappingPriority, responseFormat);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param market The exchange to obtain data from (required)
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
     * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME (optional)
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @return ApiResponse&lt;GENERICRESPONSE&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GENERICRESPONSE> indexCcV1HistoricalDaysWithHttpInfo(String market, String instrument, List<String> groups, Integer limit, Integer toTs, Integer aggregate, Boolean fill, String mappingPriority, String responseFormat) throws ApiException {
        okhttp3.Call localVarCall = indexCcV1HistoricalDaysValidateBeforeCall(market, instrument, groups, limit, toTs, aggregate, fill, mappingPriority, responseFormat, null);
        Type localVarReturnType = new TypeToken<GENERICRESPONSE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param market The exchange to obtain data from (required)
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
     * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME (optional)
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexCcV1HistoricalDaysAsync(String market, String instrument, List<String> groups, Integer limit, Integer toTs, Integer aggregate, Boolean fill, String mappingPriority, String responseFormat, final ApiCallback<GENERICRESPONSE> _callback) throws ApiException {

        okhttp3.Call localVarCall = indexCcV1HistoricalDaysValidateBeforeCall(market, instrument, groups, limit, toTs, aggregate, fill, mappingPriority, responseFormat, _callback);
        Type localVarReturnType = new TypeToken<GENERICRESPONSE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for indexCcV1HistoricalHours
     * @param market The exchange to obtain data from (required)
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
     * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME (optional)
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexCcV1HistoricalHoursCall(String market, String instrument, List<String> groups, Integer limit, Integer toTs, Integer aggregate, Boolean fill, String mappingPriority, String responseFormat, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/index/cc/v1/historical/hours";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (market != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("market", market));
        }

        if (instrument != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("instrument", instrument));
        }

        if (groups != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "groups", groups));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (toTs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to_ts", toTs));
        }

        if (aggregate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aggregate", aggregate));
        }

        if (fill != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fill", fill));
        }

        if (mappingPriority != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mapping_priority", mappingPriority));
        }

        if (responseFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("response_format", responseFormat));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call indexCcV1HistoricalHoursValidateBeforeCall(String market, String instrument, List<String> groups, Integer limit, Integer toTs, Integer aggregate, Boolean fill, String mappingPriority, String responseFormat, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'market' is set
        if (market == null) {
            throw new ApiException("Missing the required parameter 'market' when calling indexCcV1HistoricalHours(Async)");
        }

        // verify the required parameter 'instrument' is set
        if (instrument == null) {
            throw new ApiException("Missing the required parameter 'instrument' when calling indexCcV1HistoricalHours(Async)");
        }

        return indexCcV1HistoricalHoursCall(market, instrument, groups, limit, toTs, aggregate, fill, mappingPriority, responseFormat, _callback);

    }

    /**
     * 
     * 
     * @param market The exchange to obtain data from (required)
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
     * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME (optional)
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @return GENERICRESPONSE
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public GENERICRESPONSE indexCcV1HistoricalHours(String market, String instrument, List<String> groups, Integer limit, Integer toTs, Integer aggregate, Boolean fill, String mappingPriority, String responseFormat) throws ApiException {
        ApiResponse<GENERICRESPONSE> localVarResp = indexCcV1HistoricalHoursWithHttpInfo(market, instrument, groups, limit, toTs, aggregate, fill, mappingPriority, responseFormat);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param market The exchange to obtain data from (required)
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
     * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME (optional)
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @return ApiResponse&lt;GENERICRESPONSE&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GENERICRESPONSE> indexCcV1HistoricalHoursWithHttpInfo(String market, String instrument, List<String> groups, Integer limit, Integer toTs, Integer aggregate, Boolean fill, String mappingPriority, String responseFormat) throws ApiException {
        okhttp3.Call localVarCall = indexCcV1HistoricalHoursValidateBeforeCall(market, instrument, groups, limit, toTs, aggregate, fill, mappingPriority, responseFormat, null);
        Type localVarReturnType = new TypeToken<GENERICRESPONSE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param market The exchange to obtain data from (required)
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
     * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME (optional)
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexCcV1HistoricalHoursAsync(String market, String instrument, List<String> groups, Integer limit, Integer toTs, Integer aggregate, Boolean fill, String mappingPriority, String responseFormat, final ApiCallback<GENERICRESPONSE> _callback) throws ApiException {

        okhttp3.Call localVarCall = indexCcV1HistoricalHoursValidateBeforeCall(market, instrument, groups, limit, toTs, aggregate, fill, mappingPriority, responseFormat, _callback);
        Type localVarReturnType = new TypeToken<GENERICRESPONSE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for indexCcV1HistoricalMessages
     * @param market The exchange to obtain data from (required)
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
     * @param afterTs Unix timestamp in seconds of the earliest index message in the response (optional)
     * @param lastCcseq The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request. (optional, default to 0)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param limit The maximum number of index messages to return (optional, default to 100)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @param return404OnEmptyResponse If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexCcV1HistoricalMessagesCall(String market, String instrument, Integer afterTs, Integer lastCcseq, String mappingPriority, Integer limit, String responseFormat, Boolean return404OnEmptyResponse, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/index/cc/v1/historical/messages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (market != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("market", market));
        }

        if (instrument != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("instrument", instrument));
        }

        if (afterTs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after_ts", afterTs));
        }

        if (lastCcseq != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_ccseq", lastCcseq));
        }

        if (mappingPriority != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mapping_priority", mappingPriority));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (responseFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("response_format", responseFormat));
        }

        if (return404OnEmptyResponse != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("return_404_on_empty_response", return404OnEmptyResponse));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call indexCcV1HistoricalMessagesValidateBeforeCall(String market, String instrument, Integer afterTs, Integer lastCcseq, String mappingPriority, Integer limit, String responseFormat, Boolean return404OnEmptyResponse, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'market' is set
        if (market == null) {
            throw new ApiException("Missing the required parameter 'market' when calling indexCcV1HistoricalMessages(Async)");
        }

        // verify the required parameter 'instrument' is set
        if (instrument == null) {
            throw new ApiException("Missing the required parameter 'instrument' when calling indexCcV1HistoricalMessages(Async)");
        }

        return indexCcV1HistoricalMessagesCall(market, instrument, afterTs, lastCcseq, mappingPriority, limit, responseFormat, return404OnEmptyResponse, _callback);

    }

    /**
     * 
     * 
     * @param market The exchange to obtain data from (required)
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
     * @param afterTs Unix timestamp in seconds of the earliest index message in the response (optional)
     * @param lastCcseq The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request. (optional, default to 0)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param limit The maximum number of index messages to return (optional, default to 100)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @param return404OnEmptyResponse If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)
     * @return GENERICRESPONSE
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public GENERICRESPONSE indexCcV1HistoricalMessages(String market, String instrument, Integer afterTs, Integer lastCcseq, String mappingPriority, Integer limit, String responseFormat, Boolean return404OnEmptyResponse) throws ApiException {
        ApiResponse<GENERICRESPONSE> localVarResp = indexCcV1HistoricalMessagesWithHttpInfo(market, instrument, afterTs, lastCcseq, mappingPriority, limit, responseFormat, return404OnEmptyResponse);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param market The exchange to obtain data from (required)
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
     * @param afterTs Unix timestamp in seconds of the earliest index message in the response (optional)
     * @param lastCcseq The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request. (optional, default to 0)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param limit The maximum number of index messages to return (optional, default to 100)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @param return404OnEmptyResponse If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)
     * @return ApiResponse&lt;GENERICRESPONSE&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GENERICRESPONSE> indexCcV1HistoricalMessagesWithHttpInfo(String market, String instrument, Integer afterTs, Integer lastCcseq, String mappingPriority, Integer limit, String responseFormat, Boolean return404OnEmptyResponse) throws ApiException {
        okhttp3.Call localVarCall = indexCcV1HistoricalMessagesValidateBeforeCall(market, instrument, afterTs, lastCcseq, mappingPriority, limit, responseFormat, return404OnEmptyResponse, null);
        Type localVarReturnType = new TypeToken<GENERICRESPONSE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param market The exchange to obtain data from (required)
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
     * @param afterTs Unix timestamp in seconds of the earliest index message in the response (optional)
     * @param lastCcseq The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request. (optional, default to 0)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param limit The maximum number of index messages to return (optional, default to 100)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @param return404OnEmptyResponse If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexCcV1HistoricalMessagesAsync(String market, String instrument, Integer afterTs, Integer lastCcseq, String mappingPriority, Integer limit, String responseFormat, Boolean return404OnEmptyResponse, final ApiCallback<GENERICRESPONSE> _callback) throws ApiException {

        okhttp3.Call localVarCall = indexCcV1HistoricalMessagesValidateBeforeCall(market, instrument, afterTs, lastCcseq, mappingPriority, limit, responseFormat, return404OnEmptyResponse, _callback);
        Type localVarReturnType = new TypeToken<GENERICRESPONSE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for indexCcV1HistoricalMessagesHour
     * @param market The exchange to obtain data from (required)
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
     * @param hourTs Unix timestamp in seconds for the hour containing the index updates you are interested in. You can pass any timestamp in the hour but we will round it down the the full hour timestmap and return all index updates in that hour. (optional)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @param return404OnEmptyResponse If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexCcV1HistoricalMessagesHourCall(String market, String instrument, Integer hourTs, String mappingPriority, String responseFormat, Boolean return404OnEmptyResponse, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/index/cc/v1/historical/messages/hour";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (market != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("market", market));
        }

        if (instrument != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("instrument", instrument));
        }

        if (hourTs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hour_ts", hourTs));
        }

        if (mappingPriority != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mapping_priority", mappingPriority));
        }

        if (responseFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("response_format", responseFormat));
        }

        if (return404OnEmptyResponse != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("return_404_on_empty_response", return404OnEmptyResponse));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header", "api_key_query" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call indexCcV1HistoricalMessagesHourValidateBeforeCall(String market, String instrument, Integer hourTs, String mappingPriority, String responseFormat, Boolean return404OnEmptyResponse, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'market' is set
        if (market == null) {
            throw new ApiException("Missing the required parameter 'market' when calling indexCcV1HistoricalMessagesHour(Async)");
        }

        // verify the required parameter 'instrument' is set
        if (instrument == null) {
            throw new ApiException("Missing the required parameter 'instrument' when calling indexCcV1HistoricalMessagesHour(Async)");
        }

        return indexCcV1HistoricalMessagesHourCall(market, instrument, hourTs, mappingPriority, responseFormat, return404OnEmptyResponse, _callback);

    }

    /**
     * 
     * 
     * @param market The exchange to obtain data from (required)
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
     * @param hourTs Unix timestamp in seconds for the hour containing the index updates you are interested in. You can pass any timestamp in the hour but we will round it down the the full hour timestmap and return all index updates in that hour. (optional)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @param return404OnEmptyResponse If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)
     * @return GENERICRESPONSE
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public GENERICRESPONSE indexCcV1HistoricalMessagesHour(String market, String instrument, Integer hourTs, String mappingPriority, String responseFormat, Boolean return404OnEmptyResponse) throws ApiException {
        ApiResponse<GENERICRESPONSE> localVarResp = indexCcV1HistoricalMessagesHourWithHttpInfo(market, instrument, hourTs, mappingPriority, responseFormat, return404OnEmptyResponse);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param market The exchange to obtain data from (required)
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
     * @param hourTs Unix timestamp in seconds for the hour containing the index updates you are interested in. You can pass any timestamp in the hour but we will round it down the the full hour timestmap and return all index updates in that hour. (optional)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @param return404OnEmptyResponse If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)
     * @return ApiResponse&lt;GENERICRESPONSE&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GENERICRESPONSE> indexCcV1HistoricalMessagesHourWithHttpInfo(String market, String instrument, Integer hourTs, String mappingPriority, String responseFormat, Boolean return404OnEmptyResponse) throws ApiException {
        okhttp3.Call localVarCall = indexCcV1HistoricalMessagesHourValidateBeforeCall(market, instrument, hourTs, mappingPriority, responseFormat, return404OnEmptyResponse, null);
        Type localVarReturnType = new TypeToken<GENERICRESPONSE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param market The exchange to obtain data from (required)
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
     * @param hourTs Unix timestamp in seconds for the hour containing the index updates you are interested in. You can pass any timestamp in the hour but we will round it down the the full hour timestmap and return all index updates in that hour. (optional)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @param return404OnEmptyResponse If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexCcV1HistoricalMessagesHourAsync(String market, String instrument, Integer hourTs, String mappingPriority, String responseFormat, Boolean return404OnEmptyResponse, final ApiCallback<GENERICRESPONSE> _callback) throws ApiException {

        okhttp3.Call localVarCall = indexCcV1HistoricalMessagesHourValidateBeforeCall(market, instrument, hourTs, mappingPriority, responseFormat, return404OnEmptyResponse, _callback);
        Type localVarReturnType = new TypeToken<GENERICRESPONSE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for indexCcV1HistoricalMinutes
     * @param market The exchange to obtain data from (required)
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
     * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME (optional)
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexCcV1HistoricalMinutesCall(String market, String instrument, List<String> groups, Integer limit, Integer toTs, Integer aggregate, Boolean fill, String mappingPriority, String responseFormat, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/index/cc/v1/historical/minutes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (market != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("market", market));
        }

        if (instrument != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("instrument", instrument));
        }

        if (groups != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "groups", groups));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (toTs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to_ts", toTs));
        }

        if (aggregate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aggregate", aggregate));
        }

        if (fill != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fill", fill));
        }

        if (mappingPriority != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mapping_priority", mappingPriority));
        }

        if (responseFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("response_format", responseFormat));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call indexCcV1HistoricalMinutesValidateBeforeCall(String market, String instrument, List<String> groups, Integer limit, Integer toTs, Integer aggregate, Boolean fill, String mappingPriority, String responseFormat, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'market' is set
        if (market == null) {
            throw new ApiException("Missing the required parameter 'market' when calling indexCcV1HistoricalMinutes(Async)");
        }

        // verify the required parameter 'instrument' is set
        if (instrument == null) {
            throw new ApiException("Missing the required parameter 'instrument' when calling indexCcV1HistoricalMinutes(Async)");
        }

        return indexCcV1HistoricalMinutesCall(market, instrument, groups, limit, toTs, aggregate, fill, mappingPriority, responseFormat, _callback);

    }

    /**
     * 
     * 
     * @param market The exchange to obtain data from (required)
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
     * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME (optional)
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @return GENERICRESPONSE
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public GENERICRESPONSE indexCcV1HistoricalMinutes(String market, String instrument, List<String> groups, Integer limit, Integer toTs, Integer aggregate, Boolean fill, String mappingPriority, String responseFormat) throws ApiException {
        ApiResponse<GENERICRESPONSE> localVarResp = indexCcV1HistoricalMinutesWithHttpInfo(market, instrument, groups, limit, toTs, aggregate, fill, mappingPriority, responseFormat);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param market The exchange to obtain data from (required)
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
     * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME (optional)
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @return ApiResponse&lt;GENERICRESPONSE&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GENERICRESPONSE> indexCcV1HistoricalMinutesWithHttpInfo(String market, String instrument, List<String> groups, Integer limit, Integer toTs, Integer aggregate, Boolean fill, String mappingPriority, String responseFormat) throws ApiException {
        okhttp3.Call localVarCall = indexCcV1HistoricalMinutesValidateBeforeCall(market, instrument, groups, limit, toTs, aggregate, fill, mappingPriority, responseFormat, null);
        Type localVarReturnType = new TypeToken<GENERICRESPONSE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param market The exchange to obtain data from (required)
     * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
     * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME (optional)
     * @param limit The number of data points to return (optional, default to 30)
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexCcV1HistoricalMinutesAsync(String market, String instrument, List<String> groups, Integer limit, Integer toTs, Integer aggregate, Boolean fill, String mappingPriority, String responseFormat, final ApiCallback<GENERICRESPONSE> _callback) throws ApiException {

        okhttp3.Call localVarCall = indexCcV1HistoricalMinutesValidateBeforeCall(market, instrument, groups, limit, toTs, aggregate, fill, mappingPriority, responseFormat, _callback);
        Type localVarReturnType = new TypeToken<GENERICRESPONSE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for indexCcV1LatestInstrumentMetadata
     * @param market The exchange to obtain data from (required)
     * @param instruments A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first. (required)
     * @param groups When requesting metadata entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: STATUS,INTERNAL,GENERAL,MIGRATION,SOURCE (optional)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexCcV1LatestInstrumentMetadataCall(String market, List<String> instruments, List<String> groups, String mappingPriority, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/index/cc/v1/latest/instrument/metadata";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (market != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("market", market));
        }

        if (instruments != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "instruments", instruments));
        }

        if (groups != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "groups", groups));
        }

        if (mappingPriority != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mapping_priority", mappingPriority));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call indexCcV1LatestInstrumentMetadataValidateBeforeCall(String market, List<String> instruments, List<String> groups, String mappingPriority, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'market' is set
        if (market == null) {
            throw new ApiException("Missing the required parameter 'market' when calling indexCcV1LatestInstrumentMetadata(Async)");
        }

        // verify the required parameter 'instruments' is set
        if (instruments == null) {
            throw new ApiException("Missing the required parameter 'instruments' when calling indexCcV1LatestInstrumentMetadata(Async)");
        }

        return indexCcV1LatestInstrumentMetadataCall(market, instruments, groups, mappingPriority, _callback);

    }

    /**
     * 
     * 
     * @param market The exchange to obtain data from (required)
     * @param instruments A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first. (required)
     * @param groups When requesting metadata entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: STATUS,INTERNAL,GENERAL,MIGRATION,SOURCE (optional)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @return GENERICRESPONSE
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public GENERICRESPONSE indexCcV1LatestInstrumentMetadata(String market, List<String> instruments, List<String> groups, String mappingPriority) throws ApiException {
        ApiResponse<GENERICRESPONSE> localVarResp = indexCcV1LatestInstrumentMetadataWithHttpInfo(market, instruments, groups, mappingPriority);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param market The exchange to obtain data from (required)
     * @param instruments A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first. (required)
     * @param groups When requesting metadata entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: STATUS,INTERNAL,GENERAL,MIGRATION,SOURCE (optional)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @return ApiResponse&lt;GENERICRESPONSE&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GENERICRESPONSE> indexCcV1LatestInstrumentMetadataWithHttpInfo(String market, List<String> instruments, List<String> groups, String mappingPriority) throws ApiException {
        okhttp3.Call localVarCall = indexCcV1LatestInstrumentMetadataValidateBeforeCall(market, instruments, groups, mappingPriority, null);
        Type localVarReturnType = new TypeToken<GENERICRESPONSE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param market The exchange to obtain data from (required)
     * @param instruments A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first. (required)
     * @param groups When requesting metadata entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: STATUS,INTERNAL,GENERAL,MIGRATION,SOURCE (optional)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexCcV1LatestInstrumentMetadataAsync(String market, List<String> instruments, List<String> groups, String mappingPriority, final ApiCallback<GENERICRESPONSE> _callback) throws ApiException {

        okhttp3.Call localVarCall = indexCcV1LatestInstrumentMetadataValidateBeforeCall(market, instruments, groups, mappingPriority, _callback);
        Type localVarReturnType = new TypeToken<GENERICRESPONSE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for indexCcV1LatestTick
     * @param market The exchange to obtain data from (required)
     * @param instruments A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first. (required)
     * @param groups When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME (optional)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexCcV1LatestTickCall(String market, List<String> instruments, List<String> groups, String mappingPriority, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/index/cc/v1/latest/tick";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (market != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("market", market));
        }

        if (instruments != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "instruments", instruments));
        }

        if (groups != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "groups", groups));
        }

        if (mappingPriority != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mapping_priority", mappingPriority));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call indexCcV1LatestTickValidateBeforeCall(String market, List<String> instruments, List<String> groups, String mappingPriority, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'market' is set
        if (market == null) {
            throw new ApiException("Missing the required parameter 'market' when calling indexCcV1LatestTick(Async)");
        }

        // verify the required parameter 'instruments' is set
        if (instruments == null) {
            throw new ApiException("Missing the required parameter 'instruments' when calling indexCcV1LatestTick(Async)");
        }

        return indexCcV1LatestTickCall(market, instruments, groups, mappingPriority, _callback);

    }

    /**
     * 
     * 
     * @param market The exchange to obtain data from (required)
     * @param instruments A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first. (required)
     * @param groups When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME (optional)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @return GENERICRESPONSE
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public GENERICRESPONSE indexCcV1LatestTick(String market, List<String> instruments, List<String> groups, String mappingPriority) throws ApiException {
        ApiResponse<GENERICRESPONSE> localVarResp = indexCcV1LatestTickWithHttpInfo(market, instruments, groups, mappingPriority);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param market The exchange to obtain data from (required)
     * @param instruments A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first. (required)
     * @param groups When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME (optional)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @return ApiResponse&lt;GENERICRESPONSE&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GENERICRESPONSE> indexCcV1LatestTickWithHttpInfo(String market, List<String> instruments, List<String> groups, String mappingPriority) throws ApiException {
        okhttp3.Call localVarCall = indexCcV1LatestTickValidateBeforeCall(market, instruments, groups, mappingPriority, null);
        Type localVarReturnType = new TypeToken<GENERICRESPONSE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param market The exchange to obtain data from (required)
     * @param instruments A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first. (required)
     * @param groups When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME (optional)
     * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexCcV1LatestTickAsync(String market, List<String> instruments, List<String> groups, String mappingPriority, final ApiCallback<GENERICRESPONSE> _callback) throws ApiException {

        okhttp3.Call localVarCall = indexCcV1LatestTickValidateBeforeCall(market, instruments, groups, mappingPriority, _callback);
        Type localVarReturnType = new TypeToken<GENERICRESPONSE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for indexCcV1Markets
     * @param market The exchange to obtain data from (optional, default to )
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexCcV1MarketsCall(String market, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/index/cc/v1/markets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (market != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("market", market));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call indexCcV1MarketsValidateBeforeCall(String market, final ApiCallback _callback) throws ApiException {
        return indexCcV1MarketsCall(market, _callback);

    }

    /**
     * 
     * 
     * @param market The exchange to obtain data from (optional, default to )
     * @return GENERICRESPONSE
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public GENERICRESPONSE indexCcV1Markets(String market) throws ApiException {
        ApiResponse<GENERICRESPONSE> localVarResp = indexCcV1MarketsWithHttpInfo(market);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param market The exchange to obtain data from (optional, default to )
     * @return ApiResponse&lt;GENERICRESPONSE&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GENERICRESPONSE> indexCcV1MarketsWithHttpInfo(String market) throws ApiException {
        okhttp3.Call localVarCall = indexCcV1MarketsValidateBeforeCall(market, null);
        Type localVarReturnType = new TypeToken<GENERICRESPONSE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param market The exchange to obtain data from (optional, default to )
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexCcV1MarketsAsync(String market, final ApiCallback<GENERICRESPONSE> _callback) throws ApiException {

        okhttp3.Call localVarCall = indexCcV1MarketsValidateBeforeCall(market, _callback);
        Type localVarReturnType = new TypeToken<GENERICRESPONSE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for indexCcV1MarketsInstruments
     * @param market The exchange to obtain data from (optional, default to )
     * @param instrument The mapped instrument to retrieve on a specific market. (optional, default to )
     * @param instrumentStatus The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexCcV1MarketsInstrumentsCall(String market, String instrument, List<String> instrumentStatus, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/index/cc/v1/markets/instruments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (market != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("market", market));
        }

        if (instrument != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("instrument", instrument));
        }

        if (instrumentStatus != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "instrument_status", instrumentStatus));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call indexCcV1MarketsInstrumentsValidateBeforeCall(String market, String instrument, List<String> instrumentStatus, final ApiCallback _callback) throws ApiException {
        return indexCcV1MarketsInstrumentsCall(market, instrument, instrumentStatus, _callback);

    }

    /**
     * 
     * 
     * @param market The exchange to obtain data from (optional, default to )
     * @param instrument The mapped instrument to retrieve on a specific market. (optional, default to )
     * @param instrumentStatus The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED (optional)
     * @return GENERICRESPONSE
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public GENERICRESPONSE indexCcV1MarketsInstruments(String market, String instrument, List<String> instrumentStatus) throws ApiException {
        ApiResponse<GENERICRESPONSE> localVarResp = indexCcV1MarketsInstrumentsWithHttpInfo(market, instrument, instrumentStatus);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param market The exchange to obtain data from (optional, default to )
     * @param instrument The mapped instrument to retrieve on a specific market. (optional, default to )
     * @param instrumentStatus The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED (optional)
     * @return ApiResponse&lt;GENERICRESPONSE&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GENERICRESPONSE> indexCcV1MarketsInstrumentsWithHttpInfo(String market, String instrument, List<String> instrumentStatus) throws ApiException {
        okhttp3.Call localVarCall = indexCcV1MarketsInstrumentsValidateBeforeCall(market, instrument, instrumentStatus, null);
        Type localVarReturnType = new TypeToken<GENERICRESPONSE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param market The exchange to obtain data from (optional, default to )
     * @param instrument The mapped instrument to retrieve on a specific market. (optional, default to )
     * @param instrumentStatus The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexCcV1MarketsInstrumentsAsync(String market, String instrument, List<String> instrumentStatus, final ApiCallback<GENERICRESPONSE> _callback) throws ApiException {

        okhttp3.Call localVarCall = indexCcV1MarketsInstrumentsValidateBeforeCall(market, instrument, instrumentStatus, _callback);
        Type localVarReturnType = new TypeToken<GENERICRESPONSE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for indexCcV1MarketsInstrumentsUnmapped
     * @param market The exchange to obtain data from (optional, default to )
     * @param instrument The unmapped instrument to retrieve on a specific market. (optional, default to )
     * @param instrumentStatus The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexCcV1MarketsInstrumentsUnmappedCall(String market, String instrument, List<String> instrumentStatus, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/index/cc/v1/markets/instruments/unmapped";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (market != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("market", market));
        }

        if (instrument != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("instrument", instrument));
        }

        if (instrumentStatus != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "instrument_status", instrumentStatus));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call indexCcV1MarketsInstrumentsUnmappedValidateBeforeCall(String market, String instrument, List<String> instrumentStatus, final ApiCallback _callback) throws ApiException {
        return indexCcV1MarketsInstrumentsUnmappedCall(market, instrument, instrumentStatus, _callback);

    }

    /**
     * 
     * 
     * @param market The exchange to obtain data from (optional, default to )
     * @param instrument The unmapped instrument to retrieve on a specific market. (optional, default to )
     * @param instrumentStatus The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED (optional)
     * @return GENERICRESPONSE
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public GENERICRESPONSE indexCcV1MarketsInstrumentsUnmapped(String market, String instrument, List<String> instrumentStatus) throws ApiException {
        ApiResponse<GENERICRESPONSE> localVarResp = indexCcV1MarketsInstrumentsUnmappedWithHttpInfo(market, instrument, instrumentStatus);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param market The exchange to obtain data from (optional, default to )
     * @param instrument The unmapped instrument to retrieve on a specific market. (optional, default to )
     * @param instrumentStatus The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED (optional)
     * @return ApiResponse&lt;GENERICRESPONSE&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GENERICRESPONSE> indexCcV1MarketsInstrumentsUnmappedWithHttpInfo(String market, String instrument, List<String> instrumentStatus) throws ApiException {
        okhttp3.Call localVarCall = indexCcV1MarketsInstrumentsUnmappedValidateBeforeCall(market, instrument, instrumentStatus, null);
        Type localVarReturnType = new TypeToken<GENERICRESPONSE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param market The exchange to obtain data from (optional, default to )
     * @param instrument The unmapped instrument to retrieve on a specific market. (optional, default to )
     * @param instrumentStatus The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexCcV1MarketsInstrumentsUnmappedAsync(String market, String instrument, List<String> instrumentStatus, final ApiCallback<GENERICRESPONSE> _callback) throws ApiException {

        okhttp3.Call localVarCall = indexCcV1MarketsInstrumentsUnmappedValidateBeforeCall(market, instrument, instrumentStatus, _callback);
        Type localVarReturnType = new TypeToken<GENERICRESPONSE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
