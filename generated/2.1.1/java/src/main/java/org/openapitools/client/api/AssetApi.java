/*
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 * CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: data@cryptocompare.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error;
import org.openapitools.client.model.GENERICRESPONSE;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AssetApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AssetApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AssetApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for assetV1DataByAddress
     * @param address  (required)
     * @param chainSymbol  (required)
     * @param groups  (optional, default to )
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetV1DataByAddressCall(String address, String chainSymbol, String groups, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/asset/v1/data/by/address";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (address != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("address", address));
        }

        if (chainSymbol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("chain_symbol", chainSymbol));
        }

        if (groups != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groups", groups));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetV1DataByAddressValidateBeforeCall(String address, String chainSymbol, String groups, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling assetV1DataByAddress(Async)");
        }

        // verify the required parameter 'chainSymbol' is set
        if (chainSymbol == null) {
            throw new ApiException("Missing the required parameter 'chainSymbol' when calling assetV1DataByAddress(Async)");
        }

        return assetV1DataByAddressCall(address, chainSymbol, groups, _callback);

    }

    /**
     * 
     * 
     * @param address  (required)
     * @param chainSymbol  (required)
     * @param groups  (optional, default to )
     * @return GENERICRESPONSE
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public GENERICRESPONSE assetV1DataByAddress(String address, String chainSymbol, String groups) throws ApiException {
        ApiResponse<GENERICRESPONSE> localVarResp = assetV1DataByAddressWithHttpInfo(address, chainSymbol, groups);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param address  (required)
     * @param chainSymbol  (required)
     * @param groups  (optional, default to )
     * @return ApiResponse&lt;GENERICRESPONSE&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GENERICRESPONSE> assetV1DataByAddressWithHttpInfo(String address, String chainSymbol, String groups) throws ApiException {
        okhttp3.Call localVarCall = assetV1DataByAddressValidateBeforeCall(address, chainSymbol, groups, null);
        Type localVarReturnType = new TypeToken<GENERICRESPONSE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param address  (required)
     * @param chainSymbol  (required)
     * @param groups  (optional, default to )
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetV1DataByAddressAsync(String address, String chainSymbol, String groups, final ApiCallback<GENERICRESPONSE> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetV1DataByAddressValidateBeforeCall(address, chainSymbol, groups, _callback);
        Type localVarReturnType = new TypeToken<GENERICRESPONSE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetV1DataById
     * @param assetId The asset id you are interested in (required)
     * @param groups  (optional, default to )
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetV1DataByIdCall(Integer assetId, String groups, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/asset/v1/data/by/id";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (assetId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_id", assetId));
        }

        if (groups != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groups", groups));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetV1DataByIdValidateBeforeCall(Integer assetId, String groups, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assetId' is set
        if (assetId == null) {
            throw new ApiException("Missing the required parameter 'assetId' when calling assetV1DataById(Async)");
        }

        return assetV1DataByIdCall(assetId, groups, _callback);

    }

    /**
     * 
     * 
     * @param assetId The asset id you are interested in (required)
     * @param groups  (optional, default to )
     * @return GENERICRESPONSE
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public GENERICRESPONSE assetV1DataById(Integer assetId, String groups) throws ApiException {
        ApiResponse<GENERICRESPONSE> localVarResp = assetV1DataByIdWithHttpInfo(assetId, groups);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param assetId The asset id you are interested in (required)
     * @param groups  (optional, default to )
     * @return ApiResponse&lt;GENERICRESPONSE&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GENERICRESPONSE> assetV1DataByIdWithHttpInfo(Integer assetId, String groups) throws ApiException {
        okhttp3.Call localVarCall = assetV1DataByIdValidateBeforeCall(assetId, groups, null);
        Type localVarReturnType = new TypeToken<GENERICRESPONSE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param assetId The asset id you are interested in (required)
     * @param groups  (optional, default to )
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetV1DataByIdAsync(Integer assetId, String groups, final ApiCallback<GENERICRESPONSE> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetV1DataByIdValidateBeforeCall(assetId, groups, _callback);
        Type localVarReturnType = new TypeToken<GENERICRESPONSE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetV1DataBySymbol
     * @param assetSymbol The asset symbol you are interested in (required)
     * @param groups  (optional, default to )
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetV1DataBySymbolCall(String assetSymbol, String groups, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/asset/v1/data/by/symbol";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (assetSymbol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_symbol", assetSymbol));
        }

        if (groups != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groups", groups));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetV1DataBySymbolValidateBeforeCall(String assetSymbol, String groups, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assetSymbol' is set
        if (assetSymbol == null) {
            throw new ApiException("Missing the required parameter 'assetSymbol' when calling assetV1DataBySymbol(Async)");
        }

        return assetV1DataBySymbolCall(assetSymbol, groups, _callback);

    }

    /**
     * 
     * 
     * @param assetSymbol The asset symbol you are interested in (required)
     * @param groups  (optional, default to )
     * @return GENERICRESPONSE
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public GENERICRESPONSE assetV1DataBySymbol(String assetSymbol, String groups) throws ApiException {
        ApiResponse<GENERICRESPONSE> localVarResp = assetV1DataBySymbolWithHttpInfo(assetSymbol, groups);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param assetSymbol The asset symbol you are interested in (required)
     * @param groups  (optional, default to )
     * @return ApiResponse&lt;GENERICRESPONSE&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GENERICRESPONSE> assetV1DataBySymbolWithHttpInfo(String assetSymbol, String groups) throws ApiException {
        okhttp3.Call localVarCall = assetV1DataBySymbolValidateBeforeCall(assetSymbol, groups, null);
        Type localVarReturnType = new TypeToken<GENERICRESPONSE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param assetSymbol The asset symbol you are interested in (required)
     * @param groups  (optional, default to )
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetV1DataBySymbolAsync(String assetSymbol, String groups, final ApiCallback<GENERICRESPONSE> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetV1DataBySymbolValidateBeforeCall(assetSymbol, groups, _callback);
        Type localVarReturnType = new TypeToken<GENERICRESPONSE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetV1TopList
     * @param page The page number for the request to get {page_size} coins at the time. (optional, default to 1)
     * @param pageSize The number of items returned per page (optional, default to 100)
     * @param assetType The asset class/type (optional, default to )
     * @param sortBy Sort by field ( CREATED_ON,UPDATED_ON,SYMBOL ) (optional, default to CREATED_ON)
     * @param sortDirection Sort direction ( DESC,ASC ) (optional, default to DESC)
     * @param groups  (optional, default to )
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetV1TopListCall(Integer page, Integer pageSize, String assetType, String sortBy, String sortDirection, String groups, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/asset/v1/top/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (assetType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_type", assetType));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (sortDirection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_direction", sortDirection));
        }

        if (groups != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groups", groups));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetV1TopListValidateBeforeCall(Integer page, Integer pageSize, String assetType, String sortBy, String sortDirection, String groups, final ApiCallback _callback) throws ApiException {
        return assetV1TopListCall(page, pageSize, assetType, sortBy, sortDirection, groups, _callback);

    }

    /**
     * 
     * 
     * @param page The page number for the request to get {page_size} coins at the time. (optional, default to 1)
     * @param pageSize The number of items returned per page (optional, default to 100)
     * @param assetType The asset class/type (optional, default to )
     * @param sortBy Sort by field ( CREATED_ON,UPDATED_ON,SYMBOL ) (optional, default to CREATED_ON)
     * @param sortDirection Sort direction ( DESC,ASC ) (optional, default to DESC)
     * @param groups  (optional, default to )
     * @return GENERICRESPONSE
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public GENERICRESPONSE assetV1TopList(Integer page, Integer pageSize, String assetType, String sortBy, String sortDirection, String groups) throws ApiException {
        ApiResponse<GENERICRESPONSE> localVarResp = assetV1TopListWithHttpInfo(page, pageSize, assetType, sortBy, sortDirection, groups);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param page The page number for the request to get {page_size} coins at the time. (optional, default to 1)
     * @param pageSize The number of items returned per page (optional, default to 100)
     * @param assetType The asset class/type (optional, default to )
     * @param sortBy Sort by field ( CREATED_ON,UPDATED_ON,SYMBOL ) (optional, default to CREATED_ON)
     * @param sortDirection Sort direction ( DESC,ASC ) (optional, default to DESC)
     * @param groups  (optional, default to )
     * @return ApiResponse&lt;GENERICRESPONSE&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GENERICRESPONSE> assetV1TopListWithHttpInfo(Integer page, Integer pageSize, String assetType, String sortBy, String sortDirection, String groups) throws ApiException {
        okhttp3.Call localVarCall = assetV1TopListValidateBeforeCall(page, pageSize, assetType, sortBy, sortDirection, groups, null);
        Type localVarReturnType = new TypeToken<GENERICRESPONSE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param page The page number for the request to get {page_size} coins at the time. (optional, default to 1)
     * @param pageSize The number of items returned per page (optional, default to 100)
     * @param assetType The asset class/type (optional, default to )
     * @param sortBy Sort by field ( CREATED_ON,UPDATED_ON,SYMBOL ) (optional, default to CREATED_ON)
     * @param sortDirection Sort direction ( DESC,ASC ) (optional, default to DESC)
     * @param groups  (optional, default to )
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response from the API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 error occurs when some of the data sent is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The 500 error occurs our API is up but does not know how to / can&#39;t handle the request. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetV1TopListAsync(Integer page, Integer pageSize, String assetType, String sortBy, String sortDirection, String groups, final ApiCallback<GENERICRESPONSE> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetV1TopListValidateBeforeCall(page, pageSize, assetType, sortBy, sortDirection, groups, _callback);
        Type localVarReturnType = new TypeToken<GENERICRESPONSE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
