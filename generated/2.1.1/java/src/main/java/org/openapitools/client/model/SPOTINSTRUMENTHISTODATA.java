/*
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 * CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: data@cryptocompare.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SPOTINSTRUMENTHISTODATA
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-03T11:55:58.153362Z[Etc/UTC]")
public class SPOTINSTRUMENTHISTODATA {
  public static final String SERIALIZED_NAME_B_A_S_E = "BASE";
  @SerializedName(SERIALIZED_NAME_B_A_S_E)
  private String BASE;

  public static final String SERIALIZED_NAME_C_L_O_S_E = "CLOSE";
  @SerializedName(SERIALIZED_NAME_C_L_O_S_E)
  private Integer CLOSE;

  public static final String SERIALIZED_NAME_F_I_R_S_T_T_R_A_D_E_P_R_I_C_E = "FIRST_TRADE_PRICE";
  @SerializedName(SERIALIZED_NAME_F_I_R_S_T_T_R_A_D_E_P_R_I_C_E)
  private Integer FIRST_TRADE_PRICE;

  public static final String SERIALIZED_NAME_F_I_R_S_T_T_R_A_D_E_T_I_M_E_S_T_A_M_P = "FIRST_TRADE_TIMESTAMP";
  @SerializedName(SERIALIZED_NAME_F_I_R_S_T_T_R_A_D_E_T_I_M_E_S_T_A_M_P)
  private Integer FIRST_TRADE_TIMESTAMP;

  public static final String SERIALIZED_NAME_H_I_G_H = "HIGH";
  @SerializedName(SERIALIZED_NAME_H_I_G_H)
  private Integer HIGH;

  public static final String SERIALIZED_NAME_H_I_G_H_T_R_A_D_E_P_R_I_C_E = "HIGH_TRADE_PRICE";
  @SerializedName(SERIALIZED_NAME_H_I_G_H_T_R_A_D_E_P_R_I_C_E)
  private Integer HIGH_TRADE_PRICE;

  public static final String SERIALIZED_NAME_H_I_G_H_T_R_A_D_E_T_I_M_E_S_T_A_M_P = "HIGH_TRADE_TIMESTAMP";
  @SerializedName(SERIALIZED_NAME_H_I_G_H_T_R_A_D_E_T_I_M_E_S_T_A_M_P)
  private Integer HIGH_TRADE_TIMESTAMP;

  public static final String SERIALIZED_NAME_I_N_S_T_R_U_M_E_N_T = "INSTRUMENT";
  @SerializedName(SERIALIZED_NAME_I_N_S_T_R_U_M_E_N_T)
  private String INSTRUMENT;

  public static final String SERIALIZED_NAME_L_A_S_T_T_R_A_D_E_P_R_I_C_E = "LAST_TRADE_PRICE";
  @SerializedName(SERIALIZED_NAME_L_A_S_T_T_R_A_D_E_P_R_I_C_E)
  private Integer LAST_TRADE_PRICE;

  public static final String SERIALIZED_NAME_L_A_S_T_T_R_A_D_E_T_I_M_E_S_T_A_M_P = "LAST_TRADE_TIMESTAMP";
  @SerializedName(SERIALIZED_NAME_L_A_S_T_T_R_A_D_E_T_I_M_E_S_T_A_M_P)
  private Integer LAST_TRADE_TIMESTAMP;

  public static final String SERIALIZED_NAME_L_O_W = "LOW";
  @SerializedName(SERIALIZED_NAME_L_O_W)
  private Integer LOW;

  public static final String SERIALIZED_NAME_L_O_W_T_R_A_D_E_P_R_I_C_E = "LOW_TRADE_PRICE";
  @SerializedName(SERIALIZED_NAME_L_O_W_T_R_A_D_E_P_R_I_C_E)
  private Integer LOW_TRADE_PRICE;

  public static final String SERIALIZED_NAME_L_O_W_T_R_A_D_E_T_I_M_E_S_T_A_M_P = "LOW_TRADE_TIMESTAMP";
  @SerializedName(SERIALIZED_NAME_L_O_W_T_R_A_D_E_T_I_M_E_S_T_A_M_P)
  private Integer LOW_TRADE_TIMESTAMP;

  public static final String SERIALIZED_NAME_M_A_P_P_E_D_I_N_S_T_R_U_M_E_N_T = "MAPPED_INSTRUMENT";
  @SerializedName(SERIALIZED_NAME_M_A_P_P_E_D_I_N_S_T_R_U_M_E_N_T)
  private String MAPPED_INSTRUMENT;

  public static final String SERIALIZED_NAME_M_A_R_K_E_T = "MARKET";
  @SerializedName(SERIALIZED_NAME_M_A_R_K_E_T)
  private String MARKET;

  public static final String SERIALIZED_NAME_O_P_E_N = "OPEN";
  @SerializedName(SERIALIZED_NAME_O_P_E_N)
  private Integer OPEN;

  public static final String SERIALIZED_NAME_Q_U_O_T_E = "QUOTE";
  @SerializedName(SERIALIZED_NAME_Q_U_O_T_E)
  private String QUOTE;

  public static final String SERIALIZED_NAME_Q_U_O_T_E_V_O_L_U_M_E = "QUOTE_VOLUME";
  @SerializedName(SERIALIZED_NAME_Q_U_O_T_E_V_O_L_U_M_E)
  private Integer QUOTE_VOLUME;

  public static final String SERIALIZED_NAME_Q_U_O_T_E_V_O_L_U_M_E_B_U_Y = "QUOTE_VOLUME_BUY";
  @SerializedName(SERIALIZED_NAME_Q_U_O_T_E_V_O_L_U_M_E_B_U_Y)
  private Integer QUOTE_VOLUME_BUY;

  public static final String SERIALIZED_NAME_Q_U_O_T_E_V_O_L_U_M_E_S_E_L_L = "QUOTE_VOLUME_SELL";
  @SerializedName(SERIALIZED_NAME_Q_U_O_T_E_V_O_L_U_M_E_S_E_L_L)
  private Integer QUOTE_VOLUME_SELL;

  public static final String SERIALIZED_NAME_Q_U_O_T_E_V_O_L_U_M_E_U_N_K_N_O_W_N = "QUOTE_VOLUME_UNKNOWN";
  @SerializedName(SERIALIZED_NAME_Q_U_O_T_E_V_O_L_U_M_E_U_N_K_N_O_W_N)
  private Integer QUOTE_VOLUME_UNKNOWN;

  public static final String SERIALIZED_NAME_T_I_M_E_S_T_A_M_P = "TIMESTAMP";
  @SerializedName(SERIALIZED_NAME_T_I_M_E_S_T_A_M_P)
  private Integer TIMESTAMP;

  public static final String SERIALIZED_NAME_T_O_T_A_L_T_R_A_D_E_S = "TOTAL_TRADES";
  @SerializedName(SERIALIZED_NAME_T_O_T_A_L_T_R_A_D_E_S)
  private Integer TOTAL_TRADES;

  public static final String SERIALIZED_NAME_T_O_T_A_L_T_R_A_D_E_S_B_U_Y = "TOTAL_TRADES_BUY";
  @SerializedName(SERIALIZED_NAME_T_O_T_A_L_T_R_A_D_E_S_B_U_Y)
  private Integer TOTAL_TRADES_BUY;

  public static final String SERIALIZED_NAME_T_O_T_A_L_T_R_A_D_E_S_S_E_L_L = "TOTAL_TRADES_SELL";
  @SerializedName(SERIALIZED_NAME_T_O_T_A_L_T_R_A_D_E_S_S_E_L_L)
  private Integer TOTAL_TRADES_SELL;

  public static final String SERIALIZED_NAME_T_O_T_A_L_T_R_A_D_E_S_U_N_K_N_O_W_N = "TOTAL_TRADES_UNKNOWN";
  @SerializedName(SERIALIZED_NAME_T_O_T_A_L_T_R_A_D_E_S_U_N_K_N_O_W_N)
  private Integer TOTAL_TRADES_UNKNOWN;

  public static final String SERIALIZED_NAME_T_Y_P_E = "TYPE";
  @SerializedName(SERIALIZED_NAME_T_Y_P_E)
  private String TYPE;

  public static final String SERIALIZED_NAME_U_N_I_T = "UNIT";
  @SerializedName(SERIALIZED_NAME_U_N_I_T)
  private String UNIT;

  public static final String SERIALIZED_NAME_V_O_L_U_M_E = "VOLUME";
  @SerializedName(SERIALIZED_NAME_V_O_L_U_M_E)
  private Integer VOLUME;

  public static final String SERIALIZED_NAME_V_O_L_U_M_E_B_U_Y = "VOLUME_BUY";
  @SerializedName(SERIALIZED_NAME_V_O_L_U_M_E_B_U_Y)
  private Integer VOLUME_BUY;

  public static final String SERIALIZED_NAME_V_O_L_U_M_E_S_E_L_L = "VOLUME_SELL";
  @SerializedName(SERIALIZED_NAME_V_O_L_U_M_E_S_E_L_L)
  private Integer VOLUME_SELL;

  public static final String SERIALIZED_NAME_V_O_L_U_M_E_U_N_K_N_O_W_N = "VOLUME_UNKNOWN";
  @SerializedName(SERIALIZED_NAME_V_O_L_U_M_E_U_N_K_N_O_W_N)
  private Integer VOLUME_UNKNOWN;

  public SPOTINSTRUMENTHISTODATA() {
  }

  public SPOTINSTRUMENTHISTODATA BASE(String BASE) {
    
    this.BASE = BASE;
    return this;
  }

   /**
   * The mapped from asset (base / symbol/ coin) (e.g. BTC). Only available on instruments that have mapping.
   * @return BASE
  **/
  @javax.annotation.Nullable

  public String getBASE() {
    return BASE;
  }


  public void setBASE(String BASE) {
    this.BASE = BASE;
  }


  public SPOTINSTRUMENTHISTODATA CLOSE(Integer CLOSE) {
    
    this.CLOSE = CLOSE;
    return this;
  }

   /**
   * The price of the last trade in this time period. If there were no trades in the time period, the open price will be given.
   * @return CLOSE
  **/
  @javax.annotation.Nullable

  public Integer getCLOSE() {
    return CLOSE;
  }


  public void setCLOSE(Integer CLOSE) {
    this.CLOSE = CLOSE;
  }


  public SPOTINSTRUMENTHISTODATA FIRST_TRADE_PRICE(Integer FIRST_TRADE_PRICE) {
    
    this.FIRST_TRADE_PRICE = FIRST_TRADE_PRICE;
    return this;
  }

   /**
   * The price of the first trade in the time period. This is only available when there is at least one trade in the time period.
   * @return FIRST_TRADE_PRICE
  **/
  @javax.annotation.Nullable

  public Integer getFIRSTTRADEPRICE() {
    return FIRST_TRADE_PRICE;
  }


  public void setFIRSTTRADEPRICE(Integer FIRST_TRADE_PRICE) {
    this.FIRST_TRADE_PRICE = FIRST_TRADE_PRICE;
  }


  public SPOTINSTRUMENTHISTODATA FIRST_TRADE_TIMESTAMP(Integer FIRST_TRADE_TIMESTAMP) {
    
    this.FIRST_TRADE_TIMESTAMP = FIRST_TRADE_TIMESTAMP;
    return this;
  }

   /**
   * The timestamp, in seconds, of the first trade in this time perio. This is only available when there is at least one trade in the time period.
   * @return FIRST_TRADE_TIMESTAMP
  **/
  @javax.annotation.Nullable

  public Integer getFIRSTTRADETIMESTAMP() {
    return FIRST_TRADE_TIMESTAMP;
  }


  public void setFIRSTTRADETIMESTAMP(Integer FIRST_TRADE_TIMESTAMP) {
    this.FIRST_TRADE_TIMESTAMP = FIRST_TRADE_TIMESTAMP;
  }


  public SPOTINSTRUMENTHISTODATA HIGH(Integer HIGH) {
    
    this.HIGH = HIGH;
    return this;
  }

   /**
   * The highest trade price in the time period. If there were no trades in the time period, the open price will be given.
   * @return HIGH
  **/
  @javax.annotation.Nullable

  public Integer getHIGH() {
    return HIGH;
  }


  public void setHIGH(Integer HIGH) {
    this.HIGH = HIGH;
  }


  public SPOTINSTRUMENTHISTODATA HIGH_TRADE_PRICE(Integer HIGH_TRADE_PRICE) {
    
    this.HIGH_TRADE_PRICE = HIGH_TRADE_PRICE;
    return this;
  }

   /**
   * The highest value of the trades in the time period. This is only available when there is at least one trade in the time period.
   * @return HIGH_TRADE_PRICE
  **/
  @javax.annotation.Nullable

  public Integer getHIGHTRADEPRICE() {
    return HIGH_TRADE_PRICE;
  }


  public void setHIGHTRADEPRICE(Integer HIGH_TRADE_PRICE) {
    this.HIGH_TRADE_PRICE = HIGH_TRADE_PRICE;
  }


  public SPOTINSTRUMENTHISTODATA HIGH_TRADE_TIMESTAMP(Integer HIGH_TRADE_TIMESTAMP) {
    
    this.HIGH_TRADE_TIMESTAMP = HIGH_TRADE_TIMESTAMP;
    return this;
  }

   /**
   * The timestamp, in seconds, of the highest trade in the time period. This is only available when there is at least one trade in the time period.
   * @return HIGH_TRADE_TIMESTAMP
  **/
  @javax.annotation.Nullable

  public Integer getHIGHTRADETIMESTAMP() {
    return HIGH_TRADE_TIMESTAMP;
  }


  public void setHIGHTRADETIMESTAMP(Integer HIGH_TRADE_TIMESTAMP) {
    this.HIGH_TRADE_TIMESTAMP = HIGH_TRADE_TIMESTAMP;
  }


  public SPOTINSTRUMENTHISTODATA INSTRUMENT(String INSTRUMENT) {
    
    this.INSTRUMENT = INSTRUMENT;
    return this;
  }

   /**
   * The unmapped instrument ID
   * @return INSTRUMENT
  **/
  @javax.annotation.Nullable

  public String getINSTRUMENT() {
    return INSTRUMENT;
  }


  public void setINSTRUMENT(String INSTRUMENT) {
    this.INSTRUMENT = INSTRUMENT;
  }


  public SPOTINSTRUMENTHISTODATA LAST_TRADE_PRICE(Integer LAST_TRADE_PRICE) {
    
    this.LAST_TRADE_PRICE = LAST_TRADE_PRICE;
    return this;
  }

   /**
   * The last trade price in the time period. This is only available when there is at least one trade in the time period.
   * @return LAST_TRADE_PRICE
  **/
  @javax.annotation.Nullable

  public Integer getLASTTRADEPRICE() {
    return LAST_TRADE_PRICE;
  }


  public void setLASTTRADEPRICE(Integer LAST_TRADE_PRICE) {
    this.LAST_TRADE_PRICE = LAST_TRADE_PRICE;
  }


  public SPOTINSTRUMENTHISTODATA LAST_TRADE_TIMESTAMP(Integer LAST_TRADE_TIMESTAMP) {
    
    this.LAST_TRADE_TIMESTAMP = LAST_TRADE_TIMESTAMP;
    return this;
  }

   /**
   * The timestamp, in seconds, of the last trade in this time period. This is only available when there is at least one trade in the time period.
   * @return LAST_TRADE_TIMESTAMP
  **/
  @javax.annotation.Nullable

  public Integer getLASTTRADETIMESTAMP() {
    return LAST_TRADE_TIMESTAMP;
  }


  public void setLASTTRADETIMESTAMP(Integer LAST_TRADE_TIMESTAMP) {
    this.LAST_TRADE_TIMESTAMP = LAST_TRADE_TIMESTAMP;
  }


  public SPOTINSTRUMENTHISTODATA LOW(Integer LOW) {
    
    this.LOW = LOW;
    return this;
  }

   /**
   * The lowest trade price in the time period. If there were no trades in the time period, the open price will be given.
   * @return LOW
  **/
  @javax.annotation.Nullable

  public Integer getLOW() {
    return LOW;
  }


  public void setLOW(Integer LOW) {
    this.LOW = LOW;
  }


  public SPOTINSTRUMENTHISTODATA LOW_TRADE_PRICE(Integer LOW_TRADE_PRICE) {
    
    this.LOW_TRADE_PRICE = LOW_TRADE_PRICE;
    return this;
  }

   /**
   * The lowest value of the trades in the time period. This is only available when there is at least one trade in the time period.
   * @return LOW_TRADE_PRICE
  **/
  @javax.annotation.Nullable

  public Integer getLOWTRADEPRICE() {
    return LOW_TRADE_PRICE;
  }


  public void setLOWTRADEPRICE(Integer LOW_TRADE_PRICE) {
    this.LOW_TRADE_PRICE = LOW_TRADE_PRICE;
  }


  public SPOTINSTRUMENTHISTODATA LOW_TRADE_TIMESTAMP(Integer LOW_TRADE_TIMESTAMP) {
    
    this.LOW_TRADE_TIMESTAMP = LOW_TRADE_TIMESTAMP;
    return this;
  }

   /**
   * The timestamp, in seconds, of the lowest trade in the time period. This is only available when there is at least one trade in the time period.
   * @return LOW_TRADE_TIMESTAMP
  **/
  @javax.annotation.Nullable

  public Integer getLOWTRADETIMESTAMP() {
    return LOW_TRADE_TIMESTAMP;
  }


  public void setLOWTRADETIMESTAMP(Integer LOW_TRADE_TIMESTAMP) {
    this.LOW_TRADE_TIMESTAMP = LOW_TRADE_TIMESTAMP;
  }


  public SPOTINSTRUMENTHISTODATA MAPPED_INSTRUMENT(String MAPPED_INSTRUMENT) {
    
    this.MAPPED_INSTRUMENT = MAPPED_INSTRUMENT;
    return this;
  }

   /**
   * The instrument ID, as derived from our mapping rules. This takes the form \&quot;BASE-QUOTE\&quot; (e.g. BTC-USD). Only available on instruments that have been mapped.
   * @return MAPPED_INSTRUMENT
  **/
  @javax.annotation.Nullable

  public String getMAPPEDINSTRUMENT() {
    return MAPPED_INSTRUMENT;
  }


  public void setMAPPEDINSTRUMENT(String MAPPED_INSTRUMENT) {
    this.MAPPED_INSTRUMENT = MAPPED_INSTRUMENT;
  }


  public SPOTINSTRUMENTHISTODATA MARKET(String MARKET) {
    
    this.MARKET = MARKET;
    return this;
  }

   /**
   * The market / exchange under consideration (e.g. gemini, kraken, coinbase, etc).
   * @return MARKET
  **/
  @javax.annotation.Nullable

  public String getMARKET() {
    return MARKET;
  }


  public void setMARKET(String MARKET) {
    this.MARKET = MARKET;
  }


  public SPOTINSTRUMENTHISTODATA OPEN(Integer OPEN) {
    
    this.OPEN = OPEN;
    return this;
  }

   /**
   * The open price for the historical period, this is based on the closest trade before the period start.
   * @return OPEN
  **/
  @javax.annotation.Nullable

  public Integer getOPEN() {
    return OPEN;
  }


  public void setOPEN(Integer OPEN) {
    this.OPEN = OPEN;
  }


  public SPOTINSTRUMENTHISTODATA QUOTE(String QUOTE) {
    
    this.QUOTE = QUOTE;
    return this;
  }

   /**
   * The mapped to asset (quote / counter symbol / coin) (e.g. USD). Only available on instruments that have mapping.
   * @return QUOTE
  **/
  @javax.annotation.Nullable

  public String getQUOTE() {
    return QUOTE;
  }


  public void setQUOTE(String QUOTE) {
    this.QUOTE = QUOTE;
  }


  public SPOTINSTRUMENTHISTODATA QUOTE_VOLUME(Integer QUOTE_VOLUME) {
    
    this.QUOTE_VOLUME = QUOTE_VOLUME;
    return this;
  }

   /**
   * The sum of all the trade volumes in the To asset (quote/counter symbol/coin) for the time period. If there were no trades in the time period, 0 will be returned.
   * @return QUOTE_VOLUME
  **/
  @javax.annotation.Nullable

  public Integer getQUOTEVOLUME() {
    return QUOTE_VOLUME;
  }


  public void setQUOTEVOLUME(Integer QUOTE_VOLUME) {
    this.QUOTE_VOLUME = QUOTE_VOLUME;
  }


  public SPOTINSTRUMENTHISTODATA QUOTE_VOLUME_BUY(Integer QUOTE_VOLUME_BUY) {
    
    this.QUOTE_VOLUME_BUY = QUOTE_VOLUME_BUY;
    return this;
  }

   /**
   * The sum of all the BUY trade volumes in the to asset (quote/counter symbol/coin) for the time period.
   * @return QUOTE_VOLUME_BUY
  **/
  @javax.annotation.Nullable

  public Integer getQUOTEVOLUMEBUY() {
    return QUOTE_VOLUME_BUY;
  }


  public void setQUOTEVOLUMEBUY(Integer QUOTE_VOLUME_BUY) {
    this.QUOTE_VOLUME_BUY = QUOTE_VOLUME_BUY;
  }


  public SPOTINSTRUMENTHISTODATA QUOTE_VOLUME_SELL(Integer QUOTE_VOLUME_SELL) {
    
    this.QUOTE_VOLUME_SELL = QUOTE_VOLUME_SELL;
    return this;
  }

   /**
   * The sum of all the SELL trade volumes in the To asset (quote/counter symbol/coin) for the time period.
   * @return QUOTE_VOLUME_SELL
  **/
  @javax.annotation.Nullable

  public Integer getQUOTEVOLUMESELL() {
    return QUOTE_VOLUME_SELL;
  }


  public void setQUOTEVOLUMESELL(Integer QUOTE_VOLUME_SELL) {
    this.QUOTE_VOLUME_SELL = QUOTE_VOLUME_SELL;
  }


  public SPOTINSTRUMENTHISTODATA QUOTE_VOLUME_UNKNOWN(Integer QUOTE_VOLUME_UNKNOWN) {
    
    this.QUOTE_VOLUME_UNKNOWN = QUOTE_VOLUME_UNKNOWN;
    return this;
  }

   /**
   * The sum of all the UNKNOWN trade volumes in the To asset (quote/counter symbol/coin) for the time period.
   * @return QUOTE_VOLUME_UNKNOWN
  **/
  @javax.annotation.Nullable

  public Integer getQUOTEVOLUMEUNKNOWN() {
    return QUOTE_VOLUME_UNKNOWN;
  }


  public void setQUOTEVOLUMEUNKNOWN(Integer QUOTE_VOLUME_UNKNOWN) {
    this.QUOTE_VOLUME_UNKNOWN = QUOTE_VOLUME_UNKNOWN;
  }


  public SPOTINSTRUMENTHISTODATA TIMESTAMP(Integer TIMESTAMP) {
    
    this.TIMESTAMP = TIMESTAMP;
    return this;
  }

   /**
   * The timestamp in seconds of the beginning of the histo period. For minute it would be every minute at the beginning of the minute, for hour it would be the start of the hour and for daily it is 00:00 GMT.
   * @return TIMESTAMP
  **/
  @javax.annotation.Nullable

  public Integer getTIMESTAMP() {
    return TIMESTAMP;
  }


  public void setTIMESTAMP(Integer TIMESTAMP) {
    this.TIMESTAMP = TIMESTAMP;
  }


  public SPOTINSTRUMENTHISTODATA TOTAL_TRADES(Integer TOTAL_TRADES) {
    
    this.TOTAL_TRADES = TOTAL_TRADES;
    return this;
  }

   /**
   * The total number of trades seen in this time period. If there were no trades in the time period, 0 will be returned.
   * @return TOTAL_TRADES
  **/
  @javax.annotation.Nullable

  public Integer getTOTALTRADES() {
    return TOTAL_TRADES;
  }


  public void setTOTALTRADES(Integer TOTAL_TRADES) {
    this.TOTAL_TRADES = TOTAL_TRADES;
  }


  public SPOTINSTRUMENTHISTODATA TOTAL_TRADES_BUY(Integer TOTAL_TRADES_BUY) {
    
    this.TOTAL_TRADES_BUY = TOTAL_TRADES_BUY;
    return this;
  }

   /**
   * The total number of BUY trades seen in this time period. If there were no trades in the time period, 0 will be returned.
   * @return TOTAL_TRADES_BUY
  **/
  @javax.annotation.Nullable

  public Integer getTOTALTRADESBUY() {
    return TOTAL_TRADES_BUY;
  }


  public void setTOTALTRADESBUY(Integer TOTAL_TRADES_BUY) {
    this.TOTAL_TRADES_BUY = TOTAL_TRADES_BUY;
  }


  public SPOTINSTRUMENTHISTODATA TOTAL_TRADES_SELL(Integer TOTAL_TRADES_SELL) {
    
    this.TOTAL_TRADES_SELL = TOTAL_TRADES_SELL;
    return this;
  }

   /**
   * The total number of SELL trades seen in this time period. If there were no trades in the time period, 0 will be returned.
   * @return TOTAL_TRADES_SELL
  **/
  @javax.annotation.Nullable

  public Integer getTOTALTRADESSELL() {
    return TOTAL_TRADES_SELL;
  }


  public void setTOTALTRADESSELL(Integer TOTAL_TRADES_SELL) {
    this.TOTAL_TRADES_SELL = TOTAL_TRADES_SELL;
  }


  public SPOTINSTRUMENTHISTODATA TOTAL_TRADES_UNKNOWN(Integer TOTAL_TRADES_UNKNOWN) {
    
    this.TOTAL_TRADES_UNKNOWN = TOTAL_TRADES_UNKNOWN;
    return this;
  }

   /**
   * The total number of UNKNOWN trades seen in this time period. If there were no trades in the time period, 0 will be returned.
   * @return TOTAL_TRADES_UNKNOWN
  **/
  @javax.annotation.Nullable

  public Integer getTOTALTRADESUNKNOWN() {
    return TOTAL_TRADES_UNKNOWN;
  }


  public void setTOTALTRADESUNKNOWN(Integer TOTAL_TRADES_UNKNOWN) {
    this.TOTAL_TRADES_UNKNOWN = TOTAL_TRADES_UNKNOWN;
  }


  public SPOTINSTRUMENTHISTODATA TYPE(String TYPE) {
    
    this.TYPE = TYPE;
    return this;
  }

   /**
   * The type of the message.
   * @return TYPE
  **/
  @javax.annotation.Nullable

  public String getTYPE() {
    return TYPE;
  }


  public void setTYPE(String TYPE) {
    this.TYPE = TYPE;
  }


  public SPOTINSTRUMENTHISTODATA UNIT(String UNIT) {
    
    this.UNIT = UNIT;
    return this;
  }

   /**
   * The unit of the historical period update: MINUTE for minute, HOUR for hour and DAY for day.
   * @return UNIT
  **/
  @javax.annotation.Nullable

  public String getUNIT() {
    return UNIT;
  }


  public void setUNIT(String UNIT) {
    this.UNIT = UNIT;
  }


  public SPOTINSTRUMENTHISTODATA VOLUME(Integer VOLUME) {
    
    this.VOLUME = VOLUME;
    return this;
  }

   /**
   * The sum of all the trade volumes in the from asset (base symbol / coin) for the time period. If there were no trades in the time period, 0 will be returned.
   * @return VOLUME
  **/
  @javax.annotation.Nullable

  public Integer getVOLUME() {
    return VOLUME;
  }


  public void setVOLUME(Integer VOLUME) {
    this.VOLUME = VOLUME;
  }


  public SPOTINSTRUMENTHISTODATA VOLUME_BUY(Integer VOLUME_BUY) {
    
    this.VOLUME_BUY = VOLUME_BUY;
    return this;
  }

   /**
   * The sum of all the BUY trade volumes in the from asset (base symbol / coin) for the time period.
   * @return VOLUME_BUY
  **/
  @javax.annotation.Nullable

  public Integer getVOLUMEBUY() {
    return VOLUME_BUY;
  }


  public void setVOLUMEBUY(Integer VOLUME_BUY) {
    this.VOLUME_BUY = VOLUME_BUY;
  }


  public SPOTINSTRUMENTHISTODATA VOLUME_SELL(Integer VOLUME_SELL) {
    
    this.VOLUME_SELL = VOLUME_SELL;
    return this;
  }

   /**
   * The sum of all the SELL trade volumes in the from asset (base symbol / coin) for the time period.
   * @return VOLUME_SELL
  **/
  @javax.annotation.Nullable

  public Integer getVOLUMESELL() {
    return VOLUME_SELL;
  }


  public void setVOLUMESELL(Integer VOLUME_SELL) {
    this.VOLUME_SELL = VOLUME_SELL;
  }


  public SPOTINSTRUMENTHISTODATA VOLUME_UNKNOWN(Integer VOLUME_UNKNOWN) {
    
    this.VOLUME_UNKNOWN = VOLUME_UNKNOWN;
    return this;
  }

   /**
   * The sum of all the UNKNOWN trade volumes in the from asset (base symbol / coin) for the time period.
   * @return VOLUME_UNKNOWN
  **/
  @javax.annotation.Nullable

  public Integer getVOLUMEUNKNOWN() {
    return VOLUME_UNKNOWN;
  }


  public void setVOLUMEUNKNOWN(Integer VOLUME_UNKNOWN) {
    this.VOLUME_UNKNOWN = VOLUME_UNKNOWN;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SPOTINSTRUMENTHISTODATA SPOT_INSTRUMENT_HISTO_DATA = (SPOTINSTRUMENTHISTODATA) o;
    return Objects.equals(this.BASE, SPOT_INSTRUMENT_HISTO_DATA.BASE) &&
        Objects.equals(this.CLOSE, SPOT_INSTRUMENT_HISTO_DATA.CLOSE) &&
        Objects.equals(this.FIRST_TRADE_PRICE, SPOT_INSTRUMENT_HISTO_DATA.FIRST_TRADE_PRICE) &&
        Objects.equals(this.FIRST_TRADE_TIMESTAMP, SPOT_INSTRUMENT_HISTO_DATA.FIRST_TRADE_TIMESTAMP) &&
        Objects.equals(this.HIGH, SPOT_INSTRUMENT_HISTO_DATA.HIGH) &&
        Objects.equals(this.HIGH_TRADE_PRICE, SPOT_INSTRUMENT_HISTO_DATA.HIGH_TRADE_PRICE) &&
        Objects.equals(this.HIGH_TRADE_TIMESTAMP, SPOT_INSTRUMENT_HISTO_DATA.HIGH_TRADE_TIMESTAMP) &&
        Objects.equals(this.INSTRUMENT, SPOT_INSTRUMENT_HISTO_DATA.INSTRUMENT) &&
        Objects.equals(this.LAST_TRADE_PRICE, SPOT_INSTRUMENT_HISTO_DATA.LAST_TRADE_PRICE) &&
        Objects.equals(this.LAST_TRADE_TIMESTAMP, SPOT_INSTRUMENT_HISTO_DATA.LAST_TRADE_TIMESTAMP) &&
        Objects.equals(this.LOW, SPOT_INSTRUMENT_HISTO_DATA.LOW) &&
        Objects.equals(this.LOW_TRADE_PRICE, SPOT_INSTRUMENT_HISTO_DATA.LOW_TRADE_PRICE) &&
        Objects.equals(this.LOW_TRADE_TIMESTAMP, SPOT_INSTRUMENT_HISTO_DATA.LOW_TRADE_TIMESTAMP) &&
        Objects.equals(this.MAPPED_INSTRUMENT, SPOT_INSTRUMENT_HISTO_DATA.MAPPED_INSTRUMENT) &&
        Objects.equals(this.MARKET, SPOT_INSTRUMENT_HISTO_DATA.MARKET) &&
        Objects.equals(this.OPEN, SPOT_INSTRUMENT_HISTO_DATA.OPEN) &&
        Objects.equals(this.QUOTE, SPOT_INSTRUMENT_HISTO_DATA.QUOTE) &&
        Objects.equals(this.QUOTE_VOLUME, SPOT_INSTRUMENT_HISTO_DATA.QUOTE_VOLUME) &&
        Objects.equals(this.QUOTE_VOLUME_BUY, SPOT_INSTRUMENT_HISTO_DATA.QUOTE_VOLUME_BUY) &&
        Objects.equals(this.QUOTE_VOLUME_SELL, SPOT_INSTRUMENT_HISTO_DATA.QUOTE_VOLUME_SELL) &&
        Objects.equals(this.QUOTE_VOLUME_UNKNOWN, SPOT_INSTRUMENT_HISTO_DATA.QUOTE_VOLUME_UNKNOWN) &&
        Objects.equals(this.TIMESTAMP, SPOT_INSTRUMENT_HISTO_DATA.TIMESTAMP) &&
        Objects.equals(this.TOTAL_TRADES, SPOT_INSTRUMENT_HISTO_DATA.TOTAL_TRADES) &&
        Objects.equals(this.TOTAL_TRADES_BUY, SPOT_INSTRUMENT_HISTO_DATA.TOTAL_TRADES_BUY) &&
        Objects.equals(this.TOTAL_TRADES_SELL, SPOT_INSTRUMENT_HISTO_DATA.TOTAL_TRADES_SELL) &&
        Objects.equals(this.TOTAL_TRADES_UNKNOWN, SPOT_INSTRUMENT_HISTO_DATA.TOTAL_TRADES_UNKNOWN) &&
        Objects.equals(this.TYPE, SPOT_INSTRUMENT_HISTO_DATA.TYPE) &&
        Objects.equals(this.UNIT, SPOT_INSTRUMENT_HISTO_DATA.UNIT) &&
        Objects.equals(this.VOLUME, SPOT_INSTRUMENT_HISTO_DATA.VOLUME) &&
        Objects.equals(this.VOLUME_BUY, SPOT_INSTRUMENT_HISTO_DATA.VOLUME_BUY) &&
        Objects.equals(this.VOLUME_SELL, SPOT_INSTRUMENT_HISTO_DATA.VOLUME_SELL) &&
        Objects.equals(this.VOLUME_UNKNOWN, SPOT_INSTRUMENT_HISTO_DATA.VOLUME_UNKNOWN);
  }

  @Override
  public int hashCode() {
    return Objects.hash(BASE, CLOSE, FIRST_TRADE_PRICE, FIRST_TRADE_TIMESTAMP, HIGH, HIGH_TRADE_PRICE, HIGH_TRADE_TIMESTAMP, INSTRUMENT, LAST_TRADE_PRICE, LAST_TRADE_TIMESTAMP, LOW, LOW_TRADE_PRICE, LOW_TRADE_TIMESTAMP, MAPPED_INSTRUMENT, MARKET, OPEN, QUOTE, QUOTE_VOLUME, QUOTE_VOLUME_BUY, QUOTE_VOLUME_SELL, QUOTE_VOLUME_UNKNOWN, TIMESTAMP, TOTAL_TRADES, TOTAL_TRADES_BUY, TOTAL_TRADES_SELL, TOTAL_TRADES_UNKNOWN, TYPE, UNIT, VOLUME, VOLUME_BUY, VOLUME_SELL, VOLUME_UNKNOWN);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SPOTINSTRUMENTHISTODATA {\n");
    sb.append("    BASE: ").append(toIndentedString(BASE)).append("\n");
    sb.append("    CLOSE: ").append(toIndentedString(CLOSE)).append("\n");
    sb.append("    FIRST_TRADE_PRICE: ").append(toIndentedString(FIRST_TRADE_PRICE)).append("\n");
    sb.append("    FIRST_TRADE_TIMESTAMP: ").append(toIndentedString(FIRST_TRADE_TIMESTAMP)).append("\n");
    sb.append("    HIGH: ").append(toIndentedString(HIGH)).append("\n");
    sb.append("    HIGH_TRADE_PRICE: ").append(toIndentedString(HIGH_TRADE_PRICE)).append("\n");
    sb.append("    HIGH_TRADE_TIMESTAMP: ").append(toIndentedString(HIGH_TRADE_TIMESTAMP)).append("\n");
    sb.append("    INSTRUMENT: ").append(toIndentedString(INSTRUMENT)).append("\n");
    sb.append("    LAST_TRADE_PRICE: ").append(toIndentedString(LAST_TRADE_PRICE)).append("\n");
    sb.append("    LAST_TRADE_TIMESTAMP: ").append(toIndentedString(LAST_TRADE_TIMESTAMP)).append("\n");
    sb.append("    LOW: ").append(toIndentedString(LOW)).append("\n");
    sb.append("    LOW_TRADE_PRICE: ").append(toIndentedString(LOW_TRADE_PRICE)).append("\n");
    sb.append("    LOW_TRADE_TIMESTAMP: ").append(toIndentedString(LOW_TRADE_TIMESTAMP)).append("\n");
    sb.append("    MAPPED_INSTRUMENT: ").append(toIndentedString(MAPPED_INSTRUMENT)).append("\n");
    sb.append("    MARKET: ").append(toIndentedString(MARKET)).append("\n");
    sb.append("    OPEN: ").append(toIndentedString(OPEN)).append("\n");
    sb.append("    QUOTE: ").append(toIndentedString(QUOTE)).append("\n");
    sb.append("    QUOTE_VOLUME: ").append(toIndentedString(QUOTE_VOLUME)).append("\n");
    sb.append("    QUOTE_VOLUME_BUY: ").append(toIndentedString(QUOTE_VOLUME_BUY)).append("\n");
    sb.append("    QUOTE_VOLUME_SELL: ").append(toIndentedString(QUOTE_VOLUME_SELL)).append("\n");
    sb.append("    QUOTE_VOLUME_UNKNOWN: ").append(toIndentedString(QUOTE_VOLUME_UNKNOWN)).append("\n");
    sb.append("    TIMESTAMP: ").append(toIndentedString(TIMESTAMP)).append("\n");
    sb.append("    TOTAL_TRADES: ").append(toIndentedString(TOTAL_TRADES)).append("\n");
    sb.append("    TOTAL_TRADES_BUY: ").append(toIndentedString(TOTAL_TRADES_BUY)).append("\n");
    sb.append("    TOTAL_TRADES_SELL: ").append(toIndentedString(TOTAL_TRADES_SELL)).append("\n");
    sb.append("    TOTAL_TRADES_UNKNOWN: ").append(toIndentedString(TOTAL_TRADES_UNKNOWN)).append("\n");
    sb.append("    TYPE: ").append(toIndentedString(TYPE)).append("\n");
    sb.append("    UNIT: ").append(toIndentedString(UNIT)).append("\n");
    sb.append("    VOLUME: ").append(toIndentedString(VOLUME)).append("\n");
    sb.append("    VOLUME_BUY: ").append(toIndentedString(VOLUME_BUY)).append("\n");
    sb.append("    VOLUME_SELL: ").append(toIndentedString(VOLUME_SELL)).append("\n");
    sb.append("    VOLUME_UNKNOWN: ").append(toIndentedString(VOLUME_UNKNOWN)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BASE");
    openapiFields.add("CLOSE");
    openapiFields.add("FIRST_TRADE_PRICE");
    openapiFields.add("FIRST_TRADE_TIMESTAMP");
    openapiFields.add("HIGH");
    openapiFields.add("HIGH_TRADE_PRICE");
    openapiFields.add("HIGH_TRADE_TIMESTAMP");
    openapiFields.add("INSTRUMENT");
    openapiFields.add("LAST_TRADE_PRICE");
    openapiFields.add("LAST_TRADE_TIMESTAMP");
    openapiFields.add("LOW");
    openapiFields.add("LOW_TRADE_PRICE");
    openapiFields.add("LOW_TRADE_TIMESTAMP");
    openapiFields.add("MAPPED_INSTRUMENT");
    openapiFields.add("MARKET");
    openapiFields.add("OPEN");
    openapiFields.add("QUOTE");
    openapiFields.add("QUOTE_VOLUME");
    openapiFields.add("QUOTE_VOLUME_BUY");
    openapiFields.add("QUOTE_VOLUME_SELL");
    openapiFields.add("QUOTE_VOLUME_UNKNOWN");
    openapiFields.add("TIMESTAMP");
    openapiFields.add("TOTAL_TRADES");
    openapiFields.add("TOTAL_TRADES_BUY");
    openapiFields.add("TOTAL_TRADES_SELL");
    openapiFields.add("TOTAL_TRADES_UNKNOWN");
    openapiFields.add("TYPE");
    openapiFields.add("UNIT");
    openapiFields.add("VOLUME");
    openapiFields.add("VOLUME_BUY");
    openapiFields.add("VOLUME_SELL");
    openapiFields.add("VOLUME_UNKNOWN");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SPOTINSTRUMENTHISTODATA
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SPOTINSTRUMENTHISTODATA.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SPOTINSTRUMENTHISTODATA is not found in the empty JSON string", SPOTINSTRUMENTHISTODATA.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!SPOTINSTRUMENTHISTODATA.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SPOTINSTRUMENTHISTODATA` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("BASE") != null && !jsonObj.get("BASE").isJsonNull()) && !jsonObj.get("BASE").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BASE` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BASE").toString()));
      }
      if ((jsonObj.get("INSTRUMENT") != null && !jsonObj.get("INSTRUMENT").isJsonNull()) && !jsonObj.get("INSTRUMENT").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `INSTRUMENT` to be a primitive type in the JSON string but got `%s`", jsonObj.get("INSTRUMENT").toString()));
      }
      if ((jsonObj.get("MAPPED_INSTRUMENT") != null && !jsonObj.get("MAPPED_INSTRUMENT").isJsonNull()) && !jsonObj.get("MAPPED_INSTRUMENT").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MAPPED_INSTRUMENT` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MAPPED_INSTRUMENT").toString()));
      }
      if ((jsonObj.get("MARKET") != null && !jsonObj.get("MARKET").isJsonNull()) && !jsonObj.get("MARKET").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MARKET` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MARKET").toString()));
      }
      if ((jsonObj.get("QUOTE") != null && !jsonObj.get("QUOTE").isJsonNull()) && !jsonObj.get("QUOTE").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `QUOTE` to be a primitive type in the JSON string but got `%s`", jsonObj.get("QUOTE").toString()));
      }
      if ((jsonObj.get("TYPE") != null && !jsonObj.get("TYPE").isJsonNull()) && !jsonObj.get("TYPE").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TYPE` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TYPE").toString()));
      }
      if ((jsonObj.get("UNIT") != null && !jsonObj.get("UNIT").isJsonNull()) && !jsonObj.get("UNIT").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UNIT` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UNIT").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SPOTINSTRUMENTHISTODATA.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SPOTINSTRUMENTHISTODATA' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SPOTINSTRUMENTHISTODATA> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SPOTINSTRUMENTHISTODATA.class));

       return (TypeAdapter<T>) new TypeAdapter<SPOTINSTRUMENTHISTODATA>() {
           @Override
           public void write(JsonWriter out, SPOTINSTRUMENTHISTODATA value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SPOTINSTRUMENTHISTODATA read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SPOTINSTRUMENTHISTODATA given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SPOTINSTRUMENTHISTODATA
  * @throws IOException if the JSON string is invalid with respect to SPOTINSTRUMENTHISTODATA
  */
  public static SPOTINSTRUMENTHISTODATA fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SPOTINSTRUMENTHISTODATA.class);
  }

 /**
  * Convert an instance of SPOTINSTRUMENTHISTODATA to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

