openapi: 3.0.3
info:
  contact:
    email: data@cryptocompare.com
    name: API Support
    url: https://cryptocompare.zendesk.com/hc/en-gb/requests/new
  description: "CryptoCompare is the world's leading digital asset data company, providing\
    \ services that cater to corporate, government and retail clients. Our main reference\
    \ index is widely recognized as a reliable benchmark, and we have been authorized\
    \ by the Financial Conduct Authority (FCA) in the United Kingdom to operate as\
    \ a benchmark administrator. In addition to catering to corporate, government,\
    \ and retail clients, we offer a range of services including comprehensive market\
    \ data for cryptocurrency exchanges in both the centralized and decentralized\
    \ finance sectors, as well as individual asset data on custodians, supported platforms,\
    \ and privacy solutions. Our offerings include price, volume, trade, and orderbook\
    \ updates, as well as historical OHLCV data."
  license:
    name: CryptoCompare API License Agreement
    url: https://www.cryptocompare.com/api-licence-agreement/
  termsOfService: https://www.cryptocompare.com/terms-conditions/
  title: "CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API\
    \ for the Cryptocurrency Industry"
  version: 2.1.1
servers:
- description: The production API load balancer URL for all cryptocurrency data queries.
  url: https://data-api.cryptocompare.com
tags:
- description: "Reference rates endpoints for the CryptoCompare cryptocurrency indices\
    \ provide access to real-time and historical data for a specific cryptocurrency\
    \ index or group of indices. These endpoints can be used to retrieve information\
    \ such as the current value, high and low values, and volume of a cryptocurrency\
    \ index, as well as historical data such as the open, high, low, close, and volume\
    \ values for a specific time period. This information can be useful for a variety\
    \ of purposes, including tracking the performance of a cryptocurrency index over\
    \ time, analyzing market trends, and conducting technical analysis. Cryptocurrency\
    \ indices are often used as benchmarks to measure the performance of a particular\
    \ cryptocurrency or group of cryptocurrencies, and reference rates endpoints can\
    \ provide valuable data for these purposes."
  name: Reference Rates
  x-icon: calculator
  x-id: IndexCC
- description: "Spot endpoints for the cryptocurrency market provide access to real-time\
    \ and historical data for the prices of specific cryptocurrencies or groups of\
    \ cryptocurrencies. These endpoints can be used to retrieve information such as\
    \ the current spot price of a cryptocurrency, as well as historical data such\
    \ as the open, high, low, close, and volume values for a specific time period.\
    \ This information can be useful for a variety of purposes, including tracking\
    \ the performance of specific cryptocurrencies over time, analyzing market trends,\
    \ and conducting technical analysis. Spot endpoints can provide valuable data\
    \ for anyone interested in the current and past prices of cryptocurrencies, as\
    \ well as anyone looking to buy or sell cryptocurrencies."
  name: Spot
  x-icon: btc
  x-id: Spot
- description: "Futures endpoints provide access to real-time and historical data\
    \ for the prices of futures contracts for specific cryptocurrencies or groups\
    \ of cryptocurrencies. These endpoints can be used to retrieve information such\
    \ as the current price of a futures contract, as well as historical data such\
    \ as the open, high, low, close, and volume values for a specific time period.\
    \ Futures contracts are financial instruments that allow users to buy or sell\
    \ an asset at a predetermined price at a future date, and the prices of these\
    \ contracts can be influenced by a variety of factors including market demand,\
    \ supply, and external events. Futures endpoints can provide valuable data for\
    \ anyone interested in the current and past prices of futures contracts for cryptocurrencies,\
    \ as well as anyone looking to buy or sell futures contracts."
  name: Futures
  x-icon: balance-scale
  x-id: Futures
- description: "A set of endpoints that provide aggregated metrics data about the\
    \ overall health of the cryptocurrency industry offer access to a range of data\
    \ points that can be used to measure the performance and vitality of the cryptocurrency\
    \ market. These endpoints can be used to retrieve information such as the total\
    \ market capitalization of all cryptocurrencies, the total volume of trades, the\
    \ number of active cryptocurrencies, and other metrics that can be used to gauge\
    \ the overall health of the industry. This information can be useful for anyone\
    \ interested in understanding the current state of the cryptocurrency market and\
    \ tracking its development over time."
  name: Overview
  x-icon: table
  x-id: Overview
- description: "A set of endpoints that provide aggregated news for the cryptocurrency\
    \ industry offer access to articles and other content related to the cryptocurrency\
    \ industry. These endpoints can be used to retrieve news articles about various\
    \ topics within the cryptocurrency industry, including new developments, trends,\
    \ and events. The news articles may be organized into categories, such as market\
    \ analysis, regulation, or technology, to help users easily find articles on specific\
    \ topics of interest. These endpoints can provide valuable information for anyone\
    \ interested in staying up to date with the latest news and developments in the\
    \ cryptocurrency industry."
  name: News
  x-icon: newspaper-o
  x-id: News
- description: "Asset endpoints provide access to data about specific assets, such\
    \ as cryptocurrencies or other digital assets. These endpoints can be used to\
    \ retrieve information about the asset, including its identifier, symbol, name,\
    \ description, and other metadata. Asset endpoints may also provide information\
    \ about the asset's type, such as whether it is a blockchain asset or a token,\
    \ as well as information about the supported blockhain platforms of the asset.\
    \ This information can be useful for anyone interested in learning more about\
    \ specific assets and their characteristics."
  name: Asset
  x-icon: sitemap
  x-id: Asset
paths:
  /asset/v1/data/by/address:
    description: Get overall asset info for a specific asset by smart contract address
      and chain symbol.
    get:
      deprecated: false
      operationId: asset_v1_data_by_address
      parameters:
      - deprecated: false
        explode: false
        in: query
        name: address
        required: true
        schema:
          maxLength: 500
          minLength: 1
          type: string
        style: form
      - deprecated: false
        explode: false
        in: query
        name: chain_symbol
        required: true
        schema:
          maxLength: 100
          minLength: 1
          type: string
        style: form
      - deprecated: false
        explode: false
        in: query
        name: groups
        required: false
        schema:
          default: ""
          maxLength: 2000
          minLength: 0
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GENERIC_RESPONSE'
          description: Success response from the API.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 400 error occurs when some of the data sent is malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 401 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 403 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 404 error can either be returned when some/all of parameters\
            \ sent are not found within our system. This could be beacuse parameters\
            \ like market, instrument, news source, symbol, asset_id etc. are invalid"
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 405 error occurs the user tries to use a http method (GET,POST,PUT\
            \ etc) that is not supported."
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 429 error occurs when you go over the API Key limit. Rate\
            \ limits are eforced on a second (resets every second), minute (resers\
            \ every minute), hour (resets every hour), day (resets every day) and\
            \ month (resets every month) granularity. You can upgrade your account\
            \ and access higher rate limits."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 500 error occurs our API is up but does not know how to
            / can't handle the request.
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 502 error occurs when our API is not running. This error
            is returned by our proxy / load balancer.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 503 error occurs when there is an issue with one of our
            data sources and we can't even return a partial answer.
      tags:
      - Asset
      x-section: Asset
      x-accepts: application/json
    summary: "Asset: By Smart Contract Address"
  /asset/v1/data/by/id:
    description: Get overall asset info for a specific asset by asset id.
    get:
      deprecated: false
      operationId: asset_v1_data_by_id
      parameters:
      - deprecated: false
        description: The asset id you are interested in
        explode: false
        in: query
        name: asset_id
        required: true
        schema:
          type: integer
        style: form
      - deprecated: false
        explode: false
        in: query
        name: groups
        required: false
        schema:
          default: ""
          maxLength: 2000
          minLength: 0
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GENERIC_RESPONSE'
          description: Success response from the API.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 400 error occurs when some of the data sent is malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 401 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 403 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 404 error can either be returned when some/all of parameters\
            \ sent are not found within our system. This could be beacuse parameters\
            \ like market, instrument, news source, symbol, asset_id etc. are invalid"
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 405 error occurs the user tries to use a http method (GET,POST,PUT\
            \ etc) that is not supported."
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 429 error occurs when you go over the API Key limit. Rate\
            \ limits are eforced on a second (resets every second), minute (resers\
            \ every minute), hour (resets every hour), day (resets every day) and\
            \ month (resets every month) granularity. You can upgrade your account\
            \ and access higher rate limits."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 500 error occurs our API is up but does not know how to
            / can't handle the request.
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 502 error occurs when our API is not running. This error
            is returned by our proxy / load balancer.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 503 error occurs when there is an issue with one of our
            data sources and we can't even return a partial answer.
      tags:
      - Asset
      x-section: Asset
      x-accepts: application/json
    summary: "Asset: By Id"
  /asset/v1/data/by/symbol:
    description: Get overall asset info for a specific asset by symbol.
    get:
      deprecated: false
      operationId: asset_v1_data_by_symbol
      parameters:
      - deprecated: false
        description: The asset symbol you are interested in
        explode: false
        in: query
        name: asset_symbol
        required: true
        schema:
          maxLength: 100
          minLength: 1
          type: string
        style: form
      - deprecated: false
        explode: false
        in: query
        name: groups
        required: false
        schema:
          default: ""
          maxLength: 2000
          minLength: 0
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GENERIC_RESPONSE'
          description: Success response from the API.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 400 error occurs when some of the data sent is malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 401 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 403 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 404 error can either be returned when some/all of parameters\
            \ sent are not found within our system. This could be beacuse parameters\
            \ like market, instrument, news source, symbol, asset_id etc. are invalid"
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 405 error occurs the user tries to use a http method (GET,POST,PUT\
            \ etc) that is not supported."
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 429 error occurs when you go over the API Key limit. Rate\
            \ limits are eforced on a second (resets every second), minute (resers\
            \ every minute), hour (resets every hour), day (resets every day) and\
            \ month (resets every month) granularity. You can upgrade your account\
            \ and access higher rate limits."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 500 error occurs our API is up but does not know how to
            / can't handle the request.
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 502 error occurs when our API is not running. This error
            is returned by our proxy / load balancer.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 503 error occurs when there is an issue with one of our
            data sources and we can't even return a partial answer.
      tags:
      - Asset
      x-section: Asset
      x-accepts: application/json
    summary: "Asset: By Symbol"
  /asset/v1/top/list:
    description: Return a list of asset data sorted and filtered based on requested
      parameters.
    get:
      deprecated: false
      operationId: asset_v1_top_list
      parameters:
      - deprecated: false
        description: "The page number for the request to get {page_size} coins at\
          \ the time."
        explode: false
        in: query
        name: page
        required: false
        schema:
          default: 1
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - deprecated: false
        description: The number of items returned per page
        explode: false
        in: query
        name: page_size
        required: false
        schema:
          default: 100
          maximum: 100
          minimum: 10
          type: integer
        style: form
      - deprecated: false
        description: The asset class/type
        explode: false
        in: query
        name: asset_type
        required: false
        schema:
          default: ""
          type: string
        style: form
      - deprecated: false
        description: "Sort by field ( CREATED_ON,UPDATED_ON,SYMBOL )"
        explode: false
        in: query
        name: sort_by
        required: false
        schema:
          default: CREATED_ON
          enum:
          - CREATED_ON
          - UPDATED_ON
          - SYMBOL
          type: string
        style: form
      - deprecated: false
        description: "Sort direction ( DESC,ASC )"
        explode: false
        in: query
        name: sort_direction
        required: false
        schema:
          default: DESC
          enum:
          - DESC
          - ASC
          type: string
        style: form
      - deprecated: false
        explode: false
        in: query
        name: groups
        required: false
        schema:
          default: ""
          maxLength: 2000
          minLength: 0
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GENERIC_RESPONSE'
          description: Success response from the API.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 400 error occurs when some of the data sent is malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 401 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 403 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 404 error can either be returned when some/all of parameters\
            \ sent are not found within our system. This could be beacuse parameters\
            \ like market, instrument, news source, symbol, asset_id etc. are invalid"
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 405 error occurs the user tries to use a http method (GET,POST,PUT\
            \ etc) that is not supported."
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 429 error occurs when you go over the API Key limit. Rate\
            \ limits are eforced on a second (resets every second), minute (resers\
            \ every minute), hour (resets every hour), day (resets every day) and\
            \ month (resets every month) granularity. You can upgrade your account\
            \ and access higher rate limits."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 500 error occurs our API is up but does not know how to
            / can't handle the request.
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 502 error occurs when our API is not running. This error
            is returned by our proxy / load balancer.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 503 error occurs when there is an issue with one of our
            data sources and we can't even return a partial answer.
      tags:
      - Asset
      x-section: Asset
      x-accepts: application/json
    summary: "Asset: Top List"
  /futures/v1/historical/days:
    description: ""
    get:
      deprecated: false
      operationId: futures_v1_historical_days
      parameters:
      - deprecated: false
        description: The exchange to obtain data from
        explode: false
        in: query
        name: market
        required: true
        schema:
          maxLength: 30
          minLength: 2
          type: string
        style: form
      - deprecated: false
        description: "The mapped or unmapped instrument to retrieve on a specific\
          \ market. We first check the instrument against the mapped list and then\
          \ against the unmapped list \n        but you can use the mapping_priority\
          \ param to check the unmapped list first."
        explode: false
        in: query
        name: instrument
        required: true
        schema:
          maxLength: 500
          minLength: 1
          type: string
        style: form
      - deprecated: false
        description: "When requesting historical entries you can fiter by specific\
          \ groups of interest. To do so just pass the groups of interest into the\
          \ URL as a comma separted list. If left empty it will get all data that\
          \ you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME"
        explode: false
        in: query
        name: groups
        required: false
        schema:
          default: []
          items:
            type: string
          type: array
        style: form
      - deprecated: false
        description: The number of data points to return
        explode: false
        in: query
        name: limit
        required: false
        schema:
          default: 30
          maximum: 5000
          minimum: 1
          type: integer
        style: form
      - deprecated: false
        description: "Returns historical data before this unix timestamp. If you want\
          \ to get all the available historical data, you can use limit=2000 and keep\
          \ going back in time using the to_ts param. You can then keep requesting\
          \ batches using: &limit=2000&to_ts={the earliest unix timestamp received}"
        explode: false
        in: query
        name: to_ts
        required: false
        schema:
          type: integer
        style: form
      - deprecated: false
        description: The number of points to aggregate for each returned value. E.g.
          passing 5 on a minute histo data endpoint will return data at 5 minute intervals.
          You are still limited to a maximum of 2000 minute points so the maximum
          you can get is 400 5 minutes interval entries
        explode: false
        in: query
        name: aggregate
        required: false
        schema:
          default: 1
          maximum: 30
          minimum: 1
          type: integer
        style: form
      - deprecated: false
        description: "Boolean value, if set to false or 0 we will not return data\
          \ points for periods with no trading activity."
        explode: false
        in: query
        name: fill
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - deprecated: false
        description: "The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST\
          \ by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST"
        explode: false
        in: query
        name: mapping_priority
        required: false
        schema:
          default: CHECK_MAPPED_FIRST
          enum:
          - CHECK_MAPPED_FIRST
          - CHECK_UNMAPPED_FIRST
          type: string
        style: form
      - deprecated: false
        description: "The format of the data response in uppercase. It can be one\
          \ of the following: JSON,CSV"
        explode: false
        in: query
        name: response_format
        required: false
        schema:
          default: JSON
          enum:
          - JSON
          - CSV
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GENERIC_RESPONSE'
          description: Success response from the API.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 400 error occurs when some of the data sent is malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 401 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 403 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 404 error can either be returned when some/all of parameters\
            \ sent are not found within our system. This could be beacuse parameters\
            \ like market, instrument, news source, symbol, asset_id etc. are invalid"
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 405 error occurs the user tries to use a http method (GET,POST,PUT\
            \ etc) that is not supported."
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 429 error occurs when you go over the API Key limit. Rate\
            \ limits are eforced on a second (resets every second), minute (resers\
            \ every minute), hour (resets every hour), day (resets every day) and\
            \ month (resets every month) granularity. You can upgrade your account\
            \ and access higher rate limits."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 500 error occurs our API is up but does not know how to
            / can't handle the request.
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 502 error occurs when our API is not running. This error
            is returned by our proxy / load balancer.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 503 error occurs when there is an issue with one of our
            data sources and we can't even return a partial answer.
      tags:
      - Futures
      x-section: Futures
      x-accepts: application/json
    summary: Futures (V1) OHLCV+ Days
  /futures/v1/historical/funding-rate-messages:
    description: Funding rate is only available for PERPETUAL instruments.
    get:
      deprecated: false
      operationId: futures_v1_historical_funding_rate_messages
      parameters:
      - deprecated: false
        description: The exchange to obtain data from
        explode: false
        in: query
        name: market
        required: true
        schema:
          maxLength: 30
          minLength: 2
          type: string
        style: form
      - deprecated: false
        description: "The mapped or unmapped instrument to retrieve on a specific\
          \ market. We first check the instrument against the mapped list and then\
          \ against the unmapped list \n        but you can use the mapping_priority\
          \ param to check the unmapped list first."
        explode: false
        in: query
        name: instrument
        required: true
        schema:
          maxLength: 500
          minLength: 1
          type: string
        style: form
      - deprecated: false
        description: Unix timestamp in seconds of the earliest funding rate message
          in the response
        explode: false
        in: query
        name: after_ts
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      - deprecated: false
        description: "The CCSEQ of the last message seen in the previous request.\
          \ Useful for pagination within messages that happened in the same second.\
          \ It will look though the messages in the same second and discard all messages\
          \ until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ\
          \ is not part of that second, it will discard all messages in the second\
          \ and only return messages starting from the next second onwards. When starting\
          \ an integration with our API, on the first request, you should either not\
          \ send a value for this paramater (defaults to 0 and does not discard any\
          \ messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ\
          \ from the last message in the response. Pass the TIMESTAMP in the after_ts\
          \ parameter and the CCSEQ in the last_ccseq parameter on your next request."
        explode: false
        in: query
        name: last_ccseq
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
        style: form
      - deprecated: false
        description: The maximum number of funding rate messages to return
        explode: false
        in: query
        name: limit
        required: false
        schema:
          default: 100
          maximum: 5000
          minimum: 1
          type: integer
        style: form
      - deprecated: false
        description: "The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST\
          \ by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST"
        explode: false
        in: query
        name: mapping_priority
        required: false
        schema:
          default: CHECK_MAPPED_FIRST
          enum:
          - CHECK_MAPPED_FIRST
          - CHECK_UNMAPPED_FIRST
          type: string
        style: form
      - deprecated: false
        description: "The format of the data response in uppercase. It can be one\
          \ of the following: JSON,CSV"
        explode: false
        in: query
        name: response_format
        required: false
        schema:
          default: JSON
          enum:
          - JSON
          - CSV
          type: string
        style: form
      - deprecated: false
        description: "If set to false (default) then when there are no items to return,\
          \ you will get a response status code of 200 and an empty JSON array or\
          \ a CSV file with just the header. If set to true then when there are no\
          \ items you will get a 404 status code for both JSON and CSV response_formats."
        explode: false
        in: query
        name: return_404_on_empty_response
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GENERIC_RESPONSE'
          description: Success response from the API.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 400 error occurs when some of the data sent is malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 401 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 403 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 404 error can either be returned when some/all of parameters\
            \ sent are not found within our system. This could be beacuse parameters\
            \ like market, instrument, news source, symbol, asset_id etc. are invalid"
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 405 error occurs the user tries to use a http method (GET,POST,PUT\
            \ etc) that is not supported."
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 429 error occurs when you go over the API Key limit. Rate\
            \ limits are eforced on a second (resets every second), minute (resers\
            \ every minute), hour (resets every hour), day (resets every day) and\
            \ month (resets every month) granularity. You can upgrade your account\
            \ and access higher rate limits."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 500 error occurs our API is up but does not know how to
            / can't handle the request.
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 502 error occurs when our API is not running. This error
            is returned by our proxy / load balancer.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 503 error occurs when there is an issue with one of our
            data sources and we can't even return a partial answer.
      security:
      - api_key_query: []
      - api_key_header: []
      tags:
      - Futures
      x-section: Futures
      x-accepts: application/json
    summary: Futures (V1) Historical Funding Rate Messages
  /futures/v1/historical/funding-rate-messages/hour:
    description: Funding rate is only available for PERPETUAL instruments. You should
      use this endpoint to get a full hour of historical funding rate messages when
      catching up. For latest funding rate messages use the /futures/v1/historical/funding-rate-messages
      endpoint.
    get:
      deprecated: false
      operationId: futures_v1_historical_funding_rate_messages_hour
      parameters:
      - deprecated: false
        description: The exchange to obtain data from
        explode: false
        in: query
        name: market
        required: true
        schema:
          maxLength: 30
          minLength: 2
          type: string
        style: form
      - deprecated: false
        description: "The mapped or unmapped instrument to retrieve on a specific\
          \ market. We first check the instrument against the mapped list and then\
          \ against the unmapped list \n        but you can use the mapping_priority\
          \ param to check the unmapped list first."
        explode: false
        in: query
        name: instrument
        required: true
        schema:
          maxLength: 500
          minLength: 1
          type: string
        style: form
      - deprecated: false
        description: Unix timestamp in seconds for the hour containing the funding
          rate updates you are interested in. You can pass any timestamp in the hour
          but we will round it down the the full hour timestmap and return all funding
          rate updates in that hour.
        explode: false
        in: query
        name: hour_ts
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      - deprecated: false
        description: "The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST\
          \ by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST"
        explode: false
        in: query
        name: mapping_priority
        required: false
        schema:
          default: CHECK_MAPPED_FIRST
          enum:
          - CHECK_MAPPED_FIRST
          - CHECK_UNMAPPED_FIRST
          type: string
        style: form
      - deprecated: false
        description: "The format of the data response in uppercase. It can be one\
          \ of the following: JSON,CSV"
        explode: false
        in: query
        name: response_format
        required: false
        schema:
          default: JSON
          enum:
          - JSON
          - CSV
          type: string
        style: form
      - deprecated: false
        description: "If set to false (default) then when there are no items to return,\
          \ you will get a response status code of 200 and an empty JSON array or\
          \ a CSV file with just the header. If set to true then when there are no\
          \ items you will get a 404 status code for both JSON and CSV response_formats."
        explode: false
        in: query
        name: return_404_on_empty_response
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GENERIC_RESPONSE'
          description: Success response from the API.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 400 error occurs when some of the data sent is malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 401 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 403 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 404 error can either be returned when some/all of parameters\
            \ sent are not found within our system. This could be beacuse parameters\
            \ like market, instrument, news source, symbol, asset_id etc. are invalid"
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 405 error occurs the user tries to use a http method (GET,POST,PUT\
            \ etc) that is not supported."
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 429 error occurs when you go over the API Key limit. Rate\
            \ limits are eforced on a second (resets every second), minute (resers\
            \ every minute), hour (resets every hour), day (resets every day) and\
            \ month (resets every month) granularity. You can upgrade your account\
            \ and access higher rate limits."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 500 error occurs our API is up but does not know how to
            / can't handle the request.
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 502 error occurs when our API is not running. This error
            is returned by our proxy / load balancer.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 503 error occurs when there is an issue with one of our
            data sources and we can't even return a partial answer.
      security:
      - api_key_query: []
      - api_key_header: []
      tags:
      - Futures
      x-section: Futures
      x-accepts: application/json
    summary: Futures (V1) Historical Funding Rate Messages by Hour Timestamp
  /futures/v1/historical/funding-rate/days:
    description: Funding rate is only available for PERPETUAL instruments.
    get:
      deprecated: false
      operationId: futures_v1_historical_funding_rate_days
      parameters:
      - deprecated: false
        description: The exchange to obtain data from
        explode: false
        in: query
        name: market
        required: true
        schema:
          maxLength: 30
          minLength: 2
          type: string
        style: form
      - deprecated: false
        description: "The mapped or unmapped instrument to retrieve on a specific\
          \ market. We first check the instrument against the mapped list and then\
          \ against the unmapped list \n        but you can use the mapping_priority\
          \ param to check the unmapped list first."
        explode: false
        in: query
        name: instrument
        required: true
        schema:
          maxLength: 500
          minLength: 1
          type: string
        style: form
      - deprecated: false
        description: "When requesting historical entries you can fiter by specific\
          \ groups of interest. To do so just pass the groups of interest into the\
          \ URL as a comma separted list. If left empty it will get all data that\
          \ you account is allowed to access. The groups available are: ID,MAPPING,VALUE,OHLC,OHLC_MESSAGE,MESSAGE"
        explode: false
        in: query
        name: groups
        required: false
        schema:
          default: []
          items:
            type: string
          type: array
        style: form
      - deprecated: false
        description: The number of data points to return
        explode: false
        in: query
        name: limit
        required: false
        schema:
          default: 30
          maximum: 5000
          minimum: 1
          type: integer
        style: form
      - deprecated: false
        description: "Returns historical data before this unix timestamp. If you want\
          \ to get all the available historical data, you can use limit=2000 and keep\
          \ going back in time using the to_ts param. You can then keep requesting\
          \ batches using: &limit=2000&to_ts={the earliest unix timestamp received}"
        explode: false
        in: query
        name: to_ts
        required: false
        schema:
          type: integer
        style: form
      - deprecated: false
        description: The number of points to aggregate for each returned value. E.g.
          passing 5 on a minute histo data endpoint will return data at 5 minute intervals.
          You are still limited to a maximum of 2000 minute points so the maximum
          you can get is 400 5 minutes interval entries
        explode: false
        in: query
        name: aggregate
        required: false
        schema:
          default: 1
          maximum: 30
          minimum: 1
          type: integer
        style: form
      - deprecated: false
        description: "Boolean value, if set to false or 0 we will not return data\
          \ points for periods with no trading activity."
        explode: false
        in: query
        name: fill
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - deprecated: false
        description: "The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST\
          \ by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST"
        explode: false
        in: query
        name: mapping_priority
        required: false
        schema:
          default: CHECK_MAPPED_FIRST
          enum:
          - CHECK_MAPPED_FIRST
          - CHECK_UNMAPPED_FIRST
          type: string
        style: form
      - deprecated: false
        description: "The format of the data response in uppercase. It can be one\
          \ of the following: JSON,CSV"
        explode: false
        in: query
        name: response_format
        required: false
        schema:
          default: JSON
          enum:
          - JSON
          - CSV
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GENERIC_RESPONSE'
          description: Success response from the API.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 400 error occurs when some of the data sent is malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 401 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 403 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 404 error can either be returned when some/all of parameters\
            \ sent are not found within our system. This could be beacuse parameters\
            \ like market, instrument, news source, symbol, asset_id etc. are invalid"
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 405 error occurs the user tries to use a http method (GET,POST,PUT\
            \ etc) that is not supported."
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 429 error occurs when you go over the API Key limit. Rate\
            \ limits are eforced on a second (resets every second), minute (resers\
            \ every minute), hour (resets every hour), day (resets every day) and\
            \ month (resets every month) granularity. You can upgrade your account\
            \ and access higher rate limits."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 500 error occurs our API is up but does not know how to
            / can't handle the request.
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 502 error occurs when our API is not running. This error
            is returned by our proxy / load balancer.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 503 error occurs when there is an issue with one of our
            data sources and we can't even return a partial answer.
      tags:
      - Futures
      x-section: Futures
      x-accepts: application/json
    summary: Futures (V1) OHLCV+ Funding Rate Days
  /futures/v1/historical/funding-rate/hours:
    description: Funding rate is only available for PERPETUAL instruments.
    get:
      deprecated: false
      operationId: futures_v1_historical_funding_rate_hours
      parameters:
      - deprecated: false
        description: The exchange to obtain data from
        explode: false
        in: query
        name: market
        required: true
        schema:
          maxLength: 30
          minLength: 2
          type: string
        style: form
      - deprecated: false
        description: "The mapped or unmapped instrument to retrieve on a specific\
          \ market. We first check the instrument against the mapped list and then\
          \ against the unmapped list \n        but you can use the mapping_priority\
          \ param to check the unmapped list first."
        explode: false
        in: query
        name: instrument
        required: true
        schema:
          maxLength: 500
          minLength: 1
          type: string
        style: form
      - deprecated: false
        description: "When requesting historical entries you can fiter by specific\
          \ groups of interest. To do so just pass the groups of interest into the\
          \ URL as a comma separted list. If left empty it will get all data that\
          \ you account is allowed to access. The groups available are: ID,MAPPING,VALUE,OHLC,OHLC_MESSAGE,MESSAGE"
        explode: false
        in: query
        name: groups
        required: false
        schema:
          default: []
          items:
            type: string
          type: array
        style: form
      - deprecated: false
        description: The number of data points to return
        explode: false
        in: query
        name: limit
        required: false
        schema:
          default: 30
          maximum: 2000
          minimum: 1
          type: integer
        style: form
      - deprecated: false
        description: "Returns historical data before this unix timestamp. If you want\
          \ to get all the available historical data, you can use limit=2000 and keep\
          \ going back in time using the to_ts param. You can then keep requesting\
          \ batches using: &limit=2000&to_ts={the earliest unix timestamp received}"
        explode: false
        in: query
        name: to_ts
        required: false
        schema:
          type: integer
        style: form
      - deprecated: false
        description: The number of points to aggregate for each returned value. E.g.
          passing 5 on a minute histo data endpoint will return data at 5 minute intervals.
          You are still limited to a maximum of 2000 minute points so the maximum
          you can get is 400 5 minutes interval entries
        explode: false
        in: query
        name: aggregate
        required: false
        schema:
          default: 1
          maximum: 30
          minimum: 1
          type: integer
        style: form
      - deprecated: false
        description: "Boolean value, if set to false or 0 we will not return data\
          \ points for periods with no trading activity."
        explode: false
        in: query
        name: fill
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - deprecated: false
        description: "The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST\
          \ by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST"
        explode: false
        in: query
        name: mapping_priority
        required: false
        schema:
          default: CHECK_MAPPED_FIRST
          enum:
          - CHECK_MAPPED_FIRST
          - CHECK_UNMAPPED_FIRST
          type: string
        style: form
      - deprecated: false
        description: "The format of the data response in uppercase. It can be one\
          \ of the following: JSON,CSV"
        explode: false
        in: query
        name: response_format
        required: false
        schema:
          default: JSON
          enum:
          - JSON
          - CSV
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GENERIC_RESPONSE'
          description: Success response from the API.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 400 error occurs when some of the data sent is malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 401 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 403 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 404 error can either be returned when some/all of parameters\
            \ sent are not found within our system. This could be beacuse parameters\
            \ like market, instrument, news source, symbol, asset_id etc. are invalid"
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 405 error occurs the user tries to use a http method (GET,POST,PUT\
            \ etc) that is not supported."
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 429 error occurs when you go over the API Key limit. Rate\
            \ limits are eforced on a second (resets every second), minute (resers\
            \ every minute), hour (resets every hour), day (resets every day) and\
            \ month (resets every month) granularity. You can upgrade your account\
            \ and access higher rate limits."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 500 error occurs our API is up but does not know how to
            / can't handle the request.
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 502 error occurs when our API is not running. This error
            is returned by our proxy / load balancer.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 503 error occurs when there is an issue with one of our
            data sources and we can't even return a partial answer.
      tags:
      - Futures
      x-section: Futures
      x-accepts: application/json
    summary: Futures (V1) OHLCV+ Funding Rate Hours
  /futures/v1/historical/funding-rate/minutes:
    description: Funding rate is only available for PERPETUAL instruments.
    get:
      deprecated: false
      operationId: futures_v1_historical_funding_rate_minutes
      parameters:
      - deprecated: false
        description: The exchange to obtain data from
        explode: false
        in: query
        name: market
        required: true
        schema:
          maxLength: 30
          minLength: 2
          type: string
        style: form
      - deprecated: false
        description: "The mapped or unmapped instrument to retrieve on a specific\
          \ market. We first check the instrument against the mapped list and then\
          \ against the unmapped list \n        but you can use the mapping_priority\
          \ param to check the unmapped list first."
        explode: false
        in: query
        name: instrument
        required: true
        schema:
          maxLength: 500
          minLength: 1
          type: string
        style: form
      - deprecated: false
        description: "When requesting historical entries you can fiter by specific\
          \ groups of interest. To do so just pass the groups of interest into the\
          \ URL as a comma separted list. If left empty it will get all data that\
          \ you account is allowed to access. The groups available are: ID,MAPPING,VALUE,OHLC,OHLC_MESSAGE,MESSAGE"
        explode: false
        in: query
        name: groups
        required: false
        schema:
          default: []
          items:
            type: string
          type: array
        style: form
      - deprecated: false
        description: The number of data points to return
        explode: false
        in: query
        name: limit
        required: false
        schema:
          default: 30
          maximum: 2000
          minimum: 1
          type: integer
        style: form
      - deprecated: false
        description: "Returns historical data before this unix timestamp. If you want\
          \ to get all the available historical data, you can use limit=2000 and keep\
          \ going back in time using the to_ts param. You can then keep requesting\
          \ batches using: &limit=2000&to_ts={the earliest unix timestamp received}"
        explode: false
        in: query
        name: to_ts
        required: false
        schema:
          type: integer
        style: form
      - deprecated: false
        description: The number of points to aggregate for each returned value. E.g.
          passing 5 on a minute histo data endpoint will return data at 5 minute intervals.
          You are still limited to a maximum of 2000 minute points so the maximum
          you can get is 400 5 minutes interval entries
        explode: false
        in: query
        name: aggregate
        required: false
        schema:
          default: 1
          maximum: 30
          minimum: 1
          type: integer
        style: form
      - deprecated: false
        description: "Boolean value, if set to false or 0 we will not return data\
          \ points for periods with no trading activity."
        explode: false
        in: query
        name: fill
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - deprecated: false
        description: "The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST\
          \ by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST"
        explode: false
        in: query
        name: mapping_priority
        required: false
        schema:
          default: CHECK_MAPPED_FIRST
          enum:
          - CHECK_MAPPED_FIRST
          - CHECK_UNMAPPED_FIRST
          type: string
        style: form
      - deprecated: false
        description: "The format of the data response in uppercase. It can be one\
          \ of the following: JSON,CSV"
        explode: false
        in: query
        name: response_format
        required: false
        schema:
          default: JSON
          enum:
          - JSON
          - CSV
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GENERIC_RESPONSE'
          description: Success response from the API.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 400 error occurs when some of the data sent is malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 401 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 403 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 404 error can either be returned when some/all of parameters\
            \ sent are not found within our system. This could be beacuse parameters\
            \ like market, instrument, news source, symbol, asset_id etc. are invalid"
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 405 error occurs the user tries to use a http method (GET,POST,PUT\
            \ etc) that is not supported."
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 429 error occurs when you go over the API Key limit. Rate\
            \ limits are eforced on a second (resets every second), minute (resers\
            \ every minute), hour (resets every hour), day (resets every day) and\
            \ month (resets every month) granularity. You can upgrade your account\
            \ and access higher rate limits."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 500 error occurs our API is up but does not know how to
            / can't handle the request.
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 502 error occurs when our API is not running. This error
            is returned by our proxy / load balancer.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 503 error occurs when there is an issue with one of our
            data sources and we can't even return a partial answer.
      tags:
      - Futures
      x-section: Futures
      x-accepts: application/json
    summary: Futures (V1) OHLCV+ Funding Rate Minutes
  /futures/v1/historical/hours:
    description: ""
    get:
      deprecated: false
      operationId: futures_v1_historical_hours
      parameters:
      - deprecated: false
        description: The exchange to obtain data from
        explode: false
        in: query
        name: market
        required: true
        schema:
          maxLength: 30
          minLength: 2
          type: string
        style: form
      - deprecated: false
        description: "The mapped or unmapped instrument to retrieve on a specific\
          \ market. We first check the instrument against the mapped list and then\
          \ against the unmapped list \n        but you can use the mapping_priority\
          \ param to check the unmapped list first."
        explode: false
        in: query
        name: instrument
        required: true
        schema:
          maxLength: 500
          minLength: 1
          type: string
        style: form
      - deprecated: false
        description: "When requesting historical entries you can fiter by specific\
          \ groups of interest. To do so just pass the groups of interest into the\
          \ URL as a comma separted list. If left empty it will get all data that\
          \ you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME"
        explode: false
        in: query
        name: groups
        required: false
        schema:
          default: []
          items:
            type: string
          type: array
        style: form
      - deprecated: false
        description: The number of data points to return
        explode: false
        in: query
        name: limit
        required: false
        schema:
          default: 30
          maximum: 2000
          minimum: 1
          type: integer
        style: form
      - deprecated: false
        description: "Returns historical data before this unix timestamp. If you want\
          \ to get all the available historical data, you can use limit=2000 and keep\
          \ going back in time using the to_ts param. You can then keep requesting\
          \ batches using: &limit=2000&to_ts={the earliest unix timestamp received}"
        explode: false
        in: query
        name: to_ts
        required: false
        schema:
          type: integer
        style: form
      - deprecated: false
        description: The number of points to aggregate for each returned value. E.g.
          passing 5 on a minute histo data endpoint will return data at 5 minute intervals.
          You are still limited to a maximum of 2000 minute points so the maximum
          you can get is 400 5 minutes interval entries
        explode: false
        in: query
        name: aggregate
        required: false
        schema:
          default: 1
          maximum: 30
          minimum: 1
          type: integer
        style: form
      - deprecated: false
        description: "Boolean value, if set to false or 0 we will not return data\
          \ points for periods with no trading activity."
        explode: false
        in: query
        name: fill
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - deprecated: false
        description: "The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST\
          \ by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST"
        explode: false
        in: query
        name: mapping_priority
        required: false
        schema:
          default: CHECK_MAPPED_FIRST
          enum:
          - CHECK_MAPPED_FIRST
          - CHECK_UNMAPPED_FIRST
          type: string
        style: form
      - deprecated: false
        description: "The format of the data response in uppercase. It can be one\
          \ of the following: JSON,CSV"
        explode: false
        in: query
        name: response_format
        required: false
        schema:
          default: JSON
          enum:
          - JSON
          - CSV
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GENERIC_RESPONSE'
          description: Success response from the API.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 400 error occurs when some of the data sent is malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 401 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 403 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 404 error can either be returned when some/all of parameters\
            \ sent are not found within our system. This could be beacuse parameters\
            \ like market, instrument, news source, symbol, asset_id etc. are invalid"
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 405 error occurs the user tries to use a http method (GET,POST,PUT\
            \ etc) that is not supported."
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 429 error occurs when you go over the API Key limit. Rate\
            \ limits are eforced on a second (resets every second), minute (resers\
            \ every minute), hour (resets every hour), day (resets every day) and\
            \ month (resets every month) granularity. You can upgrade your account\
            \ and access higher rate limits."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 500 error occurs our API is up but does not know how to
            / can't handle the request.
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 502 error occurs when our API is not running. This error
            is returned by our proxy / load balancer.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 503 error occurs when there is an issue with one of our
            data sources and we can't even return a partial answer.
      tags:
      - Futures
      x-section: Futures
      x-accepts: application/json
    summary: Futures (V1) OHLCV+ Hours
  /futures/v1/historical/minutes:
    description: ""
    get:
      deprecated: false
      operationId: futures_v1_historical_minutes
      parameters:
      - deprecated: false
        description: The exchange to obtain data from
        explode: false
        in: query
        name: market
        required: true
        schema:
          maxLength: 30
          minLength: 2
          type: string
        style: form
      - deprecated: false
        description: "The mapped or unmapped instrument to retrieve on a specific\
          \ market. We first check the instrument against the mapped list and then\
          \ against the unmapped list \n        but you can use the mapping_priority\
          \ param to check the unmapped list first."
        explode: false
        in: query
        name: instrument
        required: true
        schema:
          maxLength: 500
          minLength: 1
          type: string
        style: form
      - deprecated: false
        description: "When requesting historical entries you can fiter by specific\
          \ groups of interest. To do so just pass the groups of interest into the\
          \ URL as a comma separted list. If left empty it will get all data that\
          \ you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME"
        explode: false
        in: query
        name: groups
        required: false
        schema:
          default: []
          items:
            type: string
          type: array
        style: form
      - deprecated: false
        description: The number of data points to return
        explode: false
        in: query
        name: limit
        required: false
        schema:
          default: 30
          maximum: 2000
          minimum: 1
          type: integer
        style: form
      - deprecated: false
        description: "Returns historical data before this unix timestamp. If you want\
          \ to get all the available historical data, you can use limit=2000 and keep\
          \ going back in time using the to_ts param. You can then keep requesting\
          \ batches using: &limit=2000&to_ts={the earliest unix timestamp received}"
        explode: false
        in: query
        name: to_ts
        required: false
        schema:
          type: integer
        style: form
      - deprecated: false
        description: The number of points to aggregate for each returned value. E.g.
          passing 5 on a minute histo data endpoint will return data at 5 minute intervals.
          You are still limited to a maximum of 2000 minute points so the maximum
          you can get is 400 5 minutes interval entries
        explode: false
        in: query
        name: aggregate
        required: false
        schema:
          default: 1
          maximum: 30
          minimum: 1
          type: integer
        style: form
      - deprecated: false
        description: "Boolean value, if set to false or 0 we will not return data\
          \ points for periods with no trading activity."
        explode: false
        in: query
        name: fill
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - deprecated: false
        description: "The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST\
          \ by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST"
        explode: false
        in: query
        name: mapping_priority
        required: false
        schema:
          default: CHECK_MAPPED_FIRST
          enum:
          - CHECK_MAPPED_FIRST
          - CHECK_UNMAPPED_FIRST
          type: string
        style: form
      - deprecated: false
        description: "The format of the data response in uppercase. It can be one\
          \ of the following: JSON,CSV"
        explode: false
        in: query
        name: response_format
        required: false
        schema:
          default: JSON
          enum:
          - JSON
          - CSV
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GENERIC_RESPONSE'
          description: Success response from the API.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 400 error occurs when some of the data sent is malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 401 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 403 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 404 error can either be returned when some/all of parameters\
            \ sent are not found within our system. This could be beacuse parameters\
            \ like market, instrument, news source, symbol, asset_id etc. are invalid"
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 405 error occurs the user tries to use a http method (GET,POST,PUT\
            \ etc) that is not supported."
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 429 error occurs when you go over the API Key limit. Rate\
            \ limits are eforced on a second (resets every second), minute (resers\
            \ every minute), hour (resets every hour), day (resets every day) and\
            \ month (resets every month) granularity. You can upgrade your account\
            \ and access higher rate limits."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 500 error occurs our API is up but does not know how to
            / can't handle the request.
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 502 error occurs when our API is not running. This error
            is returned by our proxy / load balancer.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 503 error occurs when there is an issue with one of our
            data sources and we can't even return a partial answer.
      tags:
      - Futures
      x-section: Futures
      x-accepts: application/json
    summary: Futures (V1) OHLCV+ Minutes
  /futures/v1/historical/open-interest-messages:
    description: ""
    get:
      deprecated: false
      operationId: futures_v1_historical_open_interest_messages
      parameters:
      - deprecated: false
        description: The exchange to obtain data from
        explode: false
        in: query
        name: market
        required: true
        schema:
          maxLength: 30
          minLength: 2
          type: string
        style: form
      - deprecated: false
        description: "The mapped or unmapped instrument to retrieve on a specific\
          \ market. We first check the instrument against the mapped list and then\
          \ against the unmapped list \n        but you can use the mapping_priority\
          \ param to check the unmapped list first."
        explode: false
        in: query
        name: instrument
        required: true
        schema:
          maxLength: 500
          minLength: 1
          type: string
        style: form
      - deprecated: false
        description: Unix timestamp in seconds of the earliest open interest message
          in the response
        explode: false
        in: query
        name: after_ts
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      - deprecated: false
        description: "The CCSEQ of the last message seen in the previous request.\
          \ Useful for pagination within messages that happened in the same second.\
          \ It will look though the messages in the same second and discard all messages\
          \ until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ\
          \ is not part of that second, it will discard all messages in the second\
          \ and only return messages starting from the next second onwards. When starting\
          \ an integration with our API, on the first request, you should either not\
          \ send a value for this paramater (defaults to 0 and does not discard any\
          \ messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ\
          \ from the last message in the response. Pass the TIMESTAMP in the after_ts\
          \ parameter and the CCSEQ in the last_ccseq parameter on your next request."
        explode: false
        in: query
        name: last_ccseq
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
        style: form
      - deprecated: false
        description: The maximum number of open interest messages to return
        explode: false
        in: query
        name: limit
        required: false
        schema:
          default: 100
          maximum: 5000
          minimum: 1
          type: integer
        style: form
      - deprecated: false
        description: "The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST\
          \ by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST"
        explode: false
        in: query
        name: mapping_priority
        required: false
        schema:
          default: CHECK_MAPPED_FIRST
          enum:
          - CHECK_MAPPED_FIRST
          - CHECK_UNMAPPED_FIRST
          type: string
        style: form
      - deprecated: false
        description: "The format of the data response in uppercase. It can be one\
          \ of the following: JSON,CSV"
        explode: false
        in: query
        name: response_format
        required: false
        schema:
          default: JSON
          enum:
          - JSON
          - CSV
          type: string
        style: form
      - deprecated: false
        description: "If set to false (default) then when there are no items to return,\
          \ you will get a response status code of 200 and an empty JSON array or\
          \ a CSV file with just the header. If set to true then when there are no\
          \ items you will get a 404 status code for both JSON and CSV response_formats."
        explode: false
        in: query
        name: return_404_on_empty_response
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GENERIC_RESPONSE'
          description: Success response from the API.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 400 error occurs when some of the data sent is malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 401 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 403 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 404 error can either be returned when some/all of parameters\
            \ sent are not found within our system. This could be beacuse parameters\
            \ like market, instrument, news source, symbol, asset_id etc. are invalid"
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 405 error occurs the user tries to use a http method (GET,POST,PUT\
            \ etc) that is not supported."
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 429 error occurs when you go over the API Key limit. Rate\
            \ limits are eforced on a second (resets every second), minute (resers\
            \ every minute), hour (resets every hour), day (resets every day) and\
            \ month (resets every month) granularity. You can upgrade your account\
            \ and access higher rate limits."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 500 error occurs our API is up but does not know how to
            / can't handle the request.
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 502 error occurs when our API is not running. This error
            is returned by our proxy / load balancer.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 503 error occurs when there is an issue with one of our
            data sources and we can't even return a partial answer.
      security:
      - api_key_query: []
      - api_key_header: []
      tags:
      - Futures
      x-section: Futures
      x-accepts: application/json
    summary: Futures (V1) Historical Open Interest Messages
  /futures/v1/historical/open-interest-messages/hour:
    description: TYou should use this endpoint to get a full hour of historical open
      interest messages when catching up. For latest open interest messages use the
      /futures/v1/historical/open-interest-messages endpoint.
    get:
      deprecated: false
      operationId: futures_v1_historical_open_interest_messages_hour
      parameters:
      - deprecated: false
        description: The exchange to obtain data from
        explode: false
        in: query
        name: market
        required: true
        schema:
          maxLength: 30
          minLength: 2
          type: string
        style: form
      - deprecated: false
        description: "The mapped or unmapped instrument to retrieve on a specific\
          \ market. We first check the instrument against the mapped list and then\
          \ against the unmapped list \n        but you can use the mapping_priority\
          \ param to check the unmapped list first."
        explode: false
        in: query
        name: instrument
        required: true
        schema:
          maxLength: 500
          minLength: 1
          type: string
        style: form
      - deprecated: false
        description: Unix timestamp in seconds for the hour containing the open interest
          updates you are interested in. You can pass any timestamp in the hour but
          we will round it down the the full hour timestmap and return all open interest
          updates in that hour.
        explode: false
        in: query
        name: hour_ts
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      - deprecated: false
        description: "The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST\
          \ by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST"
        explode: false
        in: query
        name: mapping_priority
        required: false
        schema:
          default: CHECK_MAPPED_FIRST
          enum:
          - CHECK_MAPPED_FIRST
          - CHECK_UNMAPPED_FIRST
          type: string
        style: form
      - deprecated: false
        description: "The format of the data response in uppercase. It can be one\
          \ of the following: JSON,CSV"
        explode: false
        in: query
        name: response_format
        required: false
        schema:
          default: JSON
          enum:
          - JSON
          - CSV
          type: string
        style: form
      - deprecated: false
        description: "If set to false (default) then when there are no items to return,\
          \ you will get a response status code of 200 and an empty JSON array or\
          \ a CSV file with just the header. If set to true then when there are no\
          \ items you will get a 404 status code for both JSON and CSV response_formats."
        explode: false
        in: query
        name: return_404_on_empty_response
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GENERIC_RESPONSE'
          description: Success response from the API.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 400 error occurs when some of the data sent is malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 401 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 403 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 404 error can either be returned when some/all of parameters\
            \ sent are not found within our system. This could be beacuse parameters\
            \ like market, instrument, news source, symbol, asset_id etc. are invalid"
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 405 error occurs the user tries to use a http method (GET,POST,PUT\
            \ etc) that is not supported."
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 429 error occurs when you go over the API Key limit. Rate\
            \ limits are eforced on a second (resets every second), minute (resers\
            \ every minute), hour (resets every hour), day (resets every day) and\
            \ month (resets every month) granularity. You can upgrade your account\
            \ and access higher rate limits."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 500 error occurs our API is up but does not know how to
            / can't handle the request.
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 502 error occurs when our API is not running. This error
            is returned by our proxy / load balancer.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 503 error occurs when there is an issue with one of our
            data sources and we can't even return a partial answer.
      security:
      - api_key_query: []
      - api_key_header: []
      tags:
      - Futures
      x-section: Futures
      x-accepts: application/json
    summary: Futures (V1) Historical Open Interest Messages by Hour Timestamp
  /futures/v1/historical/open-interest/days:
    description: ""
    get:
      deprecated: false
      operationId: futures_v1_historical_open_interest_days
      parameters:
      - deprecated: false
        description: The exchange to obtain data from
        explode: false
        in: query
        name: market
        required: true
        schema:
          maxLength: 30
          minLength: 2
          type: string
        style: form
      - deprecated: false
        description: "The mapped or unmapped instrument to retrieve on a specific\
          \ market. We first check the instrument against the mapped list and then\
          \ against the unmapped list \n        but you can use the mapping_priority\
          \ param to check the unmapped list first."
        explode: false
        in: query
        name: instrument
        required: true
        schema:
          maxLength: 500
          minLength: 1
          type: string
        style: form
      - deprecated: false
        description: "When requesting historical entries you can fiter by specific\
          \ groups of interest. To do so just pass the groups of interest into the\
          \ URL as a comma separted list. If left empty it will get all data that\
          \ you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_MESSAGE,MESSAGE"
        explode: false
        in: query
        name: groups
        required: false
        schema:
          default: []
          items:
            type: string
          type: array
        style: form
      - deprecated: false
        description: The number of data points to return
        explode: false
        in: query
        name: limit
        required: false
        schema:
          default: 30
          maximum: 5000
          minimum: 1
          type: integer
        style: form
      - deprecated: false
        description: "Returns historical data before this unix timestamp. If you want\
          \ to get all the available historical data, you can use limit=2000 and keep\
          \ going back in time using the to_ts param. You can then keep requesting\
          \ batches using: &limit=2000&to_ts={the earliest unix timestamp received}"
        explode: false
        in: query
        name: to_ts
        required: false
        schema:
          type: integer
        style: form
      - deprecated: false
        description: The number of points to aggregate for each returned value. E.g.
          passing 5 on a minute histo data endpoint will return data at 5 minute intervals.
          You are still limited to a maximum of 2000 minute points so the maximum
          you can get is 400 5 minutes interval entries
        explode: false
        in: query
        name: aggregate
        required: false
        schema:
          default: 1
          maximum: 30
          minimum: 1
          type: integer
        style: form
      - deprecated: false
        description: "Boolean value, if set to false or 0 we will not return data\
          \ points for periods with no trading activity."
        explode: false
        in: query
        name: fill
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - deprecated: false
        description: "The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST\
          \ by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST"
        explode: false
        in: query
        name: mapping_priority
        required: false
        schema:
          default: CHECK_MAPPED_FIRST
          enum:
          - CHECK_MAPPED_FIRST
          - CHECK_UNMAPPED_FIRST
          type: string
        style: form
      - deprecated: false
        description: "The format of the data response in uppercase. It can be one\
          \ of the following: JSON,CSV"
        explode: false
        in: query
        name: response_format
        required: false
        schema:
          default: JSON
          enum:
          - JSON
          - CSV
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GENERIC_RESPONSE'
          description: Success response from the API.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 400 error occurs when some of the data sent is malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 401 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 403 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 404 error can either be returned when some/all of parameters\
            \ sent are not found within our system. This could be beacuse parameters\
            \ like market, instrument, news source, symbol, asset_id etc. are invalid"
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 405 error occurs the user tries to use a http method (GET,POST,PUT\
            \ etc) that is not supported."
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 429 error occurs when you go over the API Key limit. Rate\
            \ limits are eforced on a second (resets every second), minute (resers\
            \ every minute), hour (resets every hour), day (resets every day) and\
            \ month (resets every month) granularity. You can upgrade your account\
            \ and access higher rate limits."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 500 error occurs our API is up but does not know how to
            / can't handle the request.
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 502 error occurs when our API is not running. This error
            is returned by our proxy / load balancer.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 503 error occurs when there is an issue with one of our
            data sources and we can't even return a partial answer.
      tags:
      - Futures
      x-section: Futures
      x-accepts: application/json
    summary: Futures (V1) OHLCV+ Open Interest Days
  /futures/v1/historical/open-interest/hours:
    description: ""
    get:
      deprecated: false
      operationId: futures_v1_historical_open_interest_hours
      parameters:
      - deprecated: false
        description: The exchange to obtain data from
        explode: false
        in: query
        name: market
        required: true
        schema:
          maxLength: 30
          minLength: 2
          type: string
        style: form
      - deprecated: false
        description: "The mapped or unmapped instrument to retrieve on a specific\
          \ market. We first check the instrument against the mapped list and then\
          \ against the unmapped list \n        but you can use the mapping_priority\
          \ param to check the unmapped list first."
        explode: false
        in: query
        name: instrument
        required: true
        schema:
          maxLength: 500
          minLength: 1
          type: string
        style: form
      - deprecated: false
        description: "When requesting historical entries you can fiter by specific\
          \ groups of interest. To do so just pass the groups of interest into the\
          \ URL as a comma separted list. If left empty it will get all data that\
          \ you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_MESSAGE,MESSAGE"
        explode: false
        in: query
        name: groups
        required: false
        schema:
          default: []
          items:
            type: string
          type: array
        style: form
      - deprecated: false
        description: The number of data points to return
        explode: false
        in: query
        name: limit
        required: false
        schema:
          default: 30
          maximum: 2000
          minimum: 1
          type: integer
        style: form
      - deprecated: false
        description: "Returns historical data before this unix timestamp. If you want\
          \ to get all the available historical data, you can use limit=2000 and keep\
          \ going back in time using the to_ts param. You can then keep requesting\
          \ batches using: &limit=2000&to_ts={the earliest unix timestamp received}"
        explode: false
        in: query
        name: to_ts
        required: false
        schema:
          type: integer
        style: form
      - deprecated: false
        description: The number of points to aggregate for each returned value. E.g.
          passing 5 on a minute histo data endpoint will return data at 5 minute intervals.
          You are still limited to a maximum of 2000 minute points so the maximum
          you can get is 400 5 minutes interval entries
        explode: false
        in: query
        name: aggregate
        required: false
        schema:
          default: 1
          maximum: 30
          minimum: 1
          type: integer
        style: form
      - deprecated: false
        description: "Boolean value, if set to false or 0 we will not return data\
          \ points for periods with no trading activity."
        explode: false
        in: query
        name: fill
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - deprecated: false
        description: "The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST\
          \ by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST"
        explode: false
        in: query
        name: mapping_priority
        required: false
        schema:
          default: CHECK_MAPPED_FIRST
          enum:
          - CHECK_MAPPED_FIRST
          - CHECK_UNMAPPED_FIRST
          type: string
        style: form
      - deprecated: false
        description: "The format of the data response in uppercase. It can be one\
          \ of the following: JSON,CSV"
        explode: false
        in: query
        name: response_format
        required: false
        schema:
          default: JSON
          enum:
          - JSON
          - CSV
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GENERIC_RESPONSE'
          description: Success response from the API.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 400 error occurs when some of the data sent is malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 401 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 403 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 404 error can either be returned when some/all of parameters\
            \ sent are not found within our system. This could be beacuse parameters\
            \ like market, instrument, news source, symbol, asset_id etc. are invalid"
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 405 error occurs the user tries to use a http method (GET,POST,PUT\
            \ etc) that is not supported."
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 429 error occurs when you go over the API Key limit. Rate\
            \ limits are eforced on a second (resets every second), minute (resers\
            \ every minute), hour (resets every hour), day (resets every day) and\
            \ month (resets every month) granularity. You can upgrade your account\
            \ and access higher rate limits."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 500 error occurs our API is up but does not know how to
            / can't handle the request.
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 502 error occurs when our API is not running. This error
            is returned by our proxy / load balancer.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 503 error occurs when there is an issue with one of our
            data sources and we can't even return a partial answer.
      tags:
      - Futures
      x-section: Futures
      x-accepts: application/json
    summary: Futures (V1) OHLCV+ Open Interest Hours
  /futures/v1/historical/open-interest/minutes:
    description: ""
    get:
      deprecated: false
      operationId: futures_v1_historical_open_interest_minutes
      parameters:
      - deprecated: false
        description: The exchange to obtain data from
        explode: false
        in: query
        name: market
        required: true
        schema:
          maxLength: 30
          minLength: 2
          type: string
        style: form
      - deprecated: false
        description: "The mapped or unmapped instrument to retrieve on a specific\
          \ market. We first check the instrument against the mapped list and then\
          \ against the unmapped list \n        but you can use the mapping_priority\
          \ param to check the unmapped list first."
        explode: false
        in: query
        name: instrument
        required: true
        schema:
          maxLength: 500
          minLength: 1
          type: string
        style: form
      - deprecated: false
        description: "When requesting historical entries you can fiter by specific\
          \ groups of interest. To do so just pass the groups of interest into the\
          \ URL as a comma separted list. If left empty it will get all data that\
          \ you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_MESSAGE,MESSAGE"
        explode: false
        in: query
        name: groups
        required: false
        schema:
          default: []
          items:
            type: string
          type: array
        style: form
      - deprecated: false
        description: The number of data points to return
        explode: false
        in: query
        name: limit
        required: false
        schema:
          default: 30
          maximum: 2000
          minimum: 1
          type: integer
        style: form
      - deprecated: false
        description: "Returns historical data before this unix timestamp. If you want\
          \ to get all the available historical data, you can use limit=2000 and keep\
          \ going back in time using the to_ts param. You can then keep requesting\
          \ batches using: &limit=2000&to_ts={the earliest unix timestamp received}"
        explode: false
        in: query
        name: to_ts
        required: false
        schema:
          type: integer
        style: form
      - deprecated: false
        description: The number of points to aggregate for each returned value. E.g.
          passing 5 on a minute histo data endpoint will return data at 5 minute intervals.
          You are still limited to a maximum of 2000 minute points so the maximum
          you can get is 400 5 minutes interval entries
        explode: false
        in: query
        name: aggregate
        required: false
        schema:
          default: 1
          maximum: 30
          minimum: 1
          type: integer
        style: form
      - deprecated: false
        description: "Boolean value, if set to false or 0 we will not return data\
          \ points for periods with no trading activity."
        explode: false
        in: query
        name: fill
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - deprecated: false
        description: "The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST\
          \ by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST"
        explode: false
        in: query
        name: mapping_priority
        required: false
        schema:
          default: CHECK_MAPPED_FIRST
          enum:
          - CHECK_MAPPED_FIRST
          - CHECK_UNMAPPED_FIRST
          type: string
        style: form
      - deprecated: false
        description: "The format of the data response in uppercase. It can be one\
          \ of the following: JSON,CSV"
        explode: false
        in: query
        name: response_format
        required: false
        schema:
          default: JSON
          enum:
          - JSON
          - CSV
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GENERIC_RESPONSE'
          description: Success response from the API.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 400 error occurs when some of the data sent is malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 401 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 403 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 404 error can either be returned when some/all of parameters\
            \ sent are not found within our system. This could be beacuse parameters\
            \ like market, instrument, news source, symbol, asset_id etc. are invalid"
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 405 error occurs the user tries to use a http method (GET,POST,PUT\
            \ etc) that is not supported."
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 429 error occurs when you go over the API Key limit. Rate\
            \ limits are eforced on a second (resets every second), minute (resers\
            \ every minute), hour (resets every hour), day (resets every day) and\
            \ month (resets every month) granularity. You can upgrade your account\
            \ and access higher rate limits."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 500 error occurs our API is up but does not know how to
            / can't handle the request.
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 502 error occurs when our API is not running. This error
            is returned by our proxy / load balancer.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 503 error occurs when there is an issue with one of our
            data sources and we can't even return a partial answer.
      tags:
      - Futures
      x-section: Futures
      x-accepts: application/json
    summary: Futures (V1) OHLCV+ Open Interest Minutes
  /futures/v1/historical/trades:
    description: ""
    get:
      deprecated: false
      operationId: futures_v1_historical_trades
      parameters:
      - deprecated: false
        description: The exchange to obtain data from
        explode: false
        in: query
        name: market
        required: true
        schema:
          maxLength: 30
          minLength: 2
          type: string
        style: form
      - deprecated: false
        description: "The mapped or unmapped instrument to retrieve on a specific\
          \ market. We first check the instrument against the mapped list and then\
          \ against the unmapped list \n        but you can use the mapping_priority\
          \ param to check the unmapped list first."
        explode: false
        in: query
        name: instrument
        required: true
        schema:
          maxLength: 500
          minLength: 1
          type: string
        style: form
      - deprecated: false
        description: Unix timestamp in seconds of the earliest trade in the response.
        explode: false
        in: query
        name: after_ts
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      - deprecated: false
        description: "The CCSEQ of the last message seen in the previous request.\
          \ Useful for pagination within messages that happened in the same second.\
          \ It will look though the messages in the same second and discard all messages\
          \ until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ\
          \ is not part of that second, it will discard all messages in the second\
          \ and only return messages starting from the next second onwards. When starting\
          \ an integration with our API, on the first request, you should either not\
          \ send a value for this paramater (defaults to 0 and does not discard any\
          \ messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ\
          \ from the last message in the response. Pass the TIMESTAMP in the after_ts\
          \ parameter and the CCSEQ in the last_ccseq parameter on your next request."
        explode: false
        in: query
        name: last_ccseq
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
        style: form
      - deprecated: false
        description: The maximum number of trades to return
        explode: false
        in: query
        name: limit
        required: false
        schema:
          default: 100
          maximum: 5000
          minimum: 1
          type: integer
        style: form
      - deprecated: false
        description: "The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST\
          \ by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST"
        explode: false
        in: query
        name: mapping_priority
        required: false
        schema:
          default: CHECK_MAPPED_FIRST
          enum:
          - CHECK_MAPPED_FIRST
          - CHECK_UNMAPPED_FIRST
          type: string
        style: form
      - deprecated: false
        description: "The format of the data response in uppercase. It can be one\
          \ of the following: JSON,CSV"
        explode: false
        in: query
        name: response_format
        required: false
        schema:
          default: JSON
          enum:
          - JSON
          - CSV
          type: string
        style: form
      - deprecated: false
        description: "If set to false (default) then when there are no items to return,\
          \ you will get a response status code of 200 and an empty JSON array or\
          \ a CSV file with just the header. If set to true then when there are no\
          \ items you will get a 404 status code for both JSON and CSV response_formats."
        explode: false
        in: query
        name: return_404_on_empty_response
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GENERIC_RESPONSE'
          description: Success response from the API.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 400 error occurs when some of the data sent is malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 401 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 403 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 404 error can either be returned when some/all of parameters\
            \ sent are not found within our system. This could be beacuse parameters\
            \ like market, instrument, news source, symbol, asset_id etc. are invalid"
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 405 error occurs the user tries to use a http method (GET,POST,PUT\
            \ etc) that is not supported."
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 429 error occurs when you go over the API Key limit. Rate\
            \ limits are eforced on a second (resets every second), minute (resers\
            \ every minute), hour (resets every hour), day (resets every day) and\
            \ month (resets every month) granularity. You can upgrade your account\
            \ and access higher rate limits."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 500 error occurs our API is up but does not know how to
            / can't handle the request.
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 502 error occurs when our API is not running. This error
            is returned by our proxy / load balancer.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 503 error occurs when there is an issue with one of our
            data sources and we can't even return a partial answer.
      security:
      - api_key_query: []
      - api_key_header: []
      tags:
      - Futures
      x-section: Futures
      x-accepts: application/json
    summary: Futures (V1) Historical Trades
  /futures/v1/historical/trades/hour:
    description: You should use this endpoint get a full hour of historical trades
      when catching up. For latest trades use the /futures/v1/historical/trades endpoint.
    get:
      deprecated: false
      operationId: futures_v1_historical_trades_hour
      parameters:
      - deprecated: false
        description: The exchange to obtain data from
        explode: false
        in: query
        name: market
        required: true
        schema:
          maxLength: 30
          minLength: 2
          type: string
        style: form
      - deprecated: false
        description: "The mapped or unmapped instrument to retrieve on a specific\
          \ market. We first check the instrument against the mapped list and then\
          \ against the unmapped list \n        but you can use the mapping_priority\
          \ param to check the unmapped list first."
        explode: false
        in: query
        name: instrument
        required: true
        schema:
          maxLength: 500
          minLength: 1
          type: string
        style: form
      - deprecated: false
        description: Unix timestamp in seconds for the hour containing the trades
          you are interested in. You can pass any timestamp within an hour but we
          will round it down the the full hour timestmap and return all trades in
          that hour.
        explode: false
        in: query
        name: hour_ts
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      - deprecated: false
        description: "The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST\
          \ by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST"
        explode: false
        in: query
        name: mapping_priority
        required: false
        schema:
          default: CHECK_MAPPED_FIRST
          enum:
          - CHECK_MAPPED_FIRST
          - CHECK_UNMAPPED_FIRST
          type: string
        style: form
      - deprecated: false
        description: "The format of the data response in uppercase. It can be one\
          \ of the following: JSON,CSV"
        explode: false
        in: query
        name: response_format
        required: false
        schema:
          default: JSON
          enum:
          - JSON
          - CSV
          type: string
        style: form
      - deprecated: false
        description: "If set to false (default) then when there are no items to return,\
          \ you will get a response status code of 200 and an empty JSON array or\
          \ a CSV file with just the header. If set to true then when there are no\
          \ items you will get a 404 status code for both JSON and CSV response_formats."
        explode: false
        in: query
        name: return_404_on_empty_response
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GENERIC_RESPONSE'
          description: Success response from the API.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 400 error occurs when some of the data sent is malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 401 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 403 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 404 error can either be returned when some/all of parameters\
            \ sent are not found within our system. This could be beacuse parameters\
            \ like market, instrument, news source, symbol, asset_id etc. are invalid"
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 405 error occurs the user tries to use a http method (GET,POST,PUT\
            \ etc) that is not supported."
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 429 error occurs when you go over the API Key limit. Rate\
            \ limits are eforced on a second (resets every second), minute (resers\
            \ every minute), hour (resets every hour), day (resets every day) and\
            \ month (resets every month) granularity. You can upgrade your account\
            \ and access higher rate limits."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 500 error occurs our API is up but does not know how to
            / can't handle the request.
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 502 error occurs when our API is not running. This error
            is returned by our proxy / load balancer.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 503 error occurs when there is an issue with one of our
            data sources and we can't even return a partial answer.
      security:
      - api_key_query: []
      - api_key_header: []
      tags:
      - Futures
      x-section: Futures
      x-accepts: application/json
    summary: Futures (V1) Historical Trades by Hour Timestamp
  /futures/v1/latest/funding-rate/tick:
    description: Funding rate is only available for PERPETUAL instruments.
    get:
      deprecated: false
      operationId: futures_v1_latest_funding_rate_tick
      parameters:
      - deprecated: false
        description: The exchange to obtain data from
        explode: false
        in: query
        name: market
        required: true
        schema:
          maxLength: 30
          minLength: 2
          type: string
        style: form
      - deprecated: false
        description: A comma separated array of mapped and/or unmapped instruments
          to retrieve for a specific market (you can use either the instrument XXBTZUSD
          or mapped instrument (base - quote) BTC-USD on kraken as an example). We
          first check each instrument against the mapped list and then against the
          unmapped list but you can use the mapping_priority param to check the unmapped
          list first.
        explode: false
        in: query
        name: instruments
        required: true
        schema:
          items:
            type: string
          maxItems: 25
          minItems: 1
          type: array
        style: form
      - deprecated: false
        description: "When requesting tick data you can fiter by specific groups of\
          \ interest. To do so just pass the groups of interest into the URL as a\
          \ comma separted list. If left empty it will get all data that you account\
          \ is allowed to access. The groups available are: ID,MAPPING,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME"
        explode: false
        in: query
        name: groups
        required: false
        schema:
          default: []
          items:
            type: string
          type: array
        style: form
      - deprecated: false
        description: "The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST\
          \ by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST"
        explode: false
        in: query
        name: mapping_priority
        required: false
        schema:
          default: CHECK_MAPPED_FIRST
          enum:
          - CHECK_MAPPED_FIRST
          - CHECK_UNMAPPED_FIRST
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GENERIC_RESPONSE'
          description: Success response from the API.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 400 error occurs when some of the data sent is malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 401 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 403 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 404 error can either be returned when some/all of parameters\
            \ sent are not found within our system. This could be beacuse parameters\
            \ like market, instrument, news source, symbol, asset_id etc. are invalid"
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 405 error occurs the user tries to use a http method (GET,POST,PUT\
            \ etc) that is not supported."
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 429 error occurs when you go over the API Key limit. Rate\
            \ limits are eforced on a second (resets every second), minute (resers\
            \ every minute), hour (resets every hour), day (resets every day) and\
            \ month (resets every month) granularity. You can upgrade your account\
            \ and access higher rate limits."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 500 error occurs our API is up but does not know how to
            / can't handle the request.
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 502 error occurs when our API is not running. This error
            is returned by our proxy / load balancer.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 503 error occurs when there is an issue with one of our
            data sources and we can't even return a partial answer.
      tags:
      - Futures
      x-section: Futures
      x-accepts: application/json
    summary: Futures (V1) Instrument Latest Funding Rate Tick
  /futures/v1/latest/instrument/metadata:
    description: ""
    get:
      deprecated: false
      operationId: futures_v1_latest_instrument_metadata
      parameters:
      - deprecated: false
        description: The exchange to obtain data from
        explode: false
        in: query
        name: market
        required: true
        schema:
          maxLength: 30
          minLength: 2
          type: string
        style: form
      - deprecated: false
        description: A comma separated array of mapped and/or unmapped instruments
          to retrieve for a specific market (you can use either the instrument XXBTZUSD
          or mapped instrument (base - quote) BTC-USD on kraken as an example). We
          first check each instrument against the mapped list and then against the
          unmapped list but you can use the mapping_priority param to check the unmapped
          list first.
        explode: false
        in: query
        name: instruments
        required: true
        schema:
          items:
            type: string
          maxItems: 25
          minItems: 1
          type: array
        style: form
      - deprecated: false
        description: "When requesting metadata entries you can fiter by specific groups\
          \ of interest. To do so just pass the groups of interest into the URL as\
          \ a comma separted list. If left empty it will get all data that you account\
          \ is allowed to access. The groups available are: STATUS,INTERNAL,GENERAL,MIGRATION,SOURCE"
        explode: false
        in: query
        name: groups
        required: false
        schema:
          default: []
          items:
            type: string
          type: array
        style: form
      - deprecated: false
        description: "The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST\
          \ by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST"
        explode: false
        in: query
        name: mapping_priority
        required: false
        schema:
          default: CHECK_MAPPED_FIRST
          enum:
          - CHECK_MAPPED_FIRST
          - CHECK_UNMAPPED_FIRST
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GENERIC_RESPONSE'
          description: Success response from the API.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 400 error occurs when some of the data sent is malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 401 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 403 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 404 error can either be returned when some/all of parameters\
            \ sent are not found within our system. This could be beacuse parameters\
            \ like market, instrument, news source, symbol, asset_id etc. are invalid"
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 405 error occurs the user tries to use a http method (GET,POST,PUT\
            \ etc) that is not supported."
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 429 error occurs when you go over the API Key limit. Rate\
            \ limits are eforced on a second (resets every second), minute (resers\
            \ every minute), hour (resets every hour), day (resets every day) and\
            \ month (resets every month) granularity. You can upgrade your account\
            \ and access higher rate limits."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 500 error occurs our API is up but does not know how to
            / can't handle the request.
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 502 error occurs when our API is not running. This error
            is returned by our proxy / load balancer.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 503 error occurs when there is an issue with one of our
            data sources and we can't even return a partial answer.
      tags:
      - Futures
      x-section: Futures
      x-accepts: application/json
    summary: Futures (V1) Instrument Latest Metadata
  /futures/v1/latest/open-interest/tick:
    description: ""
    get:
      deprecated: false
      operationId: futures_v1_latest_open_interest_tick
      parameters:
      - deprecated: false
        description: The exchange to obtain data from
        explode: false
        in: query
        name: market
        required: true
        schema:
          maxLength: 30
          minLength: 2
          type: string
        style: form
      - deprecated: false
        description: A comma separated array of mapped and/or unmapped instruments
          to retrieve for a specific market (you can use either the instrument XXBTZUSD
          or mapped instrument (base - quote) BTC-USD on kraken as an example). We
          first check each instrument against the mapped list and then against the
          unmapped list but you can use the mapping_priority param to check the unmapped
          list first.
        explode: false
        in: query
        name: instruments
        required: true
        schema:
          items:
            type: string
          maxItems: 25
          minItems: 1
          type: array
        style: form
      - deprecated: false
        description: "When requesting tick data you can fiter by specific groups of\
          \ interest. To do so just pass the groups of interest into the URL as a\
          \ comma separted list. If left empty it will get all data that you account\
          \ is allowed to access. The groups available are: ID,MAPPING,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME"
        explode: false
        in: query
        name: groups
        required: false
        schema:
          default: []
          items:
            type: string
          type: array
        style: form
      - deprecated: false
        description: "The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST\
          \ by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST"
        explode: false
        in: query
        name: mapping_priority
        required: false
        schema:
          default: CHECK_MAPPED_FIRST
          enum:
          - CHECK_MAPPED_FIRST
          - CHECK_UNMAPPED_FIRST
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GENERIC_RESPONSE'
          description: Success response from the API.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 400 error occurs when some of the data sent is malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 401 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 403 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 404 error can either be returned when some/all of parameters\
            \ sent are not found within our system. This could be beacuse parameters\
            \ like market, instrument, news source, symbol, asset_id etc. are invalid"
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 405 error occurs the user tries to use a http method (GET,POST,PUT\
            \ etc) that is not supported."
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 429 error occurs when you go over the API Key limit. Rate\
            \ limits are eforced on a second (resets every second), minute (resers\
            \ every minute), hour (resets every hour), day (resets every day) and\
            \ month (resets every month) granularity. You can upgrade your account\
            \ and access higher rate limits."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 500 error occurs our API is up but does not know how to
            / can't handle the request.
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 502 error occurs when our API is not running. This error
            is returned by our proxy / load balancer.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 503 error occurs when there is an issue with one of our
            data sources and we can't even return a partial answer.
      tags:
      - Futures
      x-section: Futures
      x-accepts: application/json
    summary: Futures (V1) Instrument Latest Open Interest Tick
  /futures/v1/latest/tick:
    description: ""
    get:
      deprecated: false
      operationId: futures_v1_latest_tick
      parameters:
      - deprecated: false
        description: The exchange to obtain data from
        explode: false
        in: query
        name: market
        required: true
        schema:
          maxLength: 30
          minLength: 2
          type: string
        style: form
      - deprecated: false
        description: A comma separated array of mapped and/or unmapped instruments
          to retrieve for a specific market (you can use either the instrument XXBTZUSD
          or mapped instrument (base - quote) BTC-USD on kraken as an example). We
          first check each instrument against the mapped list and then against the
          unmapped list but you can use the mapping_priority param to check the unmapped
          list first.
        explode: false
        in: query
        name: instruments
        required: true
        schema:
          items:
            type: string
          maxItems: 25
          minItems: 1
          type: array
        style: form
      - deprecated: false
        description: "When requesting tick data you can fiter by specific groups of\
          \ interest. To do so just pass the groups of interest into the URL as a\
          \ comma separted list. If left empty it will get all data that you account\
          \ is allowed to access. The groups available are: ID,MAPPING,VALUE,LAST_UPDATE,TOP_OF_BOOK,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME"
        explode: false
        in: query
        name: groups
        required: false
        schema:
          default: []
          items:
            type: string
          type: array
        style: form
      - deprecated: false
        description: "The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST\
          \ by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST"
        explode: false
        in: query
        name: mapping_priority
        required: false
        schema:
          default: CHECK_MAPPED_FIRST
          enum:
          - CHECK_MAPPED_FIRST
          - CHECK_UNMAPPED_FIRST
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GENERIC_RESPONSE'
          description: Success response from the API.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 400 error occurs when some of the data sent is malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 401 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 403 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 404 error can either be returned when some/all of parameters\
            \ sent are not found within our system. This could be beacuse parameters\
            \ like market, instrument, news source, symbol, asset_id etc. are invalid"
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 405 error occurs the user tries to use a http method (GET,POST,PUT\
            \ etc) that is not supported."
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 429 error occurs when you go over the API Key limit. Rate\
            \ limits are eforced on a second (resets every second), minute (resers\
            \ every minute), hour (resets every hour), day (resets every day) and\
            \ month (resets every month) granularity. You can upgrade your account\
            \ and access higher rate limits."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 500 error occurs our API is up but does not know how to
            / can't handle the request.
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 502 error occurs when our API is not running. This error
            is returned by our proxy / load balancer.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 503 error occurs when there is an issue with one of our
            data sources and we can't even return a partial answer.
      tags:
      - Futures
      x-section: Futures
      x-accepts: application/json
    summary: Futures (V1) Instrument Latest Tick
  /futures/v1/markets:
    description: ""
    get:
      deprecated: false
      operationId: futures_v1_markets
      parameters:
      - deprecated: false
        description: The exchange to obtain data from
        explode: false
        in: query
        name: market
        required: false
        schema:
          default: ""
          maxLength: 30
          minLength: 0
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GENERIC_RESPONSE'
          description: Success response from the API.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 400 error occurs when some of the data sent is malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 401 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 403 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 404 error can either be returned when some/all of parameters\
            \ sent are not found within our system. This could be beacuse parameters\
            \ like market, instrument, news source, symbol, asset_id etc. are invalid"
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 405 error occurs the user tries to use a http method (GET,POST,PUT\
            \ etc) that is not supported."
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 429 error occurs when you go over the API Key limit. Rate\
            \ limits are eforced on a second (resets every second), minute (resers\
            \ every minute), hour (resets every hour), day (resets every day) and\
            \ month (resets every month) granularity. You can upgrade your account\
            \ and access higher rate limits."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 500 error occurs our API is up but does not know how to
            / can't handle the request.
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 502 error occurs when our API is not running. This error
            is returned by our proxy / load balancer.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 503 error occurs when there is an issue with one of our
            data sources and we can't even return a partial answer.
      tags:
      - Futures
      x-section: Futures
      x-accepts: application/json
    summary: Futures (V1) Available Markets
  /futures/v1/markets/instruments:
    description: ""
    get:
      deprecated: false
      operationId: futures_v1_markets_instruments
      parameters:
      - deprecated: false
        description: The exchange to obtain data from
        explode: false
        in: query
        name: market
        required: false
        schema:
          default: ""
          maxLength: 30
          minLength: 0
          type: string
        style: form
      - deprecated: false
        description: The mapped instrument to retrieve on a specific market.
        explode: false
        in: query
        name: instrument
        required: false
        schema:
          default: ""
          maxLength: 30
          minLength: 0
          type: string
        style: form
      - deprecated: false
        description: "The status of the instrument, can be one of the following: ACTIVE,\
          \ IGNORED, RETIRED, EXPIRED"
        explode: false
        in: query
        name: instrument_status
        required: false
        schema:
          default: []
          items:
            enum:
            - ACTIVE
            - IGNORED
            - RETIRED
            - EXPIRED
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GENERIC_RESPONSE'
          description: Success response from the API.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 400 error occurs when some of the data sent is malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 401 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 403 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 404 error can either be returned when some/all of parameters\
            \ sent are not found within our system. This could be beacuse parameters\
            \ like market, instrument, news source, symbol, asset_id etc. are invalid"
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 405 error occurs the user tries to use a http method (GET,POST,PUT\
            \ etc) that is not supported."
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 429 error occurs when you go over the API Key limit. Rate\
            \ limits are eforced on a second (resets every second), minute (resers\
            \ every minute), hour (resets every hour), day (resets every day) and\
            \ month (resets every month) granularity. You can upgrade your account\
            \ and access higher rate limits."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 500 error occurs our API is up but does not know how to
            / can't handle the request.
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 502 error occurs when our API is not running. This error
            is returned by our proxy / load balancer.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 503 error occurs when there is an issue with one of our
            data sources and we can't even return a partial answer.
      tags:
      - Futures
      x-section: Futures
      x-accepts: application/json
    summary: Futures (V1) Available Markets and Instruments
  /futures/v1/markets/instruments/unmapped:
    description: ""
    get:
      deprecated: false
      operationId: futures_v1_markets_instruments_unmapped
      parameters:
      - deprecated: false
        description: The exchange to obtain data from
        explode: false
        in: query
        name: market
        required: false
        schema:
          default: ""
          maxLength: 30
          minLength: 0
          type: string
        style: form
      - deprecated: false
        description: The unmapped instrument to retrieve on a specific market.
        explode: false
        in: query
        name: instrument
        required: false
        schema:
          default: ""
          maxLength: 30
          minLength: 0
          type: string
        style: form
      - deprecated: false
        description: "The status of the instrument, can be one of the following: ACTIVE,\
          \ IGNORED, RETIRED, EXPIRED"
        explode: false
        in: query
        name: instrument_status
        required: false
        schema:
          default: []
          items:
            enum:
            - ACTIVE
            - IGNORED
            - RETIRED
            - EXPIRED
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GENERIC_RESPONSE'
          description: Success response from the API.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 400 error occurs when some of the data sent is malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 401 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 403 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 404 error can either be returned when some/all of parameters\
            \ sent are not found within our system. This could be beacuse parameters\
            \ like market, instrument, news source, symbol, asset_id etc. are invalid"
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 405 error occurs the user tries to use a http method (GET,POST,PUT\
            \ etc) that is not supported."
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 429 error occurs when you go over the API Key limit. Rate\
            \ limits are eforced on a second (resets every second), minute (resers\
            \ every minute), hour (resets every hour), day (resets every day) and\
            \ month (resets every month) granularity. You can upgrade your account\
            \ and access higher rate limits."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 500 error occurs our API is up but does not know how to
            / can't handle the request.
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 502 error occurs when our API is not running. This error
            is returned by our proxy / load balancer.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 503 error occurs when there is an issue with one of our
            data sources and we can't even return a partial answer.
      tags:
      - Futures
      x-section: Futures
      x-accepts: application/json
    summary: Futures (V1) Available Markets and Unmapped Instruments
  /index/cc/v1/historical/days:
    description: ""
    get:
      deprecated: false
      operationId: index_cc_v1_historical_days
      parameters:
      - deprecated: false
        description: The exchange to obtain data from
        explode: false
        in: query
        name: market
        required: true
        schema:
          maxLength: 30
          minLength: 2
          type: string
        style: form
      - deprecated: false
        description: "The mapped or unmapped instrument to retrieve on a specific\
          \ market. We first check the instrument against the mapped list and then\
          \ against the unmapped list \n        but you can use the mapping_priority\
          \ param to check the unmapped list first."
        explode: false
        in: query
        name: instrument
        required: true
        schema:
          maxLength: 500
          minLength: 1
          type: string
        style: form
      - deprecated: false
        description: "When requesting historical entries you can fiter by specific\
          \ groups of interest. To do so just pass the groups of interest into the\
          \ URL as a comma separted list. If left empty it will get all data that\
          \ you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME"
        explode: false
        in: query
        name: groups
        required: false
        schema:
          default: []
          items:
            type: string
          type: array
        style: form
      - deprecated: false
        description: The number of data points to return
        explode: false
        in: query
        name: limit
        required: false
        schema:
          default: 30
          maximum: 5000
          minimum: 1
          type: integer
        style: form
      - deprecated: false
        description: "Returns historical data before this unix timestamp. If you want\
          \ to get all the available historical data, you can use limit=2000 and keep\
          \ going back in time using the to_ts param. You can then keep requesting\
          \ batches using: &limit=2000&to_ts={the earliest unix timestamp received}"
        explode: false
        in: query
        name: to_ts
        required: false
        schema:
          type: integer
        style: form
      - deprecated: false
        description: The number of points to aggregate for each returned value. E.g.
          passing 5 on a minute histo data endpoint will return data at 5 minute intervals.
          You are still limited to a maximum of 2000 minute points so the maximum
          you can get is 400 5 minutes interval entries
        explode: false
        in: query
        name: aggregate
        required: false
        schema:
          default: 1
          maximum: 30
          minimum: 1
          type: integer
        style: form
      - deprecated: false
        description: "Boolean value, if set to false or 0 we will not return data\
          \ points for periods with no trading activity."
        explode: false
        in: query
        name: fill
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - deprecated: false
        description: "The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST\
          \ by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST"
        explode: false
        in: query
        name: mapping_priority
        required: false
        schema:
          default: CHECK_MAPPED_FIRST
          enum:
          - CHECK_MAPPED_FIRST
          - CHECK_UNMAPPED_FIRST
          type: string
        style: form
      - deprecated: false
        description: "The format of the data response in uppercase. It can be one\
          \ of the following: JSON,CSV"
        explode: false
        in: query
        name: response_format
        required: false
        schema:
          default: JSON
          enum:
          - JSON
          - CSV
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GENERIC_RESPONSE'
          description: Success response from the API.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 400 error occurs when some of the data sent is malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 401 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 403 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 404 error can either be returned when some/all of parameters\
            \ sent are not found within our system. This could be beacuse parameters\
            \ like market, instrument, news source, symbol, asset_id etc. are invalid"
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 405 error occurs the user tries to use a http method (GET,POST,PUT\
            \ etc) that is not supported."
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 429 error occurs when you go over the API Key limit. Rate\
            \ limits are eforced on a second (resets every second), minute (resers\
            \ every minute), hour (resets every hour), day (resets every day) and\
            \ month (resets every month) granularity. You can upgrade your account\
            \ and access higher rate limits."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 500 error occurs our API is up but does not know how to
            / can't handle the request.
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 502 error occurs when our API is not running. This error
            is returned by our proxy / load balancer.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 503 error occurs when there is an issue with one of our
            data sources and we can't even return a partial answer.
      tags:
      - Reference Rates
      x-section: Reference Rates
      x-accepts: application/json
    summary: Index (V1) OHLCV+ Days
  /index/cc/v1/historical/hours:
    description: ""
    get:
      deprecated: false
      operationId: index_cc_v1_historical_hours
      parameters:
      - deprecated: false
        description: The exchange to obtain data from
        explode: false
        in: query
        name: market
        required: true
        schema:
          maxLength: 30
          minLength: 2
          type: string
        style: form
      - deprecated: false
        description: "The mapped or unmapped instrument to retrieve on a specific\
          \ market. We first check the instrument against the mapped list and then\
          \ against the unmapped list \n        but you can use the mapping_priority\
          \ param to check the unmapped list first."
        explode: false
        in: query
        name: instrument
        required: true
        schema:
          maxLength: 500
          minLength: 1
          type: string
        style: form
      - deprecated: false
        description: "When requesting historical entries you can fiter by specific\
          \ groups of interest. To do so just pass the groups of interest into the\
          \ URL as a comma separted list. If left empty it will get all data that\
          \ you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME"
        explode: false
        in: query
        name: groups
        required: false
        schema:
          default: []
          items:
            type: string
          type: array
        style: form
      - deprecated: false
        description: The number of data points to return
        explode: false
        in: query
        name: limit
        required: false
        schema:
          default: 30
          maximum: 2000
          minimum: 1
          type: integer
        style: form
      - deprecated: false
        description: "Returns historical data before this unix timestamp. If you want\
          \ to get all the available historical data, you can use limit=2000 and keep\
          \ going back in time using the to_ts param. You can then keep requesting\
          \ batches using: &limit=2000&to_ts={the earliest unix timestamp received}"
        explode: false
        in: query
        name: to_ts
        required: false
        schema:
          type: integer
        style: form
      - deprecated: false
        description: The number of points to aggregate for each returned value. E.g.
          passing 5 on a minute histo data endpoint will return data at 5 minute intervals.
          You are still limited to a maximum of 2000 minute points so the maximum
          you can get is 400 5 minutes interval entries
        explode: false
        in: query
        name: aggregate
        required: false
        schema:
          default: 1
          maximum: 30
          minimum: 1
          type: integer
        style: form
      - deprecated: false
        description: "Boolean value, if set to false or 0 we will not return data\
          \ points for periods with no trading activity."
        explode: false
        in: query
        name: fill
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - deprecated: false
        description: "The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST\
          \ by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST"
        explode: false
        in: query
        name: mapping_priority
        required: false
        schema:
          default: CHECK_MAPPED_FIRST
          enum:
          - CHECK_MAPPED_FIRST
          - CHECK_UNMAPPED_FIRST
          type: string
        style: form
      - deprecated: false
        description: "The format of the data response in uppercase. It can be one\
          \ of the following: JSON,CSV"
        explode: false
        in: query
        name: response_format
        required: false
        schema:
          default: JSON
          enum:
          - JSON
          - CSV
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GENERIC_RESPONSE'
          description: Success response from the API.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 400 error occurs when some of the data sent is malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 401 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 403 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 404 error can either be returned when some/all of parameters\
            \ sent are not found within our system. This could be beacuse parameters\
            \ like market, instrument, news source, symbol, asset_id etc. are invalid"
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 405 error occurs the user tries to use a http method (GET,POST,PUT\
            \ etc) that is not supported."
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 429 error occurs when you go over the API Key limit. Rate\
            \ limits are eforced on a second (resets every second), minute (resers\
            \ every minute), hour (resets every hour), day (resets every day) and\
            \ month (resets every month) granularity. You can upgrade your account\
            \ and access higher rate limits."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 500 error occurs our API is up but does not know how to
            / can't handle the request.
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 502 error occurs when our API is not running. This error
            is returned by our proxy / load balancer.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 503 error occurs when there is an issue with one of our
            data sources and we can't even return a partial answer.
      tags:
      - Reference Rates
      x-section: Reference Rates
      x-accepts: application/json
    summary: Index (V1) OHLCV+ Hours
  /index/cc/v1/historical/messages:
    description: ""
    get:
      deprecated: false
      operationId: index_cc_v1_historical_messages
      parameters:
      - deprecated: false
        description: The exchange to obtain data from
        explode: false
        in: query
        name: market
        required: true
        schema:
          maxLength: 30
          minLength: 2
          type: string
        style: form
      - deprecated: false
        description: "The mapped or unmapped instrument to retrieve on a specific\
          \ market. We first check the instrument against the mapped list and then\
          \ against the unmapped list \n        but you can use the mapping_priority\
          \ param to check the unmapped list first."
        explode: false
        in: query
        name: instrument
        required: true
        schema:
          maxLength: 500
          minLength: 1
          type: string
        style: form
      - deprecated: false
        description: Unix timestamp in seconds of the earliest index message in the
          response
        explode: false
        in: query
        name: after_ts
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      - deprecated: false
        description: "The CCSEQ of the last message seen in the previous request.\
          \ Useful for pagination within messages that happened in the same second.\
          \ It will look though the messages in the same second and discard all messages\
          \ until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ\
          \ is not part of that second, it will discard all messages in the second\
          \ and only return messages starting from the next second onwards. When starting\
          \ an integration with our API, on the first request, you should either not\
          \ send a value for this paramater (defaults to 0 and does not discard any\
          \ messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ\
          \ from the last message in the response. Pass the TIMESTAMP in the after_ts\
          \ parameter and the CCSEQ in the last_ccseq parameter on your next request."
        explode: false
        in: query
        name: last_ccseq
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
        style: form
      - deprecated: false
        description: "The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST\
          \ by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST"
        explode: false
        in: query
        name: mapping_priority
        required: false
        schema:
          default: CHECK_MAPPED_FIRST
          enum:
          - CHECK_MAPPED_FIRST
          - CHECK_UNMAPPED_FIRST
          type: string
        style: form
      - deprecated: false
        description: The maximum number of index messages to return
        explode: false
        in: query
        name: limit
        required: false
        schema:
          default: 100
          maximum: 5000
          minimum: 1
          type: integer
        style: form
      - deprecated: false
        description: "The format of the data response in uppercase. It can be one\
          \ of the following: JSON,CSV"
        explode: false
        in: query
        name: response_format
        required: false
        schema:
          default: JSON
          enum:
          - JSON
          - CSV
          type: string
        style: form
      - deprecated: false
        description: "If set to false (default) then when there are no items to return,\
          \ you will get a response status code of 200 and an empty JSON array or\
          \ a CSV file with just the header. If set to true then when there are no\
          \ items you will get a 404 status code for both JSON and CSV response_formats."
        explode: false
        in: query
        name: return_404_on_empty_response
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GENERIC_RESPONSE'
          description: Success response from the API.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 400 error occurs when some of the data sent is malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 401 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 403 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 404 error can either be returned when some/all of parameters\
            \ sent are not found within our system. This could be beacuse parameters\
            \ like market, instrument, news source, symbol, asset_id etc. are invalid"
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 405 error occurs the user tries to use a http method (GET,POST,PUT\
            \ etc) that is not supported."
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 429 error occurs when you go over the API Key limit. Rate\
            \ limits are eforced on a second (resets every second), minute (resers\
            \ every minute), hour (resets every hour), day (resets every day) and\
            \ month (resets every month) granularity. You can upgrade your account\
            \ and access higher rate limits."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 500 error occurs our API is up but does not know how to
            / can't handle the request.
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 502 error occurs when our API is not running. This error
            is returned by our proxy / load balancer.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 503 error occurs when there is an issue with one of our
            data sources and we can't even return a partial answer.
      security:
      - api_key_query: []
      - api_key_header: []
      tags:
      - Reference Rates
      x-section: Reference Rates
      x-accepts: application/json
    summary: Index (V1) Historical Messages
  /index/cc/v1/historical/messages/hour:
    description: You should use this endpoint to get a full hour of historical messages
      when catching up. For latest messages use the /index/cc/v1/historical/messages
      endpoint.
    get:
      deprecated: false
      operationId: index_cc_v1_historical_messages_hour
      parameters:
      - deprecated: false
        description: The exchange to obtain data from
        explode: false
        in: query
        name: market
        required: true
        schema:
          maxLength: 30
          minLength: 2
          type: string
        style: form
      - deprecated: false
        description: "The mapped or unmapped instrument to retrieve on a specific\
          \ market. We first check the instrument against the mapped list and then\
          \ against the unmapped list \n        but you can use the mapping_priority\
          \ param to check the unmapped list first."
        explode: false
        in: query
        name: instrument
        required: true
        schema:
          maxLength: 500
          minLength: 1
          type: string
        style: form
      - deprecated: false
        description: Unix timestamp in seconds for the hour containing the index updates
          you are interested in. You can pass any timestamp in the hour but we will
          round it down the the full hour timestmap and return all index updates in
          that hour.
        explode: false
        in: query
        name: hour_ts
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      - deprecated: false
        description: "The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST\
          \ by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST"
        explode: false
        in: query
        name: mapping_priority
        required: false
        schema:
          default: CHECK_MAPPED_FIRST
          enum:
          - CHECK_MAPPED_FIRST
          - CHECK_UNMAPPED_FIRST
          type: string
        style: form
      - deprecated: false
        description: "The format of the data response in uppercase. It can be one\
          \ of the following: JSON,CSV"
        explode: false
        in: query
        name: response_format
        required: false
        schema:
          default: JSON
          enum:
          - JSON
          - CSV
          type: string
        style: form
      - deprecated: false
        description: "If set to false (default) then when there are no items to return,\
          \ you will get a response status code of 200 and an empty JSON array or\
          \ a CSV file with just the header. If set to true then when there are no\
          \ items you will get a 404 status code for both JSON and CSV response_formats."
        explode: false
        in: query
        name: return_404_on_empty_response
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GENERIC_RESPONSE'
          description: Success response from the API.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 400 error occurs when some of the data sent is malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 401 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 403 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 404 error can either be returned when some/all of parameters\
            \ sent are not found within our system. This could be beacuse parameters\
            \ like market, instrument, news source, symbol, asset_id etc. are invalid"
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 405 error occurs the user tries to use a http method (GET,POST,PUT\
            \ etc) that is not supported."
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 429 error occurs when you go over the API Key limit. Rate\
            \ limits are eforced on a second (resets every second), minute (resers\
            \ every minute), hour (resets every hour), day (resets every day) and\
            \ month (resets every month) granularity. You can upgrade your account\
            \ and access higher rate limits."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 500 error occurs our API is up but does not know how to
            / can't handle the request.
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 502 error occurs when our API is not running. This error
            is returned by our proxy / load balancer.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 503 error occurs when there is an issue with one of our
            data sources and we can't even return a partial answer.
      security:
      - api_key_query: []
      - api_key_header: []
      tags:
      - Reference Rates
      x-section: Reference Rates
      x-accepts: application/json
    summary: Index (V1) Historical Messages by Hour Timestamp
  /index/cc/v1/historical/minutes:
    description: ""
    get:
      deprecated: false
      operationId: index_cc_v1_historical_minutes
      parameters:
      - deprecated: false
        description: The exchange to obtain data from
        explode: false
        in: query
        name: market
        required: true
        schema:
          maxLength: 30
          minLength: 2
          type: string
        style: form
      - deprecated: false
        description: "The mapped or unmapped instrument to retrieve on a specific\
          \ market. We first check the instrument against the mapped list and then\
          \ against the unmapped list \n        but you can use the mapping_priority\
          \ param to check the unmapped list first."
        explode: false
        in: query
        name: instrument
        required: true
        schema:
          maxLength: 500
          minLength: 1
          type: string
        style: form
      - deprecated: false
        description: "When requesting historical entries you can fiter by specific\
          \ groups of interest. To do so just pass the groups of interest into the\
          \ URL as a comma separted list. If left empty it will get all data that\
          \ you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME"
        explode: false
        in: query
        name: groups
        required: false
        schema:
          default: []
          items:
            type: string
          type: array
        style: form
      - deprecated: false
        description: The number of data points to return
        explode: false
        in: query
        name: limit
        required: false
        schema:
          default: 30
          maximum: 2000
          minimum: 1
          type: integer
        style: form
      - deprecated: false
        description: "Returns historical data before this unix timestamp. If you want\
          \ to get all the available historical data, you can use limit=2000 and keep\
          \ going back in time using the to_ts param. You can then keep requesting\
          \ batches using: &limit=2000&to_ts={the earliest unix timestamp received}"
        explode: false
        in: query
        name: to_ts
        required: false
        schema:
          type: integer
        style: form
      - deprecated: false
        description: The number of points to aggregate for each returned value. E.g.
          passing 5 on a minute histo data endpoint will return data at 5 minute intervals.
          You are still limited to a maximum of 2000 minute points so the maximum
          you can get is 400 5 minutes interval entries
        explode: false
        in: query
        name: aggregate
        required: false
        schema:
          default: 1
          maximum: 30
          minimum: 1
          type: integer
        style: form
      - deprecated: false
        description: "Boolean value, if set to false or 0 we will not return data\
          \ points for periods with no trading activity."
        explode: false
        in: query
        name: fill
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - deprecated: false
        description: "The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST\
          \ by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST"
        explode: false
        in: query
        name: mapping_priority
        required: false
        schema:
          default: CHECK_MAPPED_FIRST
          enum:
          - CHECK_MAPPED_FIRST
          - CHECK_UNMAPPED_FIRST
          type: string
        style: form
      - deprecated: false
        description: "The format of the data response in uppercase. It can be one\
          \ of the following: JSON,CSV"
        explode: false
        in: query
        name: response_format
        required: false
        schema:
          default: JSON
          enum:
          - JSON
          - CSV
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GENERIC_RESPONSE'
          description: Success response from the API.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 400 error occurs when some of the data sent is malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 401 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 403 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 404 error can either be returned when some/all of parameters\
            \ sent are not found within our system. This could be beacuse parameters\
            \ like market, instrument, news source, symbol, asset_id etc. are invalid"
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 405 error occurs the user tries to use a http method (GET,POST,PUT\
            \ etc) that is not supported."
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 429 error occurs when you go over the API Key limit. Rate\
            \ limits are eforced on a second (resets every second), minute (resers\
            \ every minute), hour (resets every hour), day (resets every day) and\
            \ month (resets every month) granularity. You can upgrade your account\
            \ and access higher rate limits."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 500 error occurs our API is up but does not know how to
            / can't handle the request.
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 502 error occurs when our API is not running. This error
            is returned by our proxy / load balancer.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 503 error occurs when there is an issue with one of our
            data sources and we can't even return a partial answer.
      tags:
      - Reference Rates
      x-section: Reference Rates
      x-accepts: application/json
    summary: Index (V1) OHLCV+ Minutes
  /index/cc/v1/latest/instrument/metadata:
    description: ""
    get:
      deprecated: false
      operationId: index_cc_v1_latest_instrument_metadata
      parameters:
      - deprecated: false
        description: The exchange to obtain data from
        explode: false
        in: query
        name: market
        required: true
        schema:
          maxLength: 30
          minLength: 2
          type: string
        style: form
      - deprecated: false
        description: A comma separated array of mapped and/or unmapped instruments
          to retrieve for a specific market (you can use either the instrument XXBTZUSD
          or mapped instrument (base - quote) BTC-USD on kraken as an example). We
          first check each instrument against the mapped list and then against the
          unmapped list but you can use the mapping_priority param to check the unmapped
          list first.
        explode: false
        in: query
        name: instruments
        required: true
        schema:
          items:
            type: string
          maxItems: 25
          minItems: 1
          type: array
        style: form
      - deprecated: false
        description: "When requesting metadata entries you can fiter by specific groups\
          \ of interest. To do so just pass the groups of interest into the URL as\
          \ a comma separted list. If left empty it will get all data that you account\
          \ is allowed to access. The groups available are: STATUS,INTERNAL,GENERAL,MIGRATION,SOURCE"
        explode: false
        in: query
        name: groups
        required: false
        schema:
          default: []
          items:
            type: string
          type: array
        style: form
      - deprecated: false
        description: "The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST\
          \ by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST"
        explode: false
        in: query
        name: mapping_priority
        required: false
        schema:
          default: CHECK_MAPPED_FIRST
          enum:
          - CHECK_MAPPED_FIRST
          - CHECK_UNMAPPED_FIRST
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GENERIC_RESPONSE'
          description: Success response from the API.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 400 error occurs when some of the data sent is malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 401 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 403 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 404 error can either be returned when some/all of parameters\
            \ sent are not found within our system. This could be beacuse parameters\
            \ like market, instrument, news source, symbol, asset_id etc. are invalid"
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 405 error occurs the user tries to use a http method (GET,POST,PUT\
            \ etc) that is not supported."
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 429 error occurs when you go over the API Key limit. Rate\
            \ limits are eforced on a second (resets every second), minute (resers\
            \ every minute), hour (resets every hour), day (resets every day) and\
            \ month (resets every month) granularity. You can upgrade your account\
            \ and access higher rate limits."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 500 error occurs our API is up but does not know how to
            / can't handle the request.
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 502 error occurs when our API is not running. This error
            is returned by our proxy / load balancer.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 503 error occurs when there is an issue with one of our
            data sources and we can't even return a partial answer.
      tags:
      - Reference Rates
      x-section: Reference Rates
      x-accepts: application/json
    summary: Index (V1) Instrument Latest Metadata
  /index/cc/v1/latest/tick:
    description: ""
    get:
      deprecated: false
      operationId: index_cc_v1_latest_tick
      parameters:
      - deprecated: false
        description: The exchange to obtain data from
        explode: false
        in: query
        name: market
        required: true
        schema:
          maxLength: 30
          minLength: 2
          type: string
        style: form
      - deprecated: false
        description: A comma separated array of mapped and/or unmapped instruments
          to retrieve for a specific market (you can use either the instrument XXBTZUSD
          or mapped instrument (base - quote) BTC-USD on kraken as an example). We
          first check each instrument against the mapped list and then against the
          unmapped list but you can use the mapping_priority param to check the unmapped
          list first.
        explode: false
        in: query
        name: instruments
        required: true
        schema:
          items:
            type: string
          maxItems: 25
          minItems: 1
          type: array
        style: form
      - deprecated: false
        description: "When requesting tick data you can fiter by specific groups of\
          \ interest. To do so just pass the groups of interest into the URL as a\
          \ comma separted list. If left empty it will get all data that you account\
          \ is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME"
        explode: false
        in: query
        name: groups
        required: false
        schema:
          default: []
          items:
            type: string
          type: array
        style: form
      - deprecated: false
        description: "The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST\
          \ by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST"
        explode: false
        in: query
        name: mapping_priority
        required: false
        schema:
          default: CHECK_MAPPED_FIRST
          enum:
          - CHECK_MAPPED_FIRST
          - CHECK_UNMAPPED_FIRST
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GENERIC_RESPONSE'
          description: Success response from the API.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 400 error occurs when some of the data sent is malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 401 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 403 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 404 error can either be returned when some/all of parameters\
            \ sent are not found within our system. This could be beacuse parameters\
            \ like market, instrument, news source, symbol, asset_id etc. are invalid"
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 405 error occurs the user tries to use a http method (GET,POST,PUT\
            \ etc) that is not supported."
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 429 error occurs when you go over the API Key limit. Rate\
            \ limits are eforced on a second (resets every second), minute (resers\
            \ every minute), hour (resets every hour), day (resets every day) and\
            \ month (resets every month) granularity. You can upgrade your account\
            \ and access higher rate limits."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 500 error occurs our API is up but does not know how to
            / can't handle the request.
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 502 error occurs when our API is not running. This error
            is returned by our proxy / load balancer.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 503 error occurs when there is an issue with one of our
            data sources and we can't even return a partial answer.
      tags:
      - Reference Rates
      x-section: Reference Rates
      x-accepts: application/json
    summary: Index (V1) Instrument Latest Tick
  /index/cc/v1/markets:
    description: ""
    get:
      deprecated: false
      operationId: index_cc_v1_markets
      parameters:
      - deprecated: false
        description: The exchange to obtain data from
        explode: false
        in: query
        name: market
        required: false
        schema:
          default: ""
          maxLength: 30
          minLength: 0
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GENERIC_RESPONSE'
          description: Success response from the API.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 400 error occurs when some of the data sent is malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 401 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 403 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 404 error can either be returned when some/all of parameters\
            \ sent are not found within our system. This could be beacuse parameters\
            \ like market, instrument, news source, symbol, asset_id etc. are invalid"
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 405 error occurs the user tries to use a http method (GET,POST,PUT\
            \ etc) that is not supported."
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 429 error occurs when you go over the API Key limit. Rate\
            \ limits are eforced on a second (resets every second), minute (resers\
            \ every minute), hour (resets every hour), day (resets every day) and\
            \ month (resets every month) granularity. You can upgrade your account\
            \ and access higher rate limits."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 500 error occurs our API is up but does not know how to
            / can't handle the request.
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 502 error occurs when our API is not running. This error
            is returned by our proxy / load balancer.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 503 error occurs when there is an issue with one of our
            data sources and we can't even return a partial answer.
      tags:
      - Reference Rates
      x-section: Reference Rates
      x-accepts: application/json
    summary: Index (V1) Available Markets
  /index/cc/v1/markets/instruments:
    description: ""
    get:
      deprecated: false
      operationId: index_cc_v1_markets_instruments
      parameters:
      - deprecated: false
        description: The exchange to obtain data from
        explode: false
        in: query
        name: market
        required: false
        schema:
          default: ""
          maxLength: 30
          minLength: 0
          type: string
        style: form
      - deprecated: false
        description: The mapped instrument to retrieve on a specific market.
        explode: false
        in: query
        name: instrument
        required: false
        schema:
          default: ""
          maxLength: 30
          minLength: 0
          type: string
        style: form
      - deprecated: false
        description: "The status of the instrument, can be one of the following: ACTIVE,\
          \ IGNORED, RETIRED, EXPIRED"
        explode: false
        in: query
        name: instrument_status
        required: false
        schema:
          default: []
          items:
            enum:
            - ACTIVE
            - IGNORED
            - RETIRED
            - EXPIRED
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GENERIC_RESPONSE'
          description: Success response from the API.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 400 error occurs when some of the data sent is malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 401 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 403 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 404 error can either be returned when some/all of parameters\
            \ sent are not found within our system. This could be beacuse parameters\
            \ like market, instrument, news source, symbol, asset_id etc. are invalid"
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 405 error occurs the user tries to use a http method (GET,POST,PUT\
            \ etc) that is not supported."
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 429 error occurs when you go over the API Key limit. Rate\
            \ limits are eforced on a second (resets every second), minute (resers\
            \ every minute), hour (resets every hour), day (resets every day) and\
            \ month (resets every month) granularity. You can upgrade your account\
            \ and access higher rate limits."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 500 error occurs our API is up but does not know how to
            / can't handle the request.
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 502 error occurs when our API is not running. This error
            is returned by our proxy / load balancer.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 503 error occurs when there is an issue with one of our
            data sources and we can't even return a partial answer.
      tags:
      - Reference Rates
      x-section: Reference Rates
      x-accepts: application/json
    summary: Index (V1) Available Markets and Instruments
  /index/cc/v1/markets/instruments/unmapped:
    description: ""
    get:
      deprecated: false
      operationId: index_cc_v1_markets_instruments_unmapped
      parameters:
      - deprecated: false
        description: The exchange to obtain data from
        explode: false
        in: query
        name: market
        required: false
        schema:
          default: ""
          maxLength: 30
          minLength: 0
          type: string
        style: form
      - deprecated: false
        description: The unmapped instrument to retrieve on a specific market.
        explode: false
        in: query
        name: instrument
        required: false
        schema:
          default: ""
          maxLength: 30
          minLength: 0
          type: string
        style: form
      - deprecated: false
        description: "The status of the instrument, can be one of the following: ACTIVE,\
          \ IGNORED, RETIRED, EXPIRED"
        explode: false
        in: query
        name: instrument_status
        required: false
        schema:
          default: []
          items:
            enum:
            - ACTIVE
            - IGNORED
            - RETIRED
            - EXPIRED
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GENERIC_RESPONSE'
          description: Success response from the API.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 400 error occurs when some of the data sent is malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 401 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 403 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 404 error can either be returned when some/all of parameters\
            \ sent are not found within our system. This could be beacuse parameters\
            \ like market, instrument, news source, symbol, asset_id etc. are invalid"
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 405 error occurs the user tries to use a http method (GET,POST,PUT\
            \ etc) that is not supported."
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 429 error occurs when you go over the API Key limit. Rate\
            \ limits are eforced on a second (resets every second), minute (resers\
            \ every minute), hour (resets every hour), day (resets every day) and\
            \ month (resets every month) granularity. You can upgrade your account\
            \ and access higher rate limits."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 500 error occurs our API is up but does not know how to
            / can't handle the request.
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 502 error occurs when our API is not running. This error
            is returned by our proxy / load balancer.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 503 error occurs when there is an issue with one of our
            data sources and we can't even return a partial answer.
      tags:
      - Reference Rates
      x-section: Reference Rates
      x-accepts: application/json
    summary: Index (V1) Available Markets and Unmapped Instruments
  /index/v1/historical/days:
    description: ""
    get:
      deprecated: false
      operationId: index_v1_historical_days
      parameters:
      - deprecated: false
        description: The exchange to obtain data from
        explode: false
        in: query
        name: market
        required: true
        schema:
          maxLength: 30
          minLength: 2
          type: string
        style: form
      - deprecated: false
        description: "The mapped or unmapped instrument to retrieve on a specific\
          \ market. We first check the instrument against the mapped list and then\
          \ against the unmapped list \n        but you can use the mapping_priority\
          \ param to check the unmapped list first."
        explode: false
        in: query
        name: instrument
        required: true
        schema:
          maxLength: 500
          minLength: 1
          type: string
        style: form
      - deprecated: false
        description: "When requesting historical entries you can fiter by specific\
          \ groups of interest. To do so just pass the groups of interest into the\
          \ URL as a comma separted list. If left empty it will get all data that\
          \ you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME"
        explode: false
        in: query
        name: groups
        required: false
        schema:
          default: []
          items:
            type: string
          type: array
        style: form
      - deprecated: false
        description: The number of data points to return
        explode: false
        in: query
        name: limit
        required: false
        schema:
          default: 30
          maximum: 5000
          minimum: 1
          type: integer
        style: form
      - deprecated: false
        description: "Returns historical data before this unix timestamp. If you want\
          \ to get all the available historical data, you can use limit=2000 and keep\
          \ going back in time using the to_ts param. You can then keep requesting\
          \ batches using: &limit=2000&to_ts={the earliest unix timestamp received}"
        explode: false
        in: query
        name: to_ts
        required: false
        schema:
          type: integer
        style: form
      - deprecated: false
        description: The number of points to aggregate for each returned value. E.g.
          passing 5 on a minute histo data endpoint will return data at 5 minute intervals.
          You are still limited to a maximum of 2000 minute points so the maximum
          you can get is 400 5 minutes interval entries
        explode: false
        in: query
        name: aggregate
        required: false
        schema:
          default: 1
          maximum: 30
          minimum: 1
          type: integer
        style: form
      - deprecated: false
        description: "Boolean value, if set to false or 0 we will not return data\
          \ points for periods with no trading activity."
        explode: false
        in: query
        name: fill
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - deprecated: false
        description: "The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST\
          \ by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST"
        explode: false
        in: query
        name: mapping_priority
        required: false
        schema:
          default: CHECK_MAPPED_FIRST
          enum:
          - CHECK_MAPPED_FIRST
          - CHECK_UNMAPPED_FIRST
          type: string
        style: form
      - deprecated: false
        description: "The format of the data response in uppercase. It can be one\
          \ of the following: JSON,CSV"
        explode: false
        in: query
        name: response_format
        required: false
        schema:
          default: JSON
          enum:
          - JSON
          - CSV
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GENERIC_RESPONSE'
          description: Success response from the API.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 400 error occurs when some of the data sent is malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 401 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 403 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 404 error can either be returned when some/all of parameters\
            \ sent are not found within our system. This could be beacuse parameters\
            \ like market, instrument, news source, symbol, asset_id etc. are invalid"
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 405 error occurs the user tries to use a http method (GET,POST,PUT\
            \ etc) that is not supported."
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 429 error occurs when you go over the API Key limit. Rate\
            \ limits are eforced on a second (resets every second), minute (resers\
            \ every minute), hour (resets every hour), day (resets every day) and\
            \ month (resets every month) granularity. You can upgrade your account\
            \ and access higher rate limits."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 500 error occurs our API is up but does not know how to
            / can't handle the request.
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 502 error occurs when our API is not running. This error
            is returned by our proxy / load balancer.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 503 error occurs when there is an issue with one of our
            data sources and we can't even return a partial answer.
      tags:
      - Futures
      x-section: Futures
      x-accepts: application/json
    summary: Index (V1) OHLCV+ Days
  /index/v1/historical/hours:
    description: ""
    get:
      deprecated: false
      operationId: index_v1_historical_hours
      parameters:
      - deprecated: false
        description: The exchange to obtain data from
        explode: false
        in: query
        name: market
        required: true
        schema:
          maxLength: 30
          minLength: 2
          type: string
        style: form
      - deprecated: false
        description: "The mapped or unmapped instrument to retrieve on a specific\
          \ market. We first check the instrument against the mapped list and then\
          \ against the unmapped list \n        but you can use the mapping_priority\
          \ param to check the unmapped list first."
        explode: false
        in: query
        name: instrument
        required: true
        schema:
          maxLength: 500
          minLength: 1
          type: string
        style: form
      - deprecated: false
        description: "When requesting historical entries you can fiter by specific\
          \ groups of interest. To do so just pass the groups of interest into the\
          \ URL as a comma separted list. If left empty it will get all data that\
          \ you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME"
        explode: false
        in: query
        name: groups
        required: false
        schema:
          default: []
          items:
            type: string
          type: array
        style: form
      - deprecated: false
        description: The number of data points to return
        explode: false
        in: query
        name: limit
        required: false
        schema:
          default: 30
          maximum: 2000
          minimum: 1
          type: integer
        style: form
      - deprecated: false
        description: "Returns historical data before this unix timestamp. If you want\
          \ to get all the available historical data, you can use limit=2000 and keep\
          \ going back in time using the to_ts param. You can then keep requesting\
          \ batches using: &limit=2000&to_ts={the earliest unix timestamp received}"
        explode: false
        in: query
        name: to_ts
        required: false
        schema:
          type: integer
        style: form
      - deprecated: false
        description: The number of points to aggregate for each returned value. E.g.
          passing 5 on a minute histo data endpoint will return data at 5 minute intervals.
          You are still limited to a maximum of 2000 minute points so the maximum
          you can get is 400 5 minutes interval entries
        explode: false
        in: query
        name: aggregate
        required: false
        schema:
          default: 1
          maximum: 30
          minimum: 1
          type: integer
        style: form
      - deprecated: false
        description: "Boolean value, if set to false or 0 we will not return data\
          \ points for periods with no trading activity."
        explode: false
        in: query
        name: fill
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - deprecated: false
        description: "The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST\
          \ by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST"
        explode: false
        in: query
        name: mapping_priority
        required: false
        schema:
          default: CHECK_MAPPED_FIRST
          enum:
          - CHECK_MAPPED_FIRST
          - CHECK_UNMAPPED_FIRST
          type: string
        style: form
      - deprecated: false
        description: "The format of the data response in uppercase. It can be one\
          \ of the following: JSON,CSV"
        explode: false
        in: query
        name: response_format
        required: false
        schema:
          default: JSON
          enum:
          - JSON
          - CSV
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GENERIC_RESPONSE'
          description: Success response from the API.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 400 error occurs when some of the data sent is malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 401 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 403 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 404 error can either be returned when some/all of parameters\
            \ sent are not found within our system. This could be beacuse parameters\
            \ like market, instrument, news source, symbol, asset_id etc. are invalid"
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 405 error occurs the user tries to use a http method (GET,POST,PUT\
            \ etc) that is not supported."
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 429 error occurs when you go over the API Key limit. Rate\
            \ limits are eforced on a second (resets every second), minute (resers\
            \ every minute), hour (resets every hour), day (resets every day) and\
            \ month (resets every month) granularity. You can upgrade your account\
            \ and access higher rate limits."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 500 error occurs our API is up but does not know how to
            / can't handle the request.
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 502 error occurs when our API is not running. This error
            is returned by our proxy / load balancer.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 503 error occurs when there is an issue with one of our
            data sources and we can't even return a partial answer.
      tags:
      - Futures
      x-section: Futures
      x-accepts: application/json
    summary: Index (V1) OHLCV+ Hours
  /index/v1/historical/messages:
    description: ""
    get:
      deprecated: false
      operationId: index_v1_historical_messages
      parameters:
      - deprecated: false
        description: The exchange to obtain data from
        explode: false
        in: query
        name: market
        required: true
        schema:
          maxLength: 30
          minLength: 2
          type: string
        style: form
      - deprecated: false
        description: "The mapped or unmapped instrument to retrieve on a specific\
          \ market. We first check the instrument against the mapped list and then\
          \ against the unmapped list \n        but you can use the mapping_priority\
          \ param to check the unmapped list first."
        explode: false
        in: query
        name: instrument
        required: true
        schema:
          maxLength: 500
          minLength: 1
          type: string
        style: form
      - deprecated: false
        description: Unix timestamp in seconds of the earliest index message in the
          response
        explode: false
        in: query
        name: after_ts
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      - deprecated: false
        description: "The CCSEQ of the last message seen in the previous request.\
          \ Useful for pagination within messages that happened in the same second.\
          \ It will look though the messages in the same second and discard all messages\
          \ until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ\
          \ is not part of that second, it will discard all messages in the second\
          \ and only return messages starting from the next second onwards. When starting\
          \ an integration with our API, on the first request, you should either not\
          \ send a value for this paramater (defaults to 0 and does not discard any\
          \ messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ\
          \ from the last message in the response. Pass the TIMESTAMP in the after_ts\
          \ parameter and the CCSEQ in the last_ccseq parameter on your next request."
        explode: false
        in: query
        name: last_ccseq
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
        style: form
      - deprecated: false
        description: The maximum number of index messages to return
        explode: false
        in: query
        name: limit
        required: false
        schema:
          default: 100
          maximum: 5000
          minimum: 1
          type: integer
        style: form
      - deprecated: false
        description: "The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST\
          \ by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST"
        explode: false
        in: query
        name: mapping_priority
        required: false
        schema:
          default: CHECK_MAPPED_FIRST
          enum:
          - CHECK_MAPPED_FIRST
          - CHECK_UNMAPPED_FIRST
          type: string
        style: form
      - deprecated: false
        description: "The format of the data response in uppercase. It can be one\
          \ of the following: JSON,CSV"
        explode: false
        in: query
        name: response_format
        required: false
        schema:
          default: JSON
          enum:
          - JSON
          - CSV
          type: string
        style: form
      - deprecated: false
        description: "If set to false (default) then when there are no items to return,\
          \ you will get a response status code of 200 and an empty JSON array or\
          \ a CSV file with just the header. If set to true then when there are no\
          \ items you will get a 404 status code for both JSON and CSV response_formats."
        explode: false
        in: query
        name: return_404_on_empty_response
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GENERIC_RESPONSE'
          description: Success response from the API.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 400 error occurs when some of the data sent is malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 401 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 403 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 404 error can either be returned when some/all of parameters\
            \ sent are not found within our system. This could be beacuse parameters\
            \ like market, instrument, news source, symbol, asset_id etc. are invalid"
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 405 error occurs the user tries to use a http method (GET,POST,PUT\
            \ etc) that is not supported."
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 429 error occurs when you go over the API Key limit. Rate\
            \ limits are eforced on a second (resets every second), minute (resers\
            \ every minute), hour (resets every hour), day (resets every day) and\
            \ month (resets every month) granularity. You can upgrade your account\
            \ and access higher rate limits."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 500 error occurs our API is up but does not know how to
            / can't handle the request.
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 502 error occurs when our API is not running. This error
            is returned by our proxy / load balancer.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 503 error occurs when there is an issue with one of our
            data sources and we can't even return a partial answer.
      security:
      - api_key_query: []
      - api_key_header: []
      tags:
      - Futures
      x-section: Futures
      x-accepts: application/json
    summary: Index (V1) Historical Messages
  /index/v1/historical/messages/hour:
    description: You should use this endpoint to get a full hour of historical messages
      when catching up. For latest messages use the /index/v1/historical/messages
      endpoint.
    get:
      deprecated: false
      operationId: index_v1_historical_messages_hour
      parameters:
      - deprecated: false
        description: The exchange to obtain data from
        explode: false
        in: query
        name: market
        required: true
        schema:
          maxLength: 30
          minLength: 2
          type: string
        style: form
      - deprecated: false
        description: "The mapped or unmapped instrument to retrieve on a specific\
          \ market. We first check the instrument against the mapped list and then\
          \ against the unmapped list \n        but you can use the mapping_priority\
          \ param to check the unmapped list first."
        explode: false
        in: query
        name: instrument
        required: true
        schema:
          maxLength: 500
          minLength: 1
          type: string
        style: form
      - deprecated: false
        description: Unix timestamp in seconds for the hour containing the index updates
          you are interested in. You can pass any timestamp in the hour but we will
          round it down the the full hour timestmap and return all index updates in
          that hour.
        explode: false
        in: query
        name: hour_ts
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      - deprecated: false
        description: "The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST\
          \ by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST"
        explode: false
        in: query
        name: mapping_priority
        required: false
        schema:
          default: CHECK_MAPPED_FIRST
          enum:
          - CHECK_MAPPED_FIRST
          - CHECK_UNMAPPED_FIRST
          type: string
        style: form
      - deprecated: false
        description: "The format of the data response in uppercase. It can be one\
          \ of the following: JSON,CSV"
        explode: false
        in: query
        name: response_format
        required: false
        schema:
          default: JSON
          enum:
          - JSON
          - CSV
          type: string
        style: form
      - deprecated: false
        description: "If set to false (default) then when there are no items to return,\
          \ you will get a response status code of 200 and an empty JSON array or\
          \ a CSV file with just the header. If set to true then when there are no\
          \ items you will get a 404 status code for both JSON and CSV response_formats."
        explode: false
        in: query
        name: return_404_on_empty_response
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GENERIC_RESPONSE'
          description: Success response from the API.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 400 error occurs when some of the data sent is malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 401 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 403 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 404 error can either be returned when some/all of parameters\
            \ sent are not found within our system. This could be beacuse parameters\
            \ like market, instrument, news source, symbol, asset_id etc. are invalid"
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 405 error occurs the user tries to use a http method (GET,POST,PUT\
            \ etc) that is not supported."
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 429 error occurs when you go over the API Key limit. Rate\
            \ limits are eforced on a second (resets every second), minute (resers\
            \ every minute), hour (resets every hour), day (resets every day) and\
            \ month (resets every month) granularity. You can upgrade your account\
            \ and access higher rate limits."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 500 error occurs our API is up but does not know how to
            / can't handle the request.
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 502 error occurs when our API is not running. This error
            is returned by our proxy / load balancer.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 503 error occurs when there is an issue with one of our
            data sources and we can't even return a partial answer.
      security:
      - api_key_query: []
      - api_key_header: []
      tags:
      - Futures
      x-section: Futures
      x-accepts: application/json
    summary: Index (V1) Historical Messages by Hour Timestamp
  /index/v1/historical/minutes:
    description: ""
    get:
      deprecated: false
      operationId: index_v1_historical_minutes
      parameters:
      - deprecated: false
        description: The exchange to obtain data from
        explode: false
        in: query
        name: market
        required: true
        schema:
          maxLength: 30
          minLength: 2
          type: string
        style: form
      - deprecated: false
        description: "The mapped or unmapped instrument to retrieve on a specific\
          \ market. We first check the instrument against the mapped list and then\
          \ against the unmapped list \n        but you can use the mapping_priority\
          \ param to check the unmapped list first."
        explode: false
        in: query
        name: instrument
        required: true
        schema:
          maxLength: 500
          minLength: 1
          type: string
        style: form
      - deprecated: false
        description: "When requesting historical entries you can fiter by specific\
          \ groups of interest. To do so just pass the groups of interest into the\
          \ URL as a comma separted list. If left empty it will get all data that\
          \ you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME"
        explode: false
        in: query
        name: groups
        required: false
        schema:
          default: []
          items:
            type: string
          type: array
        style: form
      - deprecated: false
        description: The number of data points to return
        explode: false
        in: query
        name: limit
        required: false
        schema:
          default: 30
          maximum: 2000
          minimum: 1
          type: integer
        style: form
      - deprecated: false
        description: "Returns historical data before this unix timestamp. If you want\
          \ to get all the available historical data, you can use limit=2000 and keep\
          \ going back in time using the to_ts param. You can then keep requesting\
          \ batches using: &limit=2000&to_ts={the earliest unix timestamp received}"
        explode: false
        in: query
        name: to_ts
        required: false
        schema:
          type: integer
        style: form
      - deprecated: false
        description: The number of points to aggregate for each returned value. E.g.
          passing 5 on a minute histo data endpoint will return data at 5 minute intervals.
          You are still limited to a maximum of 2000 minute points so the maximum
          you can get is 400 5 minutes interval entries
        explode: false
        in: query
        name: aggregate
        required: false
        schema:
          default: 1
          maximum: 30
          minimum: 1
          type: integer
        style: form
      - deprecated: false
        description: "Boolean value, if set to false or 0 we will not return data\
          \ points for periods with no trading activity."
        explode: false
        in: query
        name: fill
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - deprecated: false
        description: "The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST\
          \ by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST"
        explode: false
        in: query
        name: mapping_priority
        required: false
        schema:
          default: CHECK_MAPPED_FIRST
          enum:
          - CHECK_MAPPED_FIRST
          - CHECK_UNMAPPED_FIRST
          type: string
        style: form
      - deprecated: false
        description: "The format of the data response in uppercase. It can be one\
          \ of the following: JSON,CSV"
        explode: false
        in: query
        name: response_format
        required: false
        schema:
          default: JSON
          enum:
          - JSON
          - CSV
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GENERIC_RESPONSE'
          description: Success response from the API.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 400 error occurs when some of the data sent is malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 401 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 403 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 404 error can either be returned when some/all of parameters\
            \ sent are not found within our system. This could be beacuse parameters\
            \ like market, instrument, news source, symbol, asset_id etc. are invalid"
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 405 error occurs the user tries to use a http method (GET,POST,PUT\
            \ etc) that is not supported."
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 429 error occurs when you go over the API Key limit. Rate\
            \ limits are eforced on a second (resets every second), minute (resers\
            \ every minute), hour (resets every hour), day (resets every day) and\
            \ month (resets every month) granularity. You can upgrade your account\
            \ and access higher rate limits."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 500 error occurs our API is up but does not know how to
            / can't handle the request.
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 502 error occurs when our API is not running. This error
            is returned by our proxy / load balancer.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 503 error occurs when there is an issue with one of our
            data sources and we can't even return a partial answer.
      tags:
      - Futures
      x-section: Futures
      x-accepts: application/json
    summary: Index (V1) OHLCV+ Minutes
  /index/v1/latest/instrument/metadata:
    description: ""
    get:
      deprecated: false
      operationId: index_v1_latest_instrument_metadata
      parameters:
      - deprecated: false
        description: The exchange to obtain data from
        explode: false
        in: query
        name: market
        required: true
        schema:
          maxLength: 30
          minLength: 2
          type: string
        style: form
      - deprecated: false
        description: A comma separated array of mapped and/or unmapped instruments
          to retrieve for a specific market (you can use either the instrument XXBTZUSD
          or mapped instrument (base - quote) BTC-USD on kraken as an example). We
          first check each instrument against the mapped list and then against the
          unmapped list but you can use the mapping_priority param to check the unmapped
          list first.
        explode: false
        in: query
        name: instruments
        required: true
        schema:
          items:
            type: string
          maxItems: 25
          minItems: 1
          type: array
        style: form
      - deprecated: false
        description: "When requesting metadata entries you can fiter by specific groups\
          \ of interest. To do so just pass the groups of interest into the URL as\
          \ a comma separted list. If left empty it will get all data that you account\
          \ is allowed to access. The groups available are: STATUS,INTERNAL,GENERAL,MIGRATION,SOURCE"
        explode: false
        in: query
        name: groups
        required: false
        schema:
          default: []
          items:
            type: string
          type: array
        style: form
      - deprecated: false
        description: "The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST\
          \ by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST"
        explode: false
        in: query
        name: mapping_priority
        required: false
        schema:
          default: CHECK_MAPPED_FIRST
          enum:
          - CHECK_MAPPED_FIRST
          - CHECK_UNMAPPED_FIRST
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GENERIC_RESPONSE'
          description: Success response from the API.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 400 error occurs when some of the data sent is malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 401 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 403 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 404 error can either be returned when some/all of parameters\
            \ sent are not found within our system. This could be beacuse parameters\
            \ like market, instrument, news source, symbol, asset_id etc. are invalid"
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 405 error occurs the user tries to use a http method (GET,POST,PUT\
            \ etc) that is not supported."
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 429 error occurs when you go over the API Key limit. Rate\
            \ limits are eforced on a second (resets every second), minute (resers\
            \ every minute), hour (resets every hour), day (resets every day) and\
            \ month (resets every month) granularity. You can upgrade your account\
            \ and access higher rate limits."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 500 error occurs our API is up but does not know how to
            / can't handle the request.
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 502 error occurs when our API is not running. This error
            is returned by our proxy / load balancer.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 503 error occurs when there is an issue with one of our
            data sources and we can't even return a partial answer.
      tags:
      - Futures
      x-section: Futures
      x-accepts: application/json
    summary: Index (V1) Instrument Latest Metadata
  /index/v1/latest/tick:
    description: ""
    get:
      deprecated: false
      operationId: index_v1_latest_tick
      parameters:
      - deprecated: false
        description: The exchange to obtain data from
        explode: false
        in: query
        name: market
        required: true
        schema:
          maxLength: 30
          minLength: 2
          type: string
        style: form
      - deprecated: false
        description: A comma separated array of mapped and/or unmapped instruments
          to retrieve for a specific market (you can use either the instrument XXBTZUSD
          or mapped instrument (base - quote) BTC-USD on kraken as an example). We
          first check each instrument against the mapped list and then against the
          unmapped list but you can use the mapping_priority param to check the unmapped
          list first.
        explode: false
        in: query
        name: instruments
        required: true
        schema:
          items:
            type: string
          maxItems: 25
          minItems: 1
          type: array
        style: form
      - deprecated: false
        description: "When requesting tick data you can fiter by specific groups of\
          \ interest. To do so just pass the groups of interest into the URL as a\
          \ comma separted list. If left empty it will get all data that you account\
          \ is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME"
        explode: false
        in: query
        name: groups
        required: false
        schema:
          default: []
          items:
            type: string
          type: array
        style: form
      - deprecated: false
        description: "The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST\
          \ by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST"
        explode: false
        in: query
        name: mapping_priority
        required: false
        schema:
          default: CHECK_MAPPED_FIRST
          enum:
          - CHECK_MAPPED_FIRST
          - CHECK_UNMAPPED_FIRST
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GENERIC_RESPONSE'
          description: Success response from the API.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 400 error occurs when some of the data sent is malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 401 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 403 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 404 error can either be returned when some/all of parameters\
            \ sent are not found within our system. This could be beacuse parameters\
            \ like market, instrument, news source, symbol, asset_id etc. are invalid"
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 405 error occurs the user tries to use a http method (GET,POST,PUT\
            \ etc) that is not supported."
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 429 error occurs when you go over the API Key limit. Rate\
            \ limits are eforced on a second (resets every second), minute (resers\
            \ every minute), hour (resets every hour), day (resets every day) and\
            \ month (resets every month) granularity. You can upgrade your account\
            \ and access higher rate limits."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 500 error occurs our API is up but does not know how to
            / can't handle the request.
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 502 error occurs when our API is not running. This error
            is returned by our proxy / load balancer.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 503 error occurs when there is an issue with one of our
            data sources and we can't even return a partial answer.
      tags:
      - Futures
      x-section: Futures
      x-accepts: application/json
    summary: Index (V1) Instrument Latest Tick
  /index/v1/markets:
    description: ""
    get:
      deprecated: false
      operationId: index_v1_markets
      parameters:
      - deprecated: false
        description: The exchange to obtain data from
        explode: false
        in: query
        name: market
        required: false
        schema:
          default: ""
          maxLength: 30
          minLength: 0
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GENERIC_RESPONSE'
          description: Success response from the API.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 400 error occurs when some of the data sent is malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 401 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 403 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 404 error can either be returned when some/all of parameters\
            \ sent are not found within our system. This could be beacuse parameters\
            \ like market, instrument, news source, symbol, asset_id etc. are invalid"
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 405 error occurs the user tries to use a http method (GET,POST,PUT\
            \ etc) that is not supported."
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 429 error occurs when you go over the API Key limit. Rate\
            \ limits are eforced on a second (resets every second), minute (resers\
            \ every minute), hour (resets every hour), day (resets every day) and\
            \ month (resets every month) granularity. You can upgrade your account\
            \ and access higher rate limits."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 500 error occurs our API is up but does not know how to
            / can't handle the request.
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 502 error occurs when our API is not running. This error
            is returned by our proxy / load balancer.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 503 error occurs when there is an issue with one of our
            data sources and we can't even return a partial answer.
      tags:
      - Futures
      x-section: Futures
      x-accepts: application/json
    summary: Index (V1) Available Markets
  /index/v1/markets/instruments:
    description: ""
    get:
      deprecated: false
      operationId: index_v1_markets_instruments
      parameters:
      - deprecated: false
        description: The exchange to obtain data from
        explode: false
        in: query
        name: market
        required: false
        schema:
          default: ""
          maxLength: 30
          minLength: 0
          type: string
        style: form
      - deprecated: false
        description: The mapped instrument to retrieve on a specific market.
        explode: false
        in: query
        name: instrument
        required: false
        schema:
          default: ""
          maxLength: 30
          minLength: 0
          type: string
        style: form
      - deprecated: false
        description: "The status of the instrument, can be one of the following: ACTIVE,\
          \ IGNORED, RETIRED, EXPIRED"
        explode: false
        in: query
        name: instrument_status
        required: false
        schema:
          default: []
          items:
            enum:
            - ACTIVE
            - IGNORED
            - RETIRED
            - EXPIRED
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GENERIC_RESPONSE'
          description: Success response from the API.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 400 error occurs when some of the data sent is malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 401 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 403 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 404 error can either be returned when some/all of parameters\
            \ sent are not found within our system. This could be beacuse parameters\
            \ like market, instrument, news source, symbol, asset_id etc. are invalid"
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 405 error occurs the user tries to use a http method (GET,POST,PUT\
            \ etc) that is not supported."
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 429 error occurs when you go over the API Key limit. Rate\
            \ limits are eforced on a second (resets every second), minute (resers\
            \ every minute), hour (resets every hour), day (resets every day) and\
            \ month (resets every month) granularity. You can upgrade your account\
            \ and access higher rate limits."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 500 error occurs our API is up but does not know how to
            / can't handle the request.
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 502 error occurs when our API is not running. This error
            is returned by our proxy / load balancer.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 503 error occurs when there is an issue with one of our
            data sources and we can't even return a partial answer.
      tags:
      - Futures
      x-section: Futures
      x-accepts: application/json
    summary: Index (V1) Available Markets and Instruments
  /index/v1/markets/instruments/unmapped:
    description: ""
    get:
      deprecated: false
      operationId: index_v1_markets_instruments_unmapped
      parameters:
      - deprecated: false
        description: The exchange to obtain data from
        explode: false
        in: query
        name: market
        required: false
        schema:
          default: ""
          maxLength: 30
          minLength: 0
          type: string
        style: form
      - deprecated: false
        description: The unmapped instrument to retrieve on a specific market.
        explode: false
        in: query
        name: instrument
        required: false
        schema:
          default: ""
          maxLength: 30
          minLength: 0
          type: string
        style: form
      - deprecated: false
        description: "The status of the instrument, can be one of the following: ACTIVE,\
          \ IGNORED, RETIRED, EXPIRED"
        explode: false
        in: query
        name: instrument_status
        required: false
        schema:
          default: []
          items:
            enum:
            - ACTIVE
            - IGNORED
            - RETIRED
            - EXPIRED
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GENERIC_RESPONSE'
          description: Success response from the API.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 400 error occurs when some of the data sent is malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 401 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 403 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 404 error can either be returned when some/all of parameters\
            \ sent are not found within our system. This could be beacuse parameters\
            \ like market, instrument, news source, symbol, asset_id etc. are invalid"
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 405 error occurs the user tries to use a http method (GET,POST,PUT\
            \ etc) that is not supported."
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 429 error occurs when you go over the API Key limit. Rate\
            \ limits are eforced on a second (resets every second), minute (resers\
            \ every minute), hour (resets every hour), day (resets every day) and\
            \ month (resets every month) granularity. You can upgrade your account\
            \ and access higher rate limits."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 500 error occurs our API is up but does not know how to
            / can't handle the request.
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 502 error occurs when our API is not running. This error
            is returned by our proxy / load balancer.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 503 error occurs when there is an issue with one of our
            data sources and we can't even return a partial answer.
      tags:
      - Futures
      x-section: Futures
      x-accepts: application/json
    summary: Index (V1) Available Markets and Unmapped Instruments
  /news/v1/article/list:
    description: Get news articles
    get:
      deprecated: false
      operationId: news_v1_article_list
      parameters:
      - deprecated: false
        description: Get articles from specific sources; either by their ids or keys
        explode: false
        in: query
        name: source_ids
        required: false
        schema:
          default:
          - ""
          items:
            type: string
          type: array
        style: form
      - deprecated: false
        description: "The article Preferred language - English (EN), Portuguese (PT),\
          \ Espanol (ES)"
        explode: false
        in: query
        name: lang
        required: false
        schema:
          default: EN
          enum:
          - EN
          - ES
          - PT
          - ""
          minLength: 1
          type: string
        style: form
      - deprecated: false
        description: News article categories to return
        explode: false
        in: query
        name: categories
        required: false
        schema:
          default:
          - ""
          items:
            enum:
            - 1INCH
            - AAVE
            - ADA
            - ALGO
            - ALTCOIN
            - ASIA
            - ATOM
            - AVAX
            - AXS
            - BAL
            - BAT
            - BCH
            - BLOCKCHAIN
            - BTC
            - BUSINESS
            - COMMODITY
            - COMP
            - CRV
            - DASH
            - DOGE
            - DOT
            - ENJ
            - ETC
            - ETH
            - EXCHANGE
            - FIAT
            - FIL
            - FTM
            - ICO
            - KNC
            - LINK
            - LRC
            - LTC
            - LUNA
            - LUNC
            - MANA
            - MARKET
            - MATIC
            - MINING
            - MKR
            - REGULATION
            - REN
            - SAND
            - SHIB
            - SNX
            - SOL
            - SPONSORED
            - SUSHI
            - TECHNOLOGY
            - TRADING
            - TRX
            - UMA
            - UNI
            - USDT
            - WALLET
            - XLM
            - XMR
            - XRP
            - XTZ
            - YFI
            - ZEC
            - ZRX
            - ""
            type: string
          maxItems: 200
          type: array
        style: form
      - deprecated: false
        description: News article categories to exclude from results
        explode: false
        in: query
        name: exclude_categories
        required: false
        schema:
          default:
          - ""
          items:
            enum:
            - 1INCH
            - AAVE
            - ADA
            - ALGO
            - ALTCOIN
            - ASIA
            - ATOM
            - AVAX
            - AXS
            - BAL
            - BAT
            - BCH
            - BLOCKCHAIN
            - BTC
            - BUSINESS
            - COMMODITY
            - COMP
            - CRV
            - DASH
            - DOGE
            - DOT
            - ENJ
            - ETC
            - ETH
            - EXCHANGE
            - FIAT
            - FIL
            - FTM
            - ICO
            - KNC
            - LINK
            - LRC
            - LTC
            - LUNA
            - LUNC
            - MANA
            - MARKET
            - MATIC
            - MINING
            - MKR
            - REGULATION
            - REN
            - SAND
            - SHIB
            - SNX
            - SOL
            - SPONSORED
            - SUSHI
            - TECHNOLOGY
            - TRADING
            - TRX
            - UMA
            - UNI
            - USDT
            - WALLET
            - XLM
            - XMR
            - XRP
            - XTZ
            - YFI
            - ZEC
            - ZRX
            - ""
            type: string
          maxItems: 200
          type: array
        style: form
      - deprecated: false
        description: Articles published on or before this timestamp
        explode: false
        in: query
        name: to_ts
        required: false
        schema:
          default: -1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GENERIC_RESPONSE'
          description: Success response from the API.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 400 error occurs when some of the data sent is malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 401 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 403 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 404 error can either be returned when some/all of parameters\
            \ sent are not found within our system. This could be beacuse parameters\
            \ like market, instrument, news source, symbol, asset_id etc. are invalid"
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 405 error occurs the user tries to use a http method (GET,POST,PUT\
            \ etc) that is not supported."
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 429 error occurs when you go over the API Key limit. Rate\
            \ limits are eforced on a second (resets every second), minute (resers\
            \ every minute), hour (resets every hour), day (resets every day) and\
            \ month (resets every month) granularity. You can upgrade your account\
            \ and access higher rate limits."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 500 error occurs our API is up but does not know how to
            / can't handle the request.
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 502 error occurs when our API is not running. This error
            is returned by our proxy / load balancer.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 503 error occurs when there is an issue with one of our
            data sources and we can't even return a partial answer.
      tags:
      - News
      x-section: News
      x-accepts: application/json
    summary: "Article: List"
  /news/v1/category/list:
    description: Get news categories
    get:
      deprecated: false
      operationId: news_v1_category_list
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GENERIC_RESPONSE'
          description: Success response from the API.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 400 error occurs when some of the data sent is malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 401 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 403 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 404 error can either be returned when some/all of parameters\
            \ sent are not found within our system. This could be beacuse parameters\
            \ like market, instrument, news source, symbol, asset_id etc. are invalid"
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 405 error occurs the user tries to use a http method (GET,POST,PUT\
            \ etc) that is not supported."
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 429 error occurs when you go over the API Key limit. Rate\
            \ limits are eforced on a second (resets every second), minute (resers\
            \ every minute), hour (resets every hour), day (resets every day) and\
            \ month (resets every month) granularity. You can upgrade your account\
            \ and access higher rate limits."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 500 error occurs our API is up but does not know how to
            / can't handle the request.
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 502 error occurs when our API is not running. This error
            is returned by our proxy / load balancer.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 503 error occurs when there is an issue with one of our
            data sources and we can't even return a partial answer.
      tags:
      - News
      x-section: News
      x-accepts: application/json
    summary: "Category: List"
  /news/v1/source/list:
    description: Get news sources
    get:
      deprecated: false
      operationId: news_v1_source_list
      parameters:
      - deprecated: false
        description: "The article source Preferred language - English (EN), Portuguese\
          \ (PT), Espanol (ES)"
        explode: false
        in: query
        name: lang
        required: false
        schema:
          default: EN
          enum:
          - EN
          - ES
          - PT
          - ""
          minLength: 1
          type: string
        style: form
      - deprecated: false
        description: "RSS, API, TWITTER"
        explode: false
        in: query
        name: type
        required: false
        schema:
          default: RSS
          enum:
          - RSS
          - API
          - TWITTER
          - ""
          minLength: 1
          type: string
        style: form
      - deprecated: false
        description: "The status for the  article source entry. Allowed values: ACTIVE,\
          \ INACTIVE"
        explode: false
        in: query
        name: status
        required: false
        schema:
          default: ACTIVE
          enum:
          - ACTIVE
          - INACTIVE
          - ""
          minLength: 1
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GENERIC_RESPONSE'
          description: Success response from the API.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 400 error occurs when some of the data sent is malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 401 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 403 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 404 error can either be returned when some/all of parameters\
            \ sent are not found within our system. This could be beacuse parameters\
            \ like market, instrument, news source, symbol, asset_id etc. are invalid"
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 405 error occurs the user tries to use a http method (GET,POST,PUT\
            \ etc) that is not supported."
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 429 error occurs when you go over the API Key limit. Rate\
            \ limits are eforced on a second (resets every second), minute (resers\
            \ every minute), hour (resets every hour), day (resets every day) and\
            \ month (resets every month) granularity. You can upgrade your account\
            \ and access higher rate limits."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 500 error occurs our API is up but does not know how to
            / can't handle the request.
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 502 error occurs when our API is not running. This error
            is returned by our proxy / load balancer.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 503 error occurs when there is an issue with one of our
            data sources and we can't even return a partial answer.
      tags:
      - News
      x-section: News
      x-accepts: application/json
    summary: "Source: List"
  /overview/v1/historical/marketcap/all/assets/days:
    description: ""
    get:
      deprecated: false
      operationId: overview_v1_historical_marketcap_all_assets_days
      parameters:
      - deprecated: false
        description: "When requesting all market cap historical data you can fiter\
          \ by specific groups of interest. To do so just pass the groups of interest\
          \ into the URL as a comma separted list. If left empty it will get all data\
          \ that you account is allowed to access. The groups available are: ID,OHLC,VOLUME"
        explode: false
        in: query
        name: groups
        required: false
        schema:
          default: []
          items:
            type: string
          type: array
        style: form
      - deprecated: false
        description: The number of data points to return
        explode: false
        in: query
        name: limit
        required: false
        schema:
          default: 30
          maximum: 2000
          minimum: 1
          type: integer
        style: form
      - deprecated: false
        description: "Returns historical data before this unix timestamp. If you want\
          \ to get all the available historical data, you can use limit=2000 and keep\
          \ going back in time using the to_ts param. You can then keep requesting\
          \ batches using: &limit=2000&to_ts={the earliest unix timestamp received}"
        explode: false
        in: query
        name: to_ts
        required: false
        schema:
          type: integer
        style: form
      - deprecated: false
        description: The number of points to aggregate for each returned value. E.g.
          passing 5 on a minute histo data endpoint will return data at 5 minute intervals.
          You are still limited to a maximum of 2000 minute points so the maximum
          you can get is 400 5 minutes interval entries
        explode: false
        in: query
        name: aggregate
        required: false
        schema:
          default: 1
          maximum: 30
          minimum: 1
          type: integer
        style: form
      - deprecated: false
        description: "Boolean value, if set to false or 0 we will not return data\
          \ points for periods with no trading activity."
        explode: false
        in: query
        name: fill
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - deprecated: false
        description: "The format of the data response in uppercase. It can be one\
          \ of the following: JSON,CSV"
        explode: false
        in: query
        name: response_format
        required: false
        schema:
          default: JSON
          enum:
          - JSON
          - CSV
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GENERIC_RESPONSE'
          description: Success response from the API.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 400 error occurs when some of the data sent is malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 401 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 403 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 404 error can either be returned when some/all of parameters\
            \ sent are not found within our system. This could be beacuse parameters\
            \ like market, instrument, news source, symbol, asset_id etc. are invalid"
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 405 error occurs the user tries to use a http method (GET,POST,PUT\
            \ etc) that is not supported."
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 429 error occurs when you go over the API Key limit. Rate\
            \ limits are eforced on a second (resets every second), minute (resers\
            \ every minute), hour (resets every hour), day (resets every day) and\
            \ month (resets every month) granularity. You can upgrade your account\
            \ and access higher rate limits."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 500 error occurs our API is up but does not know how to
            / can't handle the request.
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 502 error occurs when our API is not running. This error
            is returned by our proxy / load balancer.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 503 error occurs when there is an issue with one of our
            data sources and we can't even return a partial answer.
      tags:
      - Overview
      x-section: Overview
      x-accepts: application/json
    summary: Overview (V1) Historical MarketCap Days
  /overview/v1/historical/marketcap/all/assets/hours:
    description: ""
    get:
      deprecated: false
      operationId: overview_v1_historical_marketcap_all_assets_hours
      parameters:
      - deprecated: false
        description: "When requesting all market cap historical data you can fiter\
          \ by specific groups of interest. To do so just pass the groups of interest\
          \ into the URL as a comma separted list. If left empty it will get all data\
          \ that you account is allowed to access. The groups available are: ID,OHLC,VOLUME"
        explode: false
        in: query
        name: groups
        required: false
        schema:
          default: []
          items:
            type: string
          type: array
        style: form
      - deprecated: false
        description: The number of data points to return
        explode: false
        in: query
        name: limit
        required: false
        schema:
          default: 30
          maximum: 2000
          minimum: 1
          type: integer
        style: form
      - deprecated: false
        description: "Returns historical data before this unix timestamp. If you want\
          \ to get all the available historical data, you can use limit=2000 and keep\
          \ going back in time using the to_ts param. You can then keep requesting\
          \ batches using: &limit=2000&to_ts={the earliest unix timestamp received}"
        explode: false
        in: query
        name: to_ts
        required: false
        schema:
          type: integer
        style: form
      - deprecated: false
        description: The number of points to aggregate for each returned value. E.g.
          passing 5 on a minute histo data endpoint will return data at 5 minute intervals.
          You are still limited to a maximum of 2000 minute points so the maximum
          you can get is 400 5 minutes interval entries
        explode: false
        in: query
        name: aggregate
        required: false
        schema:
          default: 1
          maximum: 30
          minimum: 1
          type: integer
        style: form
      - deprecated: false
        description: "Boolean value, if set to false or 0 we will not return data\
          \ points for periods with no trading activity."
        explode: false
        in: query
        name: fill
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - deprecated: false
        description: "The format of the data response in uppercase. It can be one\
          \ of the following: JSON,CSV"
        explode: false
        in: query
        name: response_format
        required: false
        schema:
          default: JSON
          enum:
          - JSON
          - CSV
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GENERIC_RESPONSE'
          description: Success response from the API.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 400 error occurs when some of the data sent is malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 401 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 403 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 404 error can either be returned when some/all of parameters\
            \ sent are not found within our system. This could be beacuse parameters\
            \ like market, instrument, news source, symbol, asset_id etc. are invalid"
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 405 error occurs the user tries to use a http method (GET,POST,PUT\
            \ etc) that is not supported."
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 429 error occurs when you go over the API Key limit. Rate\
            \ limits are eforced on a second (resets every second), minute (resers\
            \ every minute), hour (resets every hour), day (resets every day) and\
            \ month (resets every month) granularity. You can upgrade your account\
            \ and access higher rate limits."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 500 error occurs our API is up but does not know how to
            / can't handle the request.
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 502 error occurs when our API is not running. This error
            is returned by our proxy / load balancer.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 503 error occurs when there is an issue with one of our
            data sources and we can't even return a partial answer.
      tags:
      - Overview
      x-section: Overview
      x-accepts: application/json
    summary: Overview (V1) Historical MarketCap Hours
  /overview/v1/historical/marketcap/ftw/assets/days:
    description: ""
    get:
      deprecated: false
      operationId: overview_v1_historical_marketcap_ftw_assets_days
      parameters:
      - deprecated: false
        description: "When requesting ftw universe market cap historical data you\
          \ can fiter by specific groups of interest. To do so just pass the groups\
          \ of interest into the URL as a comma separted list. If left empty it will\
          \ get all data that you account is allowed to access. The groups available\
          \ are: ID,OHLC,VOLUME"
        explode: false
        in: query
        name: groups
        required: false
        schema:
          default: []
          items:
            type: string
          type: array
        style: form
      - deprecated: false
        description: The number of data points to return
        explode: false
        in: query
        name: limit
        required: false
        schema:
          default: 30
          maximum: 2000
          minimum: 1
          type: integer
        style: form
      - deprecated: false
        description: "Returns historical data before this unix timestamp. If you want\
          \ to get all the available historical data, you can use limit=2000 and keep\
          \ going back in time using the to_ts param. You can then keep requesting\
          \ batches using: &limit=2000&to_ts={the earliest unix timestamp received}"
        explode: false
        in: query
        name: to_ts
        required: false
        schema:
          type: integer
        style: form
      - deprecated: false
        description: The number of points to aggregate for each returned value. E.g.
          passing 5 on a minute histo data endpoint will return data at 5 minute intervals.
          You are still limited to a maximum of 2000 minute points so the maximum
          you can get is 400 5 minutes interval entries
        explode: false
        in: query
        name: aggregate
        required: false
        schema:
          default: 1
          maximum: 30
          minimum: 1
          type: integer
        style: form
      - deprecated: false
        description: "Boolean value, if set to false or 0 we will not return data\
          \ points for periods with no trading activity."
        explode: false
        in: query
        name: fill
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - deprecated: false
        description: "The format of the data response in uppercase. It can be one\
          \ of the following: JSON,CSV"
        explode: false
        in: query
        name: response_format
        required: false
        schema:
          default: JSON
          enum:
          - JSON
          - CSV
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GENERIC_RESPONSE'
          description: Success response from the API.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 400 error occurs when some of the data sent is malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 401 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 403 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 404 error can either be returned when some/all of parameters\
            \ sent are not found within our system. This could be beacuse parameters\
            \ like market, instrument, news source, symbol, asset_id etc. are invalid"
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 405 error occurs the user tries to use a http method (GET,POST,PUT\
            \ etc) that is not supported."
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 429 error occurs when you go over the API Key limit. Rate\
            \ limits are eforced on a second (resets every second), minute (resers\
            \ every minute), hour (resets every hour), day (resets every day) and\
            \ month (resets every month) granularity. You can upgrade your account\
            \ and access higher rate limits."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 500 error occurs our API is up but does not know how to
            / can't handle the request.
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 502 error occurs when our API is not running. This error
            is returned by our proxy / load balancer.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 503 error occurs when there is an issue with one of our
            data sources and we can't even return a partial answer.
      tags:
      - Overview
      x-section: Overview
      x-accepts: application/json
    summary: Overview (V1) Historical FTW Universe MarketCap Days
  /overview/v1/historical/marketcap/ftw/assets/hours:
    description: ""
    get:
      deprecated: false
      operationId: overview_v1_historical_marketcap_ftw_assets_hours
      parameters:
      - deprecated: false
        description: "When requesting ftw universe market cap historical data you\
          \ can fiter by specific groups of interest. To do so just pass the groups\
          \ of interest into the URL as a comma separted list. If left empty it will\
          \ get all data that you account is allowed to access. The groups available\
          \ are: ID,OHLC,VOLUME"
        explode: false
        in: query
        name: groups
        required: false
        schema:
          default: []
          items:
            type: string
          type: array
        style: form
      - deprecated: false
        description: The number of data points to return
        explode: false
        in: query
        name: limit
        required: false
        schema:
          default: 30
          maximum: 2000
          minimum: 1
          type: integer
        style: form
      - deprecated: false
        description: "Returns historical data before this unix timestamp. If you want\
          \ to get all the available historical data, you can use limit=2000 and keep\
          \ going back in time using the to_ts param. You can then keep requesting\
          \ batches using: &limit=2000&to_ts={the earliest unix timestamp received}"
        explode: false
        in: query
        name: to_ts
        required: false
        schema:
          type: integer
        style: form
      - deprecated: false
        description: The number of points to aggregate for each returned value. E.g.
          passing 5 on a minute histo data endpoint will return data at 5 minute intervals.
          You are still limited to a maximum of 2000 minute points so the maximum
          you can get is 400 5 minutes interval entries
        explode: false
        in: query
        name: aggregate
        required: false
        schema:
          default: 1
          maximum: 30
          minimum: 1
          type: integer
        style: form
      - deprecated: false
        description: "Boolean value, if set to false or 0 we will not return data\
          \ points for periods with no trading activity."
        explode: false
        in: query
        name: fill
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - deprecated: false
        description: "The format of the data response in uppercase. It can be one\
          \ of the following: JSON,CSV"
        explode: false
        in: query
        name: response_format
        required: false
        schema:
          default: JSON
          enum:
          - JSON
          - CSV
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GENERIC_RESPONSE'
          description: Success response from the API.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 400 error occurs when some of the data sent is malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 401 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 403 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 404 error can either be returned when some/all of parameters\
            \ sent are not found within our system. This could be beacuse parameters\
            \ like market, instrument, news source, symbol, asset_id etc. are invalid"
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 405 error occurs the user tries to use a http method (GET,POST,PUT\
            \ etc) that is not supported."
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 429 error occurs when you go over the API Key limit. Rate\
            \ limits are eforced on a second (resets every second), minute (resers\
            \ every minute), hour (resets every hour), day (resets every day) and\
            \ month (resets every month) granularity. You can upgrade your account\
            \ and access higher rate limits."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 500 error occurs our API is up but does not know how to
            / can't handle the request.
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 502 error occurs when our API is not running. This error
            is returned by our proxy / load balancer.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 503 error occurs when there is an issue with one of our
            data sources and we can't even return a partial answer.
      tags:
      - Overview
      x-section: Overview
      x-accepts: application/json
    summary: Overview (V1) Historical FTW Universe MarketCap Hours
  /overview/v1/latest/marketcap/all/tick:
    description: ""
    get:
      deprecated: false
      operationId: overview_v1_latest_marketcap_all_tick
      parameters:
      - deprecated: false
        description: "When requesting all market cap tick data you can fiter by specific\
          \ groups of interest. To do so just pass the groups of interest into the\
          \ URL as a comma separted list. If left empty it will get all data that\
          \ you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,MOVING_24_HOUR"
        explode: false
        in: query
        name: groups
        required: false
        schema:
          default: []
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GENERIC_RESPONSE'
          description: Success response from the API.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 400 error occurs when some of the data sent is malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 401 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 403 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 404 error can either be returned when some/all of parameters\
            \ sent are not found within our system. This could be beacuse parameters\
            \ like market, instrument, news source, symbol, asset_id etc. are invalid"
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 405 error occurs the user tries to use a http method (GET,POST,PUT\
            \ etc) that is not supported."
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 429 error occurs when you go over the API Key limit. Rate\
            \ limits are eforced on a second (resets every second), minute (resers\
            \ every minute), hour (resets every hour), day (resets every day) and\
            \ month (resets every month) granularity. You can upgrade your account\
            \ and access higher rate limits."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 500 error occurs our API is up but does not know how to
            / can't handle the request.
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 502 error occurs when our API is not running. This error
            is returned by our proxy / load balancer.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 503 error occurs when there is an issue with one of our
            data sources and we can't even return a partial answer.
      tags:
      - Overview
      x-section: Overview
      x-accepts: application/json
    summary: Overview (V1) MarketCap Tick
  /overview/v1/latest/marketcap/ftw/tick:
    description: ""
    get:
      deprecated: false
      operationId: overview_v1_latest_marketcap_ftw_tick
      parameters:
      - deprecated: false
        description: "When requesting ftw universe market cap tick data you can fiter\
          \ by specific groups of interest. To do so just pass the groups of interest\
          \ into the URL as a comma separted list. If left empty it will get all data\
          \ that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,MOVING_24_HOUR"
        explode: false
        in: query
        name: groups
        required: false
        schema:
          default: []
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GENERIC_RESPONSE'
          description: Success response from the API.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 400 error occurs when some of the data sent is malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 401 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 403 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 404 error can either be returned when some/all of parameters\
            \ sent are not found within our system. This could be beacuse parameters\
            \ like market, instrument, news source, symbol, asset_id etc. are invalid"
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 405 error occurs the user tries to use a http method (GET,POST,PUT\
            \ etc) that is not supported."
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 429 error occurs when you go over the API Key limit. Rate\
            \ limits are eforced on a second (resets every second), minute (resers\
            \ every minute), hour (resets every hour), day (resets every day) and\
            \ month (resets every month) granularity. You can upgrade your account\
            \ and access higher rate limits."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 500 error occurs our API is up but does not know how to
            / can't handle the request.
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 502 error occurs when our API is not running. This error
            is returned by our proxy / load balancer.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 503 error occurs when there is an issue with one of our
            data sources and we can't even return a partial answer.
      tags:
      - Overview
      x-section: Overview
      x-accepts: application/json
    summary: Overview (V1) FTW Universe MarketCap Tick
  /spot/v1/historical/days:
    description: ""
    get:
      deprecated: false
      operationId: spot_v1_historical_days
      parameters:
      - deprecated: false
        description: The exchange to obtain data from
        explode: false
        in: query
        name: market
        required: true
        schema:
          maxLength: 30
          minLength: 2
          type: string
        style: form
      - deprecated: false
        description: "The mapped or unmapped instrument to retrieve on a specific\
          \ market. We first check the instrument against the mapped list and then\
          \ against the unmapped list \n        but you can use the mapping_priority\
          \ param to check the unmapped list first."
        explode: false
        in: query
        name: instrument
        required: true
        schema:
          maxLength: 500
          minLength: 1
          type: string
        style: form
      - deprecated: false
        description: "When requesting historical entries you can fiter by specific\
          \ groups of interest. To do so just pass the groups of interest into the\
          \ URL as a comma separted list. If left empty it will get all data that\
          \ you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME"
        explode: false
        in: query
        name: groups
        required: false
        schema:
          default: []
          items:
            type: string
          type: array
        style: form
      - deprecated: false
        description: The number of data points to return
        explode: false
        in: query
        name: limit
        required: false
        schema:
          default: 30
          maximum: 5000
          minimum: 1
          type: integer
        style: form
      - deprecated: false
        description: "Returns historical data before this unix timestamp. If you want\
          \ to get all the available historical data, you can use limit=2000 and keep\
          \ going back in time using the to_ts param. You can then keep requesting\
          \ batches using: &limit=2000&to_ts={the earliest unix timestamp received}"
        explode: false
        in: query
        name: to_ts
        required: false
        schema:
          type: integer
        style: form
      - deprecated: false
        description: The number of points to aggregate for each returned value. E.g.
          passing 5 on a minute histo data endpoint will return data at 5 minute intervals.
          You are still limited to a maximum of 2000 minute points so the maximum
          you can get is 400 5 minutes interval entries
        explode: false
        in: query
        name: aggregate
        required: false
        schema:
          default: 1
          maximum: 30
          minimum: 1
          type: integer
        style: form
      - deprecated: false
        description: "Boolean value, if set to false or 0 we will not return data\
          \ points for periods with no trading activity."
        explode: false
        in: query
        name: fill
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - deprecated: false
        description: "The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST\
          \ by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST"
        explode: false
        in: query
        name: mapping_priority
        required: false
        schema:
          default: CHECK_MAPPED_FIRST
          enum:
          - CHECK_MAPPED_FIRST
          - CHECK_UNMAPPED_FIRST
          type: string
        style: form
      - deprecated: false
        description: "The format of the data response in uppercase. It can be one\
          \ of the following: JSON,CSV"
        explode: false
        in: query
        name: response_format
        required: false
        schema:
          default: JSON
          enum:
          - JSON
          - CSV
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SPOT_INSTRUMENT_HISTO_DATA_RESPONSE'
          description: Success response from the API.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 400 error occurs when some of the data sent is malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 401 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 403 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 404 error can either be returned when some/all of parameters\
            \ sent are not found within our system. This could be beacuse parameters\
            \ like market, instrument, news source, symbol, asset_id etc. are invalid"
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 405 error occurs the user tries to use a http method (GET,POST,PUT\
            \ etc) that is not supported."
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 429 error occurs when you go over the API Key limit. Rate\
            \ limits are eforced on a second (resets every second), minute (resers\
            \ every minute), hour (resets every hour), day (resets every day) and\
            \ month (resets every month) granularity. You can upgrade your account\
            \ and access higher rate limits."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 500 error occurs our API is up but does not know how to
            / can't handle the request.
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 502 error occurs when our API is not running. This error
            is returned by our proxy / load balancer.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 503 error occurs when there is an issue with one of our
            data sources and we can't even return a partial answer.
      tags:
      - Spot
      x-section: Spot
      x-subsection: Trade
      x-accepts: application/json
    summary: Historical OHLCV+ Day
  /spot/v1/historical/hours:
    description: ""
    get:
      deprecated: false
      operationId: spot_v1_historical_hours
      parameters:
      - deprecated: false
        description: The exchange to obtain data from
        explode: false
        in: query
        name: market
        required: true
        schema:
          maxLength: 30
          minLength: 2
          type: string
        style: form
      - deprecated: false
        description: "The mapped or unmapped instrument to retrieve on a specific\
          \ market. We first check the instrument against the mapped list and then\
          \ against the unmapped list \n        but you can use the mapping_priority\
          \ param to check the unmapped list first."
        explode: false
        in: query
        name: instrument
        required: true
        schema:
          maxLength: 500
          minLength: 1
          type: string
        style: form
      - deprecated: false
        description: "When requesting historical entries you can fiter by specific\
          \ groups of interest. To do so just pass the groups of interest into the\
          \ URL as a comma separted list. If left empty it will get all data that\
          \ you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME"
        explode: false
        in: query
        name: groups
        required: false
        schema:
          default: []
          items:
            type: string
          type: array
        style: form
      - deprecated: false
        description: The number of data points to return
        explode: false
        in: query
        name: limit
        required: false
        schema:
          default: 30
          maximum: 2000
          minimum: 1
          type: integer
        style: form
      - deprecated: false
        description: "Returns historical data before this unix timestamp. If you want\
          \ to get all the available historical data, you can use limit=2000 and keep\
          \ going back in time using the to_ts param. You can then keep requesting\
          \ batches using: &limit=2000&to_ts={the earliest unix timestamp received}"
        explode: false
        in: query
        name: to_ts
        required: false
        schema:
          type: integer
        style: form
      - deprecated: false
        description: The number of points to aggregate for each returned value. E.g.
          passing 5 on a minute histo data endpoint will return data at 5 minute intervals.
          You are still limited to a maximum of 2000 minute points so the maximum
          you can get is 400 5 minutes interval entries
        explode: false
        in: query
        name: aggregate
        required: false
        schema:
          default: 1
          maximum: 30
          minimum: 1
          type: integer
        style: form
      - deprecated: false
        description: "Boolean value, if set to false or 0 we will not return data\
          \ points for periods with no trading activity."
        explode: false
        in: query
        name: fill
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - deprecated: false
        description: "The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST\
          \ by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST"
        explode: false
        in: query
        name: mapping_priority
        required: false
        schema:
          default: CHECK_MAPPED_FIRST
          enum:
          - CHECK_MAPPED_FIRST
          - CHECK_UNMAPPED_FIRST
          type: string
        style: form
      - deprecated: false
        description: "The format of the data response in uppercase. It can be one\
          \ of the following: JSON,CSV"
        explode: false
        in: query
        name: response_format
        required: false
        schema:
          default: JSON
          enum:
          - JSON
          - CSV
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SPOT_INSTRUMENT_HISTO_DATA_RESPONSE'
          description: Success response from the API.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 400 error occurs when some of the data sent is malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 401 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 403 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 404 error can either be returned when some/all of parameters\
            \ sent are not found within our system. This could be beacuse parameters\
            \ like market, instrument, news source, symbol, asset_id etc. are invalid"
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 405 error occurs the user tries to use a http method (GET,POST,PUT\
            \ etc) that is not supported."
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 429 error occurs when you go over the API Key limit. Rate\
            \ limits are eforced on a second (resets every second), minute (resers\
            \ every minute), hour (resets every hour), day (resets every day) and\
            \ month (resets every month) granularity. You can upgrade your account\
            \ and access higher rate limits."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 500 error occurs our API is up but does not know how to
            / can't handle the request.
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 502 error occurs when our API is not running. This error
            is returned by our proxy / load balancer.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 503 error occurs when there is an issue with one of our
            data sources and we can't even return a partial answer.
      tags:
      - Spot
      x-section: Spot
      x-subsection: Trade
      x-accepts: application/json
    summary: Historical OHLCV+ Hour
  /spot/v1/historical/minutes:
    description: ""
    get:
      deprecated: false
      operationId: spot_v1_historical_minutes
      parameters:
      - deprecated: false
        description: The exchange to obtain data from
        explode: false
        in: query
        name: market
        required: true
        schema:
          maxLength: 30
          minLength: 2
          type: string
        style: form
      - deprecated: false
        description: "The mapped or unmapped instrument to retrieve on a specific\
          \ market. We first check the instrument against the mapped list and then\
          \ against the unmapped list \n        but you can use the mapping_priority\
          \ param to check the unmapped list first."
        explode: false
        in: query
        name: instrument
        required: true
        schema:
          maxLength: 500
          minLength: 1
          type: string
        style: form
      - deprecated: false
        description: "When requesting historical entries you can fiter by specific\
          \ groups of interest. To do so just pass the groups of interest into the\
          \ URL as a comma separted list. If left empty it will get all data that\
          \ you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME"
        explode: false
        in: query
        name: groups
        required: false
        schema:
          default: []
          items:
            type: string
          type: array
        style: form
      - deprecated: false
        description: The number of data points to return
        explode: false
        in: query
        name: limit
        required: false
        schema:
          default: 30
          maximum: 2000
          minimum: 1
          type: integer
        style: form
      - deprecated: false
        description: "Returns historical data before this unix timestamp. If you want\
          \ to get all the available historical data, you can use limit=2000 and keep\
          \ going back in time using the to_ts param. You can then keep requesting\
          \ batches using: &limit=2000&to_ts={the earliest unix timestamp received}"
        explode: false
        in: query
        name: to_ts
        required: false
        schema:
          type: integer
        style: form
      - deprecated: false
        description: The number of points to aggregate for each returned value. E.g.
          passing 5 on a minute histo data endpoint will return data at 5 minute intervals.
          You are still limited to a maximum of 2000 minute points so the maximum
          you can get is 400 5 minutes interval entries
        explode: false
        in: query
        name: aggregate
        required: false
        schema:
          default: 1
          maximum: 30
          minimum: 1
          type: integer
        style: form
      - deprecated: false
        description: "Boolean value, if set to false or 0 we will not return data\
          \ points for periods with no trading activity."
        explode: false
        in: query
        name: fill
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - deprecated: false
        description: "The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST\
          \ by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST"
        explode: false
        in: query
        name: mapping_priority
        required: false
        schema:
          default: CHECK_MAPPED_FIRST
          enum:
          - CHECK_MAPPED_FIRST
          - CHECK_UNMAPPED_FIRST
          type: string
        style: form
      - deprecated: false
        description: "The format of the data response in uppercase. It can be one\
          \ of the following: JSON,CSV"
        explode: false
        in: query
        name: response_format
        required: false
        schema:
          default: JSON
          enum:
          - JSON
          - CSV
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SPOT_INSTRUMENT_HISTO_DATA_RESPONSE'
          description: Success response from the API.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 400 error occurs when some of the data sent is malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 401 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 403 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 404 error can either be returned when some/all of parameters\
            \ sent are not found within our system. This could be beacuse parameters\
            \ like market, instrument, news source, symbol, asset_id etc. are invalid"
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 405 error occurs the user tries to use a http method (GET,POST,PUT\
            \ etc) that is not supported."
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 429 error occurs when you go over the API Key limit. Rate\
            \ limits are eforced on a second (resets every second), minute (resers\
            \ every minute), hour (resets every hour), day (resets every day) and\
            \ month (resets every month) granularity. You can upgrade your account\
            \ and access higher rate limits."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 500 error occurs our API is up but does not know how to
            / can't handle the request.
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 502 error occurs when our API is not running. This error
            is returned by our proxy / load balancer.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 503 error occurs when there is an issue with one of our
            data sources and we can't even return a partial answer.
      tags:
      - Spot
      x-section: Spot
      x-subsection: Trade
      x-accepts: application/json
    summary: Historical OHLCV+ Minute
  /spot/v1/historical/orderbook/l2/snapshot/minute:
    description: ""
    get:
      deprecated: false
      operationId: spot_v1_historical_orderbook_l2_snapshot_minute
      parameters:
      - deprecated: false
        description: The exchange to obtain data from
        explode: false
        in: query
        name: market
        required: true
        schema:
          maxLength: 30
          minLength: 2
          type: string
        style: form
      - deprecated: false
        description: "The mapped or unmapped instrument to retrieve on a specific\
          \ market. We first check the instrument against the mapped list and then\
          \ against the unmapped list \n        but you can use the mapping_priority\
          \ param to check the unmapped list first."
        explode: false
        in: query
        name: instrument
        required: true
        schema:
          maxLength: 500
          minLength: 1
          type: string
        style: form
      - deprecated: false
        description: Unix timestamp in seconds for the minute of the orderbook snapshot
          you are interested in. You can pass any timestamp within a minute but we
          will round it down the the full minute timestmap and return the orderbook
          l2 snapshot at that minute.
        explode: false
        in: query
        name: minute_ts
        required: true
        schema:
          type: integer
        style: form
      - deprecated: false
        description: The number of top bids and asks to return.
        explode: false
        in: query
        name: depth
        required: false
        schema:
          default: 50
          maximum: 20000
          minimum: 1
          type: integer
        style: form
      - deprecated: false
        description: "The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST\
          \ by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST"
        explode: false
        in: query
        name: mapping_priority
        required: false
        schema:
          default: CHECK_MAPPED_FIRST
          enum:
          - CHECK_MAPPED_FIRST
          - CHECK_UNMAPPED_FIRST
          type: string
        style: form
      - deprecated: false
        description: "The format of the data response in uppercase. It can be one\
          \ of the following: JSON,CSV"
        explode: false
        in: query
        name: response_format
        required: false
        schema:
          default: JSON
          enum:
          - JSON
          - CSV
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GENERIC_RESPONSE'
          description: Success response from the API.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 400 error occurs when some of the data sent is malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 401 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 403 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 404 error can either be returned when some/all of parameters\
            \ sent are not found within our system. This could be beacuse parameters\
            \ like market, instrument, news source, symbol, asset_id etc. are invalid"
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 405 error occurs the user tries to use a http method (GET,POST,PUT\
            \ etc) that is not supported."
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 429 error occurs when you go over the API Key limit. Rate\
            \ limits are eforced on a second (resets every second), minute (resers\
            \ every minute), hour (resets every hour), day (resets every day) and\
            \ month (resets every month) granularity. You can upgrade your account\
            \ and access higher rate limits."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 500 error occurs our API is up but does not know how to
            / can't handle the request.
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 502 error occurs when our API is not running. This error
            is returned by our proxy / load balancer.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 503 error occurs when there is an issue with one of our
            data sources and we can't even return a partial answer.
      security:
      - api_key_query: []
      - api_key_header: []
      tags:
      - Spot
      x-section: Spot
      x-subsection: Order Book
      x-accepts: application/json
    summary: Historical Order Book L2 Snapshot By Minute
  /spot/v1/historical/trades:
    description: ""
    get:
      deprecated: false
      operationId: spot_v1_historical_trades
      parameters:
      - deprecated: false
        description: The exchange to obtain data from
        explode: false
        in: query
        name: market
        required: true
        schema:
          maxLength: 30
          minLength: 2
          type: string
        style: form
      - deprecated: false
        description: "The mapped or unmapped instrument to retrieve on a specific\
          \ market. We first check the instrument against the mapped list and then\
          \ against the unmapped list \n        but you can use the mapping_priority\
          \ param to check the unmapped list first."
        explode: false
        in: query
        name: instrument
        required: true
        schema:
          maxLength: 500
          minLength: 1
          type: string
        style: form
      - deprecated: false
        description: Unix timestamp in seconds of the earliest trade in the response.
        explode: false
        in: query
        name: after_ts
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      - deprecated: false
        description: "The CCSEQ of the last message seen in the previous request.\
          \ Useful for pagination within messages that happened in the same second.\
          \ It will look though the messages in the same second and discard all messages\
          \ until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ\
          \ is not part of that second, it will discard all messages in the second\
          \ and only return messages starting from the next second onwards. When starting\
          \ an integration with our API, on the first request, you should either not\
          \ send a value for this paramater (defaults to 0 and does not discard any\
          \ messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ\
          \ from the last message in the response. Pass the TIMESTAMP in the after_ts\
          \ parameter and the CCSEQ in the last_ccseq parameter on your next request."
        explode: false
        in: query
        name: last_ccseq
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
        style: form
      - deprecated: false
        description: The maximum number of trades to return
        explode: false
        in: query
        name: limit
        required: false
        schema:
          default: 100
          maximum: 5000
          minimum: 1
          type: integer
        style: form
      - deprecated: false
        description: "The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST\
          \ by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST"
        explode: false
        in: query
        name: mapping_priority
        required: false
        schema:
          default: CHECK_MAPPED_FIRST
          enum:
          - CHECK_MAPPED_FIRST
          - CHECK_UNMAPPED_FIRST
          type: string
        style: form
      - deprecated: false
        description: "The format of the data response in uppercase. It can be one\
          \ of the following: JSON,CSV"
        explode: false
        in: query
        name: response_format
        required: false
        schema:
          default: JSON
          enum:
          - JSON
          - CSV
          type: string
        style: form
      - deprecated: false
        description: "If set to false (default) then when there are no items to return,\
          \ you will get a response status code of 200 and an empty JSON array or\
          \ a CSV file with just the header. If set to true then when there are no\
          \ items you will get a 404 status code for both JSON and CSV response_formats."
        explode: false
        in: query
        name: return_404_on_empty_response
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SPOT_INSTRUMENT_TRADE_RESPONSE'
          description: Success response from the API.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 400 error occurs when some of the data sent is malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 401 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 403 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 404 error can either be returned when some/all of parameters\
            \ sent are not found within our system. This could be beacuse parameters\
            \ like market, instrument, news source, symbol, asset_id etc. are invalid"
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 405 error occurs the user tries to use a http method (GET,POST,PUT\
            \ etc) that is not supported."
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 429 error occurs when you go over the API Key limit. Rate\
            \ limits are eforced on a second (resets every second), minute (resers\
            \ every minute), hour (resets every hour), day (resets every day) and\
            \ month (resets every month) granularity. You can upgrade your account\
            \ and access higher rate limits."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 500 error occurs our API is up but does not know how to
            / can't handle the request.
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 502 error occurs when our API is not running. This error
            is returned by our proxy / load balancer.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 503 error occurs when there is an issue with one of our
            data sources and we can't even return a partial answer.
      security:
      - api_key_query: []
      - api_key_header: []
      tags:
      - Spot
      x-section: Spot
      x-subsection: Trade
      x-accepts: application/json
    summary: Historical Trades By Timestamp
  /spot/v1/historical/trades/hour:
    description: You should use this endpoint to get a full hour of historical trades
      when catching up. For latest trades use the /spot/v1/historical/trades endpoint.
    get:
      deprecated: false
      operationId: spot_v1_historical_trades_hour
      parameters:
      - deprecated: false
        description: The exchange to obtain data from
        explode: false
        in: query
        name: market
        required: true
        schema:
          maxLength: 30
          minLength: 2
          type: string
        style: form
      - deprecated: false
        description: "The mapped or unmapped instrument to retrieve on a specific\
          \ market. We first check the instrument against the mapped list and then\
          \ against the unmapped list \n        but you can use the mapping_priority\
          \ param to check the unmapped list first."
        explode: false
        in: query
        name: instrument
        required: true
        schema:
          maxLength: 500
          minLength: 1
          type: string
        style: form
      - deprecated: false
        description: Unix timestamp in seconds for the hour containing the trades
          you are interested in. You can pass any timestamp within an hour but we
          will round it down the the full hour timestmap and return all trades in
          that hour.
        explode: false
        in: query
        name: hour_ts
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      - deprecated: false
        description: "The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST\
          \ by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST"
        explode: false
        in: query
        name: mapping_priority
        required: false
        schema:
          default: CHECK_MAPPED_FIRST
          enum:
          - CHECK_MAPPED_FIRST
          - CHECK_UNMAPPED_FIRST
          type: string
        style: form
      - deprecated: false
        description: "The format of the data response in uppercase. It can be one\
          \ of the following: JSON,CSV"
        explode: false
        in: query
        name: response_format
        required: false
        schema:
          default: JSON
          enum:
          - JSON
          - CSV
          type: string
        style: form
      - deprecated: false
        description: "If set to false (default) then when there are no items to return,\
          \ you will get a response status code of 200 and an empty JSON array or\
          \ a CSV file with just the header. If set to true then when there are no\
          \ items you will get a 404 status code for both JSON and CSV response_formats."
        explode: false
        in: query
        name: return_404_on_empty_response
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SPOT_INSTRUMENT_TRADE_RESPONSE'
          description: Success response from the API.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 400 error occurs when some of the data sent is malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 401 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 403 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 404 error can either be returned when some/all of parameters\
            \ sent are not found within our system. This could be beacuse parameters\
            \ like market, instrument, news source, symbol, asset_id etc. are invalid"
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 405 error occurs the user tries to use a http method (GET,POST,PUT\
            \ etc) that is not supported."
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 429 error occurs when you go over the API Key limit. Rate\
            \ limits are eforced on a second (resets every second), minute (resers\
            \ every minute), hour (resets every hour), day (resets every day) and\
            \ month (resets every month) granularity. You can upgrade your account\
            \ and access higher rate limits."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 500 error occurs our API is up but does not know how to
            / can't handle the request.
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 502 error occurs when our API is not running. This error
            is returned by our proxy / load balancer.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 503 error occurs when there is an issue with one of our
            data sources and we can't even return a partial answer.
      security:
      - api_key_query: []
      - api_key_header: []
      tags:
      - Spot
      x-section: Spot
      x-subsection: Trade
      x-accepts: application/json
    summary: Historical Trades By Hour
  /spot/v1/latest/instrument/metadata:
    description: "Use to get metadata for a given array of instruments on a specific\
      \ market. Metadata includes the instrument current status, first and last seen\
      \ dates, and a mapping data regarding the instrument. This can be used to cross-reference\
      \ the instrument's data with other systems that use different identifier schemes."
    get:
      deprecated: false
      operationId: spot_v1_latest_instrument_metadata
      parameters:
      - deprecated: false
        description: The exchange to obtain data from
        example: coinbase
        explode: false
        in: query
        name: market
        required: true
        schema:
          maxLength: 30
          minLength: 2
          type: string
        style: form
      - deprecated: false
        description: A comma separated array of mapped and/or unmapped instruments
          to retrieve for a specific market (you can use either the instrument XXBTZUSD
          or mapped instrument (base - quote) BTC-USD on kraken as an example). We
          first check each instrument against the mapped list and then against the
          unmapped list but you can use the mapping_priority param to check the unmapped
          list first.
        example:
        - BTC-USD
        - ETH-USD
        explode: false
        in: query
        name: instruments
        required: true
        schema:
          items:
            type: string
          maxItems: 25
          minItems: 1
          type: array
        style: form
      - deprecated: false
        description: "When requesting metadata entries you can fiter by specific groups\
          \ of interest. To do so just pass the groups of interest into the URL as\
          \ a comma separted list. If left empty it will get all data that you account\
          \ is allowed to access. The groups available are: STATUS,INTERNAL,GENERAL,MIGRATION,SOURCE"
        explode: false
        in: query
        name: groups
        required: false
        schema:
          default: []
          items:
            type: string
          type: array
        style: form
      - deprecated: false
        description: "The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST\
          \ by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST"
        explode: false
        in: query
        name: mapping_priority
        required: false
        schema:
          default: CHECK_MAPPED_FIRST
          enum:
          - CHECK_MAPPED_FIRST
          - CHECK_UNMAPPED_FIRST
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SPOT_INSTRUMENT_METADATA_RESPONSE'
          description: Success response from the API.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 400 error occurs when some of the data sent is malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 401 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 403 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 404 error can either be returned when some/all of parameters\
            \ sent are not found within our system. This could be beacuse parameters\
            \ like market, instrument, news source, symbol, asset_id etc. are invalid"
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 405 error occurs the user tries to use a http method (GET,POST,PUT\
            \ etc) that is not supported."
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 429 error occurs when you go over the API Key limit. Rate\
            \ limits are eforced on a second (resets every second), minute (resers\
            \ every minute), hour (resets every hour), day (resets every day) and\
            \ month (resets every month) granularity. You can upgrade your account\
            \ and access higher rate limits."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 500 error occurs our API is up but does not know how to
            / can't handle the request.
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 502 error occurs when our API is not running. This error
            is returned by our proxy / load balancer.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 503 error occurs when there is an issue with one of our
            data sources and we can't even return a partial answer.
      tags:
      - Spot
      x-section: Spot
      x-subsection: General
      x-accepts: application/json
    summary: Instrument Metadata
  /spot/v1/latest/tick:
    description: ""
    get:
      deprecated: false
      operationId: spot_v1_latest_tick
      parameters:
      - deprecated: false
        description: The exchange to obtain data from
        explode: false
        in: query
        name: market
        required: true
        schema:
          maxLength: 30
          minLength: 2
          type: string
        style: form
      - deprecated: false
        description: A comma separated array of mapped and/or unmapped instruments
          to retrieve for a specific market (you can use either the instrument XXBTZUSD
          or mapped instrument (base - quote) BTC-USD on kraken as an example). We
          first check each instrument against the mapped list and then against the
          unmapped list but you can use the mapping_priority param to check the unmapped
          list first.
        explode: false
        in: query
        name: instruments
        required: true
        schema:
          items:
            type: string
          maxItems: 25
          minItems: 1
          type: array
        style: form
      - deprecated: false
        description: "When requesting tick data you can fiter by specific groups of\
          \ interest. To do so just pass the groups of interest into the URL as a\
          \ comma separted list. If left empty it will get all data that you account\
          \ is allowed to access. The groups available are: ID,MAPPING,VALUE,LAST_UPDATE,LAST_PROCESSED,TOP_OF_BOOK,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME"
        explode: false
        in: query
        name: groups
        required: false
        schema:
          default: []
          items:
            type: string
          type: array
        style: form
      - deprecated: false
        description: "The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST\
          \ by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST"
        explode: false
        in: query
        name: mapping_priority
        required: false
        schema:
          default: CHECK_MAPPED_FIRST
          enum:
          - CHECK_MAPPED_FIRST
          - CHECK_UNMAPPED_FIRST
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SPOT_INSTRUMENT_MARKET_DATA_RESPONSE'
          description: Success response from the API.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 400 error occurs when some of the data sent is malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 401 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 403 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 404 error can either be returned when some/all of parameters\
            \ sent are not found within our system. This could be beacuse parameters\
            \ like market, instrument, news source, symbol, asset_id etc. are invalid"
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 405 error occurs the user tries to use a http method (GET,POST,PUT\
            \ etc) that is not supported."
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 429 error occurs when you go over the API Key limit. Rate\
            \ limits are eforced on a second (resets every second), minute (resers\
            \ every minute), hour (resets every hour), day (resets every day) and\
            \ month (resets every month) granularity. You can upgrade your account\
            \ and access higher rate limits."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 500 error occurs our API is up but does not know how to
            / can't handle the request.
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 502 error occurs when our API is not running. This error
            is returned by our proxy / load balancer.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 503 error occurs when there is an issue with one of our
            data sources and we can't even return a partial answer.
      tags:
      - Spot
      x-section: Spot
      x-subsection: Trade
      x-accepts: application/json
    summary: Instrument Latest Tick
  /spot/v1/markets:
    description: ""
    get:
      deprecated: false
      operationId: spot_v1_markets
      parameters:
      - deprecated: false
        description: The exchange to obtain data from
        explode: false
        in: query
        name: market
        required: false
        schema:
          default: ""
          maxLength: 30
          minLength: 0
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GENERIC_RESPONSE'
          description: Success response from the API.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 400 error occurs when some of the data sent is malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 401 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 403 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 404 error can either be returned when some/all of parameters\
            \ sent are not found within our system. This could be beacuse parameters\
            \ like market, instrument, news source, symbol, asset_id etc. are invalid"
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 405 error occurs the user tries to use a http method (GET,POST,PUT\
            \ etc) that is not supported."
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 429 error occurs when you go over the API Key limit. Rate\
            \ limits are eforced on a second (resets every second), minute (resers\
            \ every minute), hour (resets every hour), day (resets every day) and\
            \ month (resets every month) granularity. You can upgrade your account\
            \ and access higher rate limits."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 500 error occurs our API is up but does not know how to
            / can't handle the request.
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 502 error occurs when our API is not running. This error
            is returned by our proxy / load balancer.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 503 error occurs when there is an issue with one of our
            data sources and we can't even return a partial answer.
      tags:
      - Spot
      x-section: Spot
      x-subsection: General
      x-accepts: application/json
    summary: Markets
  /spot/v1/markets/instruments:
    description: ""
    get:
      deprecated: false
      operationId: spot_v1_markets_instruments
      parameters:
      - deprecated: false
        description: The exchange to obtain data from
        explode: false
        in: query
        name: market
        required: false
        schema:
          default: ""
          maxLength: 30
          minLength: 0
          type: string
        style: form
      - deprecated: false
        description: The mapped instrument to retrieve on a specific market.
        explode: false
        in: query
        name: instrument
        required: false
        schema:
          default: ""
          maxLength: 30
          minLength: 0
          type: string
        style: form
      - deprecated: false
        description: "The status of the instrument, can be one of the following: ACTIVE,\
          \ IGNORED, RETIRED, EXPIRED"
        explode: false
        in: query
        name: instrument_status
        required: false
        schema:
          default:
          - ACTIVE
          - IGNORED
          - RETIRED
          - EXPIRED
          items:
            enum:
            - ACTIVE
            - IGNORED
            - RETIRED
            - EXPIRED
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GENERIC_RESPONSE'
          description: Success response from the API.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 400 error occurs when some of the data sent is malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 401 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 403 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 404 error can either be returned when some/all of parameters\
            \ sent are not found within our system. This could be beacuse parameters\
            \ like market, instrument, news source, symbol, asset_id etc. are invalid"
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 405 error occurs the user tries to use a http method (GET,POST,PUT\
            \ etc) that is not supported."
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 429 error occurs when you go over the API Key limit. Rate\
            \ limits are eforced on a second (resets every second), minute (resers\
            \ every minute), hour (resets every hour), day (resets every day) and\
            \ month (resets every month) granularity. You can upgrade your account\
            \ and access higher rate limits."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 500 error occurs our API is up but does not know how to
            / can't handle the request.
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 502 error occurs when our API is not running. This error
            is returned by our proxy / load balancer.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 503 error occurs when there is an issue with one of our
            data sources and we can't even return a partial answer.
      tags:
      - Spot
      x-section: Spot
      x-subsection: General
      x-accepts: application/json
    summary: Markets + Instruments
  /spot/v1/markets/instruments/unmapped:
    description: ""
    get:
      deprecated: false
      operationId: spot_v1_markets_instruments_unmapped
      parameters:
      - deprecated: false
        description: The exchange to obtain data from
        explode: false
        in: query
        name: market
        required: false
        schema:
          default: ""
          maxLength: 30
          minLength: 0
          type: string
        style: form
      - deprecated: false
        description: The unmapped instrument to retrieve on a specific market.
        explode: false
        in: query
        name: instrument
        required: false
        schema:
          default: ""
          maxLength: 300
          minLength: 0
          type: string
        style: form
      - deprecated: false
        description: "The status of the instrument, can be one of the following: ACTIVE,\
          \ IGNORED, RETIRED, EXPIRED"
        explode: false
        in: query
        name: instrument_status
        required: false
        schema:
          default:
          - ACTIVE
          - IGNORED
          - RETIRED
          - EXPIRED
          items:
            enum:
            - ACTIVE
            - IGNORED
            - RETIRED
            - EXPIRED
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GENERIC_RESPONSE'
          description: Success response from the API.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 400 error occurs when some of the data sent is malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 401 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 403 error occurs when you don't use a valid API Key on
            an endpoint that requires authetication.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 404 error can either be returned when some/all of parameters\
            \ sent are not found within our system. This could be beacuse parameters\
            \ like market, instrument, news source, symbol, asset_id etc. are invalid"
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 405 error occurs the user tries to use a http method (GET,POST,PUT\
            \ etc) that is not supported."
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The 429 error occurs when you go over the API Key limit. Rate\
            \ limits are eforced on a second (resets every second), minute (resers\
            \ every minute), hour (resets every hour), day (resets every day) and\
            \ month (resets every month) granularity. You can upgrade your account\
            \ and access higher rate limits."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 500 error occurs our API is up but does not know how to
            / can't handle the request.
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 502 error occurs when our API is not running. This error
            is returned by our proxy / load balancer.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The 503 error occurs when there is an issue with one of our
            data sources and we can't even return a partial answer.
      tags:
      - Spot
      x-section: Spot
      x-subsection: General
      x-accepts: application/json
    summary: Markets + Instruments Unmapped
components:
  requestBodies: {}
  schemas:
    Error:
      properties:
        Data:
          properties: {}
          type: object
        Err:
          $ref: '#/components/schemas/Error_Err'
      type: object
    GENERIC_RESPONSE:
      example:
        Err: "{}"
        Data:
          NO_DATA: Please add a ResponseObject on the endpoint!
      properties:
        Data:
          $ref: '#/components/schemas/GENERIC_RESPONSE_Data'
        Err:
          properties: {}
          type: object
      type: object
    SPOT_INSTRUMENT_HISTO_DATA:
      example:
        QUOTE: QUOTE
        VOLUME_UNKNOWN: 9
        HIGH: 5
        MAPPED_INSTRUMENT: MAPPED_INSTRUMENT
        QUOTE_VOLUME_UNKNOWN: 6
        HIGH_TRADE_PRICE: 5
        LOW_TRADE_TIMESTAMP: 4
        LAST_TRADE_PRICE: 7
        CLOSE: 0
        BASE: BASE
        TOTAL_TRADES: 1
        TOTAL_TRADES_SELL: 5
        TIMESTAMP: 7
        TYPE: TYPE
        FIRST_TRADE_PRICE: 6
        HIGH_TRADE_TIMESTAMP: 2
        LOW_TRADE_PRICE: 2
        MARKET: MARKET
        UNIT: UNIT
        VOLUME_SELL: 8
        QUOTE_VOLUME_BUY: 1
        VOLUME: 9
        TOTAL_TRADES_UNKNOWN: 9
        QUOTE_VOLUME_SELL: 1
        LAST_TRADE_TIMESTAMP: 9
        OPEN: 7
        INSTRUMENT: INSTRUMENT
        VOLUME_BUY: 6
        LOW: 3
        FIRST_TRADE_TIMESTAMP: 1
        QUOTE_VOLUME: 1
        TOTAL_TRADES_BUY: 4
      properties:
        BASE:
          description: The mapped from asset (base / symbol/ coin) (e.g. BTC). Only
            available on instruments that have mapping.
          type: string
        CLOSE:
          description: "The price of the last trade in this time period. If there\
            \ were no trades in the time period, the open price will be given."
          type: integer
        FIRST_TRADE_PRICE:
          description: The price of the first trade in the time period. This is only
            available when there is at least one trade in the time period.
          type: integer
        FIRST_TRADE_TIMESTAMP:
          description: "The timestamp, in seconds, of the first trade in this time\
            \ perio. This is only available when there is at least one trade in the\
            \ time period."
          type: integer
        HIGH:
          description: "The highest trade price in the time period. If there were\
            \ no trades in the time period, the open price will be given."
          type: integer
        HIGH_TRADE_PRICE:
          description: The highest value of the trades in the time period. This is
            only available when there is at least one trade in the time period.
          type: integer
        HIGH_TRADE_TIMESTAMP:
          description: "The timestamp, in seconds, of the highest trade in the time\
            \ period. This is only available when there is at least one trade in the\
            \ time period."
          type: integer
        INSTRUMENT:
          description: The unmapped instrument ID
          type: string
        LAST_TRADE_PRICE:
          description: The last trade price in the time period. This is only available
            when there is at least one trade in the time period.
          type: integer
        LAST_TRADE_TIMESTAMP:
          description: "The timestamp, in seconds, of the last trade in this time\
            \ period. This is only available when there is at least one trade in the\
            \ time period."
          type: integer
        LOW:
          description: "The lowest trade price in the time period. If there were no\
            \ trades in the time period, the open price will be given."
          type: integer
        LOW_TRADE_PRICE:
          description: The lowest value of the trades in the time period. This is
            only available when there is at least one trade in the time period.
          type: integer
        LOW_TRADE_TIMESTAMP:
          description: "The timestamp, in seconds, of the lowest trade in the time\
            \ period. This is only available when there is at least one trade in the\
            \ time period."
          type: integer
        MAPPED_INSTRUMENT:
          description: "The instrument ID, as derived from our mapping rules. This\
            \ takes the form \"BASE-QUOTE\" (e.g. BTC-USD). Only available on instruments\
            \ that have been mapped."
          type: string
        MARKET:
          description: "The market / exchange under consideration (e.g. gemini, kraken,\
            \ coinbase, etc)."
          type: string
        OPEN:
          description: "The open price for the historical period, this is based on\
            \ the closest trade before the period start."
          type: integer
        QUOTE:
          description: The mapped to asset (quote / counter symbol / coin) (e.g. USD).
            Only available on instruments that have mapping.
          type: string
        QUOTE_VOLUME:
          description: "The sum of all the trade volumes in the To asset (quote/counter\
            \ symbol/coin) for the time period. If there were no trades in the time\
            \ period, 0 will be returned."
          type: integer
        QUOTE_VOLUME_BUY:
          description: The sum of all the BUY trade volumes in the to asset (quote/counter
            symbol/coin) for the time period.
          type: integer
        QUOTE_VOLUME_SELL:
          description: The sum of all the SELL trade volumes in the To asset (quote/counter
            symbol/coin) for the time period.
          type: integer
        QUOTE_VOLUME_UNKNOWN:
          description: The sum of all the UNKNOWN trade volumes in the To asset (quote/counter
            symbol/coin) for the time period.
          type: integer
        TIMESTAMP:
          description: "The timestamp in seconds of the beginning of the histo period.\
            \ For minute it would be every minute at the beginning of the minute,\
            \ for hour it would be the start of the hour and for daily it is 00:00\
            \ GMT."
          type: integer
        TOTAL_TRADES:
          description: "The total number of trades seen in this time period. If there\
            \ were no trades in the time period, 0 will be returned."
          type: integer
        TOTAL_TRADES_BUY:
          description: "The total number of BUY trades seen in this time period. If\
            \ there were no trades in the time period, 0 will be returned."
          type: integer
        TOTAL_TRADES_SELL:
          description: "The total number of SELL trades seen in this time period.\
            \ If there were no trades in the time period, 0 will be returned."
          type: integer
        TOTAL_TRADES_UNKNOWN:
          description: "The total number of UNKNOWN trades seen in this time period.\
            \ If there were no trades in the time period, 0 will be returned."
          type: integer
        TYPE:
          description: The type of the message.
          type: string
        UNIT:
          description: "The unit of the historical period update: MINUTE for minute,\
            \ HOUR for hour and DAY for day."
          type: string
        VOLUME:
          description: "The sum of all the trade volumes in the from asset (base symbol\
            \ / coin) for the time period. If there were no trades in the time period,\
            \ 0 will be returned."
          type: integer
        VOLUME_BUY:
          description: The sum of all the BUY trade volumes in the from asset (base
            symbol / coin) for the time period.
          type: integer
        VOLUME_SELL:
          description: The sum of all the SELL trade volumes in the from asset (base
            symbol / coin) for the time period.
          type: integer
        VOLUME_UNKNOWN:
          description: The sum of all the UNKNOWN trade volumes in the from asset
            (base symbol / coin) for the time period.
          type: integer
      type: object
    SPOT_INSTRUMENT_HISTO_DATA_RESPONSE:
      example:
        Err: "{}"
        Data:
        - QUOTE: QUOTE
          VOLUME_UNKNOWN: 9
          HIGH: 5
          MAPPED_INSTRUMENT: MAPPED_INSTRUMENT
          QUOTE_VOLUME_UNKNOWN: 6
          HIGH_TRADE_PRICE: 5
          LOW_TRADE_TIMESTAMP: 4
          LAST_TRADE_PRICE: 7
          CLOSE: 0
          BASE: BASE
          TOTAL_TRADES: 1
          TOTAL_TRADES_SELL: 5
          TIMESTAMP: 7
          TYPE: TYPE
          FIRST_TRADE_PRICE: 6
          HIGH_TRADE_TIMESTAMP: 2
          LOW_TRADE_PRICE: 2
          MARKET: MARKET
          UNIT: UNIT
          VOLUME_SELL: 8
          QUOTE_VOLUME_BUY: 1
          VOLUME: 9
          TOTAL_TRADES_UNKNOWN: 9
          QUOTE_VOLUME_SELL: 1
          LAST_TRADE_TIMESTAMP: 9
          OPEN: 7
          INSTRUMENT: INSTRUMENT
          VOLUME_BUY: 6
          LOW: 3
          FIRST_TRADE_TIMESTAMP: 1
          QUOTE_VOLUME: 1
          TOTAL_TRADES_BUY: 4
        - QUOTE: QUOTE
          VOLUME_UNKNOWN: 9
          HIGH: 5
          MAPPED_INSTRUMENT: MAPPED_INSTRUMENT
          QUOTE_VOLUME_UNKNOWN: 6
          HIGH_TRADE_PRICE: 5
          LOW_TRADE_TIMESTAMP: 4
          LAST_TRADE_PRICE: 7
          CLOSE: 0
          BASE: BASE
          TOTAL_TRADES: 1
          TOTAL_TRADES_SELL: 5
          TIMESTAMP: 7
          TYPE: TYPE
          FIRST_TRADE_PRICE: 6
          HIGH_TRADE_TIMESTAMP: 2
          LOW_TRADE_PRICE: 2
          MARKET: MARKET
          UNIT: UNIT
          VOLUME_SELL: 8
          QUOTE_VOLUME_BUY: 1
          VOLUME: 9
          TOTAL_TRADES_UNKNOWN: 9
          QUOTE_VOLUME_SELL: 1
          LAST_TRADE_TIMESTAMP: 9
          OPEN: 7
          INSTRUMENT: INSTRUMENT
          VOLUME_BUY: 6
          LOW: 3
          FIRST_TRADE_TIMESTAMP: 1
          QUOTE_VOLUME: 1
          TOTAL_TRADES_BUY: 4
      properties:
        Data:
          items:
            $ref: '#/components/schemas/SPOT_INSTRUMENT_HISTO_DATA'
          type: array
        Err:
          properties: {}
          type: object
      type: object
    SPOT_INSTRUMENT_MARKET_DATA:
      example:
        CURRENT_WEEK_QUOTE_VOLUME_SELL: 6
        MOVING_180_DAY_TOTAL_TRADES_UNKNOWN: 5
        MOVING_30_DAY_VOLUME_UNKNOWN: 0
        MOVING_7_DAY_OPEN: 5
        CURRENT_HOUR_QUOTE_VOLUME_SELL: 9
        LIFETIME_TOTAL_TRADES: 3
        TOP_BID_QUANTITY: 1
        CCSEQ: 0
        LIFETIME_VOLUME_UNKNOWN: 2
        CURRENT_MONTH_QUOTE_VOLUME_BUY: 3
        MOVING_7_DAY_VOLUME_BUY: 5
        LIFETIME_QUOTE_VOLUME_UNKNOWN: 2
        CURRENT_YEAR_VOLUME_BUY: 8
        MOVING_7_DAY_VOLUME_UNKNOWN: 2
        MOVING_365_DAY_VOLUME_UNKNOWN: 5
        CURRENT_YEAR_QUOTE_VOLUME_SELL: 3
        MOVING_30_DAY_QUOTE_VOLUME: 8
        CURRENT_MONTH_QUOTE_VOLUME: 3
        MOVING_24_HOUR_TOTAL_TRADES_UNKNOWN: 3
        MOVING_7_DAY_TOTAL_TRADES: 8
        LAST_TRADE_SIDE: LAST_TRADE_SIDE
        CURRENT_HOUR_OPEN: 4
        TOP_ASK_PRICE: 5
        LAST_PROCESSED_TRADE_PRICE: 3
        MOVING_24_HOUR_QUOTE_VOLUME: 9
        MOVING_180_DAY_VOLUME_UNKNOWN: 5
        MOVING_180_DAY_QUOTE_VOLUME_UNKNOWN: 9
        LAST_TRADE_QUANTITY: 5
        MOVING_180_DAY_LOW: 0
        MOVING_24_HOUR_TOTAL_TRADES_BUY: 1
        CURRENT_HOUR_TOTAL_TRADES: 8
        CURRENT_DAY_TOTAL_TRADES_UNKNOWN: 7
        CURRENT_HOUR_LOW: 1
        MOVING_365_DAY_QUOTE_VOLUME_SELL: 4
        MOVING_30_DAY_VOLUME_SELL: 0
        CURRENT_DAY_VOLUME_SELL: 1
        MOVING_90_DAY_LOW: 7
        MOVING_30_DAY_HIGH: 8
        CURRENT_YEAR_VOLUME_SELL: 9
        CURRENT_HOUR_VOLUME_UNKNOWN: 6
        CURRENT_MONTH_OPEN: 6
        LAST_PROCESSED_TRADE_SIDE: LAST_PROCESSED_TRADE_SIDE
        LAST_TRADE_CCSEQ: LAST_TRADE_CCSEQ
        LAST_TRADE_ID: LAST_TRADE_ID
        CURRENT_DAY_QUOTE_VOLUME_UNKNOWN: 9
        LIFETIME_TOTAL_TRADES_SELL: 4
        CURRENT_MONTH_VOLUME_SELL: 3
        CURRENT_WEEK_VOLUME_BUY: 9
        MOVING_24_HOUR_QUOTE_VOLUME_SELL: 7
        MOVING_30_DAY_TOTAL_TRADES_SELL: 0
        MOVING_365_DAY_QUOTE_VOLUME_UNKNOWN: 0
        CURRENT_WEEK_QUOTE_VOLUME: 4
        CURRENT_MONTH_VOLUME: 8
        TOP_BID_PRICE: 0
        CURRENT_DAY_QUOTE_VOLUME: 5
        MOVING_24_HOUR_OPEN: 3
        CURRENT_YEAR_TOTAL_TRADES_SELL: 8
        CURRENT_HOUR_VOLUME: 6
        CURRENT_YEAR_QUOTE_VOLUME_UNKNOWN: 0
        CURRENT_YEAR_TOTAL_TRADES: 2
        MOVING_7_DAY_TOTAL_TRADES_UNKNOWN: 4
        MOVING_24_HOUR_TOTAL_TRADES_SELL: 4
        CURRENT_WEEK_VOLUME_UNKNOWN: 7
        MOVING_90_DAY_VOLUME_UNKNOWN: 2
        CURRENT_WEEK_TOTAL_TRADES_UNKNOWN: 9
        MOVING_7_DAY_QUOTE_VOLUME_SELL: 7
        MOVING_30_DAY_QUOTE_VOLUME_SELL: 6
        MOVING_180_DAY_OPEN: 2
        CURRENT_MONTH_VOLUME_BUY: 7
        MOVING_90_DAY_QUOTE_VOLUME: 6
        MOVING_90_DAY_TOTAL_TRADES_SELL: 3
        MOVING_90_DAY_QUOTE_VOLUME_BUY: 9
        LIFETIME_HIGH: 7
        QUOTE: QUOTE
        LIFETIME_FIRST_TRADE_TS: 8
        LIFETIME_QUOTE_VOLUME_BUY: 0
        LIFETIME_QUOTE_VOLUME: 7
        MOVING_24_HOUR_QUOTE_VOLUME_UNKNOWN: 7
        MOVING_365_DAY_VOLUME: 4
        CURRENT_MONTH_LOW: 5
        CURRENT_MONTH_TOTAL_TRADES_BUY: 6
        BASE: BASE
        CURRENT_DAY_OPEN: 5
        MOVING_365_DAY_LOW: 9
        CURRENT_YEAR_HIGH: 5
        MOVING_7_DAY_HIGH: 3
        LIFETIME_TOTAL_TRADES_UNKNOWN: 0
        LIFETIME_LOW: 3
        MOVING_180_DAY_VOLUME_SELL: 5
        MOVING_365_DAY_TOTAL_TRADES: 7
        MOVING_365_DAY_VOLUME_BUY: 2
        MOVING_180_DAY_VOLUME: 1
        CURRENT_WEEK_HIGH: 7
        MOVING_7_DAY_VOLUME_SELL: 9
        CURRENT_HOUR_VOLUME_SELL: 2
        PRICE_LAST_UPDATE_TS: 2
        CURRENT_WEEK_OPEN: 3
        MOVING_180_DAY_QUOTE_VOLUME_SELL: 6
        LIFETIME_TOTAL_TRADES_BUY: 8
        MAPPED_INSTRUMENT: MAPPED_INSTRUMENT
        MOVING_90_DAY_VOLUME_BUY: 4
        MOVING_180_DAY_QUOTE_VOLUME_BUY: 4
        LIFETIME_HIGH_TS: 3
        LAST_PROCESSED_TRADE_QUANTITY: 9
        CURRENT_HOUR_QUOTE_VOLUME: 5
        CURRENT_DAY_LOW: 1
        MOVING_24_HOUR_VOLUME_BUY: 2
        CURRENT_DAY_VOLUME_UNKNOWN: 6
        TYPE: TYPE
        CURRENT_HOUR_QUOTE_VOLUME_BUY: 9
        MOVING_30_DAY_TOTAL_TRADES_BUY: 5
        MARKET: MARKET
        CURRENT_YEAR_TOTAL_TRADES_BUY: 1
        MOVING_365_DAY_QUOTE_VOLUME_BUY: 0
        TOP_ASK_LAST_UPDATE_TS: 6
        CURRENT_WEEK_QUOTE_VOLUME_BUY: 0
        CURRENT_YEAR_VOLUME: 4
        CURRENT_DAY_HIGH: 6
        MOVING_90_DAY_QUOTE_VOLUME_UNKNOWN: 2
        MOVING_30_DAY_VOLUME_BUY: 4
        CURRENT_WEEK_LOW: 5
        LAST_PROCESSED_TRADE_QUOTE_QUANTITY: 8
        MOVING_365_DAY_TOTAL_TRADES_BUY: 1
        MOVING_24_HOUR_VOLUME_SELL: 9
        LIFETIME_VOLUME_BUY: 7
        TOP_BID_LAST_UPDATE_TS: 5
        LIFETIME_VOLUME_SELL: 4
        MOVING_30_DAY_VOLUME: 6
        MOVING_90_DAY_QUOTE_VOLUME_SELL: 8
        MOVING_365_DAY_OPEN: 7
        CURRENT_HOUR_VOLUME_BUY: 1
        MOVING_90_DAY_TOTAL_TRADES_BUY: 1
        LAST_PROCESSED_TRADE_TS: 0
        MOVING_24_HOUR_TOTAL_TRADES: 9
        CURRENT_YEAR_LOW: 4
        MOVING_180_DAY_TOTAL_TRADES: 1
        CURRENT_WEEK_VOLUME_SELL: 0
        LIFETIME_VOLUME: 0
        MOVING_30_DAY_TOTAL_TRADES: 2
        MOVING_7_DAY_TOTAL_TRADES_SELL: 2
        CURRENT_HOUR_TOTAL_TRADES_UNKNOWN: 3
        CURRENT_MONTH_TOTAL_TRADES_UNKNOWN: 4
        LIFETIME_LOW_TS: 9
        MOVING_7_DAY_VOLUME: 3
        CURRENT_YEAR_QUOTE_VOLUME_BUY: 4
        CURRENT_WEEK_TOTAL_TRADES_SELL: 7
        MOVING_365_DAY_TOTAL_TRADES_UNKNOWN: 2
        MOVING_7_DAY_QUOTE_VOLUME_BUY: 8
        MOVING_7_DAY_QUOTE_VOLUME: 3
        CURRENT_YEAR_QUOTE_VOLUME: 8
        CURRENT_YEAR_VOLUME_UNKNOWN: 1
        MOVING_90_DAY_HIGH: 7
        MOVING_24_HOUR_HIGH: 3
        MOVING_90_DAY_VOLUME_SELL: 2
        MOVING_24_HOUR_QUOTE_VOLUME_BUY: 7
        CURRENT_DAY_QUOTE_VOLUME_BUY: 2
        CURRENT_WEEK_QUOTE_VOLUME_UNKNOWN: 4
        MOVING_24_HOUR_LOW: 1
        MOVING_30_DAY_TOTAL_TRADES_UNKNOWN: 7
        MOVING_7_DAY_QUOTE_VOLUME_UNKNOWN: 2
        CURRENT_MONTH_TOTAL_TRADES_SELL: 0
        CURRENT_WEEK_TOTAL_TRADES_BUY: 4
        MOVING_7_DAY_LOW: 1
        CURRENT_YEAR_OPEN: 6
        CURRENT_HOUR_QUOTE_VOLUME_UNKNOWN: 6
        MOVING_180_DAY_TOTAL_TRADES_SELL: 3
        LAST_TRADE_QUOTE_QUANTITY: 5
        CURRENT_HOUR_TOTAL_TRADES_SELL: 6
        LAST_PROCESSED_TRADE_CCSEQ: LAST_PROCESSED_TRADE_CCSEQ
        MOVING_24_HOUR_VOLUME: 8
        PRICE: 8
        CURRENT_MONTH_VOLUME_UNKNOWN: 3
        MOVING_365_DAY_VOLUME_SELL: 3
        CURRENT_DAY_VOLUME: 1
        MOVING_180_DAY_VOLUME_BUY: 4
        MOVING_90_DAY_OPEN: 6
        MOVING_30_DAY_QUOTE_VOLUME_UNKNOWN: 0
        MOVING_30_DAY_OPEN: 4
        MOVING_180_DAY_QUOTE_VOLUME: 6
        MOVING_365_DAY_QUOTE_VOLUME: 6
        CURRENT_DAY_QUOTE_VOLUME_SELL: 7
        CURRENT_MONTH_TOTAL_TRADES: 7
        PRICE_FLAG: PRICE_FLAG
        MOVING_90_DAY_VOLUME: 1
        CURRENT_WEEK_VOLUME: 0
        CURRENT_MONTH_HIGH: 6
        TOP_ASK_QUANTITY: 8
        CURRENT_YEAR_TOTAL_TRADES_UNKNOWN: 6
        MOVING_180_DAY_TOTAL_TRADES_BUY: 1
        CURRENT_DAY_TOTAL_TRADES_BUY: 2
        LIFETIME_QUOTE_VOLUME_SELL: 3
        CURRENT_DAY_VOLUME_BUY: 1
        CURRENT_WEEK_TOTAL_TRADES: 1
        MOVING_24_HOUR_VOLUME_UNKNOWN: 4
        CURRENT_MONTH_QUOTE_VOLUME_UNKNOWN: 0
        CURRENT_HOUR_HIGH: 7
        MOVING_30_DAY_QUOTE_VOLUME_BUY: 2
        MOVING_90_DAY_TOTAL_TRADES: 6
        CURRENT_HOUR_TOTAL_TRADES_BUY: 9
        MOVING_365_DAY_HIGH: 9
        MOVING_90_DAY_TOTAL_TRADES_UNKNOWN: 9
        MOVING_30_DAY_LOW: 6
        CURRENT_DAY_TOTAL_TRADES_SELL: 4
        LIFETIME_OPEN: 5
        INSTRUMENT: INSTRUMENT
        MOVING_180_DAY_HIGH: 9
        MOVING_7_DAY_TOTAL_TRADES_BUY: 0
        CURRENT_MONTH_QUOTE_VOLUME_SELL: 7
        CURRENT_DAY_TOTAL_TRADES: 3
        MOVING_365_DAY_TOTAL_TRADES_SELL: 6
      properties:
        BASE:
          description: "The mapped from asset (base / symbol/ coin), e.g. BTC. Only\
            \ available on instruments that have been mapped."
          type: string
        CCSEQ:
          description: Our internal sequence number for this tick update. This is
            unique per market / exchange and trading pair / instrument. It will always
            be increasing by 1 for each new tick update we send.
          type: integer
        CURRENT_DAY_HIGH:
          description: "The highest trade price of the current day (00:00:00 GMT/UTC).\
            \ If there were no updates in the time period, the open price will be\
            \ given. Given in the quote asset."
          type: integer
        CURRENT_DAY_LOW:
          description: "The lowest trade price of the current day (00:00:00 GMT/UTC).\
            \ If there were no updates in the time period, the open price will be\
            \ given. Given in the quote asset."
          type: integer
        CURRENT_DAY_OPEN:
          description: "The open price for the current day, this is based on the closest\
            \ trade occurring before the start of the current day (00:00:00 GMT/UTC).\
            \ Given in the quote asset."
          type: integer
        CURRENT_DAY_QUOTE_VOLUME:
          description: The sum of all trade quote quantities from the start of the
            current day (00:00:00 GMT/UTC) until now. Given in the quote asset.
          type: integer
        CURRENT_DAY_QUOTE_VOLUME_BUY:
          description: The sum of all buy trade quote quantities from the start of
            the current day (00:00:00 GMT/UTC) until now. Given in the quote asset.
          type: integer
        CURRENT_DAY_QUOTE_VOLUME_SELL:
          description: The sum of all sell trade quote quantities from the start of
            the current day (00:00:00 GMT/UTC) until now. Given in the quote asset.
          type: integer
        CURRENT_DAY_QUOTE_VOLUME_UNKNOWN:
          description: The sum of all unknown trade quote quantities from the start
            of the current day (00:00:00 GMT/UTC) until now. Given in the quote asset.
          type: integer
        CURRENT_DAY_TOTAL_TRADES:
          description: The total number of trades that have occurred since the start
            of the current day (00:00:00 GMT/UTC).
          type: integer
        CURRENT_DAY_TOTAL_TRADES_BUY:
          description: The total number of buy trades since the start of the current
            day (00:00:00 GMT/UTC).
          type: integer
        CURRENT_DAY_TOTAL_TRADES_SELL:
          description: The total number of sell trades since the start of the current
            day (00:00:00 GMT/UTC).
          type: integer
        CURRENT_DAY_TOTAL_TRADES_UNKNOWN:
          description: The total number of unknown trades since the start of the current
            day (00:00:00 GMT/UTC).
          type: integer
        CURRENT_DAY_VOLUME:
          description: The sum of all trade quantities from the start of the current
            day (00:00:00 GMT/UTC) until now. Given in the base asset.
          type: integer
        CURRENT_DAY_VOLUME_BUY:
          description: The sum of all buy trade quantities from the start of the current
            day (00:00:00 GMT/UTC) until now. Given in the base asset.
          type: integer
        CURRENT_DAY_VOLUME_SELL:
          description: The sum of all sell trade quantities from the start of the
            current day (00:00:00 GMT/UTC) until now. Given in the base asset.
          type: integer
        CURRENT_DAY_VOLUME_UNKNOWN:
          description: The sum of all unknown trade quantities from the start of the
            current day (00:00:00 GMT/UTC) until now. Given in the base asset.
          type: integer
        CURRENT_HOUR_HIGH:
          description: "The highest trade price of the current hour. If there were\
            \ no updates in the time period, the open price will be given. Given in\
            \ the quote asset."
          type: integer
        CURRENT_HOUR_LOW:
          description: "The lowest trade price of the current hour. If there were\
            \ no updates in the time period, the open price will be given. Given in\
            \ the quote asset."
          type: integer
        CURRENT_HOUR_OPEN:
          description: "The open price for the current hour, this is based on the\
            \ closest trade occurring before the start of the current hour. Given\
            \ in the quote asset."
          type: integer
        CURRENT_HOUR_QUOTE_VOLUME:
          description: The sum of all trade quote quantities from the start of the
            current hour until now. Given in the quote asset.
          type: integer
        CURRENT_HOUR_QUOTE_VOLUME_BUY:
          description: The sum of all buy trade quote quantities from the start of
            the current hour until now. Given in the quote asset.
          type: integer
        CURRENT_HOUR_QUOTE_VOLUME_SELL:
          description: The sum of all sell trade quote quantities from the start of
            the current hour until now. Given in the quote asset.
          type: integer
        CURRENT_HOUR_QUOTE_VOLUME_UNKNOWN:
          description: The sum of all unknown trade quote quantities from the start
            of the current hour until now. Given in the quote asset.
          type: integer
        CURRENT_HOUR_TOTAL_TRADES:
          description: The total number of trades that have occurred since the start
            of the current hour.
          type: integer
        CURRENT_HOUR_TOTAL_TRADES_BUY:
          description: The total number of buy trades since the start of the current
            hour.
          type: integer
        CURRENT_HOUR_TOTAL_TRADES_SELL:
          description: The total number of sell trades since the start of the current
            hour.
          type: integer
        CURRENT_HOUR_TOTAL_TRADES_UNKNOWN:
          description: The total number of unknown trades since the start of the current
            hour.
          type: integer
        CURRENT_HOUR_VOLUME:
          description: The sum of all trade quantities from the start of the current
            hour until now. Given in the base asset.
          type: integer
        CURRENT_HOUR_VOLUME_BUY:
          description: The sum of all buy trade quantities from the start of the current
            hour until now. Given in the base asset.
          type: integer
        CURRENT_HOUR_VOLUME_SELL:
          description: The sum of all sell trade quantities from the start of the
            current hour until now. Given in the base asset.
          type: integer
        CURRENT_HOUR_VOLUME_UNKNOWN:
          description: The sum of all trade quote quantities from the start of the
            current hour until now. Given in the base asset.
          type: integer
        CURRENT_MONTH_HIGH:
          description: "The highest traded price of the month excluding the current\
            \ day. The period will run from the 1st of the month - 00:00:00 GMT/UTC\
            \ to the beginning - 00:00:00 GMT/UTC of the current day of the month.\
            \ If today is the 1st of the month, this value will be CURRENT_MONTH_OPEN.\
            \ Given in the quote asset."
          type: integer
        CURRENT_MONTH_LOW:
          description: "The lowest traded price of the month excluding the current\
            \ day. The period will run from the 1st of the month - 00:00:00 GMT/UTC\
            \ to the beginning - 00:00:00 GMT/UTC of the current day of the month.\
            \ If today is the 1st of the month, this value will be CURRENT_MONTH_OPEN.\
            \ Given in the quote asset."
          type: integer
        CURRENT_MONTH_OPEN:
          description: "The price of the closest trade to the 1st day (00:00:00 GMT/UTC)\
            \ of this month. In a highly liquid market, this would be the last trade\
            \ that happened on the previous month at (23:59:59 999 GMT/UTC). This\
            \ will always be supplied and there is no need to do any calculation to\
            \ get the full monthly value. Given in the quote asset."
          type: integer
        CURRENT_MONTH_QUOTE_VOLUME:
          description: "The sum of all trade quote quantities from the 1st of the\
            \ month (xxxx:xx:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC)\
            \ of the current day of the month. If today is the first of the month,\
            \ this value will be 0. Given in the quote asset."
          type: integer
        CURRENT_MONTH_QUOTE_VOLUME_BUY:
          description: "The sum of all buy trade quote quantities from the 1st of\
            \ the month (xxxx:xx:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC)\
            \ of the current day of the month. If today is the first of the month,\
            \ this value will be 0. Given in the quote asset."
          type: integer
        CURRENT_MONTH_QUOTE_VOLUME_SELL:
          description: "The sum of all sell trade quote quantities from the 1st of\
            \ the month (xxxx:xx:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC)\
            \ of the current day of the month. If today is the first of the month,\
            \ this value will be 0. Given in the quote asset."
          type: integer
        CURRENT_MONTH_QUOTE_VOLUME_UNKNOWN:
          description: "The sum of all unknown trade quote quantities from the 1st\
            \ of the month (xxxx:xx:01 00:00:00 GMT/UTC) to the beginning (00:00:00\
            \ GMT/UTC) of the current day of the month. If today is the first of the\
            \ month, this value will be 0. Given in the quote asset."
          type: integer
        CURRENT_MONTH_TOTAL_TRADES:
          description: "The total number of trades between the 1st of the month (xxxx:xx:01\
            \ 00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current\
            \ day of the month. If today is the 1st of the month, this value will\
            \ be 0."
          type: integer
        CURRENT_MONTH_TOTAL_TRADES_BUY:
          description: "The total number of buy trades between the 1st of the month\
            \ (xxxx:xx:01 00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of\
            \ the current day of the month. If today is the 1st of the month, this\
            \ value will be 0."
          type: integer
        CURRENT_MONTH_TOTAL_TRADES_SELL:
          description: "The total number of sell trades between the 1st of the month\
            \ (xxxx:xx:01 00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of\
            \ the current day of the month. If today is the 1st of the month, this\
            \ value will be 0."
          type: integer
        CURRENT_MONTH_TOTAL_TRADES_UNKNOWN:
          description: "The total number of unknown trades between the 1st of the\
            \ month (xxxx:xx:01 00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC)\
            \ of the current day of the month. If today is the 1st of the month, this\
            \ value will be 0."
          type: integer
        CURRENT_MONTH_VOLUME:
          description: "The sum of all trade quantities from the 1st of the month\
            \ (xxxx:xx:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of\
            \ the current day of the month. If today is the first of the month, this\
            \ value will be 0. Given in the base asset."
          type: integer
        CURRENT_MONTH_VOLUME_BUY:
          description: "The sum of all buy trade quantities from the 1st of the month\
            \ (xxxx:xx:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of\
            \ the current day of the month. If today is the first of the month, this\
            \ value will be 0. Given in the base asset."
          type: integer
        CURRENT_MONTH_VOLUME_SELL:
          description: "The sum of all sell trade quantities from the 1st of the month\
            \ (xxxx:xx:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of\
            \ the current day of the month. If today is the first of the month, this\
            \ value will be 0. Given in the base asset."
          type: integer
        CURRENT_MONTH_VOLUME_UNKNOWN:
          description: "The sum of all unknown trade quantities from the 1st of the\
            \ month (xxxx:xx:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC)\
            \ of the current day of the month. If today is the first of the month,\
            \ this value will be 0. Given in the base asset."
          type: integer
        CURRENT_WEEK_HIGH:
          description: "The highest traded price of the week excluding the current\
            \ day. The period will run from Monday - 00:00:00 GMT/UTC to the beginning\
            \ - 00:00:00 GMT/UTC of the current day of the week. If today is Monday,\
            \ this value will be the same as CURRENT_WEEK_OPEN. Given in the quote\
            \ asset."
          type: integer
        CURRENT_WEEK_LOW:
          description: "The lowest traded price of the week excluding the current\
            \ day. The period will run from Monday - 00:00:00 GMT/UTC to the beginning\
            \ - 00:00:00 GMT/UTC of the current day of the week. If today is Monday,\
            \ this value will be CURRENT_WEEK_LOW. Given in the quote asset."
          type: integer
        CURRENT_WEEK_OPEN:
          description: "The price of the closest trade to Monday (00:00:00 GMT/UTC)\
            \ of this week. In a highly liquid market, this would be the last trade\
            \ that happened on the previous Sunday at (23:59:59 999 GMT/UTC). This\
            \ will always be supplied and there is no need to do any calculation to\
            \ get the full weekly value. Given in the quote asset."
          type: integer
        CURRENT_WEEK_QUOTE_VOLUME:
          description: "The sum of all trade quote quantities from Monday (00:00:00\
            \ GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the\
            \ week. If today is Monday, this value will be 0. Given in the quote asset."
          type: integer
        CURRENT_WEEK_QUOTE_VOLUME_BUY:
          description: "The sum of all buy trade quote quantities from Monday (00:00:00\
            \ GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the\
            \ week. If today is Monday, this value will be 0. Given in the quote asset."
          type: integer
        CURRENT_WEEK_QUOTE_VOLUME_SELL:
          description: "The sum of all sell trade quote quantities from Monday (00:00:00\
            \ GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the\
            \ week. If today is Monday, this value will be 0. Given in the quote asset."
          type: integer
        CURRENT_WEEK_QUOTE_VOLUME_UNKNOWN:
          description: "The sum of all unknown trade quote quantities from Monday\
            \ (00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current\
            \ day of the week. If today is Monday, this value will be 0. Given in\
            \ the quote asset."
          type: integer
        CURRENT_WEEK_TOTAL_TRADES:
          description: "The total number of trades between Monday (00:00:00 GMT/UTC)\
            \ and the beginning (00:00:00 GMT/UTC) of the current day of the week.\
            \ If today is Monday, this value will be 0."
          type: integer
        CURRENT_WEEK_TOTAL_TRADES_BUY:
          description: "The total number of buy trades between Monday (00:00:00 GMT/UTC)\
            \ and the beginning (00:00:00 GMT/UTC) of the current day of the week.\
            \ If today is Monday, this value will be 0."
          type: integer
        CURRENT_WEEK_TOTAL_TRADES_SELL:
          description: "The total number of sell trades between Monday (00:00:00 GMT/UTC)\
            \ and the beginning (00:00:00 GMT/UTC) of the current day of the week.\
            \ If today is Monday, this value will be 0."
          type: integer
        CURRENT_WEEK_TOTAL_TRADES_UNKNOWN:
          description: "The total number of unknown trades between Monday (00:00:00\
            \ GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of\
            \ the week. If today is Monday, this value will be 0."
          type: integer
        CURRENT_WEEK_VOLUME:
          description: "The sum of all trade quantities from Monday (00:00:00 GMT/UTC)\
            \ to the beginning (00:00:00 GMT/UTC) of the current day of the week.\
            \ If today is Monday, this value will be 0. Given in the base asset."
          type: integer
        CURRENT_WEEK_VOLUME_BUY:
          description: "The sum of all buy trade quantities from Monday (00:00:00\
            \ GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the\
            \ week. If today is Monday, this value will be 0. Given in the base asset."
          type: integer
        CURRENT_WEEK_VOLUME_SELL:
          description: "The sum of all sell trade quantities from Monday (00:00:00\
            \ GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the\
            \ week. If today is Monday, this value will be 0. Given in the base asset."
          type: integer
        CURRENT_WEEK_VOLUME_UNKNOWN:
          description: "The sum of all unknown trade quantities from Monday (00:00:00\
            \ GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the\
            \ week. If today is Monday, this value will be 0. Given in the base asset."
          type: integer
        CURRENT_YEAR_HIGH:
          description: "The highest traded price of the year excluding the current\
            \ day. The period runs from the 1st of January - 00:00:00 GMT/UTC to the\
            \ beginning - 00:00:00 GMT/UTC of the current day of the year. If today\
            \ is the 1st of January, this value will be CURRENT_YEAR_OPEN. Given in\
            \ the quote asset."
          type: integer
        CURRENT_YEAR_LOW:
          description: "The lowest traded price of the year excluding the current\
            \ day. The period runs from the 1st of January - 00:00:00 GMT/UTC to the\
            \ beginning - 00:00:00 GMT/UTC of the current day of the year. If today\
            \ is the 1st of January, this value will be CURRENT_YEAR_OPEN. Given in\
            \ the quote asset."
          type: integer
        CURRENT_YEAR_OPEN:
          description: "The price of the closest trade to the 1st of January (00:00:00\
            \ GMT/UTC) of this year. In a highly liquid market, this would be the\
            \ last trade that happened on on the 31st of December of the previous\
            \ year (23:59:59 999 GMT/UTC). This will always be supplied and there\
            \ is no need to do any calculation to get the full yearly value. Given\
            \ in the quote asset."
          type: integer
        CURRENT_YEAR_QUOTE_VOLUME:
          description: "The sum of all trade quote quantities from the 1st of January\
            \ (xxxx:01:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of\
            \ the current day of the year. If today is the 1st of January, this value\
            \ will be 0. Given in the quote asset."
          type: integer
        CURRENT_YEAR_QUOTE_VOLUME_BUY:
          description: "The sum of all buy trade quote quantities from the 1st of\
            \ January (xxxx:01:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC)\
            \ of the current day of the year. If today is the 1st of January, this\
            \ value will be 0. Given in the quote asset."
          type: integer
        CURRENT_YEAR_QUOTE_VOLUME_SELL:
          description: "The sum of all sell trade quote quantities from the 1st of\
            \ January (xxxx:01:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC)\
            \ of the current day of the year. If today is the 1st of January, this\
            \ value will be 0. Given in the quote asset."
          type: integer
        CURRENT_YEAR_QUOTE_VOLUME_UNKNOWN:
          description: "The sum of all unknown trade quote quantities from the 1st\
            \ of January (xxxx:01:01 00:00:00 GMT/UTC) to the beginning (00:00:00\
            \ GMT/UTC) of the current day of the year. If today is the 1st of January,\
            \ this value will be 0. Given in the quote asset."
          type: integer
        CURRENT_YEAR_TOTAL_TRADES:
          description: "The total number of trades between the 1st of January (xxxx:01:01\
            \ 00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current\
            \ day of the year. If today is the 1st of January, this value will be\
            \ 0."
          type: integer
        CURRENT_YEAR_TOTAL_TRADES_BUY:
          description: "The total number of buy trades between the 1st of January\
            \ (xxxx:01:01 00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of\
            \ the current day of the year. If today is the 1st of January, this value\
            \ will be 0."
          type: integer
        CURRENT_YEAR_TOTAL_TRADES_SELL:
          description: "The total number of sell trades between the 1st of January\
            \ (xxxx:01:01 00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of\
            \ the current day of the year. If today is the 1st of January, this value\
            \ will be 0."
          type: integer
        CURRENT_YEAR_TOTAL_TRADES_UNKNOWN:
          description: "The total number of unknown trades between the 1st of January\
            \ (xxxx:01:01 00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of\
            \ the current day of the year. If today is the 1st of January, this value\
            \ will be 0."
          type: integer
        CURRENT_YEAR_VOLUME:
          description: "The sum of all trade quantities from the 1st of January (xxxx:01:01\
            \ 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current\
            \ day of the year. If today is the 1st of January, this value will be\
            \ 0. Given in the base asset."
          type: integer
        CURRENT_YEAR_VOLUME_BUY:
          description: "The sum of all buy trade quantities from the 1st of January\
            \ (xxxx:01:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of\
            \ the current day of the year. If today is the 1st of January, this value\
            \ will be 0. Given in the base asset."
          type: integer
        CURRENT_YEAR_VOLUME_SELL:
          description: "The sum of all sell trade quantities from the 1st of January\
            \ (xxxx:01:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of\
            \ the current day of the year. If today is the 1st of January, this value\
            \ will be 0. Given in the base asset."
          type: integer
        CURRENT_YEAR_VOLUME_UNKNOWN:
          description: "The sum of all unknown trade quantities from the 1st of January\
            \ (xxxx:01:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of\
            \ the current day of the year. If today is the 1st of January, this value\
            \ will be 0. Given in the base asset."
          type: integer
        INSTRUMENT:
          description: The unmapped instrument ID
          type: string
        LAST_PROCESSED_TRADE_CCSEQ:
          description: The CCSEQ of the latest trade.
          type: string
        LAST_PROCESSED_TRADE_PRICE:
          description: "The price in the quote asset of the last trade processed,\
            \ as reported by the market / exchange."
          type: integer
        LAST_PROCESSED_TRADE_QUANTITY:
          description: The quantity of the last processed trade in the from symbol
            (base / coin).
          type: integer
        LAST_PROCESSED_TRADE_QUOTE_QUANTITY:
          description: The  volume of the last processed trade in the to asset / quote.
          type: integer
        LAST_PROCESSED_TRADE_SIDE:
          description: The side of the last processed trade.
          type: string
        LAST_PROCESSED_TRADE_TS:
          description: "The timestamp in seconds that the last trade was processed,\
            \ as reported by the market / exchange. If the market / exchange does\
            \ not provide this information, the timestamp that the trade was received\
            \ will be returned."
          type: integer
        LAST_TRADE_CCSEQ:
          description: The CCSEQ of the latest trade.
          type: string
        LAST_TRADE_ID:
          description: The ID of the latest trade.
          type: string
        LAST_TRADE_QUANTITY:
          description: The quantity of the latest trade in the from symbol (base /
            coin).
          type: integer
        LAST_TRADE_QUOTE_QUANTITY:
          description: The volume of the latest trade in the to asset / quote.
          type: integer
        LAST_TRADE_SIDE:
          description: The side of the latest trade.
          type: string
        LIFETIME_FIRST_TRADE_TS:
          description: The timestamp of the first trade ever recorded for the instrument
          type: integer
        LIFETIME_HIGH:
          description: The price of the highest trade ever executed for this instrument.
            Given in the quote asset.
          type: integer
        LIFETIME_HIGH_TS:
          description: The the timestamp of the highest trade ever executed for this
            instrument. Given in the quote asset.
          type: integer
        LIFETIME_LOW:
          description: The price of the lowest trade ever executed for this instrument.
            Given in the quote asset.
          type: integer
        LIFETIME_LOW_TS:
          description: The timestamp of the lowest trade ever executed for this instrument.
            Given in the quote asset.
          type: integer
        LIFETIME_OPEN:
          description: The price of the first trade of the instrument. Given in the
            quote asset.
          type: integer
        LIFETIME_QUOTE_VOLUME:
          description: The sum of all trade quote quantities of all the trades of
            this instrument. Given in the quote asset.
          type: integer
        LIFETIME_QUOTE_VOLUME_BUY:
          description: The sum of all buy trade quote quantities of all the trades
            of this instrument. Given in the quote asset.
          type: integer
        LIFETIME_QUOTE_VOLUME_SELL:
          description: The sum of all sell trade quote quantities of all the trades
            of this instrument. Given in the quote asset.
          type: integer
        LIFETIME_QUOTE_VOLUME_UNKNOWN:
          description: The sum of all unknown trade quote quantities of all the trades
            of this instrument. Given in the quote asset.
          type: integer
        LIFETIME_TOTAL_TRADES:
          description: The total number of all trades that have ever been executed
            for this instrument.
          type: integer
        LIFETIME_TOTAL_TRADES_BUY:
          description: The total number of all buy trades that have ever been executed
            for this instrument.
          type: integer
        LIFETIME_TOTAL_TRADES_SELL:
          description: The total number of all sell trades that have ever been executed
            for this instrument.
          type: integer
        LIFETIME_TOTAL_TRADES_UNKNOWN:
          description: The total number of all unknown trades that have ever been
            executed for this instrument.
          type: integer
        LIFETIME_VOLUME:
          description: The sum of all trade quantities of all the trades of this instrument.
            Given in the base asset.
          type: integer
        LIFETIME_VOLUME_BUY:
          description: The sum of all buy trade quantities of all the trades of this
            instrument. Given in the base asset.
          type: integer
        LIFETIME_VOLUME_SELL:
          description: The sum of all sell trade quantities of all the trades of this
            instrument. Given in the base asset.
          type: integer
        LIFETIME_VOLUME_UNKNOWN:
          description: The sum of all unknown trade quantities of all the trades of
            this instrument. Given in the base asset.
          type: integer
        MAPPED_INSTRUMENT:
          description: "The mapped instrument ID, derived from our mapping rules.\
            \ This takes the form: \"BASE-QUOTE\" (e.g. BTC-USD). Only available on\
            \ instruments that have been mapped."
          type: string
        MARKET:
          description: "The market / exchange under consideration (e.g. coinbase,\
            \ kraken, etc)."
          type: string
        MOVING_180_DAY_HIGH:
          description: "The  highest traded price of the period. Here, the period\
            \ runs from 180 days ago up to the beginning of the current day (179 days\
            \ in total). Given in the quote asset."
          type: integer
        MOVING_180_DAY_LOW:
          description: "The lowest traded price of the period. Here, the period runs\
            \ from 180 days ago up to the beginning of the current day (179 days in\
            \ total). Given in the quote asset."
          type: integer
        MOVING_180_DAY_OPEN:
          description: The price of the closest trade to the period start date (179
            days + current day - 00:00:00 GMT/UTC to now). This will always be supplied
            and there is no need to do any calculation to get the full 180 day value.
            Given in the quote asset.
          type: integer
        MOVING_180_DAY_QUOTE_VOLUME:
          description: The sum of all trade quote quantities from 180 days ago up
            to the beginning of the current day (179 days in total). Given in the
            quote asset.
          type: integer
        MOVING_180_DAY_QUOTE_VOLUME_BUY:
          description: The sum of all buy trade quote quantities from 180 days ago
            up to the beginning of the current day (179 days in total). Given in the
            quote asset.
          type: integer
        MOVING_180_DAY_QUOTE_VOLUME_SELL:
          description: The sum of all sell trade quote quantities from 180 days ago
            up to the beginning of the current day (179 days in total). Given in the
            quote asset.
          type: integer
        MOVING_180_DAY_QUOTE_VOLUME_UNKNOWN:
          description: The sum of all unknown trade quote quantities from 180 days
            ago up to the beginning of the current day (179 days in total). Given
            in the quote asset.
          type: integer
        MOVING_180_DAY_TOTAL_TRADES:
          description: The total number of trades that have occurred in the period
            from 180 days ago to the beginning (00:00:00 GMT/UTC) of the current day
            (179 days in total).
          type: integer
        MOVING_180_DAY_TOTAL_TRADES_BUY:
          description: The total number of buy trades that have occurred in the period
            from 180 days ago to the beginning (00:00:00 GMT/UTC) of the current day
            (179 days in total).
          type: integer
        MOVING_180_DAY_TOTAL_TRADES_SELL:
          description: The total number of sell trades that have occurred in the period
            from 180 days ago to the beginning (00:00:00 GMT/UTC) of the current day
            (179 days in total).
          type: integer
        MOVING_180_DAY_TOTAL_TRADES_UNKNOWN:
          description: The total number of unknown trades that have occurred in the
            period from 180 days ago to the beginning (00:00:00 GMT/UTC) of the current
            day (179 days in total).
          type: integer
        MOVING_180_DAY_VOLUME:
          description: The sum of all trade quantities from 180 days ago up to the
            beginning of the current day (179 days in total). Given in the base asset.
          type: integer
        MOVING_180_DAY_VOLUME_BUY:
          description: The sum of all trade quantities from 180 days ago up to the
            beginning of the current day (179 days in total). Given in the base asset.
          type: integer
        MOVING_180_DAY_VOLUME_SELL:
          description: The sum of all sell trade quantities from 180 days ago up to
            the beginning of the current day (179 days in total). Given in the base
            asset.
          type: integer
        MOVING_180_DAY_VOLUME_UNKNOWN:
          description: The sum of all unknown trade quantities from 180 days ago up
            to the beginning of the current day (179 days in total). Given in the
            base asset.
          type: integer
        MOVING_24_HOUR_HIGH:
          description: "The highest traded price of the period. Here, the period runs\
            \ from 24 hours ago up to the beginning of the current hour (23 hours\
            \ in total). Given in the quote asset."
          type: integer
        MOVING_24_HOUR_LOW:
          description: "The lowest traded price of the period. Here, the period runs\
            \ from 24 hours ago up to the beginning of the current hour (23 hours\
            \ in total). Given in the quote asset."
          type: integer
        MOVING_24_HOUR_OPEN:
          description: The price of the closest trade to the period start date (23
            hours + current hour ago). This will always be supplied and there is no
            need to do any calculation to get the full 24 hour value. Given in the
            quote asset.
          type: integer
        MOVING_24_HOUR_QUOTE_VOLUME:
          description: The sum of all trade quote quantities from 24 hours ago up
            to the beginning of the current hour (23 hours in total). Given in the
            quote asset.
          type: integer
        MOVING_24_HOUR_QUOTE_VOLUME_BUY:
          description: The sum of all buy trade quote quantities from 24 hours ago
            up to the beginning of the current hour (23 hours in total). Given in
            the quote asset.
          type: integer
        MOVING_24_HOUR_QUOTE_VOLUME_SELL:
          description: The sum of all sell trade quote quantities from 24 hours ago
            up to the beginning of the current hour (23 hours in total). Given in
            the quote asset.
          type: integer
        MOVING_24_HOUR_QUOTE_VOLUME_UNKNOWN:
          description: The sum of all unknown trade quote quantities from 24 hours
            ago up to the beginning of the current hour (23 hours in total). Given
            in the quote asset.
          type: integer
        MOVING_24_HOUR_TOTAL_TRADES:
          description: The total number of trades that have occurred in the period
            running from 24 hours ago to the beginning (xx:00:00) of the current hour
            (23 hours in total).
          type: integer
        MOVING_24_HOUR_TOTAL_TRADES_BUY:
          description: The total number of buy trades that have occurred in the period
            running from 24 hours ago to the beginning (xx:00:00) of the current hour
            (23 hours in total).
          type: integer
        MOVING_24_HOUR_TOTAL_TRADES_SELL:
          description: The total number of sell trades that have occurred in the period
            running from 24 hours ago to the beginning (xx:00:00) of the current hour
            (23 hours in total).
          type: integer
        MOVING_24_HOUR_TOTAL_TRADES_UNKNOWN:
          description: The total number of unknown trades that have occurred in the
            period running from 24 hours ago to the beginning (xx:00:00) of the current
            hour (23 hours in total).
          type: integer
        MOVING_24_HOUR_VOLUME:
          description: The sum of all trade quantities from 24 hours ago up to the
            beginning of the current hour (23 hours in total). Given in the base asset.
          type: integer
        MOVING_24_HOUR_VOLUME_BUY:
          description: The sum of all buy trade quantities from 24 hours ago up to
            the beginning of the current hour (23 hours in total). Given in the base
            asset.
          type: integer
        MOVING_24_HOUR_VOLUME_SELL:
          description: The sum of all sell trade quantities from 24 hours ago up to
            the beginning of the current hour (23 hours in total). Given in the base
            asset.
          type: integer
        MOVING_24_HOUR_VOLUME_UNKNOWN:
          description: The sum of all unknown trade quantities from 24 hours ago up
            to the beginning of the current hour (23 hours in total). Given in the
            base asset.
          type: integer
        MOVING_30_DAY_HIGH:
          description: "The highest traded price of the period. Here, the period runs\
            \ from 30 days ago up to the beginning of the current day (29 days in\
            \ total). Given in the quote asset."
          type: integer
        MOVING_30_DAY_LOW:
          description: "The lowest traded price of the period. Here, the period runs\
            \ from 30 days ago up to the beginning of the current day (29 days in\
            \ total). Given in the quote asset."
          type: integer
        MOVING_30_DAY_OPEN:
          description: The price of the closest trade to the period start date (29
            days + current day - 00:00:00 GMT/UTC to now).  This will always be supplied
            and there is no need to do any calculation to get the full 30 day value.
            Given in the quote asset.
          type: integer
        MOVING_30_DAY_QUOTE_VOLUME:
          description: The sum of all trade quote quantities from 30 days ago up to
            the beginning of the current day (29 days in total). Given in the quote
            asset.
          type: integer
        MOVING_30_DAY_QUOTE_VOLUME_BUY:
          description: The sum of all buy trade quote quantities from 30 days ago
            up to the beginning of the current day (29 days in total). Given in the
            quote asset.
          type: integer
        MOVING_30_DAY_QUOTE_VOLUME_SELL:
          description: The sum of all sell trade quote quantities from 30 days ago
            up to the beginning of the current day (29 days in total). Given in the
            quote asset.
          type: integer
        MOVING_30_DAY_QUOTE_VOLUME_UNKNOWN:
          description: The sum of all unknown trade quote quantities from 30 days
            ago up to the beginning of the current day (29 days in total). Given in
            the quote asset.
          type: integer
        MOVING_30_DAY_TOTAL_TRADES:
          description: The total number of trades that have occurred in the period
            running from 30 days ago to the beginning (00:00:00 GMT/UTC) of the current
            day (29 days in total).
          type: integer
        MOVING_30_DAY_TOTAL_TRADES_BUY:
          description: The total number of buy trades that have occurred in the period
            running from 30 days ago to the beginning (00:00:00 GMT/UTC) of the current
            day (29 days in total).
          type: integer
        MOVING_30_DAY_TOTAL_TRADES_SELL:
          description: The total number of sell trades that have occurred in the period
            running from 30 days ago to the beginning (00:00:00 GMT/UTC) of the current
            day (29 days in total).
          type: integer
        MOVING_30_DAY_TOTAL_TRADES_UNKNOWN:
          description: The total number of unknown trades that have occurred in the
            period running from 30 days ago to the beginning (00:00:00 GMT/UTC) of
            the current day (29 days in total).
          type: integer
        MOVING_30_DAY_VOLUME:
          description: The sum of all trade quantities from 30 days ago up to the
            beginning of the current day (29 days in total). Given in the base asset.
          type: integer
        MOVING_30_DAY_VOLUME_BUY:
          description: The sum of all buy trade quantities from 30 days ago up to
            the beginning of the current day (29 days in total). Given in the base
            asset.
          type: integer
        MOVING_30_DAY_VOLUME_SELL:
          description: The sum of all sell trade quantities from 30 days ago up to
            the beginning of the current day (29 days in total). Given in the base
            asset.
          type: integer
        MOVING_30_DAY_VOLUME_UNKNOWN:
          description: The sum of all unknown trade quantities from 30 days ago up
            to the beginning of the current day (29 days in total). Given in the base
            asset.
          type: integer
        MOVING_365_DAY_HIGH:
          description: "The highest price of the period. Here, the period runs from\
            \ 365 days ago up to the beginning of the current day (364 days in total).\
            \ Given in the quote asset."
          type: integer
        MOVING_365_DAY_LOW:
          description: "The lowest traded price of the period. Here, the period runs\
            \ from 365 days ago up to the beginning of the current day (364 days in\
            \ total). Given in the quote asset."
          type: integer
        MOVING_365_DAY_OPEN:
          description: The price of the closest trade to the period start date (364
            days + current day - 00:00:00 GMT/UTC to now).  This will always be supplied
            and there is no need to do any calculation to get the full 365 day value.
            Given in the quote asset.
          type: integer
        MOVING_365_DAY_QUOTE_VOLUME:
          description: The sum of all trade quote quantities from 365 days ago up
            to the beginning of the current day (364 days in total). Given in the
            quote asset.
          type: integer
        MOVING_365_DAY_QUOTE_VOLUME_BUY:
          description: The sum of all buy trade quote quantities from 365 days ago
            up to the beginning of the current day (364 days in total). Given in the
            quote asset.
          type: integer
        MOVING_365_DAY_QUOTE_VOLUME_SELL:
          description: The sum of all sell trade quote quantities from 365 days ago
            up to the beginning of the current day (364 days in total). Given in the
            quote asset.
          type: integer
        MOVING_365_DAY_QUOTE_VOLUME_UNKNOWN:
          description: The sum of all unknown trade quote quantities from 365 days
            ago up to the beginning of the current day (364 days in total). Given
            in the quote asset.
          type: integer
        MOVING_365_DAY_TOTAL_TRADES:
          description: The total number of trades that have occurred during the period
            running from 365 days ago to the beginning (00:00:00 GMT/UTC) of the current
            day (364 days in total).
          type: integer
        MOVING_365_DAY_TOTAL_TRADES_BUY:
          description: The total number of buy trades that have occurred during the
            period running from 365 days ago to the beginning (00:00:00 GMT/UTC) of
            the current day (364 days in total).
          type: integer
        MOVING_365_DAY_TOTAL_TRADES_SELL:
          description: The total number of sell trades that have occurred during the
            period running from 365 days ago to the beginning (00:00:00 GMT/UTC) of
            the current day (364 days in total).
          type: integer
        MOVING_365_DAY_TOTAL_TRADES_UNKNOWN:
          description: The total number of unknown trades that have occurred during
            the period running from 365 days ago to the beginning (00:00:00 GMT/UTC)
            of the current day (364 days in total).
          type: integer
        MOVING_365_DAY_VOLUME:
          description: The sum of all trade quantities from 365 days ago up to the
            beginning of the current day (364 days in total). Given in the base asset.
          type: integer
        MOVING_365_DAY_VOLUME_BUY:
          description: The sum of all trade quantities from 365 days ago up to the
            beginning of the current day (364 days in total). Given in the base asset.
          type: integer
        MOVING_365_DAY_VOLUME_SELL:
          description: The sum of all sell trade quantities from 365 days ago up to
            the beginning of the current day (364 days in total). Given in the base
            asset.
          type: integer
        MOVING_365_DAY_VOLUME_UNKNOWN:
          description: The sum of all unknown trade quantities from 365 days ago up
            to the beginning of the current day (364 days in total). Given in the
            base asset.
          type: integer
        MOVING_7_DAY_HIGH:
          description: "The highest traded price of the period. Here, the period runs\
            \ from 7 days ago up to the beginning of the current day (6 days in total).\
            \ Given in the quote asset."
          type: integer
        MOVING_7_DAY_LOW:
          description: "The lowest traded price of the period. Here, the period runs\
            \ from 7 days ago up to the beginning of the current day (6 days in total).\
            \ Given in the quote asset."
          type: integer
        MOVING_7_DAY_OPEN:
          description: The price of the closest trade to the period start date (6
            days + current day - 00:00:00 GMT/UTC to now). This will always be supplied
            and there is no need to do any calculation to get the full 7 day value.
            Given in the quote asset.
          type: integer
        MOVING_7_DAY_QUOTE_VOLUME:
          description: The sum of all trade quote quantities from 7 days ago up to
            the beginning of the current day (6 days in total). Given in the quote
            asset.
          type: integer
        MOVING_7_DAY_QUOTE_VOLUME_BUY:
          description: The sum of all buy trade quote quantities from 7 days ago up
            to the beginning of the current day (6 days in total). Given in the quote
            asset.
          type: integer
        MOVING_7_DAY_QUOTE_VOLUME_SELL:
          description: The sum of all sell trade quote quantities from 7 days ago
            up to the beginning of the current day (6 days in total). Given in the
            quote asset.
          type: integer
        MOVING_7_DAY_QUOTE_VOLUME_UNKNOWN:
          description: The sum of all unknown trade quote quantities from 7 days ago
            up to the beginning of the current day (6 days in total). Given in the
            quote asset.
          type: integer
        MOVING_7_DAY_TOTAL_TRADES:
          description: The total number of trades that have occurred in the period
            running from 7 days ago to the beginning (00:00:00 GMT/UTC) of the current
            day (6 days in total).
          type: integer
        MOVING_7_DAY_TOTAL_TRADES_BUY:
          description: The total number of buy trades that have occurred in the period
            running from 7 days ago to the beginning (00:00:00 GMT/UTC) of the current
            day (6 days in total).
          type: integer
        MOVING_7_DAY_TOTAL_TRADES_SELL:
          description: The total number of sell trades that have occurred in the period
            running from 7 days ago to the beginning (00:00:00 GMT/UTC) of the current
            day (6 days in total).
          type: integer
        MOVING_7_DAY_TOTAL_TRADES_UNKNOWN:
          description: The total number of unknown trades that have occurred in the
            period running from 7 days ago to the beginning (00:00:00 GMT/UTC) of
            the current day (6 days in total).
          type: integer
        MOVING_7_DAY_VOLUME:
          description: The sum of all trade quantities from 7 days ago up to the beginning
            of the current day (6 days in total). Given in the base asset.
          type: integer
        MOVING_7_DAY_VOLUME_BUY:
          description: The sum of all buy trade quantities from 7 days ago up to the
            beginning of the current day (6 days in total). Given in the base asset.
          type: integer
        MOVING_7_DAY_VOLUME_SELL:
          description: The sum of all sell trade quantities from 7 days ago up to
            the beginning of the current day (6 days in total). Given in the base
            asset.
          type: integer
        MOVING_7_DAY_VOLUME_UNKNOWN:
          description: The sum of all unknown trade quantities from 7 days ago up
            to the beginning of the current day (6 days in total). Given in the base
            asset.
          type: integer
        MOVING_90_DAY_HIGH:
          description: "The highest value between the MOVING_90_DAY_OPEN and the highest\
            \ traded price of the period. Here, the period runs from 90 days ago up\
            \ to the beginning of the current day (89 days in total). Given in the\
            \ quote asset."
          type: integer
        MOVING_90_DAY_LOW:
          description: "The lowest traded price of the period. Here, the period runs\
            \ from 90 days ago up to the beginning of the current day (89 days in\
            \ total). Given in the quote asset."
          type: integer
        MOVING_90_DAY_OPEN:
          description: The price of the closest trade to the period start date (89
            days + current day - 00:00:00 GMT/UTC to now).  This will always be supplied
            and there is no need to do any calculation to get the full 90 day value.
            Given in the quote asset.
          type: integer
        MOVING_90_DAY_QUOTE_VOLUME:
          description: The sum of all trade quote quantities from 90 days ago up to
            the beginning of the current day (89 days in total). Given in the quote
            asset.
          type: integer
        MOVING_90_DAY_QUOTE_VOLUME_BUY:
          description: The sum of all buy trade quote quantities from 90 days ago
            up to the beginning of the current day (89 days in total). Given in the
            quote asset.
          type: integer
        MOVING_90_DAY_QUOTE_VOLUME_SELL:
          description: The sum of all sell trade quote quantities from 90 days ago
            up to the beginning of the current day (89 days in total). Given in the
            quote asset.
          type: integer
        MOVING_90_DAY_QUOTE_VOLUME_UNKNOWN:
          description: The sum of all unknown trade quote quantities from 90 days
            ago up to the beginning of the current day (89 days in total). Given in
            the quote asset.
          type: integer
        MOVING_90_DAY_TOTAL_TRADES:
          description: The total number of trades that have occurred in the period
            running from 90 days ago to the beginning (00:00:00 GMT/UTC) of the current
            day (89 days in total).
          type: integer
        MOVING_90_DAY_TOTAL_TRADES_BUY:
          description: The total number of buy trades that have occurred in the period
            running from 90 days ago to the beginning (00:00:00 GMT/UTC) of the current
            day (89 days in total).
          type: integer
        MOVING_90_DAY_TOTAL_TRADES_SELL:
          description: The total number of sell trades that have occurred in the period
            running from 90 days ago to the beginning (00:00:00 GMT/UTC) of the current
            day (89 days in total).
          type: integer
        MOVING_90_DAY_TOTAL_TRADES_UNKNOWN:
          description: The total number of unknown trades that have occurred in the
            period running from 90 days ago to the beginning (00:00:00 GMT/UTC) of
            the current day (89 days in total).
          type: integer
        MOVING_90_DAY_VOLUME:
          description: The sum of all trade quantities from 90 days ago up to the
            beginning of the current day (89 days in total). Given in the base asset.
          type: integer
        MOVING_90_DAY_VOLUME_BUY:
          description: The sum of all trade quantities from 90 days ago up to the
            beginning of the current day (89 days in total). Given in the base asset.
          type: integer
        MOVING_90_DAY_VOLUME_SELL:
          description: The sum of all sell trade quantities from 90 days ago up to
            the beginning of the current day (89 days in total). Given in the base
            asset.
          type: integer
        MOVING_90_DAY_VOLUME_UNKNOWN:
          description: The sum of all unknown trade quantities from 90 days ago up
            to the beginning of the current day (89 days in total). Given in the base
            asset.
          type: integer
        PRICE:
          description: "The price in the to asset (quote / number symbol / coin) of\
            \ the latest trade. I.e. for a BTC-USD trade, how much was paid for one\
            \ BTC in USD)."
          type: integer
        PRICE_FLAG:
          description: "The flag indicating whether the price has increased, decreased,\
            \ or not changed"
          type: string
        PRICE_LAST_UPDATE_TS:
          description: "The timestamp in seconds as reported by the market / exchange.\
            \ If the market /exchange does not provide this information, the received\
            \ timestamp will be returned."
          type: integer
        QUOTE:
          description: "The mapped to asset (quote / counter symbol / coin), e.g.\
            \ USD. Only available on instruments that have been mapped."
          type: string
        TOP_ASK_LAST_UPDATE_TS:
          description: "The timestamp in seconds of the last time the top ask was\
            \ updated, as reported by the market / exchange. If the market / exchange\
            \ does not provide this information, the received timestamp will be returned."
          type: integer
        TOP_ASK_PRICE:
          description: "The price of the top ask in the to asset (quote / numberer\
            \ symbol / coin). For a BTC-USD order book, this will be the best price\
            \ someone is willing to sell some BTC in USD, as quoted for 1 full BTC."
          type: integer
        TOP_ASK_QUANTITY:
          description: "The quantity of the top ask in the from asset (base / coin).\
            \ For a BTC-USD order book, this will be the amount of BTC a person is\
            \ willing to sell at the best price."
          type: integer
        TOP_BID_LAST_UPDATE_TS:
          description: "The timestamp in seconds of the last time the top bid was\
            \ updated, as reported by the market / exchange. If the market / exchange\
            \ does not provide this information, the received timestamp will be returned."
          type: integer
        TOP_BID_PRICE:
          description: "The price of the top bid in the to asset (quote / numberer\
            \ symbol / coin). For a BTC-USD order book, this will be the highest price\
            \ a person is willing to pay for some BTC in USD, as quoted for 1 full\
            \ BTC."
          type: integer
        TOP_BID_QUANTITY:
          description: "The quantity of the top bid in the from asset (base / coin).\
            \ For a BTC-USD order book , this will be the amount of BTC someone is\
            \ willing to buy at the best price."
          type: integer
        TYPE:
          description: The type of the message.
          type: string
      type: object
    SPOT_INSTRUMENT_MARKET_DATA_RESPONSE:
      example:
        Err:
          other_info:
            param: instruments
            values:
            - INSTRUMENT-DOES-NOT-EXIST
          message: "Not found: instruments parameter. One or multiple instruments\
            \ on coinbase not integrated yet or not supported. Instruments are case\
            \ sensitive, make sure you check the https://data-api.cryptocompare.com/spot/v1/markets/instruments\
            \ endpoint for a list of all the supported TRADE_SPOT market and instrument\
            \ combinations. Invalid instruments: INSTRUMENT-DOES-NOT-EXIST"
          type: 1
        Data:
          key:
            CURRENT_WEEK_QUOTE_VOLUME_SELL: 6
            MOVING_180_DAY_TOTAL_TRADES_UNKNOWN: 5
            MOVING_30_DAY_VOLUME_UNKNOWN: 0
            MOVING_7_DAY_OPEN: 5
            CURRENT_HOUR_QUOTE_VOLUME_SELL: 9
            LIFETIME_TOTAL_TRADES: 3
            TOP_BID_QUANTITY: 1
            CCSEQ: 0
            LIFETIME_VOLUME_UNKNOWN: 2
            CURRENT_MONTH_QUOTE_VOLUME_BUY: 3
            MOVING_7_DAY_VOLUME_BUY: 5
            LIFETIME_QUOTE_VOLUME_UNKNOWN: 2
            CURRENT_YEAR_VOLUME_BUY: 8
            MOVING_7_DAY_VOLUME_UNKNOWN: 2
            MOVING_365_DAY_VOLUME_UNKNOWN: 5
            CURRENT_YEAR_QUOTE_VOLUME_SELL: 3
            MOVING_30_DAY_QUOTE_VOLUME: 8
            CURRENT_MONTH_QUOTE_VOLUME: 3
            MOVING_24_HOUR_TOTAL_TRADES_UNKNOWN: 3
            MOVING_7_DAY_TOTAL_TRADES: 8
            LAST_TRADE_SIDE: LAST_TRADE_SIDE
            CURRENT_HOUR_OPEN: 4
            TOP_ASK_PRICE: 5
            LAST_PROCESSED_TRADE_PRICE: 3
            MOVING_24_HOUR_QUOTE_VOLUME: 9
            MOVING_180_DAY_VOLUME_UNKNOWN: 5
            MOVING_180_DAY_QUOTE_VOLUME_UNKNOWN: 9
            LAST_TRADE_QUANTITY: 5
            MOVING_180_DAY_LOW: 0
            MOVING_24_HOUR_TOTAL_TRADES_BUY: 1
            CURRENT_HOUR_TOTAL_TRADES: 8
            CURRENT_DAY_TOTAL_TRADES_UNKNOWN: 7
            CURRENT_HOUR_LOW: 1
            MOVING_365_DAY_QUOTE_VOLUME_SELL: 4
            MOVING_30_DAY_VOLUME_SELL: 0
            CURRENT_DAY_VOLUME_SELL: 1
            MOVING_90_DAY_LOW: 7
            MOVING_30_DAY_HIGH: 8
            CURRENT_YEAR_VOLUME_SELL: 9
            CURRENT_HOUR_VOLUME_UNKNOWN: 6
            CURRENT_MONTH_OPEN: 6
            LAST_PROCESSED_TRADE_SIDE: LAST_PROCESSED_TRADE_SIDE
            LAST_TRADE_CCSEQ: LAST_TRADE_CCSEQ
            LAST_TRADE_ID: LAST_TRADE_ID
            CURRENT_DAY_QUOTE_VOLUME_UNKNOWN: 9
            LIFETIME_TOTAL_TRADES_SELL: 4
            CURRENT_MONTH_VOLUME_SELL: 3
            CURRENT_WEEK_VOLUME_BUY: 9
            MOVING_24_HOUR_QUOTE_VOLUME_SELL: 7
            MOVING_30_DAY_TOTAL_TRADES_SELL: 0
            MOVING_365_DAY_QUOTE_VOLUME_UNKNOWN: 0
            CURRENT_WEEK_QUOTE_VOLUME: 4
            CURRENT_MONTH_VOLUME: 8
            TOP_BID_PRICE: 0
            CURRENT_DAY_QUOTE_VOLUME: 5
            MOVING_24_HOUR_OPEN: 3
            CURRENT_YEAR_TOTAL_TRADES_SELL: 8
            CURRENT_HOUR_VOLUME: 6
            CURRENT_YEAR_QUOTE_VOLUME_UNKNOWN: 0
            CURRENT_YEAR_TOTAL_TRADES: 2
            MOVING_7_DAY_TOTAL_TRADES_UNKNOWN: 4
            MOVING_24_HOUR_TOTAL_TRADES_SELL: 4
            CURRENT_WEEK_VOLUME_UNKNOWN: 7
            MOVING_90_DAY_VOLUME_UNKNOWN: 2
            CURRENT_WEEK_TOTAL_TRADES_UNKNOWN: 9
            MOVING_7_DAY_QUOTE_VOLUME_SELL: 7
            MOVING_30_DAY_QUOTE_VOLUME_SELL: 6
            MOVING_180_DAY_OPEN: 2
            CURRENT_MONTH_VOLUME_BUY: 7
            MOVING_90_DAY_QUOTE_VOLUME: 6
            MOVING_90_DAY_TOTAL_TRADES_SELL: 3
            MOVING_90_DAY_QUOTE_VOLUME_BUY: 9
            LIFETIME_HIGH: 7
            QUOTE: QUOTE
            LIFETIME_FIRST_TRADE_TS: 8
            LIFETIME_QUOTE_VOLUME_BUY: 0
            LIFETIME_QUOTE_VOLUME: 7
            MOVING_24_HOUR_QUOTE_VOLUME_UNKNOWN: 7
            MOVING_365_DAY_VOLUME: 4
            CURRENT_MONTH_LOW: 5
            CURRENT_MONTH_TOTAL_TRADES_BUY: 6
            BASE: BASE
            CURRENT_DAY_OPEN: 5
            MOVING_365_DAY_LOW: 9
            CURRENT_YEAR_HIGH: 5
            MOVING_7_DAY_HIGH: 3
            LIFETIME_TOTAL_TRADES_UNKNOWN: 0
            LIFETIME_LOW: 3
            MOVING_180_DAY_VOLUME_SELL: 5
            MOVING_365_DAY_TOTAL_TRADES: 7
            MOVING_365_DAY_VOLUME_BUY: 2
            MOVING_180_DAY_VOLUME: 1
            CURRENT_WEEK_HIGH: 7
            MOVING_7_DAY_VOLUME_SELL: 9
            CURRENT_HOUR_VOLUME_SELL: 2
            PRICE_LAST_UPDATE_TS: 2
            CURRENT_WEEK_OPEN: 3
            MOVING_180_DAY_QUOTE_VOLUME_SELL: 6
            LIFETIME_TOTAL_TRADES_BUY: 8
            MAPPED_INSTRUMENT: MAPPED_INSTRUMENT
            MOVING_90_DAY_VOLUME_BUY: 4
            MOVING_180_DAY_QUOTE_VOLUME_BUY: 4
            LIFETIME_HIGH_TS: 3
            LAST_PROCESSED_TRADE_QUANTITY: 9
            CURRENT_HOUR_QUOTE_VOLUME: 5
            CURRENT_DAY_LOW: 1
            MOVING_24_HOUR_VOLUME_BUY: 2
            CURRENT_DAY_VOLUME_UNKNOWN: 6
            TYPE: TYPE
            CURRENT_HOUR_QUOTE_VOLUME_BUY: 9
            MOVING_30_DAY_TOTAL_TRADES_BUY: 5
            MARKET: MARKET
            CURRENT_YEAR_TOTAL_TRADES_BUY: 1
            MOVING_365_DAY_QUOTE_VOLUME_BUY: 0
            TOP_ASK_LAST_UPDATE_TS: 6
            CURRENT_WEEK_QUOTE_VOLUME_BUY: 0
            CURRENT_YEAR_VOLUME: 4
            CURRENT_DAY_HIGH: 6
            MOVING_90_DAY_QUOTE_VOLUME_UNKNOWN: 2
            MOVING_30_DAY_VOLUME_BUY: 4
            CURRENT_WEEK_LOW: 5
            LAST_PROCESSED_TRADE_QUOTE_QUANTITY: 8
            MOVING_365_DAY_TOTAL_TRADES_BUY: 1
            MOVING_24_HOUR_VOLUME_SELL: 9
            LIFETIME_VOLUME_BUY: 7
            TOP_BID_LAST_UPDATE_TS: 5
            LIFETIME_VOLUME_SELL: 4
            MOVING_30_DAY_VOLUME: 6
            MOVING_90_DAY_QUOTE_VOLUME_SELL: 8
            MOVING_365_DAY_OPEN: 7
            CURRENT_HOUR_VOLUME_BUY: 1
            MOVING_90_DAY_TOTAL_TRADES_BUY: 1
            LAST_PROCESSED_TRADE_TS: 0
            MOVING_24_HOUR_TOTAL_TRADES: 9
            CURRENT_YEAR_LOW: 4
            MOVING_180_DAY_TOTAL_TRADES: 1
            CURRENT_WEEK_VOLUME_SELL: 0
            LIFETIME_VOLUME: 0
            MOVING_30_DAY_TOTAL_TRADES: 2
            MOVING_7_DAY_TOTAL_TRADES_SELL: 2
            CURRENT_HOUR_TOTAL_TRADES_UNKNOWN: 3
            CURRENT_MONTH_TOTAL_TRADES_UNKNOWN: 4
            LIFETIME_LOW_TS: 9
            MOVING_7_DAY_VOLUME: 3
            CURRENT_YEAR_QUOTE_VOLUME_BUY: 4
            CURRENT_WEEK_TOTAL_TRADES_SELL: 7
            MOVING_365_DAY_TOTAL_TRADES_UNKNOWN: 2
            MOVING_7_DAY_QUOTE_VOLUME_BUY: 8
            MOVING_7_DAY_QUOTE_VOLUME: 3
            CURRENT_YEAR_QUOTE_VOLUME: 8
            CURRENT_YEAR_VOLUME_UNKNOWN: 1
            MOVING_90_DAY_HIGH: 7
            MOVING_24_HOUR_HIGH: 3
            MOVING_90_DAY_VOLUME_SELL: 2
            MOVING_24_HOUR_QUOTE_VOLUME_BUY: 7
            CURRENT_DAY_QUOTE_VOLUME_BUY: 2
            CURRENT_WEEK_QUOTE_VOLUME_UNKNOWN: 4
            MOVING_24_HOUR_LOW: 1
            MOVING_30_DAY_TOTAL_TRADES_UNKNOWN: 7
            MOVING_7_DAY_QUOTE_VOLUME_UNKNOWN: 2
            CURRENT_MONTH_TOTAL_TRADES_SELL: 0
            CURRENT_WEEK_TOTAL_TRADES_BUY: 4
            MOVING_7_DAY_LOW: 1
            CURRENT_YEAR_OPEN: 6
            CURRENT_HOUR_QUOTE_VOLUME_UNKNOWN: 6
            MOVING_180_DAY_TOTAL_TRADES_SELL: 3
            LAST_TRADE_QUOTE_QUANTITY: 5
            CURRENT_HOUR_TOTAL_TRADES_SELL: 6
            LAST_PROCESSED_TRADE_CCSEQ: LAST_PROCESSED_TRADE_CCSEQ
            MOVING_24_HOUR_VOLUME: 8
            PRICE: 8
            CURRENT_MONTH_VOLUME_UNKNOWN: 3
            MOVING_365_DAY_VOLUME_SELL: 3
            CURRENT_DAY_VOLUME: 1
            MOVING_180_DAY_VOLUME_BUY: 4
            MOVING_90_DAY_OPEN: 6
            MOVING_30_DAY_QUOTE_VOLUME_UNKNOWN: 0
            MOVING_30_DAY_OPEN: 4
            MOVING_180_DAY_QUOTE_VOLUME: 6
            MOVING_365_DAY_QUOTE_VOLUME: 6
            CURRENT_DAY_QUOTE_VOLUME_SELL: 7
            CURRENT_MONTH_TOTAL_TRADES: 7
            PRICE_FLAG: PRICE_FLAG
            MOVING_90_DAY_VOLUME: 1
            CURRENT_WEEK_VOLUME: 0
            CURRENT_MONTH_HIGH: 6
            TOP_ASK_QUANTITY: 8
            CURRENT_YEAR_TOTAL_TRADES_UNKNOWN: 6
            MOVING_180_DAY_TOTAL_TRADES_BUY: 1
            CURRENT_DAY_TOTAL_TRADES_BUY: 2
            LIFETIME_QUOTE_VOLUME_SELL: 3
            CURRENT_DAY_VOLUME_BUY: 1
            CURRENT_WEEK_TOTAL_TRADES: 1
            MOVING_24_HOUR_VOLUME_UNKNOWN: 4
            CURRENT_MONTH_QUOTE_VOLUME_UNKNOWN: 0
            CURRENT_HOUR_HIGH: 7
            MOVING_30_DAY_QUOTE_VOLUME_BUY: 2
            MOVING_90_DAY_TOTAL_TRADES: 6
            CURRENT_HOUR_TOTAL_TRADES_BUY: 9
            MOVING_365_DAY_HIGH: 9
            MOVING_90_DAY_TOTAL_TRADES_UNKNOWN: 9
            MOVING_30_DAY_LOW: 6
            CURRENT_DAY_TOTAL_TRADES_SELL: 4
            LIFETIME_OPEN: 5
            INSTRUMENT: INSTRUMENT
            MOVING_180_DAY_HIGH: 9
            MOVING_7_DAY_TOTAL_TRADES_BUY: 0
            CURRENT_MONTH_QUOTE_VOLUME_SELL: 7
            CURRENT_DAY_TOTAL_TRADES: 3
            MOVING_365_DAY_TOTAL_TRADES_SELL: 6
      properties:
        Data:
          additionalProperties:
            $ref: '#/components/schemas/SPOT_INSTRUMENT_MARKET_DATA'
          type: object
        Err:
          $ref: '#/components/schemas/SPOT_INSTRUMENT_MARKET_DATA_RESPONSE_Err'
      type: object
    SPOT_INSTRUMENT_METADATA:
      example:
        INSTRUMENT_TRADE_SPOT_FROM_FIX_REST_URI_NEXT_REQUEST_TS: 4
        HOST_MIGRATION_DESTINATION: HOST_MIGRATION_DESTINATION
        INSTRUMENT_TRADE_SPOT_FROM_POLLING_REST_URI_LAST_RESPONSE_TS: 8
        FIRST_SEEN_ON_HARDCODED_TS: 1
        INSTRUMENT_TRADE_SPOT_FROM_BLOB_LAST_PROXIED_REST_REQUEST: "{}"
        INSTRUMENT_MAPPING: {}
        INSTRUMENT_TRADE_SPOT_FROM_POLLING_REST_URI_LAST_REQUEST_TS: 6
        LAST_CONCURRENT_BATCH_OF_TRADES_SPOT_MS: 1
        INSTRUMENT_TRADE_SPOT_FROM_FIX_LAST_PROXIED_REST_REQUEST: "{}"
        INSTRUMENT_SOURCE_BACKFILL: INSTRUMENT_SOURCE_BACKFILL
        FIRST_SEEN_ON_BLOB_TS: 0
        LAST_TRADE_SPOT_FROM_POLLING_EXTERNAL: "{}"
        FIRST_TRADE_SPOT_FROM_FIX: "{}"
        LAST_TRADE_SPOT_FROM_BLOB_EXTERNAL: "{}"
        INSTRUMENT_TRADE_SPOT_FROM_STREAMING_REST_URI_LAST_RESPONSE_TS: 3
        FIRST_TRADE_SPOT_FROM_BLOB: "{}"
        INSTRUMENT_TRADE_SPOT_FROM_CALCULATED_REST_URI_NEXT_REQUEST_TS: 6
        UNSTRUCTURED_TRADE_SPOT_FROM_STREAMING_INTERNAL_DATA: "{}"
        INSTRUMENT_TRADE_SPOT_FROM_BACKFILL_REST_URI_LAST_RESPONSE_TS: 3
        INSTRUMENT_TRADE_SPOT_FROM_STREAMING_REST_URI_NEXT_REQUEST_TS: 6
        INSTRUMENT_SOURCE_BLOB: INSTRUMENT_SOURCE_BLOB
        INSTRUMENT_TRADE_SPOT_FROM_BACKFILL_REST_URI_LAST_REQUEST_TS: 9
        UNSTRUCTURED_TRADE_SPOT_FROM_CALCULATED_INTERNAL_DATA: "{}"
        FIRST_TRADE_SPOT_FROM_CALCULATED_EXTERNAL: "{}"
        UNSTRUCTURED_TRADE_SPOT_FROM_GO_INTERNAL_DATA: "{}"
        INSTRUMENT_TRADE_SPOT_FROM_POLLING_REST_URI_NEXT_REQUEST_TS: 9
        LAST_TRADE_SPOT_FROM_POLLING: "{}"
        FIRST_TRADE_SPOT_FROM_FIX_EXTERNAL: "{}"
        INSTRUMENT_SOURCE_FIX: INSTRUMENT_SOURCE_FIX
        LAST_SEEN_ON_POLLING_TS: 3
        INSTRUMENT_TRADE_SPOT_FROM_FIX_REST_URI_LAST_REQUEST_TS: 7
        FIRST_TRADE_SPOT_FROM_BLOB_EXTERNAL: "{}"
        FIRST_TRADE_SPOT_FROM_CALCULATED: "{}"
        INSTRUMENT_EXTERNAL_DATA: INSTRUMENT_EXTERNAL_DATA
        INSTRUMENT_TRADE_SPOT_FROM_BLOB_REST_URI_LAST_RESPONSE_TS: 7
        FIRST_SEEN_ON_NSQ_TS: 5
        FIRST_SEEN_ON_STREAMING_TS: 7
        LAST_TRADE_SPOT_FROM_GO: "{}"
        UNSTRUCTURED_TRADE_SPOT_FROM_POLLING_INTERNAL_DATA: "{}"
        INSTRUMENT_TRADE_SPOT_FROM_BACKFILL_REST_URI_NEXT_REQUEST_TS: 2
        UNSTRUCTURED_TRADE_SPOT_FROM_BLOB_INTERNAL_DATA: "{}"
        INSTRUMENT_TRADE_SPOT_FROM_CALCULATED_LAST_PROXIED_REST_REQUEST: "{}"
        PROCESSING_TRADES_FROM_BLOB_STATUS: PROCESSING_TRADES_FROM_BLOB_STATUS
        LAST_TRADE_SPOT_FROM_STREAMING: "{}"
        LAST_TRADE_SPOT_FROM_BACKFILL: "{}"
        INSTRUMENT_MAPPING_HISTORY: []
        INSTRUMENT_SOURCE_CALCULATED: INSTRUMENT_SOURCE_CALCULATED
        INSTRUMENT_TRADE_SPOT_FROM_GO_REST_URI_LAST_RESPONSE_TS: 9
        LAST_TRADE_SPOT_FROM_CALCULATED: "{}"
        FIRST_TRADE_SPOT_FROM_POLLING: "{}"
        FIRST_TRADE_SPOT_FROM_STREAMING_EXTERNAL: "{}"
        INSTRUMENT_TRADE_SPOT_FROM_BACKFILL_LAST_PROXIED_REST_REQUEST: "{}"
        INSTRUMENT_TRADE_SPOT_FROM_BLOB_REST_URI_NEXT_REQUEST_TS: 1
        LAST_TRADE_SPOT_FROM_BACKFILL_EXTERNAL: "{}"
        LAST_TRADE_SPOT_FROM_STREAMING_EXTERNAL: "{}"
        FIRST_SEEN_ON_INDEX_COMPOSITION_TS: 5
        LAST_TRADE_SPOT_FROM_GO_EXTERNAL: "{}"
        UNSTRUCTURED_TRADE_SPOT_FROM_FIX_INTERNAL_DATA: "{}"
        TOTAL_TRADES_SPOT: 7
        FIRST_TRADE_SPOT_FROM_POLLING_EXTERNAL: "{}"
        INSTRUMENT_STATUS: ACTIVE
        UNSTRUCTURED_TRADE_SPOT_FROM_BACKFILL_INTERNAL_DATA: "{}"
        INSTRUMENT_TRADE_SPOT_FROM_GO_REST_URI_LAST_REQUEST_TS: 5
        LAST_TRADE_SPOT_FROM_FIX: "{}"
        LAST_SEEN_ON_INDEX_COMPOSITION_TS: 5
        METADATA_VERSION: 4
        INSTRUMENT_TRADE_SPOT_FROM_FIX_REST_URI_LAST_RESPONSE_TS: 1
        INSTRUMENT_TRADE_SPOT_STREAMING_SUBSCRIPTION: INSTRUMENT_TRADE_SPOT_STREAMING_SUBSCRIPTION
        INSTRUMENT_SOURCE_POLLING: INSTRUMENT_SOURCE_POLLING
        LAST_SEEN_ON_STREAMING_TS: 3
        FIRST_TRADE_SPOT_FROM_BACKFILL_EXTERNAL: "{}"
        LAST_TRADE_SPOT_FROM_CALCULATED_EXTERNAL: "{}"
        LAST_SEEN_ON_FIX_TS: 6
        FIRST_TRADE_SPOT_FROM_GO_EXTERNAL: "{}"
        INSTRUMENT_SOURCE_GO: INSTRUMENT_SOURCE_GO
        FIRST_SEEN_ON_POLLING_TS: 2
        LAST_SEEN_ON_BLOB_TS: 2
        LAST_SEEN_ON_NSQ_TS: 6
        INSTRUMENT_TRADE_SPOT_FROM_BLOB_REST_URI_LAST_REQUEST_TS: 4
        LAST_TRADE_SPOT_FROM_BLOB: "{}"
        INSTRUMENT_TRADE_SPOT_FROM_STREAMING_LAST_PROXIED_REST_REQUEST: "{}"
        INSTRUMENT_TRADE_SPOT_FROM_GO_LAST_PROXIED_REST_REQUEST: "{}"
        INSTRUMENT_TRADE_SPOT_REST_URL: INSTRUMENT_TRADE_SPOT_REST_URL
        INSTRUMENT_TRADE_SPOT_REST_URI: INSTRUMENT_TRADE_SPOT_REST_URI
        INSTRUMENT_TRADE_SPOT_FROM_CALCULATED_REST_URI_LAST_RESPONSE_TS: 1
        INSTRUMENT_TRADE_SPOT_FROM_CALCULATED_REST_URI_LAST_REQUEST_TS: 1
        HOST_MIGRATION_SOURCE: HOST_MIGRATION_SOURCE
        FIRST_TRADE_SPOT_FROM_STREAMING: "{}"
        FIRST_TRADE_SPOT_FROM_BACKFILL: "{}"
        INSTRUMENT_TRADE_SPOT_FROM_GO_REST_URI_NEXT_REQUEST_TS: 9
        LAST_TRADE_SPOT_FROM_FIX_EXTERNAL: "{}"
        INSTRUMENT: INSTRUMENT
        INSTRUMENT_TRADE_SPOT_FROM_POLLING_LAST_PROXIED_REST_REQUEST: "{}"
        INSTRUMENT_TRADE_SPOT_FROM_STREAMING_REST_URI_LAST_REQUEST_TS: 6
        HOST_MIGRATION_STATUS: HOST_MIGRATION_STATUS
        INSTRUMENT_SOURCE_STREAMING: INSTRUMENT_SOURCE_STREAMING
        LAST_SEEN_ON_HARDCODED_TS: 6
        INSTRUMENT_TRADE_SPOT_IS_READY_FOR_STREAMING_INTEGRATION: false
        FIRST_SEEN_ON_FIX_TS: 6
        FIRST_TRADE_SPOT_FROM_GO: "{}"
      properties:
        FIRST_SEEN_ON_BLOB_TS:
          description: This is the first time instrument was seen on instrumentListSourceType
            BLOB.
          type: integer
        FIRST_SEEN_ON_FIX_TS:
          description: This is the first time instrument was seen on instrumentListSourceType
            FIX.
          type: integer
        FIRST_SEEN_ON_HARDCODED_TS:
          description: This is the first time instrument was seen on instrumentListSourceType
            HARDCODED.
          type: integer
        FIRST_SEEN_ON_INDEX_COMPOSITION_TS:
          description: This is the first time instrument was seen on instrumentListSourceType
            INDEX_COMPOSITION.
          type: integer
        FIRST_SEEN_ON_NSQ_TS:
          description: This is the first time instrument was seen on instrumentListSourceType
            NSQ.
          type: integer
        FIRST_SEEN_ON_POLLING_TS:
          description: This is the first time instrument was seen on instrumentListSourceType
            POLLING.
          type: integer
        FIRST_SEEN_ON_STREAMING_TS:
          description: This is the first time instrument was seen on instrumentListSourceType
            STREAMING.
          type: integer
        FIRST_TRADE_SPOT_FROM_BACKFILL:
          description: This is the first TRADE_SPOT that we have seen on the specific
            source type in internal format.
          properties: {}
          type: object
        FIRST_TRADE_SPOT_FROM_BACKFILL_EXTERNAL:
          description: This is the first TRADE_SPOT that we have seen on the specific
            source type in external format.
          properties: {}
          type: object
        FIRST_TRADE_SPOT_FROM_BLOB:
          description: This is the first TRADE_SPOT that we have seen on the specific
            source type in internal format.
          properties: {}
          type: object
        FIRST_TRADE_SPOT_FROM_BLOB_EXTERNAL:
          description: This is the first TRADE_SPOT that we have seen on the specific
            source type in external format.
          properties: {}
          type: object
        FIRST_TRADE_SPOT_FROM_CALCULATED:
          description: This is the first TRADE_SPOT that we have seen on the specific
            source type in internal format.
          properties: {}
          type: object
        FIRST_TRADE_SPOT_FROM_CALCULATED_EXTERNAL:
          description: This is the first TRADE_SPOT that we have seen on the specific
            source type in external format.
          properties: {}
          type: object
        FIRST_TRADE_SPOT_FROM_FIX:
          description: This is the first TRADE_SPOT that we have seen on the specific
            source type in internal format.
          properties: {}
          type: object
        FIRST_TRADE_SPOT_FROM_FIX_EXTERNAL:
          description: This is the first TRADE_SPOT that we have seen on the specific
            source type in external format.
          properties: {}
          type: object
        FIRST_TRADE_SPOT_FROM_GO:
          description: This is the first TRADE_SPOT that we have seen on the specific
            source type in internal format.
          properties: {}
          type: object
        FIRST_TRADE_SPOT_FROM_GO_EXTERNAL:
          description: This is the first TRADE_SPOT that we have seen on the specific
            source type in external format.
          properties: {}
          type: object
        FIRST_TRADE_SPOT_FROM_POLLING:
          description: This is the first TRADE_SPOT that we have seen on the specific
            source type in internal format.
          properties: {}
          type: object
        FIRST_TRADE_SPOT_FROM_POLLING_EXTERNAL:
          description: This is the first TRADE_SPOT that we have seen on the specific
            source type in external format.
          properties: {}
          type: object
        FIRST_TRADE_SPOT_FROM_STREAMING:
          description: This is the first TRADE_SPOT that we have seen on the specific
            source type in internal format.
          properties: {}
          type: object
        FIRST_TRADE_SPOT_FROM_STREAMING_EXTERNAL:
          description: This is the first TRADE_SPOT that we have seen on the specific
            source type in external format.
          properties: {}
          type: object
        HOST_MIGRATION_DESTINATION:
          description: The migration destination vm hostname.
          type: string
        HOST_MIGRATION_SOURCE:
          description: The migration source vm hostname.
          type: string
        HOST_MIGRATION_STATUS:
          description: "The migration status of the symbol, we only poll / stream\
            \ / connect empty or SETTLED"
          type: string
        INSTRUMENT:
          description: "The instrument ID as it is on the exchange with small modifications\
            \ - we do not allow the following characters inside isntrument ids: ,/&?"
          type: string
        INSTRUMENT_EXTERNAL_DATA:
          description: The full data we get from the polling endpoint for this specific
            instrument. This is a JSON stringified object with different properties
            per exchange.
          type: string
        INSTRUMENT_MAPPING:
          default: {}
          description: The current mapping information for this instrument
          example: {}
          properties: {}
          type: object
        INSTRUMENT_MAPPING_HISTORY:
          default: []
          description: Historical mapping information for this instrument
          example: []
          items:
            type: string
          type: array
        INSTRUMENT_SOURCE_BACKFILL:
          description: "Where do we get the instrument id / INSTRUMENT_{messageName}_REST_URI\
            \ / INSTRUMENT_{messageName}_STREAMING_SUBSCRIPTION etc from."
          type: string
        INSTRUMENT_SOURCE_BLOB:
          description: "Where do we get the instrument id / INSTRUMENT_{messageName}_REST_URI\
            \ / INSTRUMENT_{messageName}_STREAMING_SUBSCRIPTION etc from."
          type: string
        INSTRUMENT_SOURCE_CALCULATED:
          description: "Where do we get the instrument id / INSTRUMENT_{messageName}_REST_URI\
            \ / INSTRUMENT_{messageName}_STREAMING_SUBSCRIPTION etc from."
          type: string
        INSTRUMENT_SOURCE_FIX:
          description: "Where do we get the instrument id / INSTRUMENT_{messageName}_REST_URI\
            \ / INSTRUMENT_{messageName}_STREAMING_SUBSCRIPTION etc from."
          type: string
        INSTRUMENT_SOURCE_GO:
          description: "Where do we get the instrument id / INSTRUMENT_{messageName}_REST_URI\
            \ / INSTRUMENT_{messageName}_STREAMING_SUBSCRIPTION etc from."
          type: string
        INSTRUMENT_SOURCE_POLLING:
          description: "Where do we get the instrument id / INSTRUMENT_{messageName}_REST_URI\
            \ / INSTRUMENT_{messageName}_STREAMING_SUBSCRIPTION etc from."
          type: string
        INSTRUMENT_SOURCE_STREAMING:
          description: "Where do we get the instrument id / INSTRUMENT_{messageName}_REST_URI\
            \ / INSTRUMENT_{messageName}_STREAMING_SUBSCRIPTION etc from."
          type: string
        INSTRUMENT_STATUS:
          default: ACTIVE
          description: "The status of the symbol, we only poll / stream / connect\
            \ to the ACTIVE ones, for the RETIRED / IGNORED / EXPIRED  one we no longer\
            \ query for data."
          example: ACTIVE
          type: string
        INSTRUMENT_TRADE_SPOT_FROM_BACKFILL_LAST_PROXIED_REST_REQUEST:
          description: The last proxied REST request we sent to the proxy swarm to
            get TRADE_SPOT for the instrument.
          properties: {}
          type: object
        INSTRUMENT_TRADE_SPOT_FROM_BACKFILL_REST_URI_LAST_REQUEST_TS:
          description: The last time we sent a request to the proxy swarm to get TRADE_SPOT
            for the instrument.
          type: integer
        INSTRUMENT_TRADE_SPOT_FROM_BACKFILL_REST_URI_LAST_RESPONSE_TS:
          description: The last time we received a request from the proxy swarm with
            TRADE_SPOT for this instrument.
          type: integer
        INSTRUMENT_TRADE_SPOT_FROM_BACKFILL_REST_URI_NEXT_REQUEST_TS:
          description: The next time we expect to make a request for TRADE_SPOT on
            this instrument.
          type: integer
        INSTRUMENT_TRADE_SPOT_FROM_BLOB_LAST_PROXIED_REST_REQUEST:
          description: The last proxied REST request we sent to the proxy swarm to
            get TRADE_SPOT for the instrument.
          properties: {}
          type: object
        INSTRUMENT_TRADE_SPOT_FROM_BLOB_REST_URI_LAST_REQUEST_TS:
          description: The last time we sent a request to the proxy swarm to get TRADE_SPOT
            for the instrument.
          type: integer
        INSTRUMENT_TRADE_SPOT_FROM_BLOB_REST_URI_LAST_RESPONSE_TS:
          description: The last time we received a request from the proxy swarm with
            TRADE_SPOT for this instrument.
          type: integer
        INSTRUMENT_TRADE_SPOT_FROM_BLOB_REST_URI_NEXT_REQUEST_TS:
          description: The next time we expect to make a request for TRADE_SPOT on
            this instrument.
          type: integer
        INSTRUMENT_TRADE_SPOT_FROM_CALCULATED_LAST_PROXIED_REST_REQUEST:
          description: The last proxied REST request we sent to the proxy swarm to
            get TRADE_SPOT for the instrument.
          properties: {}
          type: object
        INSTRUMENT_TRADE_SPOT_FROM_CALCULATED_REST_URI_LAST_REQUEST_TS:
          description: The last time we sent a request to the proxy swarm to get TRADE_SPOT
            for the instrument.
          type: integer
        INSTRUMENT_TRADE_SPOT_FROM_CALCULATED_REST_URI_LAST_RESPONSE_TS:
          description: The last time we received a request from the proxy swarm with
            TRADE_SPOT for this instrument.
          type: integer
        INSTRUMENT_TRADE_SPOT_FROM_CALCULATED_REST_URI_NEXT_REQUEST_TS:
          description: The next time we expect to make a request for TRADE_SPOT on
            this instrument.
          type: integer
        INSTRUMENT_TRADE_SPOT_FROM_FIX_LAST_PROXIED_REST_REQUEST:
          description: The last proxied REST request we sent to the proxy swarm to
            get TRADE_SPOT for the instrument.
          properties: {}
          type: object
        INSTRUMENT_TRADE_SPOT_FROM_FIX_REST_URI_LAST_REQUEST_TS:
          description: The last time we sent a request to the proxy swarm to get TRADE_SPOT
            for the instrument.
          type: integer
        INSTRUMENT_TRADE_SPOT_FROM_FIX_REST_URI_LAST_RESPONSE_TS:
          description: The last time we received a request from the proxy swarm with
            TRADE_SPOT for this instrument.
          type: integer
        INSTRUMENT_TRADE_SPOT_FROM_FIX_REST_URI_NEXT_REQUEST_TS:
          description: The next time we expect to make a request for TRADE_SPOT on
            this instrument.
          type: integer
        INSTRUMENT_TRADE_SPOT_FROM_GO_LAST_PROXIED_REST_REQUEST:
          description: The last proxied REST request we sent to the proxy swarm to
            get TRADE_SPOT for the instrument.
          properties: {}
          type: object
        INSTRUMENT_TRADE_SPOT_FROM_GO_REST_URI_LAST_REQUEST_TS:
          description: The last time we sent a request to the proxy swarm to get TRADE_SPOT
            for the instrument.
          type: integer
        INSTRUMENT_TRADE_SPOT_FROM_GO_REST_URI_LAST_RESPONSE_TS:
          description: The last time we received a request from the proxy swarm with
            TRADE_SPOT for this instrument.
          type: integer
        INSTRUMENT_TRADE_SPOT_FROM_GO_REST_URI_NEXT_REQUEST_TS:
          description: The next time we expect to make a request for TRADE_SPOT on
            this instrument.
          type: integer
        INSTRUMENT_TRADE_SPOT_FROM_POLLING_LAST_PROXIED_REST_REQUEST:
          description: The last proxied REST request we sent to the proxy swarm to
            get TRADE_SPOT for the instrument.
          properties: {}
          type: object
        INSTRUMENT_TRADE_SPOT_FROM_POLLING_REST_URI_LAST_REQUEST_TS:
          description: The last time we sent a request to the proxy swarm to get TRADE_SPOT
            for the instrument.
          type: integer
        INSTRUMENT_TRADE_SPOT_FROM_POLLING_REST_URI_LAST_RESPONSE_TS:
          description: The last time we received a request from the proxy swarm with
            TRADE_SPOT for this instrument.
          type: integer
        INSTRUMENT_TRADE_SPOT_FROM_POLLING_REST_URI_NEXT_REQUEST_TS:
          description: The next time we expect to make a request for TRADE_SPOT on
            this instrument.
          type: integer
        INSTRUMENT_TRADE_SPOT_FROM_STREAMING_LAST_PROXIED_REST_REQUEST:
          description: The last proxied REST request we sent to the proxy swarm to
            get TRADE_SPOT for the instrument.
          properties: {}
          type: object
        INSTRUMENT_TRADE_SPOT_FROM_STREAMING_REST_URI_LAST_REQUEST_TS:
          description: The last time we sent a request to the proxy swarm to get TRADE_SPOT
            for the instrument.
          type: integer
        INSTRUMENT_TRADE_SPOT_FROM_STREAMING_REST_URI_LAST_RESPONSE_TS:
          description: The last time we received a request from the proxy swarm with
            TRADE_SPOT for this instrument.
          type: integer
        INSTRUMENT_TRADE_SPOT_FROM_STREAMING_REST_URI_NEXT_REQUEST_TS:
          description: The next time we expect to make a request for TRADE_SPOT on
            this instrument.
          type: integer
        INSTRUMENT_TRADE_SPOT_IS_READY_FOR_STREAMING_INTEGRATION:
          default: false
          description: This flags the exchange instrument as in ready to consume TRADE_SPOT
            via a streaming integration.
          example: false
          type: boolean
        INSTRUMENT_TRADE_SPOT_REST_URI:
          description: "This is used to build up the request in some cases, this is\
            \ where we put the id we use when querying for TRADE_SPOT."
          type: string
        INSTRUMENT_TRADE_SPOT_REST_URL:
          description: The URL we send to the proxy swarm to get TRADE_SPOT for the
            instrument.
          type: string
        INSTRUMENT_TRADE_SPOT_STREAMING_SUBSCRIPTION:
          description: "This is used to build up the subscription in some cases, this\
            \ is where we put the id we use when subscribing for TRADE_SPOT on this\
            \ instrument."
          type: string
        LAST_CONCURRENT_BATCH_OF_TRADES_SPOT_MS:
          description: The timestamp last encountered where the batch of trades from
            TRADES_SPOT all occured at the same time. This is an issue when making
            the next request that requires polling by timestamp as a start/from parameter
          type: integer
        LAST_SEEN_ON_BLOB_TS:
          description: This is the last time instrument was seen on instrumentListSourceType
            BLOB.
          type: integer
        LAST_SEEN_ON_FIX_TS:
          description: This is the last time instrument was seen on instrumentListSourceType
            FIX.
          type: integer
        LAST_SEEN_ON_HARDCODED_TS:
          description: This is the last time instrument was seen on instrumentListSourceType
            HARDCODED.
          type: integer
        LAST_SEEN_ON_INDEX_COMPOSITION_TS:
          description: This is the last time instrument was seen on instrumentListSourceType
            INDEX_COMPOSITION.
          type: integer
        LAST_SEEN_ON_NSQ_TS:
          description: This is the last time instrument was seen on instrumentListSourceType
            NSQ.
          type: integer
        LAST_SEEN_ON_POLLING_TS:
          description: This is the last time instrument was seen on instrumentListSourceType
            POLLING.
          type: integer
        LAST_SEEN_ON_STREAMING_TS:
          description: This is the last time instrument was seen on instrumentListSourceType
            STREAMING.
          type: integer
        LAST_TRADE_SPOT_FROM_BACKFILL:
          description: This is the last TRADE_SPOT that we have seen on the specific
            source type in internal format.
          properties: {}
          type: object
        LAST_TRADE_SPOT_FROM_BACKFILL_EXTERNAL:
          description: This is the last TRADE_SPOT that we have seen on the specific
            trade source in external format.
          properties: {}
          type: object
        LAST_TRADE_SPOT_FROM_BLOB:
          description: This is the last TRADE_SPOT that we have seen on the specific
            source type in internal format.
          properties: {}
          type: object
        LAST_TRADE_SPOT_FROM_BLOB_EXTERNAL:
          description: This is the last TRADE_SPOT that we have seen on the specific
            trade source in external format.
          properties: {}
          type: object
        LAST_TRADE_SPOT_FROM_CALCULATED:
          description: This is the last TRADE_SPOT that we have seen on the specific
            source type in internal format.
          properties: {}
          type: object
        LAST_TRADE_SPOT_FROM_CALCULATED_EXTERNAL:
          description: This is the last TRADE_SPOT that we have seen on the specific
            trade source in external format.
          properties: {}
          type: object
        LAST_TRADE_SPOT_FROM_FIX:
          description: This is the last TRADE_SPOT that we have seen on the specific
            source type in internal format.
          properties: {}
          type: object
        LAST_TRADE_SPOT_FROM_FIX_EXTERNAL:
          description: This is the last TRADE_SPOT that we have seen on the specific
            trade source in external format.
          properties: {}
          type: object
        LAST_TRADE_SPOT_FROM_GO:
          description: This is the last TRADE_SPOT that we have seen on the specific
            source type in internal format.
          properties: {}
          type: object
        LAST_TRADE_SPOT_FROM_GO_EXTERNAL:
          description: This is the last TRADE_SPOT that we have seen on the specific
            trade source in external format.
          properties: {}
          type: object
        LAST_TRADE_SPOT_FROM_POLLING:
          description: This is the last TRADE_SPOT that we have seen on the specific
            source type in internal format.
          properties: {}
          type: object
        LAST_TRADE_SPOT_FROM_POLLING_EXTERNAL:
          description: This is the last TRADE_SPOT that we have seen on the specific
            trade source in external format.
          properties: {}
          type: object
        LAST_TRADE_SPOT_FROM_STREAMING:
          description: This is the last TRADE_SPOT that we have seen on the specific
            source type in internal format.
          properties: {}
          type: object
        LAST_TRADE_SPOT_FROM_STREAMING_EXTERNAL:
          description: This is the last TRADE_SPOT that we have seen on the specific
            trade source in external format.
          properties: {}
          type: object
        METADATA_VERSION:
          default: 4
          description: "The version of metadata, used for version conversions/migrates."
          example: 4
          type: integer
        PROCESSING_TRADES_FROM_BLOB_STATUS:
          description: This states the status of blob migration for this intrument
            on this exchange.
          type: string
        TOTAL_TRADES_SPOT:
          description: This is both the CCSEQ and the total TRADES_SPOT we have processed
            on this instrument
          type: integer
        UNSTRUCTURED_TRADE_SPOT_FROM_BACKFILL_INTERNAL_DATA:
          description: This is any extra helper TRADE_SPOT data that we would need
            for creating polling requests or subscribing with non standard information
            and anything that is very specific to one exchange API/Integration and
            it does not fit any of the other existing fields and is definitly only
            updated or written in only one service.
          properties: {}
          type: object
        UNSTRUCTURED_TRADE_SPOT_FROM_BLOB_INTERNAL_DATA:
          description: This is any extra helper TRADE_SPOT data that we would need
            for creating polling requests or subscribing with non standard information
            and anything that is very specific to one exchange API/Integration and
            it does not fit any of the other existing fields and is definitly only
            updated or written in only one service.
          properties: {}
          type: object
        UNSTRUCTURED_TRADE_SPOT_FROM_CALCULATED_INTERNAL_DATA:
          description: This is any extra helper TRADE_SPOT data that we would need
            for creating polling requests or subscribing with non standard information
            and anything that is very specific to one exchange API/Integration and
            it does not fit any of the other existing fields and is definitly only
            updated or written in only one service.
          properties: {}
          type: object
        UNSTRUCTURED_TRADE_SPOT_FROM_FIX_INTERNAL_DATA:
          description: This is any extra helper TRADE_SPOT data that we would need
            for creating polling requests or subscribing with non standard information
            and anything that is very specific to one exchange API/Integration and
            it does not fit any of the other existing fields and is definitly only
            updated or written in only one service.
          properties: {}
          type: object
        UNSTRUCTURED_TRADE_SPOT_FROM_GO_INTERNAL_DATA:
          description: This is any extra helper TRADE_SPOT data that we would need
            for creating polling requests or subscribing with non standard information
            and anything that is very specific to one exchange API/Integration and
            it does not fit any of the other existing fields and is definitly only
            updated or written in only one service.
          properties: {}
          type: object
        UNSTRUCTURED_TRADE_SPOT_FROM_POLLING_INTERNAL_DATA:
          description: This is any extra helper TRADE_SPOT data that we would need
            for creating polling requests or subscribing with non standard information
            and anything that is very specific to one exchange API/Integration and
            it does not fit any of the other existing fields and is definitly only
            updated or written in only one service.
          properties: {}
          type: object
        UNSTRUCTURED_TRADE_SPOT_FROM_STREAMING_INTERNAL_DATA:
          description: This is any extra helper TRADE_SPOT data that we would need
            for creating polling requests or subscribing with non standard information
            and anything that is very specific to one exchange API/Integration and
            it does not fit any of the other existing fields and is definitly only
            updated or written in only one service.
          properties: {}
          type: object
      type: object
    SPOT_INSTRUMENT_METADATA_RESPONSE:
      example:
        Err:
          other_info:
            param: instruments
            values:
            - INSTRUMENT-DOES-NOT-EXIST
          message: "Not found: instruments parameter. One or multiple instruments\
            \ on coinbase not integrated yet or not supported. Instruments are case\
            \ sensitive, make sure you check the https://data-api.cryptocompare.com/spot/v1/markets/instruments\
            \ endpoint for a list of all the supported TRADE_SPOT market and instrument\
            \ combinations. Invalid instruments: INSTRUMENT-DOES-NOT-EXIST"
          type: 1
        Data:
          key:
            INSTRUMENT_TRADE_SPOT_FROM_FIX_REST_URI_NEXT_REQUEST_TS: 4
            HOST_MIGRATION_DESTINATION: HOST_MIGRATION_DESTINATION
            INSTRUMENT_TRADE_SPOT_FROM_POLLING_REST_URI_LAST_RESPONSE_TS: 8
            FIRST_SEEN_ON_HARDCODED_TS: 1
            INSTRUMENT_TRADE_SPOT_FROM_BLOB_LAST_PROXIED_REST_REQUEST: "{}"
            INSTRUMENT_MAPPING: {}
            INSTRUMENT_TRADE_SPOT_FROM_POLLING_REST_URI_LAST_REQUEST_TS: 6
            LAST_CONCURRENT_BATCH_OF_TRADES_SPOT_MS: 1
            INSTRUMENT_TRADE_SPOT_FROM_FIX_LAST_PROXIED_REST_REQUEST: "{}"
            INSTRUMENT_SOURCE_BACKFILL: INSTRUMENT_SOURCE_BACKFILL
            FIRST_SEEN_ON_BLOB_TS: 0
            LAST_TRADE_SPOT_FROM_POLLING_EXTERNAL: "{}"
            FIRST_TRADE_SPOT_FROM_FIX: "{}"
            LAST_TRADE_SPOT_FROM_BLOB_EXTERNAL: "{}"
            INSTRUMENT_TRADE_SPOT_FROM_STREAMING_REST_URI_LAST_RESPONSE_TS: 3
            FIRST_TRADE_SPOT_FROM_BLOB: "{}"
            INSTRUMENT_TRADE_SPOT_FROM_CALCULATED_REST_URI_NEXT_REQUEST_TS: 6
            UNSTRUCTURED_TRADE_SPOT_FROM_STREAMING_INTERNAL_DATA: "{}"
            INSTRUMENT_TRADE_SPOT_FROM_BACKFILL_REST_URI_LAST_RESPONSE_TS: 3
            INSTRUMENT_TRADE_SPOT_FROM_STREAMING_REST_URI_NEXT_REQUEST_TS: 6
            INSTRUMENT_SOURCE_BLOB: INSTRUMENT_SOURCE_BLOB
            INSTRUMENT_TRADE_SPOT_FROM_BACKFILL_REST_URI_LAST_REQUEST_TS: 9
            UNSTRUCTURED_TRADE_SPOT_FROM_CALCULATED_INTERNAL_DATA: "{}"
            FIRST_TRADE_SPOT_FROM_CALCULATED_EXTERNAL: "{}"
            UNSTRUCTURED_TRADE_SPOT_FROM_GO_INTERNAL_DATA: "{}"
            INSTRUMENT_TRADE_SPOT_FROM_POLLING_REST_URI_NEXT_REQUEST_TS: 9
            LAST_TRADE_SPOT_FROM_POLLING: "{}"
            FIRST_TRADE_SPOT_FROM_FIX_EXTERNAL: "{}"
            INSTRUMENT_SOURCE_FIX: INSTRUMENT_SOURCE_FIX
            LAST_SEEN_ON_POLLING_TS: 3
            INSTRUMENT_TRADE_SPOT_FROM_FIX_REST_URI_LAST_REQUEST_TS: 7
            FIRST_TRADE_SPOT_FROM_BLOB_EXTERNAL: "{}"
            FIRST_TRADE_SPOT_FROM_CALCULATED: "{}"
            INSTRUMENT_EXTERNAL_DATA: INSTRUMENT_EXTERNAL_DATA
            INSTRUMENT_TRADE_SPOT_FROM_BLOB_REST_URI_LAST_RESPONSE_TS: 7
            FIRST_SEEN_ON_NSQ_TS: 5
            FIRST_SEEN_ON_STREAMING_TS: 7
            LAST_TRADE_SPOT_FROM_GO: "{}"
            UNSTRUCTURED_TRADE_SPOT_FROM_POLLING_INTERNAL_DATA: "{}"
            INSTRUMENT_TRADE_SPOT_FROM_BACKFILL_REST_URI_NEXT_REQUEST_TS: 2
            UNSTRUCTURED_TRADE_SPOT_FROM_BLOB_INTERNAL_DATA: "{}"
            INSTRUMENT_TRADE_SPOT_FROM_CALCULATED_LAST_PROXIED_REST_REQUEST: "{}"
            PROCESSING_TRADES_FROM_BLOB_STATUS: PROCESSING_TRADES_FROM_BLOB_STATUS
            LAST_TRADE_SPOT_FROM_STREAMING: "{}"
            LAST_TRADE_SPOT_FROM_BACKFILL: "{}"
            INSTRUMENT_MAPPING_HISTORY: []
            INSTRUMENT_SOURCE_CALCULATED: INSTRUMENT_SOURCE_CALCULATED
            INSTRUMENT_TRADE_SPOT_FROM_GO_REST_URI_LAST_RESPONSE_TS: 9
            LAST_TRADE_SPOT_FROM_CALCULATED: "{}"
            FIRST_TRADE_SPOT_FROM_POLLING: "{}"
            FIRST_TRADE_SPOT_FROM_STREAMING_EXTERNAL: "{}"
            INSTRUMENT_TRADE_SPOT_FROM_BACKFILL_LAST_PROXIED_REST_REQUEST: "{}"
            INSTRUMENT_TRADE_SPOT_FROM_BLOB_REST_URI_NEXT_REQUEST_TS: 1
            LAST_TRADE_SPOT_FROM_BACKFILL_EXTERNAL: "{}"
            LAST_TRADE_SPOT_FROM_STREAMING_EXTERNAL: "{}"
            FIRST_SEEN_ON_INDEX_COMPOSITION_TS: 5
            LAST_TRADE_SPOT_FROM_GO_EXTERNAL: "{}"
            UNSTRUCTURED_TRADE_SPOT_FROM_FIX_INTERNAL_DATA: "{}"
            TOTAL_TRADES_SPOT: 7
            FIRST_TRADE_SPOT_FROM_POLLING_EXTERNAL: "{}"
            INSTRUMENT_STATUS: ACTIVE
            UNSTRUCTURED_TRADE_SPOT_FROM_BACKFILL_INTERNAL_DATA: "{}"
            INSTRUMENT_TRADE_SPOT_FROM_GO_REST_URI_LAST_REQUEST_TS: 5
            LAST_TRADE_SPOT_FROM_FIX: "{}"
            LAST_SEEN_ON_INDEX_COMPOSITION_TS: 5
            METADATA_VERSION: 4
            INSTRUMENT_TRADE_SPOT_FROM_FIX_REST_URI_LAST_RESPONSE_TS: 1
            INSTRUMENT_TRADE_SPOT_STREAMING_SUBSCRIPTION: INSTRUMENT_TRADE_SPOT_STREAMING_SUBSCRIPTION
            INSTRUMENT_SOURCE_POLLING: INSTRUMENT_SOURCE_POLLING
            LAST_SEEN_ON_STREAMING_TS: 3
            FIRST_TRADE_SPOT_FROM_BACKFILL_EXTERNAL: "{}"
            LAST_TRADE_SPOT_FROM_CALCULATED_EXTERNAL: "{}"
            LAST_SEEN_ON_FIX_TS: 6
            FIRST_TRADE_SPOT_FROM_GO_EXTERNAL: "{}"
            INSTRUMENT_SOURCE_GO: INSTRUMENT_SOURCE_GO
            FIRST_SEEN_ON_POLLING_TS: 2
            LAST_SEEN_ON_BLOB_TS: 2
            LAST_SEEN_ON_NSQ_TS: 6
            INSTRUMENT_TRADE_SPOT_FROM_BLOB_REST_URI_LAST_REQUEST_TS: 4
            LAST_TRADE_SPOT_FROM_BLOB: "{}"
            INSTRUMENT_TRADE_SPOT_FROM_STREAMING_LAST_PROXIED_REST_REQUEST: "{}"
            INSTRUMENT_TRADE_SPOT_FROM_GO_LAST_PROXIED_REST_REQUEST: "{}"
            INSTRUMENT_TRADE_SPOT_REST_URL: INSTRUMENT_TRADE_SPOT_REST_URL
            INSTRUMENT_TRADE_SPOT_REST_URI: INSTRUMENT_TRADE_SPOT_REST_URI
            INSTRUMENT_TRADE_SPOT_FROM_CALCULATED_REST_URI_LAST_RESPONSE_TS: 1
            INSTRUMENT_TRADE_SPOT_FROM_CALCULATED_REST_URI_LAST_REQUEST_TS: 1
            HOST_MIGRATION_SOURCE: HOST_MIGRATION_SOURCE
            FIRST_TRADE_SPOT_FROM_STREAMING: "{}"
            FIRST_TRADE_SPOT_FROM_BACKFILL: "{}"
            INSTRUMENT_TRADE_SPOT_FROM_GO_REST_URI_NEXT_REQUEST_TS: 9
            LAST_TRADE_SPOT_FROM_FIX_EXTERNAL: "{}"
            INSTRUMENT: INSTRUMENT
            INSTRUMENT_TRADE_SPOT_FROM_POLLING_LAST_PROXIED_REST_REQUEST: "{}"
            INSTRUMENT_TRADE_SPOT_FROM_STREAMING_REST_URI_LAST_REQUEST_TS: 6
            HOST_MIGRATION_STATUS: HOST_MIGRATION_STATUS
            INSTRUMENT_SOURCE_STREAMING: INSTRUMENT_SOURCE_STREAMING
            LAST_SEEN_ON_HARDCODED_TS: 6
            INSTRUMENT_TRADE_SPOT_IS_READY_FOR_STREAMING_INTEGRATION: false
            FIRST_SEEN_ON_FIX_TS: 6
            FIRST_TRADE_SPOT_FROM_GO: "{}"
      properties:
        Data:
          additionalProperties:
            $ref: '#/components/schemas/SPOT_INSTRUMENT_METADATA'
          type: object
        Err:
          $ref: '#/components/schemas/SPOT_INSTRUMENT_MARKET_DATA_RESPONSE_Err'
      type: object
    SPOT_INSTRUMENT_TRADE:
      example:
        QUOTE: QUOTE
        RECEIVED_TIMESTAMP: 5
        MARKET: MARKET
        MAPPED_INSTRUMENT: MAPPED_INSTRUMENT
        PRICE: 6
        QUANTITY: 1
        RECEIVED_TIMESTAMP_NS: 2
        QUOTE_QUANTITY: 5
        TIMESTAMP_NS: 9
        BASE: BASE
        CCSEQ: 0
        INSTRUMENT: INSTRUMENT
        SIDE: SIDE
        TIMESTAMP: 7
        SOURCE: SOURCE
        ID: ID
        TYPE: TYPE
      properties:
        BASE:
          description: The mapped from asset (base / symbol/ coin). Only available
            on instruments that have been mapped (e.g. BTC).
          type: string
        CCSEQ:
          description: "Our internal sequence number for this trade, this is unique\
            \ per market / exchange and trading pair. Should always be increasing\
            \ by 1 for each new trade we discover, not in chronological order."
          type: integer
        ID:
          description: "The trade ID as reported by the market / exchange. If the\
            \ exchange does not provide a trade ID, this will be the timestamp of\
            \ the trade + a number from 0 - 999. This preserves uniqueness, assuming\
            \ there would never be more than 999 trades in any given second."
          type: string
        INSTRUMENT:
          description: "The unmapped instrument ID as given by the exchange (e.g.\
            \ BTCUSD, BTC_USD, XBT-ZUSD, BTC-USD)."
          type: string
        MAPPED_INSTRUMENT:
          description: "The mapped instrument ID, as derived from our mapping rules.\
            \ This takes the form: \"BASE-QUOTE\". Only available on instruments that\
            \ have been mapped (e.g. BTC-USD)."
          type: string
        MARKET:
          description: "The market / exchange under consideration (e.g. Coinbase,\
            \ Kraken, etc.)."
          type: string
        PRICE:
          description: "The price in the to instrument (quote / counter symbol / coin)\
            \ of the trade. For a BTC-USD trade, this is how much was paid for one\
            \ BTC in USD. For futures, this will be the price of the contract."
          type: integer
        QUANTITY:
          description: "The volume of the trade, given in the from instrument (base\
            \ symbol / coin/ contract). For a spot BTC-USD trade, this is how much\
            \ BTC was traded at the trade price. For a futures BTCUSDPERP, this is\
            \ the BTC equivalent for the contracts traded."
          type: integer
        QUOTE:
          description: The mapped to asset (quote / counter symbol / coin). Only available
            on instruments that have been mapped (e.g. USD).
          type: string
        QUOTE_QUANTITY:
          description: "The volume of the trade, given in the to instrument (quote\
            \ / counter symbol / coin). This is equivalent to QUANTITY * PRICE. E.g.\
            \ for a BTC-USD trade, this is how much USD was paid in total for the\
            \ volume of BTC traded. For futures this is the quote currency equivalent\
            \ for the contracts traded."
          type: integer
        RECEIVED_TIMESTAMP:
          description: The timestamp in seconds that the trade was received. This
            varies from the trade taking place on the market by a few millisconds
            to a few seconds depending on the market / exchange API options / rate
            limits.
          type: integer
        RECEIVED_TIMESTAMP_NS:
          description: The nanosecond part of the received timestamp.
          type: integer
        SIDE:
          description: "The side of the trade: SELL, BUY or UNKNOWN. If the exchange\
            \ / api does not provide a side, \"UNKNOWN\" will be returned."
          type: string
        SOURCE:
          description: "The source of the trade update: POLLING, STREAMING, GO, BLOB\
            \ etc."
          type: string
        TIMESTAMP:
          description: The timestamp in seconds as reported by the market / exchange
            or the received timestamp if the market / exchange does not provide one.
          type: integer
        TIMESTAMP_NS:
          description: The nanosecond part of the reported timestamp.
          type: integer
        TYPE:
          description: The type of the message.
          type: string
      type: object
    SPOT_INSTRUMENT_TRADE_RESPONSE:
      example:
        Err: "{}"
        Data:
        - QUOTE: QUOTE
          RECEIVED_TIMESTAMP: 5
          MARKET: MARKET
          MAPPED_INSTRUMENT: MAPPED_INSTRUMENT
          PRICE: 6
          QUANTITY: 1
          RECEIVED_TIMESTAMP_NS: 2
          QUOTE_QUANTITY: 5
          TIMESTAMP_NS: 9
          BASE: BASE
          CCSEQ: 0
          INSTRUMENT: INSTRUMENT
          SIDE: SIDE
          TIMESTAMP: 7
          SOURCE: SOURCE
          ID: ID
          TYPE: TYPE
        - QUOTE: QUOTE
          RECEIVED_TIMESTAMP: 5
          MARKET: MARKET
          MAPPED_INSTRUMENT: MAPPED_INSTRUMENT
          PRICE: 6
          QUANTITY: 1
          RECEIVED_TIMESTAMP_NS: 2
          QUOTE_QUANTITY: 5
          TIMESTAMP_NS: 9
          BASE: BASE
          CCSEQ: 0
          INSTRUMENT: INSTRUMENT
          SIDE: SIDE
          TIMESTAMP: 7
          SOURCE: SOURCE
          ID: ID
          TYPE: TYPE
      properties:
        Data:
          items:
            $ref: '#/components/schemas/SPOT_INSTRUMENT_TRADE'
          type: array
        Err:
          properties: {}
          type: object
      type: object
    Error_Err_other_info:
      properties:
        param:
          description: The parameter that is resposible for the error
          example: market
          type: string
        values:
          description: The values resposible for the error
          example:
          - test_market_does_not_exist
          items:
            type: string
          type: array
      type: object
    Error_Err:
      properties:
        message:
          description: A message describing the error
          example: "Not found: market parameter. Value test_market_does_not_exist\
            \ not integrated yet. We list all markets in lowercase and transform the\
            \ parameter sent, make sure you check the https://data-api.cryptocompare.com/spot/v1/markets\
            \ endpoint for a list of all the supported TRADE_SPOT markets"
          type: string
        other_info:
          $ref: '#/components/schemas/Error_Err_other_info'
        type:
          description: A public facing error type. If you want to treat a specific
            error use the type.
          example: 1
          format: int32
          type: integer
      type: object
    GENERIC_RESPONSE_Data:
      example:
        NO_DATA: Please add a ResponseObject on the endpoint!
      properties:
        NO_DATA:
          description: The endpoint does not have a reponse defined
          example: Please add a ResponseObject on the endpoint!
          type: string
      type: object
    SPOT_INSTRUMENT_MARKET_DATA_RESPONSE_Err_other_info:
      example:
        param: instruments
        values:
        - INSTRUMENT-DOES-NOT-EXIST
      properties:
        param:
          description: The parameter that is resposible for the error
          example: instruments
          type: string
        values:
          description: The values resposible for the error
          example:
          - INSTRUMENT-DOES-NOT-EXIST
          items:
            type: string
          type: array
      type: object
    SPOT_INSTRUMENT_MARKET_DATA_RESPONSE_Err:
      example:
        other_info:
          param: instruments
          values:
          - INSTRUMENT-DOES-NOT-EXIST
        message: "Not found: instruments parameter. One or multiple instruments on\
          \ coinbase not integrated yet or not supported. Instruments are case sensitive,\
          \ make sure you check the https://data-api.cryptocompare.com/spot/v1/markets/instruments\
          \ endpoint for a list of all the supported TRADE_SPOT market and instrument\
          \ combinations. Invalid instruments: INSTRUMENT-DOES-NOT-EXIST"
        type: 1
      properties:
        message:
          description: A message describing the error
          example: "Not found: instruments parameter. One or multiple instruments\
            \ on coinbase not integrated yet or not supported. Instruments are case\
            \ sensitive, make sure you check the https://data-api.cryptocompare.com/spot/v1/markets/instruments\
            \ endpoint for a list of all the supported TRADE_SPOT market and instrument\
            \ combinations. Invalid instruments: INSTRUMENT-DOES-NOT-EXIST"
          type: string
        other_info:
          $ref: '#/components/schemas/SPOT_INSTRUMENT_MARKET_DATA_RESPONSE_Err_other_info'
        type:
          description: A public facing error type. If you want to treat a specific
            error use the type.
          example: 1
          format: int32
          type: integer
      type: object
  securitySchemes:
    api_key_header:
      description: "If there is a header authorization: Apikey <api key value> or\
        \ authorization: Basic <api key value> this will overwrite the cookie and\
        \ the api_key"
      in: header
      name: authorization
      type: apiKey
    api_key_query:
      description: If there is a query api_key it will overwrite the cookie value
      in: query
      name: api_key
      type: apiKey

