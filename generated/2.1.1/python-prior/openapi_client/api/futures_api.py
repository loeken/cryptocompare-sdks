"""
    CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry

    CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.  # noqa: E501

    The version of the OpenAPI document: 2.1.1
    Contact: data@cryptocompare.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.error import Error
from openapi_client.model.genericresponse import GENERICRESPONSE


class FuturesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.futures_v1_historical_days_endpoint = _Endpoint(
            settings={
                'response_type': (GENERICRESPONSE,),
                'auth': [],
                'endpoint_path': '/futures/v1/historical/days',
                'operation_id': 'futures_v1_historical_days',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'market',
                    'instrument',
                    'groups',
                    'limit',
                    'to_ts',
                    'aggregate',
                    'fill',
                    'mapping_priority',
                    'response_format',
                ],
                'required': [
                    'market',
                    'instrument',
                ],
                'nullable': [
                ],
                'enum': [
                    'mapping_priority',
                    'response_format',
                ],
                'validation': [
                    'market',
                    'instrument',
                    'limit',
                    'aggregate',
                ]
            },
            root_map={
                'validations': {
                    ('market',): {
                        'max_length': 30,
                        'min_length': 2,
                    },
                    ('instrument',): {
                        'max_length': 500,
                        'min_length': 1,
                    },
                    ('limit',): {

                        'inclusive_maximum': 5000,
                        'inclusive_minimum': 1,
                    },
                    ('aggregate',): {

                        'inclusive_maximum': 30,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('mapping_priority',): {

                        "MAPPED_FIRST": "CHECK_MAPPED_FIRST",
                        "UNMAPPED_FIRST": "CHECK_UNMAPPED_FIRST"
                    },
                    ('response_format',): {

                        "JSON": "JSON",
                        "CSV": "CSV"
                    },
                },
                'openapi_types': {
                    'market':
                        (str,),
                    'instrument':
                        (str,),
                    'groups':
                        ([str],),
                    'limit':
                        (int,),
                    'to_ts':
                        (int,),
                    'aggregate':
                        (int,),
                    'fill':
                        (bool,),
                    'mapping_priority':
                        (str,),
                    'response_format':
                        (str,),
                },
                'attribute_map': {
                    'market': 'market',
                    'instrument': 'instrument',
                    'groups': 'groups',
                    'limit': 'limit',
                    'to_ts': 'to_ts',
                    'aggregate': 'aggregate',
                    'fill': 'fill',
                    'mapping_priority': 'mapping_priority',
                    'response_format': 'response_format',
                },
                'location_map': {
                    'market': 'query',
                    'instrument': 'query',
                    'groups': 'query',
                    'limit': 'query',
                    'to_ts': 'query',
                    'aggregate': 'query',
                    'fill': 'query',
                    'mapping_priority': 'query',
                    'response_format': 'query',
                },
                'collection_format_map': {
                    'groups': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.futures_v1_historical_funding_rate_days_endpoint = _Endpoint(
            settings={
                'response_type': (GENERICRESPONSE,),
                'auth': [],
                'endpoint_path': '/futures/v1/historical/funding-rate/days',
                'operation_id': 'futures_v1_historical_funding_rate_days',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'market',
                    'instrument',
                    'groups',
                    'limit',
                    'to_ts',
                    'aggregate',
                    'fill',
                    'mapping_priority',
                    'response_format',
                ],
                'required': [
                    'market',
                    'instrument',
                ],
                'nullable': [
                ],
                'enum': [
                    'mapping_priority',
                    'response_format',
                ],
                'validation': [
                    'market',
                    'instrument',
                    'limit',
                    'aggregate',
                ]
            },
            root_map={
                'validations': {
                    ('market',): {
                        'max_length': 30,
                        'min_length': 2,
                    },
                    ('instrument',): {
                        'max_length': 500,
                        'min_length': 1,
                    },
                    ('limit',): {

                        'inclusive_maximum': 5000,
                        'inclusive_minimum': 1,
                    },
                    ('aggregate',): {

                        'inclusive_maximum': 30,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('mapping_priority',): {

                        "MAPPED_FIRST": "CHECK_MAPPED_FIRST",
                        "UNMAPPED_FIRST": "CHECK_UNMAPPED_FIRST"
                    },
                    ('response_format',): {

                        "JSON": "JSON",
                        "CSV": "CSV"
                    },
                },
                'openapi_types': {
                    'market':
                        (str,),
                    'instrument':
                        (str,),
                    'groups':
                        ([str],),
                    'limit':
                        (int,),
                    'to_ts':
                        (int,),
                    'aggregate':
                        (int,),
                    'fill':
                        (bool,),
                    'mapping_priority':
                        (str,),
                    'response_format':
                        (str,),
                },
                'attribute_map': {
                    'market': 'market',
                    'instrument': 'instrument',
                    'groups': 'groups',
                    'limit': 'limit',
                    'to_ts': 'to_ts',
                    'aggregate': 'aggregate',
                    'fill': 'fill',
                    'mapping_priority': 'mapping_priority',
                    'response_format': 'response_format',
                },
                'location_map': {
                    'market': 'query',
                    'instrument': 'query',
                    'groups': 'query',
                    'limit': 'query',
                    'to_ts': 'query',
                    'aggregate': 'query',
                    'fill': 'query',
                    'mapping_priority': 'query',
                    'response_format': 'query',
                },
                'collection_format_map': {
                    'groups': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.futures_v1_historical_funding_rate_hours_endpoint = _Endpoint(
            settings={
                'response_type': (GENERICRESPONSE,),
                'auth': [],
                'endpoint_path': '/futures/v1/historical/funding-rate/hours',
                'operation_id': 'futures_v1_historical_funding_rate_hours',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'market',
                    'instrument',
                    'groups',
                    'limit',
                    'to_ts',
                    'aggregate',
                    'fill',
                    'mapping_priority',
                    'response_format',
                ],
                'required': [
                    'market',
                    'instrument',
                ],
                'nullable': [
                ],
                'enum': [
                    'mapping_priority',
                    'response_format',
                ],
                'validation': [
                    'market',
                    'instrument',
                    'limit',
                    'aggregate',
                ]
            },
            root_map={
                'validations': {
                    ('market',): {
                        'max_length': 30,
                        'min_length': 2,
                    },
                    ('instrument',): {
                        'max_length': 500,
                        'min_length': 1,
                    },
                    ('limit',): {

                        'inclusive_maximum': 2000,
                        'inclusive_minimum': 1,
                    },
                    ('aggregate',): {

                        'inclusive_maximum': 30,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('mapping_priority',): {

                        "MAPPED_FIRST": "CHECK_MAPPED_FIRST",
                        "UNMAPPED_FIRST": "CHECK_UNMAPPED_FIRST"
                    },
                    ('response_format',): {

                        "JSON": "JSON",
                        "CSV": "CSV"
                    },
                },
                'openapi_types': {
                    'market':
                        (str,),
                    'instrument':
                        (str,),
                    'groups':
                        ([str],),
                    'limit':
                        (int,),
                    'to_ts':
                        (int,),
                    'aggregate':
                        (int,),
                    'fill':
                        (bool,),
                    'mapping_priority':
                        (str,),
                    'response_format':
                        (str,),
                },
                'attribute_map': {
                    'market': 'market',
                    'instrument': 'instrument',
                    'groups': 'groups',
                    'limit': 'limit',
                    'to_ts': 'to_ts',
                    'aggregate': 'aggregate',
                    'fill': 'fill',
                    'mapping_priority': 'mapping_priority',
                    'response_format': 'response_format',
                },
                'location_map': {
                    'market': 'query',
                    'instrument': 'query',
                    'groups': 'query',
                    'limit': 'query',
                    'to_ts': 'query',
                    'aggregate': 'query',
                    'fill': 'query',
                    'mapping_priority': 'query',
                    'response_format': 'query',
                },
                'collection_format_map': {
                    'groups': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.futures_v1_historical_funding_rate_messages_endpoint = _Endpoint(
            settings={
                'response_type': (GENERICRESPONSE,),
                'auth': [
                    'api_key_header',
                    'api_key_query'
                ],
                'endpoint_path': '/futures/v1/historical/funding-rate-messages',
                'operation_id': 'futures_v1_historical_funding_rate_messages',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'market',
                    'instrument',
                    'after_ts',
                    'last_ccseq',
                    'limit',
                    'mapping_priority',
                    'response_format',
                    'return_404_on_empty_response',
                ],
                'required': [
                    'market',
                    'instrument',
                ],
                'nullable': [
                ],
                'enum': [
                    'mapping_priority',
                    'response_format',
                ],
                'validation': [
                    'market',
                    'instrument',
                    'after_ts',
                    'last_ccseq',
                    'limit',
                ]
            },
            root_map={
                'validations': {
                    ('market',): {
                        'max_length': 30,
                        'min_length': 2,
                    },
                    ('instrument',): {
                        'max_length': 500,
                        'min_length': 1,
                    },
                    ('after_ts',): {

                        'inclusive_minimum': 0,
                    },
                    ('last_ccseq',): {

                        'inclusive_minimum': 0,
                    },
                    ('limit',): {

                        'inclusive_maximum': 5000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('mapping_priority',): {

                        "MAPPED_FIRST": "CHECK_MAPPED_FIRST",
                        "UNMAPPED_FIRST": "CHECK_UNMAPPED_FIRST"
                    },
                    ('response_format',): {

                        "JSON": "JSON",
                        "CSV": "CSV"
                    },
                },
                'openapi_types': {
                    'market':
                        (str,),
                    'instrument':
                        (str,),
                    'after_ts':
                        (int,),
                    'last_ccseq':
                        (int,),
                    'limit':
                        (int,),
                    'mapping_priority':
                        (str,),
                    'response_format':
                        (str,),
                    'return_404_on_empty_response':
                        (bool,),
                },
                'attribute_map': {
                    'market': 'market',
                    'instrument': 'instrument',
                    'after_ts': 'after_ts',
                    'last_ccseq': 'last_ccseq',
                    'limit': 'limit',
                    'mapping_priority': 'mapping_priority',
                    'response_format': 'response_format',
                    'return_404_on_empty_response': 'return_404_on_empty_response',
                },
                'location_map': {
                    'market': 'query',
                    'instrument': 'query',
                    'after_ts': 'query',
                    'last_ccseq': 'query',
                    'limit': 'query',
                    'mapping_priority': 'query',
                    'response_format': 'query',
                    'return_404_on_empty_response': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.futures_v1_historical_funding_rate_messages_hour_endpoint = _Endpoint(
            settings={
                'response_type': (GENERICRESPONSE,),
                'auth': [
                    'api_key_header',
                    'api_key_query'
                ],
                'endpoint_path': '/futures/v1/historical/funding-rate-messages/hour',
                'operation_id': 'futures_v1_historical_funding_rate_messages_hour',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'market',
                    'instrument',
                    'hour_ts',
                    'mapping_priority',
                    'response_format',
                    'return_404_on_empty_response',
                ],
                'required': [
                    'market',
                    'instrument',
                ],
                'nullable': [
                ],
                'enum': [
                    'mapping_priority',
                    'response_format',
                ],
                'validation': [
                    'market',
                    'instrument',
                    'hour_ts',
                ]
            },
            root_map={
                'validations': {
                    ('market',): {
                        'max_length': 30,
                        'min_length': 2,
                    },
                    ('instrument',): {
                        'max_length': 500,
                        'min_length': 1,
                    },
                    ('hour_ts',): {

                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                    ('mapping_priority',): {

                        "MAPPED_FIRST": "CHECK_MAPPED_FIRST",
                        "UNMAPPED_FIRST": "CHECK_UNMAPPED_FIRST"
                    },
                    ('response_format',): {

                        "JSON": "JSON",
                        "CSV": "CSV"
                    },
                },
                'openapi_types': {
                    'market':
                        (str,),
                    'instrument':
                        (str,),
                    'hour_ts':
                        (int,),
                    'mapping_priority':
                        (str,),
                    'response_format':
                        (str,),
                    'return_404_on_empty_response':
                        (bool,),
                },
                'attribute_map': {
                    'market': 'market',
                    'instrument': 'instrument',
                    'hour_ts': 'hour_ts',
                    'mapping_priority': 'mapping_priority',
                    'response_format': 'response_format',
                    'return_404_on_empty_response': 'return_404_on_empty_response',
                },
                'location_map': {
                    'market': 'query',
                    'instrument': 'query',
                    'hour_ts': 'query',
                    'mapping_priority': 'query',
                    'response_format': 'query',
                    'return_404_on_empty_response': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.futures_v1_historical_funding_rate_minutes_endpoint = _Endpoint(
            settings={
                'response_type': (GENERICRESPONSE,),
                'auth': [],
                'endpoint_path': '/futures/v1/historical/funding-rate/minutes',
                'operation_id': 'futures_v1_historical_funding_rate_minutes',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'market',
                    'instrument',
                    'groups',
                    'limit',
                    'to_ts',
                    'aggregate',
                    'fill',
                    'mapping_priority',
                    'response_format',
                ],
                'required': [
                    'market',
                    'instrument',
                ],
                'nullable': [
                ],
                'enum': [
                    'mapping_priority',
                    'response_format',
                ],
                'validation': [
                    'market',
                    'instrument',
                    'limit',
                    'aggregate',
                ]
            },
            root_map={
                'validations': {
                    ('market',): {
                        'max_length': 30,
                        'min_length': 2,
                    },
                    ('instrument',): {
                        'max_length': 500,
                        'min_length': 1,
                    },
                    ('limit',): {

                        'inclusive_maximum': 2000,
                        'inclusive_minimum': 1,
                    },
                    ('aggregate',): {

                        'inclusive_maximum': 30,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('mapping_priority',): {

                        "MAPPED_FIRST": "CHECK_MAPPED_FIRST",
                        "UNMAPPED_FIRST": "CHECK_UNMAPPED_FIRST"
                    },
                    ('response_format',): {

                        "JSON": "JSON",
                        "CSV": "CSV"
                    },
                },
                'openapi_types': {
                    'market':
                        (str,),
                    'instrument':
                        (str,),
                    'groups':
                        ([str],),
                    'limit':
                        (int,),
                    'to_ts':
                        (int,),
                    'aggregate':
                        (int,),
                    'fill':
                        (bool,),
                    'mapping_priority':
                        (str,),
                    'response_format':
                        (str,),
                },
                'attribute_map': {
                    'market': 'market',
                    'instrument': 'instrument',
                    'groups': 'groups',
                    'limit': 'limit',
                    'to_ts': 'to_ts',
                    'aggregate': 'aggregate',
                    'fill': 'fill',
                    'mapping_priority': 'mapping_priority',
                    'response_format': 'response_format',
                },
                'location_map': {
                    'market': 'query',
                    'instrument': 'query',
                    'groups': 'query',
                    'limit': 'query',
                    'to_ts': 'query',
                    'aggregate': 'query',
                    'fill': 'query',
                    'mapping_priority': 'query',
                    'response_format': 'query',
                },
                'collection_format_map': {
                    'groups': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.futures_v1_historical_hours_endpoint = _Endpoint(
            settings={
                'response_type': (GENERICRESPONSE,),
                'auth': [],
                'endpoint_path': '/futures/v1/historical/hours',
                'operation_id': 'futures_v1_historical_hours',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'market',
                    'instrument',
                    'groups',
                    'limit',
                    'to_ts',
                    'aggregate',
                    'fill',
                    'mapping_priority',
                    'response_format',
                ],
                'required': [
                    'market',
                    'instrument',
                ],
                'nullable': [
                ],
                'enum': [
                    'mapping_priority',
                    'response_format',
                ],
                'validation': [
                    'market',
                    'instrument',
                    'limit',
                    'aggregate',
                ]
            },
            root_map={
                'validations': {
                    ('market',): {
                        'max_length': 30,
                        'min_length': 2,
                    },
                    ('instrument',): {
                        'max_length': 500,
                        'min_length': 1,
                    },
                    ('limit',): {

                        'inclusive_maximum': 2000,
                        'inclusive_minimum': 1,
                    },
                    ('aggregate',): {

                        'inclusive_maximum': 30,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('mapping_priority',): {

                        "MAPPED_FIRST": "CHECK_MAPPED_FIRST",
                        "UNMAPPED_FIRST": "CHECK_UNMAPPED_FIRST"
                    },
                    ('response_format',): {

                        "JSON": "JSON",
                        "CSV": "CSV"
                    },
                },
                'openapi_types': {
                    'market':
                        (str,),
                    'instrument':
                        (str,),
                    'groups':
                        ([str],),
                    'limit':
                        (int,),
                    'to_ts':
                        (int,),
                    'aggregate':
                        (int,),
                    'fill':
                        (bool,),
                    'mapping_priority':
                        (str,),
                    'response_format':
                        (str,),
                },
                'attribute_map': {
                    'market': 'market',
                    'instrument': 'instrument',
                    'groups': 'groups',
                    'limit': 'limit',
                    'to_ts': 'to_ts',
                    'aggregate': 'aggregate',
                    'fill': 'fill',
                    'mapping_priority': 'mapping_priority',
                    'response_format': 'response_format',
                },
                'location_map': {
                    'market': 'query',
                    'instrument': 'query',
                    'groups': 'query',
                    'limit': 'query',
                    'to_ts': 'query',
                    'aggregate': 'query',
                    'fill': 'query',
                    'mapping_priority': 'query',
                    'response_format': 'query',
                },
                'collection_format_map': {
                    'groups': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.futures_v1_historical_minutes_endpoint = _Endpoint(
            settings={
                'response_type': (GENERICRESPONSE,),
                'auth': [],
                'endpoint_path': '/futures/v1/historical/minutes',
                'operation_id': 'futures_v1_historical_minutes',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'market',
                    'instrument',
                    'groups',
                    'limit',
                    'to_ts',
                    'aggregate',
                    'fill',
                    'mapping_priority',
                    'response_format',
                ],
                'required': [
                    'market',
                    'instrument',
                ],
                'nullable': [
                ],
                'enum': [
                    'mapping_priority',
                    'response_format',
                ],
                'validation': [
                    'market',
                    'instrument',
                    'limit',
                    'aggregate',
                ]
            },
            root_map={
                'validations': {
                    ('market',): {
                        'max_length': 30,
                        'min_length': 2,
                    },
                    ('instrument',): {
                        'max_length': 500,
                        'min_length': 1,
                    },
                    ('limit',): {

                        'inclusive_maximum': 2000,
                        'inclusive_minimum': 1,
                    },
                    ('aggregate',): {

                        'inclusive_maximum': 30,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('mapping_priority',): {

                        "MAPPED_FIRST": "CHECK_MAPPED_FIRST",
                        "UNMAPPED_FIRST": "CHECK_UNMAPPED_FIRST"
                    },
                    ('response_format',): {

                        "JSON": "JSON",
                        "CSV": "CSV"
                    },
                },
                'openapi_types': {
                    'market':
                        (str,),
                    'instrument':
                        (str,),
                    'groups':
                        ([str],),
                    'limit':
                        (int,),
                    'to_ts':
                        (int,),
                    'aggregate':
                        (int,),
                    'fill':
                        (bool,),
                    'mapping_priority':
                        (str,),
                    'response_format':
                        (str,),
                },
                'attribute_map': {
                    'market': 'market',
                    'instrument': 'instrument',
                    'groups': 'groups',
                    'limit': 'limit',
                    'to_ts': 'to_ts',
                    'aggregate': 'aggregate',
                    'fill': 'fill',
                    'mapping_priority': 'mapping_priority',
                    'response_format': 'response_format',
                },
                'location_map': {
                    'market': 'query',
                    'instrument': 'query',
                    'groups': 'query',
                    'limit': 'query',
                    'to_ts': 'query',
                    'aggregate': 'query',
                    'fill': 'query',
                    'mapping_priority': 'query',
                    'response_format': 'query',
                },
                'collection_format_map': {
                    'groups': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.futures_v1_historical_open_interest_days_endpoint = _Endpoint(
            settings={
                'response_type': (GENERICRESPONSE,),
                'auth': [],
                'endpoint_path': '/futures/v1/historical/open-interest/days',
                'operation_id': 'futures_v1_historical_open_interest_days',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'market',
                    'instrument',
                    'groups',
                    'limit',
                    'to_ts',
                    'aggregate',
                    'fill',
                    'mapping_priority',
                    'response_format',
                ],
                'required': [
                    'market',
                    'instrument',
                ],
                'nullable': [
                ],
                'enum': [
                    'mapping_priority',
                    'response_format',
                ],
                'validation': [
                    'market',
                    'instrument',
                    'limit',
                    'aggregate',
                ]
            },
            root_map={
                'validations': {
                    ('market',): {
                        'max_length': 30,
                        'min_length': 2,
                    },
                    ('instrument',): {
                        'max_length': 500,
                        'min_length': 1,
                    },
                    ('limit',): {

                        'inclusive_maximum': 5000,
                        'inclusive_minimum': 1,
                    },
                    ('aggregate',): {

                        'inclusive_maximum': 30,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('mapping_priority',): {

                        "MAPPED_FIRST": "CHECK_MAPPED_FIRST",
                        "UNMAPPED_FIRST": "CHECK_UNMAPPED_FIRST"
                    },
                    ('response_format',): {

                        "JSON": "JSON",
                        "CSV": "CSV"
                    },
                },
                'openapi_types': {
                    'market':
                        (str,),
                    'instrument':
                        (str,),
                    'groups':
                        ([str],),
                    'limit':
                        (int,),
                    'to_ts':
                        (int,),
                    'aggregate':
                        (int,),
                    'fill':
                        (bool,),
                    'mapping_priority':
                        (str,),
                    'response_format':
                        (str,),
                },
                'attribute_map': {
                    'market': 'market',
                    'instrument': 'instrument',
                    'groups': 'groups',
                    'limit': 'limit',
                    'to_ts': 'to_ts',
                    'aggregate': 'aggregate',
                    'fill': 'fill',
                    'mapping_priority': 'mapping_priority',
                    'response_format': 'response_format',
                },
                'location_map': {
                    'market': 'query',
                    'instrument': 'query',
                    'groups': 'query',
                    'limit': 'query',
                    'to_ts': 'query',
                    'aggregate': 'query',
                    'fill': 'query',
                    'mapping_priority': 'query',
                    'response_format': 'query',
                },
                'collection_format_map': {
                    'groups': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.futures_v1_historical_open_interest_hours_endpoint = _Endpoint(
            settings={
                'response_type': (GENERICRESPONSE,),
                'auth': [],
                'endpoint_path': '/futures/v1/historical/open-interest/hours',
                'operation_id': 'futures_v1_historical_open_interest_hours',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'market',
                    'instrument',
                    'groups',
                    'limit',
                    'to_ts',
                    'aggregate',
                    'fill',
                    'mapping_priority',
                    'response_format',
                ],
                'required': [
                    'market',
                    'instrument',
                ],
                'nullable': [
                ],
                'enum': [
                    'mapping_priority',
                    'response_format',
                ],
                'validation': [
                    'market',
                    'instrument',
                    'limit',
                    'aggregate',
                ]
            },
            root_map={
                'validations': {
                    ('market',): {
                        'max_length': 30,
                        'min_length': 2,
                    },
                    ('instrument',): {
                        'max_length': 500,
                        'min_length': 1,
                    },
                    ('limit',): {

                        'inclusive_maximum': 2000,
                        'inclusive_minimum': 1,
                    },
                    ('aggregate',): {

                        'inclusive_maximum': 30,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('mapping_priority',): {

                        "MAPPED_FIRST": "CHECK_MAPPED_FIRST",
                        "UNMAPPED_FIRST": "CHECK_UNMAPPED_FIRST"
                    },
                    ('response_format',): {

                        "JSON": "JSON",
                        "CSV": "CSV"
                    },
                },
                'openapi_types': {
                    'market':
                        (str,),
                    'instrument':
                        (str,),
                    'groups':
                        ([str],),
                    'limit':
                        (int,),
                    'to_ts':
                        (int,),
                    'aggregate':
                        (int,),
                    'fill':
                        (bool,),
                    'mapping_priority':
                        (str,),
                    'response_format':
                        (str,),
                },
                'attribute_map': {
                    'market': 'market',
                    'instrument': 'instrument',
                    'groups': 'groups',
                    'limit': 'limit',
                    'to_ts': 'to_ts',
                    'aggregate': 'aggregate',
                    'fill': 'fill',
                    'mapping_priority': 'mapping_priority',
                    'response_format': 'response_format',
                },
                'location_map': {
                    'market': 'query',
                    'instrument': 'query',
                    'groups': 'query',
                    'limit': 'query',
                    'to_ts': 'query',
                    'aggregate': 'query',
                    'fill': 'query',
                    'mapping_priority': 'query',
                    'response_format': 'query',
                },
                'collection_format_map': {
                    'groups': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.futures_v1_historical_open_interest_messages_endpoint = _Endpoint(
            settings={
                'response_type': (GENERICRESPONSE,),
                'auth': [
                    'api_key_header',
                    'api_key_query'
                ],
                'endpoint_path': '/futures/v1/historical/open-interest-messages',
                'operation_id': 'futures_v1_historical_open_interest_messages',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'market',
                    'instrument',
                    'after_ts',
                    'last_ccseq',
                    'limit',
                    'mapping_priority',
                    'response_format',
                    'return_404_on_empty_response',
                ],
                'required': [
                    'market',
                    'instrument',
                ],
                'nullable': [
                ],
                'enum': [
                    'mapping_priority',
                    'response_format',
                ],
                'validation': [
                    'market',
                    'instrument',
                    'after_ts',
                    'last_ccseq',
                    'limit',
                ]
            },
            root_map={
                'validations': {
                    ('market',): {
                        'max_length': 30,
                        'min_length': 2,
                    },
                    ('instrument',): {
                        'max_length': 500,
                        'min_length': 1,
                    },
                    ('after_ts',): {

                        'inclusive_minimum': 0,
                    },
                    ('last_ccseq',): {

                        'inclusive_minimum': 0,
                    },
                    ('limit',): {

                        'inclusive_maximum': 5000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('mapping_priority',): {

                        "MAPPED_FIRST": "CHECK_MAPPED_FIRST",
                        "UNMAPPED_FIRST": "CHECK_UNMAPPED_FIRST"
                    },
                    ('response_format',): {

                        "JSON": "JSON",
                        "CSV": "CSV"
                    },
                },
                'openapi_types': {
                    'market':
                        (str,),
                    'instrument':
                        (str,),
                    'after_ts':
                        (int,),
                    'last_ccseq':
                        (int,),
                    'limit':
                        (int,),
                    'mapping_priority':
                        (str,),
                    'response_format':
                        (str,),
                    'return_404_on_empty_response':
                        (bool,),
                },
                'attribute_map': {
                    'market': 'market',
                    'instrument': 'instrument',
                    'after_ts': 'after_ts',
                    'last_ccseq': 'last_ccseq',
                    'limit': 'limit',
                    'mapping_priority': 'mapping_priority',
                    'response_format': 'response_format',
                    'return_404_on_empty_response': 'return_404_on_empty_response',
                },
                'location_map': {
                    'market': 'query',
                    'instrument': 'query',
                    'after_ts': 'query',
                    'last_ccseq': 'query',
                    'limit': 'query',
                    'mapping_priority': 'query',
                    'response_format': 'query',
                    'return_404_on_empty_response': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.futures_v1_historical_open_interest_messages_hour_endpoint = _Endpoint(
            settings={
                'response_type': (GENERICRESPONSE,),
                'auth': [
                    'api_key_header',
                    'api_key_query'
                ],
                'endpoint_path': '/futures/v1/historical/open-interest-messages/hour',
                'operation_id': 'futures_v1_historical_open_interest_messages_hour',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'market',
                    'instrument',
                    'hour_ts',
                    'mapping_priority',
                    'response_format',
                    'return_404_on_empty_response',
                ],
                'required': [
                    'market',
                    'instrument',
                ],
                'nullable': [
                ],
                'enum': [
                    'mapping_priority',
                    'response_format',
                ],
                'validation': [
                    'market',
                    'instrument',
                    'hour_ts',
                ]
            },
            root_map={
                'validations': {
                    ('market',): {
                        'max_length': 30,
                        'min_length': 2,
                    },
                    ('instrument',): {
                        'max_length': 500,
                        'min_length': 1,
                    },
                    ('hour_ts',): {

                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                    ('mapping_priority',): {

                        "MAPPED_FIRST": "CHECK_MAPPED_FIRST",
                        "UNMAPPED_FIRST": "CHECK_UNMAPPED_FIRST"
                    },
                    ('response_format',): {

                        "JSON": "JSON",
                        "CSV": "CSV"
                    },
                },
                'openapi_types': {
                    'market':
                        (str,),
                    'instrument':
                        (str,),
                    'hour_ts':
                        (int,),
                    'mapping_priority':
                        (str,),
                    'response_format':
                        (str,),
                    'return_404_on_empty_response':
                        (bool,),
                },
                'attribute_map': {
                    'market': 'market',
                    'instrument': 'instrument',
                    'hour_ts': 'hour_ts',
                    'mapping_priority': 'mapping_priority',
                    'response_format': 'response_format',
                    'return_404_on_empty_response': 'return_404_on_empty_response',
                },
                'location_map': {
                    'market': 'query',
                    'instrument': 'query',
                    'hour_ts': 'query',
                    'mapping_priority': 'query',
                    'response_format': 'query',
                    'return_404_on_empty_response': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.futures_v1_historical_open_interest_minutes_endpoint = _Endpoint(
            settings={
                'response_type': (GENERICRESPONSE,),
                'auth': [],
                'endpoint_path': '/futures/v1/historical/open-interest/minutes',
                'operation_id': 'futures_v1_historical_open_interest_minutes',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'market',
                    'instrument',
                    'groups',
                    'limit',
                    'to_ts',
                    'aggregate',
                    'fill',
                    'mapping_priority',
                    'response_format',
                ],
                'required': [
                    'market',
                    'instrument',
                ],
                'nullable': [
                ],
                'enum': [
                    'mapping_priority',
                    'response_format',
                ],
                'validation': [
                    'market',
                    'instrument',
                    'limit',
                    'aggregate',
                ]
            },
            root_map={
                'validations': {
                    ('market',): {
                        'max_length': 30,
                        'min_length': 2,
                    },
                    ('instrument',): {
                        'max_length': 500,
                        'min_length': 1,
                    },
                    ('limit',): {

                        'inclusive_maximum': 2000,
                        'inclusive_minimum': 1,
                    },
                    ('aggregate',): {

                        'inclusive_maximum': 30,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('mapping_priority',): {

                        "MAPPED_FIRST": "CHECK_MAPPED_FIRST",
                        "UNMAPPED_FIRST": "CHECK_UNMAPPED_FIRST"
                    },
                    ('response_format',): {

                        "JSON": "JSON",
                        "CSV": "CSV"
                    },
                },
                'openapi_types': {
                    'market':
                        (str,),
                    'instrument':
                        (str,),
                    'groups':
                        ([str],),
                    'limit':
                        (int,),
                    'to_ts':
                        (int,),
                    'aggregate':
                        (int,),
                    'fill':
                        (bool,),
                    'mapping_priority':
                        (str,),
                    'response_format':
                        (str,),
                },
                'attribute_map': {
                    'market': 'market',
                    'instrument': 'instrument',
                    'groups': 'groups',
                    'limit': 'limit',
                    'to_ts': 'to_ts',
                    'aggregate': 'aggregate',
                    'fill': 'fill',
                    'mapping_priority': 'mapping_priority',
                    'response_format': 'response_format',
                },
                'location_map': {
                    'market': 'query',
                    'instrument': 'query',
                    'groups': 'query',
                    'limit': 'query',
                    'to_ts': 'query',
                    'aggregate': 'query',
                    'fill': 'query',
                    'mapping_priority': 'query',
                    'response_format': 'query',
                },
                'collection_format_map': {
                    'groups': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.futures_v1_historical_trades_endpoint = _Endpoint(
            settings={
                'response_type': (GENERICRESPONSE,),
                'auth': [
                    'api_key_header',
                    'api_key_query'
                ],
                'endpoint_path': '/futures/v1/historical/trades',
                'operation_id': 'futures_v1_historical_trades',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'market',
                    'instrument',
                    'after_ts',
                    'last_ccseq',
                    'limit',
                    'mapping_priority',
                    'response_format',
                    'return_404_on_empty_response',
                ],
                'required': [
                    'market',
                    'instrument',
                ],
                'nullable': [
                ],
                'enum': [
                    'mapping_priority',
                    'response_format',
                ],
                'validation': [
                    'market',
                    'instrument',
                    'after_ts',
                    'last_ccseq',
                    'limit',
                ]
            },
            root_map={
                'validations': {
                    ('market',): {
                        'max_length': 30,
                        'min_length': 2,
                    },
                    ('instrument',): {
                        'max_length': 500,
                        'min_length': 1,
                    },
                    ('after_ts',): {

                        'inclusive_minimum': 0,
                    },
                    ('last_ccseq',): {

                        'inclusive_minimum': 0,
                    },
                    ('limit',): {

                        'inclusive_maximum': 5000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('mapping_priority',): {

                        "MAPPED_FIRST": "CHECK_MAPPED_FIRST",
                        "UNMAPPED_FIRST": "CHECK_UNMAPPED_FIRST"
                    },
                    ('response_format',): {

                        "JSON": "JSON",
                        "CSV": "CSV"
                    },
                },
                'openapi_types': {
                    'market':
                        (str,),
                    'instrument':
                        (str,),
                    'after_ts':
                        (int,),
                    'last_ccseq':
                        (int,),
                    'limit':
                        (int,),
                    'mapping_priority':
                        (str,),
                    'response_format':
                        (str,),
                    'return_404_on_empty_response':
                        (bool,),
                },
                'attribute_map': {
                    'market': 'market',
                    'instrument': 'instrument',
                    'after_ts': 'after_ts',
                    'last_ccseq': 'last_ccseq',
                    'limit': 'limit',
                    'mapping_priority': 'mapping_priority',
                    'response_format': 'response_format',
                    'return_404_on_empty_response': 'return_404_on_empty_response',
                },
                'location_map': {
                    'market': 'query',
                    'instrument': 'query',
                    'after_ts': 'query',
                    'last_ccseq': 'query',
                    'limit': 'query',
                    'mapping_priority': 'query',
                    'response_format': 'query',
                    'return_404_on_empty_response': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.futures_v1_historical_trades_hour_endpoint = _Endpoint(
            settings={
                'response_type': (GENERICRESPONSE,),
                'auth': [
                    'api_key_header',
                    'api_key_query'
                ],
                'endpoint_path': '/futures/v1/historical/trades/hour',
                'operation_id': 'futures_v1_historical_trades_hour',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'market',
                    'instrument',
                    'hour_ts',
                    'mapping_priority',
                    'response_format',
                    'return_404_on_empty_response',
                ],
                'required': [
                    'market',
                    'instrument',
                ],
                'nullable': [
                ],
                'enum': [
                    'mapping_priority',
                    'response_format',
                ],
                'validation': [
                    'market',
                    'instrument',
                    'hour_ts',
                ]
            },
            root_map={
                'validations': {
                    ('market',): {
                        'max_length': 30,
                        'min_length': 2,
                    },
                    ('instrument',): {
                        'max_length': 500,
                        'min_length': 1,
                    },
                    ('hour_ts',): {

                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                    ('mapping_priority',): {

                        "MAPPED_FIRST": "CHECK_MAPPED_FIRST",
                        "UNMAPPED_FIRST": "CHECK_UNMAPPED_FIRST"
                    },
                    ('response_format',): {

                        "JSON": "JSON",
                        "CSV": "CSV"
                    },
                },
                'openapi_types': {
                    'market':
                        (str,),
                    'instrument':
                        (str,),
                    'hour_ts':
                        (int,),
                    'mapping_priority':
                        (str,),
                    'response_format':
                        (str,),
                    'return_404_on_empty_response':
                        (bool,),
                },
                'attribute_map': {
                    'market': 'market',
                    'instrument': 'instrument',
                    'hour_ts': 'hour_ts',
                    'mapping_priority': 'mapping_priority',
                    'response_format': 'response_format',
                    'return_404_on_empty_response': 'return_404_on_empty_response',
                },
                'location_map': {
                    'market': 'query',
                    'instrument': 'query',
                    'hour_ts': 'query',
                    'mapping_priority': 'query',
                    'response_format': 'query',
                    'return_404_on_empty_response': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.futures_v1_latest_funding_rate_tick_endpoint = _Endpoint(
            settings={
                'response_type': (GENERICRESPONSE,),
                'auth': [],
                'endpoint_path': '/futures/v1/latest/funding-rate/tick',
                'operation_id': 'futures_v1_latest_funding_rate_tick',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'market',
                    'instruments',
                    'groups',
                    'mapping_priority',
                ],
                'required': [
                    'market',
                    'instruments',
                ],
                'nullable': [
                ],
                'enum': [
                    'mapping_priority',
                ],
                'validation': [
                    'market',
                    'instruments',
                ]
            },
            root_map={
                'validations': {
                    ('market',): {
                        'max_length': 30,
                        'min_length': 2,
                    },
                    ('instruments',): {

                        'max_items': 25,
                        'min_items': 1,
                    },
                },
                'allowed_values': {
                    ('mapping_priority',): {

                        "MAPPED_FIRST": "CHECK_MAPPED_FIRST",
                        "UNMAPPED_FIRST": "CHECK_UNMAPPED_FIRST"
                    },
                },
                'openapi_types': {
                    'market':
                        (str,),
                    'instruments':
                        ([str],),
                    'groups':
                        ([str],),
                    'mapping_priority':
                        (str,),
                },
                'attribute_map': {
                    'market': 'market',
                    'instruments': 'instruments',
                    'groups': 'groups',
                    'mapping_priority': 'mapping_priority',
                },
                'location_map': {
                    'market': 'query',
                    'instruments': 'query',
                    'groups': 'query',
                    'mapping_priority': 'query',
                },
                'collection_format_map': {
                    'instruments': 'csv',
                    'groups': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.futures_v1_latest_instrument_metadata_endpoint = _Endpoint(
            settings={
                'response_type': (GENERICRESPONSE,),
                'auth': [],
                'endpoint_path': '/futures/v1/latest/instrument/metadata',
                'operation_id': 'futures_v1_latest_instrument_metadata',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'market',
                    'instruments',
                    'groups',
                    'mapping_priority',
                ],
                'required': [
                    'market',
                    'instruments',
                ],
                'nullable': [
                ],
                'enum': [
                    'mapping_priority',
                ],
                'validation': [
                    'market',
                    'instruments',
                ]
            },
            root_map={
                'validations': {
                    ('market',): {
                        'max_length': 30,
                        'min_length': 2,
                    },
                    ('instruments',): {

                        'max_items': 25,
                        'min_items': 1,
                    },
                },
                'allowed_values': {
                    ('mapping_priority',): {

                        "MAPPED_FIRST": "CHECK_MAPPED_FIRST",
                        "UNMAPPED_FIRST": "CHECK_UNMAPPED_FIRST"
                    },
                },
                'openapi_types': {
                    'market':
                        (str,),
                    'instruments':
                        ([str],),
                    'groups':
                        ([str],),
                    'mapping_priority':
                        (str,),
                },
                'attribute_map': {
                    'market': 'market',
                    'instruments': 'instruments',
                    'groups': 'groups',
                    'mapping_priority': 'mapping_priority',
                },
                'location_map': {
                    'market': 'query',
                    'instruments': 'query',
                    'groups': 'query',
                    'mapping_priority': 'query',
                },
                'collection_format_map': {
                    'instruments': 'csv',
                    'groups': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.futures_v1_latest_open_interest_tick_endpoint = _Endpoint(
            settings={
                'response_type': (GENERICRESPONSE,),
                'auth': [],
                'endpoint_path': '/futures/v1/latest/open-interest/tick',
                'operation_id': 'futures_v1_latest_open_interest_tick',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'market',
                    'instruments',
                    'groups',
                    'mapping_priority',
                ],
                'required': [
                    'market',
                    'instruments',
                ],
                'nullable': [
                ],
                'enum': [
                    'mapping_priority',
                ],
                'validation': [
                    'market',
                    'instruments',
                ]
            },
            root_map={
                'validations': {
                    ('market',): {
                        'max_length': 30,
                        'min_length': 2,
                    },
                    ('instruments',): {

                        'max_items': 25,
                        'min_items': 1,
                    },
                },
                'allowed_values': {
                    ('mapping_priority',): {

                        "MAPPED_FIRST": "CHECK_MAPPED_FIRST",
                        "UNMAPPED_FIRST": "CHECK_UNMAPPED_FIRST"
                    },
                },
                'openapi_types': {
                    'market':
                        (str,),
                    'instruments':
                        ([str],),
                    'groups':
                        ([str],),
                    'mapping_priority':
                        (str,),
                },
                'attribute_map': {
                    'market': 'market',
                    'instruments': 'instruments',
                    'groups': 'groups',
                    'mapping_priority': 'mapping_priority',
                },
                'location_map': {
                    'market': 'query',
                    'instruments': 'query',
                    'groups': 'query',
                    'mapping_priority': 'query',
                },
                'collection_format_map': {
                    'instruments': 'csv',
                    'groups': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.futures_v1_latest_tick_endpoint = _Endpoint(
            settings={
                'response_type': (GENERICRESPONSE,),
                'auth': [],
                'endpoint_path': '/futures/v1/latest/tick',
                'operation_id': 'futures_v1_latest_tick',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'market',
                    'instruments',
                    'groups',
                    'mapping_priority',
                ],
                'required': [
                    'market',
                    'instruments',
                ],
                'nullable': [
                ],
                'enum': [
                    'mapping_priority',
                ],
                'validation': [
                    'market',
                    'instruments',
                ]
            },
            root_map={
                'validations': {
                    ('market',): {
                        'max_length': 30,
                        'min_length': 2,
                    },
                    ('instruments',): {

                        'max_items': 25,
                        'min_items': 1,
                    },
                },
                'allowed_values': {
                    ('mapping_priority',): {

                        "MAPPED_FIRST": "CHECK_MAPPED_FIRST",
                        "UNMAPPED_FIRST": "CHECK_UNMAPPED_FIRST"
                    },
                },
                'openapi_types': {
                    'market':
                        (str,),
                    'instruments':
                        ([str],),
                    'groups':
                        ([str],),
                    'mapping_priority':
                        (str,),
                },
                'attribute_map': {
                    'market': 'market',
                    'instruments': 'instruments',
                    'groups': 'groups',
                    'mapping_priority': 'mapping_priority',
                },
                'location_map': {
                    'market': 'query',
                    'instruments': 'query',
                    'groups': 'query',
                    'mapping_priority': 'query',
                },
                'collection_format_map': {
                    'instruments': 'csv',
                    'groups': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.futures_v1_markets_endpoint = _Endpoint(
            settings={
                'response_type': (GENERICRESPONSE,),
                'auth': [],
                'endpoint_path': '/futures/v1/markets',
                'operation_id': 'futures_v1_markets',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'market',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'market',
                ]
            },
            root_map={
                'validations': {
                    ('market',): {
                        'max_length': 30,
                        'min_length': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'market':
                        (str,),
                },
                'attribute_map': {
                    'market': 'market',
                },
                'location_map': {
                    'market': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.futures_v1_markets_instruments_endpoint = _Endpoint(
            settings={
                'response_type': (GENERICRESPONSE,),
                'auth': [],
                'endpoint_path': '/futures/v1/markets/instruments',
                'operation_id': 'futures_v1_markets_instruments',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'market',
                    'instrument',
                    'instrument_status',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'instrument_status',
                ],
                'validation': [
                    'market',
                    'instrument',
                ]
            },
            root_map={
                'validations': {
                    ('market',): {
                        'max_length': 30,
                        'min_length': 0,
                    },
                    ('instrument',): {
                        'max_length': 30,
                        'min_length': 0,
                    },
                },
                'allowed_values': {
                    ('instrument_status',): {

                        "ACTIVE": "ACTIVE",
                        "IGNORED": "IGNORED",
                        "RETIRED": "RETIRED",
                        "EXPIRED": "EXPIRED"
                    },
                },
                'openapi_types': {
                    'market':
                        (str,),
                    'instrument':
                        (str,),
                    'instrument_status':
                        ([str],),
                },
                'attribute_map': {
                    'market': 'market',
                    'instrument': 'instrument',
                    'instrument_status': 'instrument_status',
                },
                'location_map': {
                    'market': 'query',
                    'instrument': 'query',
                    'instrument_status': 'query',
                },
                'collection_format_map': {
                    'instrument_status': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.futures_v1_markets_instruments_unmapped_endpoint = _Endpoint(
            settings={
                'response_type': (GENERICRESPONSE,),
                'auth': [],
                'endpoint_path': '/futures/v1/markets/instruments/unmapped',
                'operation_id': 'futures_v1_markets_instruments_unmapped',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'market',
                    'instrument',
                    'instrument_status',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'instrument_status',
                ],
                'validation': [
                    'market',
                    'instrument',
                ]
            },
            root_map={
                'validations': {
                    ('market',): {
                        'max_length': 30,
                        'min_length': 0,
                    },
                    ('instrument',): {
                        'max_length': 30,
                        'min_length': 0,
                    },
                },
                'allowed_values': {
                    ('instrument_status',): {

                        "ACTIVE": "ACTIVE",
                        "IGNORED": "IGNORED",
                        "RETIRED": "RETIRED",
                        "EXPIRED": "EXPIRED"
                    },
                },
                'openapi_types': {
                    'market':
                        (str,),
                    'instrument':
                        (str,),
                    'instrument_status':
                        ([str],),
                },
                'attribute_map': {
                    'market': 'market',
                    'instrument': 'instrument',
                    'instrument_status': 'instrument_status',
                },
                'location_map': {
                    'market': 'query',
                    'instrument': 'query',
                    'instrument_status': 'query',
                },
                'collection_format_map': {
                    'instrument_status': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.index_v1_historical_days_endpoint = _Endpoint(
            settings={
                'response_type': (GENERICRESPONSE,),
                'auth': [],
                'endpoint_path': '/index/v1/historical/days',
                'operation_id': 'index_v1_historical_days',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'market',
                    'instrument',
                    'groups',
                    'limit',
                    'to_ts',
                    'aggregate',
                    'fill',
                    'mapping_priority',
                    'response_format',
                ],
                'required': [
                    'market',
                    'instrument',
                ],
                'nullable': [
                ],
                'enum': [
                    'mapping_priority',
                    'response_format',
                ],
                'validation': [
                    'market',
                    'instrument',
                    'limit',
                    'aggregate',
                ]
            },
            root_map={
                'validations': {
                    ('market',): {
                        'max_length': 30,
                        'min_length': 2,
                    },
                    ('instrument',): {
                        'max_length': 500,
                        'min_length': 1,
                    },
                    ('limit',): {

                        'inclusive_maximum': 5000,
                        'inclusive_minimum': 1,
                    },
                    ('aggregate',): {

                        'inclusive_maximum': 30,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('mapping_priority',): {

                        "MAPPED_FIRST": "CHECK_MAPPED_FIRST",
                        "UNMAPPED_FIRST": "CHECK_UNMAPPED_FIRST"
                    },
                    ('response_format',): {

                        "JSON": "JSON",
                        "CSV": "CSV"
                    },
                },
                'openapi_types': {
                    'market':
                        (str,),
                    'instrument':
                        (str,),
                    'groups':
                        ([str],),
                    'limit':
                        (int,),
                    'to_ts':
                        (int,),
                    'aggregate':
                        (int,),
                    'fill':
                        (bool,),
                    'mapping_priority':
                        (str,),
                    'response_format':
                        (str,),
                },
                'attribute_map': {
                    'market': 'market',
                    'instrument': 'instrument',
                    'groups': 'groups',
                    'limit': 'limit',
                    'to_ts': 'to_ts',
                    'aggregate': 'aggregate',
                    'fill': 'fill',
                    'mapping_priority': 'mapping_priority',
                    'response_format': 'response_format',
                },
                'location_map': {
                    'market': 'query',
                    'instrument': 'query',
                    'groups': 'query',
                    'limit': 'query',
                    'to_ts': 'query',
                    'aggregate': 'query',
                    'fill': 'query',
                    'mapping_priority': 'query',
                    'response_format': 'query',
                },
                'collection_format_map': {
                    'groups': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.index_v1_historical_hours_endpoint = _Endpoint(
            settings={
                'response_type': (GENERICRESPONSE,),
                'auth': [],
                'endpoint_path': '/index/v1/historical/hours',
                'operation_id': 'index_v1_historical_hours',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'market',
                    'instrument',
                    'groups',
                    'limit',
                    'to_ts',
                    'aggregate',
                    'fill',
                    'mapping_priority',
                    'response_format',
                ],
                'required': [
                    'market',
                    'instrument',
                ],
                'nullable': [
                ],
                'enum': [
                    'mapping_priority',
                    'response_format',
                ],
                'validation': [
                    'market',
                    'instrument',
                    'limit',
                    'aggregate',
                ]
            },
            root_map={
                'validations': {
                    ('market',): {
                        'max_length': 30,
                        'min_length': 2,
                    },
                    ('instrument',): {
                        'max_length': 500,
                        'min_length': 1,
                    },
                    ('limit',): {

                        'inclusive_maximum': 2000,
                        'inclusive_minimum': 1,
                    },
                    ('aggregate',): {

                        'inclusive_maximum': 30,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('mapping_priority',): {

                        "MAPPED_FIRST": "CHECK_MAPPED_FIRST",
                        "UNMAPPED_FIRST": "CHECK_UNMAPPED_FIRST"
                    },
                    ('response_format',): {

                        "JSON": "JSON",
                        "CSV": "CSV"
                    },
                },
                'openapi_types': {
                    'market':
                        (str,),
                    'instrument':
                        (str,),
                    'groups':
                        ([str],),
                    'limit':
                        (int,),
                    'to_ts':
                        (int,),
                    'aggregate':
                        (int,),
                    'fill':
                        (bool,),
                    'mapping_priority':
                        (str,),
                    'response_format':
                        (str,),
                },
                'attribute_map': {
                    'market': 'market',
                    'instrument': 'instrument',
                    'groups': 'groups',
                    'limit': 'limit',
                    'to_ts': 'to_ts',
                    'aggregate': 'aggregate',
                    'fill': 'fill',
                    'mapping_priority': 'mapping_priority',
                    'response_format': 'response_format',
                },
                'location_map': {
                    'market': 'query',
                    'instrument': 'query',
                    'groups': 'query',
                    'limit': 'query',
                    'to_ts': 'query',
                    'aggregate': 'query',
                    'fill': 'query',
                    'mapping_priority': 'query',
                    'response_format': 'query',
                },
                'collection_format_map': {
                    'groups': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.index_v1_historical_messages_endpoint = _Endpoint(
            settings={
                'response_type': (GENERICRESPONSE,),
                'auth': [
                    'api_key_header',
                    'api_key_query'
                ],
                'endpoint_path': '/index/v1/historical/messages',
                'operation_id': 'index_v1_historical_messages',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'market',
                    'instrument',
                    'after_ts',
                    'last_ccseq',
                    'limit',
                    'mapping_priority',
                    'response_format',
                    'return_404_on_empty_response',
                ],
                'required': [
                    'market',
                    'instrument',
                ],
                'nullable': [
                ],
                'enum': [
                    'mapping_priority',
                    'response_format',
                ],
                'validation': [
                    'market',
                    'instrument',
                    'after_ts',
                    'last_ccseq',
                    'limit',
                ]
            },
            root_map={
                'validations': {
                    ('market',): {
                        'max_length': 30,
                        'min_length': 2,
                    },
                    ('instrument',): {
                        'max_length': 500,
                        'min_length': 1,
                    },
                    ('after_ts',): {

                        'inclusive_minimum': 0,
                    },
                    ('last_ccseq',): {

                        'inclusive_minimum': 0,
                    },
                    ('limit',): {

                        'inclusive_maximum': 5000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('mapping_priority',): {

                        "MAPPED_FIRST": "CHECK_MAPPED_FIRST",
                        "UNMAPPED_FIRST": "CHECK_UNMAPPED_FIRST"
                    },
                    ('response_format',): {

                        "JSON": "JSON",
                        "CSV": "CSV"
                    },
                },
                'openapi_types': {
                    'market':
                        (str,),
                    'instrument':
                        (str,),
                    'after_ts':
                        (int,),
                    'last_ccseq':
                        (int,),
                    'limit':
                        (int,),
                    'mapping_priority':
                        (str,),
                    'response_format':
                        (str,),
                    'return_404_on_empty_response':
                        (bool,),
                },
                'attribute_map': {
                    'market': 'market',
                    'instrument': 'instrument',
                    'after_ts': 'after_ts',
                    'last_ccseq': 'last_ccseq',
                    'limit': 'limit',
                    'mapping_priority': 'mapping_priority',
                    'response_format': 'response_format',
                    'return_404_on_empty_response': 'return_404_on_empty_response',
                },
                'location_map': {
                    'market': 'query',
                    'instrument': 'query',
                    'after_ts': 'query',
                    'last_ccseq': 'query',
                    'limit': 'query',
                    'mapping_priority': 'query',
                    'response_format': 'query',
                    'return_404_on_empty_response': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.index_v1_historical_messages_hour_endpoint = _Endpoint(
            settings={
                'response_type': (GENERICRESPONSE,),
                'auth': [
                    'api_key_header',
                    'api_key_query'
                ],
                'endpoint_path': '/index/v1/historical/messages/hour',
                'operation_id': 'index_v1_historical_messages_hour',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'market',
                    'instrument',
                    'hour_ts',
                    'mapping_priority',
                    'response_format',
                    'return_404_on_empty_response',
                ],
                'required': [
                    'market',
                    'instrument',
                ],
                'nullable': [
                ],
                'enum': [
                    'mapping_priority',
                    'response_format',
                ],
                'validation': [
                    'market',
                    'instrument',
                    'hour_ts',
                ]
            },
            root_map={
                'validations': {
                    ('market',): {
                        'max_length': 30,
                        'min_length': 2,
                    },
                    ('instrument',): {
                        'max_length': 500,
                        'min_length': 1,
                    },
                    ('hour_ts',): {

                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                    ('mapping_priority',): {

                        "MAPPED_FIRST": "CHECK_MAPPED_FIRST",
                        "UNMAPPED_FIRST": "CHECK_UNMAPPED_FIRST"
                    },
                    ('response_format',): {

                        "JSON": "JSON",
                        "CSV": "CSV"
                    },
                },
                'openapi_types': {
                    'market':
                        (str,),
                    'instrument':
                        (str,),
                    'hour_ts':
                        (int,),
                    'mapping_priority':
                        (str,),
                    'response_format':
                        (str,),
                    'return_404_on_empty_response':
                        (bool,),
                },
                'attribute_map': {
                    'market': 'market',
                    'instrument': 'instrument',
                    'hour_ts': 'hour_ts',
                    'mapping_priority': 'mapping_priority',
                    'response_format': 'response_format',
                    'return_404_on_empty_response': 'return_404_on_empty_response',
                },
                'location_map': {
                    'market': 'query',
                    'instrument': 'query',
                    'hour_ts': 'query',
                    'mapping_priority': 'query',
                    'response_format': 'query',
                    'return_404_on_empty_response': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.index_v1_historical_minutes_endpoint = _Endpoint(
            settings={
                'response_type': (GENERICRESPONSE,),
                'auth': [],
                'endpoint_path': '/index/v1/historical/minutes',
                'operation_id': 'index_v1_historical_minutes',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'market',
                    'instrument',
                    'groups',
                    'limit',
                    'to_ts',
                    'aggregate',
                    'fill',
                    'mapping_priority',
                    'response_format',
                ],
                'required': [
                    'market',
                    'instrument',
                ],
                'nullable': [
                ],
                'enum': [
                    'mapping_priority',
                    'response_format',
                ],
                'validation': [
                    'market',
                    'instrument',
                    'limit',
                    'aggregate',
                ]
            },
            root_map={
                'validations': {
                    ('market',): {
                        'max_length': 30,
                        'min_length': 2,
                    },
                    ('instrument',): {
                        'max_length': 500,
                        'min_length': 1,
                    },
                    ('limit',): {

                        'inclusive_maximum': 2000,
                        'inclusive_minimum': 1,
                    },
                    ('aggregate',): {

                        'inclusive_maximum': 30,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('mapping_priority',): {

                        "MAPPED_FIRST": "CHECK_MAPPED_FIRST",
                        "UNMAPPED_FIRST": "CHECK_UNMAPPED_FIRST"
                    },
                    ('response_format',): {

                        "JSON": "JSON",
                        "CSV": "CSV"
                    },
                },
                'openapi_types': {
                    'market':
                        (str,),
                    'instrument':
                        (str,),
                    'groups':
                        ([str],),
                    'limit':
                        (int,),
                    'to_ts':
                        (int,),
                    'aggregate':
                        (int,),
                    'fill':
                        (bool,),
                    'mapping_priority':
                        (str,),
                    'response_format':
                        (str,),
                },
                'attribute_map': {
                    'market': 'market',
                    'instrument': 'instrument',
                    'groups': 'groups',
                    'limit': 'limit',
                    'to_ts': 'to_ts',
                    'aggregate': 'aggregate',
                    'fill': 'fill',
                    'mapping_priority': 'mapping_priority',
                    'response_format': 'response_format',
                },
                'location_map': {
                    'market': 'query',
                    'instrument': 'query',
                    'groups': 'query',
                    'limit': 'query',
                    'to_ts': 'query',
                    'aggregate': 'query',
                    'fill': 'query',
                    'mapping_priority': 'query',
                    'response_format': 'query',
                },
                'collection_format_map': {
                    'groups': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.index_v1_latest_instrument_metadata_endpoint = _Endpoint(
            settings={
                'response_type': (GENERICRESPONSE,),
                'auth': [],
                'endpoint_path': '/index/v1/latest/instrument/metadata',
                'operation_id': 'index_v1_latest_instrument_metadata',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'market',
                    'instruments',
                    'groups',
                    'mapping_priority',
                ],
                'required': [
                    'market',
                    'instruments',
                ],
                'nullable': [
                ],
                'enum': [
                    'mapping_priority',
                ],
                'validation': [
                    'market',
                    'instruments',
                ]
            },
            root_map={
                'validations': {
                    ('market',): {
                        'max_length': 30,
                        'min_length': 2,
                    },
                    ('instruments',): {

                        'max_items': 25,
                        'min_items': 1,
                    },
                },
                'allowed_values': {
                    ('mapping_priority',): {

                        "MAPPED_FIRST": "CHECK_MAPPED_FIRST",
                        "UNMAPPED_FIRST": "CHECK_UNMAPPED_FIRST"
                    },
                },
                'openapi_types': {
                    'market':
                        (str,),
                    'instruments':
                        ([str],),
                    'groups':
                        ([str],),
                    'mapping_priority':
                        (str,),
                },
                'attribute_map': {
                    'market': 'market',
                    'instruments': 'instruments',
                    'groups': 'groups',
                    'mapping_priority': 'mapping_priority',
                },
                'location_map': {
                    'market': 'query',
                    'instruments': 'query',
                    'groups': 'query',
                    'mapping_priority': 'query',
                },
                'collection_format_map': {
                    'instruments': 'csv',
                    'groups': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.index_v1_latest_tick_endpoint = _Endpoint(
            settings={
                'response_type': (GENERICRESPONSE,),
                'auth': [],
                'endpoint_path': '/index/v1/latest/tick',
                'operation_id': 'index_v1_latest_tick',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'market',
                    'instruments',
                    'groups',
                    'mapping_priority',
                ],
                'required': [
                    'market',
                    'instruments',
                ],
                'nullable': [
                ],
                'enum': [
                    'mapping_priority',
                ],
                'validation': [
                    'market',
                    'instruments',
                ]
            },
            root_map={
                'validations': {
                    ('market',): {
                        'max_length': 30,
                        'min_length': 2,
                    },
                    ('instruments',): {

                        'max_items': 25,
                        'min_items': 1,
                    },
                },
                'allowed_values': {
                    ('mapping_priority',): {

                        "MAPPED_FIRST": "CHECK_MAPPED_FIRST",
                        "UNMAPPED_FIRST": "CHECK_UNMAPPED_FIRST"
                    },
                },
                'openapi_types': {
                    'market':
                        (str,),
                    'instruments':
                        ([str],),
                    'groups':
                        ([str],),
                    'mapping_priority':
                        (str,),
                },
                'attribute_map': {
                    'market': 'market',
                    'instruments': 'instruments',
                    'groups': 'groups',
                    'mapping_priority': 'mapping_priority',
                },
                'location_map': {
                    'market': 'query',
                    'instruments': 'query',
                    'groups': 'query',
                    'mapping_priority': 'query',
                },
                'collection_format_map': {
                    'instruments': 'csv',
                    'groups': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.index_v1_markets_endpoint = _Endpoint(
            settings={
                'response_type': (GENERICRESPONSE,),
                'auth': [],
                'endpoint_path': '/index/v1/markets',
                'operation_id': 'index_v1_markets',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'market',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'market',
                ]
            },
            root_map={
                'validations': {
                    ('market',): {
                        'max_length': 30,
                        'min_length': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'market':
                        (str,),
                },
                'attribute_map': {
                    'market': 'market',
                },
                'location_map': {
                    'market': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.index_v1_markets_instruments_endpoint = _Endpoint(
            settings={
                'response_type': (GENERICRESPONSE,),
                'auth': [],
                'endpoint_path': '/index/v1/markets/instruments',
                'operation_id': 'index_v1_markets_instruments',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'market',
                    'instrument',
                    'instrument_status',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'instrument_status',
                ],
                'validation': [
                    'market',
                    'instrument',
                ]
            },
            root_map={
                'validations': {
                    ('market',): {
                        'max_length': 30,
                        'min_length': 0,
                    },
                    ('instrument',): {
                        'max_length': 30,
                        'min_length': 0,
                    },
                },
                'allowed_values': {
                    ('instrument_status',): {

                        "ACTIVE": "ACTIVE",
                        "IGNORED": "IGNORED",
                        "RETIRED": "RETIRED",
                        "EXPIRED": "EXPIRED"
                    },
                },
                'openapi_types': {
                    'market':
                        (str,),
                    'instrument':
                        (str,),
                    'instrument_status':
                        ([str],),
                },
                'attribute_map': {
                    'market': 'market',
                    'instrument': 'instrument',
                    'instrument_status': 'instrument_status',
                },
                'location_map': {
                    'market': 'query',
                    'instrument': 'query',
                    'instrument_status': 'query',
                },
                'collection_format_map': {
                    'instrument_status': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.index_v1_markets_instruments_unmapped_endpoint = _Endpoint(
            settings={
                'response_type': (GENERICRESPONSE,),
                'auth': [],
                'endpoint_path': '/index/v1/markets/instruments/unmapped',
                'operation_id': 'index_v1_markets_instruments_unmapped',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'market',
                    'instrument',
                    'instrument_status',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'instrument_status',
                ],
                'validation': [
                    'market',
                    'instrument',
                ]
            },
            root_map={
                'validations': {
                    ('market',): {
                        'max_length': 30,
                        'min_length': 0,
                    },
                    ('instrument',): {
                        'max_length': 30,
                        'min_length': 0,
                    },
                },
                'allowed_values': {
                    ('instrument_status',): {

                        "ACTIVE": "ACTIVE",
                        "IGNORED": "IGNORED",
                        "RETIRED": "RETIRED",
                        "EXPIRED": "EXPIRED"
                    },
                },
                'openapi_types': {
                    'market':
                        (str,),
                    'instrument':
                        (str,),
                    'instrument_status':
                        ([str],),
                },
                'attribute_map': {
                    'market': 'market',
                    'instrument': 'instrument',
                    'instrument_status': 'instrument_status',
                },
                'location_map': {
                    'market': 'query',
                    'instrument': 'query',
                    'instrument_status': 'query',
                },
                'collection_format_map': {
                    'instrument_status': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def futures_v1_historical_days(
        self,
        market,
        instrument,
        **kwargs
    ):
        """futures_v1_historical_days  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.futures_v1_historical_days(market, instrument, async_req=True)
        >>> result = thread.get()

        Args:
            market (str): The exchange to obtain data from
            instrument (str): The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.

        Keyword Args:
            groups ([str]): When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME. [optional] if omitted the server will use the default value of []
            limit (int): The number of data points to return. [optional] if omitted the server will use the default value of 30
            to_ts (int): Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}. [optional]
            aggregate (int): The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries. [optional] if omitted the server will use the default value of 1
            fill (bool): Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.. [optional] if omitted the server will use the default value of True
            mapping_priority (str): The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST. [optional] if omitted the server will use the default value of "CHECK_MAPPED_FIRST"
            response_format (str): The format of the data response in uppercase. It can be one of the following: JSON,CSV. [optional] if omitted the server will use the default value of "JSON"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GENERICRESPONSE
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['market'] = \
            market
        kwargs['instrument'] = \
            instrument
        return self.futures_v1_historical_days_endpoint.call_with_http_info(**kwargs)

    def futures_v1_historical_funding_rate_days(
        self,
        market,
        instrument,
        **kwargs
    ):
        """futures_v1_historical_funding_rate_days  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.futures_v1_historical_funding_rate_days(market, instrument, async_req=True)
        >>> result = thread.get()

        Args:
            market (str): The exchange to obtain data from
            instrument (str): The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.

        Keyword Args:
            groups ([str]): When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,OHLC,OHLC_MESSAGE,MESSAGE. [optional] if omitted the server will use the default value of []
            limit (int): The number of data points to return. [optional] if omitted the server will use the default value of 30
            to_ts (int): Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}. [optional]
            aggregate (int): The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries. [optional] if omitted the server will use the default value of 1
            fill (bool): Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.. [optional] if omitted the server will use the default value of True
            mapping_priority (str): The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST. [optional] if omitted the server will use the default value of "CHECK_MAPPED_FIRST"
            response_format (str): The format of the data response in uppercase. It can be one of the following: JSON,CSV. [optional] if omitted the server will use the default value of "JSON"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GENERICRESPONSE
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['market'] = \
            market
        kwargs['instrument'] = \
            instrument
        return self.futures_v1_historical_funding_rate_days_endpoint.call_with_http_info(**kwargs)

    def futures_v1_historical_funding_rate_hours(
        self,
        market,
        instrument,
        **kwargs
    ):
        """futures_v1_historical_funding_rate_hours  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.futures_v1_historical_funding_rate_hours(market, instrument, async_req=True)
        >>> result = thread.get()

        Args:
            market (str): The exchange to obtain data from
            instrument (str): The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.

        Keyword Args:
            groups ([str]): When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,OHLC,OHLC_MESSAGE,MESSAGE. [optional] if omitted the server will use the default value of []
            limit (int): The number of data points to return. [optional] if omitted the server will use the default value of 30
            to_ts (int): Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}. [optional]
            aggregate (int): The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries. [optional] if omitted the server will use the default value of 1
            fill (bool): Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.. [optional] if omitted the server will use the default value of True
            mapping_priority (str): The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST. [optional] if omitted the server will use the default value of "CHECK_MAPPED_FIRST"
            response_format (str): The format of the data response in uppercase. It can be one of the following: JSON,CSV. [optional] if omitted the server will use the default value of "JSON"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GENERICRESPONSE
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['market'] = \
            market
        kwargs['instrument'] = \
            instrument
        return self.futures_v1_historical_funding_rate_hours_endpoint.call_with_http_info(**kwargs)

    def futures_v1_historical_funding_rate_messages(
        self,
        market,
        instrument,
        **kwargs
    ):
        """futures_v1_historical_funding_rate_messages  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.futures_v1_historical_funding_rate_messages(market, instrument, async_req=True)
        >>> result = thread.get()

        Args:
            market (str): The exchange to obtain data from
            instrument (str): The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.

        Keyword Args:
            after_ts (int): Unix timestamp in seconds of the earliest funding rate message in the response. [optional]
            last_ccseq (int): The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request.. [optional] if omitted the server will use the default value of 0
            limit (int): The maximum number of funding rate messages to return. [optional] if omitted the server will use the default value of 100
            mapping_priority (str): The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST. [optional] if omitted the server will use the default value of "CHECK_MAPPED_FIRST"
            response_format (str): The format of the data response in uppercase. It can be one of the following: JSON,CSV. [optional] if omitted the server will use the default value of "JSON"
            return_404_on_empty_response (bool): If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.. [optional] if omitted the server will use the default value of False
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GENERICRESPONSE
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['market'] = \
            market
        kwargs['instrument'] = \
            instrument
        return self.futures_v1_historical_funding_rate_messages_endpoint.call_with_http_info(**kwargs)

    def futures_v1_historical_funding_rate_messages_hour(
        self,
        market,
        instrument,
        **kwargs
    ):
        """futures_v1_historical_funding_rate_messages_hour  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.futures_v1_historical_funding_rate_messages_hour(market, instrument, async_req=True)
        >>> result = thread.get()

        Args:
            market (str): The exchange to obtain data from
            instrument (str): The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.

        Keyword Args:
            hour_ts (int): Unix timestamp in seconds for the hour containing the funding rate updates you are interested in. You can pass any timestamp in the hour but we will round it down the the full hour timestmap and return all funding rate updates in that hour.. [optional]
            mapping_priority (str): The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST. [optional] if omitted the server will use the default value of "CHECK_MAPPED_FIRST"
            response_format (str): The format of the data response in uppercase. It can be one of the following: JSON,CSV. [optional] if omitted the server will use the default value of "JSON"
            return_404_on_empty_response (bool): If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.. [optional] if omitted the server will use the default value of False
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GENERICRESPONSE
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['market'] = \
            market
        kwargs['instrument'] = \
            instrument
        return self.futures_v1_historical_funding_rate_messages_hour_endpoint.call_with_http_info(**kwargs)

    def futures_v1_historical_funding_rate_minutes(
        self,
        market,
        instrument,
        **kwargs
    ):
        """futures_v1_historical_funding_rate_minutes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.futures_v1_historical_funding_rate_minutes(market, instrument, async_req=True)
        >>> result = thread.get()

        Args:
            market (str): The exchange to obtain data from
            instrument (str): The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.

        Keyword Args:
            groups ([str]): When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,OHLC,OHLC_MESSAGE,MESSAGE. [optional] if omitted the server will use the default value of []
            limit (int): The number of data points to return. [optional] if omitted the server will use the default value of 30
            to_ts (int): Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}. [optional]
            aggregate (int): The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries. [optional] if omitted the server will use the default value of 1
            fill (bool): Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.. [optional] if omitted the server will use the default value of True
            mapping_priority (str): The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST. [optional] if omitted the server will use the default value of "CHECK_MAPPED_FIRST"
            response_format (str): The format of the data response in uppercase. It can be one of the following: JSON,CSV. [optional] if omitted the server will use the default value of "JSON"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GENERICRESPONSE
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['market'] = \
            market
        kwargs['instrument'] = \
            instrument
        return self.futures_v1_historical_funding_rate_minutes_endpoint.call_with_http_info(**kwargs)

    def futures_v1_historical_hours(
        self,
        market,
        instrument,
        **kwargs
    ):
        """futures_v1_historical_hours  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.futures_v1_historical_hours(market, instrument, async_req=True)
        >>> result = thread.get()

        Args:
            market (str): The exchange to obtain data from
            instrument (str): The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.

        Keyword Args:
            groups ([str]): When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME. [optional] if omitted the server will use the default value of []
            limit (int): The number of data points to return. [optional] if omitted the server will use the default value of 30
            to_ts (int): Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}. [optional]
            aggregate (int): The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries. [optional] if omitted the server will use the default value of 1
            fill (bool): Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.. [optional] if omitted the server will use the default value of True
            mapping_priority (str): The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST. [optional] if omitted the server will use the default value of "CHECK_MAPPED_FIRST"
            response_format (str): The format of the data response in uppercase. It can be one of the following: JSON,CSV. [optional] if omitted the server will use the default value of "JSON"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GENERICRESPONSE
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['market'] = \
            market
        kwargs['instrument'] = \
            instrument
        return self.futures_v1_historical_hours_endpoint.call_with_http_info(**kwargs)

    def futures_v1_historical_minutes(
        self,
        market,
        instrument,
        **kwargs
    ):
        """futures_v1_historical_minutes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.futures_v1_historical_minutes(market, instrument, async_req=True)
        >>> result = thread.get()

        Args:
            market (str): The exchange to obtain data from
            instrument (str): The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.

        Keyword Args:
            groups ([str]): When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME. [optional] if omitted the server will use the default value of []
            limit (int): The number of data points to return. [optional] if omitted the server will use the default value of 30
            to_ts (int): Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}. [optional]
            aggregate (int): The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries. [optional] if omitted the server will use the default value of 1
            fill (bool): Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.. [optional] if omitted the server will use the default value of True
            mapping_priority (str): The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST. [optional] if omitted the server will use the default value of "CHECK_MAPPED_FIRST"
            response_format (str): The format of the data response in uppercase. It can be one of the following: JSON,CSV. [optional] if omitted the server will use the default value of "JSON"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GENERICRESPONSE
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['market'] = \
            market
        kwargs['instrument'] = \
            instrument
        return self.futures_v1_historical_minutes_endpoint.call_with_http_info(**kwargs)

    def futures_v1_historical_open_interest_days(
        self,
        market,
        instrument,
        **kwargs
    ):
        """futures_v1_historical_open_interest_days  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.futures_v1_historical_open_interest_days(market, instrument, async_req=True)
        >>> result = thread.get()

        Args:
            market (str): The exchange to obtain data from
            instrument (str): The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.

        Keyword Args:
            groups ([str]): When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_MESSAGE,MESSAGE. [optional] if omitted the server will use the default value of []
            limit (int): The number of data points to return. [optional] if omitted the server will use the default value of 30
            to_ts (int): Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}. [optional]
            aggregate (int): The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries. [optional] if omitted the server will use the default value of 1
            fill (bool): Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.. [optional] if omitted the server will use the default value of True
            mapping_priority (str): The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST. [optional] if omitted the server will use the default value of "CHECK_MAPPED_FIRST"
            response_format (str): The format of the data response in uppercase. It can be one of the following: JSON,CSV. [optional] if omitted the server will use the default value of "JSON"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GENERICRESPONSE
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['market'] = \
            market
        kwargs['instrument'] = \
            instrument
        return self.futures_v1_historical_open_interest_days_endpoint.call_with_http_info(**kwargs)

    def futures_v1_historical_open_interest_hours(
        self,
        market,
        instrument,
        **kwargs
    ):
        """futures_v1_historical_open_interest_hours  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.futures_v1_historical_open_interest_hours(market, instrument, async_req=True)
        >>> result = thread.get()

        Args:
            market (str): The exchange to obtain data from
            instrument (str): The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.

        Keyword Args:
            groups ([str]): When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_MESSAGE,MESSAGE. [optional] if omitted the server will use the default value of []
            limit (int): The number of data points to return. [optional] if omitted the server will use the default value of 30
            to_ts (int): Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}. [optional]
            aggregate (int): The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries. [optional] if omitted the server will use the default value of 1
            fill (bool): Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.. [optional] if omitted the server will use the default value of True
            mapping_priority (str): The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST. [optional] if omitted the server will use the default value of "CHECK_MAPPED_FIRST"
            response_format (str): The format of the data response in uppercase. It can be one of the following: JSON,CSV. [optional] if omitted the server will use the default value of "JSON"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GENERICRESPONSE
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['market'] = \
            market
        kwargs['instrument'] = \
            instrument
        return self.futures_v1_historical_open_interest_hours_endpoint.call_with_http_info(**kwargs)

    def futures_v1_historical_open_interest_messages(
        self,
        market,
        instrument,
        **kwargs
    ):
        """futures_v1_historical_open_interest_messages  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.futures_v1_historical_open_interest_messages(market, instrument, async_req=True)
        >>> result = thread.get()

        Args:
            market (str): The exchange to obtain data from
            instrument (str): The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.

        Keyword Args:
            after_ts (int): Unix timestamp in seconds of the earliest open interest message in the response. [optional]
            last_ccseq (int): The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request.. [optional] if omitted the server will use the default value of 0
            limit (int): The maximum number of open interest messages to return. [optional] if omitted the server will use the default value of 100
            mapping_priority (str): The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST. [optional] if omitted the server will use the default value of "CHECK_MAPPED_FIRST"
            response_format (str): The format of the data response in uppercase. It can be one of the following: JSON,CSV. [optional] if omitted the server will use the default value of "JSON"
            return_404_on_empty_response (bool): If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.. [optional] if omitted the server will use the default value of False
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GENERICRESPONSE
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['market'] = \
            market
        kwargs['instrument'] = \
            instrument
        return self.futures_v1_historical_open_interest_messages_endpoint.call_with_http_info(**kwargs)

    def futures_v1_historical_open_interest_messages_hour(
        self,
        market,
        instrument,
        **kwargs
    ):
        """futures_v1_historical_open_interest_messages_hour  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.futures_v1_historical_open_interest_messages_hour(market, instrument, async_req=True)
        >>> result = thread.get()

        Args:
            market (str): The exchange to obtain data from
            instrument (str): The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.

        Keyword Args:
            hour_ts (int): Unix timestamp in seconds for the hour containing the open interest updates you are interested in. You can pass any timestamp in the hour but we will round it down the the full hour timestmap and return all open interest updates in that hour.. [optional]
            mapping_priority (str): The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST. [optional] if omitted the server will use the default value of "CHECK_MAPPED_FIRST"
            response_format (str): The format of the data response in uppercase. It can be one of the following: JSON,CSV. [optional] if omitted the server will use the default value of "JSON"
            return_404_on_empty_response (bool): If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.. [optional] if omitted the server will use the default value of False
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GENERICRESPONSE
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['market'] = \
            market
        kwargs['instrument'] = \
            instrument
        return self.futures_v1_historical_open_interest_messages_hour_endpoint.call_with_http_info(**kwargs)

    def futures_v1_historical_open_interest_minutes(
        self,
        market,
        instrument,
        **kwargs
    ):
        """futures_v1_historical_open_interest_minutes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.futures_v1_historical_open_interest_minutes(market, instrument, async_req=True)
        >>> result = thread.get()

        Args:
            market (str): The exchange to obtain data from
            instrument (str): The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.

        Keyword Args:
            groups ([str]): When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_MESSAGE,MESSAGE. [optional] if omitted the server will use the default value of []
            limit (int): The number of data points to return. [optional] if omitted the server will use the default value of 30
            to_ts (int): Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}. [optional]
            aggregate (int): The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries. [optional] if omitted the server will use the default value of 1
            fill (bool): Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.. [optional] if omitted the server will use the default value of True
            mapping_priority (str): The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST. [optional] if omitted the server will use the default value of "CHECK_MAPPED_FIRST"
            response_format (str): The format of the data response in uppercase. It can be one of the following: JSON,CSV. [optional] if omitted the server will use the default value of "JSON"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GENERICRESPONSE
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['market'] = \
            market
        kwargs['instrument'] = \
            instrument
        return self.futures_v1_historical_open_interest_minutes_endpoint.call_with_http_info(**kwargs)

    def futures_v1_historical_trades(
        self,
        market,
        instrument,
        **kwargs
    ):
        """futures_v1_historical_trades  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.futures_v1_historical_trades(market, instrument, async_req=True)
        >>> result = thread.get()

        Args:
            market (str): The exchange to obtain data from
            instrument (str): The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.

        Keyword Args:
            after_ts (int): Unix timestamp in seconds of the earliest trade in the response.. [optional]
            last_ccseq (int): The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request.. [optional] if omitted the server will use the default value of 0
            limit (int): The maximum number of trades to return. [optional] if omitted the server will use the default value of 100
            mapping_priority (str): The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST. [optional] if omitted the server will use the default value of "CHECK_MAPPED_FIRST"
            response_format (str): The format of the data response in uppercase. It can be one of the following: JSON,CSV. [optional] if omitted the server will use the default value of "JSON"
            return_404_on_empty_response (bool): If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.. [optional] if omitted the server will use the default value of False
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GENERICRESPONSE
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['market'] = \
            market
        kwargs['instrument'] = \
            instrument
        return self.futures_v1_historical_trades_endpoint.call_with_http_info(**kwargs)

    def futures_v1_historical_trades_hour(
        self,
        market,
        instrument,
        **kwargs
    ):
        """futures_v1_historical_trades_hour  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.futures_v1_historical_trades_hour(market, instrument, async_req=True)
        >>> result = thread.get()

        Args:
            market (str): The exchange to obtain data from
            instrument (str): The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.

        Keyword Args:
            hour_ts (int): Unix timestamp in seconds for the hour containing the trades you are interested in. You can pass any timestamp within an hour but we will round it down the the full hour timestmap and return all trades in that hour.. [optional]
            mapping_priority (str): The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST. [optional] if omitted the server will use the default value of "CHECK_MAPPED_FIRST"
            response_format (str): The format of the data response in uppercase. It can be one of the following: JSON,CSV. [optional] if omitted the server will use the default value of "JSON"
            return_404_on_empty_response (bool): If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.. [optional] if omitted the server will use the default value of False
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GENERICRESPONSE
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['market'] = \
            market
        kwargs['instrument'] = \
            instrument
        return self.futures_v1_historical_trades_hour_endpoint.call_with_http_info(**kwargs)

    def futures_v1_latest_funding_rate_tick(
        self,
        market,
        instruments,
        **kwargs
    ):
        """futures_v1_latest_funding_rate_tick  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.futures_v1_latest_funding_rate_tick(market, instruments, async_req=True)
        >>> result = thread.get()

        Args:
            market (str): The exchange to obtain data from
            instruments ([str]): A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.

        Keyword Args:
            groups ([str]): When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME. [optional] if omitted the server will use the default value of []
            mapping_priority (str): The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST. [optional] if omitted the server will use the default value of "CHECK_MAPPED_FIRST"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GENERICRESPONSE
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['market'] = \
            market
        kwargs['instruments'] = \
            instruments
        return self.futures_v1_latest_funding_rate_tick_endpoint.call_with_http_info(**kwargs)

    def futures_v1_latest_instrument_metadata(
        self,
        market,
        instruments,
        **kwargs
    ):
        """futures_v1_latest_instrument_metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.futures_v1_latest_instrument_metadata(market, instruments, async_req=True)
        >>> result = thread.get()

        Args:
            market (str): The exchange to obtain data from
            instruments ([str]): A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.

        Keyword Args:
            groups ([str]): When requesting metadata entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: STATUS,INTERNAL,GENERAL,MIGRATION,SOURCE. [optional] if omitted the server will use the default value of []
            mapping_priority (str): The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST. [optional] if omitted the server will use the default value of "CHECK_MAPPED_FIRST"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GENERICRESPONSE
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['market'] = \
            market
        kwargs['instruments'] = \
            instruments
        return self.futures_v1_latest_instrument_metadata_endpoint.call_with_http_info(**kwargs)

    def futures_v1_latest_open_interest_tick(
        self,
        market,
        instruments,
        **kwargs
    ):
        """futures_v1_latest_open_interest_tick  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.futures_v1_latest_open_interest_tick(market, instruments, async_req=True)
        >>> result = thread.get()

        Args:
            market (str): The exchange to obtain data from
            instruments ([str]): A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.

        Keyword Args:
            groups ([str]): When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME. [optional] if omitted the server will use the default value of []
            mapping_priority (str): The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST. [optional] if omitted the server will use the default value of "CHECK_MAPPED_FIRST"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GENERICRESPONSE
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['market'] = \
            market
        kwargs['instruments'] = \
            instruments
        return self.futures_v1_latest_open_interest_tick_endpoint.call_with_http_info(**kwargs)

    def futures_v1_latest_tick(
        self,
        market,
        instruments,
        **kwargs
    ):
        """futures_v1_latest_tick  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.futures_v1_latest_tick(market, instruments, async_req=True)
        >>> result = thread.get()

        Args:
            market (str): The exchange to obtain data from
            instruments ([str]): A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.

        Keyword Args:
            groups ([str]): When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,LAST_UPDATE,TOP_OF_BOOK,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME. [optional] if omitted the server will use the default value of []
            mapping_priority (str): The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST. [optional] if omitted the server will use the default value of "CHECK_MAPPED_FIRST"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GENERICRESPONSE
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['market'] = \
            market
        kwargs['instruments'] = \
            instruments
        return self.futures_v1_latest_tick_endpoint.call_with_http_info(**kwargs)

    def futures_v1_markets(
        self,
        **kwargs
    ):
        """futures_v1_markets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.futures_v1_markets(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            market (str): The exchange to obtain data from. [optional] if omitted the server will use the default value of ""
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GENERICRESPONSE
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.futures_v1_markets_endpoint.call_with_http_info(**kwargs)

    def futures_v1_markets_instruments(
        self,
        **kwargs
    ):
        """futures_v1_markets_instruments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.futures_v1_markets_instruments(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            market (str): The exchange to obtain data from. [optional] if omitted the server will use the default value of ""
            instrument (str): The mapped instrument to retrieve on a specific market.. [optional] if omitted the server will use the default value of ""
            instrument_status ([str]): The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED. [optional] if omitted the server will use the default value of []
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GENERICRESPONSE
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.futures_v1_markets_instruments_endpoint.call_with_http_info(**kwargs)

    def futures_v1_markets_instruments_unmapped(
        self,
        **kwargs
    ):
        """futures_v1_markets_instruments_unmapped  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.futures_v1_markets_instruments_unmapped(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            market (str): The exchange to obtain data from. [optional] if omitted the server will use the default value of ""
            instrument (str): The unmapped instrument to retrieve on a specific market.. [optional] if omitted the server will use the default value of ""
            instrument_status ([str]): The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED. [optional] if omitted the server will use the default value of []
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GENERICRESPONSE
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.futures_v1_markets_instruments_unmapped_endpoint.call_with_http_info(**kwargs)

    def index_v1_historical_days(
        self,
        market,
        instrument,
        **kwargs
    ):
        """index_v1_historical_days  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.index_v1_historical_days(market, instrument, async_req=True)
        >>> result = thread.get()

        Args:
            market (str): The exchange to obtain data from
            instrument (str): The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.

        Keyword Args:
            groups ([str]): When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME. [optional] if omitted the server will use the default value of []
            limit (int): The number of data points to return. [optional] if omitted the server will use the default value of 30
            to_ts (int): Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}. [optional]
            aggregate (int): The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries. [optional] if omitted the server will use the default value of 1
            fill (bool): Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.. [optional] if omitted the server will use the default value of True
            mapping_priority (str): The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST. [optional] if omitted the server will use the default value of "CHECK_MAPPED_FIRST"
            response_format (str): The format of the data response in uppercase. It can be one of the following: JSON,CSV. [optional] if omitted the server will use the default value of "JSON"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GENERICRESPONSE
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['market'] = \
            market
        kwargs['instrument'] = \
            instrument
        return self.index_v1_historical_days_endpoint.call_with_http_info(**kwargs)

    def index_v1_historical_hours(
        self,
        market,
        instrument,
        **kwargs
    ):
        """index_v1_historical_hours  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.index_v1_historical_hours(market, instrument, async_req=True)
        >>> result = thread.get()

        Args:
            market (str): The exchange to obtain data from
            instrument (str): The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.

        Keyword Args:
            groups ([str]): When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME. [optional] if omitted the server will use the default value of []
            limit (int): The number of data points to return. [optional] if omitted the server will use the default value of 30
            to_ts (int): Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}. [optional]
            aggregate (int): The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries. [optional] if omitted the server will use the default value of 1
            fill (bool): Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.. [optional] if omitted the server will use the default value of True
            mapping_priority (str): The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST. [optional] if omitted the server will use the default value of "CHECK_MAPPED_FIRST"
            response_format (str): The format of the data response in uppercase. It can be one of the following: JSON,CSV. [optional] if omitted the server will use the default value of "JSON"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GENERICRESPONSE
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['market'] = \
            market
        kwargs['instrument'] = \
            instrument
        return self.index_v1_historical_hours_endpoint.call_with_http_info(**kwargs)

    def index_v1_historical_messages(
        self,
        market,
        instrument,
        **kwargs
    ):
        """index_v1_historical_messages  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.index_v1_historical_messages(market, instrument, async_req=True)
        >>> result = thread.get()

        Args:
            market (str): The exchange to obtain data from
            instrument (str): The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.

        Keyword Args:
            after_ts (int): Unix timestamp in seconds of the earliest index message in the response. [optional]
            last_ccseq (int): The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request.. [optional] if omitted the server will use the default value of 0
            limit (int): The maximum number of index messages to return. [optional] if omitted the server will use the default value of 100
            mapping_priority (str): The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST. [optional] if omitted the server will use the default value of "CHECK_MAPPED_FIRST"
            response_format (str): The format of the data response in uppercase. It can be one of the following: JSON,CSV. [optional] if omitted the server will use the default value of "JSON"
            return_404_on_empty_response (bool): If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.. [optional] if omitted the server will use the default value of False
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GENERICRESPONSE
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['market'] = \
            market
        kwargs['instrument'] = \
            instrument
        return self.index_v1_historical_messages_endpoint.call_with_http_info(**kwargs)

    def index_v1_historical_messages_hour(
        self,
        market,
        instrument,
        **kwargs
    ):
        """index_v1_historical_messages_hour  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.index_v1_historical_messages_hour(market, instrument, async_req=True)
        >>> result = thread.get()

        Args:
            market (str): The exchange to obtain data from
            instrument (str): The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.

        Keyword Args:
            hour_ts (int): Unix timestamp in seconds for the hour containing the index updates you are interested in. You can pass any timestamp in the hour but we will round it down the the full hour timestmap and return all index updates in that hour.. [optional]
            mapping_priority (str): The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST. [optional] if omitted the server will use the default value of "CHECK_MAPPED_FIRST"
            response_format (str): The format of the data response in uppercase. It can be one of the following: JSON,CSV. [optional] if omitted the server will use the default value of "JSON"
            return_404_on_empty_response (bool): If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.. [optional] if omitted the server will use the default value of False
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GENERICRESPONSE
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['market'] = \
            market
        kwargs['instrument'] = \
            instrument
        return self.index_v1_historical_messages_hour_endpoint.call_with_http_info(**kwargs)

    def index_v1_historical_minutes(
        self,
        market,
        instrument,
        **kwargs
    ):
        """index_v1_historical_minutes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.index_v1_historical_minutes(market, instrument, async_req=True)
        >>> result = thread.get()

        Args:
            market (str): The exchange to obtain data from
            instrument (str): The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.

        Keyword Args:
            groups ([str]): When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME. [optional] if omitted the server will use the default value of []
            limit (int): The number of data points to return. [optional] if omitted the server will use the default value of 30
            to_ts (int): Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}. [optional]
            aggregate (int): The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries. [optional] if omitted the server will use the default value of 1
            fill (bool): Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.. [optional] if omitted the server will use the default value of True
            mapping_priority (str): The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST. [optional] if omitted the server will use the default value of "CHECK_MAPPED_FIRST"
            response_format (str): The format of the data response in uppercase. It can be one of the following: JSON,CSV. [optional] if omitted the server will use the default value of "JSON"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GENERICRESPONSE
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['market'] = \
            market
        kwargs['instrument'] = \
            instrument
        return self.index_v1_historical_minutes_endpoint.call_with_http_info(**kwargs)

    def index_v1_latest_instrument_metadata(
        self,
        market,
        instruments,
        **kwargs
    ):
        """index_v1_latest_instrument_metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.index_v1_latest_instrument_metadata(market, instruments, async_req=True)
        >>> result = thread.get()

        Args:
            market (str): The exchange to obtain data from
            instruments ([str]): A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.

        Keyword Args:
            groups ([str]): When requesting metadata entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: STATUS,INTERNAL,GENERAL,MIGRATION,SOURCE. [optional] if omitted the server will use the default value of []
            mapping_priority (str): The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST. [optional] if omitted the server will use the default value of "CHECK_MAPPED_FIRST"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GENERICRESPONSE
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['market'] = \
            market
        kwargs['instruments'] = \
            instruments
        return self.index_v1_latest_instrument_metadata_endpoint.call_with_http_info(**kwargs)

    def index_v1_latest_tick(
        self,
        market,
        instruments,
        **kwargs
    ):
        """index_v1_latest_tick  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.index_v1_latest_tick(market, instruments, async_req=True)
        >>> result = thread.get()

        Args:
            market (str): The exchange to obtain data from
            instruments ([str]): A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.

        Keyword Args:
            groups ([str]): When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME. [optional] if omitted the server will use the default value of []
            mapping_priority (str): The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST. [optional] if omitted the server will use the default value of "CHECK_MAPPED_FIRST"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GENERICRESPONSE
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['market'] = \
            market
        kwargs['instruments'] = \
            instruments
        return self.index_v1_latest_tick_endpoint.call_with_http_info(**kwargs)

    def index_v1_markets(
        self,
        **kwargs
    ):
        """index_v1_markets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.index_v1_markets(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            market (str): The exchange to obtain data from. [optional] if omitted the server will use the default value of ""
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GENERICRESPONSE
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.index_v1_markets_endpoint.call_with_http_info(**kwargs)

    def index_v1_markets_instruments(
        self,
        **kwargs
    ):
        """index_v1_markets_instruments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.index_v1_markets_instruments(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            market (str): The exchange to obtain data from. [optional] if omitted the server will use the default value of ""
            instrument (str): The mapped instrument to retrieve on a specific market.. [optional] if omitted the server will use the default value of ""
            instrument_status ([str]): The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED. [optional] if omitted the server will use the default value of []
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GENERICRESPONSE
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.index_v1_markets_instruments_endpoint.call_with_http_info(**kwargs)

    def index_v1_markets_instruments_unmapped(
        self,
        **kwargs
    ):
        """index_v1_markets_instruments_unmapped  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.index_v1_markets_instruments_unmapped(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            market (str): The exchange to obtain data from. [optional] if omitted the server will use the default value of ""
            instrument (str): The unmapped instrument to retrieve on a specific market.. [optional] if omitted the server will use the default value of ""
            instrument_status ([str]): The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED. [optional] if omitted the server will use the default value of []
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GENERICRESPONSE
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.index_v1_markets_instruments_unmapped_endpoint.call_with_http_info(**kwargs)

