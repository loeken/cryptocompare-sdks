"""
    CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry

    CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.  # noqa: E501

    The version of the OpenAPI document: 2.1.1
    Contact: data@cryptocompare.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.error import Error
from openapi_client.model.genericresponse import GENERICRESPONSE


class AssetApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.asset_v1_data_by_address_endpoint = _Endpoint(
            settings={
                'response_type': (GENERICRESPONSE,),
                'auth': [],
                'endpoint_path': '/asset/v1/data/by/address',
                'operation_id': 'asset_v1_data_by_address',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'address',
                    'chain_symbol',
                    'groups',
                ],
                'required': [
                    'address',
                    'chain_symbol',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'address',
                    'chain_symbol',
                    'groups',
                ]
            },
            root_map={
                'validations': {
                    ('address',): {
                        'max_length': 500,
                        'min_length': 1,
                    },
                    ('chain_symbol',): {
                        'max_length': 100,
                        'min_length': 1,
                    },
                    ('groups',): {
                        'max_length': 2000,
                        'min_length': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'address':
                        (str,),
                    'chain_symbol':
                        (str,),
                    'groups':
                        (str,),
                },
                'attribute_map': {
                    'address': 'address',
                    'chain_symbol': 'chain_symbol',
                    'groups': 'groups',
                },
                'location_map': {
                    'address': 'query',
                    'chain_symbol': 'query',
                    'groups': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.asset_v1_data_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (GENERICRESPONSE,),
                'auth': [],
                'endpoint_path': '/asset/v1/data/by/id',
                'operation_id': 'asset_v1_data_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'asset_id',
                    'groups',
                ],
                'required': [
                    'asset_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'groups',
                ]
            },
            root_map={
                'validations': {
                    ('groups',): {
                        'max_length': 2000,
                        'min_length': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'asset_id':
                        (int,),
                    'groups':
                        (str,),
                },
                'attribute_map': {
                    'asset_id': 'asset_id',
                    'groups': 'groups',
                },
                'location_map': {
                    'asset_id': 'query',
                    'groups': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.asset_v1_data_by_symbol_endpoint = _Endpoint(
            settings={
                'response_type': (GENERICRESPONSE,),
                'auth': [],
                'endpoint_path': '/asset/v1/data/by/symbol',
                'operation_id': 'asset_v1_data_by_symbol',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'asset_symbol',
                    'groups',
                ],
                'required': [
                    'asset_symbol',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'asset_symbol',
                    'groups',
                ]
            },
            root_map={
                'validations': {
                    ('asset_symbol',): {
                        'max_length': 100,
                        'min_length': 1,
                    },
                    ('groups',): {
                        'max_length': 2000,
                        'min_length': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'asset_symbol':
                        (str,),
                    'groups':
                        (str,),
                },
                'attribute_map': {
                    'asset_symbol': 'asset_symbol',
                    'groups': 'groups',
                },
                'location_map': {
                    'asset_symbol': 'query',
                    'groups': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.asset_v1_top_list_endpoint = _Endpoint(
            settings={
                'response_type': (GENERICRESPONSE,),
                'auth': [],
                'endpoint_path': '/asset/v1/top/list',
                'operation_id': 'asset_v1_top_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'page',
                    'page_size',
                    'asset_type',
                    'sort_by',
                    'sort_direction',
                    'groups',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'sort_by',
                    'sort_direction',
                ],
                'validation': [
                    'page',
                    'page_size',
                    'groups',
                ]
            },
            root_map={
                'validations': {
                    ('page',): {

                        'inclusive_maximum': 100,
                        'inclusive_minimum': 1,
                    },
                    ('page_size',): {

                        'inclusive_maximum': 100,
                        'inclusive_minimum': 10,
                    },
                    ('groups',): {
                        'max_length': 2000,
                        'min_length': 0,
                    },
                },
                'allowed_values': {
                    ('sort_by',): {

                        "CREATED_ON": "CREATED_ON",
                        "UPDATED_ON": "UPDATED_ON",
                        "SYMBOL": "SYMBOL"
                    },
                    ('sort_direction',): {

                        "DESC": "DESC",
                        "ASC": "ASC"
                    },
                },
                'openapi_types': {
                    'page':
                        (int,),
                    'page_size':
                        (int,),
                    'asset_type':
                        (str,),
                    'sort_by':
                        (str,),
                    'sort_direction':
                        (str,),
                    'groups':
                        (str,),
                },
                'attribute_map': {
                    'page': 'page',
                    'page_size': 'page_size',
                    'asset_type': 'asset_type',
                    'sort_by': 'sort_by',
                    'sort_direction': 'sort_direction',
                    'groups': 'groups',
                },
                'location_map': {
                    'page': 'query',
                    'page_size': 'query',
                    'asset_type': 'query',
                    'sort_by': 'query',
                    'sort_direction': 'query',
                    'groups': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def asset_v1_data_by_address(
        self,
        address,
        chain_symbol,
        **kwargs
    ):
        """asset_v1_data_by_address  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.asset_v1_data_by_address(address, chain_symbol, async_req=True)
        >>> result = thread.get()

        Args:
            address (str):
            chain_symbol (str):

        Keyword Args:
            groups (str): [optional] if omitted the server will use the default value of ""
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GENERICRESPONSE
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['address'] = \
            address
        kwargs['chain_symbol'] = \
            chain_symbol
        return self.asset_v1_data_by_address_endpoint.call_with_http_info(**kwargs)

    def asset_v1_data_by_id(
        self,
        asset_id,
        **kwargs
    ):
        """asset_v1_data_by_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.asset_v1_data_by_id(asset_id, async_req=True)
        >>> result = thread.get()

        Args:
            asset_id (int): The asset id you are interested in

        Keyword Args:
            groups (str): [optional] if omitted the server will use the default value of ""
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GENERICRESPONSE
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['asset_id'] = \
            asset_id
        return self.asset_v1_data_by_id_endpoint.call_with_http_info(**kwargs)

    def asset_v1_data_by_symbol(
        self,
        asset_symbol,
        **kwargs
    ):
        """asset_v1_data_by_symbol  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.asset_v1_data_by_symbol(asset_symbol, async_req=True)
        >>> result = thread.get()

        Args:
            asset_symbol (str): The asset symbol you are interested in

        Keyword Args:
            groups (str): [optional] if omitted the server will use the default value of ""
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GENERICRESPONSE
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['asset_symbol'] = \
            asset_symbol
        return self.asset_v1_data_by_symbol_endpoint.call_with_http_info(**kwargs)

    def asset_v1_top_list(
        self,
        **kwargs
    ):
        """asset_v1_top_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.asset_v1_top_list(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            page (int): The page number for the request to get {page_size} coins at the time.. [optional] if omitted the server will use the default value of 1
            page_size (int): The number of items returned per page. [optional] if omitted the server will use the default value of 100
            asset_type (str): The asset class/type. [optional] if omitted the server will use the default value of ""
            sort_by (str): Sort by field ( CREATED_ON,UPDATED_ON,SYMBOL ). [optional] if omitted the server will use the default value of "CREATED_ON"
            sort_direction (str): Sort direction ( DESC,ASC ). [optional] if omitted the server will use the default value of "DESC"
            groups (str): [optional] if omitted the server will use the default value of ""
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GENERICRESPONSE
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.asset_v1_top_list_endpoint.call_with_http_info(**kwargs)

