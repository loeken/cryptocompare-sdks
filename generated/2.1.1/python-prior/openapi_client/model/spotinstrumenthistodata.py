"""
    CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry

    CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.  # noqa: E501

    The version of the OpenAPI document: 2.1.1
    Contact: data@cryptocompare.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from openapi_client.exceptions import ApiAttributeError



class SPOTINSTRUMENTHISTODATA(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        return {
            'base': (str,),  # noqa: E501
            'close': (int,),  # noqa: E501
            'first_trade_price': (int,),  # noqa: E501
            'first_trade_timestamp': (int,),  # noqa: E501
            'high': (int,),  # noqa: E501
            'high_trade_price': (int,),  # noqa: E501
            'high_trade_timestamp': (int,),  # noqa: E501
            'instrument': (str,),  # noqa: E501
            'last_trade_price': (int,),  # noqa: E501
            'last_trade_timestamp': (int,),  # noqa: E501
            'low': (int,),  # noqa: E501
            'low_trade_price': (int,),  # noqa: E501
            'low_trade_timestamp': (int,),  # noqa: E501
            'mapped_instrument': (str,),  # noqa: E501
            'market': (str,),  # noqa: E501
            'open': (int,),  # noqa: E501
            'quote': (str,),  # noqa: E501
            'quote_volume': (int,),  # noqa: E501
            'quote_volume_buy': (int,),  # noqa: E501
            'quote_volume_sell': (int,),  # noqa: E501
            'quote_volume_unknown': (int,),  # noqa: E501
            'timestamp': (int,),  # noqa: E501
            'total_trades': (int,),  # noqa: E501
            'total_trades_buy': (int,),  # noqa: E501
            'total_trades_sell': (int,),  # noqa: E501
            'total_trades_unknown': (int,),  # noqa: E501
            'type': (str,),  # noqa: E501
            'unit': (str,),  # noqa: E501
            'volume': (int,),  # noqa: E501
            'volume_buy': (int,),  # noqa: E501
            'volume_sell': (int,),  # noqa: E501
            'volume_unknown': (int,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'base': 'BASE',  # noqa: E501
        'close': 'CLOSE',  # noqa: E501
        'first_trade_price': 'FIRST_TRADE_PRICE',  # noqa: E501
        'first_trade_timestamp': 'FIRST_TRADE_TIMESTAMP',  # noqa: E501
        'high': 'HIGH',  # noqa: E501
        'high_trade_price': 'HIGH_TRADE_PRICE',  # noqa: E501
        'high_trade_timestamp': 'HIGH_TRADE_TIMESTAMP',  # noqa: E501
        'instrument': 'INSTRUMENT',  # noqa: E501
        'last_trade_price': 'LAST_TRADE_PRICE',  # noqa: E501
        'last_trade_timestamp': 'LAST_TRADE_TIMESTAMP',  # noqa: E501
        'low': 'LOW',  # noqa: E501
        'low_trade_price': 'LOW_TRADE_PRICE',  # noqa: E501
        'low_trade_timestamp': 'LOW_TRADE_TIMESTAMP',  # noqa: E501
        'mapped_instrument': 'MAPPED_INSTRUMENT',  # noqa: E501
        'market': 'MARKET',  # noqa: E501
        'open': 'OPEN',  # noqa: E501
        'quote': 'QUOTE',  # noqa: E501
        'quote_volume': 'QUOTE_VOLUME',  # noqa: E501
        'quote_volume_buy': 'QUOTE_VOLUME_BUY',  # noqa: E501
        'quote_volume_sell': 'QUOTE_VOLUME_SELL',  # noqa: E501
        'quote_volume_unknown': 'QUOTE_VOLUME_UNKNOWN',  # noqa: E501
        'timestamp': 'TIMESTAMP',  # noqa: E501
        'total_trades': 'TOTAL_TRADES',  # noqa: E501
        'total_trades_buy': 'TOTAL_TRADES_BUY',  # noqa: E501
        'total_trades_sell': 'TOTAL_TRADES_SELL',  # noqa: E501
        'total_trades_unknown': 'TOTAL_TRADES_UNKNOWN',  # noqa: E501
        'type': 'TYPE',  # noqa: E501
        'unit': 'UNIT',  # noqa: E501
        'volume': 'VOLUME',  # noqa: E501
        'volume_buy': 'VOLUME_BUY',  # noqa: E501
        'volume_sell': 'VOLUME_SELL',  # noqa: E501
        'volume_unknown': 'VOLUME_UNKNOWN',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """SPOTINSTRUMENTHISTODATA - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            base (str): The mapped from asset (base / symbol/ coin) (e.g. BTC). Only available on instruments that have mapping.. [optional]  # noqa: E501
            close (int): The price of the last trade in this time period. If there were no trades in the time period, the open price will be given.. [optional]  # noqa: E501
            first_trade_price (int): The price of the first trade in the time period. This is only available when there is at least one trade in the time period.. [optional]  # noqa: E501
            first_trade_timestamp (int): The timestamp, in seconds, of the first trade in this time perio. This is only available when there is at least one trade in the time period.. [optional]  # noqa: E501
            high (int): The highest trade price in the time period. If there were no trades in the time period, the open price will be given.. [optional]  # noqa: E501
            high_trade_price (int): The highest value of the trades in the time period. This is only available when there is at least one trade in the time period.. [optional]  # noqa: E501
            high_trade_timestamp (int): The timestamp, in seconds, of the highest trade in the time period. This is only available when there is at least one trade in the time period.. [optional]  # noqa: E501
            instrument (str): The unmapped instrument ID. [optional]  # noqa: E501
            last_trade_price (int): The last trade price in the time period. This is only available when there is at least one trade in the time period.. [optional]  # noqa: E501
            last_trade_timestamp (int): The timestamp, in seconds, of the last trade in this time period. This is only available when there is at least one trade in the time period.. [optional]  # noqa: E501
            low (int): The lowest trade price in the time period. If there were no trades in the time period, the open price will be given.. [optional]  # noqa: E501
            low_trade_price (int): The lowest value of the trades in the time period. This is only available when there is at least one trade in the time period.. [optional]  # noqa: E501
            low_trade_timestamp (int): The timestamp, in seconds, of the lowest trade in the time period. This is only available when there is at least one trade in the time period.. [optional]  # noqa: E501
            mapped_instrument (str): The instrument ID, as derived from our mapping rules. This takes the form \"BASE-QUOTE\" (e.g. BTC-USD). Only available on instruments that have been mapped.. [optional]  # noqa: E501
            market (str): The market / exchange under consideration (e.g. gemini, kraken, coinbase, etc).. [optional]  # noqa: E501
            open (int): The open price for the historical period, this is based on the closest trade before the period start.. [optional]  # noqa: E501
            quote (str): The mapped to asset (quote / counter symbol / coin) (e.g. USD). Only available on instruments that have mapping.. [optional]  # noqa: E501
            quote_volume (int): The sum of all the trade volumes in the To asset (quote/counter symbol/coin) for the time period. If there were no trades in the time period, 0 will be returned.. [optional]  # noqa: E501
            quote_volume_buy (int): The sum of all the BUY trade volumes in the to asset (quote/counter symbol/coin) for the time period.. [optional]  # noqa: E501
            quote_volume_sell (int): The sum of all the SELL trade volumes in the To asset (quote/counter symbol/coin) for the time period.. [optional]  # noqa: E501
            quote_volume_unknown (int): The sum of all the UNKNOWN trade volumes in the To asset (quote/counter symbol/coin) for the time period.. [optional]  # noqa: E501
            timestamp (int): The timestamp in seconds of the beginning of the histo period. For minute it would be every minute at the beginning of the minute, for hour it would be the start of the hour and for daily it is 00:00 GMT.. [optional]  # noqa: E501
            total_trades (int): The total number of trades seen in this time period. If there were no trades in the time period, 0 will be returned.. [optional]  # noqa: E501
            total_trades_buy (int): The total number of BUY trades seen in this time period. If there were no trades in the time period, 0 will be returned.. [optional]  # noqa: E501
            total_trades_sell (int): The total number of SELL trades seen in this time period. If there were no trades in the time period, 0 will be returned.. [optional]  # noqa: E501
            total_trades_unknown (int): The total number of UNKNOWN trades seen in this time period. If there were no trades in the time period, 0 will be returned.. [optional]  # noqa: E501
            type (str): The type of the message.. [optional]  # noqa: E501
            unit (str): The unit of the historical period update: MINUTE for minute, HOUR for hour and DAY for day.. [optional]  # noqa: E501
            volume (int): The sum of all the trade volumes in the from asset (base symbol / coin) for the time period. If there were no trades in the time period, 0 will be returned.. [optional]  # noqa: E501
            volume_buy (int): The sum of all the BUY trade volumes in the from asset (base symbol / coin) for the time period.. [optional]  # noqa: E501
            volume_sell (int): The sum of all the SELL trade volumes in the from asset (base symbol / coin) for the time period.. [optional]  # noqa: E501
            volume_unknown (int): The sum of all the UNKNOWN trade volumes in the from asset (base symbol / coin) for the time period.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', True)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """SPOTINSTRUMENTHISTODATA - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            base (str): The mapped from asset (base / symbol/ coin) (e.g. BTC). Only available on instruments that have mapping.. [optional]  # noqa: E501
            close (int): The price of the last trade in this time period. If there were no trades in the time period, the open price will be given.. [optional]  # noqa: E501
            first_trade_price (int): The price of the first trade in the time period. This is only available when there is at least one trade in the time period.. [optional]  # noqa: E501
            first_trade_timestamp (int): The timestamp, in seconds, of the first trade in this time perio. This is only available when there is at least one trade in the time period.. [optional]  # noqa: E501
            high (int): The highest trade price in the time period. If there were no trades in the time period, the open price will be given.. [optional]  # noqa: E501
            high_trade_price (int): The highest value of the trades in the time period. This is only available when there is at least one trade in the time period.. [optional]  # noqa: E501
            high_trade_timestamp (int): The timestamp, in seconds, of the highest trade in the time period. This is only available when there is at least one trade in the time period.. [optional]  # noqa: E501
            instrument (str): The unmapped instrument ID. [optional]  # noqa: E501
            last_trade_price (int): The last trade price in the time period. This is only available when there is at least one trade in the time period.. [optional]  # noqa: E501
            last_trade_timestamp (int): The timestamp, in seconds, of the last trade in this time period. This is only available when there is at least one trade in the time period.. [optional]  # noqa: E501
            low (int): The lowest trade price in the time period. If there were no trades in the time period, the open price will be given.. [optional]  # noqa: E501
            low_trade_price (int): The lowest value of the trades in the time period. This is only available when there is at least one trade in the time period.. [optional]  # noqa: E501
            low_trade_timestamp (int): The timestamp, in seconds, of the lowest trade in the time period. This is only available when there is at least one trade in the time period.. [optional]  # noqa: E501
            mapped_instrument (str): The instrument ID, as derived from our mapping rules. This takes the form \"BASE-QUOTE\" (e.g. BTC-USD). Only available on instruments that have been mapped.. [optional]  # noqa: E501
            market (str): The market / exchange under consideration (e.g. gemini, kraken, coinbase, etc).. [optional]  # noqa: E501
            open (int): The open price for the historical period, this is based on the closest trade before the period start.. [optional]  # noqa: E501
            quote (str): The mapped to asset (quote / counter symbol / coin) (e.g. USD). Only available on instruments that have mapping.. [optional]  # noqa: E501
            quote_volume (int): The sum of all the trade volumes in the To asset (quote/counter symbol/coin) for the time period. If there were no trades in the time period, 0 will be returned.. [optional]  # noqa: E501
            quote_volume_buy (int): The sum of all the BUY trade volumes in the to asset (quote/counter symbol/coin) for the time period.. [optional]  # noqa: E501
            quote_volume_sell (int): The sum of all the SELL trade volumes in the To asset (quote/counter symbol/coin) for the time period.. [optional]  # noqa: E501
            quote_volume_unknown (int): The sum of all the UNKNOWN trade volumes in the To asset (quote/counter symbol/coin) for the time period.. [optional]  # noqa: E501
            timestamp (int): The timestamp in seconds of the beginning of the histo period. For minute it would be every minute at the beginning of the minute, for hour it would be the start of the hour and for daily it is 00:00 GMT.. [optional]  # noqa: E501
            total_trades (int): The total number of trades seen in this time period. If there were no trades in the time period, 0 will be returned.. [optional]  # noqa: E501
            total_trades_buy (int): The total number of BUY trades seen in this time period. If there were no trades in the time period, 0 will be returned.. [optional]  # noqa: E501
            total_trades_sell (int): The total number of SELL trades seen in this time period. If there were no trades in the time period, 0 will be returned.. [optional]  # noqa: E501
            total_trades_unknown (int): The total number of UNKNOWN trades seen in this time period. If there were no trades in the time period, 0 will be returned.. [optional]  # noqa: E501
            type (str): The type of the message.. [optional]  # noqa: E501
            unit (str): The unit of the historical period update: MINUTE for minute, HOUR for hour and DAY for day.. [optional]  # noqa: E501
            volume (int): The sum of all the trade volumes in the from asset (base symbol / coin) for the time period. If there were no trades in the time period, 0 will be returned.. [optional]  # noqa: E501
            volume_buy (int): The sum of all the BUY trade volumes in the from asset (base symbol / coin) for the time period.. [optional]  # noqa: E501
            volume_sell (int): The sum of all the SELL trade volumes in the from asset (base symbol / coin) for the time period.. [optional]  # noqa: E501
            volume_unknown (int): The sum of all the UNKNOWN trade volumes in the from asset (base symbol / coin) for the time period.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
