"""
    CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry

    CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.  # noqa: E501

    The version of the OpenAPI document: 2.1.1
    Contact: data@cryptocompare.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from openapi_client.exceptions import ApiAttributeError



class SPOTINSTRUMENTMETADATA(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        return {
            'first_seen_on_blob_ts': (int,),  # noqa: E501
            'first_seen_on_fix_ts': (int,),  # noqa: E501
            'first_seen_on_hardcoded_ts': (int,),  # noqa: E501
            'first_seen_on_index_composition_ts': (int,),  # noqa: E501
            'first_seen_on_nsq_ts': (int,),  # noqa: E501
            'first_seen_on_polling_ts': (int,),  # noqa: E501
            'first_seen_on_streaming_ts': (int,),  # noqa: E501
            'first_trade_spot_from_backfill': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
            'first_trade_spot_from_backfill_external': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
            'first_trade_spot_from_blob': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
            'first_trade_spot_from_blob_external': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
            'first_trade_spot_from_calculated': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
            'first_trade_spot_from_calculated_external': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
            'first_trade_spot_from_fix': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
            'first_trade_spot_from_fix_external': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
            'first_trade_spot_from_go': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
            'first_trade_spot_from_go_external': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
            'first_trade_spot_from_polling': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
            'first_trade_spot_from_polling_external': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
            'first_trade_spot_from_streaming': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
            'first_trade_spot_from_streaming_external': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
            'host_migration_destination': (str,),  # noqa: E501
            'host_migration_source': (str,),  # noqa: E501
            'host_migration_status': (str,),  # noqa: E501
            'instrument': (str,),  # noqa: E501
            'instrument_external_data': (str,),  # noqa: E501
            'instrument_mapping': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
            'instrument_mapping_history': ([str],),  # noqa: E501
            'instrument_source_backfill': (str,),  # noqa: E501
            'instrument_source_blob': (str,),  # noqa: E501
            'instrument_source_calculated': (str,),  # noqa: E501
            'instrument_source_fix': (str,),  # noqa: E501
            'instrument_source_go': (str,),  # noqa: E501
            'instrument_source_polling': (str,),  # noqa: E501
            'instrument_source_streaming': (str,),  # noqa: E501
            'instrument_status': (str,),  # noqa: E501
            'instrument_trade_spot_from_backfill_last_proxied_rest_request': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
            'instrument_trade_spot_from_backfill_rest_uri_last_request_ts': (int,),  # noqa: E501
            'instrument_trade_spot_from_backfill_rest_uri_last_response_ts': (int,),  # noqa: E501
            'instrument_trade_spot_from_backfill_rest_uri_next_request_ts': (int,),  # noqa: E501
            'instrument_trade_spot_from_blob_last_proxied_rest_request': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
            'instrument_trade_spot_from_blob_rest_uri_last_request_ts': (int,),  # noqa: E501
            'instrument_trade_spot_from_blob_rest_uri_last_response_ts': (int,),  # noqa: E501
            'instrument_trade_spot_from_blob_rest_uri_next_request_ts': (int,),  # noqa: E501
            'instrument_trade_spot_from_calculated_last_proxied_rest_request': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
            'instrument_trade_spot_from_calculated_rest_uri_last_request_ts': (int,),  # noqa: E501
            'instrument_trade_spot_from_calculated_rest_uri_last_response_ts': (int,),  # noqa: E501
            'instrument_trade_spot_from_calculated_rest_uri_next_request_ts': (int,),  # noqa: E501
            'instrument_trade_spot_from_fix_last_proxied_rest_request': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
            'instrument_trade_spot_from_fix_rest_uri_last_request_ts': (int,),  # noqa: E501
            'instrument_trade_spot_from_fix_rest_uri_last_response_ts': (int,),  # noqa: E501
            'instrument_trade_spot_from_fix_rest_uri_next_request_ts': (int,),  # noqa: E501
            'instrument_trade_spot_from_go_last_proxied_rest_request': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
            'instrument_trade_spot_from_go_rest_uri_last_request_ts': (int,),  # noqa: E501
            'instrument_trade_spot_from_go_rest_uri_last_response_ts': (int,),  # noqa: E501
            'instrument_trade_spot_from_go_rest_uri_next_request_ts': (int,),  # noqa: E501
            'instrument_trade_spot_from_polling_last_proxied_rest_request': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
            'instrument_trade_spot_from_polling_rest_uri_last_request_ts': (int,),  # noqa: E501
            'instrument_trade_spot_from_polling_rest_uri_last_response_ts': (int,),  # noqa: E501
            'instrument_trade_spot_from_polling_rest_uri_next_request_ts': (int,),  # noqa: E501
            'instrument_trade_spot_from_streaming_last_proxied_rest_request': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
            'instrument_trade_spot_from_streaming_rest_uri_last_request_ts': (int,),  # noqa: E501
            'instrument_trade_spot_from_streaming_rest_uri_last_response_ts': (int,),  # noqa: E501
            'instrument_trade_spot_from_streaming_rest_uri_next_request_ts': (int,),  # noqa: E501
            'instrument_trade_spot_is_ready_for_streaming_integration': (bool,),  # noqa: E501
            'instrument_trade_spot_rest_uri': (str,),  # noqa: E501
            'instrument_trade_spot_rest_url': (str,),  # noqa: E501
            'instrument_trade_spot_streaming_subscription': (str,),  # noqa: E501
            'last_concurrent_batch_of_trades_spot_ms': (int,),  # noqa: E501
            'last_seen_on_blob_ts': (int,),  # noqa: E501
            'last_seen_on_fix_ts': (int,),  # noqa: E501
            'last_seen_on_hardcoded_ts': (int,),  # noqa: E501
            'last_seen_on_index_composition_ts': (int,),  # noqa: E501
            'last_seen_on_nsq_ts': (int,),  # noqa: E501
            'last_seen_on_polling_ts': (int,),  # noqa: E501
            'last_seen_on_streaming_ts': (int,),  # noqa: E501
            'last_trade_spot_from_backfill': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
            'last_trade_spot_from_backfill_external': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
            'last_trade_spot_from_blob': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
            'last_trade_spot_from_blob_external': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
            'last_trade_spot_from_calculated': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
            'last_trade_spot_from_calculated_external': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
            'last_trade_spot_from_fix': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
            'last_trade_spot_from_fix_external': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
            'last_trade_spot_from_go': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
            'last_trade_spot_from_go_external': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
            'last_trade_spot_from_polling': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
            'last_trade_spot_from_polling_external': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
            'last_trade_spot_from_streaming': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
            'last_trade_spot_from_streaming_external': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
            'metadata_version': (int,),  # noqa: E501
            'processing_trades_from_blob_status': (str,),  # noqa: E501
            'total_trades_spot': (int,),  # noqa: E501
            'unstructured_trade_spot_from_backfill_internal_data': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
            'unstructured_trade_spot_from_blob_internal_data': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
            'unstructured_trade_spot_from_calculated_internal_data': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
            'unstructured_trade_spot_from_fix_internal_data': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
            'unstructured_trade_spot_from_go_internal_data': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
            'unstructured_trade_spot_from_polling_internal_data': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
            'unstructured_trade_spot_from_streaming_internal_data': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'first_seen_on_blob_ts': 'FIRST_SEEN_ON_BLOB_TS',  # noqa: E501
        'first_seen_on_fix_ts': 'FIRST_SEEN_ON_FIX_TS',  # noqa: E501
        'first_seen_on_hardcoded_ts': 'FIRST_SEEN_ON_HARDCODED_TS',  # noqa: E501
        'first_seen_on_index_composition_ts': 'FIRST_SEEN_ON_INDEX_COMPOSITION_TS',  # noqa: E501
        'first_seen_on_nsq_ts': 'FIRST_SEEN_ON_NSQ_TS',  # noqa: E501
        'first_seen_on_polling_ts': 'FIRST_SEEN_ON_POLLING_TS',  # noqa: E501
        'first_seen_on_streaming_ts': 'FIRST_SEEN_ON_STREAMING_TS',  # noqa: E501
        'first_trade_spot_from_backfill': 'FIRST_TRADE_SPOT_FROM_BACKFILL',  # noqa: E501
        'first_trade_spot_from_backfill_external': 'FIRST_TRADE_SPOT_FROM_BACKFILL_EXTERNAL',  # noqa: E501
        'first_trade_spot_from_blob': 'FIRST_TRADE_SPOT_FROM_BLOB',  # noqa: E501
        'first_trade_spot_from_blob_external': 'FIRST_TRADE_SPOT_FROM_BLOB_EXTERNAL',  # noqa: E501
        'first_trade_spot_from_calculated': 'FIRST_TRADE_SPOT_FROM_CALCULATED',  # noqa: E501
        'first_trade_spot_from_calculated_external': 'FIRST_TRADE_SPOT_FROM_CALCULATED_EXTERNAL',  # noqa: E501
        'first_trade_spot_from_fix': 'FIRST_TRADE_SPOT_FROM_FIX',  # noqa: E501
        'first_trade_spot_from_fix_external': 'FIRST_TRADE_SPOT_FROM_FIX_EXTERNAL',  # noqa: E501
        'first_trade_spot_from_go': 'FIRST_TRADE_SPOT_FROM_GO',  # noqa: E501
        'first_trade_spot_from_go_external': 'FIRST_TRADE_SPOT_FROM_GO_EXTERNAL',  # noqa: E501
        'first_trade_spot_from_polling': 'FIRST_TRADE_SPOT_FROM_POLLING',  # noqa: E501
        'first_trade_spot_from_polling_external': 'FIRST_TRADE_SPOT_FROM_POLLING_EXTERNAL',  # noqa: E501
        'first_trade_spot_from_streaming': 'FIRST_TRADE_SPOT_FROM_STREAMING',  # noqa: E501
        'first_trade_spot_from_streaming_external': 'FIRST_TRADE_SPOT_FROM_STREAMING_EXTERNAL',  # noqa: E501
        'host_migration_destination': 'HOST_MIGRATION_DESTINATION',  # noqa: E501
        'host_migration_source': 'HOST_MIGRATION_SOURCE',  # noqa: E501
        'host_migration_status': 'HOST_MIGRATION_STATUS',  # noqa: E501
        'instrument': 'INSTRUMENT',  # noqa: E501
        'instrument_external_data': 'INSTRUMENT_EXTERNAL_DATA',  # noqa: E501
        'instrument_mapping': 'INSTRUMENT_MAPPING',  # noqa: E501
        'instrument_mapping_history': 'INSTRUMENT_MAPPING_HISTORY',  # noqa: E501
        'instrument_source_backfill': 'INSTRUMENT_SOURCE_BACKFILL',  # noqa: E501
        'instrument_source_blob': 'INSTRUMENT_SOURCE_BLOB',  # noqa: E501
        'instrument_source_calculated': 'INSTRUMENT_SOURCE_CALCULATED',  # noqa: E501
        'instrument_source_fix': 'INSTRUMENT_SOURCE_FIX',  # noqa: E501
        'instrument_source_go': 'INSTRUMENT_SOURCE_GO',  # noqa: E501
        'instrument_source_polling': 'INSTRUMENT_SOURCE_POLLING',  # noqa: E501
        'instrument_source_streaming': 'INSTRUMENT_SOURCE_STREAMING',  # noqa: E501
        'instrument_status': 'INSTRUMENT_STATUS',  # noqa: E501
        'instrument_trade_spot_from_backfill_last_proxied_rest_request': 'INSTRUMENT_TRADE_SPOT_FROM_BACKFILL_LAST_PROXIED_REST_REQUEST',  # noqa: E501
        'instrument_trade_spot_from_backfill_rest_uri_last_request_ts': 'INSTRUMENT_TRADE_SPOT_FROM_BACKFILL_REST_URI_LAST_REQUEST_TS',  # noqa: E501
        'instrument_trade_spot_from_backfill_rest_uri_last_response_ts': 'INSTRUMENT_TRADE_SPOT_FROM_BACKFILL_REST_URI_LAST_RESPONSE_TS',  # noqa: E501
        'instrument_trade_spot_from_backfill_rest_uri_next_request_ts': 'INSTRUMENT_TRADE_SPOT_FROM_BACKFILL_REST_URI_NEXT_REQUEST_TS',  # noqa: E501
        'instrument_trade_spot_from_blob_last_proxied_rest_request': 'INSTRUMENT_TRADE_SPOT_FROM_BLOB_LAST_PROXIED_REST_REQUEST',  # noqa: E501
        'instrument_trade_spot_from_blob_rest_uri_last_request_ts': 'INSTRUMENT_TRADE_SPOT_FROM_BLOB_REST_URI_LAST_REQUEST_TS',  # noqa: E501
        'instrument_trade_spot_from_blob_rest_uri_last_response_ts': 'INSTRUMENT_TRADE_SPOT_FROM_BLOB_REST_URI_LAST_RESPONSE_TS',  # noqa: E501
        'instrument_trade_spot_from_blob_rest_uri_next_request_ts': 'INSTRUMENT_TRADE_SPOT_FROM_BLOB_REST_URI_NEXT_REQUEST_TS',  # noqa: E501
        'instrument_trade_spot_from_calculated_last_proxied_rest_request': 'INSTRUMENT_TRADE_SPOT_FROM_CALCULATED_LAST_PROXIED_REST_REQUEST',  # noqa: E501
        'instrument_trade_spot_from_calculated_rest_uri_last_request_ts': 'INSTRUMENT_TRADE_SPOT_FROM_CALCULATED_REST_URI_LAST_REQUEST_TS',  # noqa: E501
        'instrument_trade_spot_from_calculated_rest_uri_last_response_ts': 'INSTRUMENT_TRADE_SPOT_FROM_CALCULATED_REST_URI_LAST_RESPONSE_TS',  # noqa: E501
        'instrument_trade_spot_from_calculated_rest_uri_next_request_ts': 'INSTRUMENT_TRADE_SPOT_FROM_CALCULATED_REST_URI_NEXT_REQUEST_TS',  # noqa: E501
        'instrument_trade_spot_from_fix_last_proxied_rest_request': 'INSTRUMENT_TRADE_SPOT_FROM_FIX_LAST_PROXIED_REST_REQUEST',  # noqa: E501
        'instrument_trade_spot_from_fix_rest_uri_last_request_ts': 'INSTRUMENT_TRADE_SPOT_FROM_FIX_REST_URI_LAST_REQUEST_TS',  # noqa: E501
        'instrument_trade_spot_from_fix_rest_uri_last_response_ts': 'INSTRUMENT_TRADE_SPOT_FROM_FIX_REST_URI_LAST_RESPONSE_TS',  # noqa: E501
        'instrument_trade_spot_from_fix_rest_uri_next_request_ts': 'INSTRUMENT_TRADE_SPOT_FROM_FIX_REST_URI_NEXT_REQUEST_TS',  # noqa: E501
        'instrument_trade_spot_from_go_last_proxied_rest_request': 'INSTRUMENT_TRADE_SPOT_FROM_GO_LAST_PROXIED_REST_REQUEST',  # noqa: E501
        'instrument_trade_spot_from_go_rest_uri_last_request_ts': 'INSTRUMENT_TRADE_SPOT_FROM_GO_REST_URI_LAST_REQUEST_TS',  # noqa: E501
        'instrument_trade_spot_from_go_rest_uri_last_response_ts': 'INSTRUMENT_TRADE_SPOT_FROM_GO_REST_URI_LAST_RESPONSE_TS',  # noqa: E501
        'instrument_trade_spot_from_go_rest_uri_next_request_ts': 'INSTRUMENT_TRADE_SPOT_FROM_GO_REST_URI_NEXT_REQUEST_TS',  # noqa: E501
        'instrument_trade_spot_from_polling_last_proxied_rest_request': 'INSTRUMENT_TRADE_SPOT_FROM_POLLING_LAST_PROXIED_REST_REQUEST',  # noqa: E501
        'instrument_trade_spot_from_polling_rest_uri_last_request_ts': 'INSTRUMENT_TRADE_SPOT_FROM_POLLING_REST_URI_LAST_REQUEST_TS',  # noqa: E501
        'instrument_trade_spot_from_polling_rest_uri_last_response_ts': 'INSTRUMENT_TRADE_SPOT_FROM_POLLING_REST_URI_LAST_RESPONSE_TS',  # noqa: E501
        'instrument_trade_spot_from_polling_rest_uri_next_request_ts': 'INSTRUMENT_TRADE_SPOT_FROM_POLLING_REST_URI_NEXT_REQUEST_TS',  # noqa: E501
        'instrument_trade_spot_from_streaming_last_proxied_rest_request': 'INSTRUMENT_TRADE_SPOT_FROM_STREAMING_LAST_PROXIED_REST_REQUEST',  # noqa: E501
        'instrument_trade_spot_from_streaming_rest_uri_last_request_ts': 'INSTRUMENT_TRADE_SPOT_FROM_STREAMING_REST_URI_LAST_REQUEST_TS',  # noqa: E501
        'instrument_trade_spot_from_streaming_rest_uri_last_response_ts': 'INSTRUMENT_TRADE_SPOT_FROM_STREAMING_REST_URI_LAST_RESPONSE_TS',  # noqa: E501
        'instrument_trade_spot_from_streaming_rest_uri_next_request_ts': 'INSTRUMENT_TRADE_SPOT_FROM_STREAMING_REST_URI_NEXT_REQUEST_TS',  # noqa: E501
        'instrument_trade_spot_is_ready_for_streaming_integration': 'INSTRUMENT_TRADE_SPOT_IS_READY_FOR_STREAMING_INTEGRATION',  # noqa: E501
        'instrument_trade_spot_rest_uri': 'INSTRUMENT_TRADE_SPOT_REST_URI',  # noqa: E501
        'instrument_trade_spot_rest_url': 'INSTRUMENT_TRADE_SPOT_REST_URL',  # noqa: E501
        'instrument_trade_spot_streaming_subscription': 'INSTRUMENT_TRADE_SPOT_STREAMING_SUBSCRIPTION',  # noqa: E501
        'last_concurrent_batch_of_trades_spot_ms': 'LAST_CONCURRENT_BATCH_OF_TRADES_SPOT_MS',  # noqa: E501
        'last_seen_on_blob_ts': 'LAST_SEEN_ON_BLOB_TS',  # noqa: E501
        'last_seen_on_fix_ts': 'LAST_SEEN_ON_FIX_TS',  # noqa: E501
        'last_seen_on_hardcoded_ts': 'LAST_SEEN_ON_HARDCODED_TS',  # noqa: E501
        'last_seen_on_index_composition_ts': 'LAST_SEEN_ON_INDEX_COMPOSITION_TS',  # noqa: E501
        'last_seen_on_nsq_ts': 'LAST_SEEN_ON_NSQ_TS',  # noqa: E501
        'last_seen_on_polling_ts': 'LAST_SEEN_ON_POLLING_TS',  # noqa: E501
        'last_seen_on_streaming_ts': 'LAST_SEEN_ON_STREAMING_TS',  # noqa: E501
        'last_trade_spot_from_backfill': 'LAST_TRADE_SPOT_FROM_BACKFILL',  # noqa: E501
        'last_trade_spot_from_backfill_external': 'LAST_TRADE_SPOT_FROM_BACKFILL_EXTERNAL',  # noqa: E501
        'last_trade_spot_from_blob': 'LAST_TRADE_SPOT_FROM_BLOB',  # noqa: E501
        'last_trade_spot_from_blob_external': 'LAST_TRADE_SPOT_FROM_BLOB_EXTERNAL',  # noqa: E501
        'last_trade_spot_from_calculated': 'LAST_TRADE_SPOT_FROM_CALCULATED',  # noqa: E501
        'last_trade_spot_from_calculated_external': 'LAST_TRADE_SPOT_FROM_CALCULATED_EXTERNAL',  # noqa: E501
        'last_trade_spot_from_fix': 'LAST_TRADE_SPOT_FROM_FIX',  # noqa: E501
        'last_trade_spot_from_fix_external': 'LAST_TRADE_SPOT_FROM_FIX_EXTERNAL',  # noqa: E501
        'last_trade_spot_from_go': 'LAST_TRADE_SPOT_FROM_GO',  # noqa: E501
        'last_trade_spot_from_go_external': 'LAST_TRADE_SPOT_FROM_GO_EXTERNAL',  # noqa: E501
        'last_trade_spot_from_polling': 'LAST_TRADE_SPOT_FROM_POLLING',  # noqa: E501
        'last_trade_spot_from_polling_external': 'LAST_TRADE_SPOT_FROM_POLLING_EXTERNAL',  # noqa: E501
        'last_trade_spot_from_streaming': 'LAST_TRADE_SPOT_FROM_STREAMING',  # noqa: E501
        'last_trade_spot_from_streaming_external': 'LAST_TRADE_SPOT_FROM_STREAMING_EXTERNAL',  # noqa: E501
        'metadata_version': 'METADATA_VERSION',  # noqa: E501
        'processing_trades_from_blob_status': 'PROCESSING_TRADES_FROM_BLOB_STATUS',  # noqa: E501
        'total_trades_spot': 'TOTAL_TRADES_SPOT',  # noqa: E501
        'unstructured_trade_spot_from_backfill_internal_data': 'UNSTRUCTURED_TRADE_SPOT_FROM_BACKFILL_INTERNAL_DATA',  # noqa: E501
        'unstructured_trade_spot_from_blob_internal_data': 'UNSTRUCTURED_TRADE_SPOT_FROM_BLOB_INTERNAL_DATA',  # noqa: E501
        'unstructured_trade_spot_from_calculated_internal_data': 'UNSTRUCTURED_TRADE_SPOT_FROM_CALCULATED_INTERNAL_DATA',  # noqa: E501
        'unstructured_trade_spot_from_fix_internal_data': 'UNSTRUCTURED_TRADE_SPOT_FROM_FIX_INTERNAL_DATA',  # noqa: E501
        'unstructured_trade_spot_from_go_internal_data': 'UNSTRUCTURED_TRADE_SPOT_FROM_GO_INTERNAL_DATA',  # noqa: E501
        'unstructured_trade_spot_from_polling_internal_data': 'UNSTRUCTURED_TRADE_SPOT_FROM_POLLING_INTERNAL_DATA',  # noqa: E501
        'unstructured_trade_spot_from_streaming_internal_data': 'UNSTRUCTURED_TRADE_SPOT_FROM_STREAMING_INTERNAL_DATA',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """SPOTINSTRUMENTMETADATA - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            first_seen_on_blob_ts (int): This is the first time instrument was seen on instrumentListSourceType BLOB.. [optional]  # noqa: E501
            first_seen_on_fix_ts (int): This is the first time instrument was seen on instrumentListSourceType FIX.. [optional]  # noqa: E501
            first_seen_on_hardcoded_ts (int): This is the first time instrument was seen on instrumentListSourceType HARDCODED.. [optional]  # noqa: E501
            first_seen_on_index_composition_ts (int): This is the first time instrument was seen on instrumentListSourceType INDEX_COMPOSITION.. [optional]  # noqa: E501
            first_seen_on_nsq_ts (int): This is the first time instrument was seen on instrumentListSourceType NSQ.. [optional]  # noqa: E501
            first_seen_on_polling_ts (int): This is the first time instrument was seen on instrumentListSourceType POLLING.. [optional]  # noqa: E501
            first_seen_on_streaming_ts (int): This is the first time instrument was seen on instrumentListSourceType STREAMING.. [optional]  # noqa: E501
            first_trade_spot_from_backfill ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is the first TRADE_SPOT that we have seen on the specific source type in internal format.. [optional]  # noqa: E501
            first_trade_spot_from_backfill_external ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is the first TRADE_SPOT that we have seen on the specific source type in external format.. [optional]  # noqa: E501
            first_trade_spot_from_blob ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is the first TRADE_SPOT that we have seen on the specific source type in internal format.. [optional]  # noqa: E501
            first_trade_spot_from_blob_external ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is the first TRADE_SPOT that we have seen on the specific source type in external format.. [optional]  # noqa: E501
            first_trade_spot_from_calculated ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is the first TRADE_SPOT that we have seen on the specific source type in internal format.. [optional]  # noqa: E501
            first_trade_spot_from_calculated_external ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is the first TRADE_SPOT that we have seen on the specific source type in external format.. [optional]  # noqa: E501
            first_trade_spot_from_fix ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is the first TRADE_SPOT that we have seen on the specific source type in internal format.. [optional]  # noqa: E501
            first_trade_spot_from_fix_external ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is the first TRADE_SPOT that we have seen on the specific source type in external format.. [optional]  # noqa: E501
            first_trade_spot_from_go ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is the first TRADE_SPOT that we have seen on the specific source type in internal format.. [optional]  # noqa: E501
            first_trade_spot_from_go_external ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is the first TRADE_SPOT that we have seen on the specific source type in external format.. [optional]  # noqa: E501
            first_trade_spot_from_polling ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is the first TRADE_SPOT that we have seen on the specific source type in internal format.. [optional]  # noqa: E501
            first_trade_spot_from_polling_external ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is the first TRADE_SPOT that we have seen on the specific source type in external format.. [optional]  # noqa: E501
            first_trade_spot_from_streaming ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is the first TRADE_SPOT that we have seen on the specific source type in internal format.. [optional]  # noqa: E501
            first_trade_spot_from_streaming_external ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is the first TRADE_SPOT that we have seen on the specific source type in external format.. [optional]  # noqa: E501
            host_migration_destination (str): The migration destination vm hostname.. [optional]  # noqa: E501
            host_migration_source (str): The migration source vm hostname.. [optional]  # noqa: E501
            host_migration_status (str): The migration status of the symbol, we only poll / stream / connect empty or SETTLED. [optional]  # noqa: E501
            instrument (str): The instrument ID as it is on the exchange with small modifications - we do not allow the following characters inside isntrument ids: ,/&?. [optional]  # noqa: E501
            instrument_external_data (str): The full data we get from the polling endpoint for this specific instrument. This is a JSON stringified object with different properties per exchange.. [optional]  # noqa: E501
            instrument_mapping ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): The current mapping information for this instrument. [optional] if omitted the server will use the default value of {}  # noqa: E501
            instrument_mapping_history ([str]): Historical mapping information for this instrument. [optional] if omitted the server will use the default value of []  # noqa: E501
            instrument_source_backfill (str): Where do we get the instrument id / INSTRUMENT_{messageName}_REST_URI / INSTRUMENT_{messageName}_STREAMING_SUBSCRIPTION etc from.. [optional]  # noqa: E501
            instrument_source_blob (str): Where do we get the instrument id / INSTRUMENT_{messageName}_REST_URI / INSTRUMENT_{messageName}_STREAMING_SUBSCRIPTION etc from.. [optional]  # noqa: E501
            instrument_source_calculated (str): Where do we get the instrument id / INSTRUMENT_{messageName}_REST_URI / INSTRUMENT_{messageName}_STREAMING_SUBSCRIPTION etc from.. [optional]  # noqa: E501
            instrument_source_fix (str): Where do we get the instrument id / INSTRUMENT_{messageName}_REST_URI / INSTRUMENT_{messageName}_STREAMING_SUBSCRIPTION etc from.. [optional]  # noqa: E501
            instrument_source_go (str): Where do we get the instrument id / INSTRUMENT_{messageName}_REST_URI / INSTRUMENT_{messageName}_STREAMING_SUBSCRIPTION etc from.. [optional]  # noqa: E501
            instrument_source_polling (str): Where do we get the instrument id / INSTRUMENT_{messageName}_REST_URI / INSTRUMENT_{messageName}_STREAMING_SUBSCRIPTION etc from.. [optional]  # noqa: E501
            instrument_source_streaming (str): Where do we get the instrument id / INSTRUMENT_{messageName}_REST_URI / INSTRUMENT_{messageName}_STREAMING_SUBSCRIPTION etc from.. [optional]  # noqa: E501
            instrument_status (str): The status of the symbol, we only poll / stream / connect to the ACTIVE ones, for the RETIRED / IGNORED / EXPIRED  one we no longer query for data.. [optional] if omitted the server will use the default value of "ACTIVE"  # noqa: E501
            instrument_trade_spot_from_backfill_last_proxied_rest_request ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): The last proxied REST request we sent to the proxy swarm to get TRADE_SPOT for the instrument.. [optional]  # noqa: E501
            instrument_trade_spot_from_backfill_rest_uri_last_request_ts (int): The last time we sent a request to the proxy swarm to get TRADE_SPOT for the instrument.. [optional]  # noqa: E501
            instrument_trade_spot_from_backfill_rest_uri_last_response_ts (int): The last time we received a request from the proxy swarm with TRADE_SPOT for this instrument.. [optional]  # noqa: E501
            instrument_trade_spot_from_backfill_rest_uri_next_request_ts (int): The next time we expect to make a request for TRADE_SPOT on this instrument.. [optional]  # noqa: E501
            instrument_trade_spot_from_blob_last_proxied_rest_request ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): The last proxied REST request we sent to the proxy swarm to get TRADE_SPOT for the instrument.. [optional]  # noqa: E501
            instrument_trade_spot_from_blob_rest_uri_last_request_ts (int): The last time we sent a request to the proxy swarm to get TRADE_SPOT for the instrument.. [optional]  # noqa: E501
            instrument_trade_spot_from_blob_rest_uri_last_response_ts (int): The last time we received a request from the proxy swarm with TRADE_SPOT for this instrument.. [optional]  # noqa: E501
            instrument_trade_spot_from_blob_rest_uri_next_request_ts (int): The next time we expect to make a request for TRADE_SPOT on this instrument.. [optional]  # noqa: E501
            instrument_trade_spot_from_calculated_last_proxied_rest_request ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): The last proxied REST request we sent to the proxy swarm to get TRADE_SPOT for the instrument.. [optional]  # noqa: E501
            instrument_trade_spot_from_calculated_rest_uri_last_request_ts (int): The last time we sent a request to the proxy swarm to get TRADE_SPOT for the instrument.. [optional]  # noqa: E501
            instrument_trade_spot_from_calculated_rest_uri_last_response_ts (int): The last time we received a request from the proxy swarm with TRADE_SPOT for this instrument.. [optional]  # noqa: E501
            instrument_trade_spot_from_calculated_rest_uri_next_request_ts (int): The next time we expect to make a request for TRADE_SPOT on this instrument.. [optional]  # noqa: E501
            instrument_trade_spot_from_fix_last_proxied_rest_request ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): The last proxied REST request we sent to the proxy swarm to get TRADE_SPOT for the instrument.. [optional]  # noqa: E501
            instrument_trade_spot_from_fix_rest_uri_last_request_ts (int): The last time we sent a request to the proxy swarm to get TRADE_SPOT for the instrument.. [optional]  # noqa: E501
            instrument_trade_spot_from_fix_rest_uri_last_response_ts (int): The last time we received a request from the proxy swarm with TRADE_SPOT for this instrument.. [optional]  # noqa: E501
            instrument_trade_spot_from_fix_rest_uri_next_request_ts (int): The next time we expect to make a request for TRADE_SPOT on this instrument.. [optional]  # noqa: E501
            instrument_trade_spot_from_go_last_proxied_rest_request ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): The last proxied REST request we sent to the proxy swarm to get TRADE_SPOT for the instrument.. [optional]  # noqa: E501
            instrument_trade_spot_from_go_rest_uri_last_request_ts (int): The last time we sent a request to the proxy swarm to get TRADE_SPOT for the instrument.. [optional]  # noqa: E501
            instrument_trade_spot_from_go_rest_uri_last_response_ts (int): The last time we received a request from the proxy swarm with TRADE_SPOT for this instrument.. [optional]  # noqa: E501
            instrument_trade_spot_from_go_rest_uri_next_request_ts (int): The next time we expect to make a request for TRADE_SPOT on this instrument.. [optional]  # noqa: E501
            instrument_trade_spot_from_polling_last_proxied_rest_request ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): The last proxied REST request we sent to the proxy swarm to get TRADE_SPOT for the instrument.. [optional]  # noqa: E501
            instrument_trade_spot_from_polling_rest_uri_last_request_ts (int): The last time we sent a request to the proxy swarm to get TRADE_SPOT for the instrument.. [optional]  # noqa: E501
            instrument_trade_spot_from_polling_rest_uri_last_response_ts (int): The last time we received a request from the proxy swarm with TRADE_SPOT for this instrument.. [optional]  # noqa: E501
            instrument_trade_spot_from_polling_rest_uri_next_request_ts (int): The next time we expect to make a request for TRADE_SPOT on this instrument.. [optional]  # noqa: E501
            instrument_trade_spot_from_streaming_last_proxied_rest_request ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): The last proxied REST request we sent to the proxy swarm to get TRADE_SPOT for the instrument.. [optional]  # noqa: E501
            instrument_trade_spot_from_streaming_rest_uri_last_request_ts (int): The last time we sent a request to the proxy swarm to get TRADE_SPOT for the instrument.. [optional]  # noqa: E501
            instrument_trade_spot_from_streaming_rest_uri_last_response_ts (int): The last time we received a request from the proxy swarm with TRADE_SPOT for this instrument.. [optional]  # noqa: E501
            instrument_trade_spot_from_streaming_rest_uri_next_request_ts (int): The next time we expect to make a request for TRADE_SPOT on this instrument.. [optional]  # noqa: E501
            instrument_trade_spot_is_ready_for_streaming_integration (bool): This flags the exchange instrument as in ready to consume TRADE_SPOT via a streaming integration.. [optional] if omitted the server will use the default value of False  # noqa: E501
            instrument_trade_spot_rest_uri (str): This is used to build up the request in some cases, this is where we put the id we use when querying for TRADE_SPOT.. [optional]  # noqa: E501
            instrument_trade_spot_rest_url (str): The URL we send to the proxy swarm to get TRADE_SPOT for the instrument.. [optional]  # noqa: E501
            instrument_trade_spot_streaming_subscription (str): This is used to build up the subscription in some cases, this is where we put the id we use when subscribing for TRADE_SPOT on this instrument.. [optional]  # noqa: E501
            last_concurrent_batch_of_trades_spot_ms (int): The timestamp last encountered where the batch of trades from TRADES_SPOT all occured at the same time. This is an issue when making the next request that requires polling by timestamp as a start/from parameter. [optional]  # noqa: E501
            last_seen_on_blob_ts (int): This is the last time instrument was seen on instrumentListSourceType BLOB.. [optional]  # noqa: E501
            last_seen_on_fix_ts (int): This is the last time instrument was seen on instrumentListSourceType FIX.. [optional]  # noqa: E501
            last_seen_on_hardcoded_ts (int): This is the last time instrument was seen on instrumentListSourceType HARDCODED.. [optional]  # noqa: E501
            last_seen_on_index_composition_ts (int): This is the last time instrument was seen on instrumentListSourceType INDEX_COMPOSITION.. [optional]  # noqa: E501
            last_seen_on_nsq_ts (int): This is the last time instrument was seen on instrumentListSourceType NSQ.. [optional]  # noqa: E501
            last_seen_on_polling_ts (int): This is the last time instrument was seen on instrumentListSourceType POLLING.. [optional]  # noqa: E501
            last_seen_on_streaming_ts (int): This is the last time instrument was seen on instrumentListSourceType STREAMING.. [optional]  # noqa: E501
            last_trade_spot_from_backfill ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is the last TRADE_SPOT that we have seen on the specific source type in internal format.. [optional]  # noqa: E501
            last_trade_spot_from_backfill_external ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is the last TRADE_SPOT that we have seen on the specific trade source in external format.. [optional]  # noqa: E501
            last_trade_spot_from_blob ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is the last TRADE_SPOT that we have seen on the specific source type in internal format.. [optional]  # noqa: E501
            last_trade_spot_from_blob_external ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is the last TRADE_SPOT that we have seen on the specific trade source in external format.. [optional]  # noqa: E501
            last_trade_spot_from_calculated ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is the last TRADE_SPOT that we have seen on the specific source type in internal format.. [optional]  # noqa: E501
            last_trade_spot_from_calculated_external ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is the last TRADE_SPOT that we have seen on the specific trade source in external format.. [optional]  # noqa: E501
            last_trade_spot_from_fix ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is the last TRADE_SPOT that we have seen on the specific source type in internal format.. [optional]  # noqa: E501
            last_trade_spot_from_fix_external ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is the last TRADE_SPOT that we have seen on the specific trade source in external format.. [optional]  # noqa: E501
            last_trade_spot_from_go ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is the last TRADE_SPOT that we have seen on the specific source type in internal format.. [optional]  # noqa: E501
            last_trade_spot_from_go_external ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is the last TRADE_SPOT that we have seen on the specific trade source in external format.. [optional]  # noqa: E501
            last_trade_spot_from_polling ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is the last TRADE_SPOT that we have seen on the specific source type in internal format.. [optional]  # noqa: E501
            last_trade_spot_from_polling_external ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is the last TRADE_SPOT that we have seen on the specific trade source in external format.. [optional]  # noqa: E501
            last_trade_spot_from_streaming ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is the last TRADE_SPOT that we have seen on the specific source type in internal format.. [optional]  # noqa: E501
            last_trade_spot_from_streaming_external ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is the last TRADE_SPOT that we have seen on the specific trade source in external format.. [optional]  # noqa: E501
            metadata_version (int): The version of metadata, used for version conversions/migrates.. [optional] if omitted the server will use the default value of 4  # noqa: E501
            processing_trades_from_blob_status (str): This states the status of blob migration for this intrument on this exchange.. [optional]  # noqa: E501
            total_trades_spot (int): This is both the CCSEQ and the total TRADES_SPOT we have processed on this instrument. [optional]  # noqa: E501
            unstructured_trade_spot_from_backfill_internal_data ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is any extra helper TRADE_SPOT data that we would need for creating polling requests or subscribing with non standard information and anything that is very specific to one exchange API/Integration and it does not fit any of the other existing fields and is definitly only updated or written in only one service.. [optional]  # noqa: E501
            unstructured_trade_spot_from_blob_internal_data ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is any extra helper TRADE_SPOT data that we would need for creating polling requests or subscribing with non standard information and anything that is very specific to one exchange API/Integration and it does not fit any of the other existing fields and is definitly only updated or written in only one service.. [optional]  # noqa: E501
            unstructured_trade_spot_from_calculated_internal_data ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is any extra helper TRADE_SPOT data that we would need for creating polling requests or subscribing with non standard information and anything that is very specific to one exchange API/Integration and it does not fit any of the other existing fields and is definitly only updated or written in only one service.. [optional]  # noqa: E501
            unstructured_trade_spot_from_fix_internal_data ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is any extra helper TRADE_SPOT data that we would need for creating polling requests or subscribing with non standard information and anything that is very specific to one exchange API/Integration and it does not fit any of the other existing fields and is definitly only updated or written in only one service.. [optional]  # noqa: E501
            unstructured_trade_spot_from_go_internal_data ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is any extra helper TRADE_SPOT data that we would need for creating polling requests or subscribing with non standard information and anything that is very specific to one exchange API/Integration and it does not fit any of the other existing fields and is definitly only updated or written in only one service.. [optional]  # noqa: E501
            unstructured_trade_spot_from_polling_internal_data ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is any extra helper TRADE_SPOT data that we would need for creating polling requests or subscribing with non standard information and anything that is very specific to one exchange API/Integration and it does not fit any of the other existing fields and is definitly only updated or written in only one service.. [optional]  # noqa: E501
            unstructured_trade_spot_from_streaming_internal_data ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is any extra helper TRADE_SPOT data that we would need for creating polling requests or subscribing with non standard information and anything that is very specific to one exchange API/Integration and it does not fit any of the other existing fields and is definitly only updated or written in only one service.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', True)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """SPOTINSTRUMENTMETADATA - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            first_seen_on_blob_ts (int): This is the first time instrument was seen on instrumentListSourceType BLOB.. [optional]  # noqa: E501
            first_seen_on_fix_ts (int): This is the first time instrument was seen on instrumentListSourceType FIX.. [optional]  # noqa: E501
            first_seen_on_hardcoded_ts (int): This is the first time instrument was seen on instrumentListSourceType HARDCODED.. [optional]  # noqa: E501
            first_seen_on_index_composition_ts (int): This is the first time instrument was seen on instrumentListSourceType INDEX_COMPOSITION.. [optional]  # noqa: E501
            first_seen_on_nsq_ts (int): This is the first time instrument was seen on instrumentListSourceType NSQ.. [optional]  # noqa: E501
            first_seen_on_polling_ts (int): This is the first time instrument was seen on instrumentListSourceType POLLING.. [optional]  # noqa: E501
            first_seen_on_streaming_ts (int): This is the first time instrument was seen on instrumentListSourceType STREAMING.. [optional]  # noqa: E501
            first_trade_spot_from_backfill ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is the first TRADE_SPOT that we have seen on the specific source type in internal format.. [optional]  # noqa: E501
            first_trade_spot_from_backfill_external ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is the first TRADE_SPOT that we have seen on the specific source type in external format.. [optional]  # noqa: E501
            first_trade_spot_from_blob ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is the first TRADE_SPOT that we have seen on the specific source type in internal format.. [optional]  # noqa: E501
            first_trade_spot_from_blob_external ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is the first TRADE_SPOT that we have seen on the specific source type in external format.. [optional]  # noqa: E501
            first_trade_spot_from_calculated ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is the first TRADE_SPOT that we have seen on the specific source type in internal format.. [optional]  # noqa: E501
            first_trade_spot_from_calculated_external ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is the first TRADE_SPOT that we have seen on the specific source type in external format.. [optional]  # noqa: E501
            first_trade_spot_from_fix ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is the first TRADE_SPOT that we have seen on the specific source type in internal format.. [optional]  # noqa: E501
            first_trade_spot_from_fix_external ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is the first TRADE_SPOT that we have seen on the specific source type in external format.. [optional]  # noqa: E501
            first_trade_spot_from_go ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is the first TRADE_SPOT that we have seen on the specific source type in internal format.. [optional]  # noqa: E501
            first_trade_spot_from_go_external ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is the first TRADE_SPOT that we have seen on the specific source type in external format.. [optional]  # noqa: E501
            first_trade_spot_from_polling ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is the first TRADE_SPOT that we have seen on the specific source type in internal format.. [optional]  # noqa: E501
            first_trade_spot_from_polling_external ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is the first TRADE_SPOT that we have seen on the specific source type in external format.. [optional]  # noqa: E501
            first_trade_spot_from_streaming ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is the first TRADE_SPOT that we have seen on the specific source type in internal format.. [optional]  # noqa: E501
            first_trade_spot_from_streaming_external ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is the first TRADE_SPOT that we have seen on the specific source type in external format.. [optional]  # noqa: E501
            host_migration_destination (str): The migration destination vm hostname.. [optional]  # noqa: E501
            host_migration_source (str): The migration source vm hostname.. [optional]  # noqa: E501
            host_migration_status (str): The migration status of the symbol, we only poll / stream / connect empty or SETTLED. [optional]  # noqa: E501
            instrument (str): The instrument ID as it is on the exchange with small modifications - we do not allow the following characters inside isntrument ids: ,/&?. [optional]  # noqa: E501
            instrument_external_data (str): The full data we get from the polling endpoint for this specific instrument. This is a JSON stringified object with different properties per exchange.. [optional]  # noqa: E501
            instrument_mapping ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): The current mapping information for this instrument. [optional] if omitted the server will use the default value of {}  # noqa: E501
            instrument_mapping_history ([str]): Historical mapping information for this instrument. [optional] if omitted the server will use the default value of []  # noqa: E501
            instrument_source_backfill (str): Where do we get the instrument id / INSTRUMENT_{messageName}_REST_URI / INSTRUMENT_{messageName}_STREAMING_SUBSCRIPTION etc from.. [optional]  # noqa: E501
            instrument_source_blob (str): Where do we get the instrument id / INSTRUMENT_{messageName}_REST_URI / INSTRUMENT_{messageName}_STREAMING_SUBSCRIPTION etc from.. [optional]  # noqa: E501
            instrument_source_calculated (str): Where do we get the instrument id / INSTRUMENT_{messageName}_REST_URI / INSTRUMENT_{messageName}_STREAMING_SUBSCRIPTION etc from.. [optional]  # noqa: E501
            instrument_source_fix (str): Where do we get the instrument id / INSTRUMENT_{messageName}_REST_URI / INSTRUMENT_{messageName}_STREAMING_SUBSCRIPTION etc from.. [optional]  # noqa: E501
            instrument_source_go (str): Where do we get the instrument id / INSTRUMENT_{messageName}_REST_URI / INSTRUMENT_{messageName}_STREAMING_SUBSCRIPTION etc from.. [optional]  # noqa: E501
            instrument_source_polling (str): Where do we get the instrument id / INSTRUMENT_{messageName}_REST_URI / INSTRUMENT_{messageName}_STREAMING_SUBSCRIPTION etc from.. [optional]  # noqa: E501
            instrument_source_streaming (str): Where do we get the instrument id / INSTRUMENT_{messageName}_REST_URI / INSTRUMENT_{messageName}_STREAMING_SUBSCRIPTION etc from.. [optional]  # noqa: E501
            instrument_status (str): The status of the symbol, we only poll / stream / connect to the ACTIVE ones, for the RETIRED / IGNORED / EXPIRED  one we no longer query for data.. [optional] if omitted the server will use the default value of "ACTIVE"  # noqa: E501
            instrument_trade_spot_from_backfill_last_proxied_rest_request ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): The last proxied REST request we sent to the proxy swarm to get TRADE_SPOT for the instrument.. [optional]  # noqa: E501
            instrument_trade_spot_from_backfill_rest_uri_last_request_ts (int): The last time we sent a request to the proxy swarm to get TRADE_SPOT for the instrument.. [optional]  # noqa: E501
            instrument_trade_spot_from_backfill_rest_uri_last_response_ts (int): The last time we received a request from the proxy swarm with TRADE_SPOT for this instrument.. [optional]  # noqa: E501
            instrument_trade_spot_from_backfill_rest_uri_next_request_ts (int): The next time we expect to make a request for TRADE_SPOT on this instrument.. [optional]  # noqa: E501
            instrument_trade_spot_from_blob_last_proxied_rest_request ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): The last proxied REST request we sent to the proxy swarm to get TRADE_SPOT for the instrument.. [optional]  # noqa: E501
            instrument_trade_spot_from_blob_rest_uri_last_request_ts (int): The last time we sent a request to the proxy swarm to get TRADE_SPOT for the instrument.. [optional]  # noqa: E501
            instrument_trade_spot_from_blob_rest_uri_last_response_ts (int): The last time we received a request from the proxy swarm with TRADE_SPOT for this instrument.. [optional]  # noqa: E501
            instrument_trade_spot_from_blob_rest_uri_next_request_ts (int): The next time we expect to make a request for TRADE_SPOT on this instrument.. [optional]  # noqa: E501
            instrument_trade_spot_from_calculated_last_proxied_rest_request ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): The last proxied REST request we sent to the proxy swarm to get TRADE_SPOT for the instrument.. [optional]  # noqa: E501
            instrument_trade_spot_from_calculated_rest_uri_last_request_ts (int): The last time we sent a request to the proxy swarm to get TRADE_SPOT for the instrument.. [optional]  # noqa: E501
            instrument_trade_spot_from_calculated_rest_uri_last_response_ts (int): The last time we received a request from the proxy swarm with TRADE_SPOT for this instrument.. [optional]  # noqa: E501
            instrument_trade_spot_from_calculated_rest_uri_next_request_ts (int): The next time we expect to make a request for TRADE_SPOT on this instrument.. [optional]  # noqa: E501
            instrument_trade_spot_from_fix_last_proxied_rest_request ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): The last proxied REST request we sent to the proxy swarm to get TRADE_SPOT for the instrument.. [optional]  # noqa: E501
            instrument_trade_spot_from_fix_rest_uri_last_request_ts (int): The last time we sent a request to the proxy swarm to get TRADE_SPOT for the instrument.. [optional]  # noqa: E501
            instrument_trade_spot_from_fix_rest_uri_last_response_ts (int): The last time we received a request from the proxy swarm with TRADE_SPOT for this instrument.. [optional]  # noqa: E501
            instrument_trade_spot_from_fix_rest_uri_next_request_ts (int): The next time we expect to make a request for TRADE_SPOT on this instrument.. [optional]  # noqa: E501
            instrument_trade_spot_from_go_last_proxied_rest_request ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): The last proxied REST request we sent to the proxy swarm to get TRADE_SPOT for the instrument.. [optional]  # noqa: E501
            instrument_trade_spot_from_go_rest_uri_last_request_ts (int): The last time we sent a request to the proxy swarm to get TRADE_SPOT for the instrument.. [optional]  # noqa: E501
            instrument_trade_spot_from_go_rest_uri_last_response_ts (int): The last time we received a request from the proxy swarm with TRADE_SPOT for this instrument.. [optional]  # noqa: E501
            instrument_trade_spot_from_go_rest_uri_next_request_ts (int): The next time we expect to make a request for TRADE_SPOT on this instrument.. [optional]  # noqa: E501
            instrument_trade_spot_from_polling_last_proxied_rest_request ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): The last proxied REST request we sent to the proxy swarm to get TRADE_SPOT for the instrument.. [optional]  # noqa: E501
            instrument_trade_spot_from_polling_rest_uri_last_request_ts (int): The last time we sent a request to the proxy swarm to get TRADE_SPOT for the instrument.. [optional]  # noqa: E501
            instrument_trade_spot_from_polling_rest_uri_last_response_ts (int): The last time we received a request from the proxy swarm with TRADE_SPOT for this instrument.. [optional]  # noqa: E501
            instrument_trade_spot_from_polling_rest_uri_next_request_ts (int): The next time we expect to make a request for TRADE_SPOT on this instrument.. [optional]  # noqa: E501
            instrument_trade_spot_from_streaming_last_proxied_rest_request ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): The last proxied REST request we sent to the proxy swarm to get TRADE_SPOT for the instrument.. [optional]  # noqa: E501
            instrument_trade_spot_from_streaming_rest_uri_last_request_ts (int): The last time we sent a request to the proxy swarm to get TRADE_SPOT for the instrument.. [optional]  # noqa: E501
            instrument_trade_spot_from_streaming_rest_uri_last_response_ts (int): The last time we received a request from the proxy swarm with TRADE_SPOT for this instrument.. [optional]  # noqa: E501
            instrument_trade_spot_from_streaming_rest_uri_next_request_ts (int): The next time we expect to make a request for TRADE_SPOT on this instrument.. [optional]  # noqa: E501
            instrument_trade_spot_is_ready_for_streaming_integration (bool): This flags the exchange instrument as in ready to consume TRADE_SPOT via a streaming integration.. [optional] if omitted the server will use the default value of False  # noqa: E501
            instrument_trade_spot_rest_uri (str): This is used to build up the request in some cases, this is where we put the id we use when querying for TRADE_SPOT.. [optional]  # noqa: E501
            instrument_trade_spot_rest_url (str): The URL we send to the proxy swarm to get TRADE_SPOT for the instrument.. [optional]  # noqa: E501
            instrument_trade_spot_streaming_subscription (str): This is used to build up the subscription in some cases, this is where we put the id we use when subscribing for TRADE_SPOT on this instrument.. [optional]  # noqa: E501
            last_concurrent_batch_of_trades_spot_ms (int): The timestamp last encountered where the batch of trades from TRADES_SPOT all occured at the same time. This is an issue when making the next request that requires polling by timestamp as a start/from parameter. [optional]  # noqa: E501
            last_seen_on_blob_ts (int): This is the last time instrument was seen on instrumentListSourceType BLOB.. [optional]  # noqa: E501
            last_seen_on_fix_ts (int): This is the last time instrument was seen on instrumentListSourceType FIX.. [optional]  # noqa: E501
            last_seen_on_hardcoded_ts (int): This is the last time instrument was seen on instrumentListSourceType HARDCODED.. [optional]  # noqa: E501
            last_seen_on_index_composition_ts (int): This is the last time instrument was seen on instrumentListSourceType INDEX_COMPOSITION.. [optional]  # noqa: E501
            last_seen_on_nsq_ts (int): This is the last time instrument was seen on instrumentListSourceType NSQ.. [optional]  # noqa: E501
            last_seen_on_polling_ts (int): This is the last time instrument was seen on instrumentListSourceType POLLING.. [optional]  # noqa: E501
            last_seen_on_streaming_ts (int): This is the last time instrument was seen on instrumentListSourceType STREAMING.. [optional]  # noqa: E501
            last_trade_spot_from_backfill ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is the last TRADE_SPOT that we have seen on the specific source type in internal format.. [optional]  # noqa: E501
            last_trade_spot_from_backfill_external ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is the last TRADE_SPOT that we have seen on the specific trade source in external format.. [optional]  # noqa: E501
            last_trade_spot_from_blob ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is the last TRADE_SPOT that we have seen on the specific source type in internal format.. [optional]  # noqa: E501
            last_trade_spot_from_blob_external ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is the last TRADE_SPOT that we have seen on the specific trade source in external format.. [optional]  # noqa: E501
            last_trade_spot_from_calculated ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is the last TRADE_SPOT that we have seen on the specific source type in internal format.. [optional]  # noqa: E501
            last_trade_spot_from_calculated_external ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is the last TRADE_SPOT that we have seen on the specific trade source in external format.. [optional]  # noqa: E501
            last_trade_spot_from_fix ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is the last TRADE_SPOT that we have seen on the specific source type in internal format.. [optional]  # noqa: E501
            last_trade_spot_from_fix_external ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is the last TRADE_SPOT that we have seen on the specific trade source in external format.. [optional]  # noqa: E501
            last_trade_spot_from_go ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is the last TRADE_SPOT that we have seen on the specific source type in internal format.. [optional]  # noqa: E501
            last_trade_spot_from_go_external ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is the last TRADE_SPOT that we have seen on the specific trade source in external format.. [optional]  # noqa: E501
            last_trade_spot_from_polling ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is the last TRADE_SPOT that we have seen on the specific source type in internal format.. [optional]  # noqa: E501
            last_trade_spot_from_polling_external ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is the last TRADE_SPOT that we have seen on the specific trade source in external format.. [optional]  # noqa: E501
            last_trade_spot_from_streaming ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is the last TRADE_SPOT that we have seen on the specific source type in internal format.. [optional]  # noqa: E501
            last_trade_spot_from_streaming_external ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is the last TRADE_SPOT that we have seen on the specific trade source in external format.. [optional]  # noqa: E501
            metadata_version (int): The version of metadata, used for version conversions/migrates.. [optional] if omitted the server will use the default value of 4  # noqa: E501
            processing_trades_from_blob_status (str): This states the status of blob migration for this intrument on this exchange.. [optional]  # noqa: E501
            total_trades_spot (int): This is both the CCSEQ and the total TRADES_SPOT we have processed on this instrument. [optional]  # noqa: E501
            unstructured_trade_spot_from_backfill_internal_data ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is any extra helper TRADE_SPOT data that we would need for creating polling requests or subscribing with non standard information and anything that is very specific to one exchange API/Integration and it does not fit any of the other existing fields and is definitly only updated or written in only one service.. [optional]  # noqa: E501
            unstructured_trade_spot_from_blob_internal_data ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is any extra helper TRADE_SPOT data that we would need for creating polling requests or subscribing with non standard information and anything that is very specific to one exchange API/Integration and it does not fit any of the other existing fields and is definitly only updated or written in only one service.. [optional]  # noqa: E501
            unstructured_trade_spot_from_calculated_internal_data ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is any extra helper TRADE_SPOT data that we would need for creating polling requests or subscribing with non standard information and anything that is very specific to one exchange API/Integration and it does not fit any of the other existing fields and is definitly only updated or written in only one service.. [optional]  # noqa: E501
            unstructured_trade_spot_from_fix_internal_data ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is any extra helper TRADE_SPOT data that we would need for creating polling requests or subscribing with non standard information and anything that is very specific to one exchange API/Integration and it does not fit any of the other existing fields and is definitly only updated or written in only one service.. [optional]  # noqa: E501
            unstructured_trade_spot_from_go_internal_data ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is any extra helper TRADE_SPOT data that we would need for creating polling requests or subscribing with non standard information and anything that is very specific to one exchange API/Integration and it does not fit any of the other existing fields and is definitly only updated or written in only one service.. [optional]  # noqa: E501
            unstructured_trade_spot_from_polling_internal_data ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is any extra helper TRADE_SPOT data that we would need for creating polling requests or subscribing with non standard information and anything that is very specific to one exchange API/Integration and it does not fit any of the other existing fields and is definitly only updated or written in only one service.. [optional]  # noqa: E501
            unstructured_trade_spot_from_streaming_internal_data ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): This is any extra helper TRADE_SPOT data that we would need for creating polling requests or subscribing with non standard information and anything that is very specific to one exchange API/Integration and it does not fit any of the other existing fields and is definitly only updated or written in only one service.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
