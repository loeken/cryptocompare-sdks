/*
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 * CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: data@cryptocompare.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;

/**
 * SPOTINSTRUMENTTRADE
 */
@JsonPropertyOrder({
  SPOTINSTRUMENTTRADE.JSON_PROPERTY_B_A_S_E,
  SPOTINSTRUMENTTRADE.JSON_PROPERTY_C_C_S_E_Q,
  SPOTINSTRUMENTTRADE.JSON_PROPERTY_I_D,
  SPOTINSTRUMENTTRADE.JSON_PROPERTY_I_N_S_T_R_U_M_E_N_T,
  SPOTINSTRUMENTTRADE.JSON_PROPERTY_M_A_P_P_E_D_I_N_S_T_R_U_M_E_N_T,
  SPOTINSTRUMENTTRADE.JSON_PROPERTY_M_A_R_K_E_T,
  SPOTINSTRUMENTTRADE.JSON_PROPERTY_P_R_I_C_E,
  SPOTINSTRUMENTTRADE.JSON_PROPERTY_Q_U_A_N_T_I_T_Y,
  SPOTINSTRUMENTTRADE.JSON_PROPERTY_Q_U_O_T_E,
  SPOTINSTRUMENTTRADE.JSON_PROPERTY_Q_U_O_T_E_Q_U_A_N_T_I_T_Y,
  SPOTINSTRUMENTTRADE.JSON_PROPERTY_R_E_C_E_I_V_E_D_T_I_M_E_S_T_A_M_P,
  SPOTINSTRUMENTTRADE.JSON_PROPERTY_R_E_C_E_I_V_E_D_T_I_M_E_S_T_A_M_P_N_S,
  SPOTINSTRUMENTTRADE.JSON_PROPERTY_S_I_D_E,
  SPOTINSTRUMENTTRADE.JSON_PROPERTY_S_O_U_R_C_E,
  SPOTINSTRUMENTTRADE.JSON_PROPERTY_T_I_M_E_S_T_A_M_P,
  SPOTINSTRUMENTTRADE.JSON_PROPERTY_T_I_M_E_S_T_A_M_P_N_S,
  SPOTINSTRUMENTTRADE.JSON_PROPERTY_T_Y_P_E
})
@JsonTypeName("SPOT_INSTRUMENT_TRADE")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2023-01-03T11:56:05.409869Z[Etc/UTC]")
@Introspected
public class SPOTINSTRUMENTTRADE {
    public static final String JSON_PROPERTY_B_A_S_E = "BASE";
    private String BASE;

    public static final String JSON_PROPERTY_C_C_S_E_Q = "CCSEQ";
    private Integer CCSEQ;

    public static final String JSON_PROPERTY_I_D = "ID";
    private String ID;

    public static final String JSON_PROPERTY_I_N_S_T_R_U_M_E_N_T = "INSTRUMENT";
    private String INSTRUMENT;

    public static final String JSON_PROPERTY_M_A_P_P_E_D_I_N_S_T_R_U_M_E_N_T = "MAPPED_INSTRUMENT";
    private String MAPPED_INSTRUMENT;

    public static final String JSON_PROPERTY_M_A_R_K_E_T = "MARKET";
    private String MARKET;

    public static final String JSON_PROPERTY_P_R_I_C_E = "PRICE";
    private Integer PRICE;

    public static final String JSON_PROPERTY_Q_U_A_N_T_I_T_Y = "QUANTITY";
    private Integer QUANTITY;

    public static final String JSON_PROPERTY_Q_U_O_T_E = "QUOTE";
    private String QUOTE;

    public static final String JSON_PROPERTY_Q_U_O_T_E_Q_U_A_N_T_I_T_Y = "QUOTE_QUANTITY";
    private Integer QUOTE_QUANTITY;

    public static final String JSON_PROPERTY_R_E_C_E_I_V_E_D_T_I_M_E_S_T_A_M_P = "RECEIVED_TIMESTAMP";
    private Integer RECEIVED_TIMESTAMP;

    public static final String JSON_PROPERTY_R_E_C_E_I_V_E_D_T_I_M_E_S_T_A_M_P_N_S = "RECEIVED_TIMESTAMP_NS";
    private Integer RECEIVED_TIMESTAMP_NS;

    public static final String JSON_PROPERTY_S_I_D_E = "SIDE";
    private String SIDE;

    public static final String JSON_PROPERTY_S_O_U_R_C_E = "SOURCE";
    private String SOURCE;

    public static final String JSON_PROPERTY_T_I_M_E_S_T_A_M_P = "TIMESTAMP";
    private Integer TIMESTAMP;

    public static final String JSON_PROPERTY_T_I_M_E_S_T_A_M_P_N_S = "TIMESTAMP_NS";
    private Integer TIMESTAMP_NS;

    public static final String JSON_PROPERTY_T_Y_P_E = "TYPE";
    private String TYPE;

    public SPOTINSTRUMENTTRADE() {
    }

    public SPOTINSTRUMENTTRADE BASE(String BASE) {
        this.BASE = BASE;
        return this;
    }

    /**
     * The mapped from asset (base / symbol/ coin). Only available on instruments that have been mapped (e.g. BTC).
     * @return BASE
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_B_A_S_E)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getBASE() {
        return BASE;
    }

    @JsonProperty(JSON_PROPERTY_B_A_S_E)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setBASE(String BASE) {
        this.BASE = BASE;
    }

    public SPOTINSTRUMENTTRADE CCSEQ(Integer CCSEQ) {
        this.CCSEQ = CCSEQ;
        return this;
    }

    /**
     * Our internal sequence number for this trade, this is unique per market / exchange and trading pair. Should always be increasing by 1 for each new trade we discover, not in chronological order.
     * @return CCSEQ
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_C_C_S_E_Q)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Integer getCCSEQ() {
        return CCSEQ;
    }

    @JsonProperty(JSON_PROPERTY_C_C_S_E_Q)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCCSEQ(Integer CCSEQ) {
        this.CCSEQ = CCSEQ;
    }

    public SPOTINSTRUMENTTRADE ID(String ID) {
        this.ID = ID;
        return this;
    }

    /**
     * The trade ID as reported by the market / exchange. If the exchange does not provide a trade ID, this will be the timestamp of the trade + a number from 0 - 999. This preserves uniqueness, assuming there would never be more than 999 trades in any given second.
     * @return ID
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_I_D)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getID() {
        return ID;
    }

    @JsonProperty(JSON_PROPERTY_I_D)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setID(String ID) {
        this.ID = ID;
    }

    public SPOTINSTRUMENTTRADE INSTRUMENT(String INSTRUMENT) {
        this.INSTRUMENT = INSTRUMENT;
        return this;
    }

    /**
     * The unmapped instrument ID as given by the exchange (e.g. BTCUSD, BTC_USD, XBT-ZUSD, BTC-USD).
     * @return INSTRUMENT
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_I_N_S_T_R_U_M_E_N_T)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getINSTRUMENT() {
        return INSTRUMENT;
    }

    @JsonProperty(JSON_PROPERTY_I_N_S_T_R_U_M_E_N_T)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setINSTRUMENT(String INSTRUMENT) {
        this.INSTRUMENT = INSTRUMENT;
    }

    public SPOTINSTRUMENTTRADE MAPPED_INSTRUMENT(String MAPPED_INSTRUMENT) {
        this.MAPPED_INSTRUMENT = MAPPED_INSTRUMENT;
        return this;
    }

    /**
     * The mapped instrument ID, as derived from our mapping rules. This takes the form: \&quot;BASE-QUOTE\&quot;. Only available on instruments that have been mapped (e.g. BTC-USD).
     * @return MAPPED_INSTRUMENT
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_M_A_P_P_E_D_I_N_S_T_R_U_M_E_N_T)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getMAPPEDINSTRUMENT() {
        return MAPPED_INSTRUMENT;
    }

    @JsonProperty(JSON_PROPERTY_M_A_P_P_E_D_I_N_S_T_R_U_M_E_N_T)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setMAPPEDINSTRUMENT(String MAPPED_INSTRUMENT) {
        this.MAPPED_INSTRUMENT = MAPPED_INSTRUMENT;
    }

    public SPOTINSTRUMENTTRADE MARKET(String MARKET) {
        this.MARKET = MARKET;
        return this;
    }

    /**
     * The market / exchange under consideration (e.g. Coinbase, Kraken, etc.).
     * @return MARKET
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_M_A_R_K_E_T)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getMARKET() {
        return MARKET;
    }

    @JsonProperty(JSON_PROPERTY_M_A_R_K_E_T)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setMARKET(String MARKET) {
        this.MARKET = MARKET;
    }

    public SPOTINSTRUMENTTRADE PRICE(Integer PRICE) {
        this.PRICE = PRICE;
        return this;
    }

    /**
     * The price in the to instrument (quote / counter symbol / coin) of the trade. For a BTC-USD trade, this is how much was paid for one BTC in USD. For futures, this will be the price of the contract.
     * @return PRICE
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_P_R_I_C_E)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Integer getPRICE() {
        return PRICE;
    }

    @JsonProperty(JSON_PROPERTY_P_R_I_C_E)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPRICE(Integer PRICE) {
        this.PRICE = PRICE;
    }

    public SPOTINSTRUMENTTRADE QUANTITY(Integer QUANTITY) {
        this.QUANTITY = QUANTITY;
        return this;
    }

    /**
     * The volume of the trade, given in the from instrument (base symbol / coin/ contract). For a spot BTC-USD trade, this is how much BTC was traded at the trade price. For a futures BTCUSDPERP, this is the BTC equivalent for the contracts traded.
     * @return QUANTITY
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_Q_U_A_N_T_I_T_Y)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Integer getQUANTITY() {
        return QUANTITY;
    }

    @JsonProperty(JSON_PROPERTY_Q_U_A_N_T_I_T_Y)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setQUANTITY(Integer QUANTITY) {
        this.QUANTITY = QUANTITY;
    }

    public SPOTINSTRUMENTTRADE QUOTE(String QUOTE) {
        this.QUOTE = QUOTE;
        return this;
    }

    /**
     * The mapped to asset (quote / counter symbol / coin). Only available on instruments that have been mapped (e.g. USD).
     * @return QUOTE
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_Q_U_O_T_E)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getQUOTE() {
        return QUOTE;
    }

    @JsonProperty(JSON_PROPERTY_Q_U_O_T_E)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setQUOTE(String QUOTE) {
        this.QUOTE = QUOTE;
    }

    public SPOTINSTRUMENTTRADE QUOTE_QUANTITY(Integer QUOTE_QUANTITY) {
        this.QUOTE_QUANTITY = QUOTE_QUANTITY;
        return this;
    }

    /**
     * The volume of the trade, given in the to instrument (quote / counter symbol / coin). This is equivalent to QUANTITY * PRICE. E.g. for a BTC-USD trade, this is how much USD was paid in total for the volume of BTC traded. For futures this is the quote currency equivalent for the contracts traded.
     * @return QUOTE_QUANTITY
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_Q_U_O_T_E_Q_U_A_N_T_I_T_Y)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Integer getQUOTEQUANTITY() {
        return QUOTE_QUANTITY;
    }

    @JsonProperty(JSON_PROPERTY_Q_U_O_T_E_Q_U_A_N_T_I_T_Y)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setQUOTEQUANTITY(Integer QUOTE_QUANTITY) {
        this.QUOTE_QUANTITY = QUOTE_QUANTITY;
    }

    public SPOTINSTRUMENTTRADE RECEIVED_TIMESTAMP(Integer RECEIVED_TIMESTAMP) {
        this.RECEIVED_TIMESTAMP = RECEIVED_TIMESTAMP;
        return this;
    }

    /**
     * The timestamp in seconds that the trade was received. This varies from the trade taking place on the market by a few millisconds to a few seconds depending on the market / exchange API options / rate limits.
     * @return RECEIVED_TIMESTAMP
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_R_E_C_E_I_V_E_D_T_I_M_E_S_T_A_M_P)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Integer getRECEIVEDTIMESTAMP() {
        return RECEIVED_TIMESTAMP;
    }

    @JsonProperty(JSON_PROPERTY_R_E_C_E_I_V_E_D_T_I_M_E_S_T_A_M_P)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setRECEIVEDTIMESTAMP(Integer RECEIVED_TIMESTAMP) {
        this.RECEIVED_TIMESTAMP = RECEIVED_TIMESTAMP;
    }

    public SPOTINSTRUMENTTRADE RECEIVED_TIMESTAMP_NS(Integer RECEIVED_TIMESTAMP_NS) {
        this.RECEIVED_TIMESTAMP_NS = RECEIVED_TIMESTAMP_NS;
        return this;
    }

    /**
     * The nanosecond part of the received timestamp.
     * @return RECEIVED_TIMESTAMP_NS
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_R_E_C_E_I_V_E_D_T_I_M_E_S_T_A_M_P_N_S)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Integer getRECEIVEDTIMESTAMPNS() {
        return RECEIVED_TIMESTAMP_NS;
    }

    @JsonProperty(JSON_PROPERTY_R_E_C_E_I_V_E_D_T_I_M_E_S_T_A_M_P_N_S)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setRECEIVEDTIMESTAMPNS(Integer RECEIVED_TIMESTAMP_NS) {
        this.RECEIVED_TIMESTAMP_NS = RECEIVED_TIMESTAMP_NS;
    }

    public SPOTINSTRUMENTTRADE SIDE(String SIDE) {
        this.SIDE = SIDE;
        return this;
    }

    /**
     * The side of the trade: SELL, BUY or UNKNOWN. If the exchange / api does not provide a side, \&quot;UNKNOWN\&quot; will be returned.
     * @return SIDE
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_S_I_D_E)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getSIDE() {
        return SIDE;
    }

    @JsonProperty(JSON_PROPERTY_S_I_D_E)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setSIDE(String SIDE) {
        this.SIDE = SIDE;
    }

    public SPOTINSTRUMENTTRADE SOURCE(String SOURCE) {
        this.SOURCE = SOURCE;
        return this;
    }

    /**
     * The source of the trade update: POLLING, STREAMING, GO, BLOB etc.
     * @return SOURCE
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_S_O_U_R_C_E)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getSOURCE() {
        return SOURCE;
    }

    @JsonProperty(JSON_PROPERTY_S_O_U_R_C_E)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setSOURCE(String SOURCE) {
        this.SOURCE = SOURCE;
    }

    public SPOTINSTRUMENTTRADE TIMESTAMP(Integer TIMESTAMP) {
        this.TIMESTAMP = TIMESTAMP;
        return this;
    }

    /**
     * The timestamp in seconds as reported by the market / exchange or the received timestamp if the market / exchange does not provide one.
     * @return TIMESTAMP
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_T_I_M_E_S_T_A_M_P)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Integer getTIMESTAMP() {
        return TIMESTAMP;
    }

    @JsonProperty(JSON_PROPERTY_T_I_M_E_S_T_A_M_P)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTIMESTAMP(Integer TIMESTAMP) {
        this.TIMESTAMP = TIMESTAMP;
    }

    public SPOTINSTRUMENTTRADE TIMESTAMP_NS(Integer TIMESTAMP_NS) {
        this.TIMESTAMP_NS = TIMESTAMP_NS;
        return this;
    }

    /**
     * The nanosecond part of the reported timestamp.
     * @return TIMESTAMP_NS
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_T_I_M_E_S_T_A_M_P_N_S)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Integer getTIMESTAMPNS() {
        return TIMESTAMP_NS;
    }

    @JsonProperty(JSON_PROPERTY_T_I_M_E_S_T_A_M_P_N_S)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTIMESTAMPNS(Integer TIMESTAMP_NS) {
        this.TIMESTAMP_NS = TIMESTAMP_NS;
    }

    public SPOTINSTRUMENTTRADE TYPE(String TYPE) {
        this.TYPE = TYPE;
        return this;
    }

    /**
     * The type of the message.
     * @return TYPE
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_T_Y_P_E)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getTYPE() {
        return TYPE;
    }

    @JsonProperty(JSON_PROPERTY_T_Y_P_E)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTYPE(String TYPE) {
        this.TYPE = TYPE;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SPOTINSTRUMENTTRADE SPOT_INSTRUMENT_TRADE = (SPOTINSTRUMENTTRADE) o;
        return Objects.equals(this.BASE, SPOT_INSTRUMENT_TRADE.BASE) &&
            Objects.equals(this.CCSEQ, SPOT_INSTRUMENT_TRADE.CCSEQ) &&
            Objects.equals(this.ID, SPOT_INSTRUMENT_TRADE.ID) &&
            Objects.equals(this.INSTRUMENT, SPOT_INSTRUMENT_TRADE.INSTRUMENT) &&
            Objects.equals(this.MAPPED_INSTRUMENT, SPOT_INSTRUMENT_TRADE.MAPPED_INSTRUMENT) &&
            Objects.equals(this.MARKET, SPOT_INSTRUMENT_TRADE.MARKET) &&
            Objects.equals(this.PRICE, SPOT_INSTRUMENT_TRADE.PRICE) &&
            Objects.equals(this.QUANTITY, SPOT_INSTRUMENT_TRADE.QUANTITY) &&
            Objects.equals(this.QUOTE, SPOT_INSTRUMENT_TRADE.QUOTE) &&
            Objects.equals(this.QUOTE_QUANTITY, SPOT_INSTRUMENT_TRADE.QUOTE_QUANTITY) &&
            Objects.equals(this.RECEIVED_TIMESTAMP, SPOT_INSTRUMENT_TRADE.RECEIVED_TIMESTAMP) &&
            Objects.equals(this.RECEIVED_TIMESTAMP_NS, SPOT_INSTRUMENT_TRADE.RECEIVED_TIMESTAMP_NS) &&
            Objects.equals(this.SIDE, SPOT_INSTRUMENT_TRADE.SIDE) &&
            Objects.equals(this.SOURCE, SPOT_INSTRUMENT_TRADE.SOURCE) &&
            Objects.equals(this.TIMESTAMP, SPOT_INSTRUMENT_TRADE.TIMESTAMP) &&
            Objects.equals(this.TIMESTAMP_NS, SPOT_INSTRUMENT_TRADE.TIMESTAMP_NS) &&
            Objects.equals(this.TYPE, SPOT_INSTRUMENT_TRADE.TYPE);
    }

    @Override
    public int hashCode() {
        return Objects.hash(BASE, CCSEQ, ID, INSTRUMENT, MAPPED_INSTRUMENT, MARKET, PRICE, QUANTITY, QUOTE, QUOTE_QUANTITY, RECEIVED_TIMESTAMP, RECEIVED_TIMESTAMP_NS, SIDE, SOURCE, TIMESTAMP, TIMESTAMP_NS, TYPE);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class SPOTINSTRUMENTTRADE {\n");
        sb.append("    BASE: ").append(toIndentedString(BASE)).append("\n");
        sb.append("    CCSEQ: ").append(toIndentedString(CCSEQ)).append("\n");
        sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
        sb.append("    INSTRUMENT: ").append(toIndentedString(INSTRUMENT)).append("\n");
        sb.append("    MAPPED_INSTRUMENT: ").append(toIndentedString(MAPPED_INSTRUMENT)).append("\n");
        sb.append("    MARKET: ").append(toIndentedString(MARKET)).append("\n");
        sb.append("    PRICE: ").append(toIndentedString(PRICE)).append("\n");
        sb.append("    QUANTITY: ").append(toIndentedString(QUANTITY)).append("\n");
        sb.append("    QUOTE: ").append(toIndentedString(QUOTE)).append("\n");
        sb.append("    QUOTE_QUANTITY: ").append(toIndentedString(QUOTE_QUANTITY)).append("\n");
        sb.append("    RECEIVED_TIMESTAMP: ").append(toIndentedString(RECEIVED_TIMESTAMP)).append("\n");
        sb.append("    RECEIVED_TIMESTAMP_NS: ").append(toIndentedString(RECEIVED_TIMESTAMP_NS)).append("\n");
        sb.append("    SIDE: ").append(toIndentedString(SIDE)).append("\n");
        sb.append("    SOURCE: ").append(toIndentedString(SOURCE)).append("\n");
        sb.append("    TIMESTAMP: ").append(toIndentedString(TIMESTAMP)).append("\n");
        sb.append("    TIMESTAMP_NS: ").append(toIndentedString(TIMESTAMP_NS)).append("\n");
        sb.append("    TYPE: ").append(toIndentedString(TYPE)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
