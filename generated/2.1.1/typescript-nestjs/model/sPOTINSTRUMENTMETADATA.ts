/**
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 * CryptoCompare is the world\'s leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: data@cryptocompare.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


export interface SPOTINSTRUMENTMETADATA { 
    /**
     * This is the first time instrument was seen on instrumentListSourceType BLOB.
     */
    FIRST_SEEN_ON_BLOB_TS?: number;
    /**
     * This is the first time instrument was seen on instrumentListSourceType FIX.
     */
    FIRST_SEEN_ON_FIX_TS?: number;
    /**
     * This is the first time instrument was seen on instrumentListSourceType HARDCODED.
     */
    FIRST_SEEN_ON_HARDCODED_TS?: number;
    /**
     * This is the first time instrument was seen on instrumentListSourceType INDEX_COMPOSITION.
     */
    FIRST_SEEN_ON_INDEX_COMPOSITION_TS?: number;
    /**
     * This is the first time instrument was seen on instrumentListSourceType NSQ.
     */
    FIRST_SEEN_ON_NSQ_TS?: number;
    /**
     * This is the first time instrument was seen on instrumentListSourceType POLLING.
     */
    FIRST_SEEN_ON_POLLING_TS?: number;
    /**
     * This is the first time instrument was seen on instrumentListSourceType STREAMING.
     */
    FIRST_SEEN_ON_STREAMING_TS?: number;
    /**
     * This is the first TRADE_SPOT that we have seen on the specific source type in internal format.
     */
    FIRST_TRADE_SPOT_FROM_BACKFILL?: object;
    /**
     * This is the first TRADE_SPOT that we have seen on the specific source type in external format.
     */
    FIRST_TRADE_SPOT_FROM_BACKFILL_EXTERNAL?: object;
    /**
     * This is the first TRADE_SPOT that we have seen on the specific source type in internal format.
     */
    FIRST_TRADE_SPOT_FROM_BLOB?: object;
    /**
     * This is the first TRADE_SPOT that we have seen on the specific source type in external format.
     */
    FIRST_TRADE_SPOT_FROM_BLOB_EXTERNAL?: object;
    /**
     * This is the first TRADE_SPOT that we have seen on the specific source type in internal format.
     */
    FIRST_TRADE_SPOT_FROM_CALCULATED?: object;
    /**
     * This is the first TRADE_SPOT that we have seen on the specific source type in external format.
     */
    FIRST_TRADE_SPOT_FROM_CALCULATED_EXTERNAL?: object;
    /**
     * This is the first TRADE_SPOT that we have seen on the specific source type in internal format.
     */
    FIRST_TRADE_SPOT_FROM_FIX?: object;
    /**
     * This is the first TRADE_SPOT that we have seen on the specific source type in external format.
     */
    FIRST_TRADE_SPOT_FROM_FIX_EXTERNAL?: object;
    /**
     * This is the first TRADE_SPOT that we have seen on the specific source type in internal format.
     */
    FIRST_TRADE_SPOT_FROM_GO?: object;
    /**
     * This is the first TRADE_SPOT that we have seen on the specific source type in external format.
     */
    FIRST_TRADE_SPOT_FROM_GO_EXTERNAL?: object;
    /**
     * This is the first TRADE_SPOT that we have seen on the specific source type in internal format.
     */
    FIRST_TRADE_SPOT_FROM_POLLING?: object;
    /**
     * This is the first TRADE_SPOT that we have seen on the specific source type in external format.
     */
    FIRST_TRADE_SPOT_FROM_POLLING_EXTERNAL?: object;
    /**
     * This is the first TRADE_SPOT that we have seen on the specific source type in internal format.
     */
    FIRST_TRADE_SPOT_FROM_STREAMING?: object;
    /**
     * This is the first TRADE_SPOT that we have seen on the specific source type in external format.
     */
    FIRST_TRADE_SPOT_FROM_STREAMING_EXTERNAL?: object;
    /**
     * The migration destination vm hostname.
     */
    HOST_MIGRATION_DESTINATION?: string;
    /**
     * The migration source vm hostname.
     */
    HOST_MIGRATION_SOURCE?: string;
    /**
     * The migration status of the symbol, we only poll / stream / connect empty or SETTLED
     */
    HOST_MIGRATION_STATUS?: string;
    /**
     * The instrument ID as it is on the exchange with small modifications - we do not allow the following characters inside isntrument ids: ,/&?
     */
    INSTRUMENT?: string;
    /**
     * The full data we get from the polling endpoint for this specific instrument. This is a JSON stringified object with different properties per exchange.
     */
    INSTRUMENT_EXTERNAL_DATA?: string;
    /**
     * The current mapping information for this instrument
     */
    INSTRUMENT_MAPPING?: object;
    /**
     * Historical mapping information for this instrument
     */
    INSTRUMENT_MAPPING_HISTORY?: Array<string>;
    /**
     * Where do we get the instrument id / INSTRUMENT_{messageName}_REST_URI / INSTRUMENT_{messageName}_STREAMING_SUBSCRIPTION etc from.
     */
    INSTRUMENT_SOURCE_BACKFILL?: string;
    /**
     * Where do we get the instrument id / INSTRUMENT_{messageName}_REST_URI / INSTRUMENT_{messageName}_STREAMING_SUBSCRIPTION etc from.
     */
    INSTRUMENT_SOURCE_BLOB?: string;
    /**
     * Where do we get the instrument id / INSTRUMENT_{messageName}_REST_URI / INSTRUMENT_{messageName}_STREAMING_SUBSCRIPTION etc from.
     */
    INSTRUMENT_SOURCE_CALCULATED?: string;
    /**
     * Where do we get the instrument id / INSTRUMENT_{messageName}_REST_URI / INSTRUMENT_{messageName}_STREAMING_SUBSCRIPTION etc from.
     */
    INSTRUMENT_SOURCE_FIX?: string;
    /**
     * Where do we get the instrument id / INSTRUMENT_{messageName}_REST_URI / INSTRUMENT_{messageName}_STREAMING_SUBSCRIPTION etc from.
     */
    INSTRUMENT_SOURCE_GO?: string;
    /**
     * Where do we get the instrument id / INSTRUMENT_{messageName}_REST_URI / INSTRUMENT_{messageName}_STREAMING_SUBSCRIPTION etc from.
     */
    INSTRUMENT_SOURCE_POLLING?: string;
    /**
     * Where do we get the instrument id / INSTRUMENT_{messageName}_REST_URI / INSTRUMENT_{messageName}_STREAMING_SUBSCRIPTION etc from.
     */
    INSTRUMENT_SOURCE_STREAMING?: string;
    /**
     * The status of the symbol, we only poll / stream / connect to the ACTIVE ones, for the RETIRED / IGNORED / EXPIRED  one we no longer query for data.
     */
    INSTRUMENT_STATUS?: string;
    /**
     * The last proxied REST request we sent to the proxy swarm to get TRADE_SPOT for the instrument.
     */
    INSTRUMENT_TRADE_SPOT_FROM_BACKFILL_LAST_PROXIED_REST_REQUEST?: object;
    /**
     * The last time we sent a request to the proxy swarm to get TRADE_SPOT for the instrument.
     */
    INSTRUMENT_TRADE_SPOT_FROM_BACKFILL_REST_URI_LAST_REQUEST_TS?: number;
    /**
     * The last time we received a request from the proxy swarm with TRADE_SPOT for this instrument.
     */
    INSTRUMENT_TRADE_SPOT_FROM_BACKFILL_REST_URI_LAST_RESPONSE_TS?: number;
    /**
     * The next time we expect to make a request for TRADE_SPOT on this instrument.
     */
    INSTRUMENT_TRADE_SPOT_FROM_BACKFILL_REST_URI_NEXT_REQUEST_TS?: number;
    /**
     * The last proxied REST request we sent to the proxy swarm to get TRADE_SPOT for the instrument.
     */
    INSTRUMENT_TRADE_SPOT_FROM_BLOB_LAST_PROXIED_REST_REQUEST?: object;
    /**
     * The last time we sent a request to the proxy swarm to get TRADE_SPOT for the instrument.
     */
    INSTRUMENT_TRADE_SPOT_FROM_BLOB_REST_URI_LAST_REQUEST_TS?: number;
    /**
     * The last time we received a request from the proxy swarm with TRADE_SPOT for this instrument.
     */
    INSTRUMENT_TRADE_SPOT_FROM_BLOB_REST_URI_LAST_RESPONSE_TS?: number;
    /**
     * The next time we expect to make a request for TRADE_SPOT on this instrument.
     */
    INSTRUMENT_TRADE_SPOT_FROM_BLOB_REST_URI_NEXT_REQUEST_TS?: number;
    /**
     * The last proxied REST request we sent to the proxy swarm to get TRADE_SPOT for the instrument.
     */
    INSTRUMENT_TRADE_SPOT_FROM_CALCULATED_LAST_PROXIED_REST_REQUEST?: object;
    /**
     * The last time we sent a request to the proxy swarm to get TRADE_SPOT for the instrument.
     */
    INSTRUMENT_TRADE_SPOT_FROM_CALCULATED_REST_URI_LAST_REQUEST_TS?: number;
    /**
     * The last time we received a request from the proxy swarm with TRADE_SPOT for this instrument.
     */
    INSTRUMENT_TRADE_SPOT_FROM_CALCULATED_REST_URI_LAST_RESPONSE_TS?: number;
    /**
     * The next time we expect to make a request for TRADE_SPOT on this instrument.
     */
    INSTRUMENT_TRADE_SPOT_FROM_CALCULATED_REST_URI_NEXT_REQUEST_TS?: number;
    /**
     * The last proxied REST request we sent to the proxy swarm to get TRADE_SPOT for the instrument.
     */
    INSTRUMENT_TRADE_SPOT_FROM_FIX_LAST_PROXIED_REST_REQUEST?: object;
    /**
     * The last time we sent a request to the proxy swarm to get TRADE_SPOT for the instrument.
     */
    INSTRUMENT_TRADE_SPOT_FROM_FIX_REST_URI_LAST_REQUEST_TS?: number;
    /**
     * The last time we received a request from the proxy swarm with TRADE_SPOT for this instrument.
     */
    INSTRUMENT_TRADE_SPOT_FROM_FIX_REST_URI_LAST_RESPONSE_TS?: number;
    /**
     * The next time we expect to make a request for TRADE_SPOT on this instrument.
     */
    INSTRUMENT_TRADE_SPOT_FROM_FIX_REST_URI_NEXT_REQUEST_TS?: number;
    /**
     * The last proxied REST request we sent to the proxy swarm to get TRADE_SPOT for the instrument.
     */
    INSTRUMENT_TRADE_SPOT_FROM_GO_LAST_PROXIED_REST_REQUEST?: object;
    /**
     * The last time we sent a request to the proxy swarm to get TRADE_SPOT for the instrument.
     */
    INSTRUMENT_TRADE_SPOT_FROM_GO_REST_URI_LAST_REQUEST_TS?: number;
    /**
     * The last time we received a request from the proxy swarm with TRADE_SPOT for this instrument.
     */
    INSTRUMENT_TRADE_SPOT_FROM_GO_REST_URI_LAST_RESPONSE_TS?: number;
    /**
     * The next time we expect to make a request for TRADE_SPOT on this instrument.
     */
    INSTRUMENT_TRADE_SPOT_FROM_GO_REST_URI_NEXT_REQUEST_TS?: number;
    /**
     * The last proxied REST request we sent to the proxy swarm to get TRADE_SPOT for the instrument.
     */
    INSTRUMENT_TRADE_SPOT_FROM_POLLING_LAST_PROXIED_REST_REQUEST?: object;
    /**
     * The last time we sent a request to the proxy swarm to get TRADE_SPOT for the instrument.
     */
    INSTRUMENT_TRADE_SPOT_FROM_POLLING_REST_URI_LAST_REQUEST_TS?: number;
    /**
     * The last time we received a request from the proxy swarm with TRADE_SPOT for this instrument.
     */
    INSTRUMENT_TRADE_SPOT_FROM_POLLING_REST_URI_LAST_RESPONSE_TS?: number;
    /**
     * The next time we expect to make a request for TRADE_SPOT on this instrument.
     */
    INSTRUMENT_TRADE_SPOT_FROM_POLLING_REST_URI_NEXT_REQUEST_TS?: number;
    /**
     * The last proxied REST request we sent to the proxy swarm to get TRADE_SPOT for the instrument.
     */
    INSTRUMENT_TRADE_SPOT_FROM_STREAMING_LAST_PROXIED_REST_REQUEST?: object;
    /**
     * The last time we sent a request to the proxy swarm to get TRADE_SPOT for the instrument.
     */
    INSTRUMENT_TRADE_SPOT_FROM_STREAMING_REST_URI_LAST_REQUEST_TS?: number;
    /**
     * The last time we received a request from the proxy swarm with TRADE_SPOT for this instrument.
     */
    INSTRUMENT_TRADE_SPOT_FROM_STREAMING_REST_URI_LAST_RESPONSE_TS?: number;
    /**
     * The next time we expect to make a request for TRADE_SPOT on this instrument.
     */
    INSTRUMENT_TRADE_SPOT_FROM_STREAMING_REST_URI_NEXT_REQUEST_TS?: number;
    /**
     * This flags the exchange instrument as in ready to consume TRADE_SPOT via a streaming integration.
     */
    INSTRUMENT_TRADE_SPOT_IS_READY_FOR_STREAMING_INTEGRATION?: boolean;
    /**
     * This is used to build up the request in some cases, this is where we put the id we use when querying for TRADE_SPOT.
     */
    INSTRUMENT_TRADE_SPOT_REST_URI?: string;
    /**
     * The URL we send to the proxy swarm to get TRADE_SPOT for the instrument.
     */
    INSTRUMENT_TRADE_SPOT_REST_URL?: string;
    /**
     * This is used to build up the subscription in some cases, this is where we put the id we use when subscribing for TRADE_SPOT on this instrument.
     */
    INSTRUMENT_TRADE_SPOT_STREAMING_SUBSCRIPTION?: string;
    /**
     * The timestamp last encountered where the batch of trades from TRADES_SPOT all occured at the same time. This is an issue when making the next request that requires polling by timestamp as a start/from parameter
     */
    LAST_CONCURRENT_BATCH_OF_TRADES_SPOT_MS?: number;
    /**
     * This is the last time instrument was seen on instrumentListSourceType BLOB.
     */
    LAST_SEEN_ON_BLOB_TS?: number;
    /**
     * This is the last time instrument was seen on instrumentListSourceType FIX.
     */
    LAST_SEEN_ON_FIX_TS?: number;
    /**
     * This is the last time instrument was seen on instrumentListSourceType HARDCODED.
     */
    LAST_SEEN_ON_HARDCODED_TS?: number;
    /**
     * This is the last time instrument was seen on instrumentListSourceType INDEX_COMPOSITION.
     */
    LAST_SEEN_ON_INDEX_COMPOSITION_TS?: number;
    /**
     * This is the last time instrument was seen on instrumentListSourceType NSQ.
     */
    LAST_SEEN_ON_NSQ_TS?: number;
    /**
     * This is the last time instrument was seen on instrumentListSourceType POLLING.
     */
    LAST_SEEN_ON_POLLING_TS?: number;
    /**
     * This is the last time instrument was seen on instrumentListSourceType STREAMING.
     */
    LAST_SEEN_ON_STREAMING_TS?: number;
    /**
     * This is the last TRADE_SPOT that we have seen on the specific source type in internal format.
     */
    LAST_TRADE_SPOT_FROM_BACKFILL?: object;
    /**
     * This is the last TRADE_SPOT that we have seen on the specific trade source in external format.
     */
    LAST_TRADE_SPOT_FROM_BACKFILL_EXTERNAL?: object;
    /**
     * This is the last TRADE_SPOT that we have seen on the specific source type in internal format.
     */
    LAST_TRADE_SPOT_FROM_BLOB?: object;
    /**
     * This is the last TRADE_SPOT that we have seen on the specific trade source in external format.
     */
    LAST_TRADE_SPOT_FROM_BLOB_EXTERNAL?: object;
    /**
     * This is the last TRADE_SPOT that we have seen on the specific source type in internal format.
     */
    LAST_TRADE_SPOT_FROM_CALCULATED?: object;
    /**
     * This is the last TRADE_SPOT that we have seen on the specific trade source in external format.
     */
    LAST_TRADE_SPOT_FROM_CALCULATED_EXTERNAL?: object;
    /**
     * This is the last TRADE_SPOT that we have seen on the specific source type in internal format.
     */
    LAST_TRADE_SPOT_FROM_FIX?: object;
    /**
     * This is the last TRADE_SPOT that we have seen on the specific trade source in external format.
     */
    LAST_TRADE_SPOT_FROM_FIX_EXTERNAL?: object;
    /**
     * This is the last TRADE_SPOT that we have seen on the specific source type in internal format.
     */
    LAST_TRADE_SPOT_FROM_GO?: object;
    /**
     * This is the last TRADE_SPOT that we have seen on the specific trade source in external format.
     */
    LAST_TRADE_SPOT_FROM_GO_EXTERNAL?: object;
    /**
     * This is the last TRADE_SPOT that we have seen on the specific source type in internal format.
     */
    LAST_TRADE_SPOT_FROM_POLLING?: object;
    /**
     * This is the last TRADE_SPOT that we have seen on the specific trade source in external format.
     */
    LAST_TRADE_SPOT_FROM_POLLING_EXTERNAL?: object;
    /**
     * This is the last TRADE_SPOT that we have seen on the specific source type in internal format.
     */
    LAST_TRADE_SPOT_FROM_STREAMING?: object;
    /**
     * This is the last TRADE_SPOT that we have seen on the specific trade source in external format.
     */
    LAST_TRADE_SPOT_FROM_STREAMING_EXTERNAL?: object;
    /**
     * The version of metadata, used for version conversions/migrates.
     */
    METADATA_VERSION?: number;
    /**
     * This states the status of blob migration for this intrument on this exchange.
     */
    PROCESSING_TRADES_FROM_BLOB_STATUS?: string;
    /**
     * This is both the CCSEQ and the total TRADES_SPOT we have processed on this instrument
     */
    TOTAL_TRADES_SPOT?: number;
    /**
     * This is any extra helper TRADE_SPOT data that we would need for creating polling requests or subscribing with non standard information and anything that is very specific to one exchange API/Integration and it does not fit any of the other existing fields and is definitly only updated or written in only one service.
     */
    UNSTRUCTURED_TRADE_SPOT_FROM_BACKFILL_INTERNAL_DATA?: object;
    /**
     * This is any extra helper TRADE_SPOT data that we would need for creating polling requests or subscribing with non standard information and anything that is very specific to one exchange API/Integration and it does not fit any of the other existing fields and is definitly only updated or written in only one service.
     */
    UNSTRUCTURED_TRADE_SPOT_FROM_BLOB_INTERNAL_DATA?: object;
    /**
     * This is any extra helper TRADE_SPOT data that we would need for creating polling requests or subscribing with non standard information and anything that is very specific to one exchange API/Integration and it does not fit any of the other existing fields and is definitly only updated or written in only one service.
     */
    UNSTRUCTURED_TRADE_SPOT_FROM_CALCULATED_INTERNAL_DATA?: object;
    /**
     * This is any extra helper TRADE_SPOT data that we would need for creating polling requests or subscribing with non standard information and anything that is very specific to one exchange API/Integration and it does not fit any of the other existing fields and is definitly only updated or written in only one service.
     */
    UNSTRUCTURED_TRADE_SPOT_FROM_FIX_INTERNAL_DATA?: object;
    /**
     * This is any extra helper TRADE_SPOT data that we would need for creating polling requests or subscribing with non standard information and anything that is very specific to one exchange API/Integration and it does not fit any of the other existing fields and is definitly only updated or written in only one service.
     */
    UNSTRUCTURED_TRADE_SPOT_FROM_GO_INTERNAL_DATA?: object;
    /**
     * This is any extra helper TRADE_SPOT data that we would need for creating polling requests or subscribing with non standard information and anything that is very specific to one exchange API/Integration and it does not fit any of the other existing fields and is definitly only updated or written in only one service.
     */
    UNSTRUCTURED_TRADE_SPOT_FROM_POLLING_INTERNAL_DATA?: object;
    /**
     * This is any extra helper TRADE_SPOT data that we would need for creating polling requests or subscribing with non standard information and anything that is very specific to one exchange API/Integration and it does not fit any of the other existing fields and is definitly only updated or written in only one service.
     */
    UNSTRUCTURED_TRADE_SPOT_FROM_STREAMING_INTERNAL_DATA?: object;
}

