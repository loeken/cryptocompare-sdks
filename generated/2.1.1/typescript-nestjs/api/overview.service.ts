/**
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 * CryptoCompare is the world\'s leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: data@cryptocompare.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@nestjs/common';
import { HttpService } from '@nestjs/axios';
import { AxiosResponse } from 'axios';
import { Observable } from 'rxjs';
import { GENERICRESPONSE } from '../model/gENERICRESPONSE';
import { Configuration } from '../configuration';


@Injectable()
export class OverviewService {

    protected basePath = 'https://data-api.cryptocompare.com';
    public defaultHeaders: Record<string,string> = {};
    public configuration = new Configuration();

    constructor(protected httpClient: HttpService, @Optional() configuration: Configuration) {
        this.configuration = configuration || this.configuration;
        this.basePath = configuration?.basePath || this.basePath;
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        return consumes.includes(form);
    }

    /**
     * 
     * 
     * @param groups When requesting all market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME
     * @param limit The number of data points to return
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public overviewV1HistoricalMarketcapAllAssetsDays(groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, responseFormat?: 'JSON' | 'CSV', ): Observable<AxiosResponse<GENERICRESPONSE>>;
    public overviewV1HistoricalMarketcapAllAssetsDays(groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, responseFormat?: 'JSON' | 'CSV', ): Observable<any> {







        let queryParameters = new URLSearchParams();
        if (groups) {
            queryParameters['groups'] = groups.join(COLLECTION_FORMATS['csv']);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters.append('limit', <any>limit);
        }
        if (toTs !== undefined && toTs !== null) {
            queryParameters.append('to_ts', <any>toTs);
        }
        if (aggregate !== undefined && aggregate !== null) {
            queryParameters.append('aggregate', <any>aggregate);
        }
        if (fill !== undefined && fill !== null) {
            queryParameters.append('fill', <any>fill);
        }
        if (responseFormat !== undefined && responseFormat !== null) {
            queryParameters.append('response_format', <any>responseFormat);
        }

        let headers = {...this.defaultHeaders};

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<GENERICRESPONSE>(`${this.basePath}/overview/v1/historical/marketcap/all/assets/days`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * 
     * 
     * @param groups When requesting all market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME
     * @param limit The number of data points to return
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public overviewV1HistoricalMarketcapAllAssetsHours(groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, responseFormat?: 'JSON' | 'CSV', ): Observable<AxiosResponse<GENERICRESPONSE>>;
    public overviewV1HistoricalMarketcapAllAssetsHours(groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, responseFormat?: 'JSON' | 'CSV', ): Observable<any> {







        let queryParameters = new URLSearchParams();
        if (groups) {
            queryParameters['groups'] = groups.join(COLLECTION_FORMATS['csv']);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters.append('limit', <any>limit);
        }
        if (toTs !== undefined && toTs !== null) {
            queryParameters.append('to_ts', <any>toTs);
        }
        if (aggregate !== undefined && aggregate !== null) {
            queryParameters.append('aggregate', <any>aggregate);
        }
        if (fill !== undefined && fill !== null) {
            queryParameters.append('fill', <any>fill);
        }
        if (responseFormat !== undefined && responseFormat !== null) {
            queryParameters.append('response_format', <any>responseFormat);
        }

        let headers = {...this.defaultHeaders};

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<GENERICRESPONSE>(`${this.basePath}/overview/v1/historical/marketcap/all/assets/hours`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * 
     * 
     * @param groups When requesting ftw universe market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME
     * @param limit The number of data points to return
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public overviewV1HistoricalMarketcapFtwAssetsDays(groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, responseFormat?: 'JSON' | 'CSV', ): Observable<AxiosResponse<GENERICRESPONSE>>;
    public overviewV1HistoricalMarketcapFtwAssetsDays(groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, responseFormat?: 'JSON' | 'CSV', ): Observable<any> {







        let queryParameters = new URLSearchParams();
        if (groups) {
            queryParameters['groups'] = groups.join(COLLECTION_FORMATS['csv']);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters.append('limit', <any>limit);
        }
        if (toTs !== undefined && toTs !== null) {
            queryParameters.append('to_ts', <any>toTs);
        }
        if (aggregate !== undefined && aggregate !== null) {
            queryParameters.append('aggregate', <any>aggregate);
        }
        if (fill !== undefined && fill !== null) {
            queryParameters.append('fill', <any>fill);
        }
        if (responseFormat !== undefined && responseFormat !== null) {
            queryParameters.append('response_format', <any>responseFormat);
        }

        let headers = {...this.defaultHeaders};

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<GENERICRESPONSE>(`${this.basePath}/overview/v1/historical/marketcap/ftw/assets/days`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * 
     * 
     * @param groups When requesting ftw universe market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME
     * @param limit The number of data points to return
     * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
     * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
     * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
     * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public overviewV1HistoricalMarketcapFtwAssetsHours(groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, responseFormat?: 'JSON' | 'CSV', ): Observable<AxiosResponse<GENERICRESPONSE>>;
    public overviewV1HistoricalMarketcapFtwAssetsHours(groups?: Array<string>, limit?: number, toTs?: number, aggregate?: number, fill?: boolean, responseFormat?: 'JSON' | 'CSV', ): Observable<any> {







        let queryParameters = new URLSearchParams();
        if (groups) {
            queryParameters['groups'] = groups.join(COLLECTION_FORMATS['csv']);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters.append('limit', <any>limit);
        }
        if (toTs !== undefined && toTs !== null) {
            queryParameters.append('to_ts', <any>toTs);
        }
        if (aggregate !== undefined && aggregate !== null) {
            queryParameters.append('aggregate', <any>aggregate);
        }
        if (fill !== undefined && fill !== null) {
            queryParameters.append('fill', <any>fill);
        }
        if (responseFormat !== undefined && responseFormat !== null) {
            queryParameters.append('response_format', <any>responseFormat);
        }

        let headers = {...this.defaultHeaders};

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<GENERICRESPONSE>(`${this.basePath}/overview/v1/historical/marketcap/ftw/assets/hours`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * 
     * 
     * @param groups When requesting all market cap tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,MOVING_24_HOUR
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public overviewV1LatestMarketcapAllTick(groups?: Array<string>, ): Observable<AxiosResponse<GENERICRESPONSE>>;
    public overviewV1LatestMarketcapAllTick(groups?: Array<string>, ): Observable<any> {


        let queryParameters = new URLSearchParams();
        if (groups) {
            queryParameters['groups'] = groups.join(COLLECTION_FORMATS['csv']);
        }

        let headers = {...this.defaultHeaders};

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<GENERICRESPONSE>(`${this.basePath}/overview/v1/latest/marketcap/all/tick`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * 
     * 
     * @param groups When requesting ftw universe market cap tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,MOVING_24_HOUR
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public overviewV1LatestMarketcapFtwTick(groups?: Array<string>, ): Observable<AxiosResponse<GENERICRESPONSE>>;
    public overviewV1LatestMarketcapFtwTick(groups?: Array<string>, ): Observable<any> {


        let queryParameters = new URLSearchParams();
        if (groups) {
            queryParameters['groups'] = groups.join(COLLECTION_FORMATS['csv']);
        }

        let headers = {...this.defaultHeaders};

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<GENERICRESPONSE>(`${this.basePath}/overview/v1/latest/marketcap/ftw/tick`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
}
