# coding: utf-8

"""
    CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry

    CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.  # noqa: E501

    The version of the OpenAPI document: 2.1.1
    Contact: data@cryptocompare.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class OverviewApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def overview_v1_historical_marketcap_all_assets_days(self, **kwargs):  # noqa: E501
        """overview_v1_historical_marketcap_all_assets_days  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.overview_v1_historical_marketcap_all_assets_days(async_req=True)
        >>> result = thread.get()

        :param groups: When requesting all market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME
        :type groups: list[str]
        :param limit: The number of data points to return
        :type limit: int
        :param to_ts: Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}
        :type to_ts: int
        :param aggregate: The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
        :type aggregate: int
        :param fill: Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
        :type fill: bool
        :param response_format: The format of the data response in uppercase. It can be one of the following: JSON,CSV
        :type response_format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GENERICRESPONSE
        """
        kwargs['_return_http_data_only'] = True
        return self.overview_v1_historical_marketcap_all_assets_days_with_http_info(**kwargs)  # noqa: E501

    def overview_v1_historical_marketcap_all_assets_days_with_http_info(self, **kwargs):  # noqa: E501
        """overview_v1_historical_marketcap_all_assets_days  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.overview_v1_historical_marketcap_all_assets_days_with_http_info(async_req=True)
        >>> result = thread.get()

        :param groups: When requesting all market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME
        :type groups: list[str]
        :param limit: The number of data points to return
        :type limit: int
        :param to_ts: Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}
        :type to_ts: int
        :param aggregate: The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
        :type aggregate: int
        :param fill: Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
        :type fill: bool
        :param response_format: The format of the data response in uppercase. It can be one of the following: JSON,CSV
        :type response_format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GENERICRESPONSE, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'groups',
            'limit',
            'to_ts',
            'aggregate',
            'fill',
            'response_format'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method overview_v1_historical_marketcap_all_assets_days" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        if self.api_client.client_side_validation and 'limit' in local_var_params and local_var_params['limit'] > 2000:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `overview_v1_historical_marketcap_all_assets_days`, must be a value less than or equal to `2000`")  # noqa: E501
        if self.api_client.client_side_validation and 'limit' in local_var_params and local_var_params['limit'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `overview_v1_historical_marketcap_all_assets_days`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'aggregate' in local_var_params and local_var_params['aggregate'] > 30:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `aggregate` when calling `overview_v1_historical_marketcap_all_assets_days`, must be a value less than or equal to `30`")  # noqa: E501
        if self.api_client.client_side_validation and 'aggregate' in local_var_params and local_var_params['aggregate'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `aggregate` when calling `overview_v1_historical_marketcap_all_assets_days`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if local_var_params.get('groups') is not None:  # noqa: E501
            query_params.append(('groups', local_var_params['groups']))  # noqa: E501
            collection_formats['groups'] = 'csv'  # noqa: E501
        if local_var_params.get('limit') is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if local_var_params.get('to_ts') is not None:  # noqa: E501
            query_params.append(('to_ts', local_var_params['to_ts']))  # noqa: E501
        if local_var_params.get('aggregate') is not None:  # noqa: E501
            query_params.append(('aggregate', local_var_params['aggregate']))  # noqa: E501
        if local_var_params.get('fill') is not None:  # noqa: E501
            query_params.append(('fill', local_var_params['fill']))  # noqa: E501
        if local_var_params.get('response_format') is not None:  # noqa: E501
            query_params.append(('response_format', local_var_params['response_format']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "GENERICRESPONSE",
            400: "Error",
            401: "Error",
            403: "Error",
            404: "Error",
            405: "Error",
            429: "Error",
            500: "Error",
            502: "Error",
            503: "Error",
        }

        return self.api_client.call_api(
            '/overview/v1/historical/marketcap/all/assets/days', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def overview_v1_historical_marketcap_all_assets_hours(self, **kwargs):  # noqa: E501
        """overview_v1_historical_marketcap_all_assets_hours  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.overview_v1_historical_marketcap_all_assets_hours(async_req=True)
        >>> result = thread.get()

        :param groups: When requesting all market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME
        :type groups: list[str]
        :param limit: The number of data points to return
        :type limit: int
        :param to_ts: Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}
        :type to_ts: int
        :param aggregate: The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
        :type aggregate: int
        :param fill: Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
        :type fill: bool
        :param response_format: The format of the data response in uppercase. It can be one of the following: JSON,CSV
        :type response_format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GENERICRESPONSE
        """
        kwargs['_return_http_data_only'] = True
        return self.overview_v1_historical_marketcap_all_assets_hours_with_http_info(**kwargs)  # noqa: E501

    def overview_v1_historical_marketcap_all_assets_hours_with_http_info(self, **kwargs):  # noqa: E501
        """overview_v1_historical_marketcap_all_assets_hours  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.overview_v1_historical_marketcap_all_assets_hours_with_http_info(async_req=True)
        >>> result = thread.get()

        :param groups: When requesting all market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME
        :type groups: list[str]
        :param limit: The number of data points to return
        :type limit: int
        :param to_ts: Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}
        :type to_ts: int
        :param aggregate: The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
        :type aggregate: int
        :param fill: Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
        :type fill: bool
        :param response_format: The format of the data response in uppercase. It can be one of the following: JSON,CSV
        :type response_format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GENERICRESPONSE, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'groups',
            'limit',
            'to_ts',
            'aggregate',
            'fill',
            'response_format'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method overview_v1_historical_marketcap_all_assets_hours" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        if self.api_client.client_side_validation and 'limit' in local_var_params and local_var_params['limit'] > 2000:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `overview_v1_historical_marketcap_all_assets_hours`, must be a value less than or equal to `2000`")  # noqa: E501
        if self.api_client.client_side_validation and 'limit' in local_var_params and local_var_params['limit'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `overview_v1_historical_marketcap_all_assets_hours`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'aggregate' in local_var_params and local_var_params['aggregate'] > 30:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `aggregate` when calling `overview_v1_historical_marketcap_all_assets_hours`, must be a value less than or equal to `30`")  # noqa: E501
        if self.api_client.client_side_validation and 'aggregate' in local_var_params and local_var_params['aggregate'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `aggregate` when calling `overview_v1_historical_marketcap_all_assets_hours`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if local_var_params.get('groups') is not None:  # noqa: E501
            query_params.append(('groups', local_var_params['groups']))  # noqa: E501
            collection_formats['groups'] = 'csv'  # noqa: E501
        if local_var_params.get('limit') is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if local_var_params.get('to_ts') is not None:  # noqa: E501
            query_params.append(('to_ts', local_var_params['to_ts']))  # noqa: E501
        if local_var_params.get('aggregate') is not None:  # noqa: E501
            query_params.append(('aggregate', local_var_params['aggregate']))  # noqa: E501
        if local_var_params.get('fill') is not None:  # noqa: E501
            query_params.append(('fill', local_var_params['fill']))  # noqa: E501
        if local_var_params.get('response_format') is not None:  # noqa: E501
            query_params.append(('response_format', local_var_params['response_format']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "GENERICRESPONSE",
            400: "Error",
            401: "Error",
            403: "Error",
            404: "Error",
            405: "Error",
            429: "Error",
            500: "Error",
            502: "Error",
            503: "Error",
        }

        return self.api_client.call_api(
            '/overview/v1/historical/marketcap/all/assets/hours', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def overview_v1_historical_marketcap_ftw_assets_days(self, **kwargs):  # noqa: E501
        """overview_v1_historical_marketcap_ftw_assets_days  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.overview_v1_historical_marketcap_ftw_assets_days(async_req=True)
        >>> result = thread.get()

        :param groups: When requesting ftw universe market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME
        :type groups: list[str]
        :param limit: The number of data points to return
        :type limit: int
        :param to_ts: Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}
        :type to_ts: int
        :param aggregate: The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
        :type aggregate: int
        :param fill: Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
        :type fill: bool
        :param response_format: The format of the data response in uppercase. It can be one of the following: JSON,CSV
        :type response_format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GENERICRESPONSE
        """
        kwargs['_return_http_data_only'] = True
        return self.overview_v1_historical_marketcap_ftw_assets_days_with_http_info(**kwargs)  # noqa: E501

    def overview_v1_historical_marketcap_ftw_assets_days_with_http_info(self, **kwargs):  # noqa: E501
        """overview_v1_historical_marketcap_ftw_assets_days  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.overview_v1_historical_marketcap_ftw_assets_days_with_http_info(async_req=True)
        >>> result = thread.get()

        :param groups: When requesting ftw universe market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME
        :type groups: list[str]
        :param limit: The number of data points to return
        :type limit: int
        :param to_ts: Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}
        :type to_ts: int
        :param aggregate: The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
        :type aggregate: int
        :param fill: Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
        :type fill: bool
        :param response_format: The format of the data response in uppercase. It can be one of the following: JSON,CSV
        :type response_format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GENERICRESPONSE, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'groups',
            'limit',
            'to_ts',
            'aggregate',
            'fill',
            'response_format'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method overview_v1_historical_marketcap_ftw_assets_days" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        if self.api_client.client_side_validation and 'limit' in local_var_params and local_var_params['limit'] > 2000:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `overview_v1_historical_marketcap_ftw_assets_days`, must be a value less than or equal to `2000`")  # noqa: E501
        if self.api_client.client_side_validation and 'limit' in local_var_params and local_var_params['limit'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `overview_v1_historical_marketcap_ftw_assets_days`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'aggregate' in local_var_params and local_var_params['aggregate'] > 30:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `aggregate` when calling `overview_v1_historical_marketcap_ftw_assets_days`, must be a value less than or equal to `30`")  # noqa: E501
        if self.api_client.client_side_validation and 'aggregate' in local_var_params and local_var_params['aggregate'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `aggregate` when calling `overview_v1_historical_marketcap_ftw_assets_days`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if local_var_params.get('groups') is not None:  # noqa: E501
            query_params.append(('groups', local_var_params['groups']))  # noqa: E501
            collection_formats['groups'] = 'csv'  # noqa: E501
        if local_var_params.get('limit') is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if local_var_params.get('to_ts') is not None:  # noqa: E501
            query_params.append(('to_ts', local_var_params['to_ts']))  # noqa: E501
        if local_var_params.get('aggregate') is not None:  # noqa: E501
            query_params.append(('aggregate', local_var_params['aggregate']))  # noqa: E501
        if local_var_params.get('fill') is not None:  # noqa: E501
            query_params.append(('fill', local_var_params['fill']))  # noqa: E501
        if local_var_params.get('response_format') is not None:  # noqa: E501
            query_params.append(('response_format', local_var_params['response_format']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "GENERICRESPONSE",
            400: "Error",
            401: "Error",
            403: "Error",
            404: "Error",
            405: "Error",
            429: "Error",
            500: "Error",
            502: "Error",
            503: "Error",
        }

        return self.api_client.call_api(
            '/overview/v1/historical/marketcap/ftw/assets/days', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def overview_v1_historical_marketcap_ftw_assets_hours(self, **kwargs):  # noqa: E501
        """overview_v1_historical_marketcap_ftw_assets_hours  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.overview_v1_historical_marketcap_ftw_assets_hours(async_req=True)
        >>> result = thread.get()

        :param groups: When requesting ftw universe market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME
        :type groups: list[str]
        :param limit: The number of data points to return
        :type limit: int
        :param to_ts: Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}
        :type to_ts: int
        :param aggregate: The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
        :type aggregate: int
        :param fill: Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
        :type fill: bool
        :param response_format: The format of the data response in uppercase. It can be one of the following: JSON,CSV
        :type response_format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GENERICRESPONSE
        """
        kwargs['_return_http_data_only'] = True
        return self.overview_v1_historical_marketcap_ftw_assets_hours_with_http_info(**kwargs)  # noqa: E501

    def overview_v1_historical_marketcap_ftw_assets_hours_with_http_info(self, **kwargs):  # noqa: E501
        """overview_v1_historical_marketcap_ftw_assets_hours  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.overview_v1_historical_marketcap_ftw_assets_hours_with_http_info(async_req=True)
        >>> result = thread.get()

        :param groups: When requesting ftw universe market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME
        :type groups: list[str]
        :param limit: The number of data points to return
        :type limit: int
        :param to_ts: Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}
        :type to_ts: int
        :param aggregate: The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
        :type aggregate: int
        :param fill: Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
        :type fill: bool
        :param response_format: The format of the data response in uppercase. It can be one of the following: JSON,CSV
        :type response_format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GENERICRESPONSE, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'groups',
            'limit',
            'to_ts',
            'aggregate',
            'fill',
            'response_format'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method overview_v1_historical_marketcap_ftw_assets_hours" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        if self.api_client.client_side_validation and 'limit' in local_var_params and local_var_params['limit'] > 2000:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `overview_v1_historical_marketcap_ftw_assets_hours`, must be a value less than or equal to `2000`")  # noqa: E501
        if self.api_client.client_side_validation and 'limit' in local_var_params and local_var_params['limit'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `overview_v1_historical_marketcap_ftw_assets_hours`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'aggregate' in local_var_params and local_var_params['aggregate'] > 30:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `aggregate` when calling `overview_v1_historical_marketcap_ftw_assets_hours`, must be a value less than or equal to `30`")  # noqa: E501
        if self.api_client.client_side_validation and 'aggregate' in local_var_params and local_var_params['aggregate'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `aggregate` when calling `overview_v1_historical_marketcap_ftw_assets_hours`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if local_var_params.get('groups') is not None:  # noqa: E501
            query_params.append(('groups', local_var_params['groups']))  # noqa: E501
            collection_formats['groups'] = 'csv'  # noqa: E501
        if local_var_params.get('limit') is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if local_var_params.get('to_ts') is not None:  # noqa: E501
            query_params.append(('to_ts', local_var_params['to_ts']))  # noqa: E501
        if local_var_params.get('aggregate') is not None:  # noqa: E501
            query_params.append(('aggregate', local_var_params['aggregate']))  # noqa: E501
        if local_var_params.get('fill') is not None:  # noqa: E501
            query_params.append(('fill', local_var_params['fill']))  # noqa: E501
        if local_var_params.get('response_format') is not None:  # noqa: E501
            query_params.append(('response_format', local_var_params['response_format']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "GENERICRESPONSE",
            400: "Error",
            401: "Error",
            403: "Error",
            404: "Error",
            405: "Error",
            429: "Error",
            500: "Error",
            502: "Error",
            503: "Error",
        }

        return self.api_client.call_api(
            '/overview/v1/historical/marketcap/ftw/assets/hours', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def overview_v1_latest_marketcap_all_tick(self, **kwargs):  # noqa: E501
        """overview_v1_latest_marketcap_all_tick  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.overview_v1_latest_marketcap_all_tick(async_req=True)
        >>> result = thread.get()

        :param groups: When requesting all market cap tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,MOVING_24_HOUR
        :type groups: list[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GENERICRESPONSE
        """
        kwargs['_return_http_data_only'] = True
        return self.overview_v1_latest_marketcap_all_tick_with_http_info(**kwargs)  # noqa: E501

    def overview_v1_latest_marketcap_all_tick_with_http_info(self, **kwargs):  # noqa: E501
        """overview_v1_latest_marketcap_all_tick  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.overview_v1_latest_marketcap_all_tick_with_http_info(async_req=True)
        >>> result = thread.get()

        :param groups: When requesting all market cap tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,MOVING_24_HOUR
        :type groups: list[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GENERICRESPONSE, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'groups'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method overview_v1_latest_marketcap_all_tick" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if local_var_params.get('groups') is not None:  # noqa: E501
            query_params.append(('groups', local_var_params['groups']))  # noqa: E501
            collection_formats['groups'] = 'csv'  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "GENERICRESPONSE",
            400: "Error",
            401: "Error",
            403: "Error",
            404: "Error",
            405: "Error",
            429: "Error",
            500: "Error",
            502: "Error",
            503: "Error",
        }

        return self.api_client.call_api(
            '/overview/v1/latest/marketcap/all/tick', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def overview_v1_latest_marketcap_ftw_tick(self, **kwargs):  # noqa: E501
        """overview_v1_latest_marketcap_ftw_tick  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.overview_v1_latest_marketcap_ftw_tick(async_req=True)
        >>> result = thread.get()

        :param groups: When requesting ftw universe market cap tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,MOVING_24_HOUR
        :type groups: list[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GENERICRESPONSE
        """
        kwargs['_return_http_data_only'] = True
        return self.overview_v1_latest_marketcap_ftw_tick_with_http_info(**kwargs)  # noqa: E501

    def overview_v1_latest_marketcap_ftw_tick_with_http_info(self, **kwargs):  # noqa: E501
        """overview_v1_latest_marketcap_ftw_tick  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.overview_v1_latest_marketcap_ftw_tick_with_http_info(async_req=True)
        >>> result = thread.get()

        :param groups: When requesting ftw universe market cap tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,MOVING_24_HOUR
        :type groups: list[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GENERICRESPONSE, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'groups'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method overview_v1_latest_marketcap_ftw_tick" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if local_var_params.get('groups') is not None:  # noqa: E501
            query_params.append(('groups', local_var_params['groups']))  # noqa: E501
            collection_formats['groups'] = 'csv'  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "GENERICRESPONSE",
            400: "Error",
            401: "Error",
            403: "Error",
            404: "Error",
            405: "Error",
            429: "Error",
            500: "Error",
            502: "Error",
            503: "Error",
        }

        return self.api_client.call_api(
            '/overview/v1/latest/marketcap/ftw/tick', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))
