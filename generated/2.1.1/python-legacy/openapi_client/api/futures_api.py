# coding: utf-8

"""
    CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry

    CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.  # noqa: E501

    The version of the OpenAPI document: 2.1.1
    Contact: data@cryptocompare.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class FuturesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def futures_v1_historical_days(self, market, instrument, **kwargs):  # noqa: E501
        """futures_v1_historical_days  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.futures_v1_historical_days(market, instrument, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from (required)
        :type market: str
        :param instrument: The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
        :type instrument: str
        :param groups: When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME
        :type groups: list[str]
        :param limit: The number of data points to return
        :type limit: int
        :param to_ts: Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}
        :type to_ts: int
        :param aggregate: The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
        :type aggregate: int
        :param fill: Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
        :type fill: bool
        :param mapping_priority: The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
        :type mapping_priority: str
        :param response_format: The format of the data response in uppercase. It can be one of the following: JSON,CSV
        :type response_format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GENERICRESPONSE
        """
        kwargs['_return_http_data_only'] = True
        return self.futures_v1_historical_days_with_http_info(market, instrument, **kwargs)  # noqa: E501

    def futures_v1_historical_days_with_http_info(self, market, instrument, **kwargs):  # noqa: E501
        """futures_v1_historical_days  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.futures_v1_historical_days_with_http_info(market, instrument, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from (required)
        :type market: str
        :param instrument: The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
        :type instrument: str
        :param groups: When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME
        :type groups: list[str]
        :param limit: The number of data points to return
        :type limit: int
        :param to_ts: Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}
        :type to_ts: int
        :param aggregate: The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
        :type aggregate: int
        :param fill: Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
        :type fill: bool
        :param mapping_priority: The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
        :type mapping_priority: str
        :param response_format: The format of the data response in uppercase. It can be one of the following: JSON,CSV
        :type response_format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GENERICRESPONSE, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'market',
            'instrument',
            'groups',
            'limit',
            'to_ts',
            'aggregate',
            'fill',
            'mapping_priority',
            'response_format'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method futures_v1_historical_days" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'market' is set
        if self.api_client.client_side_validation and local_var_params.get('market') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `market` when calling `futures_v1_historical_days`")  # noqa: E501
        # verify the required parameter 'instrument' is set
        if self.api_client.client_side_validation and local_var_params.get('instrument') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `instrument` when calling `futures_v1_historical_days`")  # noqa: E501

        if self.api_client.client_side_validation and ('market' in local_var_params and  # noqa: E501
                                                        len(local_var_params['market']) > 30):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `market` when calling `futures_v1_historical_days`, length must be less than or equal to `30`")  # noqa: E501
        if self.api_client.client_side_validation and ('market' in local_var_params and  # noqa: E501
                                                        len(local_var_params['market']) < 2):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `market` when calling `futures_v1_historical_days`, length must be greater than or equal to `2`")  # noqa: E501
        if self.api_client.client_side_validation and ('instrument' in local_var_params and  # noqa: E501
                                                        len(local_var_params['instrument']) > 500):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `instrument` when calling `futures_v1_historical_days`, length must be less than or equal to `500`")  # noqa: E501
        if self.api_client.client_side_validation and ('instrument' in local_var_params and  # noqa: E501
                                                        len(local_var_params['instrument']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `instrument` when calling `futures_v1_historical_days`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'limit' in local_var_params and local_var_params['limit'] > 5000:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `futures_v1_historical_days`, must be a value less than or equal to `5000`")  # noqa: E501
        if self.api_client.client_side_validation and 'limit' in local_var_params and local_var_params['limit'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `futures_v1_historical_days`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'aggregate' in local_var_params and local_var_params['aggregate'] > 30:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `aggregate` when calling `futures_v1_historical_days`, must be a value less than or equal to `30`")  # noqa: E501
        if self.api_client.client_side_validation and 'aggregate' in local_var_params and local_var_params['aggregate'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `aggregate` when calling `futures_v1_historical_days`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if local_var_params.get('market') is not None:  # noqa: E501
            query_params.append(('market', local_var_params['market']))  # noqa: E501
        if local_var_params.get('instrument') is not None:  # noqa: E501
            query_params.append(('instrument', local_var_params['instrument']))  # noqa: E501
        if local_var_params.get('groups') is not None:  # noqa: E501
            query_params.append(('groups', local_var_params['groups']))  # noqa: E501
            collection_formats['groups'] = 'csv'  # noqa: E501
        if local_var_params.get('limit') is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if local_var_params.get('to_ts') is not None:  # noqa: E501
            query_params.append(('to_ts', local_var_params['to_ts']))  # noqa: E501
        if local_var_params.get('aggregate') is not None:  # noqa: E501
            query_params.append(('aggregate', local_var_params['aggregate']))  # noqa: E501
        if local_var_params.get('fill') is not None:  # noqa: E501
            query_params.append(('fill', local_var_params['fill']))  # noqa: E501
        if local_var_params.get('mapping_priority') is not None:  # noqa: E501
            query_params.append(('mapping_priority', local_var_params['mapping_priority']))  # noqa: E501
        if local_var_params.get('response_format') is not None:  # noqa: E501
            query_params.append(('response_format', local_var_params['response_format']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "GENERICRESPONSE",
            400: "Error",
            401: "Error",
            403: "Error",
            404: "Error",
            405: "Error",
            429: "Error",
            500: "Error",
            502: "Error",
            503: "Error",
        }

        return self.api_client.call_api(
            '/futures/v1/historical/days', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def futures_v1_historical_funding_rate_days(self, market, instrument, **kwargs):  # noqa: E501
        """futures_v1_historical_funding_rate_days  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.futures_v1_historical_funding_rate_days(market, instrument, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from (required)
        :type market: str
        :param instrument: The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
        :type instrument: str
        :param groups: When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,OHLC,OHLC_MESSAGE,MESSAGE
        :type groups: list[str]
        :param limit: The number of data points to return
        :type limit: int
        :param to_ts: Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}
        :type to_ts: int
        :param aggregate: The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
        :type aggregate: int
        :param fill: Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
        :type fill: bool
        :param mapping_priority: The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
        :type mapping_priority: str
        :param response_format: The format of the data response in uppercase. It can be one of the following: JSON,CSV
        :type response_format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GENERICRESPONSE
        """
        kwargs['_return_http_data_only'] = True
        return self.futures_v1_historical_funding_rate_days_with_http_info(market, instrument, **kwargs)  # noqa: E501

    def futures_v1_historical_funding_rate_days_with_http_info(self, market, instrument, **kwargs):  # noqa: E501
        """futures_v1_historical_funding_rate_days  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.futures_v1_historical_funding_rate_days_with_http_info(market, instrument, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from (required)
        :type market: str
        :param instrument: The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
        :type instrument: str
        :param groups: When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,OHLC,OHLC_MESSAGE,MESSAGE
        :type groups: list[str]
        :param limit: The number of data points to return
        :type limit: int
        :param to_ts: Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}
        :type to_ts: int
        :param aggregate: The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
        :type aggregate: int
        :param fill: Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
        :type fill: bool
        :param mapping_priority: The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
        :type mapping_priority: str
        :param response_format: The format of the data response in uppercase. It can be one of the following: JSON,CSV
        :type response_format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GENERICRESPONSE, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'market',
            'instrument',
            'groups',
            'limit',
            'to_ts',
            'aggregate',
            'fill',
            'mapping_priority',
            'response_format'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method futures_v1_historical_funding_rate_days" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'market' is set
        if self.api_client.client_side_validation and local_var_params.get('market') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `market` when calling `futures_v1_historical_funding_rate_days`")  # noqa: E501
        # verify the required parameter 'instrument' is set
        if self.api_client.client_side_validation and local_var_params.get('instrument') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `instrument` when calling `futures_v1_historical_funding_rate_days`")  # noqa: E501

        if self.api_client.client_side_validation and ('market' in local_var_params and  # noqa: E501
                                                        len(local_var_params['market']) > 30):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `market` when calling `futures_v1_historical_funding_rate_days`, length must be less than or equal to `30`")  # noqa: E501
        if self.api_client.client_side_validation and ('market' in local_var_params and  # noqa: E501
                                                        len(local_var_params['market']) < 2):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `market` when calling `futures_v1_historical_funding_rate_days`, length must be greater than or equal to `2`")  # noqa: E501
        if self.api_client.client_side_validation and ('instrument' in local_var_params and  # noqa: E501
                                                        len(local_var_params['instrument']) > 500):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `instrument` when calling `futures_v1_historical_funding_rate_days`, length must be less than or equal to `500`")  # noqa: E501
        if self.api_client.client_side_validation and ('instrument' in local_var_params and  # noqa: E501
                                                        len(local_var_params['instrument']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `instrument` when calling `futures_v1_historical_funding_rate_days`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'limit' in local_var_params and local_var_params['limit'] > 5000:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `futures_v1_historical_funding_rate_days`, must be a value less than or equal to `5000`")  # noqa: E501
        if self.api_client.client_side_validation and 'limit' in local_var_params and local_var_params['limit'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `futures_v1_historical_funding_rate_days`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'aggregate' in local_var_params and local_var_params['aggregate'] > 30:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `aggregate` when calling `futures_v1_historical_funding_rate_days`, must be a value less than or equal to `30`")  # noqa: E501
        if self.api_client.client_side_validation and 'aggregate' in local_var_params and local_var_params['aggregate'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `aggregate` when calling `futures_v1_historical_funding_rate_days`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if local_var_params.get('market') is not None:  # noqa: E501
            query_params.append(('market', local_var_params['market']))  # noqa: E501
        if local_var_params.get('instrument') is not None:  # noqa: E501
            query_params.append(('instrument', local_var_params['instrument']))  # noqa: E501
        if local_var_params.get('groups') is not None:  # noqa: E501
            query_params.append(('groups', local_var_params['groups']))  # noqa: E501
            collection_formats['groups'] = 'csv'  # noqa: E501
        if local_var_params.get('limit') is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if local_var_params.get('to_ts') is not None:  # noqa: E501
            query_params.append(('to_ts', local_var_params['to_ts']))  # noqa: E501
        if local_var_params.get('aggregate') is not None:  # noqa: E501
            query_params.append(('aggregate', local_var_params['aggregate']))  # noqa: E501
        if local_var_params.get('fill') is not None:  # noqa: E501
            query_params.append(('fill', local_var_params['fill']))  # noqa: E501
        if local_var_params.get('mapping_priority') is not None:  # noqa: E501
            query_params.append(('mapping_priority', local_var_params['mapping_priority']))  # noqa: E501
        if local_var_params.get('response_format') is not None:  # noqa: E501
            query_params.append(('response_format', local_var_params['response_format']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "GENERICRESPONSE",
            400: "Error",
            401: "Error",
            403: "Error",
            404: "Error",
            405: "Error",
            429: "Error",
            500: "Error",
            502: "Error",
            503: "Error",
        }

        return self.api_client.call_api(
            '/futures/v1/historical/funding-rate/days', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def futures_v1_historical_funding_rate_hours(self, market, instrument, **kwargs):  # noqa: E501
        """futures_v1_historical_funding_rate_hours  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.futures_v1_historical_funding_rate_hours(market, instrument, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from (required)
        :type market: str
        :param instrument: The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
        :type instrument: str
        :param groups: When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,OHLC,OHLC_MESSAGE,MESSAGE
        :type groups: list[str]
        :param limit: The number of data points to return
        :type limit: int
        :param to_ts: Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}
        :type to_ts: int
        :param aggregate: The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
        :type aggregate: int
        :param fill: Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
        :type fill: bool
        :param mapping_priority: The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
        :type mapping_priority: str
        :param response_format: The format of the data response in uppercase. It can be one of the following: JSON,CSV
        :type response_format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GENERICRESPONSE
        """
        kwargs['_return_http_data_only'] = True
        return self.futures_v1_historical_funding_rate_hours_with_http_info(market, instrument, **kwargs)  # noqa: E501

    def futures_v1_historical_funding_rate_hours_with_http_info(self, market, instrument, **kwargs):  # noqa: E501
        """futures_v1_historical_funding_rate_hours  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.futures_v1_historical_funding_rate_hours_with_http_info(market, instrument, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from (required)
        :type market: str
        :param instrument: The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
        :type instrument: str
        :param groups: When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,OHLC,OHLC_MESSAGE,MESSAGE
        :type groups: list[str]
        :param limit: The number of data points to return
        :type limit: int
        :param to_ts: Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}
        :type to_ts: int
        :param aggregate: The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
        :type aggregate: int
        :param fill: Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
        :type fill: bool
        :param mapping_priority: The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
        :type mapping_priority: str
        :param response_format: The format of the data response in uppercase. It can be one of the following: JSON,CSV
        :type response_format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GENERICRESPONSE, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'market',
            'instrument',
            'groups',
            'limit',
            'to_ts',
            'aggregate',
            'fill',
            'mapping_priority',
            'response_format'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method futures_v1_historical_funding_rate_hours" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'market' is set
        if self.api_client.client_side_validation and local_var_params.get('market') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `market` when calling `futures_v1_historical_funding_rate_hours`")  # noqa: E501
        # verify the required parameter 'instrument' is set
        if self.api_client.client_side_validation and local_var_params.get('instrument') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `instrument` when calling `futures_v1_historical_funding_rate_hours`")  # noqa: E501

        if self.api_client.client_side_validation and ('market' in local_var_params and  # noqa: E501
                                                        len(local_var_params['market']) > 30):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `market` when calling `futures_v1_historical_funding_rate_hours`, length must be less than or equal to `30`")  # noqa: E501
        if self.api_client.client_side_validation and ('market' in local_var_params and  # noqa: E501
                                                        len(local_var_params['market']) < 2):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `market` when calling `futures_v1_historical_funding_rate_hours`, length must be greater than or equal to `2`")  # noqa: E501
        if self.api_client.client_side_validation and ('instrument' in local_var_params and  # noqa: E501
                                                        len(local_var_params['instrument']) > 500):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `instrument` when calling `futures_v1_historical_funding_rate_hours`, length must be less than or equal to `500`")  # noqa: E501
        if self.api_client.client_side_validation and ('instrument' in local_var_params and  # noqa: E501
                                                        len(local_var_params['instrument']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `instrument` when calling `futures_v1_historical_funding_rate_hours`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'limit' in local_var_params and local_var_params['limit'] > 2000:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `futures_v1_historical_funding_rate_hours`, must be a value less than or equal to `2000`")  # noqa: E501
        if self.api_client.client_side_validation and 'limit' in local_var_params and local_var_params['limit'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `futures_v1_historical_funding_rate_hours`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'aggregate' in local_var_params and local_var_params['aggregate'] > 30:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `aggregate` when calling `futures_v1_historical_funding_rate_hours`, must be a value less than or equal to `30`")  # noqa: E501
        if self.api_client.client_side_validation and 'aggregate' in local_var_params and local_var_params['aggregate'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `aggregate` when calling `futures_v1_historical_funding_rate_hours`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if local_var_params.get('market') is not None:  # noqa: E501
            query_params.append(('market', local_var_params['market']))  # noqa: E501
        if local_var_params.get('instrument') is not None:  # noqa: E501
            query_params.append(('instrument', local_var_params['instrument']))  # noqa: E501
        if local_var_params.get('groups') is not None:  # noqa: E501
            query_params.append(('groups', local_var_params['groups']))  # noqa: E501
            collection_formats['groups'] = 'csv'  # noqa: E501
        if local_var_params.get('limit') is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if local_var_params.get('to_ts') is not None:  # noqa: E501
            query_params.append(('to_ts', local_var_params['to_ts']))  # noqa: E501
        if local_var_params.get('aggregate') is not None:  # noqa: E501
            query_params.append(('aggregate', local_var_params['aggregate']))  # noqa: E501
        if local_var_params.get('fill') is not None:  # noqa: E501
            query_params.append(('fill', local_var_params['fill']))  # noqa: E501
        if local_var_params.get('mapping_priority') is not None:  # noqa: E501
            query_params.append(('mapping_priority', local_var_params['mapping_priority']))  # noqa: E501
        if local_var_params.get('response_format') is not None:  # noqa: E501
            query_params.append(('response_format', local_var_params['response_format']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "GENERICRESPONSE",
            400: "Error",
            401: "Error",
            403: "Error",
            404: "Error",
            405: "Error",
            429: "Error",
            500: "Error",
            502: "Error",
            503: "Error",
        }

        return self.api_client.call_api(
            '/futures/v1/historical/funding-rate/hours', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def futures_v1_historical_funding_rate_messages(self, market, instrument, **kwargs):  # noqa: E501
        """futures_v1_historical_funding_rate_messages  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.futures_v1_historical_funding_rate_messages(market, instrument, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from (required)
        :type market: str
        :param instrument: The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
        :type instrument: str
        :param after_ts: Unix timestamp in seconds of the earliest funding rate message in the response
        :type after_ts: int
        :param last_ccseq: The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request.
        :type last_ccseq: int
        :param limit: The maximum number of funding rate messages to return
        :type limit: int
        :param mapping_priority: The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
        :type mapping_priority: str
        :param response_format: The format of the data response in uppercase. It can be one of the following: JSON,CSV
        :type response_format: str
        :param return_404_on_empty_response: If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.
        :type return_404_on_empty_response: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GENERICRESPONSE
        """
        kwargs['_return_http_data_only'] = True
        return self.futures_v1_historical_funding_rate_messages_with_http_info(market, instrument, **kwargs)  # noqa: E501

    def futures_v1_historical_funding_rate_messages_with_http_info(self, market, instrument, **kwargs):  # noqa: E501
        """futures_v1_historical_funding_rate_messages  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.futures_v1_historical_funding_rate_messages_with_http_info(market, instrument, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from (required)
        :type market: str
        :param instrument: The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
        :type instrument: str
        :param after_ts: Unix timestamp in seconds of the earliest funding rate message in the response
        :type after_ts: int
        :param last_ccseq: The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request.
        :type last_ccseq: int
        :param limit: The maximum number of funding rate messages to return
        :type limit: int
        :param mapping_priority: The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
        :type mapping_priority: str
        :param response_format: The format of the data response in uppercase. It can be one of the following: JSON,CSV
        :type response_format: str
        :param return_404_on_empty_response: If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.
        :type return_404_on_empty_response: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GENERICRESPONSE, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'market',
            'instrument',
            'after_ts',
            'last_ccseq',
            'limit',
            'mapping_priority',
            'response_format',
            'return_404_on_empty_response'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method futures_v1_historical_funding_rate_messages" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'market' is set
        if self.api_client.client_side_validation and local_var_params.get('market') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `market` when calling `futures_v1_historical_funding_rate_messages`")  # noqa: E501
        # verify the required parameter 'instrument' is set
        if self.api_client.client_side_validation and local_var_params.get('instrument') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `instrument` when calling `futures_v1_historical_funding_rate_messages`")  # noqa: E501

        if self.api_client.client_side_validation and ('market' in local_var_params and  # noqa: E501
                                                        len(local_var_params['market']) > 30):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `market` when calling `futures_v1_historical_funding_rate_messages`, length must be less than or equal to `30`")  # noqa: E501
        if self.api_client.client_side_validation and ('market' in local_var_params and  # noqa: E501
                                                        len(local_var_params['market']) < 2):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `market` when calling `futures_v1_historical_funding_rate_messages`, length must be greater than or equal to `2`")  # noqa: E501
        if self.api_client.client_side_validation and ('instrument' in local_var_params and  # noqa: E501
                                                        len(local_var_params['instrument']) > 500):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `instrument` when calling `futures_v1_historical_funding_rate_messages`, length must be less than or equal to `500`")  # noqa: E501
        if self.api_client.client_side_validation and ('instrument' in local_var_params and  # noqa: E501
                                                        len(local_var_params['instrument']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `instrument` when calling `futures_v1_historical_funding_rate_messages`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'after_ts' in local_var_params and local_var_params['after_ts'] < 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `after_ts` when calling `futures_v1_historical_funding_rate_messages`, must be a value greater than or equal to `0`")  # noqa: E501
        if self.api_client.client_side_validation and 'last_ccseq' in local_var_params and local_var_params['last_ccseq'] < 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `last_ccseq` when calling `futures_v1_historical_funding_rate_messages`, must be a value greater than or equal to `0`")  # noqa: E501
        if self.api_client.client_side_validation and 'limit' in local_var_params and local_var_params['limit'] > 5000:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `futures_v1_historical_funding_rate_messages`, must be a value less than or equal to `5000`")  # noqa: E501
        if self.api_client.client_side_validation and 'limit' in local_var_params and local_var_params['limit'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `futures_v1_historical_funding_rate_messages`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if local_var_params.get('market') is not None:  # noqa: E501
            query_params.append(('market', local_var_params['market']))  # noqa: E501
        if local_var_params.get('instrument') is not None:  # noqa: E501
            query_params.append(('instrument', local_var_params['instrument']))  # noqa: E501
        if local_var_params.get('after_ts') is not None:  # noqa: E501
            query_params.append(('after_ts', local_var_params['after_ts']))  # noqa: E501
        if local_var_params.get('last_ccseq') is not None:  # noqa: E501
            query_params.append(('last_ccseq', local_var_params['last_ccseq']))  # noqa: E501
        if local_var_params.get('limit') is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if local_var_params.get('mapping_priority') is not None:  # noqa: E501
            query_params.append(('mapping_priority', local_var_params['mapping_priority']))  # noqa: E501
        if local_var_params.get('response_format') is not None:  # noqa: E501
            query_params.append(('response_format', local_var_params['response_format']))  # noqa: E501
        if local_var_params.get('return_404_on_empty_response') is not None:  # noqa: E501
            query_params.append(('return_404_on_empty_response', local_var_params['return_404_on_empty_response']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key_header', 'api_key_query']  # noqa: E501

        response_types_map = {
            200: "GENERICRESPONSE",
            400: "Error",
            401: "Error",
            403: "Error",
            404: "Error",
            405: "Error",
            429: "Error",
            500: "Error",
            502: "Error",
            503: "Error",
        }

        return self.api_client.call_api(
            '/futures/v1/historical/funding-rate-messages', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def futures_v1_historical_funding_rate_messages_hour(self, market, instrument, **kwargs):  # noqa: E501
        """futures_v1_historical_funding_rate_messages_hour  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.futures_v1_historical_funding_rate_messages_hour(market, instrument, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from (required)
        :type market: str
        :param instrument: The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
        :type instrument: str
        :param hour_ts: Unix timestamp in seconds for the hour containing the funding rate updates you are interested in. You can pass any timestamp in the hour but we will round it down the the full hour timestmap and return all funding rate updates in that hour.
        :type hour_ts: int
        :param mapping_priority: The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
        :type mapping_priority: str
        :param response_format: The format of the data response in uppercase. It can be one of the following: JSON,CSV
        :type response_format: str
        :param return_404_on_empty_response: If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.
        :type return_404_on_empty_response: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GENERICRESPONSE
        """
        kwargs['_return_http_data_only'] = True
        return self.futures_v1_historical_funding_rate_messages_hour_with_http_info(market, instrument, **kwargs)  # noqa: E501

    def futures_v1_historical_funding_rate_messages_hour_with_http_info(self, market, instrument, **kwargs):  # noqa: E501
        """futures_v1_historical_funding_rate_messages_hour  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.futures_v1_historical_funding_rate_messages_hour_with_http_info(market, instrument, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from (required)
        :type market: str
        :param instrument: The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
        :type instrument: str
        :param hour_ts: Unix timestamp in seconds for the hour containing the funding rate updates you are interested in. You can pass any timestamp in the hour but we will round it down the the full hour timestmap and return all funding rate updates in that hour.
        :type hour_ts: int
        :param mapping_priority: The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
        :type mapping_priority: str
        :param response_format: The format of the data response in uppercase. It can be one of the following: JSON,CSV
        :type response_format: str
        :param return_404_on_empty_response: If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.
        :type return_404_on_empty_response: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GENERICRESPONSE, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'market',
            'instrument',
            'hour_ts',
            'mapping_priority',
            'response_format',
            'return_404_on_empty_response'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method futures_v1_historical_funding_rate_messages_hour" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'market' is set
        if self.api_client.client_side_validation and local_var_params.get('market') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `market` when calling `futures_v1_historical_funding_rate_messages_hour`")  # noqa: E501
        # verify the required parameter 'instrument' is set
        if self.api_client.client_side_validation and local_var_params.get('instrument') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `instrument` when calling `futures_v1_historical_funding_rate_messages_hour`")  # noqa: E501

        if self.api_client.client_side_validation and ('market' in local_var_params and  # noqa: E501
                                                        len(local_var_params['market']) > 30):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `market` when calling `futures_v1_historical_funding_rate_messages_hour`, length must be less than or equal to `30`")  # noqa: E501
        if self.api_client.client_side_validation and ('market' in local_var_params and  # noqa: E501
                                                        len(local_var_params['market']) < 2):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `market` when calling `futures_v1_historical_funding_rate_messages_hour`, length must be greater than or equal to `2`")  # noqa: E501
        if self.api_client.client_side_validation and ('instrument' in local_var_params and  # noqa: E501
                                                        len(local_var_params['instrument']) > 500):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `instrument` when calling `futures_v1_historical_funding_rate_messages_hour`, length must be less than or equal to `500`")  # noqa: E501
        if self.api_client.client_side_validation and ('instrument' in local_var_params and  # noqa: E501
                                                        len(local_var_params['instrument']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `instrument` when calling `futures_v1_historical_funding_rate_messages_hour`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'hour_ts' in local_var_params and local_var_params['hour_ts'] < 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `hour_ts` when calling `futures_v1_historical_funding_rate_messages_hour`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if local_var_params.get('market') is not None:  # noqa: E501
            query_params.append(('market', local_var_params['market']))  # noqa: E501
        if local_var_params.get('instrument') is not None:  # noqa: E501
            query_params.append(('instrument', local_var_params['instrument']))  # noqa: E501
        if local_var_params.get('hour_ts') is not None:  # noqa: E501
            query_params.append(('hour_ts', local_var_params['hour_ts']))  # noqa: E501
        if local_var_params.get('mapping_priority') is not None:  # noqa: E501
            query_params.append(('mapping_priority', local_var_params['mapping_priority']))  # noqa: E501
        if local_var_params.get('response_format') is not None:  # noqa: E501
            query_params.append(('response_format', local_var_params['response_format']))  # noqa: E501
        if local_var_params.get('return_404_on_empty_response') is not None:  # noqa: E501
            query_params.append(('return_404_on_empty_response', local_var_params['return_404_on_empty_response']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key_header', 'api_key_query']  # noqa: E501

        response_types_map = {
            200: "GENERICRESPONSE",
            400: "Error",
            401: "Error",
            403: "Error",
            404: "Error",
            405: "Error",
            429: "Error",
            500: "Error",
            502: "Error",
            503: "Error",
        }

        return self.api_client.call_api(
            '/futures/v1/historical/funding-rate-messages/hour', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def futures_v1_historical_funding_rate_minutes(self, market, instrument, **kwargs):  # noqa: E501
        """futures_v1_historical_funding_rate_minutes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.futures_v1_historical_funding_rate_minutes(market, instrument, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from (required)
        :type market: str
        :param instrument: The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
        :type instrument: str
        :param groups: When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,OHLC,OHLC_MESSAGE,MESSAGE
        :type groups: list[str]
        :param limit: The number of data points to return
        :type limit: int
        :param to_ts: Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}
        :type to_ts: int
        :param aggregate: The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
        :type aggregate: int
        :param fill: Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
        :type fill: bool
        :param mapping_priority: The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
        :type mapping_priority: str
        :param response_format: The format of the data response in uppercase. It can be one of the following: JSON,CSV
        :type response_format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GENERICRESPONSE
        """
        kwargs['_return_http_data_only'] = True
        return self.futures_v1_historical_funding_rate_minutes_with_http_info(market, instrument, **kwargs)  # noqa: E501

    def futures_v1_historical_funding_rate_minutes_with_http_info(self, market, instrument, **kwargs):  # noqa: E501
        """futures_v1_historical_funding_rate_minutes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.futures_v1_historical_funding_rate_minutes_with_http_info(market, instrument, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from (required)
        :type market: str
        :param instrument: The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
        :type instrument: str
        :param groups: When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,OHLC,OHLC_MESSAGE,MESSAGE
        :type groups: list[str]
        :param limit: The number of data points to return
        :type limit: int
        :param to_ts: Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}
        :type to_ts: int
        :param aggregate: The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
        :type aggregate: int
        :param fill: Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
        :type fill: bool
        :param mapping_priority: The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
        :type mapping_priority: str
        :param response_format: The format of the data response in uppercase. It can be one of the following: JSON,CSV
        :type response_format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GENERICRESPONSE, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'market',
            'instrument',
            'groups',
            'limit',
            'to_ts',
            'aggregate',
            'fill',
            'mapping_priority',
            'response_format'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method futures_v1_historical_funding_rate_minutes" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'market' is set
        if self.api_client.client_side_validation and local_var_params.get('market') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `market` when calling `futures_v1_historical_funding_rate_minutes`")  # noqa: E501
        # verify the required parameter 'instrument' is set
        if self.api_client.client_side_validation and local_var_params.get('instrument') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `instrument` when calling `futures_v1_historical_funding_rate_minutes`")  # noqa: E501

        if self.api_client.client_side_validation and ('market' in local_var_params and  # noqa: E501
                                                        len(local_var_params['market']) > 30):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `market` when calling `futures_v1_historical_funding_rate_minutes`, length must be less than or equal to `30`")  # noqa: E501
        if self.api_client.client_side_validation and ('market' in local_var_params and  # noqa: E501
                                                        len(local_var_params['market']) < 2):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `market` when calling `futures_v1_historical_funding_rate_minutes`, length must be greater than or equal to `2`")  # noqa: E501
        if self.api_client.client_side_validation and ('instrument' in local_var_params and  # noqa: E501
                                                        len(local_var_params['instrument']) > 500):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `instrument` when calling `futures_v1_historical_funding_rate_minutes`, length must be less than or equal to `500`")  # noqa: E501
        if self.api_client.client_side_validation and ('instrument' in local_var_params and  # noqa: E501
                                                        len(local_var_params['instrument']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `instrument` when calling `futures_v1_historical_funding_rate_minutes`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'limit' in local_var_params and local_var_params['limit'] > 2000:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `futures_v1_historical_funding_rate_minutes`, must be a value less than or equal to `2000`")  # noqa: E501
        if self.api_client.client_side_validation and 'limit' in local_var_params and local_var_params['limit'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `futures_v1_historical_funding_rate_minutes`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'aggregate' in local_var_params and local_var_params['aggregate'] > 30:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `aggregate` when calling `futures_v1_historical_funding_rate_minutes`, must be a value less than or equal to `30`")  # noqa: E501
        if self.api_client.client_side_validation and 'aggregate' in local_var_params and local_var_params['aggregate'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `aggregate` when calling `futures_v1_historical_funding_rate_minutes`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if local_var_params.get('market') is not None:  # noqa: E501
            query_params.append(('market', local_var_params['market']))  # noqa: E501
        if local_var_params.get('instrument') is not None:  # noqa: E501
            query_params.append(('instrument', local_var_params['instrument']))  # noqa: E501
        if local_var_params.get('groups') is not None:  # noqa: E501
            query_params.append(('groups', local_var_params['groups']))  # noqa: E501
            collection_formats['groups'] = 'csv'  # noqa: E501
        if local_var_params.get('limit') is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if local_var_params.get('to_ts') is not None:  # noqa: E501
            query_params.append(('to_ts', local_var_params['to_ts']))  # noqa: E501
        if local_var_params.get('aggregate') is not None:  # noqa: E501
            query_params.append(('aggregate', local_var_params['aggregate']))  # noqa: E501
        if local_var_params.get('fill') is not None:  # noqa: E501
            query_params.append(('fill', local_var_params['fill']))  # noqa: E501
        if local_var_params.get('mapping_priority') is not None:  # noqa: E501
            query_params.append(('mapping_priority', local_var_params['mapping_priority']))  # noqa: E501
        if local_var_params.get('response_format') is not None:  # noqa: E501
            query_params.append(('response_format', local_var_params['response_format']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "GENERICRESPONSE",
            400: "Error",
            401: "Error",
            403: "Error",
            404: "Error",
            405: "Error",
            429: "Error",
            500: "Error",
            502: "Error",
            503: "Error",
        }

        return self.api_client.call_api(
            '/futures/v1/historical/funding-rate/minutes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def futures_v1_historical_hours(self, market, instrument, **kwargs):  # noqa: E501
        """futures_v1_historical_hours  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.futures_v1_historical_hours(market, instrument, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from (required)
        :type market: str
        :param instrument: The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
        :type instrument: str
        :param groups: When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME
        :type groups: list[str]
        :param limit: The number of data points to return
        :type limit: int
        :param to_ts: Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}
        :type to_ts: int
        :param aggregate: The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
        :type aggregate: int
        :param fill: Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
        :type fill: bool
        :param mapping_priority: The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
        :type mapping_priority: str
        :param response_format: The format of the data response in uppercase. It can be one of the following: JSON,CSV
        :type response_format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GENERICRESPONSE
        """
        kwargs['_return_http_data_only'] = True
        return self.futures_v1_historical_hours_with_http_info(market, instrument, **kwargs)  # noqa: E501

    def futures_v1_historical_hours_with_http_info(self, market, instrument, **kwargs):  # noqa: E501
        """futures_v1_historical_hours  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.futures_v1_historical_hours_with_http_info(market, instrument, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from (required)
        :type market: str
        :param instrument: The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
        :type instrument: str
        :param groups: When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME
        :type groups: list[str]
        :param limit: The number of data points to return
        :type limit: int
        :param to_ts: Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}
        :type to_ts: int
        :param aggregate: The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
        :type aggregate: int
        :param fill: Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
        :type fill: bool
        :param mapping_priority: The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
        :type mapping_priority: str
        :param response_format: The format of the data response in uppercase. It can be one of the following: JSON,CSV
        :type response_format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GENERICRESPONSE, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'market',
            'instrument',
            'groups',
            'limit',
            'to_ts',
            'aggregate',
            'fill',
            'mapping_priority',
            'response_format'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method futures_v1_historical_hours" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'market' is set
        if self.api_client.client_side_validation and local_var_params.get('market') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `market` when calling `futures_v1_historical_hours`")  # noqa: E501
        # verify the required parameter 'instrument' is set
        if self.api_client.client_side_validation and local_var_params.get('instrument') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `instrument` when calling `futures_v1_historical_hours`")  # noqa: E501

        if self.api_client.client_side_validation and ('market' in local_var_params and  # noqa: E501
                                                        len(local_var_params['market']) > 30):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `market` when calling `futures_v1_historical_hours`, length must be less than or equal to `30`")  # noqa: E501
        if self.api_client.client_side_validation and ('market' in local_var_params and  # noqa: E501
                                                        len(local_var_params['market']) < 2):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `market` when calling `futures_v1_historical_hours`, length must be greater than or equal to `2`")  # noqa: E501
        if self.api_client.client_side_validation and ('instrument' in local_var_params and  # noqa: E501
                                                        len(local_var_params['instrument']) > 500):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `instrument` when calling `futures_v1_historical_hours`, length must be less than or equal to `500`")  # noqa: E501
        if self.api_client.client_side_validation and ('instrument' in local_var_params and  # noqa: E501
                                                        len(local_var_params['instrument']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `instrument` when calling `futures_v1_historical_hours`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'limit' in local_var_params and local_var_params['limit'] > 2000:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `futures_v1_historical_hours`, must be a value less than or equal to `2000`")  # noqa: E501
        if self.api_client.client_side_validation and 'limit' in local_var_params and local_var_params['limit'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `futures_v1_historical_hours`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'aggregate' in local_var_params and local_var_params['aggregate'] > 30:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `aggregate` when calling `futures_v1_historical_hours`, must be a value less than or equal to `30`")  # noqa: E501
        if self.api_client.client_side_validation and 'aggregate' in local_var_params and local_var_params['aggregate'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `aggregate` when calling `futures_v1_historical_hours`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if local_var_params.get('market') is not None:  # noqa: E501
            query_params.append(('market', local_var_params['market']))  # noqa: E501
        if local_var_params.get('instrument') is not None:  # noqa: E501
            query_params.append(('instrument', local_var_params['instrument']))  # noqa: E501
        if local_var_params.get('groups') is not None:  # noqa: E501
            query_params.append(('groups', local_var_params['groups']))  # noqa: E501
            collection_formats['groups'] = 'csv'  # noqa: E501
        if local_var_params.get('limit') is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if local_var_params.get('to_ts') is not None:  # noqa: E501
            query_params.append(('to_ts', local_var_params['to_ts']))  # noqa: E501
        if local_var_params.get('aggregate') is not None:  # noqa: E501
            query_params.append(('aggregate', local_var_params['aggregate']))  # noqa: E501
        if local_var_params.get('fill') is not None:  # noqa: E501
            query_params.append(('fill', local_var_params['fill']))  # noqa: E501
        if local_var_params.get('mapping_priority') is not None:  # noqa: E501
            query_params.append(('mapping_priority', local_var_params['mapping_priority']))  # noqa: E501
        if local_var_params.get('response_format') is not None:  # noqa: E501
            query_params.append(('response_format', local_var_params['response_format']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "GENERICRESPONSE",
            400: "Error",
            401: "Error",
            403: "Error",
            404: "Error",
            405: "Error",
            429: "Error",
            500: "Error",
            502: "Error",
            503: "Error",
        }

        return self.api_client.call_api(
            '/futures/v1/historical/hours', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def futures_v1_historical_minutes(self, market, instrument, **kwargs):  # noqa: E501
        """futures_v1_historical_minutes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.futures_v1_historical_minutes(market, instrument, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from (required)
        :type market: str
        :param instrument: The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
        :type instrument: str
        :param groups: When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME
        :type groups: list[str]
        :param limit: The number of data points to return
        :type limit: int
        :param to_ts: Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}
        :type to_ts: int
        :param aggregate: The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
        :type aggregate: int
        :param fill: Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
        :type fill: bool
        :param mapping_priority: The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
        :type mapping_priority: str
        :param response_format: The format of the data response in uppercase. It can be one of the following: JSON,CSV
        :type response_format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GENERICRESPONSE
        """
        kwargs['_return_http_data_only'] = True
        return self.futures_v1_historical_minutes_with_http_info(market, instrument, **kwargs)  # noqa: E501

    def futures_v1_historical_minutes_with_http_info(self, market, instrument, **kwargs):  # noqa: E501
        """futures_v1_historical_minutes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.futures_v1_historical_minutes_with_http_info(market, instrument, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from (required)
        :type market: str
        :param instrument: The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
        :type instrument: str
        :param groups: When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME
        :type groups: list[str]
        :param limit: The number of data points to return
        :type limit: int
        :param to_ts: Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}
        :type to_ts: int
        :param aggregate: The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
        :type aggregate: int
        :param fill: Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
        :type fill: bool
        :param mapping_priority: The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
        :type mapping_priority: str
        :param response_format: The format of the data response in uppercase. It can be one of the following: JSON,CSV
        :type response_format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GENERICRESPONSE, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'market',
            'instrument',
            'groups',
            'limit',
            'to_ts',
            'aggregate',
            'fill',
            'mapping_priority',
            'response_format'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method futures_v1_historical_minutes" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'market' is set
        if self.api_client.client_side_validation and local_var_params.get('market') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `market` when calling `futures_v1_historical_minutes`")  # noqa: E501
        # verify the required parameter 'instrument' is set
        if self.api_client.client_side_validation and local_var_params.get('instrument') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `instrument` when calling `futures_v1_historical_minutes`")  # noqa: E501

        if self.api_client.client_side_validation and ('market' in local_var_params and  # noqa: E501
                                                        len(local_var_params['market']) > 30):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `market` when calling `futures_v1_historical_minutes`, length must be less than or equal to `30`")  # noqa: E501
        if self.api_client.client_side_validation and ('market' in local_var_params and  # noqa: E501
                                                        len(local_var_params['market']) < 2):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `market` when calling `futures_v1_historical_minutes`, length must be greater than or equal to `2`")  # noqa: E501
        if self.api_client.client_side_validation and ('instrument' in local_var_params and  # noqa: E501
                                                        len(local_var_params['instrument']) > 500):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `instrument` when calling `futures_v1_historical_minutes`, length must be less than or equal to `500`")  # noqa: E501
        if self.api_client.client_side_validation and ('instrument' in local_var_params and  # noqa: E501
                                                        len(local_var_params['instrument']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `instrument` when calling `futures_v1_historical_minutes`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'limit' in local_var_params and local_var_params['limit'] > 2000:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `futures_v1_historical_minutes`, must be a value less than or equal to `2000`")  # noqa: E501
        if self.api_client.client_side_validation and 'limit' in local_var_params and local_var_params['limit'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `futures_v1_historical_minutes`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'aggregate' in local_var_params and local_var_params['aggregate'] > 30:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `aggregate` when calling `futures_v1_historical_minutes`, must be a value less than or equal to `30`")  # noqa: E501
        if self.api_client.client_side_validation and 'aggregate' in local_var_params and local_var_params['aggregate'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `aggregate` when calling `futures_v1_historical_minutes`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if local_var_params.get('market') is not None:  # noqa: E501
            query_params.append(('market', local_var_params['market']))  # noqa: E501
        if local_var_params.get('instrument') is not None:  # noqa: E501
            query_params.append(('instrument', local_var_params['instrument']))  # noqa: E501
        if local_var_params.get('groups') is not None:  # noqa: E501
            query_params.append(('groups', local_var_params['groups']))  # noqa: E501
            collection_formats['groups'] = 'csv'  # noqa: E501
        if local_var_params.get('limit') is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if local_var_params.get('to_ts') is not None:  # noqa: E501
            query_params.append(('to_ts', local_var_params['to_ts']))  # noqa: E501
        if local_var_params.get('aggregate') is not None:  # noqa: E501
            query_params.append(('aggregate', local_var_params['aggregate']))  # noqa: E501
        if local_var_params.get('fill') is not None:  # noqa: E501
            query_params.append(('fill', local_var_params['fill']))  # noqa: E501
        if local_var_params.get('mapping_priority') is not None:  # noqa: E501
            query_params.append(('mapping_priority', local_var_params['mapping_priority']))  # noqa: E501
        if local_var_params.get('response_format') is not None:  # noqa: E501
            query_params.append(('response_format', local_var_params['response_format']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "GENERICRESPONSE",
            400: "Error",
            401: "Error",
            403: "Error",
            404: "Error",
            405: "Error",
            429: "Error",
            500: "Error",
            502: "Error",
            503: "Error",
        }

        return self.api_client.call_api(
            '/futures/v1/historical/minutes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def futures_v1_historical_open_interest_days(self, market, instrument, **kwargs):  # noqa: E501
        """futures_v1_historical_open_interest_days  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.futures_v1_historical_open_interest_days(market, instrument, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from (required)
        :type market: str
        :param instrument: The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
        :type instrument: str
        :param groups: When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_MESSAGE,MESSAGE
        :type groups: list[str]
        :param limit: The number of data points to return
        :type limit: int
        :param to_ts: Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}
        :type to_ts: int
        :param aggregate: The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
        :type aggregate: int
        :param fill: Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
        :type fill: bool
        :param mapping_priority: The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
        :type mapping_priority: str
        :param response_format: The format of the data response in uppercase. It can be one of the following: JSON,CSV
        :type response_format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GENERICRESPONSE
        """
        kwargs['_return_http_data_only'] = True
        return self.futures_v1_historical_open_interest_days_with_http_info(market, instrument, **kwargs)  # noqa: E501

    def futures_v1_historical_open_interest_days_with_http_info(self, market, instrument, **kwargs):  # noqa: E501
        """futures_v1_historical_open_interest_days  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.futures_v1_historical_open_interest_days_with_http_info(market, instrument, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from (required)
        :type market: str
        :param instrument: The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
        :type instrument: str
        :param groups: When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_MESSAGE,MESSAGE
        :type groups: list[str]
        :param limit: The number of data points to return
        :type limit: int
        :param to_ts: Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}
        :type to_ts: int
        :param aggregate: The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
        :type aggregate: int
        :param fill: Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
        :type fill: bool
        :param mapping_priority: The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
        :type mapping_priority: str
        :param response_format: The format of the data response in uppercase. It can be one of the following: JSON,CSV
        :type response_format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GENERICRESPONSE, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'market',
            'instrument',
            'groups',
            'limit',
            'to_ts',
            'aggregate',
            'fill',
            'mapping_priority',
            'response_format'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method futures_v1_historical_open_interest_days" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'market' is set
        if self.api_client.client_side_validation and local_var_params.get('market') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `market` when calling `futures_v1_historical_open_interest_days`")  # noqa: E501
        # verify the required parameter 'instrument' is set
        if self.api_client.client_side_validation and local_var_params.get('instrument') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `instrument` when calling `futures_v1_historical_open_interest_days`")  # noqa: E501

        if self.api_client.client_side_validation and ('market' in local_var_params and  # noqa: E501
                                                        len(local_var_params['market']) > 30):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `market` when calling `futures_v1_historical_open_interest_days`, length must be less than or equal to `30`")  # noqa: E501
        if self.api_client.client_side_validation and ('market' in local_var_params and  # noqa: E501
                                                        len(local_var_params['market']) < 2):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `market` when calling `futures_v1_historical_open_interest_days`, length must be greater than or equal to `2`")  # noqa: E501
        if self.api_client.client_side_validation and ('instrument' in local_var_params and  # noqa: E501
                                                        len(local_var_params['instrument']) > 500):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `instrument` when calling `futures_v1_historical_open_interest_days`, length must be less than or equal to `500`")  # noqa: E501
        if self.api_client.client_side_validation and ('instrument' in local_var_params and  # noqa: E501
                                                        len(local_var_params['instrument']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `instrument` when calling `futures_v1_historical_open_interest_days`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'limit' in local_var_params and local_var_params['limit'] > 5000:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `futures_v1_historical_open_interest_days`, must be a value less than or equal to `5000`")  # noqa: E501
        if self.api_client.client_side_validation and 'limit' in local_var_params and local_var_params['limit'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `futures_v1_historical_open_interest_days`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'aggregate' in local_var_params and local_var_params['aggregate'] > 30:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `aggregate` when calling `futures_v1_historical_open_interest_days`, must be a value less than or equal to `30`")  # noqa: E501
        if self.api_client.client_side_validation and 'aggregate' in local_var_params and local_var_params['aggregate'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `aggregate` when calling `futures_v1_historical_open_interest_days`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if local_var_params.get('market') is not None:  # noqa: E501
            query_params.append(('market', local_var_params['market']))  # noqa: E501
        if local_var_params.get('instrument') is not None:  # noqa: E501
            query_params.append(('instrument', local_var_params['instrument']))  # noqa: E501
        if local_var_params.get('groups') is not None:  # noqa: E501
            query_params.append(('groups', local_var_params['groups']))  # noqa: E501
            collection_formats['groups'] = 'csv'  # noqa: E501
        if local_var_params.get('limit') is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if local_var_params.get('to_ts') is not None:  # noqa: E501
            query_params.append(('to_ts', local_var_params['to_ts']))  # noqa: E501
        if local_var_params.get('aggregate') is not None:  # noqa: E501
            query_params.append(('aggregate', local_var_params['aggregate']))  # noqa: E501
        if local_var_params.get('fill') is not None:  # noqa: E501
            query_params.append(('fill', local_var_params['fill']))  # noqa: E501
        if local_var_params.get('mapping_priority') is not None:  # noqa: E501
            query_params.append(('mapping_priority', local_var_params['mapping_priority']))  # noqa: E501
        if local_var_params.get('response_format') is not None:  # noqa: E501
            query_params.append(('response_format', local_var_params['response_format']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "GENERICRESPONSE",
            400: "Error",
            401: "Error",
            403: "Error",
            404: "Error",
            405: "Error",
            429: "Error",
            500: "Error",
            502: "Error",
            503: "Error",
        }

        return self.api_client.call_api(
            '/futures/v1/historical/open-interest/days', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def futures_v1_historical_open_interest_hours(self, market, instrument, **kwargs):  # noqa: E501
        """futures_v1_historical_open_interest_hours  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.futures_v1_historical_open_interest_hours(market, instrument, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from (required)
        :type market: str
        :param instrument: The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
        :type instrument: str
        :param groups: When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_MESSAGE,MESSAGE
        :type groups: list[str]
        :param limit: The number of data points to return
        :type limit: int
        :param to_ts: Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}
        :type to_ts: int
        :param aggregate: The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
        :type aggregate: int
        :param fill: Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
        :type fill: bool
        :param mapping_priority: The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
        :type mapping_priority: str
        :param response_format: The format of the data response in uppercase. It can be one of the following: JSON,CSV
        :type response_format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GENERICRESPONSE
        """
        kwargs['_return_http_data_only'] = True
        return self.futures_v1_historical_open_interest_hours_with_http_info(market, instrument, **kwargs)  # noqa: E501

    def futures_v1_historical_open_interest_hours_with_http_info(self, market, instrument, **kwargs):  # noqa: E501
        """futures_v1_historical_open_interest_hours  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.futures_v1_historical_open_interest_hours_with_http_info(market, instrument, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from (required)
        :type market: str
        :param instrument: The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
        :type instrument: str
        :param groups: When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_MESSAGE,MESSAGE
        :type groups: list[str]
        :param limit: The number of data points to return
        :type limit: int
        :param to_ts: Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}
        :type to_ts: int
        :param aggregate: The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
        :type aggregate: int
        :param fill: Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
        :type fill: bool
        :param mapping_priority: The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
        :type mapping_priority: str
        :param response_format: The format of the data response in uppercase. It can be one of the following: JSON,CSV
        :type response_format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GENERICRESPONSE, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'market',
            'instrument',
            'groups',
            'limit',
            'to_ts',
            'aggregate',
            'fill',
            'mapping_priority',
            'response_format'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method futures_v1_historical_open_interest_hours" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'market' is set
        if self.api_client.client_side_validation and local_var_params.get('market') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `market` when calling `futures_v1_historical_open_interest_hours`")  # noqa: E501
        # verify the required parameter 'instrument' is set
        if self.api_client.client_side_validation and local_var_params.get('instrument') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `instrument` when calling `futures_v1_historical_open_interest_hours`")  # noqa: E501

        if self.api_client.client_side_validation and ('market' in local_var_params and  # noqa: E501
                                                        len(local_var_params['market']) > 30):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `market` when calling `futures_v1_historical_open_interest_hours`, length must be less than or equal to `30`")  # noqa: E501
        if self.api_client.client_side_validation and ('market' in local_var_params and  # noqa: E501
                                                        len(local_var_params['market']) < 2):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `market` when calling `futures_v1_historical_open_interest_hours`, length must be greater than or equal to `2`")  # noqa: E501
        if self.api_client.client_side_validation and ('instrument' in local_var_params and  # noqa: E501
                                                        len(local_var_params['instrument']) > 500):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `instrument` when calling `futures_v1_historical_open_interest_hours`, length must be less than or equal to `500`")  # noqa: E501
        if self.api_client.client_side_validation and ('instrument' in local_var_params and  # noqa: E501
                                                        len(local_var_params['instrument']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `instrument` when calling `futures_v1_historical_open_interest_hours`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'limit' in local_var_params and local_var_params['limit'] > 2000:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `futures_v1_historical_open_interest_hours`, must be a value less than or equal to `2000`")  # noqa: E501
        if self.api_client.client_side_validation and 'limit' in local_var_params and local_var_params['limit'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `futures_v1_historical_open_interest_hours`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'aggregate' in local_var_params and local_var_params['aggregate'] > 30:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `aggregate` when calling `futures_v1_historical_open_interest_hours`, must be a value less than or equal to `30`")  # noqa: E501
        if self.api_client.client_side_validation and 'aggregate' in local_var_params and local_var_params['aggregate'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `aggregate` when calling `futures_v1_historical_open_interest_hours`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if local_var_params.get('market') is not None:  # noqa: E501
            query_params.append(('market', local_var_params['market']))  # noqa: E501
        if local_var_params.get('instrument') is not None:  # noqa: E501
            query_params.append(('instrument', local_var_params['instrument']))  # noqa: E501
        if local_var_params.get('groups') is not None:  # noqa: E501
            query_params.append(('groups', local_var_params['groups']))  # noqa: E501
            collection_formats['groups'] = 'csv'  # noqa: E501
        if local_var_params.get('limit') is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if local_var_params.get('to_ts') is not None:  # noqa: E501
            query_params.append(('to_ts', local_var_params['to_ts']))  # noqa: E501
        if local_var_params.get('aggregate') is not None:  # noqa: E501
            query_params.append(('aggregate', local_var_params['aggregate']))  # noqa: E501
        if local_var_params.get('fill') is not None:  # noqa: E501
            query_params.append(('fill', local_var_params['fill']))  # noqa: E501
        if local_var_params.get('mapping_priority') is not None:  # noqa: E501
            query_params.append(('mapping_priority', local_var_params['mapping_priority']))  # noqa: E501
        if local_var_params.get('response_format') is not None:  # noqa: E501
            query_params.append(('response_format', local_var_params['response_format']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "GENERICRESPONSE",
            400: "Error",
            401: "Error",
            403: "Error",
            404: "Error",
            405: "Error",
            429: "Error",
            500: "Error",
            502: "Error",
            503: "Error",
        }

        return self.api_client.call_api(
            '/futures/v1/historical/open-interest/hours', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def futures_v1_historical_open_interest_messages(self, market, instrument, **kwargs):  # noqa: E501
        """futures_v1_historical_open_interest_messages  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.futures_v1_historical_open_interest_messages(market, instrument, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from (required)
        :type market: str
        :param instrument: The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
        :type instrument: str
        :param after_ts: Unix timestamp in seconds of the earliest open interest message in the response
        :type after_ts: int
        :param last_ccseq: The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request.
        :type last_ccseq: int
        :param limit: The maximum number of open interest messages to return
        :type limit: int
        :param mapping_priority: The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
        :type mapping_priority: str
        :param response_format: The format of the data response in uppercase. It can be one of the following: JSON,CSV
        :type response_format: str
        :param return_404_on_empty_response: If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.
        :type return_404_on_empty_response: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GENERICRESPONSE
        """
        kwargs['_return_http_data_only'] = True
        return self.futures_v1_historical_open_interest_messages_with_http_info(market, instrument, **kwargs)  # noqa: E501

    def futures_v1_historical_open_interest_messages_with_http_info(self, market, instrument, **kwargs):  # noqa: E501
        """futures_v1_historical_open_interest_messages  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.futures_v1_historical_open_interest_messages_with_http_info(market, instrument, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from (required)
        :type market: str
        :param instrument: The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
        :type instrument: str
        :param after_ts: Unix timestamp in seconds of the earliest open interest message in the response
        :type after_ts: int
        :param last_ccseq: The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request.
        :type last_ccseq: int
        :param limit: The maximum number of open interest messages to return
        :type limit: int
        :param mapping_priority: The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
        :type mapping_priority: str
        :param response_format: The format of the data response in uppercase. It can be one of the following: JSON,CSV
        :type response_format: str
        :param return_404_on_empty_response: If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.
        :type return_404_on_empty_response: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GENERICRESPONSE, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'market',
            'instrument',
            'after_ts',
            'last_ccseq',
            'limit',
            'mapping_priority',
            'response_format',
            'return_404_on_empty_response'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method futures_v1_historical_open_interest_messages" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'market' is set
        if self.api_client.client_side_validation and local_var_params.get('market') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `market` when calling `futures_v1_historical_open_interest_messages`")  # noqa: E501
        # verify the required parameter 'instrument' is set
        if self.api_client.client_side_validation and local_var_params.get('instrument') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `instrument` when calling `futures_v1_historical_open_interest_messages`")  # noqa: E501

        if self.api_client.client_side_validation and ('market' in local_var_params and  # noqa: E501
                                                        len(local_var_params['market']) > 30):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `market` when calling `futures_v1_historical_open_interest_messages`, length must be less than or equal to `30`")  # noqa: E501
        if self.api_client.client_side_validation and ('market' in local_var_params and  # noqa: E501
                                                        len(local_var_params['market']) < 2):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `market` when calling `futures_v1_historical_open_interest_messages`, length must be greater than or equal to `2`")  # noqa: E501
        if self.api_client.client_side_validation and ('instrument' in local_var_params and  # noqa: E501
                                                        len(local_var_params['instrument']) > 500):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `instrument` when calling `futures_v1_historical_open_interest_messages`, length must be less than or equal to `500`")  # noqa: E501
        if self.api_client.client_side_validation and ('instrument' in local_var_params and  # noqa: E501
                                                        len(local_var_params['instrument']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `instrument` when calling `futures_v1_historical_open_interest_messages`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'after_ts' in local_var_params and local_var_params['after_ts'] < 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `after_ts` when calling `futures_v1_historical_open_interest_messages`, must be a value greater than or equal to `0`")  # noqa: E501
        if self.api_client.client_side_validation and 'last_ccseq' in local_var_params and local_var_params['last_ccseq'] < 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `last_ccseq` when calling `futures_v1_historical_open_interest_messages`, must be a value greater than or equal to `0`")  # noqa: E501
        if self.api_client.client_side_validation and 'limit' in local_var_params and local_var_params['limit'] > 5000:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `futures_v1_historical_open_interest_messages`, must be a value less than or equal to `5000`")  # noqa: E501
        if self.api_client.client_side_validation and 'limit' in local_var_params and local_var_params['limit'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `futures_v1_historical_open_interest_messages`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if local_var_params.get('market') is not None:  # noqa: E501
            query_params.append(('market', local_var_params['market']))  # noqa: E501
        if local_var_params.get('instrument') is not None:  # noqa: E501
            query_params.append(('instrument', local_var_params['instrument']))  # noqa: E501
        if local_var_params.get('after_ts') is not None:  # noqa: E501
            query_params.append(('after_ts', local_var_params['after_ts']))  # noqa: E501
        if local_var_params.get('last_ccseq') is not None:  # noqa: E501
            query_params.append(('last_ccseq', local_var_params['last_ccseq']))  # noqa: E501
        if local_var_params.get('limit') is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if local_var_params.get('mapping_priority') is not None:  # noqa: E501
            query_params.append(('mapping_priority', local_var_params['mapping_priority']))  # noqa: E501
        if local_var_params.get('response_format') is not None:  # noqa: E501
            query_params.append(('response_format', local_var_params['response_format']))  # noqa: E501
        if local_var_params.get('return_404_on_empty_response') is not None:  # noqa: E501
            query_params.append(('return_404_on_empty_response', local_var_params['return_404_on_empty_response']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key_header', 'api_key_query']  # noqa: E501

        response_types_map = {
            200: "GENERICRESPONSE",
            400: "Error",
            401: "Error",
            403: "Error",
            404: "Error",
            405: "Error",
            429: "Error",
            500: "Error",
            502: "Error",
            503: "Error",
        }

        return self.api_client.call_api(
            '/futures/v1/historical/open-interest-messages', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def futures_v1_historical_open_interest_messages_hour(self, market, instrument, **kwargs):  # noqa: E501
        """futures_v1_historical_open_interest_messages_hour  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.futures_v1_historical_open_interest_messages_hour(market, instrument, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from (required)
        :type market: str
        :param instrument: The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
        :type instrument: str
        :param hour_ts: Unix timestamp in seconds for the hour containing the open interest updates you are interested in. You can pass any timestamp in the hour but we will round it down the the full hour timestmap and return all open interest updates in that hour.
        :type hour_ts: int
        :param mapping_priority: The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
        :type mapping_priority: str
        :param response_format: The format of the data response in uppercase. It can be one of the following: JSON,CSV
        :type response_format: str
        :param return_404_on_empty_response: If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.
        :type return_404_on_empty_response: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GENERICRESPONSE
        """
        kwargs['_return_http_data_only'] = True
        return self.futures_v1_historical_open_interest_messages_hour_with_http_info(market, instrument, **kwargs)  # noqa: E501

    def futures_v1_historical_open_interest_messages_hour_with_http_info(self, market, instrument, **kwargs):  # noqa: E501
        """futures_v1_historical_open_interest_messages_hour  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.futures_v1_historical_open_interest_messages_hour_with_http_info(market, instrument, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from (required)
        :type market: str
        :param instrument: The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
        :type instrument: str
        :param hour_ts: Unix timestamp in seconds for the hour containing the open interest updates you are interested in. You can pass any timestamp in the hour but we will round it down the the full hour timestmap and return all open interest updates in that hour.
        :type hour_ts: int
        :param mapping_priority: The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
        :type mapping_priority: str
        :param response_format: The format of the data response in uppercase. It can be one of the following: JSON,CSV
        :type response_format: str
        :param return_404_on_empty_response: If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.
        :type return_404_on_empty_response: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GENERICRESPONSE, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'market',
            'instrument',
            'hour_ts',
            'mapping_priority',
            'response_format',
            'return_404_on_empty_response'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method futures_v1_historical_open_interest_messages_hour" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'market' is set
        if self.api_client.client_side_validation and local_var_params.get('market') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `market` when calling `futures_v1_historical_open_interest_messages_hour`")  # noqa: E501
        # verify the required parameter 'instrument' is set
        if self.api_client.client_side_validation and local_var_params.get('instrument') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `instrument` when calling `futures_v1_historical_open_interest_messages_hour`")  # noqa: E501

        if self.api_client.client_side_validation and ('market' in local_var_params and  # noqa: E501
                                                        len(local_var_params['market']) > 30):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `market` when calling `futures_v1_historical_open_interest_messages_hour`, length must be less than or equal to `30`")  # noqa: E501
        if self.api_client.client_side_validation and ('market' in local_var_params and  # noqa: E501
                                                        len(local_var_params['market']) < 2):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `market` when calling `futures_v1_historical_open_interest_messages_hour`, length must be greater than or equal to `2`")  # noqa: E501
        if self.api_client.client_side_validation and ('instrument' in local_var_params and  # noqa: E501
                                                        len(local_var_params['instrument']) > 500):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `instrument` when calling `futures_v1_historical_open_interest_messages_hour`, length must be less than or equal to `500`")  # noqa: E501
        if self.api_client.client_side_validation and ('instrument' in local_var_params and  # noqa: E501
                                                        len(local_var_params['instrument']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `instrument` when calling `futures_v1_historical_open_interest_messages_hour`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'hour_ts' in local_var_params and local_var_params['hour_ts'] < 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `hour_ts` when calling `futures_v1_historical_open_interest_messages_hour`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if local_var_params.get('market') is not None:  # noqa: E501
            query_params.append(('market', local_var_params['market']))  # noqa: E501
        if local_var_params.get('instrument') is not None:  # noqa: E501
            query_params.append(('instrument', local_var_params['instrument']))  # noqa: E501
        if local_var_params.get('hour_ts') is not None:  # noqa: E501
            query_params.append(('hour_ts', local_var_params['hour_ts']))  # noqa: E501
        if local_var_params.get('mapping_priority') is not None:  # noqa: E501
            query_params.append(('mapping_priority', local_var_params['mapping_priority']))  # noqa: E501
        if local_var_params.get('response_format') is not None:  # noqa: E501
            query_params.append(('response_format', local_var_params['response_format']))  # noqa: E501
        if local_var_params.get('return_404_on_empty_response') is not None:  # noqa: E501
            query_params.append(('return_404_on_empty_response', local_var_params['return_404_on_empty_response']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key_header', 'api_key_query']  # noqa: E501

        response_types_map = {
            200: "GENERICRESPONSE",
            400: "Error",
            401: "Error",
            403: "Error",
            404: "Error",
            405: "Error",
            429: "Error",
            500: "Error",
            502: "Error",
            503: "Error",
        }

        return self.api_client.call_api(
            '/futures/v1/historical/open-interest-messages/hour', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def futures_v1_historical_open_interest_minutes(self, market, instrument, **kwargs):  # noqa: E501
        """futures_v1_historical_open_interest_minutes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.futures_v1_historical_open_interest_minutes(market, instrument, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from (required)
        :type market: str
        :param instrument: The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
        :type instrument: str
        :param groups: When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_MESSAGE,MESSAGE
        :type groups: list[str]
        :param limit: The number of data points to return
        :type limit: int
        :param to_ts: Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}
        :type to_ts: int
        :param aggregate: The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
        :type aggregate: int
        :param fill: Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
        :type fill: bool
        :param mapping_priority: The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
        :type mapping_priority: str
        :param response_format: The format of the data response in uppercase. It can be one of the following: JSON,CSV
        :type response_format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GENERICRESPONSE
        """
        kwargs['_return_http_data_only'] = True
        return self.futures_v1_historical_open_interest_minutes_with_http_info(market, instrument, **kwargs)  # noqa: E501

    def futures_v1_historical_open_interest_minutes_with_http_info(self, market, instrument, **kwargs):  # noqa: E501
        """futures_v1_historical_open_interest_minutes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.futures_v1_historical_open_interest_minutes_with_http_info(market, instrument, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from (required)
        :type market: str
        :param instrument: The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
        :type instrument: str
        :param groups: When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_MESSAGE,MESSAGE
        :type groups: list[str]
        :param limit: The number of data points to return
        :type limit: int
        :param to_ts: Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}
        :type to_ts: int
        :param aggregate: The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
        :type aggregate: int
        :param fill: Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
        :type fill: bool
        :param mapping_priority: The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
        :type mapping_priority: str
        :param response_format: The format of the data response in uppercase. It can be one of the following: JSON,CSV
        :type response_format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GENERICRESPONSE, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'market',
            'instrument',
            'groups',
            'limit',
            'to_ts',
            'aggregate',
            'fill',
            'mapping_priority',
            'response_format'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method futures_v1_historical_open_interest_minutes" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'market' is set
        if self.api_client.client_side_validation and local_var_params.get('market') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `market` when calling `futures_v1_historical_open_interest_minutes`")  # noqa: E501
        # verify the required parameter 'instrument' is set
        if self.api_client.client_side_validation and local_var_params.get('instrument') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `instrument` when calling `futures_v1_historical_open_interest_minutes`")  # noqa: E501

        if self.api_client.client_side_validation and ('market' in local_var_params and  # noqa: E501
                                                        len(local_var_params['market']) > 30):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `market` when calling `futures_v1_historical_open_interest_minutes`, length must be less than or equal to `30`")  # noqa: E501
        if self.api_client.client_side_validation and ('market' in local_var_params and  # noqa: E501
                                                        len(local_var_params['market']) < 2):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `market` when calling `futures_v1_historical_open_interest_minutes`, length must be greater than or equal to `2`")  # noqa: E501
        if self.api_client.client_side_validation and ('instrument' in local_var_params and  # noqa: E501
                                                        len(local_var_params['instrument']) > 500):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `instrument` when calling `futures_v1_historical_open_interest_minutes`, length must be less than or equal to `500`")  # noqa: E501
        if self.api_client.client_side_validation and ('instrument' in local_var_params and  # noqa: E501
                                                        len(local_var_params['instrument']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `instrument` when calling `futures_v1_historical_open_interest_minutes`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'limit' in local_var_params and local_var_params['limit'] > 2000:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `futures_v1_historical_open_interest_minutes`, must be a value less than or equal to `2000`")  # noqa: E501
        if self.api_client.client_side_validation and 'limit' in local_var_params and local_var_params['limit'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `futures_v1_historical_open_interest_minutes`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'aggregate' in local_var_params and local_var_params['aggregate'] > 30:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `aggregate` when calling `futures_v1_historical_open_interest_minutes`, must be a value less than or equal to `30`")  # noqa: E501
        if self.api_client.client_side_validation and 'aggregate' in local_var_params and local_var_params['aggregate'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `aggregate` when calling `futures_v1_historical_open_interest_minutes`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if local_var_params.get('market') is not None:  # noqa: E501
            query_params.append(('market', local_var_params['market']))  # noqa: E501
        if local_var_params.get('instrument') is not None:  # noqa: E501
            query_params.append(('instrument', local_var_params['instrument']))  # noqa: E501
        if local_var_params.get('groups') is not None:  # noqa: E501
            query_params.append(('groups', local_var_params['groups']))  # noqa: E501
            collection_formats['groups'] = 'csv'  # noqa: E501
        if local_var_params.get('limit') is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if local_var_params.get('to_ts') is not None:  # noqa: E501
            query_params.append(('to_ts', local_var_params['to_ts']))  # noqa: E501
        if local_var_params.get('aggregate') is not None:  # noqa: E501
            query_params.append(('aggregate', local_var_params['aggregate']))  # noqa: E501
        if local_var_params.get('fill') is not None:  # noqa: E501
            query_params.append(('fill', local_var_params['fill']))  # noqa: E501
        if local_var_params.get('mapping_priority') is not None:  # noqa: E501
            query_params.append(('mapping_priority', local_var_params['mapping_priority']))  # noqa: E501
        if local_var_params.get('response_format') is not None:  # noqa: E501
            query_params.append(('response_format', local_var_params['response_format']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "GENERICRESPONSE",
            400: "Error",
            401: "Error",
            403: "Error",
            404: "Error",
            405: "Error",
            429: "Error",
            500: "Error",
            502: "Error",
            503: "Error",
        }

        return self.api_client.call_api(
            '/futures/v1/historical/open-interest/minutes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def futures_v1_historical_trades(self, market, instrument, **kwargs):  # noqa: E501
        """futures_v1_historical_trades  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.futures_v1_historical_trades(market, instrument, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from (required)
        :type market: str
        :param instrument: The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
        :type instrument: str
        :param after_ts: Unix timestamp in seconds of the earliest trade in the response.
        :type after_ts: int
        :param last_ccseq: The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request.
        :type last_ccseq: int
        :param limit: The maximum number of trades to return
        :type limit: int
        :param mapping_priority: The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
        :type mapping_priority: str
        :param response_format: The format of the data response in uppercase. It can be one of the following: JSON,CSV
        :type response_format: str
        :param return_404_on_empty_response: If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.
        :type return_404_on_empty_response: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GENERICRESPONSE
        """
        kwargs['_return_http_data_only'] = True
        return self.futures_v1_historical_trades_with_http_info(market, instrument, **kwargs)  # noqa: E501

    def futures_v1_historical_trades_with_http_info(self, market, instrument, **kwargs):  # noqa: E501
        """futures_v1_historical_trades  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.futures_v1_historical_trades_with_http_info(market, instrument, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from (required)
        :type market: str
        :param instrument: The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
        :type instrument: str
        :param after_ts: Unix timestamp in seconds of the earliest trade in the response.
        :type after_ts: int
        :param last_ccseq: The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request.
        :type last_ccseq: int
        :param limit: The maximum number of trades to return
        :type limit: int
        :param mapping_priority: The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
        :type mapping_priority: str
        :param response_format: The format of the data response in uppercase. It can be one of the following: JSON,CSV
        :type response_format: str
        :param return_404_on_empty_response: If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.
        :type return_404_on_empty_response: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GENERICRESPONSE, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'market',
            'instrument',
            'after_ts',
            'last_ccseq',
            'limit',
            'mapping_priority',
            'response_format',
            'return_404_on_empty_response'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method futures_v1_historical_trades" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'market' is set
        if self.api_client.client_side_validation and local_var_params.get('market') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `market` when calling `futures_v1_historical_trades`")  # noqa: E501
        # verify the required parameter 'instrument' is set
        if self.api_client.client_side_validation and local_var_params.get('instrument') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `instrument` when calling `futures_v1_historical_trades`")  # noqa: E501

        if self.api_client.client_side_validation and ('market' in local_var_params and  # noqa: E501
                                                        len(local_var_params['market']) > 30):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `market` when calling `futures_v1_historical_trades`, length must be less than or equal to `30`")  # noqa: E501
        if self.api_client.client_side_validation and ('market' in local_var_params and  # noqa: E501
                                                        len(local_var_params['market']) < 2):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `market` when calling `futures_v1_historical_trades`, length must be greater than or equal to `2`")  # noqa: E501
        if self.api_client.client_side_validation and ('instrument' in local_var_params and  # noqa: E501
                                                        len(local_var_params['instrument']) > 500):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `instrument` when calling `futures_v1_historical_trades`, length must be less than or equal to `500`")  # noqa: E501
        if self.api_client.client_side_validation and ('instrument' in local_var_params and  # noqa: E501
                                                        len(local_var_params['instrument']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `instrument` when calling `futures_v1_historical_trades`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'after_ts' in local_var_params and local_var_params['after_ts'] < 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `after_ts` when calling `futures_v1_historical_trades`, must be a value greater than or equal to `0`")  # noqa: E501
        if self.api_client.client_side_validation and 'last_ccseq' in local_var_params and local_var_params['last_ccseq'] < 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `last_ccseq` when calling `futures_v1_historical_trades`, must be a value greater than or equal to `0`")  # noqa: E501
        if self.api_client.client_side_validation and 'limit' in local_var_params and local_var_params['limit'] > 5000:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `futures_v1_historical_trades`, must be a value less than or equal to `5000`")  # noqa: E501
        if self.api_client.client_side_validation and 'limit' in local_var_params and local_var_params['limit'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `futures_v1_historical_trades`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if local_var_params.get('market') is not None:  # noqa: E501
            query_params.append(('market', local_var_params['market']))  # noqa: E501
        if local_var_params.get('instrument') is not None:  # noqa: E501
            query_params.append(('instrument', local_var_params['instrument']))  # noqa: E501
        if local_var_params.get('after_ts') is not None:  # noqa: E501
            query_params.append(('after_ts', local_var_params['after_ts']))  # noqa: E501
        if local_var_params.get('last_ccseq') is not None:  # noqa: E501
            query_params.append(('last_ccseq', local_var_params['last_ccseq']))  # noqa: E501
        if local_var_params.get('limit') is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if local_var_params.get('mapping_priority') is not None:  # noqa: E501
            query_params.append(('mapping_priority', local_var_params['mapping_priority']))  # noqa: E501
        if local_var_params.get('response_format') is not None:  # noqa: E501
            query_params.append(('response_format', local_var_params['response_format']))  # noqa: E501
        if local_var_params.get('return_404_on_empty_response') is not None:  # noqa: E501
            query_params.append(('return_404_on_empty_response', local_var_params['return_404_on_empty_response']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key_header', 'api_key_query']  # noqa: E501

        response_types_map = {
            200: "GENERICRESPONSE",
            400: "Error",
            401: "Error",
            403: "Error",
            404: "Error",
            405: "Error",
            429: "Error",
            500: "Error",
            502: "Error",
            503: "Error",
        }

        return self.api_client.call_api(
            '/futures/v1/historical/trades', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def futures_v1_historical_trades_hour(self, market, instrument, **kwargs):  # noqa: E501
        """futures_v1_historical_trades_hour  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.futures_v1_historical_trades_hour(market, instrument, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from (required)
        :type market: str
        :param instrument: The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
        :type instrument: str
        :param hour_ts: Unix timestamp in seconds for the hour containing the trades you are interested in. You can pass any timestamp within an hour but we will round it down the the full hour timestmap and return all trades in that hour.
        :type hour_ts: int
        :param mapping_priority: The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
        :type mapping_priority: str
        :param response_format: The format of the data response in uppercase. It can be one of the following: JSON,CSV
        :type response_format: str
        :param return_404_on_empty_response: If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.
        :type return_404_on_empty_response: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GENERICRESPONSE
        """
        kwargs['_return_http_data_only'] = True
        return self.futures_v1_historical_trades_hour_with_http_info(market, instrument, **kwargs)  # noqa: E501

    def futures_v1_historical_trades_hour_with_http_info(self, market, instrument, **kwargs):  # noqa: E501
        """futures_v1_historical_trades_hour  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.futures_v1_historical_trades_hour_with_http_info(market, instrument, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from (required)
        :type market: str
        :param instrument: The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
        :type instrument: str
        :param hour_ts: Unix timestamp in seconds for the hour containing the trades you are interested in. You can pass any timestamp within an hour but we will round it down the the full hour timestmap and return all trades in that hour.
        :type hour_ts: int
        :param mapping_priority: The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
        :type mapping_priority: str
        :param response_format: The format of the data response in uppercase. It can be one of the following: JSON,CSV
        :type response_format: str
        :param return_404_on_empty_response: If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.
        :type return_404_on_empty_response: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GENERICRESPONSE, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'market',
            'instrument',
            'hour_ts',
            'mapping_priority',
            'response_format',
            'return_404_on_empty_response'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method futures_v1_historical_trades_hour" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'market' is set
        if self.api_client.client_side_validation and local_var_params.get('market') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `market` when calling `futures_v1_historical_trades_hour`")  # noqa: E501
        # verify the required parameter 'instrument' is set
        if self.api_client.client_side_validation and local_var_params.get('instrument') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `instrument` when calling `futures_v1_historical_trades_hour`")  # noqa: E501

        if self.api_client.client_side_validation and ('market' in local_var_params and  # noqa: E501
                                                        len(local_var_params['market']) > 30):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `market` when calling `futures_v1_historical_trades_hour`, length must be less than or equal to `30`")  # noqa: E501
        if self.api_client.client_side_validation and ('market' in local_var_params and  # noqa: E501
                                                        len(local_var_params['market']) < 2):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `market` when calling `futures_v1_historical_trades_hour`, length must be greater than or equal to `2`")  # noqa: E501
        if self.api_client.client_side_validation and ('instrument' in local_var_params and  # noqa: E501
                                                        len(local_var_params['instrument']) > 500):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `instrument` when calling `futures_v1_historical_trades_hour`, length must be less than or equal to `500`")  # noqa: E501
        if self.api_client.client_side_validation and ('instrument' in local_var_params and  # noqa: E501
                                                        len(local_var_params['instrument']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `instrument` when calling `futures_v1_historical_trades_hour`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'hour_ts' in local_var_params and local_var_params['hour_ts'] < 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `hour_ts` when calling `futures_v1_historical_trades_hour`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if local_var_params.get('market') is not None:  # noqa: E501
            query_params.append(('market', local_var_params['market']))  # noqa: E501
        if local_var_params.get('instrument') is not None:  # noqa: E501
            query_params.append(('instrument', local_var_params['instrument']))  # noqa: E501
        if local_var_params.get('hour_ts') is not None:  # noqa: E501
            query_params.append(('hour_ts', local_var_params['hour_ts']))  # noqa: E501
        if local_var_params.get('mapping_priority') is not None:  # noqa: E501
            query_params.append(('mapping_priority', local_var_params['mapping_priority']))  # noqa: E501
        if local_var_params.get('response_format') is not None:  # noqa: E501
            query_params.append(('response_format', local_var_params['response_format']))  # noqa: E501
        if local_var_params.get('return_404_on_empty_response') is not None:  # noqa: E501
            query_params.append(('return_404_on_empty_response', local_var_params['return_404_on_empty_response']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key_header', 'api_key_query']  # noqa: E501

        response_types_map = {
            200: "GENERICRESPONSE",
            400: "Error",
            401: "Error",
            403: "Error",
            404: "Error",
            405: "Error",
            429: "Error",
            500: "Error",
            502: "Error",
            503: "Error",
        }

        return self.api_client.call_api(
            '/futures/v1/historical/trades/hour', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def futures_v1_latest_funding_rate_tick(self, market, instruments, **kwargs):  # noqa: E501
        """futures_v1_latest_funding_rate_tick  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.futures_v1_latest_funding_rate_tick(market, instruments, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from (required)
        :type market: str
        :param instruments: A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first. (required)
        :type instruments: list[str]
        :param groups: When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME
        :type groups: list[str]
        :param mapping_priority: The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
        :type mapping_priority: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GENERICRESPONSE
        """
        kwargs['_return_http_data_only'] = True
        return self.futures_v1_latest_funding_rate_tick_with_http_info(market, instruments, **kwargs)  # noqa: E501

    def futures_v1_latest_funding_rate_tick_with_http_info(self, market, instruments, **kwargs):  # noqa: E501
        """futures_v1_latest_funding_rate_tick  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.futures_v1_latest_funding_rate_tick_with_http_info(market, instruments, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from (required)
        :type market: str
        :param instruments: A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first. (required)
        :type instruments: list[str]
        :param groups: When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME
        :type groups: list[str]
        :param mapping_priority: The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
        :type mapping_priority: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GENERICRESPONSE, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'market',
            'instruments',
            'groups',
            'mapping_priority'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method futures_v1_latest_funding_rate_tick" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'market' is set
        if self.api_client.client_side_validation and local_var_params.get('market') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `market` when calling `futures_v1_latest_funding_rate_tick`")  # noqa: E501
        # verify the required parameter 'instruments' is set
        if self.api_client.client_side_validation and local_var_params.get('instruments') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `instruments` when calling `futures_v1_latest_funding_rate_tick`")  # noqa: E501

        if self.api_client.client_side_validation and ('market' in local_var_params and  # noqa: E501
                                                        len(local_var_params['market']) > 30):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `market` when calling `futures_v1_latest_funding_rate_tick`, length must be less than or equal to `30`")  # noqa: E501
        if self.api_client.client_side_validation and ('market' in local_var_params and  # noqa: E501
                                                        len(local_var_params['market']) < 2):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `market` when calling `futures_v1_latest_funding_rate_tick`, length must be greater than or equal to `2`")  # noqa: E501
        if self.api_client.client_side_validation and ('instruments' in local_var_params and  # noqa: E501
                                                        len(local_var_params['instruments']) > 25):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `instruments` when calling `futures_v1_latest_funding_rate_tick`, number of items must be less than or equal to `25`")  # noqa: E501
        if self.api_client.client_side_validation and ('instruments' in local_var_params and  # noqa: E501
                                                        len(local_var_params['instruments']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `instruments` when calling `futures_v1_latest_funding_rate_tick`, number of items must be greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if local_var_params.get('market') is not None:  # noqa: E501
            query_params.append(('market', local_var_params['market']))  # noqa: E501
        if local_var_params.get('instruments') is not None:  # noqa: E501
            query_params.append(('instruments', local_var_params['instruments']))  # noqa: E501
            collection_formats['instruments'] = 'csv'  # noqa: E501
        if local_var_params.get('groups') is not None:  # noqa: E501
            query_params.append(('groups', local_var_params['groups']))  # noqa: E501
            collection_formats['groups'] = 'csv'  # noqa: E501
        if local_var_params.get('mapping_priority') is not None:  # noqa: E501
            query_params.append(('mapping_priority', local_var_params['mapping_priority']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "GENERICRESPONSE",
            400: "Error",
            401: "Error",
            403: "Error",
            404: "Error",
            405: "Error",
            429: "Error",
            500: "Error",
            502: "Error",
            503: "Error",
        }

        return self.api_client.call_api(
            '/futures/v1/latest/funding-rate/tick', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def futures_v1_latest_instrument_metadata(self, market, instruments, **kwargs):  # noqa: E501
        """futures_v1_latest_instrument_metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.futures_v1_latest_instrument_metadata(market, instruments, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from (required)
        :type market: str
        :param instruments: A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first. (required)
        :type instruments: list[str]
        :param groups: When requesting metadata entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: STATUS,INTERNAL,GENERAL,MIGRATION,SOURCE
        :type groups: list[str]
        :param mapping_priority: The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
        :type mapping_priority: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GENERICRESPONSE
        """
        kwargs['_return_http_data_only'] = True
        return self.futures_v1_latest_instrument_metadata_with_http_info(market, instruments, **kwargs)  # noqa: E501

    def futures_v1_latest_instrument_metadata_with_http_info(self, market, instruments, **kwargs):  # noqa: E501
        """futures_v1_latest_instrument_metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.futures_v1_latest_instrument_metadata_with_http_info(market, instruments, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from (required)
        :type market: str
        :param instruments: A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first. (required)
        :type instruments: list[str]
        :param groups: When requesting metadata entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: STATUS,INTERNAL,GENERAL,MIGRATION,SOURCE
        :type groups: list[str]
        :param mapping_priority: The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
        :type mapping_priority: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GENERICRESPONSE, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'market',
            'instruments',
            'groups',
            'mapping_priority'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method futures_v1_latest_instrument_metadata" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'market' is set
        if self.api_client.client_side_validation and local_var_params.get('market') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `market` when calling `futures_v1_latest_instrument_metadata`")  # noqa: E501
        # verify the required parameter 'instruments' is set
        if self.api_client.client_side_validation and local_var_params.get('instruments') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `instruments` when calling `futures_v1_latest_instrument_metadata`")  # noqa: E501

        if self.api_client.client_side_validation and ('market' in local_var_params and  # noqa: E501
                                                        len(local_var_params['market']) > 30):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `market` when calling `futures_v1_latest_instrument_metadata`, length must be less than or equal to `30`")  # noqa: E501
        if self.api_client.client_side_validation and ('market' in local_var_params and  # noqa: E501
                                                        len(local_var_params['market']) < 2):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `market` when calling `futures_v1_latest_instrument_metadata`, length must be greater than or equal to `2`")  # noqa: E501
        if self.api_client.client_side_validation and ('instruments' in local_var_params and  # noqa: E501
                                                        len(local_var_params['instruments']) > 25):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `instruments` when calling `futures_v1_latest_instrument_metadata`, number of items must be less than or equal to `25`")  # noqa: E501
        if self.api_client.client_side_validation and ('instruments' in local_var_params and  # noqa: E501
                                                        len(local_var_params['instruments']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `instruments` when calling `futures_v1_latest_instrument_metadata`, number of items must be greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if local_var_params.get('market') is not None:  # noqa: E501
            query_params.append(('market', local_var_params['market']))  # noqa: E501
        if local_var_params.get('instruments') is not None:  # noqa: E501
            query_params.append(('instruments', local_var_params['instruments']))  # noqa: E501
            collection_formats['instruments'] = 'csv'  # noqa: E501
        if local_var_params.get('groups') is not None:  # noqa: E501
            query_params.append(('groups', local_var_params['groups']))  # noqa: E501
            collection_formats['groups'] = 'csv'  # noqa: E501
        if local_var_params.get('mapping_priority') is not None:  # noqa: E501
            query_params.append(('mapping_priority', local_var_params['mapping_priority']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "GENERICRESPONSE",
            400: "Error",
            401: "Error",
            403: "Error",
            404: "Error",
            405: "Error",
            429: "Error",
            500: "Error",
            502: "Error",
            503: "Error",
        }

        return self.api_client.call_api(
            '/futures/v1/latest/instrument/metadata', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def futures_v1_latest_open_interest_tick(self, market, instruments, **kwargs):  # noqa: E501
        """futures_v1_latest_open_interest_tick  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.futures_v1_latest_open_interest_tick(market, instruments, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from (required)
        :type market: str
        :param instruments: A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first. (required)
        :type instruments: list[str]
        :param groups: When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME
        :type groups: list[str]
        :param mapping_priority: The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
        :type mapping_priority: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GENERICRESPONSE
        """
        kwargs['_return_http_data_only'] = True
        return self.futures_v1_latest_open_interest_tick_with_http_info(market, instruments, **kwargs)  # noqa: E501

    def futures_v1_latest_open_interest_tick_with_http_info(self, market, instruments, **kwargs):  # noqa: E501
        """futures_v1_latest_open_interest_tick  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.futures_v1_latest_open_interest_tick_with_http_info(market, instruments, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from (required)
        :type market: str
        :param instruments: A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first. (required)
        :type instruments: list[str]
        :param groups: When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME
        :type groups: list[str]
        :param mapping_priority: The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
        :type mapping_priority: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GENERICRESPONSE, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'market',
            'instruments',
            'groups',
            'mapping_priority'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method futures_v1_latest_open_interest_tick" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'market' is set
        if self.api_client.client_side_validation and local_var_params.get('market') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `market` when calling `futures_v1_latest_open_interest_tick`")  # noqa: E501
        # verify the required parameter 'instruments' is set
        if self.api_client.client_side_validation and local_var_params.get('instruments') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `instruments` when calling `futures_v1_latest_open_interest_tick`")  # noqa: E501

        if self.api_client.client_side_validation and ('market' in local_var_params and  # noqa: E501
                                                        len(local_var_params['market']) > 30):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `market` when calling `futures_v1_latest_open_interest_tick`, length must be less than or equal to `30`")  # noqa: E501
        if self.api_client.client_side_validation and ('market' in local_var_params and  # noqa: E501
                                                        len(local_var_params['market']) < 2):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `market` when calling `futures_v1_latest_open_interest_tick`, length must be greater than or equal to `2`")  # noqa: E501
        if self.api_client.client_side_validation and ('instruments' in local_var_params and  # noqa: E501
                                                        len(local_var_params['instruments']) > 25):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `instruments` when calling `futures_v1_latest_open_interest_tick`, number of items must be less than or equal to `25`")  # noqa: E501
        if self.api_client.client_side_validation and ('instruments' in local_var_params and  # noqa: E501
                                                        len(local_var_params['instruments']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `instruments` when calling `futures_v1_latest_open_interest_tick`, number of items must be greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if local_var_params.get('market') is not None:  # noqa: E501
            query_params.append(('market', local_var_params['market']))  # noqa: E501
        if local_var_params.get('instruments') is not None:  # noqa: E501
            query_params.append(('instruments', local_var_params['instruments']))  # noqa: E501
            collection_formats['instruments'] = 'csv'  # noqa: E501
        if local_var_params.get('groups') is not None:  # noqa: E501
            query_params.append(('groups', local_var_params['groups']))  # noqa: E501
            collection_formats['groups'] = 'csv'  # noqa: E501
        if local_var_params.get('mapping_priority') is not None:  # noqa: E501
            query_params.append(('mapping_priority', local_var_params['mapping_priority']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "GENERICRESPONSE",
            400: "Error",
            401: "Error",
            403: "Error",
            404: "Error",
            405: "Error",
            429: "Error",
            500: "Error",
            502: "Error",
            503: "Error",
        }

        return self.api_client.call_api(
            '/futures/v1/latest/open-interest/tick', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def futures_v1_latest_tick(self, market, instruments, **kwargs):  # noqa: E501
        """futures_v1_latest_tick  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.futures_v1_latest_tick(market, instruments, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from (required)
        :type market: str
        :param instruments: A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first. (required)
        :type instruments: list[str]
        :param groups: When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,LAST_UPDATE,TOP_OF_BOOK,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME
        :type groups: list[str]
        :param mapping_priority: The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
        :type mapping_priority: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GENERICRESPONSE
        """
        kwargs['_return_http_data_only'] = True
        return self.futures_v1_latest_tick_with_http_info(market, instruments, **kwargs)  # noqa: E501

    def futures_v1_latest_tick_with_http_info(self, market, instruments, **kwargs):  # noqa: E501
        """futures_v1_latest_tick  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.futures_v1_latest_tick_with_http_info(market, instruments, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from (required)
        :type market: str
        :param instruments: A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first. (required)
        :type instruments: list[str]
        :param groups: When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,LAST_UPDATE,TOP_OF_BOOK,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME
        :type groups: list[str]
        :param mapping_priority: The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
        :type mapping_priority: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GENERICRESPONSE, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'market',
            'instruments',
            'groups',
            'mapping_priority'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method futures_v1_latest_tick" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'market' is set
        if self.api_client.client_side_validation and local_var_params.get('market') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `market` when calling `futures_v1_latest_tick`")  # noqa: E501
        # verify the required parameter 'instruments' is set
        if self.api_client.client_side_validation and local_var_params.get('instruments') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `instruments` when calling `futures_v1_latest_tick`")  # noqa: E501

        if self.api_client.client_side_validation and ('market' in local_var_params and  # noqa: E501
                                                        len(local_var_params['market']) > 30):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `market` when calling `futures_v1_latest_tick`, length must be less than or equal to `30`")  # noqa: E501
        if self.api_client.client_side_validation and ('market' in local_var_params and  # noqa: E501
                                                        len(local_var_params['market']) < 2):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `market` when calling `futures_v1_latest_tick`, length must be greater than or equal to `2`")  # noqa: E501
        if self.api_client.client_side_validation and ('instruments' in local_var_params and  # noqa: E501
                                                        len(local_var_params['instruments']) > 25):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `instruments` when calling `futures_v1_latest_tick`, number of items must be less than or equal to `25`")  # noqa: E501
        if self.api_client.client_side_validation and ('instruments' in local_var_params and  # noqa: E501
                                                        len(local_var_params['instruments']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `instruments` when calling `futures_v1_latest_tick`, number of items must be greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if local_var_params.get('market') is not None:  # noqa: E501
            query_params.append(('market', local_var_params['market']))  # noqa: E501
        if local_var_params.get('instruments') is not None:  # noqa: E501
            query_params.append(('instruments', local_var_params['instruments']))  # noqa: E501
            collection_formats['instruments'] = 'csv'  # noqa: E501
        if local_var_params.get('groups') is not None:  # noqa: E501
            query_params.append(('groups', local_var_params['groups']))  # noqa: E501
            collection_formats['groups'] = 'csv'  # noqa: E501
        if local_var_params.get('mapping_priority') is not None:  # noqa: E501
            query_params.append(('mapping_priority', local_var_params['mapping_priority']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "GENERICRESPONSE",
            400: "Error",
            401: "Error",
            403: "Error",
            404: "Error",
            405: "Error",
            429: "Error",
            500: "Error",
            502: "Error",
            503: "Error",
        }

        return self.api_client.call_api(
            '/futures/v1/latest/tick', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def futures_v1_markets(self, **kwargs):  # noqa: E501
        """futures_v1_markets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.futures_v1_markets(async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from
        :type market: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GENERICRESPONSE
        """
        kwargs['_return_http_data_only'] = True
        return self.futures_v1_markets_with_http_info(**kwargs)  # noqa: E501

    def futures_v1_markets_with_http_info(self, **kwargs):  # noqa: E501
        """futures_v1_markets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.futures_v1_markets_with_http_info(async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from
        :type market: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GENERICRESPONSE, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'market'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method futures_v1_markets" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        if self.api_client.client_side_validation and ('market' in local_var_params and  # noqa: E501
                                                        len(local_var_params['market']) > 30):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `market` when calling `futures_v1_markets`, length must be less than or equal to `30`")  # noqa: E501
        if self.api_client.client_side_validation and ('market' in local_var_params and  # noqa: E501
                                                        len(local_var_params['market']) < 0):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `market` when calling `futures_v1_markets`, length must be greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if local_var_params.get('market') is not None:  # noqa: E501
            query_params.append(('market', local_var_params['market']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "GENERICRESPONSE",
            400: "Error",
            401: "Error",
            403: "Error",
            404: "Error",
            405: "Error",
            429: "Error",
            500: "Error",
            502: "Error",
            503: "Error",
        }

        return self.api_client.call_api(
            '/futures/v1/markets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def futures_v1_markets_instruments(self, **kwargs):  # noqa: E501
        """futures_v1_markets_instruments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.futures_v1_markets_instruments(async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from
        :type market: str
        :param instrument: The mapped instrument to retrieve on a specific market.
        :type instrument: str
        :param instrument_status: The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED
        :type instrument_status: list[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GENERICRESPONSE
        """
        kwargs['_return_http_data_only'] = True
        return self.futures_v1_markets_instruments_with_http_info(**kwargs)  # noqa: E501

    def futures_v1_markets_instruments_with_http_info(self, **kwargs):  # noqa: E501
        """futures_v1_markets_instruments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.futures_v1_markets_instruments_with_http_info(async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from
        :type market: str
        :param instrument: The mapped instrument to retrieve on a specific market.
        :type instrument: str
        :param instrument_status: The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED
        :type instrument_status: list[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GENERICRESPONSE, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'market',
            'instrument',
            'instrument_status'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method futures_v1_markets_instruments" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        if self.api_client.client_side_validation and ('market' in local_var_params and  # noqa: E501
                                                        len(local_var_params['market']) > 30):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `market` when calling `futures_v1_markets_instruments`, length must be less than or equal to `30`")  # noqa: E501
        if self.api_client.client_side_validation and ('market' in local_var_params and  # noqa: E501
                                                        len(local_var_params['market']) < 0):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `market` when calling `futures_v1_markets_instruments`, length must be greater than or equal to `0`")  # noqa: E501
        if self.api_client.client_side_validation and ('instrument' in local_var_params and  # noqa: E501
                                                        len(local_var_params['instrument']) > 30):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `instrument` when calling `futures_v1_markets_instruments`, length must be less than or equal to `30`")  # noqa: E501
        if self.api_client.client_side_validation and ('instrument' in local_var_params and  # noqa: E501
                                                        len(local_var_params['instrument']) < 0):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `instrument` when calling `futures_v1_markets_instruments`, length must be greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if local_var_params.get('market') is not None:  # noqa: E501
            query_params.append(('market', local_var_params['market']))  # noqa: E501
        if local_var_params.get('instrument') is not None:  # noqa: E501
            query_params.append(('instrument', local_var_params['instrument']))  # noqa: E501
        if local_var_params.get('instrument_status') is not None:  # noqa: E501
            query_params.append(('instrument_status', local_var_params['instrument_status']))  # noqa: E501
            collection_formats['instrument_status'] = 'csv'  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "GENERICRESPONSE",
            400: "Error",
            401: "Error",
            403: "Error",
            404: "Error",
            405: "Error",
            429: "Error",
            500: "Error",
            502: "Error",
            503: "Error",
        }

        return self.api_client.call_api(
            '/futures/v1/markets/instruments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def futures_v1_markets_instruments_unmapped(self, **kwargs):  # noqa: E501
        """futures_v1_markets_instruments_unmapped  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.futures_v1_markets_instruments_unmapped(async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from
        :type market: str
        :param instrument: The unmapped instrument to retrieve on a specific market.
        :type instrument: str
        :param instrument_status: The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED
        :type instrument_status: list[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GENERICRESPONSE
        """
        kwargs['_return_http_data_only'] = True
        return self.futures_v1_markets_instruments_unmapped_with_http_info(**kwargs)  # noqa: E501

    def futures_v1_markets_instruments_unmapped_with_http_info(self, **kwargs):  # noqa: E501
        """futures_v1_markets_instruments_unmapped  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.futures_v1_markets_instruments_unmapped_with_http_info(async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from
        :type market: str
        :param instrument: The unmapped instrument to retrieve on a specific market.
        :type instrument: str
        :param instrument_status: The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED
        :type instrument_status: list[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GENERICRESPONSE, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'market',
            'instrument',
            'instrument_status'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method futures_v1_markets_instruments_unmapped" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        if self.api_client.client_side_validation and ('market' in local_var_params and  # noqa: E501
                                                        len(local_var_params['market']) > 30):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `market` when calling `futures_v1_markets_instruments_unmapped`, length must be less than or equal to `30`")  # noqa: E501
        if self.api_client.client_side_validation and ('market' in local_var_params and  # noqa: E501
                                                        len(local_var_params['market']) < 0):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `market` when calling `futures_v1_markets_instruments_unmapped`, length must be greater than or equal to `0`")  # noqa: E501
        if self.api_client.client_side_validation and ('instrument' in local_var_params and  # noqa: E501
                                                        len(local_var_params['instrument']) > 30):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `instrument` when calling `futures_v1_markets_instruments_unmapped`, length must be less than or equal to `30`")  # noqa: E501
        if self.api_client.client_side_validation and ('instrument' in local_var_params and  # noqa: E501
                                                        len(local_var_params['instrument']) < 0):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `instrument` when calling `futures_v1_markets_instruments_unmapped`, length must be greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if local_var_params.get('market') is not None:  # noqa: E501
            query_params.append(('market', local_var_params['market']))  # noqa: E501
        if local_var_params.get('instrument') is not None:  # noqa: E501
            query_params.append(('instrument', local_var_params['instrument']))  # noqa: E501
        if local_var_params.get('instrument_status') is not None:  # noqa: E501
            query_params.append(('instrument_status', local_var_params['instrument_status']))  # noqa: E501
            collection_formats['instrument_status'] = 'csv'  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "GENERICRESPONSE",
            400: "Error",
            401: "Error",
            403: "Error",
            404: "Error",
            405: "Error",
            429: "Error",
            500: "Error",
            502: "Error",
            503: "Error",
        }

        return self.api_client.call_api(
            '/futures/v1/markets/instruments/unmapped', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def index_v1_historical_days(self, market, instrument, **kwargs):  # noqa: E501
        """index_v1_historical_days  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.index_v1_historical_days(market, instrument, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from (required)
        :type market: str
        :param instrument: The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
        :type instrument: str
        :param groups: When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME
        :type groups: list[str]
        :param limit: The number of data points to return
        :type limit: int
        :param to_ts: Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}
        :type to_ts: int
        :param aggregate: The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
        :type aggregate: int
        :param fill: Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
        :type fill: bool
        :param mapping_priority: The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
        :type mapping_priority: str
        :param response_format: The format of the data response in uppercase. It can be one of the following: JSON,CSV
        :type response_format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GENERICRESPONSE
        """
        kwargs['_return_http_data_only'] = True
        return self.index_v1_historical_days_with_http_info(market, instrument, **kwargs)  # noqa: E501

    def index_v1_historical_days_with_http_info(self, market, instrument, **kwargs):  # noqa: E501
        """index_v1_historical_days  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.index_v1_historical_days_with_http_info(market, instrument, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from (required)
        :type market: str
        :param instrument: The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
        :type instrument: str
        :param groups: When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME
        :type groups: list[str]
        :param limit: The number of data points to return
        :type limit: int
        :param to_ts: Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}
        :type to_ts: int
        :param aggregate: The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
        :type aggregate: int
        :param fill: Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
        :type fill: bool
        :param mapping_priority: The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
        :type mapping_priority: str
        :param response_format: The format of the data response in uppercase. It can be one of the following: JSON,CSV
        :type response_format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GENERICRESPONSE, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'market',
            'instrument',
            'groups',
            'limit',
            'to_ts',
            'aggregate',
            'fill',
            'mapping_priority',
            'response_format'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method index_v1_historical_days" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'market' is set
        if self.api_client.client_side_validation and local_var_params.get('market') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `market` when calling `index_v1_historical_days`")  # noqa: E501
        # verify the required parameter 'instrument' is set
        if self.api_client.client_side_validation and local_var_params.get('instrument') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `instrument` when calling `index_v1_historical_days`")  # noqa: E501

        if self.api_client.client_side_validation and ('market' in local_var_params and  # noqa: E501
                                                        len(local_var_params['market']) > 30):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `market` when calling `index_v1_historical_days`, length must be less than or equal to `30`")  # noqa: E501
        if self.api_client.client_side_validation and ('market' in local_var_params and  # noqa: E501
                                                        len(local_var_params['market']) < 2):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `market` when calling `index_v1_historical_days`, length must be greater than or equal to `2`")  # noqa: E501
        if self.api_client.client_side_validation and ('instrument' in local_var_params and  # noqa: E501
                                                        len(local_var_params['instrument']) > 500):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `instrument` when calling `index_v1_historical_days`, length must be less than or equal to `500`")  # noqa: E501
        if self.api_client.client_side_validation and ('instrument' in local_var_params and  # noqa: E501
                                                        len(local_var_params['instrument']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `instrument` when calling `index_v1_historical_days`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'limit' in local_var_params and local_var_params['limit'] > 5000:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `index_v1_historical_days`, must be a value less than or equal to `5000`")  # noqa: E501
        if self.api_client.client_side_validation and 'limit' in local_var_params and local_var_params['limit'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `index_v1_historical_days`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'aggregate' in local_var_params and local_var_params['aggregate'] > 30:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `aggregate` when calling `index_v1_historical_days`, must be a value less than or equal to `30`")  # noqa: E501
        if self.api_client.client_side_validation and 'aggregate' in local_var_params and local_var_params['aggregate'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `aggregate` when calling `index_v1_historical_days`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if local_var_params.get('market') is not None:  # noqa: E501
            query_params.append(('market', local_var_params['market']))  # noqa: E501
        if local_var_params.get('instrument') is not None:  # noqa: E501
            query_params.append(('instrument', local_var_params['instrument']))  # noqa: E501
        if local_var_params.get('groups') is not None:  # noqa: E501
            query_params.append(('groups', local_var_params['groups']))  # noqa: E501
            collection_formats['groups'] = 'csv'  # noqa: E501
        if local_var_params.get('limit') is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if local_var_params.get('to_ts') is not None:  # noqa: E501
            query_params.append(('to_ts', local_var_params['to_ts']))  # noqa: E501
        if local_var_params.get('aggregate') is not None:  # noqa: E501
            query_params.append(('aggregate', local_var_params['aggregate']))  # noqa: E501
        if local_var_params.get('fill') is not None:  # noqa: E501
            query_params.append(('fill', local_var_params['fill']))  # noqa: E501
        if local_var_params.get('mapping_priority') is not None:  # noqa: E501
            query_params.append(('mapping_priority', local_var_params['mapping_priority']))  # noqa: E501
        if local_var_params.get('response_format') is not None:  # noqa: E501
            query_params.append(('response_format', local_var_params['response_format']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "GENERICRESPONSE",
            400: "Error",
            401: "Error",
            403: "Error",
            404: "Error",
            405: "Error",
            429: "Error",
            500: "Error",
            502: "Error",
            503: "Error",
        }

        return self.api_client.call_api(
            '/index/v1/historical/days', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def index_v1_historical_hours(self, market, instrument, **kwargs):  # noqa: E501
        """index_v1_historical_hours  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.index_v1_historical_hours(market, instrument, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from (required)
        :type market: str
        :param instrument: The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
        :type instrument: str
        :param groups: When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME
        :type groups: list[str]
        :param limit: The number of data points to return
        :type limit: int
        :param to_ts: Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}
        :type to_ts: int
        :param aggregate: The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
        :type aggregate: int
        :param fill: Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
        :type fill: bool
        :param mapping_priority: The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
        :type mapping_priority: str
        :param response_format: The format of the data response in uppercase. It can be one of the following: JSON,CSV
        :type response_format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GENERICRESPONSE
        """
        kwargs['_return_http_data_only'] = True
        return self.index_v1_historical_hours_with_http_info(market, instrument, **kwargs)  # noqa: E501

    def index_v1_historical_hours_with_http_info(self, market, instrument, **kwargs):  # noqa: E501
        """index_v1_historical_hours  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.index_v1_historical_hours_with_http_info(market, instrument, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from (required)
        :type market: str
        :param instrument: The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
        :type instrument: str
        :param groups: When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME
        :type groups: list[str]
        :param limit: The number of data points to return
        :type limit: int
        :param to_ts: Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}
        :type to_ts: int
        :param aggregate: The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
        :type aggregate: int
        :param fill: Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
        :type fill: bool
        :param mapping_priority: The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
        :type mapping_priority: str
        :param response_format: The format of the data response in uppercase. It can be one of the following: JSON,CSV
        :type response_format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GENERICRESPONSE, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'market',
            'instrument',
            'groups',
            'limit',
            'to_ts',
            'aggregate',
            'fill',
            'mapping_priority',
            'response_format'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method index_v1_historical_hours" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'market' is set
        if self.api_client.client_side_validation and local_var_params.get('market') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `market` when calling `index_v1_historical_hours`")  # noqa: E501
        # verify the required parameter 'instrument' is set
        if self.api_client.client_side_validation and local_var_params.get('instrument') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `instrument` when calling `index_v1_historical_hours`")  # noqa: E501

        if self.api_client.client_side_validation and ('market' in local_var_params and  # noqa: E501
                                                        len(local_var_params['market']) > 30):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `market` when calling `index_v1_historical_hours`, length must be less than or equal to `30`")  # noqa: E501
        if self.api_client.client_side_validation and ('market' in local_var_params and  # noqa: E501
                                                        len(local_var_params['market']) < 2):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `market` when calling `index_v1_historical_hours`, length must be greater than or equal to `2`")  # noqa: E501
        if self.api_client.client_side_validation and ('instrument' in local_var_params and  # noqa: E501
                                                        len(local_var_params['instrument']) > 500):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `instrument` when calling `index_v1_historical_hours`, length must be less than or equal to `500`")  # noqa: E501
        if self.api_client.client_side_validation and ('instrument' in local_var_params and  # noqa: E501
                                                        len(local_var_params['instrument']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `instrument` when calling `index_v1_historical_hours`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'limit' in local_var_params and local_var_params['limit'] > 2000:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `index_v1_historical_hours`, must be a value less than or equal to `2000`")  # noqa: E501
        if self.api_client.client_side_validation and 'limit' in local_var_params and local_var_params['limit'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `index_v1_historical_hours`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'aggregate' in local_var_params and local_var_params['aggregate'] > 30:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `aggregate` when calling `index_v1_historical_hours`, must be a value less than or equal to `30`")  # noqa: E501
        if self.api_client.client_side_validation and 'aggregate' in local_var_params and local_var_params['aggregate'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `aggregate` when calling `index_v1_historical_hours`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if local_var_params.get('market') is not None:  # noqa: E501
            query_params.append(('market', local_var_params['market']))  # noqa: E501
        if local_var_params.get('instrument') is not None:  # noqa: E501
            query_params.append(('instrument', local_var_params['instrument']))  # noqa: E501
        if local_var_params.get('groups') is not None:  # noqa: E501
            query_params.append(('groups', local_var_params['groups']))  # noqa: E501
            collection_formats['groups'] = 'csv'  # noqa: E501
        if local_var_params.get('limit') is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if local_var_params.get('to_ts') is not None:  # noqa: E501
            query_params.append(('to_ts', local_var_params['to_ts']))  # noqa: E501
        if local_var_params.get('aggregate') is not None:  # noqa: E501
            query_params.append(('aggregate', local_var_params['aggregate']))  # noqa: E501
        if local_var_params.get('fill') is not None:  # noqa: E501
            query_params.append(('fill', local_var_params['fill']))  # noqa: E501
        if local_var_params.get('mapping_priority') is not None:  # noqa: E501
            query_params.append(('mapping_priority', local_var_params['mapping_priority']))  # noqa: E501
        if local_var_params.get('response_format') is not None:  # noqa: E501
            query_params.append(('response_format', local_var_params['response_format']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "GENERICRESPONSE",
            400: "Error",
            401: "Error",
            403: "Error",
            404: "Error",
            405: "Error",
            429: "Error",
            500: "Error",
            502: "Error",
            503: "Error",
        }

        return self.api_client.call_api(
            '/index/v1/historical/hours', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def index_v1_historical_messages(self, market, instrument, **kwargs):  # noqa: E501
        """index_v1_historical_messages  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.index_v1_historical_messages(market, instrument, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from (required)
        :type market: str
        :param instrument: The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
        :type instrument: str
        :param after_ts: Unix timestamp in seconds of the earliest index message in the response
        :type after_ts: int
        :param last_ccseq: The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request.
        :type last_ccseq: int
        :param limit: The maximum number of index messages to return
        :type limit: int
        :param mapping_priority: The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
        :type mapping_priority: str
        :param response_format: The format of the data response in uppercase. It can be one of the following: JSON,CSV
        :type response_format: str
        :param return_404_on_empty_response: If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.
        :type return_404_on_empty_response: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GENERICRESPONSE
        """
        kwargs['_return_http_data_only'] = True
        return self.index_v1_historical_messages_with_http_info(market, instrument, **kwargs)  # noqa: E501

    def index_v1_historical_messages_with_http_info(self, market, instrument, **kwargs):  # noqa: E501
        """index_v1_historical_messages  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.index_v1_historical_messages_with_http_info(market, instrument, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from (required)
        :type market: str
        :param instrument: The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
        :type instrument: str
        :param after_ts: Unix timestamp in seconds of the earliest index message in the response
        :type after_ts: int
        :param last_ccseq: The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request.
        :type last_ccseq: int
        :param limit: The maximum number of index messages to return
        :type limit: int
        :param mapping_priority: The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
        :type mapping_priority: str
        :param response_format: The format of the data response in uppercase. It can be one of the following: JSON,CSV
        :type response_format: str
        :param return_404_on_empty_response: If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.
        :type return_404_on_empty_response: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GENERICRESPONSE, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'market',
            'instrument',
            'after_ts',
            'last_ccseq',
            'limit',
            'mapping_priority',
            'response_format',
            'return_404_on_empty_response'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method index_v1_historical_messages" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'market' is set
        if self.api_client.client_side_validation and local_var_params.get('market') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `market` when calling `index_v1_historical_messages`")  # noqa: E501
        # verify the required parameter 'instrument' is set
        if self.api_client.client_side_validation and local_var_params.get('instrument') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `instrument` when calling `index_v1_historical_messages`")  # noqa: E501

        if self.api_client.client_side_validation and ('market' in local_var_params and  # noqa: E501
                                                        len(local_var_params['market']) > 30):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `market` when calling `index_v1_historical_messages`, length must be less than or equal to `30`")  # noqa: E501
        if self.api_client.client_side_validation and ('market' in local_var_params and  # noqa: E501
                                                        len(local_var_params['market']) < 2):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `market` when calling `index_v1_historical_messages`, length must be greater than or equal to `2`")  # noqa: E501
        if self.api_client.client_side_validation and ('instrument' in local_var_params and  # noqa: E501
                                                        len(local_var_params['instrument']) > 500):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `instrument` when calling `index_v1_historical_messages`, length must be less than or equal to `500`")  # noqa: E501
        if self.api_client.client_side_validation and ('instrument' in local_var_params and  # noqa: E501
                                                        len(local_var_params['instrument']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `instrument` when calling `index_v1_historical_messages`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'after_ts' in local_var_params and local_var_params['after_ts'] < 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `after_ts` when calling `index_v1_historical_messages`, must be a value greater than or equal to `0`")  # noqa: E501
        if self.api_client.client_side_validation and 'last_ccseq' in local_var_params and local_var_params['last_ccseq'] < 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `last_ccseq` when calling `index_v1_historical_messages`, must be a value greater than or equal to `0`")  # noqa: E501
        if self.api_client.client_side_validation and 'limit' in local_var_params and local_var_params['limit'] > 5000:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `index_v1_historical_messages`, must be a value less than or equal to `5000`")  # noqa: E501
        if self.api_client.client_side_validation and 'limit' in local_var_params and local_var_params['limit'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `index_v1_historical_messages`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if local_var_params.get('market') is not None:  # noqa: E501
            query_params.append(('market', local_var_params['market']))  # noqa: E501
        if local_var_params.get('instrument') is not None:  # noqa: E501
            query_params.append(('instrument', local_var_params['instrument']))  # noqa: E501
        if local_var_params.get('after_ts') is not None:  # noqa: E501
            query_params.append(('after_ts', local_var_params['after_ts']))  # noqa: E501
        if local_var_params.get('last_ccseq') is not None:  # noqa: E501
            query_params.append(('last_ccseq', local_var_params['last_ccseq']))  # noqa: E501
        if local_var_params.get('limit') is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if local_var_params.get('mapping_priority') is not None:  # noqa: E501
            query_params.append(('mapping_priority', local_var_params['mapping_priority']))  # noqa: E501
        if local_var_params.get('response_format') is not None:  # noqa: E501
            query_params.append(('response_format', local_var_params['response_format']))  # noqa: E501
        if local_var_params.get('return_404_on_empty_response') is not None:  # noqa: E501
            query_params.append(('return_404_on_empty_response', local_var_params['return_404_on_empty_response']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key_header', 'api_key_query']  # noqa: E501

        response_types_map = {
            200: "GENERICRESPONSE",
            400: "Error",
            401: "Error",
            403: "Error",
            404: "Error",
            405: "Error",
            429: "Error",
            500: "Error",
            502: "Error",
            503: "Error",
        }

        return self.api_client.call_api(
            '/index/v1/historical/messages', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def index_v1_historical_messages_hour(self, market, instrument, **kwargs):  # noqa: E501
        """index_v1_historical_messages_hour  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.index_v1_historical_messages_hour(market, instrument, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from (required)
        :type market: str
        :param instrument: The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
        :type instrument: str
        :param hour_ts: Unix timestamp in seconds for the hour containing the index updates you are interested in. You can pass any timestamp in the hour but we will round it down the the full hour timestmap and return all index updates in that hour.
        :type hour_ts: int
        :param mapping_priority: The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
        :type mapping_priority: str
        :param response_format: The format of the data response in uppercase. It can be one of the following: JSON,CSV
        :type response_format: str
        :param return_404_on_empty_response: If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.
        :type return_404_on_empty_response: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GENERICRESPONSE
        """
        kwargs['_return_http_data_only'] = True
        return self.index_v1_historical_messages_hour_with_http_info(market, instrument, **kwargs)  # noqa: E501

    def index_v1_historical_messages_hour_with_http_info(self, market, instrument, **kwargs):  # noqa: E501
        """index_v1_historical_messages_hour  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.index_v1_historical_messages_hour_with_http_info(market, instrument, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from (required)
        :type market: str
        :param instrument: The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
        :type instrument: str
        :param hour_ts: Unix timestamp in seconds for the hour containing the index updates you are interested in. You can pass any timestamp in the hour but we will round it down the the full hour timestmap and return all index updates in that hour.
        :type hour_ts: int
        :param mapping_priority: The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
        :type mapping_priority: str
        :param response_format: The format of the data response in uppercase. It can be one of the following: JSON,CSV
        :type response_format: str
        :param return_404_on_empty_response: If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.
        :type return_404_on_empty_response: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GENERICRESPONSE, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'market',
            'instrument',
            'hour_ts',
            'mapping_priority',
            'response_format',
            'return_404_on_empty_response'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method index_v1_historical_messages_hour" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'market' is set
        if self.api_client.client_side_validation and local_var_params.get('market') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `market` when calling `index_v1_historical_messages_hour`")  # noqa: E501
        # verify the required parameter 'instrument' is set
        if self.api_client.client_side_validation and local_var_params.get('instrument') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `instrument` when calling `index_v1_historical_messages_hour`")  # noqa: E501

        if self.api_client.client_side_validation and ('market' in local_var_params and  # noqa: E501
                                                        len(local_var_params['market']) > 30):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `market` when calling `index_v1_historical_messages_hour`, length must be less than or equal to `30`")  # noqa: E501
        if self.api_client.client_side_validation and ('market' in local_var_params and  # noqa: E501
                                                        len(local_var_params['market']) < 2):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `market` when calling `index_v1_historical_messages_hour`, length must be greater than or equal to `2`")  # noqa: E501
        if self.api_client.client_side_validation and ('instrument' in local_var_params and  # noqa: E501
                                                        len(local_var_params['instrument']) > 500):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `instrument` when calling `index_v1_historical_messages_hour`, length must be less than or equal to `500`")  # noqa: E501
        if self.api_client.client_side_validation and ('instrument' in local_var_params and  # noqa: E501
                                                        len(local_var_params['instrument']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `instrument` when calling `index_v1_historical_messages_hour`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'hour_ts' in local_var_params and local_var_params['hour_ts'] < 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `hour_ts` when calling `index_v1_historical_messages_hour`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if local_var_params.get('market') is not None:  # noqa: E501
            query_params.append(('market', local_var_params['market']))  # noqa: E501
        if local_var_params.get('instrument') is not None:  # noqa: E501
            query_params.append(('instrument', local_var_params['instrument']))  # noqa: E501
        if local_var_params.get('hour_ts') is not None:  # noqa: E501
            query_params.append(('hour_ts', local_var_params['hour_ts']))  # noqa: E501
        if local_var_params.get('mapping_priority') is not None:  # noqa: E501
            query_params.append(('mapping_priority', local_var_params['mapping_priority']))  # noqa: E501
        if local_var_params.get('response_format') is not None:  # noqa: E501
            query_params.append(('response_format', local_var_params['response_format']))  # noqa: E501
        if local_var_params.get('return_404_on_empty_response') is not None:  # noqa: E501
            query_params.append(('return_404_on_empty_response', local_var_params['return_404_on_empty_response']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key_header', 'api_key_query']  # noqa: E501

        response_types_map = {
            200: "GENERICRESPONSE",
            400: "Error",
            401: "Error",
            403: "Error",
            404: "Error",
            405: "Error",
            429: "Error",
            500: "Error",
            502: "Error",
            503: "Error",
        }

        return self.api_client.call_api(
            '/index/v1/historical/messages/hour', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def index_v1_historical_minutes(self, market, instrument, **kwargs):  # noqa: E501
        """index_v1_historical_minutes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.index_v1_historical_minutes(market, instrument, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from (required)
        :type market: str
        :param instrument: The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
        :type instrument: str
        :param groups: When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME
        :type groups: list[str]
        :param limit: The number of data points to return
        :type limit: int
        :param to_ts: Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}
        :type to_ts: int
        :param aggregate: The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
        :type aggregate: int
        :param fill: Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
        :type fill: bool
        :param mapping_priority: The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
        :type mapping_priority: str
        :param response_format: The format of the data response in uppercase. It can be one of the following: JSON,CSV
        :type response_format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GENERICRESPONSE
        """
        kwargs['_return_http_data_only'] = True
        return self.index_v1_historical_minutes_with_http_info(market, instrument, **kwargs)  # noqa: E501

    def index_v1_historical_minutes_with_http_info(self, market, instrument, **kwargs):  # noqa: E501
        """index_v1_historical_minutes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.index_v1_historical_minutes_with_http_info(market, instrument, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from (required)
        :type market: str
        :param instrument: The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
        :type instrument: str
        :param groups: When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME
        :type groups: list[str]
        :param limit: The number of data points to return
        :type limit: int
        :param to_ts: Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}
        :type to_ts: int
        :param aggregate: The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
        :type aggregate: int
        :param fill: Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
        :type fill: bool
        :param mapping_priority: The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
        :type mapping_priority: str
        :param response_format: The format of the data response in uppercase. It can be one of the following: JSON,CSV
        :type response_format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GENERICRESPONSE, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'market',
            'instrument',
            'groups',
            'limit',
            'to_ts',
            'aggregate',
            'fill',
            'mapping_priority',
            'response_format'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method index_v1_historical_minutes" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'market' is set
        if self.api_client.client_side_validation and local_var_params.get('market') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `market` when calling `index_v1_historical_minutes`")  # noqa: E501
        # verify the required parameter 'instrument' is set
        if self.api_client.client_side_validation and local_var_params.get('instrument') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `instrument` when calling `index_v1_historical_minutes`")  # noqa: E501

        if self.api_client.client_side_validation and ('market' in local_var_params and  # noqa: E501
                                                        len(local_var_params['market']) > 30):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `market` when calling `index_v1_historical_minutes`, length must be less than or equal to `30`")  # noqa: E501
        if self.api_client.client_side_validation and ('market' in local_var_params and  # noqa: E501
                                                        len(local_var_params['market']) < 2):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `market` when calling `index_v1_historical_minutes`, length must be greater than or equal to `2`")  # noqa: E501
        if self.api_client.client_side_validation and ('instrument' in local_var_params and  # noqa: E501
                                                        len(local_var_params['instrument']) > 500):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `instrument` when calling `index_v1_historical_minutes`, length must be less than or equal to `500`")  # noqa: E501
        if self.api_client.client_side_validation and ('instrument' in local_var_params and  # noqa: E501
                                                        len(local_var_params['instrument']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `instrument` when calling `index_v1_historical_minutes`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'limit' in local_var_params and local_var_params['limit'] > 2000:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `index_v1_historical_minutes`, must be a value less than or equal to `2000`")  # noqa: E501
        if self.api_client.client_side_validation and 'limit' in local_var_params and local_var_params['limit'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `index_v1_historical_minutes`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'aggregate' in local_var_params and local_var_params['aggregate'] > 30:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `aggregate` when calling `index_v1_historical_minutes`, must be a value less than or equal to `30`")  # noqa: E501
        if self.api_client.client_side_validation and 'aggregate' in local_var_params and local_var_params['aggregate'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `aggregate` when calling `index_v1_historical_minutes`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if local_var_params.get('market') is not None:  # noqa: E501
            query_params.append(('market', local_var_params['market']))  # noqa: E501
        if local_var_params.get('instrument') is not None:  # noqa: E501
            query_params.append(('instrument', local_var_params['instrument']))  # noqa: E501
        if local_var_params.get('groups') is not None:  # noqa: E501
            query_params.append(('groups', local_var_params['groups']))  # noqa: E501
            collection_formats['groups'] = 'csv'  # noqa: E501
        if local_var_params.get('limit') is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if local_var_params.get('to_ts') is not None:  # noqa: E501
            query_params.append(('to_ts', local_var_params['to_ts']))  # noqa: E501
        if local_var_params.get('aggregate') is not None:  # noqa: E501
            query_params.append(('aggregate', local_var_params['aggregate']))  # noqa: E501
        if local_var_params.get('fill') is not None:  # noqa: E501
            query_params.append(('fill', local_var_params['fill']))  # noqa: E501
        if local_var_params.get('mapping_priority') is not None:  # noqa: E501
            query_params.append(('mapping_priority', local_var_params['mapping_priority']))  # noqa: E501
        if local_var_params.get('response_format') is not None:  # noqa: E501
            query_params.append(('response_format', local_var_params['response_format']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "GENERICRESPONSE",
            400: "Error",
            401: "Error",
            403: "Error",
            404: "Error",
            405: "Error",
            429: "Error",
            500: "Error",
            502: "Error",
            503: "Error",
        }

        return self.api_client.call_api(
            '/index/v1/historical/minutes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def index_v1_latest_instrument_metadata(self, market, instruments, **kwargs):  # noqa: E501
        """index_v1_latest_instrument_metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.index_v1_latest_instrument_metadata(market, instruments, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from (required)
        :type market: str
        :param instruments: A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first. (required)
        :type instruments: list[str]
        :param groups: When requesting metadata entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: STATUS,INTERNAL,GENERAL,MIGRATION,SOURCE
        :type groups: list[str]
        :param mapping_priority: The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
        :type mapping_priority: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GENERICRESPONSE
        """
        kwargs['_return_http_data_only'] = True
        return self.index_v1_latest_instrument_metadata_with_http_info(market, instruments, **kwargs)  # noqa: E501

    def index_v1_latest_instrument_metadata_with_http_info(self, market, instruments, **kwargs):  # noqa: E501
        """index_v1_latest_instrument_metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.index_v1_latest_instrument_metadata_with_http_info(market, instruments, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from (required)
        :type market: str
        :param instruments: A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first. (required)
        :type instruments: list[str]
        :param groups: When requesting metadata entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: STATUS,INTERNAL,GENERAL,MIGRATION,SOURCE
        :type groups: list[str]
        :param mapping_priority: The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
        :type mapping_priority: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GENERICRESPONSE, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'market',
            'instruments',
            'groups',
            'mapping_priority'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method index_v1_latest_instrument_metadata" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'market' is set
        if self.api_client.client_side_validation and local_var_params.get('market') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `market` when calling `index_v1_latest_instrument_metadata`")  # noqa: E501
        # verify the required parameter 'instruments' is set
        if self.api_client.client_side_validation and local_var_params.get('instruments') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `instruments` when calling `index_v1_latest_instrument_metadata`")  # noqa: E501

        if self.api_client.client_side_validation and ('market' in local_var_params and  # noqa: E501
                                                        len(local_var_params['market']) > 30):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `market` when calling `index_v1_latest_instrument_metadata`, length must be less than or equal to `30`")  # noqa: E501
        if self.api_client.client_side_validation and ('market' in local_var_params and  # noqa: E501
                                                        len(local_var_params['market']) < 2):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `market` when calling `index_v1_latest_instrument_metadata`, length must be greater than or equal to `2`")  # noqa: E501
        if self.api_client.client_side_validation and ('instruments' in local_var_params and  # noqa: E501
                                                        len(local_var_params['instruments']) > 25):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `instruments` when calling `index_v1_latest_instrument_metadata`, number of items must be less than or equal to `25`")  # noqa: E501
        if self.api_client.client_side_validation and ('instruments' in local_var_params and  # noqa: E501
                                                        len(local_var_params['instruments']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `instruments` when calling `index_v1_latest_instrument_metadata`, number of items must be greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if local_var_params.get('market') is not None:  # noqa: E501
            query_params.append(('market', local_var_params['market']))  # noqa: E501
        if local_var_params.get('instruments') is not None:  # noqa: E501
            query_params.append(('instruments', local_var_params['instruments']))  # noqa: E501
            collection_formats['instruments'] = 'csv'  # noqa: E501
        if local_var_params.get('groups') is not None:  # noqa: E501
            query_params.append(('groups', local_var_params['groups']))  # noqa: E501
            collection_formats['groups'] = 'csv'  # noqa: E501
        if local_var_params.get('mapping_priority') is not None:  # noqa: E501
            query_params.append(('mapping_priority', local_var_params['mapping_priority']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "GENERICRESPONSE",
            400: "Error",
            401: "Error",
            403: "Error",
            404: "Error",
            405: "Error",
            429: "Error",
            500: "Error",
            502: "Error",
            503: "Error",
        }

        return self.api_client.call_api(
            '/index/v1/latest/instrument/metadata', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def index_v1_latest_tick(self, market, instruments, **kwargs):  # noqa: E501
        """index_v1_latest_tick  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.index_v1_latest_tick(market, instruments, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from (required)
        :type market: str
        :param instruments: A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first. (required)
        :type instruments: list[str]
        :param groups: When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME
        :type groups: list[str]
        :param mapping_priority: The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
        :type mapping_priority: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GENERICRESPONSE
        """
        kwargs['_return_http_data_only'] = True
        return self.index_v1_latest_tick_with_http_info(market, instruments, **kwargs)  # noqa: E501

    def index_v1_latest_tick_with_http_info(self, market, instruments, **kwargs):  # noqa: E501
        """index_v1_latest_tick  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.index_v1_latest_tick_with_http_info(market, instruments, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from (required)
        :type market: str
        :param instruments: A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first. (required)
        :type instruments: list[str]
        :param groups: When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME
        :type groups: list[str]
        :param mapping_priority: The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
        :type mapping_priority: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GENERICRESPONSE, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'market',
            'instruments',
            'groups',
            'mapping_priority'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method index_v1_latest_tick" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'market' is set
        if self.api_client.client_side_validation and local_var_params.get('market') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `market` when calling `index_v1_latest_tick`")  # noqa: E501
        # verify the required parameter 'instruments' is set
        if self.api_client.client_side_validation and local_var_params.get('instruments') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `instruments` when calling `index_v1_latest_tick`")  # noqa: E501

        if self.api_client.client_side_validation and ('market' in local_var_params and  # noqa: E501
                                                        len(local_var_params['market']) > 30):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `market` when calling `index_v1_latest_tick`, length must be less than or equal to `30`")  # noqa: E501
        if self.api_client.client_side_validation and ('market' in local_var_params and  # noqa: E501
                                                        len(local_var_params['market']) < 2):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `market` when calling `index_v1_latest_tick`, length must be greater than or equal to `2`")  # noqa: E501
        if self.api_client.client_side_validation and ('instruments' in local_var_params and  # noqa: E501
                                                        len(local_var_params['instruments']) > 25):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `instruments` when calling `index_v1_latest_tick`, number of items must be less than or equal to `25`")  # noqa: E501
        if self.api_client.client_side_validation and ('instruments' in local_var_params and  # noqa: E501
                                                        len(local_var_params['instruments']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `instruments` when calling `index_v1_latest_tick`, number of items must be greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if local_var_params.get('market') is not None:  # noqa: E501
            query_params.append(('market', local_var_params['market']))  # noqa: E501
        if local_var_params.get('instruments') is not None:  # noqa: E501
            query_params.append(('instruments', local_var_params['instruments']))  # noqa: E501
            collection_formats['instruments'] = 'csv'  # noqa: E501
        if local_var_params.get('groups') is not None:  # noqa: E501
            query_params.append(('groups', local_var_params['groups']))  # noqa: E501
            collection_formats['groups'] = 'csv'  # noqa: E501
        if local_var_params.get('mapping_priority') is not None:  # noqa: E501
            query_params.append(('mapping_priority', local_var_params['mapping_priority']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "GENERICRESPONSE",
            400: "Error",
            401: "Error",
            403: "Error",
            404: "Error",
            405: "Error",
            429: "Error",
            500: "Error",
            502: "Error",
            503: "Error",
        }

        return self.api_client.call_api(
            '/index/v1/latest/tick', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def index_v1_markets(self, **kwargs):  # noqa: E501
        """index_v1_markets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.index_v1_markets(async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from
        :type market: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GENERICRESPONSE
        """
        kwargs['_return_http_data_only'] = True
        return self.index_v1_markets_with_http_info(**kwargs)  # noqa: E501

    def index_v1_markets_with_http_info(self, **kwargs):  # noqa: E501
        """index_v1_markets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.index_v1_markets_with_http_info(async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from
        :type market: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GENERICRESPONSE, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'market'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method index_v1_markets" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        if self.api_client.client_side_validation and ('market' in local_var_params and  # noqa: E501
                                                        len(local_var_params['market']) > 30):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `market` when calling `index_v1_markets`, length must be less than or equal to `30`")  # noqa: E501
        if self.api_client.client_side_validation and ('market' in local_var_params and  # noqa: E501
                                                        len(local_var_params['market']) < 0):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `market` when calling `index_v1_markets`, length must be greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if local_var_params.get('market') is not None:  # noqa: E501
            query_params.append(('market', local_var_params['market']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "GENERICRESPONSE",
            400: "Error",
            401: "Error",
            403: "Error",
            404: "Error",
            405: "Error",
            429: "Error",
            500: "Error",
            502: "Error",
            503: "Error",
        }

        return self.api_client.call_api(
            '/index/v1/markets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def index_v1_markets_instruments(self, **kwargs):  # noqa: E501
        """index_v1_markets_instruments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.index_v1_markets_instruments(async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from
        :type market: str
        :param instrument: The mapped instrument to retrieve on a specific market.
        :type instrument: str
        :param instrument_status: The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED
        :type instrument_status: list[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GENERICRESPONSE
        """
        kwargs['_return_http_data_only'] = True
        return self.index_v1_markets_instruments_with_http_info(**kwargs)  # noqa: E501

    def index_v1_markets_instruments_with_http_info(self, **kwargs):  # noqa: E501
        """index_v1_markets_instruments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.index_v1_markets_instruments_with_http_info(async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from
        :type market: str
        :param instrument: The mapped instrument to retrieve on a specific market.
        :type instrument: str
        :param instrument_status: The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED
        :type instrument_status: list[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GENERICRESPONSE, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'market',
            'instrument',
            'instrument_status'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method index_v1_markets_instruments" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        if self.api_client.client_side_validation and ('market' in local_var_params and  # noqa: E501
                                                        len(local_var_params['market']) > 30):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `market` when calling `index_v1_markets_instruments`, length must be less than or equal to `30`")  # noqa: E501
        if self.api_client.client_side_validation and ('market' in local_var_params and  # noqa: E501
                                                        len(local_var_params['market']) < 0):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `market` when calling `index_v1_markets_instruments`, length must be greater than or equal to `0`")  # noqa: E501
        if self.api_client.client_side_validation and ('instrument' in local_var_params and  # noqa: E501
                                                        len(local_var_params['instrument']) > 30):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `instrument` when calling `index_v1_markets_instruments`, length must be less than or equal to `30`")  # noqa: E501
        if self.api_client.client_side_validation and ('instrument' in local_var_params and  # noqa: E501
                                                        len(local_var_params['instrument']) < 0):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `instrument` when calling `index_v1_markets_instruments`, length must be greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if local_var_params.get('market') is not None:  # noqa: E501
            query_params.append(('market', local_var_params['market']))  # noqa: E501
        if local_var_params.get('instrument') is not None:  # noqa: E501
            query_params.append(('instrument', local_var_params['instrument']))  # noqa: E501
        if local_var_params.get('instrument_status') is not None:  # noqa: E501
            query_params.append(('instrument_status', local_var_params['instrument_status']))  # noqa: E501
            collection_formats['instrument_status'] = 'csv'  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "GENERICRESPONSE",
            400: "Error",
            401: "Error",
            403: "Error",
            404: "Error",
            405: "Error",
            429: "Error",
            500: "Error",
            502: "Error",
            503: "Error",
        }

        return self.api_client.call_api(
            '/index/v1/markets/instruments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def index_v1_markets_instruments_unmapped(self, **kwargs):  # noqa: E501
        """index_v1_markets_instruments_unmapped  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.index_v1_markets_instruments_unmapped(async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from
        :type market: str
        :param instrument: The unmapped instrument to retrieve on a specific market.
        :type instrument: str
        :param instrument_status: The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED
        :type instrument_status: list[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GENERICRESPONSE
        """
        kwargs['_return_http_data_only'] = True
        return self.index_v1_markets_instruments_unmapped_with_http_info(**kwargs)  # noqa: E501

    def index_v1_markets_instruments_unmapped_with_http_info(self, **kwargs):  # noqa: E501
        """index_v1_markets_instruments_unmapped  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.index_v1_markets_instruments_unmapped_with_http_info(async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from
        :type market: str
        :param instrument: The unmapped instrument to retrieve on a specific market.
        :type instrument: str
        :param instrument_status: The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED
        :type instrument_status: list[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GENERICRESPONSE, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'market',
            'instrument',
            'instrument_status'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method index_v1_markets_instruments_unmapped" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        if self.api_client.client_side_validation and ('market' in local_var_params and  # noqa: E501
                                                        len(local_var_params['market']) > 30):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `market` when calling `index_v1_markets_instruments_unmapped`, length must be less than or equal to `30`")  # noqa: E501
        if self.api_client.client_side_validation and ('market' in local_var_params and  # noqa: E501
                                                        len(local_var_params['market']) < 0):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `market` when calling `index_v1_markets_instruments_unmapped`, length must be greater than or equal to `0`")  # noqa: E501
        if self.api_client.client_side_validation and ('instrument' in local_var_params and  # noqa: E501
                                                        len(local_var_params['instrument']) > 30):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `instrument` when calling `index_v1_markets_instruments_unmapped`, length must be less than or equal to `30`")  # noqa: E501
        if self.api_client.client_side_validation and ('instrument' in local_var_params and  # noqa: E501
                                                        len(local_var_params['instrument']) < 0):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `instrument` when calling `index_v1_markets_instruments_unmapped`, length must be greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if local_var_params.get('market') is not None:  # noqa: E501
            query_params.append(('market', local_var_params['market']))  # noqa: E501
        if local_var_params.get('instrument') is not None:  # noqa: E501
            query_params.append(('instrument', local_var_params['instrument']))  # noqa: E501
        if local_var_params.get('instrument_status') is not None:  # noqa: E501
            query_params.append(('instrument_status', local_var_params['instrument_status']))  # noqa: E501
            collection_formats['instrument_status'] = 'csv'  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "GENERICRESPONSE",
            400: "Error",
            401: "Error",
            403: "Error",
            404: "Error",
            405: "Error",
            429: "Error",
            500: "Error",
            502: "Error",
            503: "Error",
        }

        return self.api_client.call_api(
            '/index/v1/markets/instruments/unmapped', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))
