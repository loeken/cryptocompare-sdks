# coding: utf-8

"""
    CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry

    CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.  # noqa: E501

    The version of the OpenAPI document: 2.1.1
    Contact: data@cryptocompare.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class SPOTINSTRUMENTHISTODATA(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'base': 'str',
        'close': 'int',
        'first_trade_price': 'int',
        'first_trade_timestamp': 'int',
        'high': 'int',
        'high_trade_price': 'int',
        'high_trade_timestamp': 'int',
        'instrument': 'str',
        'last_trade_price': 'int',
        'last_trade_timestamp': 'int',
        'low': 'int',
        'low_trade_price': 'int',
        'low_trade_timestamp': 'int',
        'mapped_instrument': 'str',
        'market': 'str',
        'open': 'int',
        'quote': 'str',
        'quote_volume': 'int',
        'quote_volume_buy': 'int',
        'quote_volume_sell': 'int',
        'quote_volume_unknown': 'int',
        'timestamp': 'int',
        'total_trades': 'int',
        'total_trades_buy': 'int',
        'total_trades_sell': 'int',
        'total_trades_unknown': 'int',
        'type': 'str',
        'unit': 'str',
        'volume': 'int',
        'volume_buy': 'int',
        'volume_sell': 'int',
        'volume_unknown': 'int'
    }

    attribute_map = {
        'base': 'BASE',
        'close': 'CLOSE',
        'first_trade_price': 'FIRST_TRADE_PRICE',
        'first_trade_timestamp': 'FIRST_TRADE_TIMESTAMP',
        'high': 'HIGH',
        'high_trade_price': 'HIGH_TRADE_PRICE',
        'high_trade_timestamp': 'HIGH_TRADE_TIMESTAMP',
        'instrument': 'INSTRUMENT',
        'last_trade_price': 'LAST_TRADE_PRICE',
        'last_trade_timestamp': 'LAST_TRADE_TIMESTAMP',
        'low': 'LOW',
        'low_trade_price': 'LOW_TRADE_PRICE',
        'low_trade_timestamp': 'LOW_TRADE_TIMESTAMP',
        'mapped_instrument': 'MAPPED_INSTRUMENT',
        'market': 'MARKET',
        'open': 'OPEN',
        'quote': 'QUOTE',
        'quote_volume': 'QUOTE_VOLUME',
        'quote_volume_buy': 'QUOTE_VOLUME_BUY',
        'quote_volume_sell': 'QUOTE_VOLUME_SELL',
        'quote_volume_unknown': 'QUOTE_VOLUME_UNKNOWN',
        'timestamp': 'TIMESTAMP',
        'total_trades': 'TOTAL_TRADES',
        'total_trades_buy': 'TOTAL_TRADES_BUY',
        'total_trades_sell': 'TOTAL_TRADES_SELL',
        'total_trades_unknown': 'TOTAL_TRADES_UNKNOWN',
        'type': 'TYPE',
        'unit': 'UNIT',
        'volume': 'VOLUME',
        'volume_buy': 'VOLUME_BUY',
        'volume_sell': 'VOLUME_SELL',
        'volume_unknown': 'VOLUME_UNKNOWN'
    }

    def __init__(self, base=None, close=None, first_trade_price=None, first_trade_timestamp=None, high=None, high_trade_price=None, high_trade_timestamp=None, instrument=None, last_trade_price=None, last_trade_timestamp=None, low=None, low_trade_price=None, low_trade_timestamp=None, mapped_instrument=None, market=None, open=None, quote=None, quote_volume=None, quote_volume_buy=None, quote_volume_sell=None, quote_volume_unknown=None, timestamp=None, total_trades=None, total_trades_buy=None, total_trades_sell=None, total_trades_unknown=None, type=None, unit=None, volume=None, volume_buy=None, volume_sell=None, volume_unknown=None, local_vars_configuration=None):  # noqa: E501
        """SPOTINSTRUMENTHISTODATA - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._base = None
        self._close = None
        self._first_trade_price = None
        self._first_trade_timestamp = None
        self._high = None
        self._high_trade_price = None
        self._high_trade_timestamp = None
        self._instrument = None
        self._last_trade_price = None
        self._last_trade_timestamp = None
        self._low = None
        self._low_trade_price = None
        self._low_trade_timestamp = None
        self._mapped_instrument = None
        self._market = None
        self._open = None
        self._quote = None
        self._quote_volume = None
        self._quote_volume_buy = None
        self._quote_volume_sell = None
        self._quote_volume_unknown = None
        self._timestamp = None
        self._total_trades = None
        self._total_trades_buy = None
        self._total_trades_sell = None
        self._total_trades_unknown = None
        self._type = None
        self._unit = None
        self._volume = None
        self._volume_buy = None
        self._volume_sell = None
        self._volume_unknown = None
        self.discriminator = None

        if base is not None:
            self.base = base
        if close is not None:
            self.close = close
        if first_trade_price is not None:
            self.first_trade_price = first_trade_price
        if first_trade_timestamp is not None:
            self.first_trade_timestamp = first_trade_timestamp
        if high is not None:
            self.high = high
        if high_trade_price is not None:
            self.high_trade_price = high_trade_price
        if high_trade_timestamp is not None:
            self.high_trade_timestamp = high_trade_timestamp
        if instrument is not None:
            self.instrument = instrument
        if last_trade_price is not None:
            self.last_trade_price = last_trade_price
        if last_trade_timestamp is not None:
            self.last_trade_timestamp = last_trade_timestamp
        if low is not None:
            self.low = low
        if low_trade_price is not None:
            self.low_trade_price = low_trade_price
        if low_trade_timestamp is not None:
            self.low_trade_timestamp = low_trade_timestamp
        if mapped_instrument is not None:
            self.mapped_instrument = mapped_instrument
        if market is not None:
            self.market = market
        if open is not None:
            self.open = open
        if quote is not None:
            self.quote = quote
        if quote_volume is not None:
            self.quote_volume = quote_volume
        if quote_volume_buy is not None:
            self.quote_volume_buy = quote_volume_buy
        if quote_volume_sell is not None:
            self.quote_volume_sell = quote_volume_sell
        if quote_volume_unknown is not None:
            self.quote_volume_unknown = quote_volume_unknown
        if timestamp is not None:
            self.timestamp = timestamp
        if total_trades is not None:
            self.total_trades = total_trades
        if total_trades_buy is not None:
            self.total_trades_buy = total_trades_buy
        if total_trades_sell is not None:
            self.total_trades_sell = total_trades_sell
        if total_trades_unknown is not None:
            self.total_trades_unknown = total_trades_unknown
        if type is not None:
            self.type = type
        if unit is not None:
            self.unit = unit
        if volume is not None:
            self.volume = volume
        if volume_buy is not None:
            self.volume_buy = volume_buy
        if volume_sell is not None:
            self.volume_sell = volume_sell
        if volume_unknown is not None:
            self.volume_unknown = volume_unknown

    @property
    def base(self):
        """Gets the base of this SPOTINSTRUMENTHISTODATA.  # noqa: E501

        The mapped from asset (base / symbol/ coin) (e.g. BTC). Only available on instruments that have mapping.  # noqa: E501

        :return: The base of this SPOTINSTRUMENTHISTODATA.  # noqa: E501
        :rtype: str
        """
        return self._base

    @base.setter
    def base(self, base):
        """Sets the base of this SPOTINSTRUMENTHISTODATA.

        The mapped from asset (base / symbol/ coin) (e.g. BTC). Only available on instruments that have mapping.  # noqa: E501

        :param base: The base of this SPOTINSTRUMENTHISTODATA.  # noqa: E501
        :type base: str
        """

        self._base = base

    @property
    def close(self):
        """Gets the close of this SPOTINSTRUMENTHISTODATA.  # noqa: E501

        The price of the last trade in this time period. If there were no trades in the time period, the open price will be given.  # noqa: E501

        :return: The close of this SPOTINSTRUMENTHISTODATA.  # noqa: E501
        :rtype: int
        """
        return self._close

    @close.setter
    def close(self, close):
        """Sets the close of this SPOTINSTRUMENTHISTODATA.

        The price of the last trade in this time period. If there were no trades in the time period, the open price will be given.  # noqa: E501

        :param close: The close of this SPOTINSTRUMENTHISTODATA.  # noqa: E501
        :type close: int
        """

        self._close = close

    @property
    def first_trade_price(self):
        """Gets the first_trade_price of this SPOTINSTRUMENTHISTODATA.  # noqa: E501

        The price of the first trade in the time period. This is only available when there is at least one trade in the time period.  # noqa: E501

        :return: The first_trade_price of this SPOTINSTRUMENTHISTODATA.  # noqa: E501
        :rtype: int
        """
        return self._first_trade_price

    @first_trade_price.setter
    def first_trade_price(self, first_trade_price):
        """Sets the first_trade_price of this SPOTINSTRUMENTHISTODATA.

        The price of the first trade in the time period. This is only available when there is at least one trade in the time period.  # noqa: E501

        :param first_trade_price: The first_trade_price of this SPOTINSTRUMENTHISTODATA.  # noqa: E501
        :type first_trade_price: int
        """

        self._first_trade_price = first_trade_price

    @property
    def first_trade_timestamp(self):
        """Gets the first_trade_timestamp of this SPOTINSTRUMENTHISTODATA.  # noqa: E501

        The timestamp, in seconds, of the first trade in this time perio. This is only available when there is at least one trade in the time period.  # noqa: E501

        :return: The first_trade_timestamp of this SPOTINSTRUMENTHISTODATA.  # noqa: E501
        :rtype: int
        """
        return self._first_trade_timestamp

    @first_trade_timestamp.setter
    def first_trade_timestamp(self, first_trade_timestamp):
        """Sets the first_trade_timestamp of this SPOTINSTRUMENTHISTODATA.

        The timestamp, in seconds, of the first trade in this time perio. This is only available when there is at least one trade in the time period.  # noqa: E501

        :param first_trade_timestamp: The first_trade_timestamp of this SPOTINSTRUMENTHISTODATA.  # noqa: E501
        :type first_trade_timestamp: int
        """

        self._first_trade_timestamp = first_trade_timestamp

    @property
    def high(self):
        """Gets the high of this SPOTINSTRUMENTHISTODATA.  # noqa: E501

        The highest trade price in the time period. If there were no trades in the time period, the open price will be given.  # noqa: E501

        :return: The high of this SPOTINSTRUMENTHISTODATA.  # noqa: E501
        :rtype: int
        """
        return self._high

    @high.setter
    def high(self, high):
        """Sets the high of this SPOTINSTRUMENTHISTODATA.

        The highest trade price in the time period. If there were no trades in the time period, the open price will be given.  # noqa: E501

        :param high: The high of this SPOTINSTRUMENTHISTODATA.  # noqa: E501
        :type high: int
        """

        self._high = high

    @property
    def high_trade_price(self):
        """Gets the high_trade_price of this SPOTINSTRUMENTHISTODATA.  # noqa: E501

        The highest value of the trades in the time period. This is only available when there is at least one trade in the time period.  # noqa: E501

        :return: The high_trade_price of this SPOTINSTRUMENTHISTODATA.  # noqa: E501
        :rtype: int
        """
        return self._high_trade_price

    @high_trade_price.setter
    def high_trade_price(self, high_trade_price):
        """Sets the high_trade_price of this SPOTINSTRUMENTHISTODATA.

        The highest value of the trades in the time period. This is only available when there is at least one trade in the time period.  # noqa: E501

        :param high_trade_price: The high_trade_price of this SPOTINSTRUMENTHISTODATA.  # noqa: E501
        :type high_trade_price: int
        """

        self._high_trade_price = high_trade_price

    @property
    def high_trade_timestamp(self):
        """Gets the high_trade_timestamp of this SPOTINSTRUMENTHISTODATA.  # noqa: E501

        The timestamp, in seconds, of the highest trade in the time period. This is only available when there is at least one trade in the time period.  # noqa: E501

        :return: The high_trade_timestamp of this SPOTINSTRUMENTHISTODATA.  # noqa: E501
        :rtype: int
        """
        return self._high_trade_timestamp

    @high_trade_timestamp.setter
    def high_trade_timestamp(self, high_trade_timestamp):
        """Sets the high_trade_timestamp of this SPOTINSTRUMENTHISTODATA.

        The timestamp, in seconds, of the highest trade in the time period. This is only available when there is at least one trade in the time period.  # noqa: E501

        :param high_trade_timestamp: The high_trade_timestamp of this SPOTINSTRUMENTHISTODATA.  # noqa: E501
        :type high_trade_timestamp: int
        """

        self._high_trade_timestamp = high_trade_timestamp

    @property
    def instrument(self):
        """Gets the instrument of this SPOTINSTRUMENTHISTODATA.  # noqa: E501

        The unmapped instrument ID  # noqa: E501

        :return: The instrument of this SPOTINSTRUMENTHISTODATA.  # noqa: E501
        :rtype: str
        """
        return self._instrument

    @instrument.setter
    def instrument(self, instrument):
        """Sets the instrument of this SPOTINSTRUMENTHISTODATA.

        The unmapped instrument ID  # noqa: E501

        :param instrument: The instrument of this SPOTINSTRUMENTHISTODATA.  # noqa: E501
        :type instrument: str
        """

        self._instrument = instrument

    @property
    def last_trade_price(self):
        """Gets the last_trade_price of this SPOTINSTRUMENTHISTODATA.  # noqa: E501

        The last trade price in the time period. This is only available when there is at least one trade in the time period.  # noqa: E501

        :return: The last_trade_price of this SPOTINSTRUMENTHISTODATA.  # noqa: E501
        :rtype: int
        """
        return self._last_trade_price

    @last_trade_price.setter
    def last_trade_price(self, last_trade_price):
        """Sets the last_trade_price of this SPOTINSTRUMENTHISTODATA.

        The last trade price in the time period. This is only available when there is at least one trade in the time period.  # noqa: E501

        :param last_trade_price: The last_trade_price of this SPOTINSTRUMENTHISTODATA.  # noqa: E501
        :type last_trade_price: int
        """

        self._last_trade_price = last_trade_price

    @property
    def last_trade_timestamp(self):
        """Gets the last_trade_timestamp of this SPOTINSTRUMENTHISTODATA.  # noqa: E501

        The timestamp, in seconds, of the last trade in this time period. This is only available when there is at least one trade in the time period.  # noqa: E501

        :return: The last_trade_timestamp of this SPOTINSTRUMENTHISTODATA.  # noqa: E501
        :rtype: int
        """
        return self._last_trade_timestamp

    @last_trade_timestamp.setter
    def last_trade_timestamp(self, last_trade_timestamp):
        """Sets the last_trade_timestamp of this SPOTINSTRUMENTHISTODATA.

        The timestamp, in seconds, of the last trade in this time period. This is only available when there is at least one trade in the time period.  # noqa: E501

        :param last_trade_timestamp: The last_trade_timestamp of this SPOTINSTRUMENTHISTODATA.  # noqa: E501
        :type last_trade_timestamp: int
        """

        self._last_trade_timestamp = last_trade_timestamp

    @property
    def low(self):
        """Gets the low of this SPOTINSTRUMENTHISTODATA.  # noqa: E501

        The lowest trade price in the time period. If there were no trades in the time period, the open price will be given.  # noqa: E501

        :return: The low of this SPOTINSTRUMENTHISTODATA.  # noqa: E501
        :rtype: int
        """
        return self._low

    @low.setter
    def low(self, low):
        """Sets the low of this SPOTINSTRUMENTHISTODATA.

        The lowest trade price in the time period. If there were no trades in the time period, the open price will be given.  # noqa: E501

        :param low: The low of this SPOTINSTRUMENTHISTODATA.  # noqa: E501
        :type low: int
        """

        self._low = low

    @property
    def low_trade_price(self):
        """Gets the low_trade_price of this SPOTINSTRUMENTHISTODATA.  # noqa: E501

        The lowest value of the trades in the time period. This is only available when there is at least one trade in the time period.  # noqa: E501

        :return: The low_trade_price of this SPOTINSTRUMENTHISTODATA.  # noqa: E501
        :rtype: int
        """
        return self._low_trade_price

    @low_trade_price.setter
    def low_trade_price(self, low_trade_price):
        """Sets the low_trade_price of this SPOTINSTRUMENTHISTODATA.

        The lowest value of the trades in the time period. This is only available when there is at least one trade in the time period.  # noqa: E501

        :param low_trade_price: The low_trade_price of this SPOTINSTRUMENTHISTODATA.  # noqa: E501
        :type low_trade_price: int
        """

        self._low_trade_price = low_trade_price

    @property
    def low_trade_timestamp(self):
        """Gets the low_trade_timestamp of this SPOTINSTRUMENTHISTODATA.  # noqa: E501

        The timestamp, in seconds, of the lowest trade in the time period. This is only available when there is at least one trade in the time period.  # noqa: E501

        :return: The low_trade_timestamp of this SPOTINSTRUMENTHISTODATA.  # noqa: E501
        :rtype: int
        """
        return self._low_trade_timestamp

    @low_trade_timestamp.setter
    def low_trade_timestamp(self, low_trade_timestamp):
        """Sets the low_trade_timestamp of this SPOTINSTRUMENTHISTODATA.

        The timestamp, in seconds, of the lowest trade in the time period. This is only available when there is at least one trade in the time period.  # noqa: E501

        :param low_trade_timestamp: The low_trade_timestamp of this SPOTINSTRUMENTHISTODATA.  # noqa: E501
        :type low_trade_timestamp: int
        """

        self._low_trade_timestamp = low_trade_timestamp

    @property
    def mapped_instrument(self):
        """Gets the mapped_instrument of this SPOTINSTRUMENTHISTODATA.  # noqa: E501

        The instrument ID, as derived from our mapping rules. This takes the form \"BASE-QUOTE\" (e.g. BTC-USD). Only available on instruments that have been mapped.  # noqa: E501

        :return: The mapped_instrument of this SPOTINSTRUMENTHISTODATA.  # noqa: E501
        :rtype: str
        """
        return self._mapped_instrument

    @mapped_instrument.setter
    def mapped_instrument(self, mapped_instrument):
        """Sets the mapped_instrument of this SPOTINSTRUMENTHISTODATA.

        The instrument ID, as derived from our mapping rules. This takes the form \"BASE-QUOTE\" (e.g. BTC-USD). Only available on instruments that have been mapped.  # noqa: E501

        :param mapped_instrument: The mapped_instrument of this SPOTINSTRUMENTHISTODATA.  # noqa: E501
        :type mapped_instrument: str
        """

        self._mapped_instrument = mapped_instrument

    @property
    def market(self):
        """Gets the market of this SPOTINSTRUMENTHISTODATA.  # noqa: E501

        The market / exchange under consideration (e.g. gemini, kraken, coinbase, etc).  # noqa: E501

        :return: The market of this SPOTINSTRUMENTHISTODATA.  # noqa: E501
        :rtype: str
        """
        return self._market

    @market.setter
    def market(self, market):
        """Sets the market of this SPOTINSTRUMENTHISTODATA.

        The market / exchange under consideration (e.g. gemini, kraken, coinbase, etc).  # noqa: E501

        :param market: The market of this SPOTINSTRUMENTHISTODATA.  # noqa: E501
        :type market: str
        """

        self._market = market

    @property
    def open(self):
        """Gets the open of this SPOTINSTRUMENTHISTODATA.  # noqa: E501

        The open price for the historical period, this is based on the closest trade before the period start.  # noqa: E501

        :return: The open of this SPOTINSTRUMENTHISTODATA.  # noqa: E501
        :rtype: int
        """
        return self._open

    @open.setter
    def open(self, open):
        """Sets the open of this SPOTINSTRUMENTHISTODATA.

        The open price for the historical period, this is based on the closest trade before the period start.  # noqa: E501

        :param open: The open of this SPOTINSTRUMENTHISTODATA.  # noqa: E501
        :type open: int
        """

        self._open = open

    @property
    def quote(self):
        """Gets the quote of this SPOTINSTRUMENTHISTODATA.  # noqa: E501

        The mapped to asset (quote / counter symbol / coin) (e.g. USD). Only available on instruments that have mapping.  # noqa: E501

        :return: The quote of this SPOTINSTRUMENTHISTODATA.  # noqa: E501
        :rtype: str
        """
        return self._quote

    @quote.setter
    def quote(self, quote):
        """Sets the quote of this SPOTINSTRUMENTHISTODATA.

        The mapped to asset (quote / counter symbol / coin) (e.g. USD). Only available on instruments that have mapping.  # noqa: E501

        :param quote: The quote of this SPOTINSTRUMENTHISTODATA.  # noqa: E501
        :type quote: str
        """

        self._quote = quote

    @property
    def quote_volume(self):
        """Gets the quote_volume of this SPOTINSTRUMENTHISTODATA.  # noqa: E501

        The sum of all the trade volumes in the To asset (quote/counter symbol/coin) for the time period. If there were no trades in the time period, 0 will be returned.  # noqa: E501

        :return: The quote_volume of this SPOTINSTRUMENTHISTODATA.  # noqa: E501
        :rtype: int
        """
        return self._quote_volume

    @quote_volume.setter
    def quote_volume(self, quote_volume):
        """Sets the quote_volume of this SPOTINSTRUMENTHISTODATA.

        The sum of all the trade volumes in the To asset (quote/counter symbol/coin) for the time period. If there were no trades in the time period, 0 will be returned.  # noqa: E501

        :param quote_volume: The quote_volume of this SPOTINSTRUMENTHISTODATA.  # noqa: E501
        :type quote_volume: int
        """

        self._quote_volume = quote_volume

    @property
    def quote_volume_buy(self):
        """Gets the quote_volume_buy of this SPOTINSTRUMENTHISTODATA.  # noqa: E501

        The sum of all the BUY trade volumes in the to asset (quote/counter symbol/coin) for the time period.  # noqa: E501

        :return: The quote_volume_buy of this SPOTINSTRUMENTHISTODATA.  # noqa: E501
        :rtype: int
        """
        return self._quote_volume_buy

    @quote_volume_buy.setter
    def quote_volume_buy(self, quote_volume_buy):
        """Sets the quote_volume_buy of this SPOTINSTRUMENTHISTODATA.

        The sum of all the BUY trade volumes in the to asset (quote/counter symbol/coin) for the time period.  # noqa: E501

        :param quote_volume_buy: The quote_volume_buy of this SPOTINSTRUMENTHISTODATA.  # noqa: E501
        :type quote_volume_buy: int
        """

        self._quote_volume_buy = quote_volume_buy

    @property
    def quote_volume_sell(self):
        """Gets the quote_volume_sell of this SPOTINSTRUMENTHISTODATA.  # noqa: E501

        The sum of all the SELL trade volumes in the To asset (quote/counter symbol/coin) for the time period.  # noqa: E501

        :return: The quote_volume_sell of this SPOTINSTRUMENTHISTODATA.  # noqa: E501
        :rtype: int
        """
        return self._quote_volume_sell

    @quote_volume_sell.setter
    def quote_volume_sell(self, quote_volume_sell):
        """Sets the quote_volume_sell of this SPOTINSTRUMENTHISTODATA.

        The sum of all the SELL trade volumes in the To asset (quote/counter symbol/coin) for the time period.  # noqa: E501

        :param quote_volume_sell: The quote_volume_sell of this SPOTINSTRUMENTHISTODATA.  # noqa: E501
        :type quote_volume_sell: int
        """

        self._quote_volume_sell = quote_volume_sell

    @property
    def quote_volume_unknown(self):
        """Gets the quote_volume_unknown of this SPOTINSTRUMENTHISTODATA.  # noqa: E501

        The sum of all the UNKNOWN trade volumes in the To asset (quote/counter symbol/coin) for the time period.  # noqa: E501

        :return: The quote_volume_unknown of this SPOTINSTRUMENTHISTODATA.  # noqa: E501
        :rtype: int
        """
        return self._quote_volume_unknown

    @quote_volume_unknown.setter
    def quote_volume_unknown(self, quote_volume_unknown):
        """Sets the quote_volume_unknown of this SPOTINSTRUMENTHISTODATA.

        The sum of all the UNKNOWN trade volumes in the To asset (quote/counter symbol/coin) for the time period.  # noqa: E501

        :param quote_volume_unknown: The quote_volume_unknown of this SPOTINSTRUMENTHISTODATA.  # noqa: E501
        :type quote_volume_unknown: int
        """

        self._quote_volume_unknown = quote_volume_unknown

    @property
    def timestamp(self):
        """Gets the timestamp of this SPOTINSTRUMENTHISTODATA.  # noqa: E501

        The timestamp in seconds of the beginning of the histo period. For minute it would be every minute at the beginning of the minute, for hour it would be the start of the hour and for daily it is 00:00 GMT.  # noqa: E501

        :return: The timestamp of this SPOTINSTRUMENTHISTODATA.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this SPOTINSTRUMENTHISTODATA.

        The timestamp in seconds of the beginning of the histo period. For minute it would be every minute at the beginning of the minute, for hour it would be the start of the hour and for daily it is 00:00 GMT.  # noqa: E501

        :param timestamp: The timestamp of this SPOTINSTRUMENTHISTODATA.  # noqa: E501
        :type timestamp: int
        """

        self._timestamp = timestamp

    @property
    def total_trades(self):
        """Gets the total_trades of this SPOTINSTRUMENTHISTODATA.  # noqa: E501

        The total number of trades seen in this time period. If there were no trades in the time period, 0 will be returned.  # noqa: E501

        :return: The total_trades of this SPOTINSTRUMENTHISTODATA.  # noqa: E501
        :rtype: int
        """
        return self._total_trades

    @total_trades.setter
    def total_trades(self, total_trades):
        """Sets the total_trades of this SPOTINSTRUMENTHISTODATA.

        The total number of trades seen in this time period. If there were no trades in the time period, 0 will be returned.  # noqa: E501

        :param total_trades: The total_trades of this SPOTINSTRUMENTHISTODATA.  # noqa: E501
        :type total_trades: int
        """

        self._total_trades = total_trades

    @property
    def total_trades_buy(self):
        """Gets the total_trades_buy of this SPOTINSTRUMENTHISTODATA.  # noqa: E501

        The total number of BUY trades seen in this time period. If there were no trades in the time period, 0 will be returned.  # noqa: E501

        :return: The total_trades_buy of this SPOTINSTRUMENTHISTODATA.  # noqa: E501
        :rtype: int
        """
        return self._total_trades_buy

    @total_trades_buy.setter
    def total_trades_buy(self, total_trades_buy):
        """Sets the total_trades_buy of this SPOTINSTRUMENTHISTODATA.

        The total number of BUY trades seen in this time period. If there were no trades in the time period, 0 will be returned.  # noqa: E501

        :param total_trades_buy: The total_trades_buy of this SPOTINSTRUMENTHISTODATA.  # noqa: E501
        :type total_trades_buy: int
        """

        self._total_trades_buy = total_trades_buy

    @property
    def total_trades_sell(self):
        """Gets the total_trades_sell of this SPOTINSTRUMENTHISTODATA.  # noqa: E501

        The total number of SELL trades seen in this time period. If there were no trades in the time period, 0 will be returned.  # noqa: E501

        :return: The total_trades_sell of this SPOTINSTRUMENTHISTODATA.  # noqa: E501
        :rtype: int
        """
        return self._total_trades_sell

    @total_trades_sell.setter
    def total_trades_sell(self, total_trades_sell):
        """Sets the total_trades_sell of this SPOTINSTRUMENTHISTODATA.

        The total number of SELL trades seen in this time period. If there were no trades in the time period, 0 will be returned.  # noqa: E501

        :param total_trades_sell: The total_trades_sell of this SPOTINSTRUMENTHISTODATA.  # noqa: E501
        :type total_trades_sell: int
        """

        self._total_trades_sell = total_trades_sell

    @property
    def total_trades_unknown(self):
        """Gets the total_trades_unknown of this SPOTINSTRUMENTHISTODATA.  # noqa: E501

        The total number of UNKNOWN trades seen in this time period. If there were no trades in the time period, 0 will be returned.  # noqa: E501

        :return: The total_trades_unknown of this SPOTINSTRUMENTHISTODATA.  # noqa: E501
        :rtype: int
        """
        return self._total_trades_unknown

    @total_trades_unknown.setter
    def total_trades_unknown(self, total_trades_unknown):
        """Sets the total_trades_unknown of this SPOTINSTRUMENTHISTODATA.

        The total number of UNKNOWN trades seen in this time period. If there were no trades in the time period, 0 will be returned.  # noqa: E501

        :param total_trades_unknown: The total_trades_unknown of this SPOTINSTRUMENTHISTODATA.  # noqa: E501
        :type total_trades_unknown: int
        """

        self._total_trades_unknown = total_trades_unknown

    @property
    def type(self):
        """Gets the type of this SPOTINSTRUMENTHISTODATA.  # noqa: E501

        The type of the message.  # noqa: E501

        :return: The type of this SPOTINSTRUMENTHISTODATA.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SPOTINSTRUMENTHISTODATA.

        The type of the message.  # noqa: E501

        :param type: The type of this SPOTINSTRUMENTHISTODATA.  # noqa: E501
        :type type: str
        """

        self._type = type

    @property
    def unit(self):
        """Gets the unit of this SPOTINSTRUMENTHISTODATA.  # noqa: E501

        The unit of the historical period update: MINUTE for minute, HOUR for hour and DAY for day.  # noqa: E501

        :return: The unit of this SPOTINSTRUMENTHISTODATA.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this SPOTINSTRUMENTHISTODATA.

        The unit of the historical period update: MINUTE for minute, HOUR for hour and DAY for day.  # noqa: E501

        :param unit: The unit of this SPOTINSTRUMENTHISTODATA.  # noqa: E501
        :type unit: str
        """

        self._unit = unit

    @property
    def volume(self):
        """Gets the volume of this SPOTINSTRUMENTHISTODATA.  # noqa: E501

        The sum of all the trade volumes in the from asset (base symbol / coin) for the time period. If there were no trades in the time period, 0 will be returned.  # noqa: E501

        :return: The volume of this SPOTINSTRUMENTHISTODATA.  # noqa: E501
        :rtype: int
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this SPOTINSTRUMENTHISTODATA.

        The sum of all the trade volumes in the from asset (base symbol / coin) for the time period. If there were no trades in the time period, 0 will be returned.  # noqa: E501

        :param volume: The volume of this SPOTINSTRUMENTHISTODATA.  # noqa: E501
        :type volume: int
        """

        self._volume = volume

    @property
    def volume_buy(self):
        """Gets the volume_buy of this SPOTINSTRUMENTHISTODATA.  # noqa: E501

        The sum of all the BUY trade volumes in the from asset (base symbol / coin) for the time period.  # noqa: E501

        :return: The volume_buy of this SPOTINSTRUMENTHISTODATA.  # noqa: E501
        :rtype: int
        """
        return self._volume_buy

    @volume_buy.setter
    def volume_buy(self, volume_buy):
        """Sets the volume_buy of this SPOTINSTRUMENTHISTODATA.

        The sum of all the BUY trade volumes in the from asset (base symbol / coin) for the time period.  # noqa: E501

        :param volume_buy: The volume_buy of this SPOTINSTRUMENTHISTODATA.  # noqa: E501
        :type volume_buy: int
        """

        self._volume_buy = volume_buy

    @property
    def volume_sell(self):
        """Gets the volume_sell of this SPOTINSTRUMENTHISTODATA.  # noqa: E501

        The sum of all the SELL trade volumes in the from asset (base symbol / coin) for the time period.  # noqa: E501

        :return: The volume_sell of this SPOTINSTRUMENTHISTODATA.  # noqa: E501
        :rtype: int
        """
        return self._volume_sell

    @volume_sell.setter
    def volume_sell(self, volume_sell):
        """Sets the volume_sell of this SPOTINSTRUMENTHISTODATA.

        The sum of all the SELL trade volumes in the from asset (base symbol / coin) for the time period.  # noqa: E501

        :param volume_sell: The volume_sell of this SPOTINSTRUMENTHISTODATA.  # noqa: E501
        :type volume_sell: int
        """

        self._volume_sell = volume_sell

    @property
    def volume_unknown(self):
        """Gets the volume_unknown of this SPOTINSTRUMENTHISTODATA.  # noqa: E501

        The sum of all the UNKNOWN trade volumes in the from asset (base symbol / coin) for the time period.  # noqa: E501

        :return: The volume_unknown of this SPOTINSTRUMENTHISTODATA.  # noqa: E501
        :rtype: int
        """
        return self._volume_unknown

    @volume_unknown.setter
    def volume_unknown(self, volume_unknown):
        """Sets the volume_unknown of this SPOTINSTRUMENTHISTODATA.

        The sum of all the UNKNOWN trade volumes in the from asset (base symbol / coin) for the time period.  # noqa: E501

        :param volume_unknown: The volume_unknown of this SPOTINSTRUMENTHISTODATA.  # noqa: E501
        :type volume_unknown: int
        """

        self._volume_unknown = volume_unknown

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SPOTINSTRUMENTHISTODATA):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SPOTINSTRUMENTHISTODATA):
            return True

        return self.to_dict() != other.to_dict()
