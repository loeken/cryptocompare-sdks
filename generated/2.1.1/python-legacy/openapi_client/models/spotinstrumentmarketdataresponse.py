# coding: utf-8

"""
    CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry

    CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.  # noqa: E501

    The version of the OpenAPI document: 2.1.1
    Contact: data@cryptocompare.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class SPOTINSTRUMENTMARKETDATARESPONSE(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'data': 'dict[str, SPOTINSTRUMENTMARKETDATA]',
        'err': 'SPOTINSTRUMENTMARKETDATARESPONSEErr'
    }

    attribute_map = {
        'data': 'Data',
        'err': 'Err'
    }

    def __init__(self, data=None, err=None, local_vars_configuration=None):  # noqa: E501
        """SPOTINSTRUMENTMARKETDATARESPONSE - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._data = None
        self._err = None
        self.discriminator = None

        if data is not None:
            self.data = data
        if err is not None:
            self.err = err

    @property
    def data(self):
        """Gets the data of this SPOTINSTRUMENTMARKETDATARESPONSE.  # noqa: E501


        :return: The data of this SPOTINSTRUMENTMARKETDATARESPONSE.  # noqa: E501
        :rtype: dict[str, SPOTINSTRUMENTMARKETDATA]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this SPOTINSTRUMENTMARKETDATARESPONSE.


        :param data: The data of this SPOTINSTRUMENTMARKETDATARESPONSE.  # noqa: E501
        :type data: dict[str, SPOTINSTRUMENTMARKETDATA]
        """

        self._data = data

    @property
    def err(self):
        """Gets the err of this SPOTINSTRUMENTMARKETDATARESPONSE.  # noqa: E501


        :return: The err of this SPOTINSTRUMENTMARKETDATARESPONSE.  # noqa: E501
        :rtype: SPOTINSTRUMENTMARKETDATARESPONSEErr
        """
        return self._err

    @err.setter
    def err(self, err):
        """Sets the err of this SPOTINSTRUMENTMARKETDATARESPONSE.


        :param err: The err of this SPOTINSTRUMENTMARKETDATARESPONSE.  # noqa: E501
        :type err: SPOTINSTRUMENTMARKETDATARESPONSEErr
        """

        self._err = err

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SPOTINSTRUMENTMARKETDATARESPONSE):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SPOTINSTRUMENTMARKETDATARESPONSE):
            return True

        return self.to_dict() != other.to_dict()
