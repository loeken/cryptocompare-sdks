# coding: utf-8

"""
    CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry

    CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.  # noqa: E501

    The version of the OpenAPI document: 2.1.1
    Contact: data@cryptocompare.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import openapi_client
from openapi_client.models.spotinstrumenttrade import SPOTINSTRUMENTTRADE  # noqa: E501
from openapi_client.rest import ApiException

class TestSPOTINSTRUMENTTRADE(unittest.TestCase):
    """SPOTINSTRUMENTTRADE unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test SPOTINSTRUMENTTRADE
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = openapi_client.models.spotinstrumenttrade.SPOTINSTRUMENTTRADE()  # noqa: E501
        if include_optional :
            return SPOTINSTRUMENTTRADE(
                base = '', 
                ccseq = 56, 
                id = '', 
                instrument = '', 
                mapped_instrument = '', 
                market = '', 
                price = 56, 
                quantity = 56, 
                quote = '', 
                quote_quantity = 56, 
                received_timestamp = 56, 
                received_timestamp_ns = 56, 
                side = '', 
                source = '', 
                timestamp = 56, 
                timestamp_ns = 56, 
                type = ''
            )
        else :
            return SPOTINSTRUMENTTRADE(
        )

    def testSPOTINSTRUMENTTRADE(self):
        """Test SPOTINSTRUMENTTRADE"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
