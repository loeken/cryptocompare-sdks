/*
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 *
 * CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: data@cryptocompare.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOverviewApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groups">When requesting all market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME (optional)</param>
        /// <param name="limit">The number of data points to return (optional, default to 30)</param>
        /// <param name="toTs">Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)</param>
        /// <param name="aggregate">The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)</param>
        /// <param name="fill">Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GENERICRESPONSE</returns>
        GENERICRESPONSE OverviewV1HistoricalMarketcapAllAssetsDays(List<string> groups = default(List<string>), int? limit = default(int?), int? toTs = default(int?), int? aggregate = default(int?), bool? fill = default(bool?), string responseFormat = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groups">When requesting all market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME (optional)</param>
        /// <param name="limit">The number of data points to return (optional, default to 30)</param>
        /// <param name="toTs">Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)</param>
        /// <param name="aggregate">The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)</param>
        /// <param name="fill">Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GENERICRESPONSE</returns>
        ApiResponse<GENERICRESPONSE> OverviewV1HistoricalMarketcapAllAssetsDaysWithHttpInfo(List<string> groups = default(List<string>), int? limit = default(int?), int? toTs = default(int?), int? aggregate = default(int?), bool? fill = default(bool?), string responseFormat = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groups">When requesting all market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME (optional)</param>
        /// <param name="limit">The number of data points to return (optional, default to 30)</param>
        /// <param name="toTs">Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)</param>
        /// <param name="aggregate">The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)</param>
        /// <param name="fill">Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GENERICRESPONSE</returns>
        GENERICRESPONSE OverviewV1HistoricalMarketcapAllAssetsHours(List<string> groups = default(List<string>), int? limit = default(int?), int? toTs = default(int?), int? aggregate = default(int?), bool? fill = default(bool?), string responseFormat = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groups">When requesting all market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME (optional)</param>
        /// <param name="limit">The number of data points to return (optional, default to 30)</param>
        /// <param name="toTs">Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)</param>
        /// <param name="aggregate">The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)</param>
        /// <param name="fill">Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GENERICRESPONSE</returns>
        ApiResponse<GENERICRESPONSE> OverviewV1HistoricalMarketcapAllAssetsHoursWithHttpInfo(List<string> groups = default(List<string>), int? limit = default(int?), int? toTs = default(int?), int? aggregate = default(int?), bool? fill = default(bool?), string responseFormat = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groups">When requesting ftw universe market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME (optional)</param>
        /// <param name="limit">The number of data points to return (optional, default to 30)</param>
        /// <param name="toTs">Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)</param>
        /// <param name="aggregate">The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)</param>
        /// <param name="fill">Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GENERICRESPONSE</returns>
        GENERICRESPONSE OverviewV1HistoricalMarketcapFtwAssetsDays(List<string> groups = default(List<string>), int? limit = default(int?), int? toTs = default(int?), int? aggregate = default(int?), bool? fill = default(bool?), string responseFormat = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groups">When requesting ftw universe market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME (optional)</param>
        /// <param name="limit">The number of data points to return (optional, default to 30)</param>
        /// <param name="toTs">Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)</param>
        /// <param name="aggregate">The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)</param>
        /// <param name="fill">Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GENERICRESPONSE</returns>
        ApiResponse<GENERICRESPONSE> OverviewV1HistoricalMarketcapFtwAssetsDaysWithHttpInfo(List<string> groups = default(List<string>), int? limit = default(int?), int? toTs = default(int?), int? aggregate = default(int?), bool? fill = default(bool?), string responseFormat = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groups">When requesting ftw universe market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME (optional)</param>
        /// <param name="limit">The number of data points to return (optional, default to 30)</param>
        /// <param name="toTs">Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)</param>
        /// <param name="aggregate">The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)</param>
        /// <param name="fill">Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GENERICRESPONSE</returns>
        GENERICRESPONSE OverviewV1HistoricalMarketcapFtwAssetsHours(List<string> groups = default(List<string>), int? limit = default(int?), int? toTs = default(int?), int? aggregate = default(int?), bool? fill = default(bool?), string responseFormat = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groups">When requesting ftw universe market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME (optional)</param>
        /// <param name="limit">The number of data points to return (optional, default to 30)</param>
        /// <param name="toTs">Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)</param>
        /// <param name="aggregate">The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)</param>
        /// <param name="fill">Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GENERICRESPONSE</returns>
        ApiResponse<GENERICRESPONSE> OverviewV1HistoricalMarketcapFtwAssetsHoursWithHttpInfo(List<string> groups = default(List<string>), int? limit = default(int?), int? toTs = default(int?), int? aggregate = default(int?), bool? fill = default(bool?), string responseFormat = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groups">When requesting all market cap tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,MOVING_24_HOUR (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GENERICRESPONSE</returns>
        GENERICRESPONSE OverviewV1LatestMarketcapAllTick(List<string> groups = default(List<string>), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groups">When requesting all market cap tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,MOVING_24_HOUR (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GENERICRESPONSE</returns>
        ApiResponse<GENERICRESPONSE> OverviewV1LatestMarketcapAllTickWithHttpInfo(List<string> groups = default(List<string>), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groups">When requesting ftw universe market cap tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,MOVING_24_HOUR (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GENERICRESPONSE</returns>
        GENERICRESPONSE OverviewV1LatestMarketcapFtwTick(List<string> groups = default(List<string>), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groups">When requesting ftw universe market cap tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,MOVING_24_HOUR (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GENERICRESPONSE</returns>
        ApiResponse<GENERICRESPONSE> OverviewV1LatestMarketcapFtwTickWithHttpInfo(List<string> groups = default(List<string>), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOverviewApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groups">When requesting all market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME (optional)</param>
        /// <param name="limit">The number of data points to return (optional, default to 30)</param>
        /// <param name="toTs">Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)</param>
        /// <param name="aggregate">The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)</param>
        /// <param name="fill">Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GENERICRESPONSE</returns>
        System.Threading.Tasks.Task<GENERICRESPONSE> OverviewV1HistoricalMarketcapAllAssetsDaysAsync(List<string> groups = default(List<string>), int? limit = default(int?), int? toTs = default(int?), int? aggregate = default(int?), bool? fill = default(bool?), string responseFormat = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groups">When requesting all market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME (optional)</param>
        /// <param name="limit">The number of data points to return (optional, default to 30)</param>
        /// <param name="toTs">Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)</param>
        /// <param name="aggregate">The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)</param>
        /// <param name="fill">Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GENERICRESPONSE)</returns>
        System.Threading.Tasks.Task<ApiResponse<GENERICRESPONSE>> OverviewV1HistoricalMarketcapAllAssetsDaysWithHttpInfoAsync(List<string> groups = default(List<string>), int? limit = default(int?), int? toTs = default(int?), int? aggregate = default(int?), bool? fill = default(bool?), string responseFormat = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groups">When requesting all market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME (optional)</param>
        /// <param name="limit">The number of data points to return (optional, default to 30)</param>
        /// <param name="toTs">Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)</param>
        /// <param name="aggregate">The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)</param>
        /// <param name="fill">Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GENERICRESPONSE</returns>
        System.Threading.Tasks.Task<GENERICRESPONSE> OverviewV1HistoricalMarketcapAllAssetsHoursAsync(List<string> groups = default(List<string>), int? limit = default(int?), int? toTs = default(int?), int? aggregate = default(int?), bool? fill = default(bool?), string responseFormat = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groups">When requesting all market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME (optional)</param>
        /// <param name="limit">The number of data points to return (optional, default to 30)</param>
        /// <param name="toTs">Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)</param>
        /// <param name="aggregate">The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)</param>
        /// <param name="fill">Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GENERICRESPONSE)</returns>
        System.Threading.Tasks.Task<ApiResponse<GENERICRESPONSE>> OverviewV1HistoricalMarketcapAllAssetsHoursWithHttpInfoAsync(List<string> groups = default(List<string>), int? limit = default(int?), int? toTs = default(int?), int? aggregate = default(int?), bool? fill = default(bool?), string responseFormat = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groups">When requesting ftw universe market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME (optional)</param>
        /// <param name="limit">The number of data points to return (optional, default to 30)</param>
        /// <param name="toTs">Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)</param>
        /// <param name="aggregate">The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)</param>
        /// <param name="fill">Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GENERICRESPONSE</returns>
        System.Threading.Tasks.Task<GENERICRESPONSE> OverviewV1HistoricalMarketcapFtwAssetsDaysAsync(List<string> groups = default(List<string>), int? limit = default(int?), int? toTs = default(int?), int? aggregate = default(int?), bool? fill = default(bool?), string responseFormat = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groups">When requesting ftw universe market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME (optional)</param>
        /// <param name="limit">The number of data points to return (optional, default to 30)</param>
        /// <param name="toTs">Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)</param>
        /// <param name="aggregate">The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)</param>
        /// <param name="fill">Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GENERICRESPONSE)</returns>
        System.Threading.Tasks.Task<ApiResponse<GENERICRESPONSE>> OverviewV1HistoricalMarketcapFtwAssetsDaysWithHttpInfoAsync(List<string> groups = default(List<string>), int? limit = default(int?), int? toTs = default(int?), int? aggregate = default(int?), bool? fill = default(bool?), string responseFormat = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groups">When requesting ftw universe market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME (optional)</param>
        /// <param name="limit">The number of data points to return (optional, default to 30)</param>
        /// <param name="toTs">Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)</param>
        /// <param name="aggregate">The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)</param>
        /// <param name="fill">Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GENERICRESPONSE</returns>
        System.Threading.Tasks.Task<GENERICRESPONSE> OverviewV1HistoricalMarketcapFtwAssetsHoursAsync(List<string> groups = default(List<string>), int? limit = default(int?), int? toTs = default(int?), int? aggregate = default(int?), bool? fill = default(bool?), string responseFormat = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groups">When requesting ftw universe market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME (optional)</param>
        /// <param name="limit">The number of data points to return (optional, default to 30)</param>
        /// <param name="toTs">Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)</param>
        /// <param name="aggregate">The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)</param>
        /// <param name="fill">Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GENERICRESPONSE)</returns>
        System.Threading.Tasks.Task<ApiResponse<GENERICRESPONSE>> OverviewV1HistoricalMarketcapFtwAssetsHoursWithHttpInfoAsync(List<string> groups = default(List<string>), int? limit = default(int?), int? toTs = default(int?), int? aggregate = default(int?), bool? fill = default(bool?), string responseFormat = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groups">When requesting all market cap tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,MOVING_24_HOUR (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GENERICRESPONSE</returns>
        System.Threading.Tasks.Task<GENERICRESPONSE> OverviewV1LatestMarketcapAllTickAsync(List<string> groups = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groups">When requesting all market cap tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,MOVING_24_HOUR (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GENERICRESPONSE)</returns>
        System.Threading.Tasks.Task<ApiResponse<GENERICRESPONSE>> OverviewV1LatestMarketcapAllTickWithHttpInfoAsync(List<string> groups = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groups">When requesting ftw universe market cap tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,MOVING_24_HOUR (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GENERICRESPONSE</returns>
        System.Threading.Tasks.Task<GENERICRESPONSE> OverviewV1LatestMarketcapFtwTickAsync(List<string> groups = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groups">When requesting ftw universe market cap tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,MOVING_24_HOUR (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GENERICRESPONSE)</returns>
        System.Threading.Tasks.Task<ApiResponse<GENERICRESPONSE>> OverviewV1LatestMarketcapFtwTickWithHttpInfoAsync(List<string> groups = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOverviewApi : IOverviewApiSync, IOverviewApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OverviewApi : IOverviewApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OverviewApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OverviewApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OverviewApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OverviewApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OverviewApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OverviewApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OverviewApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public OverviewApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groups">When requesting all market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME (optional)</param>
        /// <param name="limit">The number of data points to return (optional, default to 30)</param>
        /// <param name="toTs">Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)</param>
        /// <param name="aggregate">The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)</param>
        /// <param name="fill">Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GENERICRESPONSE</returns>
        public GENERICRESPONSE OverviewV1HistoricalMarketcapAllAssetsDays(List<string> groups = default(List<string>), int? limit = default(int?), int? toTs = default(int?), int? aggregate = default(int?), bool? fill = default(bool?), string responseFormat = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GENERICRESPONSE> localVarResponse = OverviewV1HistoricalMarketcapAllAssetsDaysWithHttpInfo(groups, limit, toTs, aggregate, fill, responseFormat);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groups">When requesting all market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME (optional)</param>
        /// <param name="limit">The number of data points to return (optional, default to 30)</param>
        /// <param name="toTs">Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)</param>
        /// <param name="aggregate">The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)</param>
        /// <param name="fill">Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GENERICRESPONSE</returns>
        public Org.OpenAPITools.Client.ApiResponse<GENERICRESPONSE> OverviewV1HistoricalMarketcapAllAssetsDaysWithHttpInfo(List<string> groups = default(List<string>), int? limit = default(int?), int? toTs = default(int?), int? aggregate = default(int?), bool? fill = default(bool?), string responseFormat = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (groups != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "groups", groups));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (toTs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "to_ts", toTs));
            }
            if (aggregate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "aggregate", aggregate));
            }
            if (fill != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "fill", fill));
            }
            if (responseFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_format", responseFormat));
            }

            localVarRequestOptions.Operation = "OverviewApi.OverviewV1HistoricalMarketcapAllAssetsDays";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<GENERICRESPONSE>("/overview/v1/historical/marketcap/all/assets/days", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OverviewV1HistoricalMarketcapAllAssetsDays", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groups">When requesting all market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME (optional)</param>
        /// <param name="limit">The number of data points to return (optional, default to 30)</param>
        /// <param name="toTs">Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)</param>
        /// <param name="aggregate">The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)</param>
        /// <param name="fill">Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GENERICRESPONSE</returns>
        public async System.Threading.Tasks.Task<GENERICRESPONSE> OverviewV1HistoricalMarketcapAllAssetsDaysAsync(List<string> groups = default(List<string>), int? limit = default(int?), int? toTs = default(int?), int? aggregate = default(int?), bool? fill = default(bool?), string responseFormat = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GENERICRESPONSE> localVarResponse = await OverviewV1HistoricalMarketcapAllAssetsDaysWithHttpInfoAsync(groups, limit, toTs, aggregate, fill, responseFormat, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groups">When requesting all market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME (optional)</param>
        /// <param name="limit">The number of data points to return (optional, default to 30)</param>
        /// <param name="toTs">Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)</param>
        /// <param name="aggregate">The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)</param>
        /// <param name="fill">Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GENERICRESPONSE)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GENERICRESPONSE>> OverviewV1HistoricalMarketcapAllAssetsDaysWithHttpInfoAsync(List<string> groups = default(List<string>), int? limit = default(int?), int? toTs = default(int?), int? aggregate = default(int?), bool? fill = default(bool?), string responseFormat = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (groups != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "groups", groups));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (toTs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "to_ts", toTs));
            }
            if (aggregate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "aggregate", aggregate));
            }
            if (fill != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "fill", fill));
            }
            if (responseFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_format", responseFormat));
            }

            localVarRequestOptions.Operation = "OverviewApi.OverviewV1HistoricalMarketcapAllAssetsDays";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GENERICRESPONSE>("/overview/v1/historical/marketcap/all/assets/days", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OverviewV1HistoricalMarketcapAllAssetsDays", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groups">When requesting all market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME (optional)</param>
        /// <param name="limit">The number of data points to return (optional, default to 30)</param>
        /// <param name="toTs">Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)</param>
        /// <param name="aggregate">The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)</param>
        /// <param name="fill">Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GENERICRESPONSE</returns>
        public GENERICRESPONSE OverviewV1HistoricalMarketcapAllAssetsHours(List<string> groups = default(List<string>), int? limit = default(int?), int? toTs = default(int?), int? aggregate = default(int?), bool? fill = default(bool?), string responseFormat = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GENERICRESPONSE> localVarResponse = OverviewV1HistoricalMarketcapAllAssetsHoursWithHttpInfo(groups, limit, toTs, aggregate, fill, responseFormat);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groups">When requesting all market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME (optional)</param>
        /// <param name="limit">The number of data points to return (optional, default to 30)</param>
        /// <param name="toTs">Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)</param>
        /// <param name="aggregate">The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)</param>
        /// <param name="fill">Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GENERICRESPONSE</returns>
        public Org.OpenAPITools.Client.ApiResponse<GENERICRESPONSE> OverviewV1HistoricalMarketcapAllAssetsHoursWithHttpInfo(List<string> groups = default(List<string>), int? limit = default(int?), int? toTs = default(int?), int? aggregate = default(int?), bool? fill = default(bool?), string responseFormat = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (groups != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "groups", groups));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (toTs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "to_ts", toTs));
            }
            if (aggregate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "aggregate", aggregate));
            }
            if (fill != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "fill", fill));
            }
            if (responseFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_format", responseFormat));
            }

            localVarRequestOptions.Operation = "OverviewApi.OverviewV1HistoricalMarketcapAllAssetsHours";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<GENERICRESPONSE>("/overview/v1/historical/marketcap/all/assets/hours", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OverviewV1HistoricalMarketcapAllAssetsHours", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groups">When requesting all market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME (optional)</param>
        /// <param name="limit">The number of data points to return (optional, default to 30)</param>
        /// <param name="toTs">Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)</param>
        /// <param name="aggregate">The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)</param>
        /// <param name="fill">Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GENERICRESPONSE</returns>
        public async System.Threading.Tasks.Task<GENERICRESPONSE> OverviewV1HistoricalMarketcapAllAssetsHoursAsync(List<string> groups = default(List<string>), int? limit = default(int?), int? toTs = default(int?), int? aggregate = default(int?), bool? fill = default(bool?), string responseFormat = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GENERICRESPONSE> localVarResponse = await OverviewV1HistoricalMarketcapAllAssetsHoursWithHttpInfoAsync(groups, limit, toTs, aggregate, fill, responseFormat, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groups">When requesting all market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME (optional)</param>
        /// <param name="limit">The number of data points to return (optional, default to 30)</param>
        /// <param name="toTs">Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)</param>
        /// <param name="aggregate">The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)</param>
        /// <param name="fill">Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GENERICRESPONSE)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GENERICRESPONSE>> OverviewV1HistoricalMarketcapAllAssetsHoursWithHttpInfoAsync(List<string> groups = default(List<string>), int? limit = default(int?), int? toTs = default(int?), int? aggregate = default(int?), bool? fill = default(bool?), string responseFormat = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (groups != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "groups", groups));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (toTs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "to_ts", toTs));
            }
            if (aggregate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "aggregate", aggregate));
            }
            if (fill != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "fill", fill));
            }
            if (responseFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_format", responseFormat));
            }

            localVarRequestOptions.Operation = "OverviewApi.OverviewV1HistoricalMarketcapAllAssetsHours";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GENERICRESPONSE>("/overview/v1/historical/marketcap/all/assets/hours", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OverviewV1HistoricalMarketcapAllAssetsHours", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groups">When requesting ftw universe market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME (optional)</param>
        /// <param name="limit">The number of data points to return (optional, default to 30)</param>
        /// <param name="toTs">Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)</param>
        /// <param name="aggregate">The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)</param>
        /// <param name="fill">Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GENERICRESPONSE</returns>
        public GENERICRESPONSE OverviewV1HistoricalMarketcapFtwAssetsDays(List<string> groups = default(List<string>), int? limit = default(int?), int? toTs = default(int?), int? aggregate = default(int?), bool? fill = default(bool?), string responseFormat = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GENERICRESPONSE> localVarResponse = OverviewV1HistoricalMarketcapFtwAssetsDaysWithHttpInfo(groups, limit, toTs, aggregate, fill, responseFormat);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groups">When requesting ftw universe market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME (optional)</param>
        /// <param name="limit">The number of data points to return (optional, default to 30)</param>
        /// <param name="toTs">Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)</param>
        /// <param name="aggregate">The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)</param>
        /// <param name="fill">Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GENERICRESPONSE</returns>
        public Org.OpenAPITools.Client.ApiResponse<GENERICRESPONSE> OverviewV1HistoricalMarketcapFtwAssetsDaysWithHttpInfo(List<string> groups = default(List<string>), int? limit = default(int?), int? toTs = default(int?), int? aggregate = default(int?), bool? fill = default(bool?), string responseFormat = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (groups != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "groups", groups));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (toTs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "to_ts", toTs));
            }
            if (aggregate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "aggregate", aggregate));
            }
            if (fill != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "fill", fill));
            }
            if (responseFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_format", responseFormat));
            }

            localVarRequestOptions.Operation = "OverviewApi.OverviewV1HistoricalMarketcapFtwAssetsDays";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<GENERICRESPONSE>("/overview/v1/historical/marketcap/ftw/assets/days", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OverviewV1HistoricalMarketcapFtwAssetsDays", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groups">When requesting ftw universe market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME (optional)</param>
        /// <param name="limit">The number of data points to return (optional, default to 30)</param>
        /// <param name="toTs">Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)</param>
        /// <param name="aggregate">The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)</param>
        /// <param name="fill">Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GENERICRESPONSE</returns>
        public async System.Threading.Tasks.Task<GENERICRESPONSE> OverviewV1HistoricalMarketcapFtwAssetsDaysAsync(List<string> groups = default(List<string>), int? limit = default(int?), int? toTs = default(int?), int? aggregate = default(int?), bool? fill = default(bool?), string responseFormat = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GENERICRESPONSE> localVarResponse = await OverviewV1HistoricalMarketcapFtwAssetsDaysWithHttpInfoAsync(groups, limit, toTs, aggregate, fill, responseFormat, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groups">When requesting ftw universe market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME (optional)</param>
        /// <param name="limit">The number of data points to return (optional, default to 30)</param>
        /// <param name="toTs">Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)</param>
        /// <param name="aggregate">The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)</param>
        /// <param name="fill">Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GENERICRESPONSE)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GENERICRESPONSE>> OverviewV1HistoricalMarketcapFtwAssetsDaysWithHttpInfoAsync(List<string> groups = default(List<string>), int? limit = default(int?), int? toTs = default(int?), int? aggregate = default(int?), bool? fill = default(bool?), string responseFormat = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (groups != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "groups", groups));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (toTs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "to_ts", toTs));
            }
            if (aggregate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "aggregate", aggregate));
            }
            if (fill != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "fill", fill));
            }
            if (responseFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_format", responseFormat));
            }

            localVarRequestOptions.Operation = "OverviewApi.OverviewV1HistoricalMarketcapFtwAssetsDays";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GENERICRESPONSE>("/overview/v1/historical/marketcap/ftw/assets/days", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OverviewV1HistoricalMarketcapFtwAssetsDays", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groups">When requesting ftw universe market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME (optional)</param>
        /// <param name="limit">The number of data points to return (optional, default to 30)</param>
        /// <param name="toTs">Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)</param>
        /// <param name="aggregate">The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)</param>
        /// <param name="fill">Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GENERICRESPONSE</returns>
        public GENERICRESPONSE OverviewV1HistoricalMarketcapFtwAssetsHours(List<string> groups = default(List<string>), int? limit = default(int?), int? toTs = default(int?), int? aggregate = default(int?), bool? fill = default(bool?), string responseFormat = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GENERICRESPONSE> localVarResponse = OverviewV1HistoricalMarketcapFtwAssetsHoursWithHttpInfo(groups, limit, toTs, aggregate, fill, responseFormat);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groups">When requesting ftw universe market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME (optional)</param>
        /// <param name="limit">The number of data points to return (optional, default to 30)</param>
        /// <param name="toTs">Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)</param>
        /// <param name="aggregate">The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)</param>
        /// <param name="fill">Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GENERICRESPONSE</returns>
        public Org.OpenAPITools.Client.ApiResponse<GENERICRESPONSE> OverviewV1HistoricalMarketcapFtwAssetsHoursWithHttpInfo(List<string> groups = default(List<string>), int? limit = default(int?), int? toTs = default(int?), int? aggregate = default(int?), bool? fill = default(bool?), string responseFormat = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (groups != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "groups", groups));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (toTs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "to_ts", toTs));
            }
            if (aggregate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "aggregate", aggregate));
            }
            if (fill != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "fill", fill));
            }
            if (responseFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_format", responseFormat));
            }

            localVarRequestOptions.Operation = "OverviewApi.OverviewV1HistoricalMarketcapFtwAssetsHours";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<GENERICRESPONSE>("/overview/v1/historical/marketcap/ftw/assets/hours", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OverviewV1HistoricalMarketcapFtwAssetsHours", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groups">When requesting ftw universe market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME (optional)</param>
        /// <param name="limit">The number of data points to return (optional, default to 30)</param>
        /// <param name="toTs">Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)</param>
        /// <param name="aggregate">The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)</param>
        /// <param name="fill">Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GENERICRESPONSE</returns>
        public async System.Threading.Tasks.Task<GENERICRESPONSE> OverviewV1HistoricalMarketcapFtwAssetsHoursAsync(List<string> groups = default(List<string>), int? limit = default(int?), int? toTs = default(int?), int? aggregate = default(int?), bool? fill = default(bool?), string responseFormat = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GENERICRESPONSE> localVarResponse = await OverviewV1HistoricalMarketcapFtwAssetsHoursWithHttpInfoAsync(groups, limit, toTs, aggregate, fill, responseFormat, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groups">When requesting ftw universe market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME (optional)</param>
        /// <param name="limit">The number of data points to return (optional, default to 30)</param>
        /// <param name="toTs">Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)</param>
        /// <param name="aggregate">The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)</param>
        /// <param name="fill">Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GENERICRESPONSE)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GENERICRESPONSE>> OverviewV1HistoricalMarketcapFtwAssetsHoursWithHttpInfoAsync(List<string> groups = default(List<string>), int? limit = default(int?), int? toTs = default(int?), int? aggregate = default(int?), bool? fill = default(bool?), string responseFormat = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (groups != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "groups", groups));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (toTs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "to_ts", toTs));
            }
            if (aggregate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "aggregate", aggregate));
            }
            if (fill != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "fill", fill));
            }
            if (responseFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_format", responseFormat));
            }

            localVarRequestOptions.Operation = "OverviewApi.OverviewV1HistoricalMarketcapFtwAssetsHours";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GENERICRESPONSE>("/overview/v1/historical/marketcap/ftw/assets/hours", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OverviewV1HistoricalMarketcapFtwAssetsHours", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groups">When requesting all market cap tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,MOVING_24_HOUR (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GENERICRESPONSE</returns>
        public GENERICRESPONSE OverviewV1LatestMarketcapAllTick(List<string> groups = default(List<string>), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GENERICRESPONSE> localVarResponse = OverviewV1LatestMarketcapAllTickWithHttpInfo(groups);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groups">When requesting all market cap tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,MOVING_24_HOUR (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GENERICRESPONSE</returns>
        public Org.OpenAPITools.Client.ApiResponse<GENERICRESPONSE> OverviewV1LatestMarketcapAllTickWithHttpInfo(List<string> groups = default(List<string>), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (groups != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "groups", groups));
            }

            localVarRequestOptions.Operation = "OverviewApi.OverviewV1LatestMarketcapAllTick";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<GENERICRESPONSE>("/overview/v1/latest/marketcap/all/tick", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OverviewV1LatestMarketcapAllTick", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groups">When requesting all market cap tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,MOVING_24_HOUR (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GENERICRESPONSE</returns>
        public async System.Threading.Tasks.Task<GENERICRESPONSE> OverviewV1LatestMarketcapAllTickAsync(List<string> groups = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GENERICRESPONSE> localVarResponse = await OverviewV1LatestMarketcapAllTickWithHttpInfoAsync(groups, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groups">When requesting all market cap tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,MOVING_24_HOUR (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GENERICRESPONSE)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GENERICRESPONSE>> OverviewV1LatestMarketcapAllTickWithHttpInfoAsync(List<string> groups = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (groups != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "groups", groups));
            }

            localVarRequestOptions.Operation = "OverviewApi.OverviewV1LatestMarketcapAllTick";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GENERICRESPONSE>("/overview/v1/latest/marketcap/all/tick", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OverviewV1LatestMarketcapAllTick", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groups">When requesting ftw universe market cap tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,MOVING_24_HOUR (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GENERICRESPONSE</returns>
        public GENERICRESPONSE OverviewV1LatestMarketcapFtwTick(List<string> groups = default(List<string>), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GENERICRESPONSE> localVarResponse = OverviewV1LatestMarketcapFtwTickWithHttpInfo(groups);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groups">When requesting ftw universe market cap tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,MOVING_24_HOUR (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GENERICRESPONSE</returns>
        public Org.OpenAPITools.Client.ApiResponse<GENERICRESPONSE> OverviewV1LatestMarketcapFtwTickWithHttpInfo(List<string> groups = default(List<string>), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (groups != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "groups", groups));
            }

            localVarRequestOptions.Operation = "OverviewApi.OverviewV1LatestMarketcapFtwTick";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<GENERICRESPONSE>("/overview/v1/latest/marketcap/ftw/tick", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OverviewV1LatestMarketcapFtwTick", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groups">When requesting ftw universe market cap tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,MOVING_24_HOUR (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GENERICRESPONSE</returns>
        public async System.Threading.Tasks.Task<GENERICRESPONSE> OverviewV1LatestMarketcapFtwTickAsync(List<string> groups = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GENERICRESPONSE> localVarResponse = await OverviewV1LatestMarketcapFtwTickWithHttpInfoAsync(groups, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groups">When requesting ftw universe market cap tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,MOVING_24_HOUR (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GENERICRESPONSE)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GENERICRESPONSE>> OverviewV1LatestMarketcapFtwTickWithHttpInfoAsync(List<string> groups = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (groups != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "groups", groups));
            }

            localVarRequestOptions.Operation = "OverviewApi.OverviewV1LatestMarketcapFtwTick";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GENERICRESPONSE>("/overview/v1/latest/marketcap/ftw/tick", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OverviewV1LatestMarketcapFtwTick", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
