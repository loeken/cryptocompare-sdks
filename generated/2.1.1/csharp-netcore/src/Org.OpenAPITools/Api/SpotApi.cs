/*
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 *
 * CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: data@cryptocompare.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISpotApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from</param>
        /// <param name="instrument">The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.</param>
        /// <param name="groups">When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME (optional)</param>
        /// <param name="limit">The number of data points to return (optional, default to 30)</param>
        /// <param name="toTs">Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)</param>
        /// <param name="aggregate">The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)</param>
        /// <param name="fill">Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)</param>
        /// <param name="mappingPriority">The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SPOTINSTRUMENTHISTODATARESPONSE</returns>
        SPOTINSTRUMENTHISTODATARESPONSE SpotV1HistoricalDays(string market, string instrument, List<string> groups = default(List<string>), int? limit = default(int?), int? toTs = default(int?), int? aggregate = default(int?), bool? fill = default(bool?), string mappingPriority = default(string), string responseFormat = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from</param>
        /// <param name="instrument">The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.</param>
        /// <param name="groups">When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME (optional)</param>
        /// <param name="limit">The number of data points to return (optional, default to 30)</param>
        /// <param name="toTs">Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)</param>
        /// <param name="aggregate">The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)</param>
        /// <param name="fill">Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)</param>
        /// <param name="mappingPriority">The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SPOTINSTRUMENTHISTODATARESPONSE</returns>
        ApiResponse<SPOTINSTRUMENTHISTODATARESPONSE> SpotV1HistoricalDaysWithHttpInfo(string market, string instrument, List<string> groups = default(List<string>), int? limit = default(int?), int? toTs = default(int?), int? aggregate = default(int?), bool? fill = default(bool?), string mappingPriority = default(string), string responseFormat = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from</param>
        /// <param name="instrument">The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.</param>
        /// <param name="groups">When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME (optional)</param>
        /// <param name="limit">The number of data points to return (optional, default to 30)</param>
        /// <param name="toTs">Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)</param>
        /// <param name="aggregate">The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)</param>
        /// <param name="fill">Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)</param>
        /// <param name="mappingPriority">The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SPOTINSTRUMENTHISTODATARESPONSE</returns>
        SPOTINSTRUMENTHISTODATARESPONSE SpotV1HistoricalHours(string market, string instrument, List<string> groups = default(List<string>), int? limit = default(int?), int? toTs = default(int?), int? aggregate = default(int?), bool? fill = default(bool?), string mappingPriority = default(string), string responseFormat = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from</param>
        /// <param name="instrument">The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.</param>
        /// <param name="groups">When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME (optional)</param>
        /// <param name="limit">The number of data points to return (optional, default to 30)</param>
        /// <param name="toTs">Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)</param>
        /// <param name="aggregate">The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)</param>
        /// <param name="fill">Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)</param>
        /// <param name="mappingPriority">The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SPOTINSTRUMENTHISTODATARESPONSE</returns>
        ApiResponse<SPOTINSTRUMENTHISTODATARESPONSE> SpotV1HistoricalHoursWithHttpInfo(string market, string instrument, List<string> groups = default(List<string>), int? limit = default(int?), int? toTs = default(int?), int? aggregate = default(int?), bool? fill = default(bool?), string mappingPriority = default(string), string responseFormat = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from</param>
        /// <param name="instrument">The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.</param>
        /// <param name="groups">When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME (optional)</param>
        /// <param name="limit">The number of data points to return (optional, default to 30)</param>
        /// <param name="toTs">Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)</param>
        /// <param name="aggregate">The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)</param>
        /// <param name="fill">Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)</param>
        /// <param name="mappingPriority">The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SPOTINSTRUMENTHISTODATARESPONSE</returns>
        SPOTINSTRUMENTHISTODATARESPONSE SpotV1HistoricalMinutes(string market, string instrument, List<string> groups = default(List<string>), int? limit = default(int?), int? toTs = default(int?), int? aggregate = default(int?), bool? fill = default(bool?), string mappingPriority = default(string), string responseFormat = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from</param>
        /// <param name="instrument">The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.</param>
        /// <param name="groups">When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME (optional)</param>
        /// <param name="limit">The number of data points to return (optional, default to 30)</param>
        /// <param name="toTs">Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)</param>
        /// <param name="aggregate">The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)</param>
        /// <param name="fill">Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)</param>
        /// <param name="mappingPriority">The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SPOTINSTRUMENTHISTODATARESPONSE</returns>
        ApiResponse<SPOTINSTRUMENTHISTODATARESPONSE> SpotV1HistoricalMinutesWithHttpInfo(string market, string instrument, List<string> groups = default(List<string>), int? limit = default(int?), int? toTs = default(int?), int? aggregate = default(int?), bool? fill = default(bool?), string mappingPriority = default(string), string responseFormat = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from</param>
        /// <param name="instrument">The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.</param>
        /// <param name="minuteTs">Unix timestamp in seconds for the minute of the orderbook snapshot you are interested in. You can pass any timestamp within a minute but we will round it down the the full minute timestmap and return the orderbook l2 snapshot at that minute.</param>
        /// <param name="depth">The number of top bids and asks to return. (optional, default to 50)</param>
        /// <param name="mappingPriority">The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GENERICRESPONSE</returns>
        GENERICRESPONSE SpotV1HistoricalOrderbookL2SnapshotMinute(string market, string instrument, int minuteTs, int? depth = default(int?), string mappingPriority = default(string), string responseFormat = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from</param>
        /// <param name="instrument">The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.</param>
        /// <param name="minuteTs">Unix timestamp in seconds for the minute of the orderbook snapshot you are interested in. You can pass any timestamp within a minute but we will round it down the the full minute timestmap and return the orderbook l2 snapshot at that minute.</param>
        /// <param name="depth">The number of top bids and asks to return. (optional, default to 50)</param>
        /// <param name="mappingPriority">The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GENERICRESPONSE</returns>
        ApiResponse<GENERICRESPONSE> SpotV1HistoricalOrderbookL2SnapshotMinuteWithHttpInfo(string market, string instrument, int minuteTs, int? depth = default(int?), string mappingPriority = default(string), string responseFormat = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from</param>
        /// <param name="instrument">The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.</param>
        /// <param name="afterTs">Unix timestamp in seconds of the earliest trade in the response. (optional)</param>
        /// <param name="lastCcseq">The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request. (optional, default to 0)</param>
        /// <param name="limit">The maximum number of trades to return (optional, default to 100)</param>
        /// <param name="mappingPriority">The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="return404OnEmptyResponse">If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SPOTINSTRUMENTTRADERESPONSE</returns>
        SPOTINSTRUMENTTRADERESPONSE SpotV1HistoricalTrades(string market, string instrument, int? afterTs = default(int?), int? lastCcseq = default(int?), int? limit = default(int?), string mappingPriority = default(string), string responseFormat = default(string), bool? return404OnEmptyResponse = default(bool?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from</param>
        /// <param name="instrument">The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.</param>
        /// <param name="afterTs">Unix timestamp in seconds of the earliest trade in the response. (optional)</param>
        /// <param name="lastCcseq">The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request. (optional, default to 0)</param>
        /// <param name="limit">The maximum number of trades to return (optional, default to 100)</param>
        /// <param name="mappingPriority">The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="return404OnEmptyResponse">If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SPOTINSTRUMENTTRADERESPONSE</returns>
        ApiResponse<SPOTINSTRUMENTTRADERESPONSE> SpotV1HistoricalTradesWithHttpInfo(string market, string instrument, int? afterTs = default(int?), int? lastCcseq = default(int?), int? limit = default(int?), string mappingPriority = default(string), string responseFormat = default(string), bool? return404OnEmptyResponse = default(bool?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from</param>
        /// <param name="instrument">The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.</param>
        /// <param name="hourTs">Unix timestamp in seconds for the hour containing the trades you are interested in. You can pass any timestamp within an hour but we will round it down the the full hour timestmap and return all trades in that hour. (optional)</param>
        /// <param name="mappingPriority">The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="return404OnEmptyResponse">If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SPOTINSTRUMENTTRADERESPONSE</returns>
        SPOTINSTRUMENTTRADERESPONSE SpotV1HistoricalTradesHour(string market, string instrument, int? hourTs = default(int?), string mappingPriority = default(string), string responseFormat = default(string), bool? return404OnEmptyResponse = default(bool?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from</param>
        /// <param name="instrument">The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.</param>
        /// <param name="hourTs">Unix timestamp in seconds for the hour containing the trades you are interested in. You can pass any timestamp within an hour but we will round it down the the full hour timestmap and return all trades in that hour. (optional)</param>
        /// <param name="mappingPriority">The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="return404OnEmptyResponse">If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SPOTINSTRUMENTTRADERESPONSE</returns>
        ApiResponse<SPOTINSTRUMENTTRADERESPONSE> SpotV1HistoricalTradesHourWithHttpInfo(string market, string instrument, int? hourTs = default(int?), string mappingPriority = default(string), string responseFormat = default(string), bool? return404OnEmptyResponse = default(bool?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from</param>
        /// <param name="instruments">A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.</param>
        /// <param name="groups">When requesting metadata entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: STATUS,INTERNAL,GENERAL,MIGRATION,SOURCE (optional)</param>
        /// <param name="mappingPriority">The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SPOTINSTRUMENTMETADATARESPONSE</returns>
        SPOTINSTRUMENTMETADATARESPONSE SpotV1LatestInstrumentMetadata(string market, List<string> instruments, List<string> groups = default(List<string>), string mappingPriority = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from</param>
        /// <param name="instruments">A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.</param>
        /// <param name="groups">When requesting metadata entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: STATUS,INTERNAL,GENERAL,MIGRATION,SOURCE (optional)</param>
        /// <param name="mappingPriority">The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SPOTINSTRUMENTMETADATARESPONSE</returns>
        ApiResponse<SPOTINSTRUMENTMETADATARESPONSE> SpotV1LatestInstrumentMetadataWithHttpInfo(string market, List<string> instruments, List<string> groups = default(List<string>), string mappingPriority = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from</param>
        /// <param name="instruments">A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.</param>
        /// <param name="groups">When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,LAST_UPDATE,LAST_PROCESSED,TOP_OF_BOOK,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME (optional)</param>
        /// <param name="mappingPriority">The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SPOTINSTRUMENTMARKETDATARESPONSE</returns>
        SPOTINSTRUMENTMARKETDATARESPONSE SpotV1LatestTick(string market, List<string> instruments, List<string> groups = default(List<string>), string mappingPriority = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from</param>
        /// <param name="instruments">A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.</param>
        /// <param name="groups">When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,LAST_UPDATE,LAST_PROCESSED,TOP_OF_BOOK,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME (optional)</param>
        /// <param name="mappingPriority">The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SPOTINSTRUMENTMARKETDATARESPONSE</returns>
        ApiResponse<SPOTINSTRUMENTMARKETDATARESPONSE> SpotV1LatestTickWithHttpInfo(string market, List<string> instruments, List<string> groups = default(List<string>), string mappingPriority = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from (optional, default to &quot;&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GENERICRESPONSE</returns>
        GENERICRESPONSE SpotV1Markets(string market = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from (optional, default to &quot;&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GENERICRESPONSE</returns>
        ApiResponse<GENERICRESPONSE> SpotV1MarketsWithHttpInfo(string market = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from (optional, default to &quot;&quot;)</param>
        /// <param name="instrument">The mapped instrument to retrieve on a specific market. (optional, default to &quot;&quot;)</param>
        /// <param name="instrumentStatus">The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GENERICRESPONSE</returns>
        GENERICRESPONSE SpotV1MarketsInstruments(string market = default(string), string instrument = default(string), List<string> instrumentStatus = default(List<string>), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from (optional, default to &quot;&quot;)</param>
        /// <param name="instrument">The mapped instrument to retrieve on a specific market. (optional, default to &quot;&quot;)</param>
        /// <param name="instrumentStatus">The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GENERICRESPONSE</returns>
        ApiResponse<GENERICRESPONSE> SpotV1MarketsInstrumentsWithHttpInfo(string market = default(string), string instrument = default(string), List<string> instrumentStatus = default(List<string>), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from (optional, default to &quot;&quot;)</param>
        /// <param name="instrument">The unmapped instrument to retrieve on a specific market. (optional, default to &quot;&quot;)</param>
        /// <param name="instrumentStatus">The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GENERICRESPONSE</returns>
        GENERICRESPONSE SpotV1MarketsInstrumentsUnmapped(string market = default(string), string instrument = default(string), List<string> instrumentStatus = default(List<string>), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from (optional, default to &quot;&quot;)</param>
        /// <param name="instrument">The unmapped instrument to retrieve on a specific market. (optional, default to &quot;&quot;)</param>
        /// <param name="instrumentStatus">The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GENERICRESPONSE</returns>
        ApiResponse<GENERICRESPONSE> SpotV1MarketsInstrumentsUnmappedWithHttpInfo(string market = default(string), string instrument = default(string), List<string> instrumentStatus = default(List<string>), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISpotApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from</param>
        /// <param name="instrument">The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.</param>
        /// <param name="groups">When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME (optional)</param>
        /// <param name="limit">The number of data points to return (optional, default to 30)</param>
        /// <param name="toTs">Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)</param>
        /// <param name="aggregate">The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)</param>
        /// <param name="fill">Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)</param>
        /// <param name="mappingPriority">The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SPOTINSTRUMENTHISTODATARESPONSE</returns>
        System.Threading.Tasks.Task<SPOTINSTRUMENTHISTODATARESPONSE> SpotV1HistoricalDaysAsync(string market, string instrument, List<string> groups = default(List<string>), int? limit = default(int?), int? toTs = default(int?), int? aggregate = default(int?), bool? fill = default(bool?), string mappingPriority = default(string), string responseFormat = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from</param>
        /// <param name="instrument">The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.</param>
        /// <param name="groups">When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME (optional)</param>
        /// <param name="limit">The number of data points to return (optional, default to 30)</param>
        /// <param name="toTs">Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)</param>
        /// <param name="aggregate">The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)</param>
        /// <param name="fill">Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)</param>
        /// <param name="mappingPriority">The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SPOTINSTRUMENTHISTODATARESPONSE)</returns>
        System.Threading.Tasks.Task<ApiResponse<SPOTINSTRUMENTHISTODATARESPONSE>> SpotV1HistoricalDaysWithHttpInfoAsync(string market, string instrument, List<string> groups = default(List<string>), int? limit = default(int?), int? toTs = default(int?), int? aggregate = default(int?), bool? fill = default(bool?), string mappingPriority = default(string), string responseFormat = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from</param>
        /// <param name="instrument">The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.</param>
        /// <param name="groups">When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME (optional)</param>
        /// <param name="limit">The number of data points to return (optional, default to 30)</param>
        /// <param name="toTs">Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)</param>
        /// <param name="aggregate">The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)</param>
        /// <param name="fill">Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)</param>
        /// <param name="mappingPriority">The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SPOTINSTRUMENTHISTODATARESPONSE</returns>
        System.Threading.Tasks.Task<SPOTINSTRUMENTHISTODATARESPONSE> SpotV1HistoricalHoursAsync(string market, string instrument, List<string> groups = default(List<string>), int? limit = default(int?), int? toTs = default(int?), int? aggregate = default(int?), bool? fill = default(bool?), string mappingPriority = default(string), string responseFormat = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from</param>
        /// <param name="instrument">The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.</param>
        /// <param name="groups">When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME (optional)</param>
        /// <param name="limit">The number of data points to return (optional, default to 30)</param>
        /// <param name="toTs">Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)</param>
        /// <param name="aggregate">The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)</param>
        /// <param name="fill">Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)</param>
        /// <param name="mappingPriority">The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SPOTINSTRUMENTHISTODATARESPONSE)</returns>
        System.Threading.Tasks.Task<ApiResponse<SPOTINSTRUMENTHISTODATARESPONSE>> SpotV1HistoricalHoursWithHttpInfoAsync(string market, string instrument, List<string> groups = default(List<string>), int? limit = default(int?), int? toTs = default(int?), int? aggregate = default(int?), bool? fill = default(bool?), string mappingPriority = default(string), string responseFormat = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from</param>
        /// <param name="instrument">The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.</param>
        /// <param name="groups">When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME (optional)</param>
        /// <param name="limit">The number of data points to return (optional, default to 30)</param>
        /// <param name="toTs">Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)</param>
        /// <param name="aggregate">The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)</param>
        /// <param name="fill">Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)</param>
        /// <param name="mappingPriority">The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SPOTINSTRUMENTHISTODATARESPONSE</returns>
        System.Threading.Tasks.Task<SPOTINSTRUMENTHISTODATARESPONSE> SpotV1HistoricalMinutesAsync(string market, string instrument, List<string> groups = default(List<string>), int? limit = default(int?), int? toTs = default(int?), int? aggregate = default(int?), bool? fill = default(bool?), string mappingPriority = default(string), string responseFormat = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from</param>
        /// <param name="instrument">The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.</param>
        /// <param name="groups">When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME (optional)</param>
        /// <param name="limit">The number of data points to return (optional, default to 30)</param>
        /// <param name="toTs">Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)</param>
        /// <param name="aggregate">The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)</param>
        /// <param name="fill">Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)</param>
        /// <param name="mappingPriority">The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SPOTINSTRUMENTHISTODATARESPONSE)</returns>
        System.Threading.Tasks.Task<ApiResponse<SPOTINSTRUMENTHISTODATARESPONSE>> SpotV1HistoricalMinutesWithHttpInfoAsync(string market, string instrument, List<string> groups = default(List<string>), int? limit = default(int?), int? toTs = default(int?), int? aggregate = default(int?), bool? fill = default(bool?), string mappingPriority = default(string), string responseFormat = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from</param>
        /// <param name="instrument">The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.</param>
        /// <param name="minuteTs">Unix timestamp in seconds for the minute of the orderbook snapshot you are interested in. You can pass any timestamp within a minute but we will round it down the the full minute timestmap and return the orderbook l2 snapshot at that minute.</param>
        /// <param name="depth">The number of top bids and asks to return. (optional, default to 50)</param>
        /// <param name="mappingPriority">The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GENERICRESPONSE</returns>
        System.Threading.Tasks.Task<GENERICRESPONSE> SpotV1HistoricalOrderbookL2SnapshotMinuteAsync(string market, string instrument, int minuteTs, int? depth = default(int?), string mappingPriority = default(string), string responseFormat = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from</param>
        /// <param name="instrument">The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.</param>
        /// <param name="minuteTs">Unix timestamp in seconds for the minute of the orderbook snapshot you are interested in. You can pass any timestamp within a minute but we will round it down the the full minute timestmap and return the orderbook l2 snapshot at that minute.</param>
        /// <param name="depth">The number of top bids and asks to return. (optional, default to 50)</param>
        /// <param name="mappingPriority">The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GENERICRESPONSE)</returns>
        System.Threading.Tasks.Task<ApiResponse<GENERICRESPONSE>> SpotV1HistoricalOrderbookL2SnapshotMinuteWithHttpInfoAsync(string market, string instrument, int minuteTs, int? depth = default(int?), string mappingPriority = default(string), string responseFormat = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from</param>
        /// <param name="instrument">The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.</param>
        /// <param name="afterTs">Unix timestamp in seconds of the earliest trade in the response. (optional)</param>
        /// <param name="lastCcseq">The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request. (optional, default to 0)</param>
        /// <param name="limit">The maximum number of trades to return (optional, default to 100)</param>
        /// <param name="mappingPriority">The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="return404OnEmptyResponse">If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SPOTINSTRUMENTTRADERESPONSE</returns>
        System.Threading.Tasks.Task<SPOTINSTRUMENTTRADERESPONSE> SpotV1HistoricalTradesAsync(string market, string instrument, int? afterTs = default(int?), int? lastCcseq = default(int?), int? limit = default(int?), string mappingPriority = default(string), string responseFormat = default(string), bool? return404OnEmptyResponse = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from</param>
        /// <param name="instrument">The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.</param>
        /// <param name="afterTs">Unix timestamp in seconds of the earliest trade in the response. (optional)</param>
        /// <param name="lastCcseq">The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request. (optional, default to 0)</param>
        /// <param name="limit">The maximum number of trades to return (optional, default to 100)</param>
        /// <param name="mappingPriority">The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="return404OnEmptyResponse">If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SPOTINSTRUMENTTRADERESPONSE)</returns>
        System.Threading.Tasks.Task<ApiResponse<SPOTINSTRUMENTTRADERESPONSE>> SpotV1HistoricalTradesWithHttpInfoAsync(string market, string instrument, int? afterTs = default(int?), int? lastCcseq = default(int?), int? limit = default(int?), string mappingPriority = default(string), string responseFormat = default(string), bool? return404OnEmptyResponse = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from</param>
        /// <param name="instrument">The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.</param>
        /// <param name="hourTs">Unix timestamp in seconds for the hour containing the trades you are interested in. You can pass any timestamp within an hour but we will round it down the the full hour timestmap and return all trades in that hour. (optional)</param>
        /// <param name="mappingPriority">The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="return404OnEmptyResponse">If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SPOTINSTRUMENTTRADERESPONSE</returns>
        System.Threading.Tasks.Task<SPOTINSTRUMENTTRADERESPONSE> SpotV1HistoricalTradesHourAsync(string market, string instrument, int? hourTs = default(int?), string mappingPriority = default(string), string responseFormat = default(string), bool? return404OnEmptyResponse = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from</param>
        /// <param name="instrument">The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.</param>
        /// <param name="hourTs">Unix timestamp in seconds for the hour containing the trades you are interested in. You can pass any timestamp within an hour but we will round it down the the full hour timestmap and return all trades in that hour. (optional)</param>
        /// <param name="mappingPriority">The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="return404OnEmptyResponse">If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SPOTINSTRUMENTTRADERESPONSE)</returns>
        System.Threading.Tasks.Task<ApiResponse<SPOTINSTRUMENTTRADERESPONSE>> SpotV1HistoricalTradesHourWithHttpInfoAsync(string market, string instrument, int? hourTs = default(int?), string mappingPriority = default(string), string responseFormat = default(string), bool? return404OnEmptyResponse = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from</param>
        /// <param name="instruments">A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.</param>
        /// <param name="groups">When requesting metadata entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: STATUS,INTERNAL,GENERAL,MIGRATION,SOURCE (optional)</param>
        /// <param name="mappingPriority">The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SPOTINSTRUMENTMETADATARESPONSE</returns>
        System.Threading.Tasks.Task<SPOTINSTRUMENTMETADATARESPONSE> SpotV1LatestInstrumentMetadataAsync(string market, List<string> instruments, List<string> groups = default(List<string>), string mappingPriority = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from</param>
        /// <param name="instruments">A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.</param>
        /// <param name="groups">When requesting metadata entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: STATUS,INTERNAL,GENERAL,MIGRATION,SOURCE (optional)</param>
        /// <param name="mappingPriority">The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SPOTINSTRUMENTMETADATARESPONSE)</returns>
        System.Threading.Tasks.Task<ApiResponse<SPOTINSTRUMENTMETADATARESPONSE>> SpotV1LatestInstrumentMetadataWithHttpInfoAsync(string market, List<string> instruments, List<string> groups = default(List<string>), string mappingPriority = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from</param>
        /// <param name="instruments">A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.</param>
        /// <param name="groups">When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,LAST_UPDATE,LAST_PROCESSED,TOP_OF_BOOK,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME (optional)</param>
        /// <param name="mappingPriority">The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SPOTINSTRUMENTMARKETDATARESPONSE</returns>
        System.Threading.Tasks.Task<SPOTINSTRUMENTMARKETDATARESPONSE> SpotV1LatestTickAsync(string market, List<string> instruments, List<string> groups = default(List<string>), string mappingPriority = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from</param>
        /// <param name="instruments">A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.</param>
        /// <param name="groups">When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,LAST_UPDATE,LAST_PROCESSED,TOP_OF_BOOK,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME (optional)</param>
        /// <param name="mappingPriority">The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SPOTINSTRUMENTMARKETDATARESPONSE)</returns>
        System.Threading.Tasks.Task<ApiResponse<SPOTINSTRUMENTMARKETDATARESPONSE>> SpotV1LatestTickWithHttpInfoAsync(string market, List<string> instruments, List<string> groups = default(List<string>), string mappingPriority = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from (optional, default to &quot;&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GENERICRESPONSE</returns>
        System.Threading.Tasks.Task<GENERICRESPONSE> SpotV1MarketsAsync(string market = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from (optional, default to &quot;&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GENERICRESPONSE)</returns>
        System.Threading.Tasks.Task<ApiResponse<GENERICRESPONSE>> SpotV1MarketsWithHttpInfoAsync(string market = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from (optional, default to &quot;&quot;)</param>
        /// <param name="instrument">The mapped instrument to retrieve on a specific market. (optional, default to &quot;&quot;)</param>
        /// <param name="instrumentStatus">The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GENERICRESPONSE</returns>
        System.Threading.Tasks.Task<GENERICRESPONSE> SpotV1MarketsInstrumentsAsync(string market = default(string), string instrument = default(string), List<string> instrumentStatus = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from (optional, default to &quot;&quot;)</param>
        /// <param name="instrument">The mapped instrument to retrieve on a specific market. (optional, default to &quot;&quot;)</param>
        /// <param name="instrumentStatus">The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GENERICRESPONSE)</returns>
        System.Threading.Tasks.Task<ApiResponse<GENERICRESPONSE>> SpotV1MarketsInstrumentsWithHttpInfoAsync(string market = default(string), string instrument = default(string), List<string> instrumentStatus = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from (optional, default to &quot;&quot;)</param>
        /// <param name="instrument">The unmapped instrument to retrieve on a specific market. (optional, default to &quot;&quot;)</param>
        /// <param name="instrumentStatus">The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GENERICRESPONSE</returns>
        System.Threading.Tasks.Task<GENERICRESPONSE> SpotV1MarketsInstrumentsUnmappedAsync(string market = default(string), string instrument = default(string), List<string> instrumentStatus = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from (optional, default to &quot;&quot;)</param>
        /// <param name="instrument">The unmapped instrument to retrieve on a specific market. (optional, default to &quot;&quot;)</param>
        /// <param name="instrumentStatus">The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GENERICRESPONSE)</returns>
        System.Threading.Tasks.Task<ApiResponse<GENERICRESPONSE>> SpotV1MarketsInstrumentsUnmappedWithHttpInfoAsync(string market = default(string), string instrument = default(string), List<string> instrumentStatus = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISpotApi : ISpotApiSync, ISpotApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SpotApi : ISpotApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SpotApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SpotApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SpotApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SpotApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SpotApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SpotApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SpotApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SpotApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from</param>
        /// <param name="instrument">The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.</param>
        /// <param name="groups">When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME (optional)</param>
        /// <param name="limit">The number of data points to return (optional, default to 30)</param>
        /// <param name="toTs">Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)</param>
        /// <param name="aggregate">The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)</param>
        /// <param name="fill">Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)</param>
        /// <param name="mappingPriority">The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SPOTINSTRUMENTHISTODATARESPONSE</returns>
        public SPOTINSTRUMENTHISTODATARESPONSE SpotV1HistoricalDays(string market, string instrument, List<string> groups = default(List<string>), int? limit = default(int?), int? toTs = default(int?), int? aggregate = default(int?), bool? fill = default(bool?), string mappingPriority = default(string), string responseFormat = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<SPOTINSTRUMENTHISTODATARESPONSE> localVarResponse = SpotV1HistoricalDaysWithHttpInfo(market, instrument, groups, limit, toTs, aggregate, fill, mappingPriority, responseFormat);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from</param>
        /// <param name="instrument">The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.</param>
        /// <param name="groups">When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME (optional)</param>
        /// <param name="limit">The number of data points to return (optional, default to 30)</param>
        /// <param name="toTs">Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)</param>
        /// <param name="aggregate">The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)</param>
        /// <param name="fill">Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)</param>
        /// <param name="mappingPriority">The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SPOTINSTRUMENTHISTODATARESPONSE</returns>
        public Org.OpenAPITools.Client.ApiResponse<SPOTINSTRUMENTHISTODATARESPONSE> SpotV1HistoricalDaysWithHttpInfo(string market, string instrument, List<string> groups = default(List<string>), int? limit = default(int?), int? toTs = default(int?), int? aggregate = default(int?), bool? fill = default(bool?), string mappingPriority = default(string), string responseFormat = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'market' is set
            if (market == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'market' when calling SpotApi->SpotV1HistoricalDays");
            }

            // verify the required parameter 'instrument' is set
            if (instrument == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'instrument' when calling SpotApi->SpotV1HistoricalDays");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "market", market));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "instrument", instrument));
            if (groups != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "groups", groups));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (toTs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "to_ts", toTs));
            }
            if (aggregate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "aggregate", aggregate));
            }
            if (fill != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "fill", fill));
            }
            if (mappingPriority != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "mapping_priority", mappingPriority));
            }
            if (responseFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_format", responseFormat));
            }

            localVarRequestOptions.Operation = "SpotApi.SpotV1HistoricalDays";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<SPOTINSTRUMENTHISTODATARESPONSE>("/spot/v1/historical/days", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SpotV1HistoricalDays", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from</param>
        /// <param name="instrument">The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.</param>
        /// <param name="groups">When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME (optional)</param>
        /// <param name="limit">The number of data points to return (optional, default to 30)</param>
        /// <param name="toTs">Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)</param>
        /// <param name="aggregate">The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)</param>
        /// <param name="fill">Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)</param>
        /// <param name="mappingPriority">The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SPOTINSTRUMENTHISTODATARESPONSE</returns>
        public async System.Threading.Tasks.Task<SPOTINSTRUMENTHISTODATARESPONSE> SpotV1HistoricalDaysAsync(string market, string instrument, List<string> groups = default(List<string>), int? limit = default(int?), int? toTs = default(int?), int? aggregate = default(int?), bool? fill = default(bool?), string mappingPriority = default(string), string responseFormat = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<SPOTINSTRUMENTHISTODATARESPONSE> localVarResponse = await SpotV1HistoricalDaysWithHttpInfoAsync(market, instrument, groups, limit, toTs, aggregate, fill, mappingPriority, responseFormat, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from</param>
        /// <param name="instrument">The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.</param>
        /// <param name="groups">When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME (optional)</param>
        /// <param name="limit">The number of data points to return (optional, default to 30)</param>
        /// <param name="toTs">Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)</param>
        /// <param name="aggregate">The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)</param>
        /// <param name="fill">Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)</param>
        /// <param name="mappingPriority">The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SPOTINSTRUMENTHISTODATARESPONSE)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<SPOTINSTRUMENTHISTODATARESPONSE>> SpotV1HistoricalDaysWithHttpInfoAsync(string market, string instrument, List<string> groups = default(List<string>), int? limit = default(int?), int? toTs = default(int?), int? aggregate = default(int?), bool? fill = default(bool?), string mappingPriority = default(string), string responseFormat = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'market' is set
            if (market == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'market' when calling SpotApi->SpotV1HistoricalDays");
            }

            // verify the required parameter 'instrument' is set
            if (instrument == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'instrument' when calling SpotApi->SpotV1HistoricalDays");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "market", market));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "instrument", instrument));
            if (groups != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "groups", groups));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (toTs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "to_ts", toTs));
            }
            if (aggregate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "aggregate", aggregate));
            }
            if (fill != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "fill", fill));
            }
            if (mappingPriority != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "mapping_priority", mappingPriority));
            }
            if (responseFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_format", responseFormat));
            }

            localVarRequestOptions.Operation = "SpotApi.SpotV1HistoricalDays";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SPOTINSTRUMENTHISTODATARESPONSE>("/spot/v1/historical/days", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SpotV1HistoricalDays", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from</param>
        /// <param name="instrument">The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.</param>
        /// <param name="groups">When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME (optional)</param>
        /// <param name="limit">The number of data points to return (optional, default to 30)</param>
        /// <param name="toTs">Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)</param>
        /// <param name="aggregate">The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)</param>
        /// <param name="fill">Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)</param>
        /// <param name="mappingPriority">The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SPOTINSTRUMENTHISTODATARESPONSE</returns>
        public SPOTINSTRUMENTHISTODATARESPONSE SpotV1HistoricalHours(string market, string instrument, List<string> groups = default(List<string>), int? limit = default(int?), int? toTs = default(int?), int? aggregate = default(int?), bool? fill = default(bool?), string mappingPriority = default(string), string responseFormat = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<SPOTINSTRUMENTHISTODATARESPONSE> localVarResponse = SpotV1HistoricalHoursWithHttpInfo(market, instrument, groups, limit, toTs, aggregate, fill, mappingPriority, responseFormat);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from</param>
        /// <param name="instrument">The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.</param>
        /// <param name="groups">When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME (optional)</param>
        /// <param name="limit">The number of data points to return (optional, default to 30)</param>
        /// <param name="toTs">Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)</param>
        /// <param name="aggregate">The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)</param>
        /// <param name="fill">Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)</param>
        /// <param name="mappingPriority">The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SPOTINSTRUMENTHISTODATARESPONSE</returns>
        public Org.OpenAPITools.Client.ApiResponse<SPOTINSTRUMENTHISTODATARESPONSE> SpotV1HistoricalHoursWithHttpInfo(string market, string instrument, List<string> groups = default(List<string>), int? limit = default(int?), int? toTs = default(int?), int? aggregate = default(int?), bool? fill = default(bool?), string mappingPriority = default(string), string responseFormat = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'market' is set
            if (market == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'market' when calling SpotApi->SpotV1HistoricalHours");
            }

            // verify the required parameter 'instrument' is set
            if (instrument == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'instrument' when calling SpotApi->SpotV1HistoricalHours");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "market", market));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "instrument", instrument));
            if (groups != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "groups", groups));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (toTs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "to_ts", toTs));
            }
            if (aggregate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "aggregate", aggregate));
            }
            if (fill != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "fill", fill));
            }
            if (mappingPriority != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "mapping_priority", mappingPriority));
            }
            if (responseFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_format", responseFormat));
            }

            localVarRequestOptions.Operation = "SpotApi.SpotV1HistoricalHours";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<SPOTINSTRUMENTHISTODATARESPONSE>("/spot/v1/historical/hours", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SpotV1HistoricalHours", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from</param>
        /// <param name="instrument">The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.</param>
        /// <param name="groups">When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME (optional)</param>
        /// <param name="limit">The number of data points to return (optional, default to 30)</param>
        /// <param name="toTs">Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)</param>
        /// <param name="aggregate">The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)</param>
        /// <param name="fill">Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)</param>
        /// <param name="mappingPriority">The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SPOTINSTRUMENTHISTODATARESPONSE</returns>
        public async System.Threading.Tasks.Task<SPOTINSTRUMENTHISTODATARESPONSE> SpotV1HistoricalHoursAsync(string market, string instrument, List<string> groups = default(List<string>), int? limit = default(int?), int? toTs = default(int?), int? aggregate = default(int?), bool? fill = default(bool?), string mappingPriority = default(string), string responseFormat = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<SPOTINSTRUMENTHISTODATARESPONSE> localVarResponse = await SpotV1HistoricalHoursWithHttpInfoAsync(market, instrument, groups, limit, toTs, aggregate, fill, mappingPriority, responseFormat, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from</param>
        /// <param name="instrument">The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.</param>
        /// <param name="groups">When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME (optional)</param>
        /// <param name="limit">The number of data points to return (optional, default to 30)</param>
        /// <param name="toTs">Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)</param>
        /// <param name="aggregate">The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)</param>
        /// <param name="fill">Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)</param>
        /// <param name="mappingPriority">The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SPOTINSTRUMENTHISTODATARESPONSE)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<SPOTINSTRUMENTHISTODATARESPONSE>> SpotV1HistoricalHoursWithHttpInfoAsync(string market, string instrument, List<string> groups = default(List<string>), int? limit = default(int?), int? toTs = default(int?), int? aggregate = default(int?), bool? fill = default(bool?), string mappingPriority = default(string), string responseFormat = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'market' is set
            if (market == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'market' when calling SpotApi->SpotV1HistoricalHours");
            }

            // verify the required parameter 'instrument' is set
            if (instrument == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'instrument' when calling SpotApi->SpotV1HistoricalHours");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "market", market));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "instrument", instrument));
            if (groups != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "groups", groups));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (toTs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "to_ts", toTs));
            }
            if (aggregate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "aggregate", aggregate));
            }
            if (fill != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "fill", fill));
            }
            if (mappingPriority != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "mapping_priority", mappingPriority));
            }
            if (responseFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_format", responseFormat));
            }

            localVarRequestOptions.Operation = "SpotApi.SpotV1HistoricalHours";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SPOTINSTRUMENTHISTODATARESPONSE>("/spot/v1/historical/hours", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SpotV1HistoricalHours", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from</param>
        /// <param name="instrument">The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.</param>
        /// <param name="groups">When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME (optional)</param>
        /// <param name="limit">The number of data points to return (optional, default to 30)</param>
        /// <param name="toTs">Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)</param>
        /// <param name="aggregate">The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)</param>
        /// <param name="fill">Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)</param>
        /// <param name="mappingPriority">The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SPOTINSTRUMENTHISTODATARESPONSE</returns>
        public SPOTINSTRUMENTHISTODATARESPONSE SpotV1HistoricalMinutes(string market, string instrument, List<string> groups = default(List<string>), int? limit = default(int?), int? toTs = default(int?), int? aggregate = default(int?), bool? fill = default(bool?), string mappingPriority = default(string), string responseFormat = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<SPOTINSTRUMENTHISTODATARESPONSE> localVarResponse = SpotV1HistoricalMinutesWithHttpInfo(market, instrument, groups, limit, toTs, aggregate, fill, mappingPriority, responseFormat);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from</param>
        /// <param name="instrument">The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.</param>
        /// <param name="groups">When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME (optional)</param>
        /// <param name="limit">The number of data points to return (optional, default to 30)</param>
        /// <param name="toTs">Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)</param>
        /// <param name="aggregate">The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)</param>
        /// <param name="fill">Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)</param>
        /// <param name="mappingPriority">The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SPOTINSTRUMENTHISTODATARESPONSE</returns>
        public Org.OpenAPITools.Client.ApiResponse<SPOTINSTRUMENTHISTODATARESPONSE> SpotV1HistoricalMinutesWithHttpInfo(string market, string instrument, List<string> groups = default(List<string>), int? limit = default(int?), int? toTs = default(int?), int? aggregate = default(int?), bool? fill = default(bool?), string mappingPriority = default(string), string responseFormat = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'market' is set
            if (market == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'market' when calling SpotApi->SpotV1HistoricalMinutes");
            }

            // verify the required parameter 'instrument' is set
            if (instrument == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'instrument' when calling SpotApi->SpotV1HistoricalMinutes");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "market", market));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "instrument", instrument));
            if (groups != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "groups", groups));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (toTs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "to_ts", toTs));
            }
            if (aggregate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "aggregate", aggregate));
            }
            if (fill != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "fill", fill));
            }
            if (mappingPriority != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "mapping_priority", mappingPriority));
            }
            if (responseFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_format", responseFormat));
            }

            localVarRequestOptions.Operation = "SpotApi.SpotV1HistoricalMinutes";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<SPOTINSTRUMENTHISTODATARESPONSE>("/spot/v1/historical/minutes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SpotV1HistoricalMinutes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from</param>
        /// <param name="instrument">The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.</param>
        /// <param name="groups">When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME (optional)</param>
        /// <param name="limit">The number of data points to return (optional, default to 30)</param>
        /// <param name="toTs">Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)</param>
        /// <param name="aggregate">The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)</param>
        /// <param name="fill">Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)</param>
        /// <param name="mappingPriority">The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SPOTINSTRUMENTHISTODATARESPONSE</returns>
        public async System.Threading.Tasks.Task<SPOTINSTRUMENTHISTODATARESPONSE> SpotV1HistoricalMinutesAsync(string market, string instrument, List<string> groups = default(List<string>), int? limit = default(int?), int? toTs = default(int?), int? aggregate = default(int?), bool? fill = default(bool?), string mappingPriority = default(string), string responseFormat = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<SPOTINSTRUMENTHISTODATARESPONSE> localVarResponse = await SpotV1HistoricalMinutesWithHttpInfoAsync(market, instrument, groups, limit, toTs, aggregate, fill, mappingPriority, responseFormat, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from</param>
        /// <param name="instrument">The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.</param>
        /// <param name="groups">When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME (optional)</param>
        /// <param name="limit">The number of data points to return (optional, default to 30)</param>
        /// <param name="toTs">Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received} (optional)</param>
        /// <param name="aggregate">The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (optional, default to 1)</param>
        /// <param name="fill">Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (optional, default to true)</param>
        /// <param name="mappingPriority">The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SPOTINSTRUMENTHISTODATARESPONSE)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<SPOTINSTRUMENTHISTODATARESPONSE>> SpotV1HistoricalMinutesWithHttpInfoAsync(string market, string instrument, List<string> groups = default(List<string>), int? limit = default(int?), int? toTs = default(int?), int? aggregate = default(int?), bool? fill = default(bool?), string mappingPriority = default(string), string responseFormat = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'market' is set
            if (market == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'market' when calling SpotApi->SpotV1HistoricalMinutes");
            }

            // verify the required parameter 'instrument' is set
            if (instrument == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'instrument' when calling SpotApi->SpotV1HistoricalMinutes");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "market", market));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "instrument", instrument));
            if (groups != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "groups", groups));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (toTs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "to_ts", toTs));
            }
            if (aggregate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "aggregate", aggregate));
            }
            if (fill != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "fill", fill));
            }
            if (mappingPriority != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "mapping_priority", mappingPriority));
            }
            if (responseFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_format", responseFormat));
            }

            localVarRequestOptions.Operation = "SpotApi.SpotV1HistoricalMinutes";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SPOTINSTRUMENTHISTODATARESPONSE>("/spot/v1/historical/minutes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SpotV1HistoricalMinutes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from</param>
        /// <param name="instrument">The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.</param>
        /// <param name="minuteTs">Unix timestamp in seconds for the minute of the orderbook snapshot you are interested in. You can pass any timestamp within a minute but we will round it down the the full minute timestmap and return the orderbook l2 snapshot at that minute.</param>
        /// <param name="depth">The number of top bids and asks to return. (optional, default to 50)</param>
        /// <param name="mappingPriority">The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GENERICRESPONSE</returns>
        public GENERICRESPONSE SpotV1HistoricalOrderbookL2SnapshotMinute(string market, string instrument, int minuteTs, int? depth = default(int?), string mappingPriority = default(string), string responseFormat = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GENERICRESPONSE> localVarResponse = SpotV1HistoricalOrderbookL2SnapshotMinuteWithHttpInfo(market, instrument, minuteTs, depth, mappingPriority, responseFormat);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from</param>
        /// <param name="instrument">The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.</param>
        /// <param name="minuteTs">Unix timestamp in seconds for the minute of the orderbook snapshot you are interested in. You can pass any timestamp within a minute but we will round it down the the full minute timestmap and return the orderbook l2 snapshot at that minute.</param>
        /// <param name="depth">The number of top bids and asks to return. (optional, default to 50)</param>
        /// <param name="mappingPriority">The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GENERICRESPONSE</returns>
        public Org.OpenAPITools.Client.ApiResponse<GENERICRESPONSE> SpotV1HistoricalOrderbookL2SnapshotMinuteWithHttpInfo(string market, string instrument, int minuteTs, int? depth = default(int?), string mappingPriority = default(string), string responseFormat = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'market' is set
            if (market == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'market' when calling SpotApi->SpotV1HistoricalOrderbookL2SnapshotMinute");
            }

            // verify the required parameter 'instrument' is set
            if (instrument == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'instrument' when calling SpotApi->SpotV1HistoricalOrderbookL2SnapshotMinute");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "market", market));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "instrument", instrument));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "minute_ts", minuteTs));
            if (depth != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "depth", depth));
            }
            if (mappingPriority != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "mapping_priority", mappingPriority));
            }
            if (responseFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_format", responseFormat));
            }

            localVarRequestOptions.Operation = "SpotApi.SpotV1HistoricalOrderbookL2SnapshotMinute";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key_header) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }
            // authentication (api_key_query) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GENERICRESPONSE>("/spot/v1/historical/orderbook/l2/snapshot/minute", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SpotV1HistoricalOrderbookL2SnapshotMinute", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from</param>
        /// <param name="instrument">The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.</param>
        /// <param name="minuteTs">Unix timestamp in seconds for the minute of the orderbook snapshot you are interested in. You can pass any timestamp within a minute but we will round it down the the full minute timestmap and return the orderbook l2 snapshot at that minute.</param>
        /// <param name="depth">The number of top bids and asks to return. (optional, default to 50)</param>
        /// <param name="mappingPriority">The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GENERICRESPONSE</returns>
        public async System.Threading.Tasks.Task<GENERICRESPONSE> SpotV1HistoricalOrderbookL2SnapshotMinuteAsync(string market, string instrument, int minuteTs, int? depth = default(int?), string mappingPriority = default(string), string responseFormat = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GENERICRESPONSE> localVarResponse = await SpotV1HistoricalOrderbookL2SnapshotMinuteWithHttpInfoAsync(market, instrument, minuteTs, depth, mappingPriority, responseFormat, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from</param>
        /// <param name="instrument">The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.</param>
        /// <param name="minuteTs">Unix timestamp in seconds for the minute of the orderbook snapshot you are interested in. You can pass any timestamp within a minute but we will round it down the the full minute timestmap and return the orderbook l2 snapshot at that minute.</param>
        /// <param name="depth">The number of top bids and asks to return. (optional, default to 50)</param>
        /// <param name="mappingPriority">The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GENERICRESPONSE)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GENERICRESPONSE>> SpotV1HistoricalOrderbookL2SnapshotMinuteWithHttpInfoAsync(string market, string instrument, int minuteTs, int? depth = default(int?), string mappingPriority = default(string), string responseFormat = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'market' is set
            if (market == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'market' when calling SpotApi->SpotV1HistoricalOrderbookL2SnapshotMinute");
            }

            // verify the required parameter 'instrument' is set
            if (instrument == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'instrument' when calling SpotApi->SpotV1HistoricalOrderbookL2SnapshotMinute");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "market", market));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "instrument", instrument));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "minute_ts", minuteTs));
            if (depth != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "depth", depth));
            }
            if (mappingPriority != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "mapping_priority", mappingPriority));
            }
            if (responseFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_format", responseFormat));
            }

            localVarRequestOptions.Operation = "SpotApi.SpotV1HistoricalOrderbookL2SnapshotMinute";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key_header) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }
            // authentication (api_key_query) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GENERICRESPONSE>("/spot/v1/historical/orderbook/l2/snapshot/minute", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SpotV1HistoricalOrderbookL2SnapshotMinute", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from</param>
        /// <param name="instrument">The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.</param>
        /// <param name="afterTs">Unix timestamp in seconds of the earliest trade in the response. (optional)</param>
        /// <param name="lastCcseq">The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request. (optional, default to 0)</param>
        /// <param name="limit">The maximum number of trades to return (optional, default to 100)</param>
        /// <param name="mappingPriority">The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="return404OnEmptyResponse">If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SPOTINSTRUMENTTRADERESPONSE</returns>
        public SPOTINSTRUMENTTRADERESPONSE SpotV1HistoricalTrades(string market, string instrument, int? afterTs = default(int?), int? lastCcseq = default(int?), int? limit = default(int?), string mappingPriority = default(string), string responseFormat = default(string), bool? return404OnEmptyResponse = default(bool?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<SPOTINSTRUMENTTRADERESPONSE> localVarResponse = SpotV1HistoricalTradesWithHttpInfo(market, instrument, afterTs, lastCcseq, limit, mappingPriority, responseFormat, return404OnEmptyResponse);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from</param>
        /// <param name="instrument">The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.</param>
        /// <param name="afterTs">Unix timestamp in seconds of the earliest trade in the response. (optional)</param>
        /// <param name="lastCcseq">The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request. (optional, default to 0)</param>
        /// <param name="limit">The maximum number of trades to return (optional, default to 100)</param>
        /// <param name="mappingPriority">The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="return404OnEmptyResponse">If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SPOTINSTRUMENTTRADERESPONSE</returns>
        public Org.OpenAPITools.Client.ApiResponse<SPOTINSTRUMENTTRADERESPONSE> SpotV1HistoricalTradesWithHttpInfo(string market, string instrument, int? afterTs = default(int?), int? lastCcseq = default(int?), int? limit = default(int?), string mappingPriority = default(string), string responseFormat = default(string), bool? return404OnEmptyResponse = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'market' is set
            if (market == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'market' when calling SpotApi->SpotV1HistoricalTrades");
            }

            // verify the required parameter 'instrument' is set
            if (instrument == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'instrument' when calling SpotApi->SpotV1HistoricalTrades");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "market", market));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "instrument", instrument));
            if (afterTs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "after_ts", afterTs));
            }
            if (lastCcseq != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "last_ccseq", lastCcseq));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (mappingPriority != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "mapping_priority", mappingPriority));
            }
            if (responseFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_format", responseFormat));
            }
            if (return404OnEmptyResponse != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "return_404_on_empty_response", return404OnEmptyResponse));
            }

            localVarRequestOptions.Operation = "SpotApi.SpotV1HistoricalTrades";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key_header) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }
            // authentication (api_key_query) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SPOTINSTRUMENTTRADERESPONSE>("/spot/v1/historical/trades", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SpotV1HistoricalTrades", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from</param>
        /// <param name="instrument">The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.</param>
        /// <param name="afterTs">Unix timestamp in seconds of the earliest trade in the response. (optional)</param>
        /// <param name="lastCcseq">The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request. (optional, default to 0)</param>
        /// <param name="limit">The maximum number of trades to return (optional, default to 100)</param>
        /// <param name="mappingPriority">The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="return404OnEmptyResponse">If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SPOTINSTRUMENTTRADERESPONSE</returns>
        public async System.Threading.Tasks.Task<SPOTINSTRUMENTTRADERESPONSE> SpotV1HistoricalTradesAsync(string market, string instrument, int? afterTs = default(int?), int? lastCcseq = default(int?), int? limit = default(int?), string mappingPriority = default(string), string responseFormat = default(string), bool? return404OnEmptyResponse = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<SPOTINSTRUMENTTRADERESPONSE> localVarResponse = await SpotV1HistoricalTradesWithHttpInfoAsync(market, instrument, afterTs, lastCcseq, limit, mappingPriority, responseFormat, return404OnEmptyResponse, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from</param>
        /// <param name="instrument">The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.</param>
        /// <param name="afterTs">Unix timestamp in seconds of the earliest trade in the response. (optional)</param>
        /// <param name="lastCcseq">The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request. (optional, default to 0)</param>
        /// <param name="limit">The maximum number of trades to return (optional, default to 100)</param>
        /// <param name="mappingPriority">The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="return404OnEmptyResponse">If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SPOTINSTRUMENTTRADERESPONSE)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<SPOTINSTRUMENTTRADERESPONSE>> SpotV1HistoricalTradesWithHttpInfoAsync(string market, string instrument, int? afterTs = default(int?), int? lastCcseq = default(int?), int? limit = default(int?), string mappingPriority = default(string), string responseFormat = default(string), bool? return404OnEmptyResponse = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'market' is set
            if (market == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'market' when calling SpotApi->SpotV1HistoricalTrades");
            }

            // verify the required parameter 'instrument' is set
            if (instrument == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'instrument' when calling SpotApi->SpotV1HistoricalTrades");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "market", market));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "instrument", instrument));
            if (afterTs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "after_ts", afterTs));
            }
            if (lastCcseq != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "last_ccseq", lastCcseq));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (mappingPriority != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "mapping_priority", mappingPriority));
            }
            if (responseFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_format", responseFormat));
            }
            if (return404OnEmptyResponse != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "return_404_on_empty_response", return404OnEmptyResponse));
            }

            localVarRequestOptions.Operation = "SpotApi.SpotV1HistoricalTrades";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key_header) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }
            // authentication (api_key_query) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SPOTINSTRUMENTTRADERESPONSE>("/spot/v1/historical/trades", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SpotV1HistoricalTrades", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from</param>
        /// <param name="instrument">The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.</param>
        /// <param name="hourTs">Unix timestamp in seconds for the hour containing the trades you are interested in. You can pass any timestamp within an hour but we will round it down the the full hour timestmap and return all trades in that hour. (optional)</param>
        /// <param name="mappingPriority">The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="return404OnEmptyResponse">If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SPOTINSTRUMENTTRADERESPONSE</returns>
        public SPOTINSTRUMENTTRADERESPONSE SpotV1HistoricalTradesHour(string market, string instrument, int? hourTs = default(int?), string mappingPriority = default(string), string responseFormat = default(string), bool? return404OnEmptyResponse = default(bool?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<SPOTINSTRUMENTTRADERESPONSE> localVarResponse = SpotV1HistoricalTradesHourWithHttpInfo(market, instrument, hourTs, mappingPriority, responseFormat, return404OnEmptyResponse);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from</param>
        /// <param name="instrument">The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.</param>
        /// <param name="hourTs">Unix timestamp in seconds for the hour containing the trades you are interested in. You can pass any timestamp within an hour but we will round it down the the full hour timestmap and return all trades in that hour. (optional)</param>
        /// <param name="mappingPriority">The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="return404OnEmptyResponse">If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SPOTINSTRUMENTTRADERESPONSE</returns>
        public Org.OpenAPITools.Client.ApiResponse<SPOTINSTRUMENTTRADERESPONSE> SpotV1HistoricalTradesHourWithHttpInfo(string market, string instrument, int? hourTs = default(int?), string mappingPriority = default(string), string responseFormat = default(string), bool? return404OnEmptyResponse = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'market' is set
            if (market == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'market' when calling SpotApi->SpotV1HistoricalTradesHour");
            }

            // verify the required parameter 'instrument' is set
            if (instrument == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'instrument' when calling SpotApi->SpotV1HistoricalTradesHour");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "market", market));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "instrument", instrument));
            if (hourTs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "hour_ts", hourTs));
            }
            if (mappingPriority != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "mapping_priority", mappingPriority));
            }
            if (responseFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_format", responseFormat));
            }
            if (return404OnEmptyResponse != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "return_404_on_empty_response", return404OnEmptyResponse));
            }

            localVarRequestOptions.Operation = "SpotApi.SpotV1HistoricalTradesHour";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key_header) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }
            // authentication (api_key_query) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SPOTINSTRUMENTTRADERESPONSE>("/spot/v1/historical/trades/hour", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SpotV1HistoricalTradesHour", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from</param>
        /// <param name="instrument">The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.</param>
        /// <param name="hourTs">Unix timestamp in seconds for the hour containing the trades you are interested in. You can pass any timestamp within an hour but we will round it down the the full hour timestmap and return all trades in that hour. (optional)</param>
        /// <param name="mappingPriority">The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="return404OnEmptyResponse">If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SPOTINSTRUMENTTRADERESPONSE</returns>
        public async System.Threading.Tasks.Task<SPOTINSTRUMENTTRADERESPONSE> SpotV1HistoricalTradesHourAsync(string market, string instrument, int? hourTs = default(int?), string mappingPriority = default(string), string responseFormat = default(string), bool? return404OnEmptyResponse = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<SPOTINSTRUMENTTRADERESPONSE> localVarResponse = await SpotV1HistoricalTradesHourWithHttpInfoAsync(market, instrument, hourTs, mappingPriority, responseFormat, return404OnEmptyResponse, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from</param>
        /// <param name="instrument">The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.</param>
        /// <param name="hourTs">Unix timestamp in seconds for the hour containing the trades you are interested in. You can pass any timestamp within an hour but we will round it down the the full hour timestmap and return all trades in that hour. (optional)</param>
        /// <param name="mappingPriority">The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)</param>
        /// <param name="responseFormat">The format of the data response in uppercase. It can be one of the following: JSON,CSV (optional, default to JSON)</param>
        /// <param name="return404OnEmptyResponse">If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SPOTINSTRUMENTTRADERESPONSE)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<SPOTINSTRUMENTTRADERESPONSE>> SpotV1HistoricalTradesHourWithHttpInfoAsync(string market, string instrument, int? hourTs = default(int?), string mappingPriority = default(string), string responseFormat = default(string), bool? return404OnEmptyResponse = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'market' is set
            if (market == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'market' when calling SpotApi->SpotV1HistoricalTradesHour");
            }

            // verify the required parameter 'instrument' is set
            if (instrument == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'instrument' when calling SpotApi->SpotV1HistoricalTradesHour");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "market", market));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "instrument", instrument));
            if (hourTs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "hour_ts", hourTs));
            }
            if (mappingPriority != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "mapping_priority", mappingPriority));
            }
            if (responseFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_format", responseFormat));
            }
            if (return404OnEmptyResponse != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "return_404_on_empty_response", return404OnEmptyResponse));
            }

            localVarRequestOptions.Operation = "SpotApi.SpotV1HistoricalTradesHour";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key_header) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", this.Configuration.GetApiKeyWithPrefix("authorization"));
            }
            // authentication (api_key_query) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SPOTINSTRUMENTTRADERESPONSE>("/spot/v1/historical/trades/hour", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SpotV1HistoricalTradesHour", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from</param>
        /// <param name="instruments">A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.</param>
        /// <param name="groups">When requesting metadata entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: STATUS,INTERNAL,GENERAL,MIGRATION,SOURCE (optional)</param>
        /// <param name="mappingPriority">The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SPOTINSTRUMENTMETADATARESPONSE</returns>
        public SPOTINSTRUMENTMETADATARESPONSE SpotV1LatestInstrumentMetadata(string market, List<string> instruments, List<string> groups = default(List<string>), string mappingPriority = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<SPOTINSTRUMENTMETADATARESPONSE> localVarResponse = SpotV1LatestInstrumentMetadataWithHttpInfo(market, instruments, groups, mappingPriority);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from</param>
        /// <param name="instruments">A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.</param>
        /// <param name="groups">When requesting metadata entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: STATUS,INTERNAL,GENERAL,MIGRATION,SOURCE (optional)</param>
        /// <param name="mappingPriority">The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SPOTINSTRUMENTMETADATARESPONSE</returns>
        public Org.OpenAPITools.Client.ApiResponse<SPOTINSTRUMENTMETADATARESPONSE> SpotV1LatestInstrumentMetadataWithHttpInfo(string market, List<string> instruments, List<string> groups = default(List<string>), string mappingPriority = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'market' is set
            if (market == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'market' when calling SpotApi->SpotV1LatestInstrumentMetadata");
            }

            // verify the required parameter 'instruments' is set
            if (instruments == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'instruments' when calling SpotApi->SpotV1LatestInstrumentMetadata");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "market", market));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "instruments", instruments));
            if (groups != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "groups", groups));
            }
            if (mappingPriority != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "mapping_priority", mappingPriority));
            }

            localVarRequestOptions.Operation = "SpotApi.SpotV1LatestInstrumentMetadata";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<SPOTINSTRUMENTMETADATARESPONSE>("/spot/v1/latest/instrument/metadata", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SpotV1LatestInstrumentMetadata", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from</param>
        /// <param name="instruments">A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.</param>
        /// <param name="groups">When requesting metadata entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: STATUS,INTERNAL,GENERAL,MIGRATION,SOURCE (optional)</param>
        /// <param name="mappingPriority">The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SPOTINSTRUMENTMETADATARESPONSE</returns>
        public async System.Threading.Tasks.Task<SPOTINSTRUMENTMETADATARESPONSE> SpotV1LatestInstrumentMetadataAsync(string market, List<string> instruments, List<string> groups = default(List<string>), string mappingPriority = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<SPOTINSTRUMENTMETADATARESPONSE> localVarResponse = await SpotV1LatestInstrumentMetadataWithHttpInfoAsync(market, instruments, groups, mappingPriority, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from</param>
        /// <param name="instruments">A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.</param>
        /// <param name="groups">When requesting metadata entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: STATUS,INTERNAL,GENERAL,MIGRATION,SOURCE (optional)</param>
        /// <param name="mappingPriority">The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SPOTINSTRUMENTMETADATARESPONSE)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<SPOTINSTRUMENTMETADATARESPONSE>> SpotV1LatestInstrumentMetadataWithHttpInfoAsync(string market, List<string> instruments, List<string> groups = default(List<string>), string mappingPriority = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'market' is set
            if (market == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'market' when calling SpotApi->SpotV1LatestInstrumentMetadata");
            }

            // verify the required parameter 'instruments' is set
            if (instruments == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'instruments' when calling SpotApi->SpotV1LatestInstrumentMetadata");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "market", market));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "instruments", instruments));
            if (groups != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "groups", groups));
            }
            if (mappingPriority != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "mapping_priority", mappingPriority));
            }

            localVarRequestOptions.Operation = "SpotApi.SpotV1LatestInstrumentMetadata";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SPOTINSTRUMENTMETADATARESPONSE>("/spot/v1/latest/instrument/metadata", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SpotV1LatestInstrumentMetadata", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from</param>
        /// <param name="instruments">A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.</param>
        /// <param name="groups">When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,LAST_UPDATE,LAST_PROCESSED,TOP_OF_BOOK,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME (optional)</param>
        /// <param name="mappingPriority">The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SPOTINSTRUMENTMARKETDATARESPONSE</returns>
        public SPOTINSTRUMENTMARKETDATARESPONSE SpotV1LatestTick(string market, List<string> instruments, List<string> groups = default(List<string>), string mappingPriority = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<SPOTINSTRUMENTMARKETDATARESPONSE> localVarResponse = SpotV1LatestTickWithHttpInfo(market, instruments, groups, mappingPriority);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from</param>
        /// <param name="instruments">A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.</param>
        /// <param name="groups">When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,LAST_UPDATE,LAST_PROCESSED,TOP_OF_BOOK,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME (optional)</param>
        /// <param name="mappingPriority">The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SPOTINSTRUMENTMARKETDATARESPONSE</returns>
        public Org.OpenAPITools.Client.ApiResponse<SPOTINSTRUMENTMARKETDATARESPONSE> SpotV1LatestTickWithHttpInfo(string market, List<string> instruments, List<string> groups = default(List<string>), string mappingPriority = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'market' is set
            if (market == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'market' when calling SpotApi->SpotV1LatestTick");
            }

            // verify the required parameter 'instruments' is set
            if (instruments == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'instruments' when calling SpotApi->SpotV1LatestTick");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "market", market));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "instruments", instruments));
            if (groups != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "groups", groups));
            }
            if (mappingPriority != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "mapping_priority", mappingPriority));
            }

            localVarRequestOptions.Operation = "SpotApi.SpotV1LatestTick";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<SPOTINSTRUMENTMARKETDATARESPONSE>("/spot/v1/latest/tick", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SpotV1LatestTick", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from</param>
        /// <param name="instruments">A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.</param>
        /// <param name="groups">When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,LAST_UPDATE,LAST_PROCESSED,TOP_OF_BOOK,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME (optional)</param>
        /// <param name="mappingPriority">The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SPOTINSTRUMENTMARKETDATARESPONSE</returns>
        public async System.Threading.Tasks.Task<SPOTINSTRUMENTMARKETDATARESPONSE> SpotV1LatestTickAsync(string market, List<string> instruments, List<string> groups = default(List<string>), string mappingPriority = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<SPOTINSTRUMENTMARKETDATARESPONSE> localVarResponse = await SpotV1LatestTickWithHttpInfoAsync(market, instruments, groups, mappingPriority, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from</param>
        /// <param name="instruments">A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.</param>
        /// <param name="groups">When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,LAST_UPDATE,LAST_PROCESSED,TOP_OF_BOOK,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME (optional)</param>
        /// <param name="mappingPriority">The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (optional, default to CHECK_MAPPED_FIRST)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SPOTINSTRUMENTMARKETDATARESPONSE)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<SPOTINSTRUMENTMARKETDATARESPONSE>> SpotV1LatestTickWithHttpInfoAsync(string market, List<string> instruments, List<string> groups = default(List<string>), string mappingPriority = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'market' is set
            if (market == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'market' when calling SpotApi->SpotV1LatestTick");
            }

            // verify the required parameter 'instruments' is set
            if (instruments == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'instruments' when calling SpotApi->SpotV1LatestTick");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "market", market));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "instruments", instruments));
            if (groups != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "groups", groups));
            }
            if (mappingPriority != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "mapping_priority", mappingPriority));
            }

            localVarRequestOptions.Operation = "SpotApi.SpotV1LatestTick";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SPOTINSTRUMENTMARKETDATARESPONSE>("/spot/v1/latest/tick", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SpotV1LatestTick", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from (optional, default to &quot;&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GENERICRESPONSE</returns>
        public GENERICRESPONSE SpotV1Markets(string market = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GENERICRESPONSE> localVarResponse = SpotV1MarketsWithHttpInfo(market);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from (optional, default to &quot;&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GENERICRESPONSE</returns>
        public Org.OpenAPITools.Client.ApiResponse<GENERICRESPONSE> SpotV1MarketsWithHttpInfo(string market = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (market != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "market", market));
            }

            localVarRequestOptions.Operation = "SpotApi.SpotV1Markets";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<GENERICRESPONSE>("/spot/v1/markets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SpotV1Markets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from (optional, default to &quot;&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GENERICRESPONSE</returns>
        public async System.Threading.Tasks.Task<GENERICRESPONSE> SpotV1MarketsAsync(string market = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GENERICRESPONSE> localVarResponse = await SpotV1MarketsWithHttpInfoAsync(market, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from (optional, default to &quot;&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GENERICRESPONSE)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GENERICRESPONSE>> SpotV1MarketsWithHttpInfoAsync(string market = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (market != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "market", market));
            }

            localVarRequestOptions.Operation = "SpotApi.SpotV1Markets";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GENERICRESPONSE>("/spot/v1/markets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SpotV1Markets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from (optional, default to &quot;&quot;)</param>
        /// <param name="instrument">The mapped instrument to retrieve on a specific market. (optional, default to &quot;&quot;)</param>
        /// <param name="instrumentStatus">The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GENERICRESPONSE</returns>
        public GENERICRESPONSE SpotV1MarketsInstruments(string market = default(string), string instrument = default(string), List<string> instrumentStatus = default(List<string>), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GENERICRESPONSE> localVarResponse = SpotV1MarketsInstrumentsWithHttpInfo(market, instrument, instrumentStatus);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from (optional, default to &quot;&quot;)</param>
        /// <param name="instrument">The mapped instrument to retrieve on a specific market. (optional, default to &quot;&quot;)</param>
        /// <param name="instrumentStatus">The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GENERICRESPONSE</returns>
        public Org.OpenAPITools.Client.ApiResponse<GENERICRESPONSE> SpotV1MarketsInstrumentsWithHttpInfo(string market = default(string), string instrument = default(string), List<string> instrumentStatus = default(List<string>), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (market != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "market", market));
            }
            if (instrument != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "instrument", instrument));
            }
            if (instrumentStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "instrument_status", instrumentStatus));
            }

            localVarRequestOptions.Operation = "SpotApi.SpotV1MarketsInstruments";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<GENERICRESPONSE>("/spot/v1/markets/instruments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SpotV1MarketsInstruments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from (optional, default to &quot;&quot;)</param>
        /// <param name="instrument">The mapped instrument to retrieve on a specific market. (optional, default to &quot;&quot;)</param>
        /// <param name="instrumentStatus">The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GENERICRESPONSE</returns>
        public async System.Threading.Tasks.Task<GENERICRESPONSE> SpotV1MarketsInstrumentsAsync(string market = default(string), string instrument = default(string), List<string> instrumentStatus = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GENERICRESPONSE> localVarResponse = await SpotV1MarketsInstrumentsWithHttpInfoAsync(market, instrument, instrumentStatus, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from (optional, default to &quot;&quot;)</param>
        /// <param name="instrument">The mapped instrument to retrieve on a specific market. (optional, default to &quot;&quot;)</param>
        /// <param name="instrumentStatus">The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GENERICRESPONSE)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GENERICRESPONSE>> SpotV1MarketsInstrumentsWithHttpInfoAsync(string market = default(string), string instrument = default(string), List<string> instrumentStatus = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (market != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "market", market));
            }
            if (instrument != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "instrument", instrument));
            }
            if (instrumentStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "instrument_status", instrumentStatus));
            }

            localVarRequestOptions.Operation = "SpotApi.SpotV1MarketsInstruments";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GENERICRESPONSE>("/spot/v1/markets/instruments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SpotV1MarketsInstruments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from (optional, default to &quot;&quot;)</param>
        /// <param name="instrument">The unmapped instrument to retrieve on a specific market. (optional, default to &quot;&quot;)</param>
        /// <param name="instrumentStatus">The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GENERICRESPONSE</returns>
        public GENERICRESPONSE SpotV1MarketsInstrumentsUnmapped(string market = default(string), string instrument = default(string), List<string> instrumentStatus = default(List<string>), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GENERICRESPONSE> localVarResponse = SpotV1MarketsInstrumentsUnmappedWithHttpInfo(market, instrument, instrumentStatus);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from (optional, default to &quot;&quot;)</param>
        /// <param name="instrument">The unmapped instrument to retrieve on a specific market. (optional, default to &quot;&quot;)</param>
        /// <param name="instrumentStatus">The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GENERICRESPONSE</returns>
        public Org.OpenAPITools.Client.ApiResponse<GENERICRESPONSE> SpotV1MarketsInstrumentsUnmappedWithHttpInfo(string market = default(string), string instrument = default(string), List<string> instrumentStatus = default(List<string>), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (market != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "market", market));
            }
            if (instrument != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "instrument", instrument));
            }
            if (instrumentStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "instrument_status", instrumentStatus));
            }

            localVarRequestOptions.Operation = "SpotApi.SpotV1MarketsInstrumentsUnmapped";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<GENERICRESPONSE>("/spot/v1/markets/instruments/unmapped", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SpotV1MarketsInstrumentsUnmapped", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from (optional, default to &quot;&quot;)</param>
        /// <param name="instrument">The unmapped instrument to retrieve on a specific market. (optional, default to &quot;&quot;)</param>
        /// <param name="instrumentStatus">The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GENERICRESPONSE</returns>
        public async System.Threading.Tasks.Task<GENERICRESPONSE> SpotV1MarketsInstrumentsUnmappedAsync(string market = default(string), string instrument = default(string), List<string> instrumentStatus = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GENERICRESPONSE> localVarResponse = await SpotV1MarketsInstrumentsUnmappedWithHttpInfoAsync(market, instrument, instrumentStatus, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">The exchange to obtain data from (optional, default to &quot;&quot;)</param>
        /// <param name="instrument">The unmapped instrument to retrieve on a specific market. (optional, default to &quot;&quot;)</param>
        /// <param name="instrumentStatus">The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GENERICRESPONSE)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GENERICRESPONSE>> SpotV1MarketsInstrumentsUnmappedWithHttpInfoAsync(string market = default(string), string instrument = default(string), List<string> instrumentStatus = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (market != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "market", market));
            }
            if (instrument != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "instrument", instrument));
            }
            if (instrumentStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "instrument_status", instrumentStatus));
            }

            localVarRequestOptions.Operation = "SpotApi.SpotV1MarketsInstrumentsUnmapped";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GENERICRESPONSE>("/spot/v1/markets/instruments/unmapped", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SpotV1MarketsInstrumentsUnmapped", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
