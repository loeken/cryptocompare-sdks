/*
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 *
 * CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: data@cryptocompare.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SPOTINSTRUMENTHISTODATA
    /// </summary>
    [DataContract(Name = "SPOT_INSTRUMENT_HISTO_DATA")]
    public partial class SPOTINSTRUMENTHISTODATA : IEquatable<SPOTINSTRUMENTHISTODATA>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SPOTINSTRUMENTHISTODATA" /> class.
        /// </summary>
        /// <param name="bASE">The mapped from asset (base / symbol/ coin) (e.g. BTC). Only available on instruments that have mapping..</param>
        /// <param name="cLOSE">The price of the last trade in this time period. If there were no trades in the time period, the open price will be given..</param>
        /// <param name="fIRSTTRADEPRICE">The price of the first trade in the time period. This is only available when there is at least one trade in the time period..</param>
        /// <param name="fIRSTTRADETIMESTAMP">The timestamp, in seconds, of the first trade in this time perio. This is only available when there is at least one trade in the time period..</param>
        /// <param name="hIGH">The highest trade price in the time period. If there were no trades in the time period, the open price will be given..</param>
        /// <param name="hIGHTRADEPRICE">The highest value of the trades in the time period. This is only available when there is at least one trade in the time period..</param>
        /// <param name="hIGHTRADETIMESTAMP">The timestamp, in seconds, of the highest trade in the time period. This is only available when there is at least one trade in the time period..</param>
        /// <param name="iNSTRUMENT">The unmapped instrument ID.</param>
        /// <param name="lASTTRADEPRICE">The last trade price in the time period. This is only available when there is at least one trade in the time period..</param>
        /// <param name="lASTTRADETIMESTAMP">The timestamp, in seconds, of the last trade in this time period. This is only available when there is at least one trade in the time period..</param>
        /// <param name="lOW">The lowest trade price in the time period. If there were no trades in the time period, the open price will be given..</param>
        /// <param name="lOWTRADEPRICE">The lowest value of the trades in the time period. This is only available when there is at least one trade in the time period..</param>
        /// <param name="lOWTRADETIMESTAMP">The timestamp, in seconds, of the lowest trade in the time period. This is only available when there is at least one trade in the time period..</param>
        /// <param name="mAPPEDINSTRUMENT">The instrument ID, as derived from our mapping rules. This takes the form \&quot;BASE-QUOTE\&quot; (e.g. BTC-USD). Only available on instruments that have been mapped..</param>
        /// <param name="mARKET">The market / exchange under consideration (e.g. gemini, kraken, coinbase, etc)..</param>
        /// <param name="oPEN">The open price for the historical period, this is based on the closest trade before the period start..</param>
        /// <param name="qUOTE">The mapped to asset (quote / counter symbol / coin) (e.g. USD). Only available on instruments that have mapping..</param>
        /// <param name="qUOTEVOLUME">The sum of all the trade volumes in the To asset (quote/counter symbol/coin) for the time period. If there were no trades in the time period, 0 will be returned..</param>
        /// <param name="qUOTEVOLUMEBUY">The sum of all the BUY trade volumes in the to asset (quote/counter symbol/coin) for the time period..</param>
        /// <param name="qUOTEVOLUMESELL">The sum of all the SELL trade volumes in the To asset (quote/counter symbol/coin) for the time period..</param>
        /// <param name="qUOTEVOLUMEUNKNOWN">The sum of all the UNKNOWN trade volumes in the To asset (quote/counter symbol/coin) for the time period..</param>
        /// <param name="tIMESTAMP">The timestamp in seconds of the beginning of the histo period. For minute it would be every minute at the beginning of the minute, for hour it would be the start of the hour and for daily it is 00:00 GMT..</param>
        /// <param name="tOTALTRADES">The total number of trades seen in this time period. If there were no trades in the time period, 0 will be returned..</param>
        /// <param name="tOTALTRADESBUY">The total number of BUY trades seen in this time period. If there were no trades in the time period, 0 will be returned..</param>
        /// <param name="tOTALTRADESSELL">The total number of SELL trades seen in this time period. If there were no trades in the time period, 0 will be returned..</param>
        /// <param name="tOTALTRADESUNKNOWN">The total number of UNKNOWN trades seen in this time period. If there were no trades in the time period, 0 will be returned..</param>
        /// <param name="tYPE">The type of the message..</param>
        /// <param name="uNIT">The unit of the historical period update: MINUTE for minute, HOUR for hour and DAY for day..</param>
        /// <param name="vOLUME">The sum of all the trade volumes in the from asset (base symbol / coin) for the time period. If there were no trades in the time period, 0 will be returned..</param>
        /// <param name="vOLUMEBUY">The sum of all the BUY trade volumes in the from asset (base symbol / coin) for the time period..</param>
        /// <param name="vOLUMESELL">The sum of all the SELL trade volumes in the from asset (base symbol / coin) for the time period..</param>
        /// <param name="vOLUMEUNKNOWN">The sum of all the UNKNOWN trade volumes in the from asset (base symbol / coin) for the time period..</param>
        public SPOTINSTRUMENTHISTODATA(string bASE = default(string), int cLOSE = default(int), int fIRSTTRADEPRICE = default(int), int fIRSTTRADETIMESTAMP = default(int), int hIGH = default(int), int hIGHTRADEPRICE = default(int), int hIGHTRADETIMESTAMP = default(int), string iNSTRUMENT = default(string), int lASTTRADEPRICE = default(int), int lASTTRADETIMESTAMP = default(int), int lOW = default(int), int lOWTRADEPRICE = default(int), int lOWTRADETIMESTAMP = default(int), string mAPPEDINSTRUMENT = default(string), string mARKET = default(string), int oPEN = default(int), string qUOTE = default(string), int qUOTEVOLUME = default(int), int qUOTEVOLUMEBUY = default(int), int qUOTEVOLUMESELL = default(int), int qUOTEVOLUMEUNKNOWN = default(int), int tIMESTAMP = default(int), int tOTALTRADES = default(int), int tOTALTRADESBUY = default(int), int tOTALTRADESSELL = default(int), int tOTALTRADESUNKNOWN = default(int), string tYPE = default(string), string uNIT = default(string), int vOLUME = default(int), int vOLUMEBUY = default(int), int vOLUMESELL = default(int), int vOLUMEUNKNOWN = default(int))
        {
            this.BASE = bASE;
            this.CLOSE = cLOSE;
            this.FIRST_TRADE_PRICE = fIRSTTRADEPRICE;
            this.FIRST_TRADE_TIMESTAMP = fIRSTTRADETIMESTAMP;
            this.HIGH = hIGH;
            this.HIGH_TRADE_PRICE = hIGHTRADEPRICE;
            this.HIGH_TRADE_TIMESTAMP = hIGHTRADETIMESTAMP;
            this.INSTRUMENT = iNSTRUMENT;
            this.LAST_TRADE_PRICE = lASTTRADEPRICE;
            this.LAST_TRADE_TIMESTAMP = lASTTRADETIMESTAMP;
            this.LOW = lOW;
            this.LOW_TRADE_PRICE = lOWTRADEPRICE;
            this.LOW_TRADE_TIMESTAMP = lOWTRADETIMESTAMP;
            this.MAPPED_INSTRUMENT = mAPPEDINSTRUMENT;
            this.MARKET = mARKET;
            this.OPEN = oPEN;
            this.QUOTE = qUOTE;
            this.QUOTE_VOLUME = qUOTEVOLUME;
            this.QUOTE_VOLUME_BUY = qUOTEVOLUMEBUY;
            this.QUOTE_VOLUME_SELL = qUOTEVOLUMESELL;
            this.QUOTE_VOLUME_UNKNOWN = qUOTEVOLUMEUNKNOWN;
            this.TIMESTAMP = tIMESTAMP;
            this.TOTAL_TRADES = tOTALTRADES;
            this.TOTAL_TRADES_BUY = tOTALTRADESBUY;
            this.TOTAL_TRADES_SELL = tOTALTRADESSELL;
            this.TOTAL_TRADES_UNKNOWN = tOTALTRADESUNKNOWN;
            this.TYPE = tYPE;
            this.UNIT = uNIT;
            this.VOLUME = vOLUME;
            this.VOLUME_BUY = vOLUMEBUY;
            this.VOLUME_SELL = vOLUMESELL;
            this.VOLUME_UNKNOWN = vOLUMEUNKNOWN;
        }

        /// <summary>
        /// The mapped from asset (base / symbol/ coin) (e.g. BTC). Only available on instruments that have mapping.
        /// </summary>
        /// <value>The mapped from asset (base / symbol/ coin) (e.g. BTC). Only available on instruments that have mapping.</value>
        [DataMember(Name = "BASE", EmitDefaultValue = false)]
        public string BASE { get; set; }

        /// <summary>
        /// The price of the last trade in this time period. If there were no trades in the time period, the open price will be given.
        /// </summary>
        /// <value>The price of the last trade in this time period. If there were no trades in the time period, the open price will be given.</value>
        [DataMember(Name = "CLOSE", EmitDefaultValue = false)]
        public int CLOSE { get; set; }

        /// <summary>
        /// The price of the first trade in the time period. This is only available when there is at least one trade in the time period.
        /// </summary>
        /// <value>The price of the first trade in the time period. This is only available when there is at least one trade in the time period.</value>
        [DataMember(Name = "FIRST_TRADE_PRICE", EmitDefaultValue = false)]
        public int FIRST_TRADE_PRICE { get; set; }

        /// <summary>
        /// The timestamp, in seconds, of the first trade in this time perio. This is only available when there is at least one trade in the time period.
        /// </summary>
        /// <value>The timestamp, in seconds, of the first trade in this time perio. This is only available when there is at least one trade in the time period.</value>
        [DataMember(Name = "FIRST_TRADE_TIMESTAMP", EmitDefaultValue = false)]
        public int FIRST_TRADE_TIMESTAMP { get; set; }

        /// <summary>
        /// The highest trade price in the time period. If there were no trades in the time period, the open price will be given.
        /// </summary>
        /// <value>The highest trade price in the time period. If there were no trades in the time period, the open price will be given.</value>
        [DataMember(Name = "HIGH", EmitDefaultValue = false)]
        public int HIGH { get; set; }

        /// <summary>
        /// The highest value of the trades in the time period. This is only available when there is at least one trade in the time period.
        /// </summary>
        /// <value>The highest value of the trades in the time period. This is only available when there is at least one trade in the time period.</value>
        [DataMember(Name = "HIGH_TRADE_PRICE", EmitDefaultValue = false)]
        public int HIGH_TRADE_PRICE { get; set; }

        /// <summary>
        /// The timestamp, in seconds, of the highest trade in the time period. This is only available when there is at least one trade in the time period.
        /// </summary>
        /// <value>The timestamp, in seconds, of the highest trade in the time period. This is only available when there is at least one trade in the time period.</value>
        [DataMember(Name = "HIGH_TRADE_TIMESTAMP", EmitDefaultValue = false)]
        public int HIGH_TRADE_TIMESTAMP { get; set; }

        /// <summary>
        /// The unmapped instrument ID
        /// </summary>
        /// <value>The unmapped instrument ID</value>
        [DataMember(Name = "INSTRUMENT", EmitDefaultValue = false)]
        public string INSTRUMENT { get; set; }

        /// <summary>
        /// The last trade price in the time period. This is only available when there is at least one trade in the time period.
        /// </summary>
        /// <value>The last trade price in the time period. This is only available when there is at least one trade in the time period.</value>
        [DataMember(Name = "LAST_TRADE_PRICE", EmitDefaultValue = false)]
        public int LAST_TRADE_PRICE { get; set; }

        /// <summary>
        /// The timestamp, in seconds, of the last trade in this time period. This is only available when there is at least one trade in the time period.
        /// </summary>
        /// <value>The timestamp, in seconds, of the last trade in this time period. This is only available when there is at least one trade in the time period.</value>
        [DataMember(Name = "LAST_TRADE_TIMESTAMP", EmitDefaultValue = false)]
        public int LAST_TRADE_TIMESTAMP { get; set; }

        /// <summary>
        /// The lowest trade price in the time period. If there were no trades in the time period, the open price will be given.
        /// </summary>
        /// <value>The lowest trade price in the time period. If there were no trades in the time period, the open price will be given.</value>
        [DataMember(Name = "LOW", EmitDefaultValue = false)]
        public int LOW { get; set; }

        /// <summary>
        /// The lowest value of the trades in the time period. This is only available when there is at least one trade in the time period.
        /// </summary>
        /// <value>The lowest value of the trades in the time period. This is only available when there is at least one trade in the time period.</value>
        [DataMember(Name = "LOW_TRADE_PRICE", EmitDefaultValue = false)]
        public int LOW_TRADE_PRICE { get; set; }

        /// <summary>
        /// The timestamp, in seconds, of the lowest trade in the time period. This is only available when there is at least one trade in the time period.
        /// </summary>
        /// <value>The timestamp, in seconds, of the lowest trade in the time period. This is only available when there is at least one trade in the time period.</value>
        [DataMember(Name = "LOW_TRADE_TIMESTAMP", EmitDefaultValue = false)]
        public int LOW_TRADE_TIMESTAMP { get; set; }

        /// <summary>
        /// The instrument ID, as derived from our mapping rules. This takes the form \&quot;BASE-QUOTE\&quot; (e.g. BTC-USD). Only available on instruments that have been mapped.
        /// </summary>
        /// <value>The instrument ID, as derived from our mapping rules. This takes the form \&quot;BASE-QUOTE\&quot; (e.g. BTC-USD). Only available on instruments that have been mapped.</value>
        [DataMember(Name = "MAPPED_INSTRUMENT", EmitDefaultValue = false)]
        public string MAPPED_INSTRUMENT { get; set; }

        /// <summary>
        /// The market / exchange under consideration (e.g. gemini, kraken, coinbase, etc).
        /// </summary>
        /// <value>The market / exchange under consideration (e.g. gemini, kraken, coinbase, etc).</value>
        [DataMember(Name = "MARKET", EmitDefaultValue = false)]
        public string MARKET { get; set; }

        /// <summary>
        /// The open price for the historical period, this is based on the closest trade before the period start.
        /// </summary>
        /// <value>The open price for the historical period, this is based on the closest trade before the period start.</value>
        [DataMember(Name = "OPEN", EmitDefaultValue = false)]
        public int OPEN { get; set; }

        /// <summary>
        /// The mapped to asset (quote / counter symbol / coin) (e.g. USD). Only available on instruments that have mapping.
        /// </summary>
        /// <value>The mapped to asset (quote / counter symbol / coin) (e.g. USD). Only available on instruments that have mapping.</value>
        [DataMember(Name = "QUOTE", EmitDefaultValue = false)]
        public string QUOTE { get; set; }

        /// <summary>
        /// The sum of all the trade volumes in the To asset (quote/counter symbol/coin) for the time period. If there were no trades in the time period, 0 will be returned.
        /// </summary>
        /// <value>The sum of all the trade volumes in the To asset (quote/counter symbol/coin) for the time period. If there were no trades in the time period, 0 will be returned.</value>
        [DataMember(Name = "QUOTE_VOLUME", EmitDefaultValue = false)]
        public int QUOTE_VOLUME { get; set; }

        /// <summary>
        /// The sum of all the BUY trade volumes in the to asset (quote/counter symbol/coin) for the time period.
        /// </summary>
        /// <value>The sum of all the BUY trade volumes in the to asset (quote/counter symbol/coin) for the time period.</value>
        [DataMember(Name = "QUOTE_VOLUME_BUY", EmitDefaultValue = false)]
        public int QUOTE_VOLUME_BUY { get; set; }

        /// <summary>
        /// The sum of all the SELL trade volumes in the To asset (quote/counter symbol/coin) for the time period.
        /// </summary>
        /// <value>The sum of all the SELL trade volumes in the To asset (quote/counter symbol/coin) for the time period.</value>
        [DataMember(Name = "QUOTE_VOLUME_SELL", EmitDefaultValue = false)]
        public int QUOTE_VOLUME_SELL { get; set; }

        /// <summary>
        /// The sum of all the UNKNOWN trade volumes in the To asset (quote/counter symbol/coin) for the time period.
        /// </summary>
        /// <value>The sum of all the UNKNOWN trade volumes in the To asset (quote/counter symbol/coin) for the time period.</value>
        [DataMember(Name = "QUOTE_VOLUME_UNKNOWN", EmitDefaultValue = false)]
        public int QUOTE_VOLUME_UNKNOWN { get; set; }

        /// <summary>
        /// The timestamp in seconds of the beginning of the histo period. For minute it would be every minute at the beginning of the minute, for hour it would be the start of the hour and for daily it is 00:00 GMT.
        /// </summary>
        /// <value>The timestamp in seconds of the beginning of the histo period. For minute it would be every minute at the beginning of the minute, for hour it would be the start of the hour and for daily it is 00:00 GMT.</value>
        [DataMember(Name = "TIMESTAMP", EmitDefaultValue = false)]
        public int TIMESTAMP { get; set; }

        /// <summary>
        /// The total number of trades seen in this time period. If there were no trades in the time period, 0 will be returned.
        /// </summary>
        /// <value>The total number of trades seen in this time period. If there were no trades in the time period, 0 will be returned.</value>
        [DataMember(Name = "TOTAL_TRADES", EmitDefaultValue = false)]
        public int TOTAL_TRADES { get; set; }

        /// <summary>
        /// The total number of BUY trades seen in this time period. If there were no trades in the time period, 0 will be returned.
        /// </summary>
        /// <value>The total number of BUY trades seen in this time period. If there were no trades in the time period, 0 will be returned.</value>
        [DataMember(Name = "TOTAL_TRADES_BUY", EmitDefaultValue = false)]
        public int TOTAL_TRADES_BUY { get; set; }

        /// <summary>
        /// The total number of SELL trades seen in this time period. If there were no trades in the time period, 0 will be returned.
        /// </summary>
        /// <value>The total number of SELL trades seen in this time period. If there were no trades in the time period, 0 will be returned.</value>
        [DataMember(Name = "TOTAL_TRADES_SELL", EmitDefaultValue = false)]
        public int TOTAL_TRADES_SELL { get; set; }

        /// <summary>
        /// The total number of UNKNOWN trades seen in this time period. If there were no trades in the time period, 0 will be returned.
        /// </summary>
        /// <value>The total number of UNKNOWN trades seen in this time period. If there were no trades in the time period, 0 will be returned.</value>
        [DataMember(Name = "TOTAL_TRADES_UNKNOWN", EmitDefaultValue = false)]
        public int TOTAL_TRADES_UNKNOWN { get; set; }

        /// <summary>
        /// The type of the message.
        /// </summary>
        /// <value>The type of the message.</value>
        [DataMember(Name = "TYPE", EmitDefaultValue = false)]
        public string TYPE { get; set; }

        /// <summary>
        /// The unit of the historical period update: MINUTE for minute, HOUR for hour and DAY for day.
        /// </summary>
        /// <value>The unit of the historical period update: MINUTE for minute, HOUR for hour and DAY for day.</value>
        [DataMember(Name = "UNIT", EmitDefaultValue = false)]
        public string UNIT { get; set; }

        /// <summary>
        /// The sum of all the trade volumes in the from asset (base symbol / coin) for the time period. If there were no trades in the time period, 0 will be returned.
        /// </summary>
        /// <value>The sum of all the trade volumes in the from asset (base symbol / coin) for the time period. If there were no trades in the time period, 0 will be returned.</value>
        [DataMember(Name = "VOLUME", EmitDefaultValue = false)]
        public int VOLUME { get; set; }

        /// <summary>
        /// The sum of all the BUY trade volumes in the from asset (base symbol / coin) for the time period.
        /// </summary>
        /// <value>The sum of all the BUY trade volumes in the from asset (base symbol / coin) for the time period.</value>
        [DataMember(Name = "VOLUME_BUY", EmitDefaultValue = false)]
        public int VOLUME_BUY { get; set; }

        /// <summary>
        /// The sum of all the SELL trade volumes in the from asset (base symbol / coin) for the time period.
        /// </summary>
        /// <value>The sum of all the SELL trade volumes in the from asset (base symbol / coin) for the time period.</value>
        [DataMember(Name = "VOLUME_SELL", EmitDefaultValue = false)]
        public int VOLUME_SELL { get; set; }

        /// <summary>
        /// The sum of all the UNKNOWN trade volumes in the from asset (base symbol / coin) for the time period.
        /// </summary>
        /// <value>The sum of all the UNKNOWN trade volumes in the from asset (base symbol / coin) for the time period.</value>
        [DataMember(Name = "VOLUME_UNKNOWN", EmitDefaultValue = false)]
        public int VOLUME_UNKNOWN { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SPOTINSTRUMENTHISTODATA {\n");
            sb.Append("  BASE: ").Append(BASE).Append("\n");
            sb.Append("  CLOSE: ").Append(CLOSE).Append("\n");
            sb.Append("  FIRST_TRADE_PRICE: ").Append(FIRST_TRADE_PRICE).Append("\n");
            sb.Append("  FIRST_TRADE_TIMESTAMP: ").Append(FIRST_TRADE_TIMESTAMP).Append("\n");
            sb.Append("  HIGH: ").Append(HIGH).Append("\n");
            sb.Append("  HIGH_TRADE_PRICE: ").Append(HIGH_TRADE_PRICE).Append("\n");
            sb.Append("  HIGH_TRADE_TIMESTAMP: ").Append(HIGH_TRADE_TIMESTAMP).Append("\n");
            sb.Append("  INSTRUMENT: ").Append(INSTRUMENT).Append("\n");
            sb.Append("  LAST_TRADE_PRICE: ").Append(LAST_TRADE_PRICE).Append("\n");
            sb.Append("  LAST_TRADE_TIMESTAMP: ").Append(LAST_TRADE_TIMESTAMP).Append("\n");
            sb.Append("  LOW: ").Append(LOW).Append("\n");
            sb.Append("  LOW_TRADE_PRICE: ").Append(LOW_TRADE_PRICE).Append("\n");
            sb.Append("  LOW_TRADE_TIMESTAMP: ").Append(LOW_TRADE_TIMESTAMP).Append("\n");
            sb.Append("  MAPPED_INSTRUMENT: ").Append(MAPPED_INSTRUMENT).Append("\n");
            sb.Append("  MARKET: ").Append(MARKET).Append("\n");
            sb.Append("  OPEN: ").Append(OPEN).Append("\n");
            sb.Append("  QUOTE: ").Append(QUOTE).Append("\n");
            sb.Append("  QUOTE_VOLUME: ").Append(QUOTE_VOLUME).Append("\n");
            sb.Append("  QUOTE_VOLUME_BUY: ").Append(QUOTE_VOLUME_BUY).Append("\n");
            sb.Append("  QUOTE_VOLUME_SELL: ").Append(QUOTE_VOLUME_SELL).Append("\n");
            sb.Append("  QUOTE_VOLUME_UNKNOWN: ").Append(QUOTE_VOLUME_UNKNOWN).Append("\n");
            sb.Append("  TIMESTAMP: ").Append(TIMESTAMP).Append("\n");
            sb.Append("  TOTAL_TRADES: ").Append(TOTAL_TRADES).Append("\n");
            sb.Append("  TOTAL_TRADES_BUY: ").Append(TOTAL_TRADES_BUY).Append("\n");
            sb.Append("  TOTAL_TRADES_SELL: ").Append(TOTAL_TRADES_SELL).Append("\n");
            sb.Append("  TOTAL_TRADES_UNKNOWN: ").Append(TOTAL_TRADES_UNKNOWN).Append("\n");
            sb.Append("  TYPE: ").Append(TYPE).Append("\n");
            sb.Append("  UNIT: ").Append(UNIT).Append("\n");
            sb.Append("  VOLUME: ").Append(VOLUME).Append("\n");
            sb.Append("  VOLUME_BUY: ").Append(VOLUME_BUY).Append("\n");
            sb.Append("  VOLUME_SELL: ").Append(VOLUME_SELL).Append("\n");
            sb.Append("  VOLUME_UNKNOWN: ").Append(VOLUME_UNKNOWN).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SPOTINSTRUMENTHISTODATA);
        }

        /// <summary>
        /// Returns true if SPOTINSTRUMENTHISTODATA instances are equal
        /// </summary>
        /// <param name="input">Instance of SPOTINSTRUMENTHISTODATA to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SPOTINSTRUMENTHISTODATA input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BASE == input.BASE ||
                    (this.BASE != null &&
                    this.BASE.Equals(input.BASE))
                ) && 
                (
                    this.CLOSE == input.CLOSE ||
                    this.CLOSE.Equals(input.CLOSE)
                ) && 
                (
                    this.FIRST_TRADE_PRICE == input.FIRST_TRADE_PRICE ||
                    this.FIRST_TRADE_PRICE.Equals(input.FIRST_TRADE_PRICE)
                ) && 
                (
                    this.FIRST_TRADE_TIMESTAMP == input.FIRST_TRADE_TIMESTAMP ||
                    this.FIRST_TRADE_TIMESTAMP.Equals(input.FIRST_TRADE_TIMESTAMP)
                ) && 
                (
                    this.HIGH == input.HIGH ||
                    this.HIGH.Equals(input.HIGH)
                ) && 
                (
                    this.HIGH_TRADE_PRICE == input.HIGH_TRADE_PRICE ||
                    this.HIGH_TRADE_PRICE.Equals(input.HIGH_TRADE_PRICE)
                ) && 
                (
                    this.HIGH_TRADE_TIMESTAMP == input.HIGH_TRADE_TIMESTAMP ||
                    this.HIGH_TRADE_TIMESTAMP.Equals(input.HIGH_TRADE_TIMESTAMP)
                ) && 
                (
                    this.INSTRUMENT == input.INSTRUMENT ||
                    (this.INSTRUMENT != null &&
                    this.INSTRUMENT.Equals(input.INSTRUMENT))
                ) && 
                (
                    this.LAST_TRADE_PRICE == input.LAST_TRADE_PRICE ||
                    this.LAST_TRADE_PRICE.Equals(input.LAST_TRADE_PRICE)
                ) && 
                (
                    this.LAST_TRADE_TIMESTAMP == input.LAST_TRADE_TIMESTAMP ||
                    this.LAST_TRADE_TIMESTAMP.Equals(input.LAST_TRADE_TIMESTAMP)
                ) && 
                (
                    this.LOW == input.LOW ||
                    this.LOW.Equals(input.LOW)
                ) && 
                (
                    this.LOW_TRADE_PRICE == input.LOW_TRADE_PRICE ||
                    this.LOW_TRADE_PRICE.Equals(input.LOW_TRADE_PRICE)
                ) && 
                (
                    this.LOW_TRADE_TIMESTAMP == input.LOW_TRADE_TIMESTAMP ||
                    this.LOW_TRADE_TIMESTAMP.Equals(input.LOW_TRADE_TIMESTAMP)
                ) && 
                (
                    this.MAPPED_INSTRUMENT == input.MAPPED_INSTRUMENT ||
                    (this.MAPPED_INSTRUMENT != null &&
                    this.MAPPED_INSTRUMENT.Equals(input.MAPPED_INSTRUMENT))
                ) && 
                (
                    this.MARKET == input.MARKET ||
                    (this.MARKET != null &&
                    this.MARKET.Equals(input.MARKET))
                ) && 
                (
                    this.OPEN == input.OPEN ||
                    this.OPEN.Equals(input.OPEN)
                ) && 
                (
                    this.QUOTE == input.QUOTE ||
                    (this.QUOTE != null &&
                    this.QUOTE.Equals(input.QUOTE))
                ) && 
                (
                    this.QUOTE_VOLUME == input.QUOTE_VOLUME ||
                    this.QUOTE_VOLUME.Equals(input.QUOTE_VOLUME)
                ) && 
                (
                    this.QUOTE_VOLUME_BUY == input.QUOTE_VOLUME_BUY ||
                    this.QUOTE_VOLUME_BUY.Equals(input.QUOTE_VOLUME_BUY)
                ) && 
                (
                    this.QUOTE_VOLUME_SELL == input.QUOTE_VOLUME_SELL ||
                    this.QUOTE_VOLUME_SELL.Equals(input.QUOTE_VOLUME_SELL)
                ) && 
                (
                    this.QUOTE_VOLUME_UNKNOWN == input.QUOTE_VOLUME_UNKNOWN ||
                    this.QUOTE_VOLUME_UNKNOWN.Equals(input.QUOTE_VOLUME_UNKNOWN)
                ) && 
                (
                    this.TIMESTAMP == input.TIMESTAMP ||
                    this.TIMESTAMP.Equals(input.TIMESTAMP)
                ) && 
                (
                    this.TOTAL_TRADES == input.TOTAL_TRADES ||
                    this.TOTAL_TRADES.Equals(input.TOTAL_TRADES)
                ) && 
                (
                    this.TOTAL_TRADES_BUY == input.TOTAL_TRADES_BUY ||
                    this.TOTAL_TRADES_BUY.Equals(input.TOTAL_TRADES_BUY)
                ) && 
                (
                    this.TOTAL_TRADES_SELL == input.TOTAL_TRADES_SELL ||
                    this.TOTAL_TRADES_SELL.Equals(input.TOTAL_TRADES_SELL)
                ) && 
                (
                    this.TOTAL_TRADES_UNKNOWN == input.TOTAL_TRADES_UNKNOWN ||
                    this.TOTAL_TRADES_UNKNOWN.Equals(input.TOTAL_TRADES_UNKNOWN)
                ) && 
                (
                    this.TYPE == input.TYPE ||
                    (this.TYPE != null &&
                    this.TYPE.Equals(input.TYPE))
                ) && 
                (
                    this.UNIT == input.UNIT ||
                    (this.UNIT != null &&
                    this.UNIT.Equals(input.UNIT))
                ) && 
                (
                    this.VOLUME == input.VOLUME ||
                    this.VOLUME.Equals(input.VOLUME)
                ) && 
                (
                    this.VOLUME_BUY == input.VOLUME_BUY ||
                    this.VOLUME_BUY.Equals(input.VOLUME_BUY)
                ) && 
                (
                    this.VOLUME_SELL == input.VOLUME_SELL ||
                    this.VOLUME_SELL.Equals(input.VOLUME_SELL)
                ) && 
                (
                    this.VOLUME_UNKNOWN == input.VOLUME_UNKNOWN ||
                    this.VOLUME_UNKNOWN.Equals(input.VOLUME_UNKNOWN)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BASE != null)
                {
                    hashCode = (hashCode * 59) + this.BASE.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CLOSE.GetHashCode();
                hashCode = (hashCode * 59) + this.FIRST_TRADE_PRICE.GetHashCode();
                hashCode = (hashCode * 59) + this.FIRST_TRADE_TIMESTAMP.GetHashCode();
                hashCode = (hashCode * 59) + this.HIGH.GetHashCode();
                hashCode = (hashCode * 59) + this.HIGH_TRADE_PRICE.GetHashCode();
                hashCode = (hashCode * 59) + this.HIGH_TRADE_TIMESTAMP.GetHashCode();
                if (this.INSTRUMENT != null)
                {
                    hashCode = (hashCode * 59) + this.INSTRUMENT.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LAST_TRADE_PRICE.GetHashCode();
                hashCode = (hashCode * 59) + this.LAST_TRADE_TIMESTAMP.GetHashCode();
                hashCode = (hashCode * 59) + this.LOW.GetHashCode();
                hashCode = (hashCode * 59) + this.LOW_TRADE_PRICE.GetHashCode();
                hashCode = (hashCode * 59) + this.LOW_TRADE_TIMESTAMP.GetHashCode();
                if (this.MAPPED_INSTRUMENT != null)
                {
                    hashCode = (hashCode * 59) + this.MAPPED_INSTRUMENT.GetHashCode();
                }
                if (this.MARKET != null)
                {
                    hashCode = (hashCode * 59) + this.MARKET.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.OPEN.GetHashCode();
                if (this.QUOTE != null)
                {
                    hashCode = (hashCode * 59) + this.QUOTE.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.QUOTE_VOLUME.GetHashCode();
                hashCode = (hashCode * 59) + this.QUOTE_VOLUME_BUY.GetHashCode();
                hashCode = (hashCode * 59) + this.QUOTE_VOLUME_SELL.GetHashCode();
                hashCode = (hashCode * 59) + this.QUOTE_VOLUME_UNKNOWN.GetHashCode();
                hashCode = (hashCode * 59) + this.TIMESTAMP.GetHashCode();
                hashCode = (hashCode * 59) + this.TOTAL_TRADES.GetHashCode();
                hashCode = (hashCode * 59) + this.TOTAL_TRADES_BUY.GetHashCode();
                hashCode = (hashCode * 59) + this.TOTAL_TRADES_SELL.GetHashCode();
                hashCode = (hashCode * 59) + this.TOTAL_TRADES_UNKNOWN.GetHashCode();
                if (this.TYPE != null)
                {
                    hashCode = (hashCode * 59) + this.TYPE.GetHashCode();
                }
                if (this.UNIT != null)
                {
                    hashCode = (hashCode * 59) + this.UNIT.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.VOLUME.GetHashCode();
                hashCode = (hashCode * 59) + this.VOLUME_BUY.GetHashCode();
                hashCode = (hashCode * 59) + this.VOLUME_SELL.GetHashCode();
                hashCode = (hashCode * 59) + this.VOLUME_UNKNOWN.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
