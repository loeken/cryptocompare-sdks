/*
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 *
 * CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: data@cryptocompare.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SPOTINSTRUMENTMARKETDATA
    /// </summary>
    [DataContract(Name = "SPOT_INSTRUMENT_MARKET_DATA")]
    public partial class SPOTINSTRUMENTMARKETDATA : IEquatable<SPOTINSTRUMENTMARKETDATA>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SPOTINSTRUMENTMARKETDATA" /> class.
        /// </summary>
        /// <param name="bASE">The mapped from asset (base / symbol/ coin), e.g. BTC. Only available on instruments that have been mapped..</param>
        /// <param name="cCSEQ">Our internal sequence number for this tick update. This is unique per market / exchange and trading pair / instrument. It will always be increasing by 1 for each new tick update we send..</param>
        /// <param name="cURRENTDAYHIGH">The highest trade price of the current day (00:00:00 GMT/UTC). If there were no updates in the time period, the open price will be given. Given in the quote asset..</param>
        /// <param name="cURRENTDAYLOW">The lowest trade price of the current day (00:00:00 GMT/UTC). If there were no updates in the time period, the open price will be given. Given in the quote asset..</param>
        /// <param name="cURRENTDAYOPEN">The open price for the current day, this is based on the closest trade occurring before the start of the current day (00:00:00 GMT/UTC). Given in the quote asset..</param>
        /// <param name="cURRENTDAYQUOTEVOLUME">The sum of all trade quote quantities from the start of the current day (00:00:00 GMT/UTC) until now. Given in the quote asset..</param>
        /// <param name="cURRENTDAYQUOTEVOLUMEBUY">The sum of all buy trade quote quantities from the start of the current day (00:00:00 GMT/UTC) until now. Given in the quote asset..</param>
        /// <param name="cURRENTDAYQUOTEVOLUMESELL">The sum of all sell trade quote quantities from the start of the current day (00:00:00 GMT/UTC) until now. Given in the quote asset..</param>
        /// <param name="cURRENTDAYQUOTEVOLUMEUNKNOWN">The sum of all unknown trade quote quantities from the start of the current day (00:00:00 GMT/UTC) until now. Given in the quote asset..</param>
        /// <param name="cURRENTDAYTOTALTRADES">The total number of trades that have occurred since the start of the current day (00:00:00 GMT/UTC)..</param>
        /// <param name="cURRENTDAYTOTALTRADESBUY">The total number of buy trades since the start of the current day (00:00:00 GMT/UTC)..</param>
        /// <param name="cURRENTDAYTOTALTRADESSELL">The total number of sell trades since the start of the current day (00:00:00 GMT/UTC)..</param>
        /// <param name="cURRENTDAYTOTALTRADESUNKNOWN">The total number of unknown trades since the start of the current day (00:00:00 GMT/UTC)..</param>
        /// <param name="cURRENTDAYVOLUME">The sum of all trade quantities from the start of the current day (00:00:00 GMT/UTC) until now. Given in the base asset..</param>
        /// <param name="cURRENTDAYVOLUMEBUY">The sum of all buy trade quantities from the start of the current day (00:00:00 GMT/UTC) until now. Given in the base asset..</param>
        /// <param name="cURRENTDAYVOLUMESELL">The sum of all sell trade quantities from the start of the current day (00:00:00 GMT/UTC) until now. Given in the base asset..</param>
        /// <param name="cURRENTDAYVOLUMEUNKNOWN">The sum of all unknown trade quantities from the start of the current day (00:00:00 GMT/UTC) until now. Given in the base asset..</param>
        /// <param name="cURRENTHOURHIGH">The highest trade price of the current hour. If there were no updates in the time period, the open price will be given. Given in the quote asset..</param>
        /// <param name="cURRENTHOURLOW">The lowest trade price of the current hour. If there were no updates in the time period, the open price will be given. Given in the quote asset..</param>
        /// <param name="cURRENTHOUROPEN">The open price for the current hour, this is based on the closest trade occurring before the start of the current hour. Given in the quote asset..</param>
        /// <param name="cURRENTHOURQUOTEVOLUME">The sum of all trade quote quantities from the start of the current hour until now. Given in the quote asset..</param>
        /// <param name="cURRENTHOURQUOTEVOLUMEBUY">The sum of all buy trade quote quantities from the start of the current hour until now. Given in the quote asset..</param>
        /// <param name="cURRENTHOURQUOTEVOLUMESELL">The sum of all sell trade quote quantities from the start of the current hour until now. Given in the quote asset..</param>
        /// <param name="cURRENTHOURQUOTEVOLUMEUNKNOWN">The sum of all unknown trade quote quantities from the start of the current hour until now. Given in the quote asset..</param>
        /// <param name="cURRENTHOURTOTALTRADES">The total number of trades that have occurred since the start of the current hour..</param>
        /// <param name="cURRENTHOURTOTALTRADESBUY">The total number of buy trades since the start of the current hour..</param>
        /// <param name="cURRENTHOURTOTALTRADESSELL">The total number of sell trades since the start of the current hour..</param>
        /// <param name="cURRENTHOURTOTALTRADESUNKNOWN">The total number of unknown trades since the start of the current hour..</param>
        /// <param name="cURRENTHOURVOLUME">The sum of all trade quantities from the start of the current hour until now. Given in the base asset..</param>
        /// <param name="cURRENTHOURVOLUMEBUY">The sum of all buy trade quantities from the start of the current hour until now. Given in the base asset..</param>
        /// <param name="cURRENTHOURVOLUMESELL">The sum of all sell trade quantities from the start of the current hour until now. Given in the base asset..</param>
        /// <param name="cURRENTHOURVOLUMEUNKNOWN">The sum of all trade quote quantities from the start of the current hour until now. Given in the base asset..</param>
        /// <param name="cURRENTMONTHHIGH">The highest traded price of the month excluding the current day. The period will run from the 1st of the month - 00:00:00 GMT/UTC to the beginning - 00:00:00 GMT/UTC of the current day of the month. If today is the 1st of the month, this value will be CURRENT_MONTH_OPEN. Given in the quote asset..</param>
        /// <param name="cURRENTMONTHLOW">The lowest traded price of the month excluding the current day. The period will run from the 1st of the month - 00:00:00 GMT/UTC to the beginning - 00:00:00 GMT/UTC of the current day of the month. If today is the 1st of the month, this value will be CURRENT_MONTH_OPEN. Given in the quote asset..</param>
        /// <param name="cURRENTMONTHOPEN">The price of the closest trade to the 1st day (00:00:00 GMT/UTC) of this month. In a highly liquid market, this would be the last trade that happened on the previous month at (23:59:59 999 GMT/UTC). This will always be supplied and there is no need to do any calculation to get the full monthly value. Given in the quote asset..</param>
        /// <param name="cURRENTMONTHQUOTEVOLUME">The sum of all trade quote quantities from the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the first of the month, this value will be 0. Given in the quote asset..</param>
        /// <param name="cURRENTMONTHQUOTEVOLUMEBUY">The sum of all buy trade quote quantities from the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the first of the month, this value will be 0. Given in the quote asset..</param>
        /// <param name="cURRENTMONTHQUOTEVOLUMESELL">The sum of all sell trade quote quantities from the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the first of the month, this value will be 0. Given in the quote asset..</param>
        /// <param name="cURRENTMONTHQUOTEVOLUMEUNKNOWN">The sum of all unknown trade quote quantities from the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the first of the month, this value will be 0. Given in the quote asset..</param>
        /// <param name="cURRENTMONTHTOTALTRADES">The total number of trades between the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the 1st of the month, this value will be 0..</param>
        /// <param name="cURRENTMONTHTOTALTRADESBUY">The total number of buy trades between the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the 1st of the month, this value will be 0..</param>
        /// <param name="cURRENTMONTHTOTALTRADESSELL">The total number of sell trades between the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the 1st of the month, this value will be 0..</param>
        /// <param name="cURRENTMONTHTOTALTRADESUNKNOWN">The total number of unknown trades between the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the 1st of the month, this value will be 0..</param>
        /// <param name="cURRENTMONTHVOLUME">The sum of all trade quantities from the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the first of the month, this value will be 0. Given in the base asset..</param>
        /// <param name="cURRENTMONTHVOLUMEBUY">The sum of all buy trade quantities from the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the first of the month, this value will be 0. Given in the base asset..</param>
        /// <param name="cURRENTMONTHVOLUMESELL">The sum of all sell trade quantities from the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the first of the month, this value will be 0. Given in the base asset..</param>
        /// <param name="cURRENTMONTHVOLUMEUNKNOWN">The sum of all unknown trade quantities from the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the first of the month, this value will be 0. Given in the base asset..</param>
        /// <param name="cURRENTWEEKHIGH">The highest traded price of the week excluding the current day. The period will run from Monday - 00:00:00 GMT/UTC to the beginning - 00:00:00 GMT/UTC of the current day of the week. If today is Monday, this value will be the same as CURRENT_WEEK_OPEN. Given in the quote asset..</param>
        /// <param name="cURRENTWEEKLOW">The lowest traded price of the week excluding the current day. The period will run from Monday - 00:00:00 GMT/UTC to the beginning - 00:00:00 GMT/UTC of the current day of the week. If today is Monday, this value will be CURRENT_WEEK_LOW. Given in the quote asset..</param>
        /// <param name="cURRENTWEEKOPEN">The price of the closest trade to Monday (00:00:00 GMT/UTC) of this week. In a highly liquid market, this would be the last trade that happened on the previous Sunday at (23:59:59 999 GMT/UTC). This will always be supplied and there is no need to do any calculation to get the full weekly value. Given in the quote asset..</param>
        /// <param name="cURRENTWEEKQUOTEVOLUME">The sum of all trade quote quantities from Monday (00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0. Given in the quote asset..</param>
        /// <param name="cURRENTWEEKQUOTEVOLUMEBUY">The sum of all buy trade quote quantities from Monday (00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0. Given in the quote asset..</param>
        /// <param name="cURRENTWEEKQUOTEVOLUMESELL">The sum of all sell trade quote quantities from Monday (00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0. Given in the quote asset..</param>
        /// <param name="cURRENTWEEKQUOTEVOLUMEUNKNOWN">The sum of all unknown trade quote quantities from Monday (00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0. Given in the quote asset..</param>
        /// <param name="cURRENTWEEKTOTALTRADES">The total number of trades between Monday (00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0..</param>
        /// <param name="cURRENTWEEKTOTALTRADESBUY">The total number of buy trades between Monday (00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0..</param>
        /// <param name="cURRENTWEEKTOTALTRADESSELL">The total number of sell trades between Monday (00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0..</param>
        /// <param name="cURRENTWEEKTOTALTRADESUNKNOWN">The total number of unknown trades between Monday (00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0..</param>
        /// <param name="cURRENTWEEKVOLUME">The sum of all trade quantities from Monday (00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0. Given in the base asset..</param>
        /// <param name="cURRENTWEEKVOLUMEBUY">The sum of all buy trade quantities from Monday (00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0. Given in the base asset..</param>
        /// <param name="cURRENTWEEKVOLUMESELL">The sum of all sell trade quantities from Monday (00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0. Given in the base asset..</param>
        /// <param name="cURRENTWEEKVOLUMEUNKNOWN">The sum of all unknown trade quantities from Monday (00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0. Given in the base asset..</param>
        /// <param name="cURRENTYEARHIGH">The highest traded price of the year excluding the current day. The period runs from the 1st of January - 00:00:00 GMT/UTC to the beginning - 00:00:00 GMT/UTC of the current day of the year. If today is the 1st of January, this value will be CURRENT_YEAR_OPEN. Given in the quote asset..</param>
        /// <param name="cURRENTYEARLOW">The lowest traded price of the year excluding the current day. The period runs from the 1st of January - 00:00:00 GMT/UTC to the beginning - 00:00:00 GMT/UTC of the current day of the year. If today is the 1st of January, this value will be CURRENT_YEAR_OPEN. Given in the quote asset..</param>
        /// <param name="cURRENTYEAROPEN">The price of the closest trade to the 1st of January (00:00:00 GMT/UTC) of this year. In a highly liquid market, this would be the last trade that happened on on the 31st of December of the previous year (23:59:59 999 GMT/UTC). This will always be supplied and there is no need to do any calculation to get the full yearly value. Given in the quote asset..</param>
        /// <param name="cURRENTYEARQUOTEVOLUME">The sum of all trade quote quantities from the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0. Given in the quote asset..</param>
        /// <param name="cURRENTYEARQUOTEVOLUMEBUY">The sum of all buy trade quote quantities from the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0. Given in the quote asset..</param>
        /// <param name="cURRENTYEARQUOTEVOLUMESELL">The sum of all sell trade quote quantities from the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0. Given in the quote asset..</param>
        /// <param name="cURRENTYEARQUOTEVOLUMEUNKNOWN">The sum of all unknown trade quote quantities from the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0. Given in the quote asset..</param>
        /// <param name="cURRENTYEARTOTALTRADES">The total number of trades between the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0..</param>
        /// <param name="cURRENTYEARTOTALTRADESBUY">The total number of buy trades between the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0..</param>
        /// <param name="cURRENTYEARTOTALTRADESSELL">The total number of sell trades between the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0..</param>
        /// <param name="cURRENTYEARTOTALTRADESUNKNOWN">The total number of unknown trades between the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0..</param>
        /// <param name="cURRENTYEARVOLUME">The sum of all trade quantities from the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0. Given in the base asset..</param>
        /// <param name="cURRENTYEARVOLUMEBUY">The sum of all buy trade quantities from the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0. Given in the base asset..</param>
        /// <param name="cURRENTYEARVOLUMESELL">The sum of all sell trade quantities from the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0. Given in the base asset..</param>
        /// <param name="cURRENTYEARVOLUMEUNKNOWN">The sum of all unknown trade quantities from the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0. Given in the base asset..</param>
        /// <param name="iNSTRUMENT">The unmapped instrument ID.</param>
        /// <param name="lASTPROCESSEDTRADECCSEQ">The CCSEQ of the latest trade..</param>
        /// <param name="lASTPROCESSEDTRADEPRICE">The price in the quote asset of the last trade processed, as reported by the market / exchange..</param>
        /// <param name="lASTPROCESSEDTRADEQUANTITY">The quantity of the last processed trade in the from symbol (base / coin)..</param>
        /// <param name="lASTPROCESSEDTRADEQUOTEQUANTITY">The  volume of the last processed trade in the to asset / quote..</param>
        /// <param name="lASTPROCESSEDTRADESIDE">The side of the last processed trade..</param>
        /// <param name="lASTPROCESSEDTRADETS">The timestamp in seconds that the last trade was processed, as reported by the market / exchange. If the market / exchange does not provide this information, the timestamp that the trade was received will be returned..</param>
        /// <param name="lASTTRADECCSEQ">The CCSEQ of the latest trade..</param>
        /// <param name="lASTTRADEID">The ID of the latest trade..</param>
        /// <param name="lASTTRADEQUANTITY">The quantity of the latest trade in the from symbol (base / coin)..</param>
        /// <param name="lASTTRADEQUOTEQUANTITY">The volume of the latest trade in the to asset / quote..</param>
        /// <param name="lASTTRADESIDE">The side of the latest trade..</param>
        /// <param name="lIFETIMEFIRSTTRADETS">The timestamp of the first trade ever recorded for the instrument.</param>
        /// <param name="lIFETIMEHIGH">The price of the highest trade ever executed for this instrument. Given in the quote asset..</param>
        /// <param name="lIFETIMEHIGHTS">The the timestamp of the highest trade ever executed for this instrument. Given in the quote asset..</param>
        /// <param name="lIFETIMELOW">The price of the lowest trade ever executed for this instrument. Given in the quote asset..</param>
        /// <param name="lIFETIMELOWTS">The timestamp of the lowest trade ever executed for this instrument. Given in the quote asset..</param>
        /// <param name="lIFETIMEOPEN">The price of the first trade of the instrument. Given in the quote asset..</param>
        /// <param name="lIFETIMEQUOTEVOLUME">The sum of all trade quote quantities of all the trades of this instrument. Given in the quote asset..</param>
        /// <param name="lIFETIMEQUOTEVOLUMEBUY">The sum of all buy trade quote quantities of all the trades of this instrument. Given in the quote asset..</param>
        /// <param name="lIFETIMEQUOTEVOLUMESELL">The sum of all sell trade quote quantities of all the trades of this instrument. Given in the quote asset..</param>
        /// <param name="lIFETIMEQUOTEVOLUMEUNKNOWN">The sum of all unknown trade quote quantities of all the trades of this instrument. Given in the quote asset..</param>
        /// <param name="lIFETIMETOTALTRADES">The total number of all trades that have ever been executed for this instrument..</param>
        /// <param name="lIFETIMETOTALTRADESBUY">The total number of all buy trades that have ever been executed for this instrument..</param>
        /// <param name="lIFETIMETOTALTRADESSELL">The total number of all sell trades that have ever been executed for this instrument..</param>
        /// <param name="lIFETIMETOTALTRADESUNKNOWN">The total number of all unknown trades that have ever been executed for this instrument..</param>
        /// <param name="lIFETIMEVOLUME">The sum of all trade quantities of all the trades of this instrument. Given in the base asset..</param>
        /// <param name="lIFETIMEVOLUMEBUY">The sum of all buy trade quantities of all the trades of this instrument. Given in the base asset..</param>
        /// <param name="lIFETIMEVOLUMESELL">The sum of all sell trade quantities of all the trades of this instrument. Given in the base asset..</param>
        /// <param name="lIFETIMEVOLUMEUNKNOWN">The sum of all unknown trade quantities of all the trades of this instrument. Given in the base asset..</param>
        /// <param name="mAPPEDINSTRUMENT">The mapped instrument ID, derived from our mapping rules. This takes the form: \&quot;BASE-QUOTE\&quot; (e.g. BTC-USD). Only available on instruments that have been mapped..</param>
        /// <param name="mARKET">The market / exchange under consideration (e.g. coinbase, kraken, etc)..</param>
        /// <param name="mOVING180DAYHIGH">The  highest traded price of the period. Here, the period runs from 180 days ago up to the beginning of the current day (179 days in total). Given in the quote asset..</param>
        /// <param name="mOVING180DAYLOW">The lowest traded price of the period. Here, the period runs from 180 days ago up to the beginning of the current day (179 days in total). Given in the quote asset..</param>
        /// <param name="mOVING180DAYOPEN">The price of the closest trade to the period start date (179 days + current day - 00:00:00 GMT/UTC to now). This will always be supplied and there is no need to do any calculation to get the full 180 day value. Given in the quote asset..</param>
        /// <param name="mOVING180DAYQUOTEVOLUME">The sum of all trade quote quantities from 180 days ago up to the beginning of the current day (179 days in total). Given in the quote asset..</param>
        /// <param name="mOVING180DAYQUOTEVOLUMEBUY">The sum of all buy trade quote quantities from 180 days ago up to the beginning of the current day (179 days in total). Given in the quote asset..</param>
        /// <param name="mOVING180DAYQUOTEVOLUMESELL">The sum of all sell trade quote quantities from 180 days ago up to the beginning of the current day (179 days in total). Given in the quote asset..</param>
        /// <param name="mOVING180DAYQUOTEVOLUMEUNKNOWN">The sum of all unknown trade quote quantities from 180 days ago up to the beginning of the current day (179 days in total). Given in the quote asset..</param>
        /// <param name="mOVING180DAYTOTALTRADES">The total number of trades that have occurred in the period from 180 days ago to the beginning (00:00:00 GMT/UTC) of the current day (179 days in total)..</param>
        /// <param name="mOVING180DAYTOTALTRADESBUY">The total number of buy trades that have occurred in the period from 180 days ago to the beginning (00:00:00 GMT/UTC) of the current day (179 days in total)..</param>
        /// <param name="mOVING180DAYTOTALTRADESSELL">The total number of sell trades that have occurred in the period from 180 days ago to the beginning (00:00:00 GMT/UTC) of the current day (179 days in total)..</param>
        /// <param name="mOVING180DAYTOTALTRADESUNKNOWN">The total number of unknown trades that have occurred in the period from 180 days ago to the beginning (00:00:00 GMT/UTC) of the current day (179 days in total)..</param>
        /// <param name="mOVING180DAYVOLUME">The sum of all trade quantities from 180 days ago up to the beginning of the current day (179 days in total). Given in the base asset..</param>
        /// <param name="mOVING180DAYVOLUMEBUY">The sum of all trade quantities from 180 days ago up to the beginning of the current day (179 days in total). Given in the base asset..</param>
        /// <param name="mOVING180DAYVOLUMESELL">The sum of all sell trade quantities from 180 days ago up to the beginning of the current day (179 days in total). Given in the base asset..</param>
        /// <param name="mOVING180DAYVOLUMEUNKNOWN">The sum of all unknown trade quantities from 180 days ago up to the beginning of the current day (179 days in total). Given in the base asset..</param>
        /// <param name="mOVING24HOURHIGH">The highest traded price of the period. Here, the period runs from 24 hours ago up to the beginning of the current hour (23 hours in total). Given in the quote asset..</param>
        /// <param name="mOVING24HOURLOW">The lowest traded price of the period. Here, the period runs from 24 hours ago up to the beginning of the current hour (23 hours in total). Given in the quote asset..</param>
        /// <param name="mOVING24HOUROPEN">The price of the closest trade to the period start date (23 hours + current hour ago). This will always be supplied and there is no need to do any calculation to get the full 24 hour value. Given in the quote asset..</param>
        /// <param name="mOVING24HOURQUOTEVOLUME">The sum of all trade quote quantities from 24 hours ago up to the beginning of the current hour (23 hours in total). Given in the quote asset..</param>
        /// <param name="mOVING24HOURQUOTEVOLUMEBUY">The sum of all buy trade quote quantities from 24 hours ago up to the beginning of the current hour (23 hours in total). Given in the quote asset..</param>
        /// <param name="mOVING24HOURQUOTEVOLUMESELL">The sum of all sell trade quote quantities from 24 hours ago up to the beginning of the current hour (23 hours in total). Given in the quote asset..</param>
        /// <param name="mOVING24HOURQUOTEVOLUMEUNKNOWN">The sum of all unknown trade quote quantities from 24 hours ago up to the beginning of the current hour (23 hours in total). Given in the quote asset..</param>
        /// <param name="mOVING24HOURTOTALTRADES">The total number of trades that have occurred in the period running from 24 hours ago to the beginning (xx:00:00) of the current hour (23 hours in total)..</param>
        /// <param name="mOVING24HOURTOTALTRADESBUY">The total number of buy trades that have occurred in the period running from 24 hours ago to the beginning (xx:00:00) of the current hour (23 hours in total)..</param>
        /// <param name="mOVING24HOURTOTALTRADESSELL">The total number of sell trades that have occurred in the period running from 24 hours ago to the beginning (xx:00:00) of the current hour (23 hours in total)..</param>
        /// <param name="mOVING24HOURTOTALTRADESUNKNOWN">The total number of unknown trades that have occurred in the period running from 24 hours ago to the beginning (xx:00:00) of the current hour (23 hours in total)..</param>
        /// <param name="mOVING24HOURVOLUME">The sum of all trade quantities from 24 hours ago up to the beginning of the current hour (23 hours in total). Given in the base asset..</param>
        /// <param name="mOVING24HOURVOLUMEBUY">The sum of all buy trade quantities from 24 hours ago up to the beginning of the current hour (23 hours in total). Given in the base asset..</param>
        /// <param name="mOVING24HOURVOLUMESELL">The sum of all sell trade quantities from 24 hours ago up to the beginning of the current hour (23 hours in total). Given in the base asset..</param>
        /// <param name="mOVING24HOURVOLUMEUNKNOWN">The sum of all unknown trade quantities from 24 hours ago up to the beginning of the current hour (23 hours in total). Given in the base asset..</param>
        /// <param name="mOVING30DAYHIGH">The highest traded price of the period. Here, the period runs from 30 days ago up to the beginning of the current day (29 days in total). Given in the quote asset..</param>
        /// <param name="mOVING30DAYLOW">The lowest traded price of the period. Here, the period runs from 30 days ago up to the beginning of the current day (29 days in total). Given in the quote asset..</param>
        /// <param name="mOVING30DAYOPEN">The price of the closest trade to the period start date (29 days + current day - 00:00:00 GMT/UTC to now).  This will always be supplied and there is no need to do any calculation to get the full 30 day value. Given in the quote asset..</param>
        /// <param name="mOVING30DAYQUOTEVOLUME">The sum of all trade quote quantities from 30 days ago up to the beginning of the current day (29 days in total). Given in the quote asset..</param>
        /// <param name="mOVING30DAYQUOTEVOLUMEBUY">The sum of all buy trade quote quantities from 30 days ago up to the beginning of the current day (29 days in total). Given in the quote asset..</param>
        /// <param name="mOVING30DAYQUOTEVOLUMESELL">The sum of all sell trade quote quantities from 30 days ago up to the beginning of the current day (29 days in total). Given in the quote asset..</param>
        /// <param name="mOVING30DAYQUOTEVOLUMEUNKNOWN">The sum of all unknown trade quote quantities from 30 days ago up to the beginning of the current day (29 days in total). Given in the quote asset..</param>
        /// <param name="mOVING30DAYTOTALTRADES">The total number of trades that have occurred in the period running from 30 days ago to the beginning (00:00:00 GMT/UTC) of the current day (29 days in total)..</param>
        /// <param name="mOVING30DAYTOTALTRADESBUY">The total number of buy trades that have occurred in the period running from 30 days ago to the beginning (00:00:00 GMT/UTC) of the current day (29 days in total)..</param>
        /// <param name="mOVING30DAYTOTALTRADESSELL">The total number of sell trades that have occurred in the period running from 30 days ago to the beginning (00:00:00 GMT/UTC) of the current day (29 days in total)..</param>
        /// <param name="mOVING30DAYTOTALTRADESUNKNOWN">The total number of unknown trades that have occurred in the period running from 30 days ago to the beginning (00:00:00 GMT/UTC) of the current day (29 days in total)..</param>
        /// <param name="mOVING30DAYVOLUME">The sum of all trade quantities from 30 days ago up to the beginning of the current day (29 days in total). Given in the base asset..</param>
        /// <param name="mOVING30DAYVOLUMEBUY">The sum of all buy trade quantities from 30 days ago up to the beginning of the current day (29 days in total). Given in the base asset..</param>
        /// <param name="mOVING30DAYVOLUMESELL">The sum of all sell trade quantities from 30 days ago up to the beginning of the current day (29 days in total). Given in the base asset..</param>
        /// <param name="mOVING30DAYVOLUMEUNKNOWN">The sum of all unknown trade quantities from 30 days ago up to the beginning of the current day (29 days in total). Given in the base asset..</param>
        /// <param name="mOVING365DAYHIGH">The highest price of the period. Here, the period runs from 365 days ago up to the beginning of the current day (364 days in total). Given in the quote asset..</param>
        /// <param name="mOVING365DAYLOW">The lowest traded price of the period. Here, the period runs from 365 days ago up to the beginning of the current day (364 days in total). Given in the quote asset..</param>
        /// <param name="mOVING365DAYOPEN">The price of the closest trade to the period start date (364 days + current day - 00:00:00 GMT/UTC to now).  This will always be supplied and there is no need to do any calculation to get the full 365 day value. Given in the quote asset..</param>
        /// <param name="mOVING365DAYQUOTEVOLUME">The sum of all trade quote quantities from 365 days ago up to the beginning of the current day (364 days in total). Given in the quote asset..</param>
        /// <param name="mOVING365DAYQUOTEVOLUMEBUY">The sum of all buy trade quote quantities from 365 days ago up to the beginning of the current day (364 days in total). Given in the quote asset..</param>
        /// <param name="mOVING365DAYQUOTEVOLUMESELL">The sum of all sell trade quote quantities from 365 days ago up to the beginning of the current day (364 days in total). Given in the quote asset..</param>
        /// <param name="mOVING365DAYQUOTEVOLUMEUNKNOWN">The sum of all unknown trade quote quantities from 365 days ago up to the beginning of the current day (364 days in total). Given in the quote asset..</param>
        /// <param name="mOVING365DAYTOTALTRADES">The total number of trades that have occurred during the period running from 365 days ago to the beginning (00:00:00 GMT/UTC) of the current day (364 days in total)..</param>
        /// <param name="mOVING365DAYTOTALTRADESBUY">The total number of buy trades that have occurred during the period running from 365 days ago to the beginning (00:00:00 GMT/UTC) of the current day (364 days in total)..</param>
        /// <param name="mOVING365DAYTOTALTRADESSELL">The total number of sell trades that have occurred during the period running from 365 days ago to the beginning (00:00:00 GMT/UTC) of the current day (364 days in total)..</param>
        /// <param name="mOVING365DAYTOTALTRADESUNKNOWN">The total number of unknown trades that have occurred during the period running from 365 days ago to the beginning (00:00:00 GMT/UTC) of the current day (364 days in total)..</param>
        /// <param name="mOVING365DAYVOLUME">The sum of all trade quantities from 365 days ago up to the beginning of the current day (364 days in total). Given in the base asset..</param>
        /// <param name="mOVING365DAYVOLUMEBUY">The sum of all trade quantities from 365 days ago up to the beginning of the current day (364 days in total). Given in the base asset..</param>
        /// <param name="mOVING365DAYVOLUMESELL">The sum of all sell trade quantities from 365 days ago up to the beginning of the current day (364 days in total). Given in the base asset..</param>
        /// <param name="mOVING365DAYVOLUMEUNKNOWN">The sum of all unknown trade quantities from 365 days ago up to the beginning of the current day (364 days in total). Given in the base asset..</param>
        /// <param name="mOVING7DAYHIGH">The highest traded price of the period. Here, the period runs from 7 days ago up to the beginning of the current day (6 days in total). Given in the quote asset..</param>
        /// <param name="mOVING7DAYLOW">The lowest traded price of the period. Here, the period runs from 7 days ago up to the beginning of the current day (6 days in total). Given in the quote asset..</param>
        /// <param name="mOVING7DAYOPEN">The price of the closest trade to the period start date (6 days + current day - 00:00:00 GMT/UTC to now). This will always be supplied and there is no need to do any calculation to get the full 7 day value. Given in the quote asset..</param>
        /// <param name="mOVING7DAYQUOTEVOLUME">The sum of all trade quote quantities from 7 days ago up to the beginning of the current day (6 days in total). Given in the quote asset..</param>
        /// <param name="mOVING7DAYQUOTEVOLUMEBUY">The sum of all buy trade quote quantities from 7 days ago up to the beginning of the current day (6 days in total). Given in the quote asset..</param>
        /// <param name="mOVING7DAYQUOTEVOLUMESELL">The sum of all sell trade quote quantities from 7 days ago up to the beginning of the current day (6 days in total). Given in the quote asset..</param>
        /// <param name="mOVING7DAYQUOTEVOLUMEUNKNOWN">The sum of all unknown trade quote quantities from 7 days ago up to the beginning of the current day (6 days in total). Given in the quote asset..</param>
        /// <param name="mOVING7DAYTOTALTRADES">The total number of trades that have occurred in the period running from 7 days ago to the beginning (00:00:00 GMT/UTC) of the current day (6 days in total)..</param>
        /// <param name="mOVING7DAYTOTALTRADESBUY">The total number of buy trades that have occurred in the period running from 7 days ago to the beginning (00:00:00 GMT/UTC) of the current day (6 days in total)..</param>
        /// <param name="mOVING7DAYTOTALTRADESSELL">The total number of sell trades that have occurred in the period running from 7 days ago to the beginning (00:00:00 GMT/UTC) of the current day (6 days in total)..</param>
        /// <param name="mOVING7DAYTOTALTRADESUNKNOWN">The total number of unknown trades that have occurred in the period running from 7 days ago to the beginning (00:00:00 GMT/UTC) of the current day (6 days in total)..</param>
        /// <param name="mOVING7DAYVOLUME">The sum of all trade quantities from 7 days ago up to the beginning of the current day (6 days in total). Given in the base asset..</param>
        /// <param name="mOVING7DAYVOLUMEBUY">The sum of all buy trade quantities from 7 days ago up to the beginning of the current day (6 days in total). Given in the base asset..</param>
        /// <param name="mOVING7DAYVOLUMESELL">The sum of all sell trade quantities from 7 days ago up to the beginning of the current day (6 days in total). Given in the base asset..</param>
        /// <param name="mOVING7DAYVOLUMEUNKNOWN">The sum of all unknown trade quantities from 7 days ago up to the beginning of the current day (6 days in total). Given in the base asset..</param>
        /// <param name="mOVING90DAYHIGH">The highest value between the MOVING_90_DAY_OPEN and the highest traded price of the period. Here, the period runs from 90 days ago up to the beginning of the current day (89 days in total). Given in the quote asset..</param>
        /// <param name="mOVING90DAYLOW">The lowest traded price of the period. Here, the period runs from 90 days ago up to the beginning of the current day (89 days in total). Given in the quote asset..</param>
        /// <param name="mOVING90DAYOPEN">The price of the closest trade to the period start date (89 days + current day - 00:00:00 GMT/UTC to now).  This will always be supplied and there is no need to do any calculation to get the full 90 day value. Given in the quote asset..</param>
        /// <param name="mOVING90DAYQUOTEVOLUME">The sum of all trade quote quantities from 90 days ago up to the beginning of the current day (89 days in total). Given in the quote asset..</param>
        /// <param name="mOVING90DAYQUOTEVOLUMEBUY">The sum of all buy trade quote quantities from 90 days ago up to the beginning of the current day (89 days in total). Given in the quote asset..</param>
        /// <param name="mOVING90DAYQUOTEVOLUMESELL">The sum of all sell trade quote quantities from 90 days ago up to the beginning of the current day (89 days in total). Given in the quote asset..</param>
        /// <param name="mOVING90DAYQUOTEVOLUMEUNKNOWN">The sum of all unknown trade quote quantities from 90 days ago up to the beginning of the current day (89 days in total). Given in the quote asset..</param>
        /// <param name="mOVING90DAYTOTALTRADES">The total number of trades that have occurred in the period running from 90 days ago to the beginning (00:00:00 GMT/UTC) of the current day (89 days in total)..</param>
        /// <param name="mOVING90DAYTOTALTRADESBUY">The total number of buy trades that have occurred in the period running from 90 days ago to the beginning (00:00:00 GMT/UTC) of the current day (89 days in total)..</param>
        /// <param name="mOVING90DAYTOTALTRADESSELL">The total number of sell trades that have occurred in the period running from 90 days ago to the beginning (00:00:00 GMT/UTC) of the current day (89 days in total)..</param>
        /// <param name="mOVING90DAYTOTALTRADESUNKNOWN">The total number of unknown trades that have occurred in the period running from 90 days ago to the beginning (00:00:00 GMT/UTC) of the current day (89 days in total)..</param>
        /// <param name="mOVING90DAYVOLUME">The sum of all trade quantities from 90 days ago up to the beginning of the current day (89 days in total). Given in the base asset..</param>
        /// <param name="mOVING90DAYVOLUMEBUY">The sum of all trade quantities from 90 days ago up to the beginning of the current day (89 days in total). Given in the base asset..</param>
        /// <param name="mOVING90DAYVOLUMESELL">The sum of all sell trade quantities from 90 days ago up to the beginning of the current day (89 days in total). Given in the base asset..</param>
        /// <param name="mOVING90DAYVOLUMEUNKNOWN">The sum of all unknown trade quantities from 90 days ago up to the beginning of the current day (89 days in total). Given in the base asset..</param>
        /// <param name="pRICE">The price in the to asset (quote / number symbol / coin) of the latest trade. I.e. for a BTC-USD trade, how much was paid for one BTC in USD)..</param>
        /// <param name="pRICEFLAG">The flag indicating whether the price has increased, decreased, or not changed.</param>
        /// <param name="pRICELASTUPDATETS">The timestamp in seconds as reported by the market / exchange. If the market /exchange does not provide this information, the received timestamp will be returned..</param>
        /// <param name="qUOTE">The mapped to asset (quote / counter symbol / coin), e.g. USD. Only available on instruments that have been mapped..</param>
        /// <param name="tOPASKLASTUPDATETS">The timestamp in seconds of the last time the top ask was updated, as reported by the market / exchange. If the market / exchange does not provide this information, the received timestamp will be returned..</param>
        /// <param name="tOPASKPRICE">The price of the top ask in the to asset (quote / numberer symbol / coin). For a BTC-USD order book, this will be the best price someone is willing to sell some BTC in USD, as quoted for 1 full BTC..</param>
        /// <param name="tOPASKQUANTITY">The quantity of the top ask in the from asset (base / coin). For a BTC-USD order book, this will be the amount of BTC a person is willing to sell at the best price..</param>
        /// <param name="tOPBIDLASTUPDATETS">The timestamp in seconds of the last time the top bid was updated, as reported by the market / exchange. If the market / exchange does not provide this information, the received timestamp will be returned..</param>
        /// <param name="tOPBIDPRICE">The price of the top bid in the to asset (quote / numberer symbol / coin). For a BTC-USD order book, this will be the highest price a person is willing to pay for some BTC in USD, as quoted for 1 full BTC..</param>
        /// <param name="tOPBIDQUANTITY">The quantity of the top bid in the from asset (base / coin). For a BTC-USD order book , this will be the amount of BTC someone is willing to buy at the best price..</param>
        /// <param name="tYPE">The type of the message..</param>
        public SPOTINSTRUMENTMARKETDATA(string bASE = default(string), int cCSEQ = default(int), int cURRENTDAYHIGH = default(int), int cURRENTDAYLOW = default(int), int cURRENTDAYOPEN = default(int), int cURRENTDAYQUOTEVOLUME = default(int), int cURRENTDAYQUOTEVOLUMEBUY = default(int), int cURRENTDAYQUOTEVOLUMESELL = default(int), int cURRENTDAYQUOTEVOLUMEUNKNOWN = default(int), int cURRENTDAYTOTALTRADES = default(int), int cURRENTDAYTOTALTRADESBUY = default(int), int cURRENTDAYTOTALTRADESSELL = default(int), int cURRENTDAYTOTALTRADESUNKNOWN = default(int), int cURRENTDAYVOLUME = default(int), int cURRENTDAYVOLUMEBUY = default(int), int cURRENTDAYVOLUMESELL = default(int), int cURRENTDAYVOLUMEUNKNOWN = default(int), int cURRENTHOURHIGH = default(int), int cURRENTHOURLOW = default(int), int cURRENTHOUROPEN = default(int), int cURRENTHOURQUOTEVOLUME = default(int), int cURRENTHOURQUOTEVOLUMEBUY = default(int), int cURRENTHOURQUOTEVOLUMESELL = default(int), int cURRENTHOURQUOTEVOLUMEUNKNOWN = default(int), int cURRENTHOURTOTALTRADES = default(int), int cURRENTHOURTOTALTRADESBUY = default(int), int cURRENTHOURTOTALTRADESSELL = default(int), int cURRENTHOURTOTALTRADESUNKNOWN = default(int), int cURRENTHOURVOLUME = default(int), int cURRENTHOURVOLUMEBUY = default(int), int cURRENTHOURVOLUMESELL = default(int), int cURRENTHOURVOLUMEUNKNOWN = default(int), int cURRENTMONTHHIGH = default(int), int cURRENTMONTHLOW = default(int), int cURRENTMONTHOPEN = default(int), int cURRENTMONTHQUOTEVOLUME = default(int), int cURRENTMONTHQUOTEVOLUMEBUY = default(int), int cURRENTMONTHQUOTEVOLUMESELL = default(int), int cURRENTMONTHQUOTEVOLUMEUNKNOWN = default(int), int cURRENTMONTHTOTALTRADES = default(int), int cURRENTMONTHTOTALTRADESBUY = default(int), int cURRENTMONTHTOTALTRADESSELL = default(int), int cURRENTMONTHTOTALTRADESUNKNOWN = default(int), int cURRENTMONTHVOLUME = default(int), int cURRENTMONTHVOLUMEBUY = default(int), int cURRENTMONTHVOLUMESELL = default(int), int cURRENTMONTHVOLUMEUNKNOWN = default(int), int cURRENTWEEKHIGH = default(int), int cURRENTWEEKLOW = default(int), int cURRENTWEEKOPEN = default(int), int cURRENTWEEKQUOTEVOLUME = default(int), int cURRENTWEEKQUOTEVOLUMEBUY = default(int), int cURRENTWEEKQUOTEVOLUMESELL = default(int), int cURRENTWEEKQUOTEVOLUMEUNKNOWN = default(int), int cURRENTWEEKTOTALTRADES = default(int), int cURRENTWEEKTOTALTRADESBUY = default(int), int cURRENTWEEKTOTALTRADESSELL = default(int), int cURRENTWEEKTOTALTRADESUNKNOWN = default(int), int cURRENTWEEKVOLUME = default(int), int cURRENTWEEKVOLUMEBUY = default(int), int cURRENTWEEKVOLUMESELL = default(int), int cURRENTWEEKVOLUMEUNKNOWN = default(int), int cURRENTYEARHIGH = default(int), int cURRENTYEARLOW = default(int), int cURRENTYEAROPEN = default(int), int cURRENTYEARQUOTEVOLUME = default(int), int cURRENTYEARQUOTEVOLUMEBUY = default(int), int cURRENTYEARQUOTEVOLUMESELL = default(int), int cURRENTYEARQUOTEVOLUMEUNKNOWN = default(int), int cURRENTYEARTOTALTRADES = default(int), int cURRENTYEARTOTALTRADESBUY = default(int), int cURRENTYEARTOTALTRADESSELL = default(int), int cURRENTYEARTOTALTRADESUNKNOWN = default(int), int cURRENTYEARVOLUME = default(int), int cURRENTYEARVOLUMEBUY = default(int), int cURRENTYEARVOLUMESELL = default(int), int cURRENTYEARVOLUMEUNKNOWN = default(int), string iNSTRUMENT = default(string), string lASTPROCESSEDTRADECCSEQ = default(string), int lASTPROCESSEDTRADEPRICE = default(int), int lASTPROCESSEDTRADEQUANTITY = default(int), int lASTPROCESSEDTRADEQUOTEQUANTITY = default(int), string lASTPROCESSEDTRADESIDE = default(string), int lASTPROCESSEDTRADETS = default(int), string lASTTRADECCSEQ = default(string), string lASTTRADEID = default(string), int lASTTRADEQUANTITY = default(int), int lASTTRADEQUOTEQUANTITY = default(int), string lASTTRADESIDE = default(string), int lIFETIMEFIRSTTRADETS = default(int), int lIFETIMEHIGH = default(int), int lIFETIMEHIGHTS = default(int), int lIFETIMELOW = default(int), int lIFETIMELOWTS = default(int), int lIFETIMEOPEN = default(int), int lIFETIMEQUOTEVOLUME = default(int), int lIFETIMEQUOTEVOLUMEBUY = default(int), int lIFETIMEQUOTEVOLUMESELL = default(int), int lIFETIMEQUOTEVOLUMEUNKNOWN = default(int), int lIFETIMETOTALTRADES = default(int), int lIFETIMETOTALTRADESBUY = default(int), int lIFETIMETOTALTRADESSELL = default(int), int lIFETIMETOTALTRADESUNKNOWN = default(int), int lIFETIMEVOLUME = default(int), int lIFETIMEVOLUMEBUY = default(int), int lIFETIMEVOLUMESELL = default(int), int lIFETIMEVOLUMEUNKNOWN = default(int), string mAPPEDINSTRUMENT = default(string), string mARKET = default(string), int mOVING180DAYHIGH = default(int), int mOVING180DAYLOW = default(int), int mOVING180DAYOPEN = default(int), int mOVING180DAYQUOTEVOLUME = default(int), int mOVING180DAYQUOTEVOLUMEBUY = default(int), int mOVING180DAYQUOTEVOLUMESELL = default(int), int mOVING180DAYQUOTEVOLUMEUNKNOWN = default(int), int mOVING180DAYTOTALTRADES = default(int), int mOVING180DAYTOTALTRADESBUY = default(int), int mOVING180DAYTOTALTRADESSELL = default(int), int mOVING180DAYTOTALTRADESUNKNOWN = default(int), int mOVING180DAYVOLUME = default(int), int mOVING180DAYVOLUMEBUY = default(int), int mOVING180DAYVOLUMESELL = default(int), int mOVING180DAYVOLUMEUNKNOWN = default(int), int mOVING24HOURHIGH = default(int), int mOVING24HOURLOW = default(int), int mOVING24HOUROPEN = default(int), int mOVING24HOURQUOTEVOLUME = default(int), int mOVING24HOURQUOTEVOLUMEBUY = default(int), int mOVING24HOURQUOTEVOLUMESELL = default(int), int mOVING24HOURQUOTEVOLUMEUNKNOWN = default(int), int mOVING24HOURTOTALTRADES = default(int), int mOVING24HOURTOTALTRADESBUY = default(int), int mOVING24HOURTOTALTRADESSELL = default(int), int mOVING24HOURTOTALTRADESUNKNOWN = default(int), int mOVING24HOURVOLUME = default(int), int mOVING24HOURVOLUMEBUY = default(int), int mOVING24HOURVOLUMESELL = default(int), int mOVING24HOURVOLUMEUNKNOWN = default(int), int mOVING30DAYHIGH = default(int), int mOVING30DAYLOW = default(int), int mOVING30DAYOPEN = default(int), int mOVING30DAYQUOTEVOLUME = default(int), int mOVING30DAYQUOTEVOLUMEBUY = default(int), int mOVING30DAYQUOTEVOLUMESELL = default(int), int mOVING30DAYQUOTEVOLUMEUNKNOWN = default(int), int mOVING30DAYTOTALTRADES = default(int), int mOVING30DAYTOTALTRADESBUY = default(int), int mOVING30DAYTOTALTRADESSELL = default(int), int mOVING30DAYTOTALTRADESUNKNOWN = default(int), int mOVING30DAYVOLUME = default(int), int mOVING30DAYVOLUMEBUY = default(int), int mOVING30DAYVOLUMESELL = default(int), int mOVING30DAYVOLUMEUNKNOWN = default(int), int mOVING365DAYHIGH = default(int), int mOVING365DAYLOW = default(int), int mOVING365DAYOPEN = default(int), int mOVING365DAYQUOTEVOLUME = default(int), int mOVING365DAYQUOTEVOLUMEBUY = default(int), int mOVING365DAYQUOTEVOLUMESELL = default(int), int mOVING365DAYQUOTEVOLUMEUNKNOWN = default(int), int mOVING365DAYTOTALTRADES = default(int), int mOVING365DAYTOTALTRADESBUY = default(int), int mOVING365DAYTOTALTRADESSELL = default(int), int mOVING365DAYTOTALTRADESUNKNOWN = default(int), int mOVING365DAYVOLUME = default(int), int mOVING365DAYVOLUMEBUY = default(int), int mOVING365DAYVOLUMESELL = default(int), int mOVING365DAYVOLUMEUNKNOWN = default(int), int mOVING7DAYHIGH = default(int), int mOVING7DAYLOW = default(int), int mOVING7DAYOPEN = default(int), int mOVING7DAYQUOTEVOLUME = default(int), int mOVING7DAYQUOTEVOLUMEBUY = default(int), int mOVING7DAYQUOTEVOLUMESELL = default(int), int mOVING7DAYQUOTEVOLUMEUNKNOWN = default(int), int mOVING7DAYTOTALTRADES = default(int), int mOVING7DAYTOTALTRADESBUY = default(int), int mOVING7DAYTOTALTRADESSELL = default(int), int mOVING7DAYTOTALTRADESUNKNOWN = default(int), int mOVING7DAYVOLUME = default(int), int mOVING7DAYVOLUMEBUY = default(int), int mOVING7DAYVOLUMESELL = default(int), int mOVING7DAYVOLUMEUNKNOWN = default(int), int mOVING90DAYHIGH = default(int), int mOVING90DAYLOW = default(int), int mOVING90DAYOPEN = default(int), int mOVING90DAYQUOTEVOLUME = default(int), int mOVING90DAYQUOTEVOLUMEBUY = default(int), int mOVING90DAYQUOTEVOLUMESELL = default(int), int mOVING90DAYQUOTEVOLUMEUNKNOWN = default(int), int mOVING90DAYTOTALTRADES = default(int), int mOVING90DAYTOTALTRADESBUY = default(int), int mOVING90DAYTOTALTRADESSELL = default(int), int mOVING90DAYTOTALTRADESUNKNOWN = default(int), int mOVING90DAYVOLUME = default(int), int mOVING90DAYVOLUMEBUY = default(int), int mOVING90DAYVOLUMESELL = default(int), int mOVING90DAYVOLUMEUNKNOWN = default(int), int pRICE = default(int), string pRICEFLAG = default(string), int pRICELASTUPDATETS = default(int), string qUOTE = default(string), int tOPASKLASTUPDATETS = default(int), int tOPASKPRICE = default(int), int tOPASKQUANTITY = default(int), int tOPBIDLASTUPDATETS = default(int), int tOPBIDPRICE = default(int), int tOPBIDQUANTITY = default(int), string tYPE = default(string))
        {
            this.BASE = bASE;
            this.CCSEQ = cCSEQ;
            this.CURRENT_DAY_HIGH = cURRENTDAYHIGH;
            this.CURRENT_DAY_LOW = cURRENTDAYLOW;
            this.CURRENT_DAY_OPEN = cURRENTDAYOPEN;
            this.CURRENT_DAY_QUOTE_VOLUME = cURRENTDAYQUOTEVOLUME;
            this.CURRENT_DAY_QUOTE_VOLUME_BUY = cURRENTDAYQUOTEVOLUMEBUY;
            this.CURRENT_DAY_QUOTE_VOLUME_SELL = cURRENTDAYQUOTEVOLUMESELL;
            this.CURRENT_DAY_QUOTE_VOLUME_UNKNOWN = cURRENTDAYQUOTEVOLUMEUNKNOWN;
            this.CURRENT_DAY_TOTAL_TRADES = cURRENTDAYTOTALTRADES;
            this.CURRENT_DAY_TOTAL_TRADES_BUY = cURRENTDAYTOTALTRADESBUY;
            this.CURRENT_DAY_TOTAL_TRADES_SELL = cURRENTDAYTOTALTRADESSELL;
            this.CURRENT_DAY_TOTAL_TRADES_UNKNOWN = cURRENTDAYTOTALTRADESUNKNOWN;
            this.CURRENT_DAY_VOLUME = cURRENTDAYVOLUME;
            this.CURRENT_DAY_VOLUME_BUY = cURRENTDAYVOLUMEBUY;
            this.CURRENT_DAY_VOLUME_SELL = cURRENTDAYVOLUMESELL;
            this.CURRENT_DAY_VOLUME_UNKNOWN = cURRENTDAYVOLUMEUNKNOWN;
            this.CURRENT_HOUR_HIGH = cURRENTHOURHIGH;
            this.CURRENT_HOUR_LOW = cURRENTHOURLOW;
            this.CURRENT_HOUR_OPEN = cURRENTHOUROPEN;
            this.CURRENT_HOUR_QUOTE_VOLUME = cURRENTHOURQUOTEVOLUME;
            this.CURRENT_HOUR_QUOTE_VOLUME_BUY = cURRENTHOURQUOTEVOLUMEBUY;
            this.CURRENT_HOUR_QUOTE_VOLUME_SELL = cURRENTHOURQUOTEVOLUMESELL;
            this.CURRENT_HOUR_QUOTE_VOLUME_UNKNOWN = cURRENTHOURQUOTEVOLUMEUNKNOWN;
            this.CURRENT_HOUR_TOTAL_TRADES = cURRENTHOURTOTALTRADES;
            this.CURRENT_HOUR_TOTAL_TRADES_BUY = cURRENTHOURTOTALTRADESBUY;
            this.CURRENT_HOUR_TOTAL_TRADES_SELL = cURRENTHOURTOTALTRADESSELL;
            this.CURRENT_HOUR_TOTAL_TRADES_UNKNOWN = cURRENTHOURTOTALTRADESUNKNOWN;
            this.CURRENT_HOUR_VOLUME = cURRENTHOURVOLUME;
            this.CURRENT_HOUR_VOLUME_BUY = cURRENTHOURVOLUMEBUY;
            this.CURRENT_HOUR_VOLUME_SELL = cURRENTHOURVOLUMESELL;
            this.CURRENT_HOUR_VOLUME_UNKNOWN = cURRENTHOURVOLUMEUNKNOWN;
            this.CURRENT_MONTH_HIGH = cURRENTMONTHHIGH;
            this.CURRENT_MONTH_LOW = cURRENTMONTHLOW;
            this.CURRENT_MONTH_OPEN = cURRENTMONTHOPEN;
            this.CURRENT_MONTH_QUOTE_VOLUME = cURRENTMONTHQUOTEVOLUME;
            this.CURRENT_MONTH_QUOTE_VOLUME_BUY = cURRENTMONTHQUOTEVOLUMEBUY;
            this.CURRENT_MONTH_QUOTE_VOLUME_SELL = cURRENTMONTHQUOTEVOLUMESELL;
            this.CURRENT_MONTH_QUOTE_VOLUME_UNKNOWN = cURRENTMONTHQUOTEVOLUMEUNKNOWN;
            this.CURRENT_MONTH_TOTAL_TRADES = cURRENTMONTHTOTALTRADES;
            this.CURRENT_MONTH_TOTAL_TRADES_BUY = cURRENTMONTHTOTALTRADESBUY;
            this.CURRENT_MONTH_TOTAL_TRADES_SELL = cURRENTMONTHTOTALTRADESSELL;
            this.CURRENT_MONTH_TOTAL_TRADES_UNKNOWN = cURRENTMONTHTOTALTRADESUNKNOWN;
            this.CURRENT_MONTH_VOLUME = cURRENTMONTHVOLUME;
            this.CURRENT_MONTH_VOLUME_BUY = cURRENTMONTHVOLUMEBUY;
            this.CURRENT_MONTH_VOLUME_SELL = cURRENTMONTHVOLUMESELL;
            this.CURRENT_MONTH_VOLUME_UNKNOWN = cURRENTMONTHVOLUMEUNKNOWN;
            this.CURRENT_WEEK_HIGH = cURRENTWEEKHIGH;
            this.CURRENT_WEEK_LOW = cURRENTWEEKLOW;
            this.CURRENT_WEEK_OPEN = cURRENTWEEKOPEN;
            this.CURRENT_WEEK_QUOTE_VOLUME = cURRENTWEEKQUOTEVOLUME;
            this.CURRENT_WEEK_QUOTE_VOLUME_BUY = cURRENTWEEKQUOTEVOLUMEBUY;
            this.CURRENT_WEEK_QUOTE_VOLUME_SELL = cURRENTWEEKQUOTEVOLUMESELL;
            this.CURRENT_WEEK_QUOTE_VOLUME_UNKNOWN = cURRENTWEEKQUOTEVOLUMEUNKNOWN;
            this.CURRENT_WEEK_TOTAL_TRADES = cURRENTWEEKTOTALTRADES;
            this.CURRENT_WEEK_TOTAL_TRADES_BUY = cURRENTWEEKTOTALTRADESBUY;
            this.CURRENT_WEEK_TOTAL_TRADES_SELL = cURRENTWEEKTOTALTRADESSELL;
            this.CURRENT_WEEK_TOTAL_TRADES_UNKNOWN = cURRENTWEEKTOTALTRADESUNKNOWN;
            this.CURRENT_WEEK_VOLUME = cURRENTWEEKVOLUME;
            this.CURRENT_WEEK_VOLUME_BUY = cURRENTWEEKVOLUMEBUY;
            this.CURRENT_WEEK_VOLUME_SELL = cURRENTWEEKVOLUMESELL;
            this.CURRENT_WEEK_VOLUME_UNKNOWN = cURRENTWEEKVOLUMEUNKNOWN;
            this.CURRENT_YEAR_HIGH = cURRENTYEARHIGH;
            this.CURRENT_YEAR_LOW = cURRENTYEARLOW;
            this.CURRENT_YEAR_OPEN = cURRENTYEAROPEN;
            this.CURRENT_YEAR_QUOTE_VOLUME = cURRENTYEARQUOTEVOLUME;
            this.CURRENT_YEAR_QUOTE_VOLUME_BUY = cURRENTYEARQUOTEVOLUMEBUY;
            this.CURRENT_YEAR_QUOTE_VOLUME_SELL = cURRENTYEARQUOTEVOLUMESELL;
            this.CURRENT_YEAR_QUOTE_VOLUME_UNKNOWN = cURRENTYEARQUOTEVOLUMEUNKNOWN;
            this.CURRENT_YEAR_TOTAL_TRADES = cURRENTYEARTOTALTRADES;
            this.CURRENT_YEAR_TOTAL_TRADES_BUY = cURRENTYEARTOTALTRADESBUY;
            this.CURRENT_YEAR_TOTAL_TRADES_SELL = cURRENTYEARTOTALTRADESSELL;
            this.CURRENT_YEAR_TOTAL_TRADES_UNKNOWN = cURRENTYEARTOTALTRADESUNKNOWN;
            this.CURRENT_YEAR_VOLUME = cURRENTYEARVOLUME;
            this.CURRENT_YEAR_VOLUME_BUY = cURRENTYEARVOLUMEBUY;
            this.CURRENT_YEAR_VOLUME_SELL = cURRENTYEARVOLUMESELL;
            this.CURRENT_YEAR_VOLUME_UNKNOWN = cURRENTYEARVOLUMEUNKNOWN;
            this.INSTRUMENT = iNSTRUMENT;
            this.LAST_PROCESSED_TRADE_CCSEQ = lASTPROCESSEDTRADECCSEQ;
            this.LAST_PROCESSED_TRADE_PRICE = lASTPROCESSEDTRADEPRICE;
            this.LAST_PROCESSED_TRADE_QUANTITY = lASTPROCESSEDTRADEQUANTITY;
            this.LAST_PROCESSED_TRADE_QUOTE_QUANTITY = lASTPROCESSEDTRADEQUOTEQUANTITY;
            this.LAST_PROCESSED_TRADE_SIDE = lASTPROCESSEDTRADESIDE;
            this.LAST_PROCESSED_TRADE_TS = lASTPROCESSEDTRADETS;
            this.LAST_TRADE_CCSEQ = lASTTRADECCSEQ;
            this.LAST_TRADE_ID = lASTTRADEID;
            this.LAST_TRADE_QUANTITY = lASTTRADEQUANTITY;
            this.LAST_TRADE_QUOTE_QUANTITY = lASTTRADEQUOTEQUANTITY;
            this.LAST_TRADE_SIDE = lASTTRADESIDE;
            this.LIFETIME_FIRST_TRADE_TS = lIFETIMEFIRSTTRADETS;
            this.LIFETIME_HIGH = lIFETIMEHIGH;
            this.LIFETIME_HIGH_TS = lIFETIMEHIGHTS;
            this.LIFETIME_LOW = lIFETIMELOW;
            this.LIFETIME_LOW_TS = lIFETIMELOWTS;
            this.LIFETIME_OPEN = lIFETIMEOPEN;
            this.LIFETIME_QUOTE_VOLUME = lIFETIMEQUOTEVOLUME;
            this.LIFETIME_QUOTE_VOLUME_BUY = lIFETIMEQUOTEVOLUMEBUY;
            this.LIFETIME_QUOTE_VOLUME_SELL = lIFETIMEQUOTEVOLUMESELL;
            this.LIFETIME_QUOTE_VOLUME_UNKNOWN = lIFETIMEQUOTEVOLUMEUNKNOWN;
            this.LIFETIME_TOTAL_TRADES = lIFETIMETOTALTRADES;
            this.LIFETIME_TOTAL_TRADES_BUY = lIFETIMETOTALTRADESBUY;
            this.LIFETIME_TOTAL_TRADES_SELL = lIFETIMETOTALTRADESSELL;
            this.LIFETIME_TOTAL_TRADES_UNKNOWN = lIFETIMETOTALTRADESUNKNOWN;
            this.LIFETIME_VOLUME = lIFETIMEVOLUME;
            this.LIFETIME_VOLUME_BUY = lIFETIMEVOLUMEBUY;
            this.LIFETIME_VOLUME_SELL = lIFETIMEVOLUMESELL;
            this.LIFETIME_VOLUME_UNKNOWN = lIFETIMEVOLUMEUNKNOWN;
            this.MAPPED_INSTRUMENT = mAPPEDINSTRUMENT;
            this.MARKET = mARKET;
            this.MOVING180DAYHIGH = mOVING180DAYHIGH;
            this.MOVING180DAYLOW = mOVING180DAYLOW;
            this.MOVING180DAYOPEN = mOVING180DAYOPEN;
            this.MOVING180DAYQUOTEVOLUME = mOVING180DAYQUOTEVOLUME;
            this.MOVING180DAYQUOTEVOLUMEBUY = mOVING180DAYQUOTEVOLUMEBUY;
            this.MOVING180DAYQUOTEVOLUMESELL = mOVING180DAYQUOTEVOLUMESELL;
            this.MOVING180DAYQUOTEVOLUMEUNKNOWN = mOVING180DAYQUOTEVOLUMEUNKNOWN;
            this.MOVING180DAYTOTALTRADES = mOVING180DAYTOTALTRADES;
            this.MOVING180DAYTOTALTRADESBUY = mOVING180DAYTOTALTRADESBUY;
            this.MOVING180DAYTOTALTRADESSELL = mOVING180DAYTOTALTRADESSELL;
            this.MOVING180DAYTOTALTRADESUNKNOWN = mOVING180DAYTOTALTRADESUNKNOWN;
            this.MOVING180DAYVOLUME = mOVING180DAYVOLUME;
            this.MOVING180DAYVOLUMEBUY = mOVING180DAYVOLUMEBUY;
            this.MOVING180DAYVOLUMESELL = mOVING180DAYVOLUMESELL;
            this.MOVING180DAYVOLUMEUNKNOWN = mOVING180DAYVOLUMEUNKNOWN;
            this.MOVING24HOURHIGH = mOVING24HOURHIGH;
            this.MOVING24HOURLOW = mOVING24HOURLOW;
            this.MOVING24HOUROPEN = mOVING24HOUROPEN;
            this.MOVING24HOURQUOTEVOLUME = mOVING24HOURQUOTEVOLUME;
            this.MOVING24HOURQUOTEVOLUMEBUY = mOVING24HOURQUOTEVOLUMEBUY;
            this.MOVING24HOURQUOTEVOLUMESELL = mOVING24HOURQUOTEVOLUMESELL;
            this.MOVING24HOURQUOTEVOLUMEUNKNOWN = mOVING24HOURQUOTEVOLUMEUNKNOWN;
            this.MOVING24HOURTOTALTRADES = mOVING24HOURTOTALTRADES;
            this.MOVING24HOURTOTALTRADESBUY = mOVING24HOURTOTALTRADESBUY;
            this.MOVING24HOURTOTALTRADESSELL = mOVING24HOURTOTALTRADESSELL;
            this.MOVING24HOURTOTALTRADESUNKNOWN = mOVING24HOURTOTALTRADESUNKNOWN;
            this.MOVING24HOURVOLUME = mOVING24HOURVOLUME;
            this.MOVING24HOURVOLUMEBUY = mOVING24HOURVOLUMEBUY;
            this.MOVING24HOURVOLUMESELL = mOVING24HOURVOLUMESELL;
            this.MOVING24HOURVOLUMEUNKNOWN = mOVING24HOURVOLUMEUNKNOWN;
            this.MOVING30DAYHIGH = mOVING30DAYHIGH;
            this.MOVING30DAYLOW = mOVING30DAYLOW;
            this.MOVING30DAYOPEN = mOVING30DAYOPEN;
            this.MOVING30DAYQUOTEVOLUME = mOVING30DAYQUOTEVOLUME;
            this.MOVING30DAYQUOTEVOLUMEBUY = mOVING30DAYQUOTEVOLUMEBUY;
            this.MOVING30DAYQUOTEVOLUMESELL = mOVING30DAYQUOTEVOLUMESELL;
            this.MOVING30DAYQUOTEVOLUMEUNKNOWN = mOVING30DAYQUOTEVOLUMEUNKNOWN;
            this.MOVING30DAYTOTALTRADES = mOVING30DAYTOTALTRADES;
            this.MOVING30DAYTOTALTRADESBUY = mOVING30DAYTOTALTRADESBUY;
            this.MOVING30DAYTOTALTRADESSELL = mOVING30DAYTOTALTRADESSELL;
            this.MOVING30DAYTOTALTRADESUNKNOWN = mOVING30DAYTOTALTRADESUNKNOWN;
            this.MOVING30DAYVOLUME = mOVING30DAYVOLUME;
            this.MOVING30DAYVOLUMEBUY = mOVING30DAYVOLUMEBUY;
            this.MOVING30DAYVOLUMESELL = mOVING30DAYVOLUMESELL;
            this.MOVING30DAYVOLUMEUNKNOWN = mOVING30DAYVOLUMEUNKNOWN;
            this.MOVING365DAYHIGH = mOVING365DAYHIGH;
            this.MOVING365DAYLOW = mOVING365DAYLOW;
            this.MOVING365DAYOPEN = mOVING365DAYOPEN;
            this.MOVING365DAYQUOTEVOLUME = mOVING365DAYQUOTEVOLUME;
            this.MOVING365DAYQUOTEVOLUMEBUY = mOVING365DAYQUOTEVOLUMEBUY;
            this.MOVING365DAYQUOTEVOLUMESELL = mOVING365DAYQUOTEVOLUMESELL;
            this.MOVING365DAYQUOTEVOLUMEUNKNOWN = mOVING365DAYQUOTEVOLUMEUNKNOWN;
            this.MOVING365DAYTOTALTRADES = mOVING365DAYTOTALTRADES;
            this.MOVING365DAYTOTALTRADESBUY = mOVING365DAYTOTALTRADESBUY;
            this.MOVING365DAYTOTALTRADESSELL = mOVING365DAYTOTALTRADESSELL;
            this.MOVING365DAYTOTALTRADESUNKNOWN = mOVING365DAYTOTALTRADESUNKNOWN;
            this.MOVING365DAYVOLUME = mOVING365DAYVOLUME;
            this.MOVING365DAYVOLUMEBUY = mOVING365DAYVOLUMEBUY;
            this.MOVING365DAYVOLUMESELL = mOVING365DAYVOLUMESELL;
            this.MOVING365DAYVOLUMEUNKNOWN = mOVING365DAYVOLUMEUNKNOWN;
            this.MOVING7DAYHIGH = mOVING7DAYHIGH;
            this.MOVING7DAYLOW = mOVING7DAYLOW;
            this.MOVING7DAYOPEN = mOVING7DAYOPEN;
            this.MOVING7DAYQUOTEVOLUME = mOVING7DAYQUOTEVOLUME;
            this.MOVING7DAYQUOTEVOLUMEBUY = mOVING7DAYQUOTEVOLUMEBUY;
            this.MOVING7DAYQUOTEVOLUMESELL = mOVING7DAYQUOTEVOLUMESELL;
            this.MOVING7DAYQUOTEVOLUMEUNKNOWN = mOVING7DAYQUOTEVOLUMEUNKNOWN;
            this.MOVING7DAYTOTALTRADES = mOVING7DAYTOTALTRADES;
            this.MOVING7DAYTOTALTRADESBUY = mOVING7DAYTOTALTRADESBUY;
            this.MOVING7DAYTOTALTRADESSELL = mOVING7DAYTOTALTRADESSELL;
            this.MOVING7DAYTOTALTRADESUNKNOWN = mOVING7DAYTOTALTRADESUNKNOWN;
            this.MOVING7DAYVOLUME = mOVING7DAYVOLUME;
            this.MOVING7DAYVOLUMEBUY = mOVING7DAYVOLUMEBUY;
            this.MOVING7DAYVOLUMESELL = mOVING7DAYVOLUMESELL;
            this.MOVING7DAYVOLUMEUNKNOWN = mOVING7DAYVOLUMEUNKNOWN;
            this.MOVING90DAYHIGH = mOVING90DAYHIGH;
            this.MOVING90DAYLOW = mOVING90DAYLOW;
            this.MOVING90DAYOPEN = mOVING90DAYOPEN;
            this.MOVING90DAYQUOTEVOLUME = mOVING90DAYQUOTEVOLUME;
            this.MOVING90DAYQUOTEVOLUMEBUY = mOVING90DAYQUOTEVOLUMEBUY;
            this.MOVING90DAYQUOTEVOLUMESELL = mOVING90DAYQUOTEVOLUMESELL;
            this.MOVING90DAYQUOTEVOLUMEUNKNOWN = mOVING90DAYQUOTEVOLUMEUNKNOWN;
            this.MOVING90DAYTOTALTRADES = mOVING90DAYTOTALTRADES;
            this.MOVING90DAYTOTALTRADESBUY = mOVING90DAYTOTALTRADESBUY;
            this.MOVING90DAYTOTALTRADESSELL = mOVING90DAYTOTALTRADESSELL;
            this.MOVING90DAYTOTALTRADESUNKNOWN = mOVING90DAYTOTALTRADESUNKNOWN;
            this.MOVING90DAYVOLUME = mOVING90DAYVOLUME;
            this.MOVING90DAYVOLUMEBUY = mOVING90DAYVOLUMEBUY;
            this.MOVING90DAYVOLUMESELL = mOVING90DAYVOLUMESELL;
            this.MOVING90DAYVOLUMEUNKNOWN = mOVING90DAYVOLUMEUNKNOWN;
            this.PRICE = pRICE;
            this.PRICE_FLAG = pRICEFLAG;
            this.PRICE_LAST_UPDATE_TS = pRICELASTUPDATETS;
            this.QUOTE = qUOTE;
            this.TOP_ASK_LAST_UPDATE_TS = tOPASKLASTUPDATETS;
            this.TOP_ASK_PRICE = tOPASKPRICE;
            this.TOP_ASK_QUANTITY = tOPASKQUANTITY;
            this.TOP_BID_LAST_UPDATE_TS = tOPBIDLASTUPDATETS;
            this.TOP_BID_PRICE = tOPBIDPRICE;
            this.TOP_BID_QUANTITY = tOPBIDQUANTITY;
            this.TYPE = tYPE;
        }

        /// <summary>
        /// The mapped from asset (base / symbol/ coin), e.g. BTC. Only available on instruments that have been mapped.
        /// </summary>
        /// <value>The mapped from asset (base / symbol/ coin), e.g. BTC. Only available on instruments that have been mapped.</value>
        [DataMember(Name = "BASE", EmitDefaultValue = false)]
        public string BASE { get; set; }

        /// <summary>
        /// Our internal sequence number for this tick update. This is unique per market / exchange and trading pair / instrument. It will always be increasing by 1 for each new tick update we send.
        /// </summary>
        /// <value>Our internal sequence number for this tick update. This is unique per market / exchange and trading pair / instrument. It will always be increasing by 1 for each new tick update we send.</value>
        [DataMember(Name = "CCSEQ", EmitDefaultValue = false)]
        public int CCSEQ { get; set; }

        /// <summary>
        /// The highest trade price of the current day (00:00:00 GMT/UTC). If there were no updates in the time period, the open price will be given. Given in the quote asset.
        /// </summary>
        /// <value>The highest trade price of the current day (00:00:00 GMT/UTC). If there were no updates in the time period, the open price will be given. Given in the quote asset.</value>
        [DataMember(Name = "CURRENT_DAY_HIGH", EmitDefaultValue = false)]
        public int CURRENT_DAY_HIGH { get; set; }

        /// <summary>
        /// The lowest trade price of the current day (00:00:00 GMT/UTC). If there were no updates in the time period, the open price will be given. Given in the quote asset.
        /// </summary>
        /// <value>The lowest trade price of the current day (00:00:00 GMT/UTC). If there were no updates in the time period, the open price will be given. Given in the quote asset.</value>
        [DataMember(Name = "CURRENT_DAY_LOW", EmitDefaultValue = false)]
        public int CURRENT_DAY_LOW { get; set; }

        /// <summary>
        /// The open price for the current day, this is based on the closest trade occurring before the start of the current day (00:00:00 GMT/UTC). Given in the quote asset.
        /// </summary>
        /// <value>The open price for the current day, this is based on the closest trade occurring before the start of the current day (00:00:00 GMT/UTC). Given in the quote asset.</value>
        [DataMember(Name = "CURRENT_DAY_OPEN", EmitDefaultValue = false)]
        public int CURRENT_DAY_OPEN { get; set; }

        /// <summary>
        /// The sum of all trade quote quantities from the start of the current day (00:00:00 GMT/UTC) until now. Given in the quote asset.
        /// </summary>
        /// <value>The sum of all trade quote quantities from the start of the current day (00:00:00 GMT/UTC) until now. Given in the quote asset.</value>
        [DataMember(Name = "CURRENT_DAY_QUOTE_VOLUME", EmitDefaultValue = false)]
        public int CURRENT_DAY_QUOTE_VOLUME { get; set; }

        /// <summary>
        /// The sum of all buy trade quote quantities from the start of the current day (00:00:00 GMT/UTC) until now. Given in the quote asset.
        /// </summary>
        /// <value>The sum of all buy trade quote quantities from the start of the current day (00:00:00 GMT/UTC) until now. Given in the quote asset.</value>
        [DataMember(Name = "CURRENT_DAY_QUOTE_VOLUME_BUY", EmitDefaultValue = false)]
        public int CURRENT_DAY_QUOTE_VOLUME_BUY { get; set; }

        /// <summary>
        /// The sum of all sell trade quote quantities from the start of the current day (00:00:00 GMT/UTC) until now. Given in the quote asset.
        /// </summary>
        /// <value>The sum of all sell trade quote quantities from the start of the current day (00:00:00 GMT/UTC) until now. Given in the quote asset.</value>
        [DataMember(Name = "CURRENT_DAY_QUOTE_VOLUME_SELL", EmitDefaultValue = false)]
        public int CURRENT_DAY_QUOTE_VOLUME_SELL { get; set; }

        /// <summary>
        /// The sum of all unknown trade quote quantities from the start of the current day (00:00:00 GMT/UTC) until now. Given in the quote asset.
        /// </summary>
        /// <value>The sum of all unknown trade quote quantities from the start of the current day (00:00:00 GMT/UTC) until now. Given in the quote asset.</value>
        [DataMember(Name = "CURRENT_DAY_QUOTE_VOLUME_UNKNOWN", EmitDefaultValue = false)]
        public int CURRENT_DAY_QUOTE_VOLUME_UNKNOWN { get; set; }

        /// <summary>
        /// The total number of trades that have occurred since the start of the current day (00:00:00 GMT/UTC).
        /// </summary>
        /// <value>The total number of trades that have occurred since the start of the current day (00:00:00 GMT/UTC).</value>
        [DataMember(Name = "CURRENT_DAY_TOTAL_TRADES", EmitDefaultValue = false)]
        public int CURRENT_DAY_TOTAL_TRADES { get; set; }

        /// <summary>
        /// The total number of buy trades since the start of the current day (00:00:00 GMT/UTC).
        /// </summary>
        /// <value>The total number of buy trades since the start of the current day (00:00:00 GMT/UTC).</value>
        [DataMember(Name = "CURRENT_DAY_TOTAL_TRADES_BUY", EmitDefaultValue = false)]
        public int CURRENT_DAY_TOTAL_TRADES_BUY { get; set; }

        /// <summary>
        /// The total number of sell trades since the start of the current day (00:00:00 GMT/UTC).
        /// </summary>
        /// <value>The total number of sell trades since the start of the current day (00:00:00 GMT/UTC).</value>
        [DataMember(Name = "CURRENT_DAY_TOTAL_TRADES_SELL", EmitDefaultValue = false)]
        public int CURRENT_DAY_TOTAL_TRADES_SELL { get; set; }

        /// <summary>
        /// The total number of unknown trades since the start of the current day (00:00:00 GMT/UTC).
        /// </summary>
        /// <value>The total number of unknown trades since the start of the current day (00:00:00 GMT/UTC).</value>
        [DataMember(Name = "CURRENT_DAY_TOTAL_TRADES_UNKNOWN", EmitDefaultValue = false)]
        public int CURRENT_DAY_TOTAL_TRADES_UNKNOWN { get; set; }

        /// <summary>
        /// The sum of all trade quantities from the start of the current day (00:00:00 GMT/UTC) until now. Given in the base asset.
        /// </summary>
        /// <value>The sum of all trade quantities from the start of the current day (00:00:00 GMT/UTC) until now. Given in the base asset.</value>
        [DataMember(Name = "CURRENT_DAY_VOLUME", EmitDefaultValue = false)]
        public int CURRENT_DAY_VOLUME { get; set; }

        /// <summary>
        /// The sum of all buy trade quantities from the start of the current day (00:00:00 GMT/UTC) until now. Given in the base asset.
        /// </summary>
        /// <value>The sum of all buy trade quantities from the start of the current day (00:00:00 GMT/UTC) until now. Given in the base asset.</value>
        [DataMember(Name = "CURRENT_DAY_VOLUME_BUY", EmitDefaultValue = false)]
        public int CURRENT_DAY_VOLUME_BUY { get; set; }

        /// <summary>
        /// The sum of all sell trade quantities from the start of the current day (00:00:00 GMT/UTC) until now. Given in the base asset.
        /// </summary>
        /// <value>The sum of all sell trade quantities from the start of the current day (00:00:00 GMT/UTC) until now. Given in the base asset.</value>
        [DataMember(Name = "CURRENT_DAY_VOLUME_SELL", EmitDefaultValue = false)]
        public int CURRENT_DAY_VOLUME_SELL { get; set; }

        /// <summary>
        /// The sum of all unknown trade quantities from the start of the current day (00:00:00 GMT/UTC) until now. Given in the base asset.
        /// </summary>
        /// <value>The sum of all unknown trade quantities from the start of the current day (00:00:00 GMT/UTC) until now. Given in the base asset.</value>
        [DataMember(Name = "CURRENT_DAY_VOLUME_UNKNOWN", EmitDefaultValue = false)]
        public int CURRENT_DAY_VOLUME_UNKNOWN { get; set; }

        /// <summary>
        /// The highest trade price of the current hour. If there were no updates in the time period, the open price will be given. Given in the quote asset.
        /// </summary>
        /// <value>The highest trade price of the current hour. If there were no updates in the time period, the open price will be given. Given in the quote asset.</value>
        [DataMember(Name = "CURRENT_HOUR_HIGH", EmitDefaultValue = false)]
        public int CURRENT_HOUR_HIGH { get; set; }

        /// <summary>
        /// The lowest trade price of the current hour. If there were no updates in the time period, the open price will be given. Given in the quote asset.
        /// </summary>
        /// <value>The lowest trade price of the current hour. If there were no updates in the time period, the open price will be given. Given in the quote asset.</value>
        [DataMember(Name = "CURRENT_HOUR_LOW", EmitDefaultValue = false)]
        public int CURRENT_HOUR_LOW { get; set; }

        /// <summary>
        /// The open price for the current hour, this is based on the closest trade occurring before the start of the current hour. Given in the quote asset.
        /// </summary>
        /// <value>The open price for the current hour, this is based on the closest trade occurring before the start of the current hour. Given in the quote asset.</value>
        [DataMember(Name = "CURRENT_HOUR_OPEN", EmitDefaultValue = false)]
        public int CURRENT_HOUR_OPEN { get; set; }

        /// <summary>
        /// The sum of all trade quote quantities from the start of the current hour until now. Given in the quote asset.
        /// </summary>
        /// <value>The sum of all trade quote quantities from the start of the current hour until now. Given in the quote asset.</value>
        [DataMember(Name = "CURRENT_HOUR_QUOTE_VOLUME", EmitDefaultValue = false)]
        public int CURRENT_HOUR_QUOTE_VOLUME { get; set; }

        /// <summary>
        /// The sum of all buy trade quote quantities from the start of the current hour until now. Given in the quote asset.
        /// </summary>
        /// <value>The sum of all buy trade quote quantities from the start of the current hour until now. Given in the quote asset.</value>
        [DataMember(Name = "CURRENT_HOUR_QUOTE_VOLUME_BUY", EmitDefaultValue = false)]
        public int CURRENT_HOUR_QUOTE_VOLUME_BUY { get; set; }

        /// <summary>
        /// The sum of all sell trade quote quantities from the start of the current hour until now. Given in the quote asset.
        /// </summary>
        /// <value>The sum of all sell trade quote quantities from the start of the current hour until now. Given in the quote asset.</value>
        [DataMember(Name = "CURRENT_HOUR_QUOTE_VOLUME_SELL", EmitDefaultValue = false)]
        public int CURRENT_HOUR_QUOTE_VOLUME_SELL { get; set; }

        /// <summary>
        /// The sum of all unknown trade quote quantities from the start of the current hour until now. Given in the quote asset.
        /// </summary>
        /// <value>The sum of all unknown trade quote quantities from the start of the current hour until now. Given in the quote asset.</value>
        [DataMember(Name = "CURRENT_HOUR_QUOTE_VOLUME_UNKNOWN", EmitDefaultValue = false)]
        public int CURRENT_HOUR_QUOTE_VOLUME_UNKNOWN { get; set; }

        /// <summary>
        /// The total number of trades that have occurred since the start of the current hour.
        /// </summary>
        /// <value>The total number of trades that have occurred since the start of the current hour.</value>
        [DataMember(Name = "CURRENT_HOUR_TOTAL_TRADES", EmitDefaultValue = false)]
        public int CURRENT_HOUR_TOTAL_TRADES { get; set; }

        /// <summary>
        /// The total number of buy trades since the start of the current hour.
        /// </summary>
        /// <value>The total number of buy trades since the start of the current hour.</value>
        [DataMember(Name = "CURRENT_HOUR_TOTAL_TRADES_BUY", EmitDefaultValue = false)]
        public int CURRENT_HOUR_TOTAL_TRADES_BUY { get; set; }

        /// <summary>
        /// The total number of sell trades since the start of the current hour.
        /// </summary>
        /// <value>The total number of sell trades since the start of the current hour.</value>
        [DataMember(Name = "CURRENT_HOUR_TOTAL_TRADES_SELL", EmitDefaultValue = false)]
        public int CURRENT_HOUR_TOTAL_TRADES_SELL { get; set; }

        /// <summary>
        /// The total number of unknown trades since the start of the current hour.
        /// </summary>
        /// <value>The total number of unknown trades since the start of the current hour.</value>
        [DataMember(Name = "CURRENT_HOUR_TOTAL_TRADES_UNKNOWN", EmitDefaultValue = false)]
        public int CURRENT_HOUR_TOTAL_TRADES_UNKNOWN { get; set; }

        /// <summary>
        /// The sum of all trade quantities from the start of the current hour until now. Given in the base asset.
        /// </summary>
        /// <value>The sum of all trade quantities from the start of the current hour until now. Given in the base asset.</value>
        [DataMember(Name = "CURRENT_HOUR_VOLUME", EmitDefaultValue = false)]
        public int CURRENT_HOUR_VOLUME { get; set; }

        /// <summary>
        /// The sum of all buy trade quantities from the start of the current hour until now. Given in the base asset.
        /// </summary>
        /// <value>The sum of all buy trade quantities from the start of the current hour until now. Given in the base asset.</value>
        [DataMember(Name = "CURRENT_HOUR_VOLUME_BUY", EmitDefaultValue = false)]
        public int CURRENT_HOUR_VOLUME_BUY { get; set; }

        /// <summary>
        /// The sum of all sell trade quantities from the start of the current hour until now. Given in the base asset.
        /// </summary>
        /// <value>The sum of all sell trade quantities from the start of the current hour until now. Given in the base asset.</value>
        [DataMember(Name = "CURRENT_HOUR_VOLUME_SELL", EmitDefaultValue = false)]
        public int CURRENT_HOUR_VOLUME_SELL { get; set; }

        /// <summary>
        /// The sum of all trade quote quantities from the start of the current hour until now. Given in the base asset.
        /// </summary>
        /// <value>The sum of all trade quote quantities from the start of the current hour until now. Given in the base asset.</value>
        [DataMember(Name = "CURRENT_HOUR_VOLUME_UNKNOWN", EmitDefaultValue = false)]
        public int CURRENT_HOUR_VOLUME_UNKNOWN { get; set; }

        /// <summary>
        /// The highest traded price of the month excluding the current day. The period will run from the 1st of the month - 00:00:00 GMT/UTC to the beginning - 00:00:00 GMT/UTC of the current day of the month. If today is the 1st of the month, this value will be CURRENT_MONTH_OPEN. Given in the quote asset.
        /// </summary>
        /// <value>The highest traded price of the month excluding the current day. The period will run from the 1st of the month - 00:00:00 GMT/UTC to the beginning - 00:00:00 GMT/UTC of the current day of the month. If today is the 1st of the month, this value will be CURRENT_MONTH_OPEN. Given in the quote asset.</value>
        [DataMember(Name = "CURRENT_MONTH_HIGH", EmitDefaultValue = false)]
        public int CURRENT_MONTH_HIGH { get; set; }

        /// <summary>
        /// The lowest traded price of the month excluding the current day. The period will run from the 1st of the month - 00:00:00 GMT/UTC to the beginning - 00:00:00 GMT/UTC of the current day of the month. If today is the 1st of the month, this value will be CURRENT_MONTH_OPEN. Given in the quote asset.
        /// </summary>
        /// <value>The lowest traded price of the month excluding the current day. The period will run from the 1st of the month - 00:00:00 GMT/UTC to the beginning - 00:00:00 GMT/UTC of the current day of the month. If today is the 1st of the month, this value will be CURRENT_MONTH_OPEN. Given in the quote asset.</value>
        [DataMember(Name = "CURRENT_MONTH_LOW", EmitDefaultValue = false)]
        public int CURRENT_MONTH_LOW { get; set; }

        /// <summary>
        /// The price of the closest trade to the 1st day (00:00:00 GMT/UTC) of this month. In a highly liquid market, this would be the last trade that happened on the previous month at (23:59:59 999 GMT/UTC). This will always be supplied and there is no need to do any calculation to get the full monthly value. Given in the quote asset.
        /// </summary>
        /// <value>The price of the closest trade to the 1st day (00:00:00 GMT/UTC) of this month. In a highly liquid market, this would be the last trade that happened on the previous month at (23:59:59 999 GMT/UTC). This will always be supplied and there is no need to do any calculation to get the full monthly value. Given in the quote asset.</value>
        [DataMember(Name = "CURRENT_MONTH_OPEN", EmitDefaultValue = false)]
        public int CURRENT_MONTH_OPEN { get; set; }

        /// <summary>
        /// The sum of all trade quote quantities from the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the first of the month, this value will be 0. Given in the quote asset.
        /// </summary>
        /// <value>The sum of all trade quote quantities from the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the first of the month, this value will be 0. Given in the quote asset.</value>
        [DataMember(Name = "CURRENT_MONTH_QUOTE_VOLUME", EmitDefaultValue = false)]
        public int CURRENT_MONTH_QUOTE_VOLUME { get; set; }

        /// <summary>
        /// The sum of all buy trade quote quantities from the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the first of the month, this value will be 0. Given in the quote asset.
        /// </summary>
        /// <value>The sum of all buy trade quote quantities from the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the first of the month, this value will be 0. Given in the quote asset.</value>
        [DataMember(Name = "CURRENT_MONTH_QUOTE_VOLUME_BUY", EmitDefaultValue = false)]
        public int CURRENT_MONTH_QUOTE_VOLUME_BUY { get; set; }

        /// <summary>
        /// The sum of all sell trade quote quantities from the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the first of the month, this value will be 0. Given in the quote asset.
        /// </summary>
        /// <value>The sum of all sell trade quote quantities from the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the first of the month, this value will be 0. Given in the quote asset.</value>
        [DataMember(Name = "CURRENT_MONTH_QUOTE_VOLUME_SELL", EmitDefaultValue = false)]
        public int CURRENT_MONTH_QUOTE_VOLUME_SELL { get; set; }

        /// <summary>
        /// The sum of all unknown trade quote quantities from the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the first of the month, this value will be 0. Given in the quote asset.
        /// </summary>
        /// <value>The sum of all unknown trade quote quantities from the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the first of the month, this value will be 0. Given in the quote asset.</value>
        [DataMember(Name = "CURRENT_MONTH_QUOTE_VOLUME_UNKNOWN", EmitDefaultValue = false)]
        public int CURRENT_MONTH_QUOTE_VOLUME_UNKNOWN { get; set; }

        /// <summary>
        /// The total number of trades between the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the 1st of the month, this value will be 0.
        /// </summary>
        /// <value>The total number of trades between the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the 1st of the month, this value will be 0.</value>
        [DataMember(Name = "CURRENT_MONTH_TOTAL_TRADES", EmitDefaultValue = false)]
        public int CURRENT_MONTH_TOTAL_TRADES { get; set; }

        /// <summary>
        /// The total number of buy trades between the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the 1st of the month, this value will be 0.
        /// </summary>
        /// <value>The total number of buy trades between the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the 1st of the month, this value will be 0.</value>
        [DataMember(Name = "CURRENT_MONTH_TOTAL_TRADES_BUY", EmitDefaultValue = false)]
        public int CURRENT_MONTH_TOTAL_TRADES_BUY { get; set; }

        /// <summary>
        /// The total number of sell trades between the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the 1st of the month, this value will be 0.
        /// </summary>
        /// <value>The total number of sell trades between the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the 1st of the month, this value will be 0.</value>
        [DataMember(Name = "CURRENT_MONTH_TOTAL_TRADES_SELL", EmitDefaultValue = false)]
        public int CURRENT_MONTH_TOTAL_TRADES_SELL { get; set; }

        /// <summary>
        /// The total number of unknown trades between the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the 1st of the month, this value will be 0.
        /// </summary>
        /// <value>The total number of unknown trades between the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the 1st of the month, this value will be 0.</value>
        [DataMember(Name = "CURRENT_MONTH_TOTAL_TRADES_UNKNOWN", EmitDefaultValue = false)]
        public int CURRENT_MONTH_TOTAL_TRADES_UNKNOWN { get; set; }

        /// <summary>
        /// The sum of all trade quantities from the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the first of the month, this value will be 0. Given in the base asset.
        /// </summary>
        /// <value>The sum of all trade quantities from the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the first of the month, this value will be 0. Given in the base asset.</value>
        [DataMember(Name = "CURRENT_MONTH_VOLUME", EmitDefaultValue = false)]
        public int CURRENT_MONTH_VOLUME { get; set; }

        /// <summary>
        /// The sum of all buy trade quantities from the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the first of the month, this value will be 0. Given in the base asset.
        /// </summary>
        /// <value>The sum of all buy trade quantities from the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the first of the month, this value will be 0. Given in the base asset.</value>
        [DataMember(Name = "CURRENT_MONTH_VOLUME_BUY", EmitDefaultValue = false)]
        public int CURRENT_MONTH_VOLUME_BUY { get; set; }

        /// <summary>
        /// The sum of all sell trade quantities from the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the first of the month, this value will be 0. Given in the base asset.
        /// </summary>
        /// <value>The sum of all sell trade quantities from the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the first of the month, this value will be 0. Given in the base asset.</value>
        [DataMember(Name = "CURRENT_MONTH_VOLUME_SELL", EmitDefaultValue = false)]
        public int CURRENT_MONTH_VOLUME_SELL { get; set; }

        /// <summary>
        /// The sum of all unknown trade quantities from the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the first of the month, this value will be 0. Given in the base asset.
        /// </summary>
        /// <value>The sum of all unknown trade quantities from the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the first of the month, this value will be 0. Given in the base asset.</value>
        [DataMember(Name = "CURRENT_MONTH_VOLUME_UNKNOWN", EmitDefaultValue = false)]
        public int CURRENT_MONTH_VOLUME_UNKNOWN { get; set; }

        /// <summary>
        /// The highest traded price of the week excluding the current day. The period will run from Monday - 00:00:00 GMT/UTC to the beginning - 00:00:00 GMT/UTC of the current day of the week. If today is Monday, this value will be the same as CURRENT_WEEK_OPEN. Given in the quote asset.
        /// </summary>
        /// <value>The highest traded price of the week excluding the current day. The period will run from Monday - 00:00:00 GMT/UTC to the beginning - 00:00:00 GMT/UTC of the current day of the week. If today is Monday, this value will be the same as CURRENT_WEEK_OPEN. Given in the quote asset.</value>
        [DataMember(Name = "CURRENT_WEEK_HIGH", EmitDefaultValue = false)]
        public int CURRENT_WEEK_HIGH { get; set; }

        /// <summary>
        /// The lowest traded price of the week excluding the current day. The period will run from Monday - 00:00:00 GMT/UTC to the beginning - 00:00:00 GMT/UTC of the current day of the week. If today is Monday, this value will be CURRENT_WEEK_LOW. Given in the quote asset.
        /// </summary>
        /// <value>The lowest traded price of the week excluding the current day. The period will run from Monday - 00:00:00 GMT/UTC to the beginning - 00:00:00 GMT/UTC of the current day of the week. If today is Monday, this value will be CURRENT_WEEK_LOW. Given in the quote asset.</value>
        [DataMember(Name = "CURRENT_WEEK_LOW", EmitDefaultValue = false)]
        public int CURRENT_WEEK_LOW { get; set; }

        /// <summary>
        /// The price of the closest trade to Monday (00:00:00 GMT/UTC) of this week. In a highly liquid market, this would be the last trade that happened on the previous Sunday at (23:59:59 999 GMT/UTC). This will always be supplied and there is no need to do any calculation to get the full weekly value. Given in the quote asset.
        /// </summary>
        /// <value>The price of the closest trade to Monday (00:00:00 GMT/UTC) of this week. In a highly liquid market, this would be the last trade that happened on the previous Sunday at (23:59:59 999 GMT/UTC). This will always be supplied and there is no need to do any calculation to get the full weekly value. Given in the quote asset.</value>
        [DataMember(Name = "CURRENT_WEEK_OPEN", EmitDefaultValue = false)]
        public int CURRENT_WEEK_OPEN { get; set; }

        /// <summary>
        /// The sum of all trade quote quantities from Monday (00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0. Given in the quote asset.
        /// </summary>
        /// <value>The sum of all trade quote quantities from Monday (00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0. Given in the quote asset.</value>
        [DataMember(Name = "CURRENT_WEEK_QUOTE_VOLUME", EmitDefaultValue = false)]
        public int CURRENT_WEEK_QUOTE_VOLUME { get; set; }

        /// <summary>
        /// The sum of all buy trade quote quantities from Monday (00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0. Given in the quote asset.
        /// </summary>
        /// <value>The sum of all buy trade quote quantities from Monday (00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0. Given in the quote asset.</value>
        [DataMember(Name = "CURRENT_WEEK_QUOTE_VOLUME_BUY", EmitDefaultValue = false)]
        public int CURRENT_WEEK_QUOTE_VOLUME_BUY { get; set; }

        /// <summary>
        /// The sum of all sell trade quote quantities from Monday (00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0. Given in the quote asset.
        /// </summary>
        /// <value>The sum of all sell trade quote quantities from Monday (00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0. Given in the quote asset.</value>
        [DataMember(Name = "CURRENT_WEEK_QUOTE_VOLUME_SELL", EmitDefaultValue = false)]
        public int CURRENT_WEEK_QUOTE_VOLUME_SELL { get; set; }

        /// <summary>
        /// The sum of all unknown trade quote quantities from Monday (00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0. Given in the quote asset.
        /// </summary>
        /// <value>The sum of all unknown trade quote quantities from Monday (00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0. Given in the quote asset.</value>
        [DataMember(Name = "CURRENT_WEEK_QUOTE_VOLUME_UNKNOWN", EmitDefaultValue = false)]
        public int CURRENT_WEEK_QUOTE_VOLUME_UNKNOWN { get; set; }

        /// <summary>
        /// The total number of trades between Monday (00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0.
        /// </summary>
        /// <value>The total number of trades between Monday (00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0.</value>
        [DataMember(Name = "CURRENT_WEEK_TOTAL_TRADES", EmitDefaultValue = false)]
        public int CURRENT_WEEK_TOTAL_TRADES { get; set; }

        /// <summary>
        /// The total number of buy trades between Monday (00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0.
        /// </summary>
        /// <value>The total number of buy trades between Monday (00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0.</value>
        [DataMember(Name = "CURRENT_WEEK_TOTAL_TRADES_BUY", EmitDefaultValue = false)]
        public int CURRENT_WEEK_TOTAL_TRADES_BUY { get; set; }

        /// <summary>
        /// The total number of sell trades between Monday (00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0.
        /// </summary>
        /// <value>The total number of sell trades between Monday (00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0.</value>
        [DataMember(Name = "CURRENT_WEEK_TOTAL_TRADES_SELL", EmitDefaultValue = false)]
        public int CURRENT_WEEK_TOTAL_TRADES_SELL { get; set; }

        /// <summary>
        /// The total number of unknown trades between Monday (00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0.
        /// </summary>
        /// <value>The total number of unknown trades between Monday (00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0.</value>
        [DataMember(Name = "CURRENT_WEEK_TOTAL_TRADES_UNKNOWN", EmitDefaultValue = false)]
        public int CURRENT_WEEK_TOTAL_TRADES_UNKNOWN { get; set; }

        /// <summary>
        /// The sum of all trade quantities from Monday (00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0. Given in the base asset.
        /// </summary>
        /// <value>The sum of all trade quantities from Monday (00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0. Given in the base asset.</value>
        [DataMember(Name = "CURRENT_WEEK_VOLUME", EmitDefaultValue = false)]
        public int CURRENT_WEEK_VOLUME { get; set; }

        /// <summary>
        /// The sum of all buy trade quantities from Monday (00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0. Given in the base asset.
        /// </summary>
        /// <value>The sum of all buy trade quantities from Monday (00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0. Given in the base asset.</value>
        [DataMember(Name = "CURRENT_WEEK_VOLUME_BUY", EmitDefaultValue = false)]
        public int CURRENT_WEEK_VOLUME_BUY { get; set; }

        /// <summary>
        /// The sum of all sell trade quantities from Monday (00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0. Given in the base asset.
        /// </summary>
        /// <value>The sum of all sell trade quantities from Monday (00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0. Given in the base asset.</value>
        [DataMember(Name = "CURRENT_WEEK_VOLUME_SELL", EmitDefaultValue = false)]
        public int CURRENT_WEEK_VOLUME_SELL { get; set; }

        /// <summary>
        /// The sum of all unknown trade quantities from Monday (00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0. Given in the base asset.
        /// </summary>
        /// <value>The sum of all unknown trade quantities from Monday (00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0. Given in the base asset.</value>
        [DataMember(Name = "CURRENT_WEEK_VOLUME_UNKNOWN", EmitDefaultValue = false)]
        public int CURRENT_WEEK_VOLUME_UNKNOWN { get; set; }

        /// <summary>
        /// The highest traded price of the year excluding the current day. The period runs from the 1st of January - 00:00:00 GMT/UTC to the beginning - 00:00:00 GMT/UTC of the current day of the year. If today is the 1st of January, this value will be CURRENT_YEAR_OPEN. Given in the quote asset.
        /// </summary>
        /// <value>The highest traded price of the year excluding the current day. The period runs from the 1st of January - 00:00:00 GMT/UTC to the beginning - 00:00:00 GMT/UTC of the current day of the year. If today is the 1st of January, this value will be CURRENT_YEAR_OPEN. Given in the quote asset.</value>
        [DataMember(Name = "CURRENT_YEAR_HIGH", EmitDefaultValue = false)]
        public int CURRENT_YEAR_HIGH { get; set; }

        /// <summary>
        /// The lowest traded price of the year excluding the current day. The period runs from the 1st of January - 00:00:00 GMT/UTC to the beginning - 00:00:00 GMT/UTC of the current day of the year. If today is the 1st of January, this value will be CURRENT_YEAR_OPEN. Given in the quote asset.
        /// </summary>
        /// <value>The lowest traded price of the year excluding the current day. The period runs from the 1st of January - 00:00:00 GMT/UTC to the beginning - 00:00:00 GMT/UTC of the current day of the year. If today is the 1st of January, this value will be CURRENT_YEAR_OPEN. Given in the quote asset.</value>
        [DataMember(Name = "CURRENT_YEAR_LOW", EmitDefaultValue = false)]
        public int CURRENT_YEAR_LOW { get; set; }

        /// <summary>
        /// The price of the closest trade to the 1st of January (00:00:00 GMT/UTC) of this year. In a highly liquid market, this would be the last trade that happened on on the 31st of December of the previous year (23:59:59 999 GMT/UTC). This will always be supplied and there is no need to do any calculation to get the full yearly value. Given in the quote asset.
        /// </summary>
        /// <value>The price of the closest trade to the 1st of January (00:00:00 GMT/UTC) of this year. In a highly liquid market, this would be the last trade that happened on on the 31st of December of the previous year (23:59:59 999 GMT/UTC). This will always be supplied and there is no need to do any calculation to get the full yearly value. Given in the quote asset.</value>
        [DataMember(Name = "CURRENT_YEAR_OPEN", EmitDefaultValue = false)]
        public int CURRENT_YEAR_OPEN { get; set; }

        /// <summary>
        /// The sum of all trade quote quantities from the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0. Given in the quote asset.
        /// </summary>
        /// <value>The sum of all trade quote quantities from the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0. Given in the quote asset.</value>
        [DataMember(Name = "CURRENT_YEAR_QUOTE_VOLUME", EmitDefaultValue = false)]
        public int CURRENT_YEAR_QUOTE_VOLUME { get; set; }

        /// <summary>
        /// The sum of all buy trade quote quantities from the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0. Given in the quote asset.
        /// </summary>
        /// <value>The sum of all buy trade quote quantities from the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0. Given in the quote asset.</value>
        [DataMember(Name = "CURRENT_YEAR_QUOTE_VOLUME_BUY", EmitDefaultValue = false)]
        public int CURRENT_YEAR_QUOTE_VOLUME_BUY { get; set; }

        /// <summary>
        /// The sum of all sell trade quote quantities from the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0. Given in the quote asset.
        /// </summary>
        /// <value>The sum of all sell trade quote quantities from the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0. Given in the quote asset.</value>
        [DataMember(Name = "CURRENT_YEAR_QUOTE_VOLUME_SELL", EmitDefaultValue = false)]
        public int CURRENT_YEAR_QUOTE_VOLUME_SELL { get; set; }

        /// <summary>
        /// The sum of all unknown trade quote quantities from the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0. Given in the quote asset.
        /// </summary>
        /// <value>The sum of all unknown trade quote quantities from the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0. Given in the quote asset.</value>
        [DataMember(Name = "CURRENT_YEAR_QUOTE_VOLUME_UNKNOWN", EmitDefaultValue = false)]
        public int CURRENT_YEAR_QUOTE_VOLUME_UNKNOWN { get; set; }

        /// <summary>
        /// The total number of trades between the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0.
        /// </summary>
        /// <value>The total number of trades between the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0.</value>
        [DataMember(Name = "CURRENT_YEAR_TOTAL_TRADES", EmitDefaultValue = false)]
        public int CURRENT_YEAR_TOTAL_TRADES { get; set; }

        /// <summary>
        /// The total number of buy trades between the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0.
        /// </summary>
        /// <value>The total number of buy trades between the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0.</value>
        [DataMember(Name = "CURRENT_YEAR_TOTAL_TRADES_BUY", EmitDefaultValue = false)]
        public int CURRENT_YEAR_TOTAL_TRADES_BUY { get; set; }

        /// <summary>
        /// The total number of sell trades between the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0.
        /// </summary>
        /// <value>The total number of sell trades between the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0.</value>
        [DataMember(Name = "CURRENT_YEAR_TOTAL_TRADES_SELL", EmitDefaultValue = false)]
        public int CURRENT_YEAR_TOTAL_TRADES_SELL { get; set; }

        /// <summary>
        /// The total number of unknown trades between the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0.
        /// </summary>
        /// <value>The total number of unknown trades between the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0.</value>
        [DataMember(Name = "CURRENT_YEAR_TOTAL_TRADES_UNKNOWN", EmitDefaultValue = false)]
        public int CURRENT_YEAR_TOTAL_TRADES_UNKNOWN { get; set; }

        /// <summary>
        /// The sum of all trade quantities from the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0. Given in the base asset.
        /// </summary>
        /// <value>The sum of all trade quantities from the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0. Given in the base asset.</value>
        [DataMember(Name = "CURRENT_YEAR_VOLUME", EmitDefaultValue = false)]
        public int CURRENT_YEAR_VOLUME { get; set; }

        /// <summary>
        /// The sum of all buy trade quantities from the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0. Given in the base asset.
        /// </summary>
        /// <value>The sum of all buy trade quantities from the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0. Given in the base asset.</value>
        [DataMember(Name = "CURRENT_YEAR_VOLUME_BUY", EmitDefaultValue = false)]
        public int CURRENT_YEAR_VOLUME_BUY { get; set; }

        /// <summary>
        /// The sum of all sell trade quantities from the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0. Given in the base asset.
        /// </summary>
        /// <value>The sum of all sell trade quantities from the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0. Given in the base asset.</value>
        [DataMember(Name = "CURRENT_YEAR_VOLUME_SELL", EmitDefaultValue = false)]
        public int CURRENT_YEAR_VOLUME_SELL { get; set; }

        /// <summary>
        /// The sum of all unknown trade quantities from the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0. Given in the base asset.
        /// </summary>
        /// <value>The sum of all unknown trade quantities from the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0. Given in the base asset.</value>
        [DataMember(Name = "CURRENT_YEAR_VOLUME_UNKNOWN", EmitDefaultValue = false)]
        public int CURRENT_YEAR_VOLUME_UNKNOWN { get; set; }

        /// <summary>
        /// The unmapped instrument ID
        /// </summary>
        /// <value>The unmapped instrument ID</value>
        [DataMember(Name = "INSTRUMENT", EmitDefaultValue = false)]
        public string INSTRUMENT { get; set; }

        /// <summary>
        /// The CCSEQ of the latest trade.
        /// </summary>
        /// <value>The CCSEQ of the latest trade.</value>
        [DataMember(Name = "LAST_PROCESSED_TRADE_CCSEQ", EmitDefaultValue = false)]
        public string LAST_PROCESSED_TRADE_CCSEQ { get; set; }

        /// <summary>
        /// The price in the quote asset of the last trade processed, as reported by the market / exchange.
        /// </summary>
        /// <value>The price in the quote asset of the last trade processed, as reported by the market / exchange.</value>
        [DataMember(Name = "LAST_PROCESSED_TRADE_PRICE", EmitDefaultValue = false)]
        public int LAST_PROCESSED_TRADE_PRICE { get; set; }

        /// <summary>
        /// The quantity of the last processed trade in the from symbol (base / coin).
        /// </summary>
        /// <value>The quantity of the last processed trade in the from symbol (base / coin).</value>
        [DataMember(Name = "LAST_PROCESSED_TRADE_QUANTITY", EmitDefaultValue = false)]
        public int LAST_PROCESSED_TRADE_QUANTITY { get; set; }

        /// <summary>
        /// The  volume of the last processed trade in the to asset / quote.
        /// </summary>
        /// <value>The  volume of the last processed trade in the to asset / quote.</value>
        [DataMember(Name = "LAST_PROCESSED_TRADE_QUOTE_QUANTITY", EmitDefaultValue = false)]
        public int LAST_PROCESSED_TRADE_QUOTE_QUANTITY { get; set; }

        /// <summary>
        /// The side of the last processed trade.
        /// </summary>
        /// <value>The side of the last processed trade.</value>
        [DataMember(Name = "LAST_PROCESSED_TRADE_SIDE", EmitDefaultValue = false)]
        public string LAST_PROCESSED_TRADE_SIDE { get; set; }

        /// <summary>
        /// The timestamp in seconds that the last trade was processed, as reported by the market / exchange. If the market / exchange does not provide this information, the timestamp that the trade was received will be returned.
        /// </summary>
        /// <value>The timestamp in seconds that the last trade was processed, as reported by the market / exchange. If the market / exchange does not provide this information, the timestamp that the trade was received will be returned.</value>
        [DataMember(Name = "LAST_PROCESSED_TRADE_TS", EmitDefaultValue = false)]
        public int LAST_PROCESSED_TRADE_TS { get; set; }

        /// <summary>
        /// The CCSEQ of the latest trade.
        /// </summary>
        /// <value>The CCSEQ of the latest trade.</value>
        [DataMember(Name = "LAST_TRADE_CCSEQ", EmitDefaultValue = false)]
        public string LAST_TRADE_CCSEQ { get; set; }

        /// <summary>
        /// The ID of the latest trade.
        /// </summary>
        /// <value>The ID of the latest trade.</value>
        [DataMember(Name = "LAST_TRADE_ID", EmitDefaultValue = false)]
        public string LAST_TRADE_ID { get; set; }

        /// <summary>
        /// The quantity of the latest trade in the from symbol (base / coin).
        /// </summary>
        /// <value>The quantity of the latest trade in the from symbol (base / coin).</value>
        [DataMember(Name = "LAST_TRADE_QUANTITY", EmitDefaultValue = false)]
        public int LAST_TRADE_QUANTITY { get; set; }

        /// <summary>
        /// The volume of the latest trade in the to asset / quote.
        /// </summary>
        /// <value>The volume of the latest trade in the to asset / quote.</value>
        [DataMember(Name = "LAST_TRADE_QUOTE_QUANTITY", EmitDefaultValue = false)]
        public int LAST_TRADE_QUOTE_QUANTITY { get; set; }

        /// <summary>
        /// The side of the latest trade.
        /// </summary>
        /// <value>The side of the latest trade.</value>
        [DataMember(Name = "LAST_TRADE_SIDE", EmitDefaultValue = false)]
        public string LAST_TRADE_SIDE { get; set; }

        /// <summary>
        /// The timestamp of the first trade ever recorded for the instrument
        /// </summary>
        /// <value>The timestamp of the first trade ever recorded for the instrument</value>
        [DataMember(Name = "LIFETIME_FIRST_TRADE_TS", EmitDefaultValue = false)]
        public int LIFETIME_FIRST_TRADE_TS { get; set; }

        /// <summary>
        /// The price of the highest trade ever executed for this instrument. Given in the quote asset.
        /// </summary>
        /// <value>The price of the highest trade ever executed for this instrument. Given in the quote asset.</value>
        [DataMember(Name = "LIFETIME_HIGH", EmitDefaultValue = false)]
        public int LIFETIME_HIGH { get; set; }

        /// <summary>
        /// The the timestamp of the highest trade ever executed for this instrument. Given in the quote asset.
        /// </summary>
        /// <value>The the timestamp of the highest trade ever executed for this instrument. Given in the quote asset.</value>
        [DataMember(Name = "LIFETIME_HIGH_TS", EmitDefaultValue = false)]
        public int LIFETIME_HIGH_TS { get; set; }

        /// <summary>
        /// The price of the lowest trade ever executed for this instrument. Given in the quote asset.
        /// </summary>
        /// <value>The price of the lowest trade ever executed for this instrument. Given in the quote asset.</value>
        [DataMember(Name = "LIFETIME_LOW", EmitDefaultValue = false)]
        public int LIFETIME_LOW { get; set; }

        /// <summary>
        /// The timestamp of the lowest trade ever executed for this instrument. Given in the quote asset.
        /// </summary>
        /// <value>The timestamp of the lowest trade ever executed for this instrument. Given in the quote asset.</value>
        [DataMember(Name = "LIFETIME_LOW_TS", EmitDefaultValue = false)]
        public int LIFETIME_LOW_TS { get; set; }

        /// <summary>
        /// The price of the first trade of the instrument. Given in the quote asset.
        /// </summary>
        /// <value>The price of the first trade of the instrument. Given in the quote asset.</value>
        [DataMember(Name = "LIFETIME_OPEN", EmitDefaultValue = false)]
        public int LIFETIME_OPEN { get; set; }

        /// <summary>
        /// The sum of all trade quote quantities of all the trades of this instrument. Given in the quote asset.
        /// </summary>
        /// <value>The sum of all trade quote quantities of all the trades of this instrument. Given in the quote asset.</value>
        [DataMember(Name = "LIFETIME_QUOTE_VOLUME", EmitDefaultValue = false)]
        public int LIFETIME_QUOTE_VOLUME { get; set; }

        /// <summary>
        /// The sum of all buy trade quote quantities of all the trades of this instrument. Given in the quote asset.
        /// </summary>
        /// <value>The sum of all buy trade quote quantities of all the trades of this instrument. Given in the quote asset.</value>
        [DataMember(Name = "LIFETIME_QUOTE_VOLUME_BUY", EmitDefaultValue = false)]
        public int LIFETIME_QUOTE_VOLUME_BUY { get; set; }

        /// <summary>
        /// The sum of all sell trade quote quantities of all the trades of this instrument. Given in the quote asset.
        /// </summary>
        /// <value>The sum of all sell trade quote quantities of all the trades of this instrument. Given in the quote asset.</value>
        [DataMember(Name = "LIFETIME_QUOTE_VOLUME_SELL", EmitDefaultValue = false)]
        public int LIFETIME_QUOTE_VOLUME_SELL { get; set; }

        /// <summary>
        /// The sum of all unknown trade quote quantities of all the trades of this instrument. Given in the quote asset.
        /// </summary>
        /// <value>The sum of all unknown trade quote quantities of all the trades of this instrument. Given in the quote asset.</value>
        [DataMember(Name = "LIFETIME_QUOTE_VOLUME_UNKNOWN", EmitDefaultValue = false)]
        public int LIFETIME_QUOTE_VOLUME_UNKNOWN { get; set; }

        /// <summary>
        /// The total number of all trades that have ever been executed for this instrument.
        /// </summary>
        /// <value>The total number of all trades that have ever been executed for this instrument.</value>
        [DataMember(Name = "LIFETIME_TOTAL_TRADES", EmitDefaultValue = false)]
        public int LIFETIME_TOTAL_TRADES { get; set; }

        /// <summary>
        /// The total number of all buy trades that have ever been executed for this instrument.
        /// </summary>
        /// <value>The total number of all buy trades that have ever been executed for this instrument.</value>
        [DataMember(Name = "LIFETIME_TOTAL_TRADES_BUY", EmitDefaultValue = false)]
        public int LIFETIME_TOTAL_TRADES_BUY { get; set; }

        /// <summary>
        /// The total number of all sell trades that have ever been executed for this instrument.
        /// </summary>
        /// <value>The total number of all sell trades that have ever been executed for this instrument.</value>
        [DataMember(Name = "LIFETIME_TOTAL_TRADES_SELL", EmitDefaultValue = false)]
        public int LIFETIME_TOTAL_TRADES_SELL { get; set; }

        /// <summary>
        /// The total number of all unknown trades that have ever been executed for this instrument.
        /// </summary>
        /// <value>The total number of all unknown trades that have ever been executed for this instrument.</value>
        [DataMember(Name = "LIFETIME_TOTAL_TRADES_UNKNOWN", EmitDefaultValue = false)]
        public int LIFETIME_TOTAL_TRADES_UNKNOWN { get; set; }

        /// <summary>
        /// The sum of all trade quantities of all the trades of this instrument. Given in the base asset.
        /// </summary>
        /// <value>The sum of all trade quantities of all the trades of this instrument. Given in the base asset.</value>
        [DataMember(Name = "LIFETIME_VOLUME", EmitDefaultValue = false)]
        public int LIFETIME_VOLUME { get; set; }

        /// <summary>
        /// The sum of all buy trade quantities of all the trades of this instrument. Given in the base asset.
        /// </summary>
        /// <value>The sum of all buy trade quantities of all the trades of this instrument. Given in the base asset.</value>
        [DataMember(Name = "LIFETIME_VOLUME_BUY", EmitDefaultValue = false)]
        public int LIFETIME_VOLUME_BUY { get; set; }

        /// <summary>
        /// The sum of all sell trade quantities of all the trades of this instrument. Given in the base asset.
        /// </summary>
        /// <value>The sum of all sell trade quantities of all the trades of this instrument. Given in the base asset.</value>
        [DataMember(Name = "LIFETIME_VOLUME_SELL", EmitDefaultValue = false)]
        public int LIFETIME_VOLUME_SELL { get; set; }

        /// <summary>
        /// The sum of all unknown trade quantities of all the trades of this instrument. Given in the base asset.
        /// </summary>
        /// <value>The sum of all unknown trade quantities of all the trades of this instrument. Given in the base asset.</value>
        [DataMember(Name = "LIFETIME_VOLUME_UNKNOWN", EmitDefaultValue = false)]
        public int LIFETIME_VOLUME_UNKNOWN { get; set; }

        /// <summary>
        /// The mapped instrument ID, derived from our mapping rules. This takes the form: \&quot;BASE-QUOTE\&quot; (e.g. BTC-USD). Only available on instruments that have been mapped.
        /// </summary>
        /// <value>The mapped instrument ID, derived from our mapping rules. This takes the form: \&quot;BASE-QUOTE\&quot; (e.g. BTC-USD). Only available on instruments that have been mapped.</value>
        [DataMember(Name = "MAPPED_INSTRUMENT", EmitDefaultValue = false)]
        public string MAPPED_INSTRUMENT { get; set; }

        /// <summary>
        /// The market / exchange under consideration (e.g. coinbase, kraken, etc).
        /// </summary>
        /// <value>The market / exchange under consideration (e.g. coinbase, kraken, etc).</value>
        [DataMember(Name = "MARKET", EmitDefaultValue = false)]
        public string MARKET { get; set; }

        /// <summary>
        /// The  highest traded price of the period. Here, the period runs from 180 days ago up to the beginning of the current day (179 days in total). Given in the quote asset.
        /// </summary>
        /// <value>The  highest traded price of the period. Here, the period runs from 180 days ago up to the beginning of the current day (179 days in total). Given in the quote asset.</value>
        [DataMember(Name = "MOVING_180_DAY_HIGH", EmitDefaultValue = false)]
        public int MOVING180DAYHIGH { get; set; }

        /// <summary>
        /// The lowest traded price of the period. Here, the period runs from 180 days ago up to the beginning of the current day (179 days in total). Given in the quote asset.
        /// </summary>
        /// <value>The lowest traded price of the period. Here, the period runs from 180 days ago up to the beginning of the current day (179 days in total). Given in the quote asset.</value>
        [DataMember(Name = "MOVING_180_DAY_LOW", EmitDefaultValue = false)]
        public int MOVING180DAYLOW { get; set; }

        /// <summary>
        /// The price of the closest trade to the period start date (179 days + current day - 00:00:00 GMT/UTC to now). This will always be supplied and there is no need to do any calculation to get the full 180 day value. Given in the quote asset.
        /// </summary>
        /// <value>The price of the closest trade to the period start date (179 days + current day - 00:00:00 GMT/UTC to now). This will always be supplied and there is no need to do any calculation to get the full 180 day value. Given in the quote asset.</value>
        [DataMember(Name = "MOVING_180_DAY_OPEN", EmitDefaultValue = false)]
        public int MOVING180DAYOPEN { get; set; }

        /// <summary>
        /// The sum of all trade quote quantities from 180 days ago up to the beginning of the current day (179 days in total). Given in the quote asset.
        /// </summary>
        /// <value>The sum of all trade quote quantities from 180 days ago up to the beginning of the current day (179 days in total). Given in the quote asset.</value>
        [DataMember(Name = "MOVING_180_DAY_QUOTE_VOLUME", EmitDefaultValue = false)]
        public int MOVING180DAYQUOTEVOLUME { get; set; }

        /// <summary>
        /// The sum of all buy trade quote quantities from 180 days ago up to the beginning of the current day (179 days in total). Given in the quote asset.
        /// </summary>
        /// <value>The sum of all buy trade quote quantities from 180 days ago up to the beginning of the current day (179 days in total). Given in the quote asset.</value>
        [DataMember(Name = "MOVING_180_DAY_QUOTE_VOLUME_BUY", EmitDefaultValue = false)]
        public int MOVING180DAYQUOTEVOLUMEBUY { get; set; }

        /// <summary>
        /// The sum of all sell trade quote quantities from 180 days ago up to the beginning of the current day (179 days in total). Given in the quote asset.
        /// </summary>
        /// <value>The sum of all sell trade quote quantities from 180 days ago up to the beginning of the current day (179 days in total). Given in the quote asset.</value>
        [DataMember(Name = "MOVING_180_DAY_QUOTE_VOLUME_SELL", EmitDefaultValue = false)]
        public int MOVING180DAYQUOTEVOLUMESELL { get; set; }

        /// <summary>
        /// The sum of all unknown trade quote quantities from 180 days ago up to the beginning of the current day (179 days in total). Given in the quote asset.
        /// </summary>
        /// <value>The sum of all unknown trade quote quantities from 180 days ago up to the beginning of the current day (179 days in total). Given in the quote asset.</value>
        [DataMember(Name = "MOVING_180_DAY_QUOTE_VOLUME_UNKNOWN", EmitDefaultValue = false)]
        public int MOVING180DAYQUOTEVOLUMEUNKNOWN { get; set; }

        /// <summary>
        /// The total number of trades that have occurred in the period from 180 days ago to the beginning (00:00:00 GMT/UTC) of the current day (179 days in total).
        /// </summary>
        /// <value>The total number of trades that have occurred in the period from 180 days ago to the beginning (00:00:00 GMT/UTC) of the current day (179 days in total).</value>
        [DataMember(Name = "MOVING_180_DAY_TOTAL_TRADES", EmitDefaultValue = false)]
        public int MOVING180DAYTOTALTRADES { get; set; }

        /// <summary>
        /// The total number of buy trades that have occurred in the period from 180 days ago to the beginning (00:00:00 GMT/UTC) of the current day (179 days in total).
        /// </summary>
        /// <value>The total number of buy trades that have occurred in the period from 180 days ago to the beginning (00:00:00 GMT/UTC) of the current day (179 days in total).</value>
        [DataMember(Name = "MOVING_180_DAY_TOTAL_TRADES_BUY", EmitDefaultValue = false)]
        public int MOVING180DAYTOTALTRADESBUY { get; set; }

        /// <summary>
        /// The total number of sell trades that have occurred in the period from 180 days ago to the beginning (00:00:00 GMT/UTC) of the current day (179 days in total).
        /// </summary>
        /// <value>The total number of sell trades that have occurred in the period from 180 days ago to the beginning (00:00:00 GMT/UTC) of the current day (179 days in total).</value>
        [DataMember(Name = "MOVING_180_DAY_TOTAL_TRADES_SELL", EmitDefaultValue = false)]
        public int MOVING180DAYTOTALTRADESSELL { get; set; }

        /// <summary>
        /// The total number of unknown trades that have occurred in the period from 180 days ago to the beginning (00:00:00 GMT/UTC) of the current day (179 days in total).
        /// </summary>
        /// <value>The total number of unknown trades that have occurred in the period from 180 days ago to the beginning (00:00:00 GMT/UTC) of the current day (179 days in total).</value>
        [DataMember(Name = "MOVING_180_DAY_TOTAL_TRADES_UNKNOWN", EmitDefaultValue = false)]
        public int MOVING180DAYTOTALTRADESUNKNOWN { get; set; }

        /// <summary>
        /// The sum of all trade quantities from 180 days ago up to the beginning of the current day (179 days in total). Given in the base asset.
        /// </summary>
        /// <value>The sum of all trade quantities from 180 days ago up to the beginning of the current day (179 days in total). Given in the base asset.</value>
        [DataMember(Name = "MOVING_180_DAY_VOLUME", EmitDefaultValue = false)]
        public int MOVING180DAYVOLUME { get; set; }

        /// <summary>
        /// The sum of all trade quantities from 180 days ago up to the beginning of the current day (179 days in total). Given in the base asset.
        /// </summary>
        /// <value>The sum of all trade quantities from 180 days ago up to the beginning of the current day (179 days in total). Given in the base asset.</value>
        [DataMember(Name = "MOVING_180_DAY_VOLUME_BUY", EmitDefaultValue = false)]
        public int MOVING180DAYVOLUMEBUY { get; set; }

        /// <summary>
        /// The sum of all sell trade quantities from 180 days ago up to the beginning of the current day (179 days in total). Given in the base asset.
        /// </summary>
        /// <value>The sum of all sell trade quantities from 180 days ago up to the beginning of the current day (179 days in total). Given in the base asset.</value>
        [DataMember(Name = "MOVING_180_DAY_VOLUME_SELL", EmitDefaultValue = false)]
        public int MOVING180DAYVOLUMESELL { get; set; }

        /// <summary>
        /// The sum of all unknown trade quantities from 180 days ago up to the beginning of the current day (179 days in total). Given in the base asset.
        /// </summary>
        /// <value>The sum of all unknown trade quantities from 180 days ago up to the beginning of the current day (179 days in total). Given in the base asset.</value>
        [DataMember(Name = "MOVING_180_DAY_VOLUME_UNKNOWN", EmitDefaultValue = false)]
        public int MOVING180DAYVOLUMEUNKNOWN { get; set; }

        /// <summary>
        /// The highest traded price of the period. Here, the period runs from 24 hours ago up to the beginning of the current hour (23 hours in total). Given in the quote asset.
        /// </summary>
        /// <value>The highest traded price of the period. Here, the period runs from 24 hours ago up to the beginning of the current hour (23 hours in total). Given in the quote asset.</value>
        [DataMember(Name = "MOVING_24_HOUR_HIGH", EmitDefaultValue = false)]
        public int MOVING24HOURHIGH { get; set; }

        /// <summary>
        /// The lowest traded price of the period. Here, the period runs from 24 hours ago up to the beginning of the current hour (23 hours in total). Given in the quote asset.
        /// </summary>
        /// <value>The lowest traded price of the period. Here, the period runs from 24 hours ago up to the beginning of the current hour (23 hours in total). Given in the quote asset.</value>
        [DataMember(Name = "MOVING_24_HOUR_LOW", EmitDefaultValue = false)]
        public int MOVING24HOURLOW { get; set; }

        /// <summary>
        /// The price of the closest trade to the period start date (23 hours + current hour ago). This will always be supplied and there is no need to do any calculation to get the full 24 hour value. Given in the quote asset.
        /// </summary>
        /// <value>The price of the closest trade to the period start date (23 hours + current hour ago). This will always be supplied and there is no need to do any calculation to get the full 24 hour value. Given in the quote asset.</value>
        [DataMember(Name = "MOVING_24_HOUR_OPEN", EmitDefaultValue = false)]
        public int MOVING24HOUROPEN { get; set; }

        /// <summary>
        /// The sum of all trade quote quantities from 24 hours ago up to the beginning of the current hour (23 hours in total). Given in the quote asset.
        /// </summary>
        /// <value>The sum of all trade quote quantities from 24 hours ago up to the beginning of the current hour (23 hours in total). Given in the quote asset.</value>
        [DataMember(Name = "MOVING_24_HOUR_QUOTE_VOLUME", EmitDefaultValue = false)]
        public int MOVING24HOURQUOTEVOLUME { get; set; }

        /// <summary>
        /// The sum of all buy trade quote quantities from 24 hours ago up to the beginning of the current hour (23 hours in total). Given in the quote asset.
        /// </summary>
        /// <value>The sum of all buy trade quote quantities from 24 hours ago up to the beginning of the current hour (23 hours in total). Given in the quote asset.</value>
        [DataMember(Name = "MOVING_24_HOUR_QUOTE_VOLUME_BUY", EmitDefaultValue = false)]
        public int MOVING24HOURQUOTEVOLUMEBUY { get; set; }

        /// <summary>
        /// The sum of all sell trade quote quantities from 24 hours ago up to the beginning of the current hour (23 hours in total). Given in the quote asset.
        /// </summary>
        /// <value>The sum of all sell trade quote quantities from 24 hours ago up to the beginning of the current hour (23 hours in total). Given in the quote asset.</value>
        [DataMember(Name = "MOVING_24_HOUR_QUOTE_VOLUME_SELL", EmitDefaultValue = false)]
        public int MOVING24HOURQUOTEVOLUMESELL { get; set; }

        /// <summary>
        /// The sum of all unknown trade quote quantities from 24 hours ago up to the beginning of the current hour (23 hours in total). Given in the quote asset.
        /// </summary>
        /// <value>The sum of all unknown trade quote quantities from 24 hours ago up to the beginning of the current hour (23 hours in total). Given in the quote asset.</value>
        [DataMember(Name = "MOVING_24_HOUR_QUOTE_VOLUME_UNKNOWN", EmitDefaultValue = false)]
        public int MOVING24HOURQUOTEVOLUMEUNKNOWN { get; set; }

        /// <summary>
        /// The total number of trades that have occurred in the period running from 24 hours ago to the beginning (xx:00:00) of the current hour (23 hours in total).
        /// </summary>
        /// <value>The total number of trades that have occurred in the period running from 24 hours ago to the beginning (xx:00:00) of the current hour (23 hours in total).</value>
        [DataMember(Name = "MOVING_24_HOUR_TOTAL_TRADES", EmitDefaultValue = false)]
        public int MOVING24HOURTOTALTRADES { get; set; }

        /// <summary>
        /// The total number of buy trades that have occurred in the period running from 24 hours ago to the beginning (xx:00:00) of the current hour (23 hours in total).
        /// </summary>
        /// <value>The total number of buy trades that have occurred in the period running from 24 hours ago to the beginning (xx:00:00) of the current hour (23 hours in total).</value>
        [DataMember(Name = "MOVING_24_HOUR_TOTAL_TRADES_BUY", EmitDefaultValue = false)]
        public int MOVING24HOURTOTALTRADESBUY { get; set; }

        /// <summary>
        /// The total number of sell trades that have occurred in the period running from 24 hours ago to the beginning (xx:00:00) of the current hour (23 hours in total).
        /// </summary>
        /// <value>The total number of sell trades that have occurred in the period running from 24 hours ago to the beginning (xx:00:00) of the current hour (23 hours in total).</value>
        [DataMember(Name = "MOVING_24_HOUR_TOTAL_TRADES_SELL", EmitDefaultValue = false)]
        public int MOVING24HOURTOTALTRADESSELL { get; set; }

        /// <summary>
        /// The total number of unknown trades that have occurred in the period running from 24 hours ago to the beginning (xx:00:00) of the current hour (23 hours in total).
        /// </summary>
        /// <value>The total number of unknown trades that have occurred in the period running from 24 hours ago to the beginning (xx:00:00) of the current hour (23 hours in total).</value>
        [DataMember(Name = "MOVING_24_HOUR_TOTAL_TRADES_UNKNOWN", EmitDefaultValue = false)]
        public int MOVING24HOURTOTALTRADESUNKNOWN { get; set; }

        /// <summary>
        /// The sum of all trade quantities from 24 hours ago up to the beginning of the current hour (23 hours in total). Given in the base asset.
        /// </summary>
        /// <value>The sum of all trade quantities from 24 hours ago up to the beginning of the current hour (23 hours in total). Given in the base asset.</value>
        [DataMember(Name = "MOVING_24_HOUR_VOLUME", EmitDefaultValue = false)]
        public int MOVING24HOURVOLUME { get; set; }

        /// <summary>
        /// The sum of all buy trade quantities from 24 hours ago up to the beginning of the current hour (23 hours in total). Given in the base asset.
        /// </summary>
        /// <value>The sum of all buy trade quantities from 24 hours ago up to the beginning of the current hour (23 hours in total). Given in the base asset.</value>
        [DataMember(Name = "MOVING_24_HOUR_VOLUME_BUY", EmitDefaultValue = false)]
        public int MOVING24HOURVOLUMEBUY { get; set; }

        /// <summary>
        /// The sum of all sell trade quantities from 24 hours ago up to the beginning of the current hour (23 hours in total). Given in the base asset.
        /// </summary>
        /// <value>The sum of all sell trade quantities from 24 hours ago up to the beginning of the current hour (23 hours in total). Given in the base asset.</value>
        [DataMember(Name = "MOVING_24_HOUR_VOLUME_SELL", EmitDefaultValue = false)]
        public int MOVING24HOURVOLUMESELL { get; set; }

        /// <summary>
        /// The sum of all unknown trade quantities from 24 hours ago up to the beginning of the current hour (23 hours in total). Given in the base asset.
        /// </summary>
        /// <value>The sum of all unknown trade quantities from 24 hours ago up to the beginning of the current hour (23 hours in total). Given in the base asset.</value>
        [DataMember(Name = "MOVING_24_HOUR_VOLUME_UNKNOWN", EmitDefaultValue = false)]
        public int MOVING24HOURVOLUMEUNKNOWN { get; set; }

        /// <summary>
        /// The highest traded price of the period. Here, the period runs from 30 days ago up to the beginning of the current day (29 days in total). Given in the quote asset.
        /// </summary>
        /// <value>The highest traded price of the period. Here, the period runs from 30 days ago up to the beginning of the current day (29 days in total). Given in the quote asset.</value>
        [DataMember(Name = "MOVING_30_DAY_HIGH", EmitDefaultValue = false)]
        public int MOVING30DAYHIGH { get; set; }

        /// <summary>
        /// The lowest traded price of the period. Here, the period runs from 30 days ago up to the beginning of the current day (29 days in total). Given in the quote asset.
        /// </summary>
        /// <value>The lowest traded price of the period. Here, the period runs from 30 days ago up to the beginning of the current day (29 days in total). Given in the quote asset.</value>
        [DataMember(Name = "MOVING_30_DAY_LOW", EmitDefaultValue = false)]
        public int MOVING30DAYLOW { get; set; }

        /// <summary>
        /// The price of the closest trade to the period start date (29 days + current day - 00:00:00 GMT/UTC to now).  This will always be supplied and there is no need to do any calculation to get the full 30 day value. Given in the quote asset.
        /// </summary>
        /// <value>The price of the closest trade to the period start date (29 days + current day - 00:00:00 GMT/UTC to now).  This will always be supplied and there is no need to do any calculation to get the full 30 day value. Given in the quote asset.</value>
        [DataMember(Name = "MOVING_30_DAY_OPEN", EmitDefaultValue = false)]
        public int MOVING30DAYOPEN { get; set; }

        /// <summary>
        /// The sum of all trade quote quantities from 30 days ago up to the beginning of the current day (29 days in total). Given in the quote asset.
        /// </summary>
        /// <value>The sum of all trade quote quantities from 30 days ago up to the beginning of the current day (29 days in total). Given in the quote asset.</value>
        [DataMember(Name = "MOVING_30_DAY_QUOTE_VOLUME", EmitDefaultValue = false)]
        public int MOVING30DAYQUOTEVOLUME { get; set; }

        /// <summary>
        /// The sum of all buy trade quote quantities from 30 days ago up to the beginning of the current day (29 days in total). Given in the quote asset.
        /// </summary>
        /// <value>The sum of all buy trade quote quantities from 30 days ago up to the beginning of the current day (29 days in total). Given in the quote asset.</value>
        [DataMember(Name = "MOVING_30_DAY_QUOTE_VOLUME_BUY", EmitDefaultValue = false)]
        public int MOVING30DAYQUOTEVOLUMEBUY { get; set; }

        /// <summary>
        /// The sum of all sell trade quote quantities from 30 days ago up to the beginning of the current day (29 days in total). Given in the quote asset.
        /// </summary>
        /// <value>The sum of all sell trade quote quantities from 30 days ago up to the beginning of the current day (29 days in total). Given in the quote asset.</value>
        [DataMember(Name = "MOVING_30_DAY_QUOTE_VOLUME_SELL", EmitDefaultValue = false)]
        public int MOVING30DAYQUOTEVOLUMESELL { get; set; }

        /// <summary>
        /// The sum of all unknown trade quote quantities from 30 days ago up to the beginning of the current day (29 days in total). Given in the quote asset.
        /// </summary>
        /// <value>The sum of all unknown trade quote quantities from 30 days ago up to the beginning of the current day (29 days in total). Given in the quote asset.</value>
        [DataMember(Name = "MOVING_30_DAY_QUOTE_VOLUME_UNKNOWN", EmitDefaultValue = false)]
        public int MOVING30DAYQUOTEVOLUMEUNKNOWN { get; set; }

        /// <summary>
        /// The total number of trades that have occurred in the period running from 30 days ago to the beginning (00:00:00 GMT/UTC) of the current day (29 days in total).
        /// </summary>
        /// <value>The total number of trades that have occurred in the period running from 30 days ago to the beginning (00:00:00 GMT/UTC) of the current day (29 days in total).</value>
        [DataMember(Name = "MOVING_30_DAY_TOTAL_TRADES", EmitDefaultValue = false)]
        public int MOVING30DAYTOTALTRADES { get; set; }

        /// <summary>
        /// The total number of buy trades that have occurred in the period running from 30 days ago to the beginning (00:00:00 GMT/UTC) of the current day (29 days in total).
        /// </summary>
        /// <value>The total number of buy trades that have occurred in the period running from 30 days ago to the beginning (00:00:00 GMT/UTC) of the current day (29 days in total).</value>
        [DataMember(Name = "MOVING_30_DAY_TOTAL_TRADES_BUY", EmitDefaultValue = false)]
        public int MOVING30DAYTOTALTRADESBUY { get; set; }

        /// <summary>
        /// The total number of sell trades that have occurred in the period running from 30 days ago to the beginning (00:00:00 GMT/UTC) of the current day (29 days in total).
        /// </summary>
        /// <value>The total number of sell trades that have occurred in the period running from 30 days ago to the beginning (00:00:00 GMT/UTC) of the current day (29 days in total).</value>
        [DataMember(Name = "MOVING_30_DAY_TOTAL_TRADES_SELL", EmitDefaultValue = false)]
        public int MOVING30DAYTOTALTRADESSELL { get; set; }

        /// <summary>
        /// The total number of unknown trades that have occurred in the period running from 30 days ago to the beginning (00:00:00 GMT/UTC) of the current day (29 days in total).
        /// </summary>
        /// <value>The total number of unknown trades that have occurred in the period running from 30 days ago to the beginning (00:00:00 GMT/UTC) of the current day (29 days in total).</value>
        [DataMember(Name = "MOVING_30_DAY_TOTAL_TRADES_UNKNOWN", EmitDefaultValue = false)]
        public int MOVING30DAYTOTALTRADESUNKNOWN { get; set; }

        /// <summary>
        /// The sum of all trade quantities from 30 days ago up to the beginning of the current day (29 days in total). Given in the base asset.
        /// </summary>
        /// <value>The sum of all trade quantities from 30 days ago up to the beginning of the current day (29 days in total). Given in the base asset.</value>
        [DataMember(Name = "MOVING_30_DAY_VOLUME", EmitDefaultValue = false)]
        public int MOVING30DAYVOLUME { get; set; }

        /// <summary>
        /// The sum of all buy trade quantities from 30 days ago up to the beginning of the current day (29 days in total). Given in the base asset.
        /// </summary>
        /// <value>The sum of all buy trade quantities from 30 days ago up to the beginning of the current day (29 days in total). Given in the base asset.</value>
        [DataMember(Name = "MOVING_30_DAY_VOLUME_BUY", EmitDefaultValue = false)]
        public int MOVING30DAYVOLUMEBUY { get; set; }

        /// <summary>
        /// The sum of all sell trade quantities from 30 days ago up to the beginning of the current day (29 days in total). Given in the base asset.
        /// </summary>
        /// <value>The sum of all sell trade quantities from 30 days ago up to the beginning of the current day (29 days in total). Given in the base asset.</value>
        [DataMember(Name = "MOVING_30_DAY_VOLUME_SELL", EmitDefaultValue = false)]
        public int MOVING30DAYVOLUMESELL { get; set; }

        /// <summary>
        /// The sum of all unknown trade quantities from 30 days ago up to the beginning of the current day (29 days in total). Given in the base asset.
        /// </summary>
        /// <value>The sum of all unknown trade quantities from 30 days ago up to the beginning of the current day (29 days in total). Given in the base asset.</value>
        [DataMember(Name = "MOVING_30_DAY_VOLUME_UNKNOWN", EmitDefaultValue = false)]
        public int MOVING30DAYVOLUMEUNKNOWN { get; set; }

        /// <summary>
        /// The highest price of the period. Here, the period runs from 365 days ago up to the beginning of the current day (364 days in total). Given in the quote asset.
        /// </summary>
        /// <value>The highest price of the period. Here, the period runs from 365 days ago up to the beginning of the current day (364 days in total). Given in the quote asset.</value>
        [DataMember(Name = "MOVING_365_DAY_HIGH", EmitDefaultValue = false)]
        public int MOVING365DAYHIGH { get; set; }

        /// <summary>
        /// The lowest traded price of the period. Here, the period runs from 365 days ago up to the beginning of the current day (364 days in total). Given in the quote asset.
        /// </summary>
        /// <value>The lowest traded price of the period. Here, the period runs from 365 days ago up to the beginning of the current day (364 days in total). Given in the quote asset.</value>
        [DataMember(Name = "MOVING_365_DAY_LOW", EmitDefaultValue = false)]
        public int MOVING365DAYLOW { get; set; }

        /// <summary>
        /// The price of the closest trade to the period start date (364 days + current day - 00:00:00 GMT/UTC to now).  This will always be supplied and there is no need to do any calculation to get the full 365 day value. Given in the quote asset.
        /// </summary>
        /// <value>The price of the closest trade to the period start date (364 days + current day - 00:00:00 GMT/UTC to now).  This will always be supplied and there is no need to do any calculation to get the full 365 day value. Given in the quote asset.</value>
        [DataMember(Name = "MOVING_365_DAY_OPEN", EmitDefaultValue = false)]
        public int MOVING365DAYOPEN { get; set; }

        /// <summary>
        /// The sum of all trade quote quantities from 365 days ago up to the beginning of the current day (364 days in total). Given in the quote asset.
        /// </summary>
        /// <value>The sum of all trade quote quantities from 365 days ago up to the beginning of the current day (364 days in total). Given in the quote asset.</value>
        [DataMember(Name = "MOVING_365_DAY_QUOTE_VOLUME", EmitDefaultValue = false)]
        public int MOVING365DAYQUOTEVOLUME { get; set; }

        /// <summary>
        /// The sum of all buy trade quote quantities from 365 days ago up to the beginning of the current day (364 days in total). Given in the quote asset.
        /// </summary>
        /// <value>The sum of all buy trade quote quantities from 365 days ago up to the beginning of the current day (364 days in total). Given in the quote asset.</value>
        [DataMember(Name = "MOVING_365_DAY_QUOTE_VOLUME_BUY", EmitDefaultValue = false)]
        public int MOVING365DAYQUOTEVOLUMEBUY { get; set; }

        /// <summary>
        /// The sum of all sell trade quote quantities from 365 days ago up to the beginning of the current day (364 days in total). Given in the quote asset.
        /// </summary>
        /// <value>The sum of all sell trade quote quantities from 365 days ago up to the beginning of the current day (364 days in total). Given in the quote asset.</value>
        [DataMember(Name = "MOVING_365_DAY_QUOTE_VOLUME_SELL", EmitDefaultValue = false)]
        public int MOVING365DAYQUOTEVOLUMESELL { get; set; }

        /// <summary>
        /// The sum of all unknown trade quote quantities from 365 days ago up to the beginning of the current day (364 days in total). Given in the quote asset.
        /// </summary>
        /// <value>The sum of all unknown trade quote quantities from 365 days ago up to the beginning of the current day (364 days in total). Given in the quote asset.</value>
        [DataMember(Name = "MOVING_365_DAY_QUOTE_VOLUME_UNKNOWN", EmitDefaultValue = false)]
        public int MOVING365DAYQUOTEVOLUMEUNKNOWN { get; set; }

        /// <summary>
        /// The total number of trades that have occurred during the period running from 365 days ago to the beginning (00:00:00 GMT/UTC) of the current day (364 days in total).
        /// </summary>
        /// <value>The total number of trades that have occurred during the period running from 365 days ago to the beginning (00:00:00 GMT/UTC) of the current day (364 days in total).</value>
        [DataMember(Name = "MOVING_365_DAY_TOTAL_TRADES", EmitDefaultValue = false)]
        public int MOVING365DAYTOTALTRADES { get; set; }

        /// <summary>
        /// The total number of buy trades that have occurred during the period running from 365 days ago to the beginning (00:00:00 GMT/UTC) of the current day (364 days in total).
        /// </summary>
        /// <value>The total number of buy trades that have occurred during the period running from 365 days ago to the beginning (00:00:00 GMT/UTC) of the current day (364 days in total).</value>
        [DataMember(Name = "MOVING_365_DAY_TOTAL_TRADES_BUY", EmitDefaultValue = false)]
        public int MOVING365DAYTOTALTRADESBUY { get; set; }

        /// <summary>
        /// The total number of sell trades that have occurred during the period running from 365 days ago to the beginning (00:00:00 GMT/UTC) of the current day (364 days in total).
        /// </summary>
        /// <value>The total number of sell trades that have occurred during the period running from 365 days ago to the beginning (00:00:00 GMT/UTC) of the current day (364 days in total).</value>
        [DataMember(Name = "MOVING_365_DAY_TOTAL_TRADES_SELL", EmitDefaultValue = false)]
        public int MOVING365DAYTOTALTRADESSELL { get; set; }

        /// <summary>
        /// The total number of unknown trades that have occurred during the period running from 365 days ago to the beginning (00:00:00 GMT/UTC) of the current day (364 days in total).
        /// </summary>
        /// <value>The total number of unknown trades that have occurred during the period running from 365 days ago to the beginning (00:00:00 GMT/UTC) of the current day (364 days in total).</value>
        [DataMember(Name = "MOVING_365_DAY_TOTAL_TRADES_UNKNOWN", EmitDefaultValue = false)]
        public int MOVING365DAYTOTALTRADESUNKNOWN { get; set; }

        /// <summary>
        /// The sum of all trade quantities from 365 days ago up to the beginning of the current day (364 days in total). Given in the base asset.
        /// </summary>
        /// <value>The sum of all trade quantities from 365 days ago up to the beginning of the current day (364 days in total). Given in the base asset.</value>
        [DataMember(Name = "MOVING_365_DAY_VOLUME", EmitDefaultValue = false)]
        public int MOVING365DAYVOLUME { get; set; }

        /// <summary>
        /// The sum of all trade quantities from 365 days ago up to the beginning of the current day (364 days in total). Given in the base asset.
        /// </summary>
        /// <value>The sum of all trade quantities from 365 days ago up to the beginning of the current day (364 days in total). Given in the base asset.</value>
        [DataMember(Name = "MOVING_365_DAY_VOLUME_BUY", EmitDefaultValue = false)]
        public int MOVING365DAYVOLUMEBUY { get; set; }

        /// <summary>
        /// The sum of all sell trade quantities from 365 days ago up to the beginning of the current day (364 days in total). Given in the base asset.
        /// </summary>
        /// <value>The sum of all sell trade quantities from 365 days ago up to the beginning of the current day (364 days in total). Given in the base asset.</value>
        [DataMember(Name = "MOVING_365_DAY_VOLUME_SELL", EmitDefaultValue = false)]
        public int MOVING365DAYVOLUMESELL { get; set; }

        /// <summary>
        /// The sum of all unknown trade quantities from 365 days ago up to the beginning of the current day (364 days in total). Given in the base asset.
        /// </summary>
        /// <value>The sum of all unknown trade quantities from 365 days ago up to the beginning of the current day (364 days in total). Given in the base asset.</value>
        [DataMember(Name = "MOVING_365_DAY_VOLUME_UNKNOWN", EmitDefaultValue = false)]
        public int MOVING365DAYVOLUMEUNKNOWN { get; set; }

        /// <summary>
        /// The highest traded price of the period. Here, the period runs from 7 days ago up to the beginning of the current day (6 days in total). Given in the quote asset.
        /// </summary>
        /// <value>The highest traded price of the period. Here, the period runs from 7 days ago up to the beginning of the current day (6 days in total). Given in the quote asset.</value>
        [DataMember(Name = "MOVING_7_DAY_HIGH", EmitDefaultValue = false)]
        public int MOVING7DAYHIGH { get; set; }

        /// <summary>
        /// The lowest traded price of the period. Here, the period runs from 7 days ago up to the beginning of the current day (6 days in total). Given in the quote asset.
        /// </summary>
        /// <value>The lowest traded price of the period. Here, the period runs from 7 days ago up to the beginning of the current day (6 days in total). Given in the quote asset.</value>
        [DataMember(Name = "MOVING_7_DAY_LOW", EmitDefaultValue = false)]
        public int MOVING7DAYLOW { get; set; }

        /// <summary>
        /// The price of the closest trade to the period start date (6 days + current day - 00:00:00 GMT/UTC to now). This will always be supplied and there is no need to do any calculation to get the full 7 day value. Given in the quote asset.
        /// </summary>
        /// <value>The price of the closest trade to the period start date (6 days + current day - 00:00:00 GMT/UTC to now). This will always be supplied and there is no need to do any calculation to get the full 7 day value. Given in the quote asset.</value>
        [DataMember(Name = "MOVING_7_DAY_OPEN", EmitDefaultValue = false)]
        public int MOVING7DAYOPEN { get; set; }

        /// <summary>
        /// The sum of all trade quote quantities from 7 days ago up to the beginning of the current day (6 days in total). Given in the quote asset.
        /// </summary>
        /// <value>The sum of all trade quote quantities from 7 days ago up to the beginning of the current day (6 days in total). Given in the quote asset.</value>
        [DataMember(Name = "MOVING_7_DAY_QUOTE_VOLUME", EmitDefaultValue = false)]
        public int MOVING7DAYQUOTEVOLUME { get; set; }

        /// <summary>
        /// The sum of all buy trade quote quantities from 7 days ago up to the beginning of the current day (6 days in total). Given in the quote asset.
        /// </summary>
        /// <value>The sum of all buy trade quote quantities from 7 days ago up to the beginning of the current day (6 days in total). Given in the quote asset.</value>
        [DataMember(Name = "MOVING_7_DAY_QUOTE_VOLUME_BUY", EmitDefaultValue = false)]
        public int MOVING7DAYQUOTEVOLUMEBUY { get; set; }

        /// <summary>
        /// The sum of all sell trade quote quantities from 7 days ago up to the beginning of the current day (6 days in total). Given in the quote asset.
        /// </summary>
        /// <value>The sum of all sell trade quote quantities from 7 days ago up to the beginning of the current day (6 days in total). Given in the quote asset.</value>
        [DataMember(Name = "MOVING_7_DAY_QUOTE_VOLUME_SELL", EmitDefaultValue = false)]
        public int MOVING7DAYQUOTEVOLUMESELL { get; set; }

        /// <summary>
        /// The sum of all unknown trade quote quantities from 7 days ago up to the beginning of the current day (6 days in total). Given in the quote asset.
        /// </summary>
        /// <value>The sum of all unknown trade quote quantities from 7 days ago up to the beginning of the current day (6 days in total). Given in the quote asset.</value>
        [DataMember(Name = "MOVING_7_DAY_QUOTE_VOLUME_UNKNOWN", EmitDefaultValue = false)]
        public int MOVING7DAYQUOTEVOLUMEUNKNOWN { get; set; }

        /// <summary>
        /// The total number of trades that have occurred in the period running from 7 days ago to the beginning (00:00:00 GMT/UTC) of the current day (6 days in total).
        /// </summary>
        /// <value>The total number of trades that have occurred in the period running from 7 days ago to the beginning (00:00:00 GMT/UTC) of the current day (6 days in total).</value>
        [DataMember(Name = "MOVING_7_DAY_TOTAL_TRADES", EmitDefaultValue = false)]
        public int MOVING7DAYTOTALTRADES { get; set; }

        /// <summary>
        /// The total number of buy trades that have occurred in the period running from 7 days ago to the beginning (00:00:00 GMT/UTC) of the current day (6 days in total).
        /// </summary>
        /// <value>The total number of buy trades that have occurred in the period running from 7 days ago to the beginning (00:00:00 GMT/UTC) of the current day (6 days in total).</value>
        [DataMember(Name = "MOVING_7_DAY_TOTAL_TRADES_BUY", EmitDefaultValue = false)]
        public int MOVING7DAYTOTALTRADESBUY { get; set; }

        /// <summary>
        /// The total number of sell trades that have occurred in the period running from 7 days ago to the beginning (00:00:00 GMT/UTC) of the current day (6 days in total).
        /// </summary>
        /// <value>The total number of sell trades that have occurred in the period running from 7 days ago to the beginning (00:00:00 GMT/UTC) of the current day (6 days in total).</value>
        [DataMember(Name = "MOVING_7_DAY_TOTAL_TRADES_SELL", EmitDefaultValue = false)]
        public int MOVING7DAYTOTALTRADESSELL { get; set; }

        /// <summary>
        /// The total number of unknown trades that have occurred in the period running from 7 days ago to the beginning (00:00:00 GMT/UTC) of the current day (6 days in total).
        /// </summary>
        /// <value>The total number of unknown trades that have occurred in the period running from 7 days ago to the beginning (00:00:00 GMT/UTC) of the current day (6 days in total).</value>
        [DataMember(Name = "MOVING_7_DAY_TOTAL_TRADES_UNKNOWN", EmitDefaultValue = false)]
        public int MOVING7DAYTOTALTRADESUNKNOWN { get; set; }

        /// <summary>
        /// The sum of all trade quantities from 7 days ago up to the beginning of the current day (6 days in total). Given in the base asset.
        /// </summary>
        /// <value>The sum of all trade quantities from 7 days ago up to the beginning of the current day (6 days in total). Given in the base asset.</value>
        [DataMember(Name = "MOVING_7_DAY_VOLUME", EmitDefaultValue = false)]
        public int MOVING7DAYVOLUME { get; set; }

        /// <summary>
        /// The sum of all buy trade quantities from 7 days ago up to the beginning of the current day (6 days in total). Given in the base asset.
        /// </summary>
        /// <value>The sum of all buy trade quantities from 7 days ago up to the beginning of the current day (6 days in total). Given in the base asset.</value>
        [DataMember(Name = "MOVING_7_DAY_VOLUME_BUY", EmitDefaultValue = false)]
        public int MOVING7DAYVOLUMEBUY { get; set; }

        /// <summary>
        /// The sum of all sell trade quantities from 7 days ago up to the beginning of the current day (6 days in total). Given in the base asset.
        /// </summary>
        /// <value>The sum of all sell trade quantities from 7 days ago up to the beginning of the current day (6 days in total). Given in the base asset.</value>
        [DataMember(Name = "MOVING_7_DAY_VOLUME_SELL", EmitDefaultValue = false)]
        public int MOVING7DAYVOLUMESELL { get; set; }

        /// <summary>
        /// The sum of all unknown trade quantities from 7 days ago up to the beginning of the current day (6 days in total). Given in the base asset.
        /// </summary>
        /// <value>The sum of all unknown trade quantities from 7 days ago up to the beginning of the current day (6 days in total). Given in the base asset.</value>
        [DataMember(Name = "MOVING_7_DAY_VOLUME_UNKNOWN", EmitDefaultValue = false)]
        public int MOVING7DAYVOLUMEUNKNOWN { get; set; }

        /// <summary>
        /// The highest value between the MOVING_90_DAY_OPEN and the highest traded price of the period. Here, the period runs from 90 days ago up to the beginning of the current day (89 days in total). Given in the quote asset.
        /// </summary>
        /// <value>The highest value between the MOVING_90_DAY_OPEN and the highest traded price of the period. Here, the period runs from 90 days ago up to the beginning of the current day (89 days in total). Given in the quote asset.</value>
        [DataMember(Name = "MOVING_90_DAY_HIGH", EmitDefaultValue = false)]
        public int MOVING90DAYHIGH { get; set; }

        /// <summary>
        /// The lowest traded price of the period. Here, the period runs from 90 days ago up to the beginning of the current day (89 days in total). Given in the quote asset.
        /// </summary>
        /// <value>The lowest traded price of the period. Here, the period runs from 90 days ago up to the beginning of the current day (89 days in total). Given in the quote asset.</value>
        [DataMember(Name = "MOVING_90_DAY_LOW", EmitDefaultValue = false)]
        public int MOVING90DAYLOW { get; set; }

        /// <summary>
        /// The price of the closest trade to the period start date (89 days + current day - 00:00:00 GMT/UTC to now).  This will always be supplied and there is no need to do any calculation to get the full 90 day value. Given in the quote asset.
        /// </summary>
        /// <value>The price of the closest trade to the period start date (89 days + current day - 00:00:00 GMT/UTC to now).  This will always be supplied and there is no need to do any calculation to get the full 90 day value. Given in the quote asset.</value>
        [DataMember(Name = "MOVING_90_DAY_OPEN", EmitDefaultValue = false)]
        public int MOVING90DAYOPEN { get; set; }

        /// <summary>
        /// The sum of all trade quote quantities from 90 days ago up to the beginning of the current day (89 days in total). Given in the quote asset.
        /// </summary>
        /// <value>The sum of all trade quote quantities from 90 days ago up to the beginning of the current day (89 days in total). Given in the quote asset.</value>
        [DataMember(Name = "MOVING_90_DAY_QUOTE_VOLUME", EmitDefaultValue = false)]
        public int MOVING90DAYQUOTEVOLUME { get; set; }

        /// <summary>
        /// The sum of all buy trade quote quantities from 90 days ago up to the beginning of the current day (89 days in total). Given in the quote asset.
        /// </summary>
        /// <value>The sum of all buy trade quote quantities from 90 days ago up to the beginning of the current day (89 days in total). Given in the quote asset.</value>
        [DataMember(Name = "MOVING_90_DAY_QUOTE_VOLUME_BUY", EmitDefaultValue = false)]
        public int MOVING90DAYQUOTEVOLUMEBUY { get; set; }

        /// <summary>
        /// The sum of all sell trade quote quantities from 90 days ago up to the beginning of the current day (89 days in total). Given in the quote asset.
        /// </summary>
        /// <value>The sum of all sell trade quote quantities from 90 days ago up to the beginning of the current day (89 days in total). Given in the quote asset.</value>
        [DataMember(Name = "MOVING_90_DAY_QUOTE_VOLUME_SELL", EmitDefaultValue = false)]
        public int MOVING90DAYQUOTEVOLUMESELL { get; set; }

        /// <summary>
        /// The sum of all unknown trade quote quantities from 90 days ago up to the beginning of the current day (89 days in total). Given in the quote asset.
        /// </summary>
        /// <value>The sum of all unknown trade quote quantities from 90 days ago up to the beginning of the current day (89 days in total). Given in the quote asset.</value>
        [DataMember(Name = "MOVING_90_DAY_QUOTE_VOLUME_UNKNOWN", EmitDefaultValue = false)]
        public int MOVING90DAYQUOTEVOLUMEUNKNOWN { get; set; }

        /// <summary>
        /// The total number of trades that have occurred in the period running from 90 days ago to the beginning (00:00:00 GMT/UTC) of the current day (89 days in total).
        /// </summary>
        /// <value>The total number of trades that have occurred in the period running from 90 days ago to the beginning (00:00:00 GMT/UTC) of the current day (89 days in total).</value>
        [DataMember(Name = "MOVING_90_DAY_TOTAL_TRADES", EmitDefaultValue = false)]
        public int MOVING90DAYTOTALTRADES { get; set; }

        /// <summary>
        /// The total number of buy trades that have occurred in the period running from 90 days ago to the beginning (00:00:00 GMT/UTC) of the current day (89 days in total).
        /// </summary>
        /// <value>The total number of buy trades that have occurred in the period running from 90 days ago to the beginning (00:00:00 GMT/UTC) of the current day (89 days in total).</value>
        [DataMember(Name = "MOVING_90_DAY_TOTAL_TRADES_BUY", EmitDefaultValue = false)]
        public int MOVING90DAYTOTALTRADESBUY { get; set; }

        /// <summary>
        /// The total number of sell trades that have occurred in the period running from 90 days ago to the beginning (00:00:00 GMT/UTC) of the current day (89 days in total).
        /// </summary>
        /// <value>The total number of sell trades that have occurred in the period running from 90 days ago to the beginning (00:00:00 GMT/UTC) of the current day (89 days in total).</value>
        [DataMember(Name = "MOVING_90_DAY_TOTAL_TRADES_SELL", EmitDefaultValue = false)]
        public int MOVING90DAYTOTALTRADESSELL { get; set; }

        /// <summary>
        /// The total number of unknown trades that have occurred in the period running from 90 days ago to the beginning (00:00:00 GMT/UTC) of the current day (89 days in total).
        /// </summary>
        /// <value>The total number of unknown trades that have occurred in the period running from 90 days ago to the beginning (00:00:00 GMT/UTC) of the current day (89 days in total).</value>
        [DataMember(Name = "MOVING_90_DAY_TOTAL_TRADES_UNKNOWN", EmitDefaultValue = false)]
        public int MOVING90DAYTOTALTRADESUNKNOWN { get; set; }

        /// <summary>
        /// The sum of all trade quantities from 90 days ago up to the beginning of the current day (89 days in total). Given in the base asset.
        /// </summary>
        /// <value>The sum of all trade quantities from 90 days ago up to the beginning of the current day (89 days in total). Given in the base asset.</value>
        [DataMember(Name = "MOVING_90_DAY_VOLUME", EmitDefaultValue = false)]
        public int MOVING90DAYVOLUME { get; set; }

        /// <summary>
        /// The sum of all trade quantities from 90 days ago up to the beginning of the current day (89 days in total). Given in the base asset.
        /// </summary>
        /// <value>The sum of all trade quantities from 90 days ago up to the beginning of the current day (89 days in total). Given in the base asset.</value>
        [DataMember(Name = "MOVING_90_DAY_VOLUME_BUY", EmitDefaultValue = false)]
        public int MOVING90DAYVOLUMEBUY { get; set; }

        /// <summary>
        /// The sum of all sell trade quantities from 90 days ago up to the beginning of the current day (89 days in total). Given in the base asset.
        /// </summary>
        /// <value>The sum of all sell trade quantities from 90 days ago up to the beginning of the current day (89 days in total). Given in the base asset.</value>
        [DataMember(Name = "MOVING_90_DAY_VOLUME_SELL", EmitDefaultValue = false)]
        public int MOVING90DAYVOLUMESELL { get; set; }

        /// <summary>
        /// The sum of all unknown trade quantities from 90 days ago up to the beginning of the current day (89 days in total). Given in the base asset.
        /// </summary>
        /// <value>The sum of all unknown trade quantities from 90 days ago up to the beginning of the current day (89 days in total). Given in the base asset.</value>
        [DataMember(Name = "MOVING_90_DAY_VOLUME_UNKNOWN", EmitDefaultValue = false)]
        public int MOVING90DAYVOLUMEUNKNOWN { get; set; }

        /// <summary>
        /// The price in the to asset (quote / number symbol / coin) of the latest trade. I.e. for a BTC-USD trade, how much was paid for one BTC in USD).
        /// </summary>
        /// <value>The price in the to asset (quote / number symbol / coin) of the latest trade. I.e. for a BTC-USD trade, how much was paid for one BTC in USD).</value>
        [DataMember(Name = "PRICE", EmitDefaultValue = false)]
        public int PRICE { get; set; }

        /// <summary>
        /// The flag indicating whether the price has increased, decreased, or not changed
        /// </summary>
        /// <value>The flag indicating whether the price has increased, decreased, or not changed</value>
        [DataMember(Name = "PRICE_FLAG", EmitDefaultValue = false)]
        public string PRICE_FLAG { get; set; }

        /// <summary>
        /// The timestamp in seconds as reported by the market / exchange. If the market /exchange does not provide this information, the received timestamp will be returned.
        /// </summary>
        /// <value>The timestamp in seconds as reported by the market / exchange. If the market /exchange does not provide this information, the received timestamp will be returned.</value>
        [DataMember(Name = "PRICE_LAST_UPDATE_TS", EmitDefaultValue = false)]
        public int PRICE_LAST_UPDATE_TS { get; set; }

        /// <summary>
        /// The mapped to asset (quote / counter symbol / coin), e.g. USD. Only available on instruments that have been mapped.
        /// </summary>
        /// <value>The mapped to asset (quote / counter symbol / coin), e.g. USD. Only available on instruments that have been mapped.</value>
        [DataMember(Name = "QUOTE", EmitDefaultValue = false)]
        public string QUOTE { get; set; }

        /// <summary>
        /// The timestamp in seconds of the last time the top ask was updated, as reported by the market / exchange. If the market / exchange does not provide this information, the received timestamp will be returned.
        /// </summary>
        /// <value>The timestamp in seconds of the last time the top ask was updated, as reported by the market / exchange. If the market / exchange does not provide this information, the received timestamp will be returned.</value>
        [DataMember(Name = "TOP_ASK_LAST_UPDATE_TS", EmitDefaultValue = false)]
        public int TOP_ASK_LAST_UPDATE_TS { get; set; }

        /// <summary>
        /// The price of the top ask in the to asset (quote / numberer symbol / coin). For a BTC-USD order book, this will be the best price someone is willing to sell some BTC in USD, as quoted for 1 full BTC.
        /// </summary>
        /// <value>The price of the top ask in the to asset (quote / numberer symbol / coin). For a BTC-USD order book, this will be the best price someone is willing to sell some BTC in USD, as quoted for 1 full BTC.</value>
        [DataMember(Name = "TOP_ASK_PRICE", EmitDefaultValue = false)]
        public int TOP_ASK_PRICE { get; set; }

        /// <summary>
        /// The quantity of the top ask in the from asset (base / coin). For a BTC-USD order book, this will be the amount of BTC a person is willing to sell at the best price.
        /// </summary>
        /// <value>The quantity of the top ask in the from asset (base / coin). For a BTC-USD order book, this will be the amount of BTC a person is willing to sell at the best price.</value>
        [DataMember(Name = "TOP_ASK_QUANTITY", EmitDefaultValue = false)]
        public int TOP_ASK_QUANTITY { get; set; }

        /// <summary>
        /// The timestamp in seconds of the last time the top bid was updated, as reported by the market / exchange. If the market / exchange does not provide this information, the received timestamp will be returned.
        /// </summary>
        /// <value>The timestamp in seconds of the last time the top bid was updated, as reported by the market / exchange. If the market / exchange does not provide this information, the received timestamp will be returned.</value>
        [DataMember(Name = "TOP_BID_LAST_UPDATE_TS", EmitDefaultValue = false)]
        public int TOP_BID_LAST_UPDATE_TS { get; set; }

        /// <summary>
        /// The price of the top bid in the to asset (quote / numberer symbol / coin). For a BTC-USD order book, this will be the highest price a person is willing to pay for some BTC in USD, as quoted for 1 full BTC.
        /// </summary>
        /// <value>The price of the top bid in the to asset (quote / numberer symbol / coin). For a BTC-USD order book, this will be the highest price a person is willing to pay for some BTC in USD, as quoted for 1 full BTC.</value>
        [DataMember(Name = "TOP_BID_PRICE", EmitDefaultValue = false)]
        public int TOP_BID_PRICE { get; set; }

        /// <summary>
        /// The quantity of the top bid in the from asset (base / coin). For a BTC-USD order book , this will be the amount of BTC someone is willing to buy at the best price.
        /// </summary>
        /// <value>The quantity of the top bid in the from asset (base / coin). For a BTC-USD order book , this will be the amount of BTC someone is willing to buy at the best price.</value>
        [DataMember(Name = "TOP_BID_QUANTITY", EmitDefaultValue = false)]
        public int TOP_BID_QUANTITY { get; set; }

        /// <summary>
        /// The type of the message.
        /// </summary>
        /// <value>The type of the message.</value>
        [DataMember(Name = "TYPE", EmitDefaultValue = false)]
        public string TYPE { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SPOTINSTRUMENTMARKETDATA {\n");
            sb.Append("  BASE: ").Append(BASE).Append("\n");
            sb.Append("  CCSEQ: ").Append(CCSEQ).Append("\n");
            sb.Append("  CURRENT_DAY_HIGH: ").Append(CURRENT_DAY_HIGH).Append("\n");
            sb.Append("  CURRENT_DAY_LOW: ").Append(CURRENT_DAY_LOW).Append("\n");
            sb.Append("  CURRENT_DAY_OPEN: ").Append(CURRENT_DAY_OPEN).Append("\n");
            sb.Append("  CURRENT_DAY_QUOTE_VOLUME: ").Append(CURRENT_DAY_QUOTE_VOLUME).Append("\n");
            sb.Append("  CURRENT_DAY_QUOTE_VOLUME_BUY: ").Append(CURRENT_DAY_QUOTE_VOLUME_BUY).Append("\n");
            sb.Append("  CURRENT_DAY_QUOTE_VOLUME_SELL: ").Append(CURRENT_DAY_QUOTE_VOLUME_SELL).Append("\n");
            sb.Append("  CURRENT_DAY_QUOTE_VOLUME_UNKNOWN: ").Append(CURRENT_DAY_QUOTE_VOLUME_UNKNOWN).Append("\n");
            sb.Append("  CURRENT_DAY_TOTAL_TRADES: ").Append(CURRENT_DAY_TOTAL_TRADES).Append("\n");
            sb.Append("  CURRENT_DAY_TOTAL_TRADES_BUY: ").Append(CURRENT_DAY_TOTAL_TRADES_BUY).Append("\n");
            sb.Append("  CURRENT_DAY_TOTAL_TRADES_SELL: ").Append(CURRENT_DAY_TOTAL_TRADES_SELL).Append("\n");
            sb.Append("  CURRENT_DAY_TOTAL_TRADES_UNKNOWN: ").Append(CURRENT_DAY_TOTAL_TRADES_UNKNOWN).Append("\n");
            sb.Append("  CURRENT_DAY_VOLUME: ").Append(CURRENT_DAY_VOLUME).Append("\n");
            sb.Append("  CURRENT_DAY_VOLUME_BUY: ").Append(CURRENT_DAY_VOLUME_BUY).Append("\n");
            sb.Append("  CURRENT_DAY_VOLUME_SELL: ").Append(CURRENT_DAY_VOLUME_SELL).Append("\n");
            sb.Append("  CURRENT_DAY_VOLUME_UNKNOWN: ").Append(CURRENT_DAY_VOLUME_UNKNOWN).Append("\n");
            sb.Append("  CURRENT_HOUR_HIGH: ").Append(CURRENT_HOUR_HIGH).Append("\n");
            sb.Append("  CURRENT_HOUR_LOW: ").Append(CURRENT_HOUR_LOW).Append("\n");
            sb.Append("  CURRENT_HOUR_OPEN: ").Append(CURRENT_HOUR_OPEN).Append("\n");
            sb.Append("  CURRENT_HOUR_QUOTE_VOLUME: ").Append(CURRENT_HOUR_QUOTE_VOLUME).Append("\n");
            sb.Append("  CURRENT_HOUR_QUOTE_VOLUME_BUY: ").Append(CURRENT_HOUR_QUOTE_VOLUME_BUY).Append("\n");
            sb.Append("  CURRENT_HOUR_QUOTE_VOLUME_SELL: ").Append(CURRENT_HOUR_QUOTE_VOLUME_SELL).Append("\n");
            sb.Append("  CURRENT_HOUR_QUOTE_VOLUME_UNKNOWN: ").Append(CURRENT_HOUR_QUOTE_VOLUME_UNKNOWN).Append("\n");
            sb.Append("  CURRENT_HOUR_TOTAL_TRADES: ").Append(CURRENT_HOUR_TOTAL_TRADES).Append("\n");
            sb.Append("  CURRENT_HOUR_TOTAL_TRADES_BUY: ").Append(CURRENT_HOUR_TOTAL_TRADES_BUY).Append("\n");
            sb.Append("  CURRENT_HOUR_TOTAL_TRADES_SELL: ").Append(CURRENT_HOUR_TOTAL_TRADES_SELL).Append("\n");
            sb.Append("  CURRENT_HOUR_TOTAL_TRADES_UNKNOWN: ").Append(CURRENT_HOUR_TOTAL_TRADES_UNKNOWN).Append("\n");
            sb.Append("  CURRENT_HOUR_VOLUME: ").Append(CURRENT_HOUR_VOLUME).Append("\n");
            sb.Append("  CURRENT_HOUR_VOLUME_BUY: ").Append(CURRENT_HOUR_VOLUME_BUY).Append("\n");
            sb.Append("  CURRENT_HOUR_VOLUME_SELL: ").Append(CURRENT_HOUR_VOLUME_SELL).Append("\n");
            sb.Append("  CURRENT_HOUR_VOLUME_UNKNOWN: ").Append(CURRENT_HOUR_VOLUME_UNKNOWN).Append("\n");
            sb.Append("  CURRENT_MONTH_HIGH: ").Append(CURRENT_MONTH_HIGH).Append("\n");
            sb.Append("  CURRENT_MONTH_LOW: ").Append(CURRENT_MONTH_LOW).Append("\n");
            sb.Append("  CURRENT_MONTH_OPEN: ").Append(CURRENT_MONTH_OPEN).Append("\n");
            sb.Append("  CURRENT_MONTH_QUOTE_VOLUME: ").Append(CURRENT_MONTH_QUOTE_VOLUME).Append("\n");
            sb.Append("  CURRENT_MONTH_QUOTE_VOLUME_BUY: ").Append(CURRENT_MONTH_QUOTE_VOLUME_BUY).Append("\n");
            sb.Append("  CURRENT_MONTH_QUOTE_VOLUME_SELL: ").Append(CURRENT_MONTH_QUOTE_VOLUME_SELL).Append("\n");
            sb.Append("  CURRENT_MONTH_QUOTE_VOLUME_UNKNOWN: ").Append(CURRENT_MONTH_QUOTE_VOLUME_UNKNOWN).Append("\n");
            sb.Append("  CURRENT_MONTH_TOTAL_TRADES: ").Append(CURRENT_MONTH_TOTAL_TRADES).Append("\n");
            sb.Append("  CURRENT_MONTH_TOTAL_TRADES_BUY: ").Append(CURRENT_MONTH_TOTAL_TRADES_BUY).Append("\n");
            sb.Append("  CURRENT_MONTH_TOTAL_TRADES_SELL: ").Append(CURRENT_MONTH_TOTAL_TRADES_SELL).Append("\n");
            sb.Append("  CURRENT_MONTH_TOTAL_TRADES_UNKNOWN: ").Append(CURRENT_MONTH_TOTAL_TRADES_UNKNOWN).Append("\n");
            sb.Append("  CURRENT_MONTH_VOLUME: ").Append(CURRENT_MONTH_VOLUME).Append("\n");
            sb.Append("  CURRENT_MONTH_VOLUME_BUY: ").Append(CURRENT_MONTH_VOLUME_BUY).Append("\n");
            sb.Append("  CURRENT_MONTH_VOLUME_SELL: ").Append(CURRENT_MONTH_VOLUME_SELL).Append("\n");
            sb.Append("  CURRENT_MONTH_VOLUME_UNKNOWN: ").Append(CURRENT_MONTH_VOLUME_UNKNOWN).Append("\n");
            sb.Append("  CURRENT_WEEK_HIGH: ").Append(CURRENT_WEEK_HIGH).Append("\n");
            sb.Append("  CURRENT_WEEK_LOW: ").Append(CURRENT_WEEK_LOW).Append("\n");
            sb.Append("  CURRENT_WEEK_OPEN: ").Append(CURRENT_WEEK_OPEN).Append("\n");
            sb.Append("  CURRENT_WEEK_QUOTE_VOLUME: ").Append(CURRENT_WEEK_QUOTE_VOLUME).Append("\n");
            sb.Append("  CURRENT_WEEK_QUOTE_VOLUME_BUY: ").Append(CURRENT_WEEK_QUOTE_VOLUME_BUY).Append("\n");
            sb.Append("  CURRENT_WEEK_QUOTE_VOLUME_SELL: ").Append(CURRENT_WEEK_QUOTE_VOLUME_SELL).Append("\n");
            sb.Append("  CURRENT_WEEK_QUOTE_VOLUME_UNKNOWN: ").Append(CURRENT_WEEK_QUOTE_VOLUME_UNKNOWN).Append("\n");
            sb.Append("  CURRENT_WEEK_TOTAL_TRADES: ").Append(CURRENT_WEEK_TOTAL_TRADES).Append("\n");
            sb.Append("  CURRENT_WEEK_TOTAL_TRADES_BUY: ").Append(CURRENT_WEEK_TOTAL_TRADES_BUY).Append("\n");
            sb.Append("  CURRENT_WEEK_TOTAL_TRADES_SELL: ").Append(CURRENT_WEEK_TOTAL_TRADES_SELL).Append("\n");
            sb.Append("  CURRENT_WEEK_TOTAL_TRADES_UNKNOWN: ").Append(CURRENT_WEEK_TOTAL_TRADES_UNKNOWN).Append("\n");
            sb.Append("  CURRENT_WEEK_VOLUME: ").Append(CURRENT_WEEK_VOLUME).Append("\n");
            sb.Append("  CURRENT_WEEK_VOLUME_BUY: ").Append(CURRENT_WEEK_VOLUME_BUY).Append("\n");
            sb.Append("  CURRENT_WEEK_VOLUME_SELL: ").Append(CURRENT_WEEK_VOLUME_SELL).Append("\n");
            sb.Append("  CURRENT_WEEK_VOLUME_UNKNOWN: ").Append(CURRENT_WEEK_VOLUME_UNKNOWN).Append("\n");
            sb.Append("  CURRENT_YEAR_HIGH: ").Append(CURRENT_YEAR_HIGH).Append("\n");
            sb.Append("  CURRENT_YEAR_LOW: ").Append(CURRENT_YEAR_LOW).Append("\n");
            sb.Append("  CURRENT_YEAR_OPEN: ").Append(CURRENT_YEAR_OPEN).Append("\n");
            sb.Append("  CURRENT_YEAR_QUOTE_VOLUME: ").Append(CURRENT_YEAR_QUOTE_VOLUME).Append("\n");
            sb.Append("  CURRENT_YEAR_QUOTE_VOLUME_BUY: ").Append(CURRENT_YEAR_QUOTE_VOLUME_BUY).Append("\n");
            sb.Append("  CURRENT_YEAR_QUOTE_VOLUME_SELL: ").Append(CURRENT_YEAR_QUOTE_VOLUME_SELL).Append("\n");
            sb.Append("  CURRENT_YEAR_QUOTE_VOLUME_UNKNOWN: ").Append(CURRENT_YEAR_QUOTE_VOLUME_UNKNOWN).Append("\n");
            sb.Append("  CURRENT_YEAR_TOTAL_TRADES: ").Append(CURRENT_YEAR_TOTAL_TRADES).Append("\n");
            sb.Append("  CURRENT_YEAR_TOTAL_TRADES_BUY: ").Append(CURRENT_YEAR_TOTAL_TRADES_BUY).Append("\n");
            sb.Append("  CURRENT_YEAR_TOTAL_TRADES_SELL: ").Append(CURRENT_YEAR_TOTAL_TRADES_SELL).Append("\n");
            sb.Append("  CURRENT_YEAR_TOTAL_TRADES_UNKNOWN: ").Append(CURRENT_YEAR_TOTAL_TRADES_UNKNOWN).Append("\n");
            sb.Append("  CURRENT_YEAR_VOLUME: ").Append(CURRENT_YEAR_VOLUME).Append("\n");
            sb.Append("  CURRENT_YEAR_VOLUME_BUY: ").Append(CURRENT_YEAR_VOLUME_BUY).Append("\n");
            sb.Append("  CURRENT_YEAR_VOLUME_SELL: ").Append(CURRENT_YEAR_VOLUME_SELL).Append("\n");
            sb.Append("  CURRENT_YEAR_VOLUME_UNKNOWN: ").Append(CURRENT_YEAR_VOLUME_UNKNOWN).Append("\n");
            sb.Append("  INSTRUMENT: ").Append(INSTRUMENT).Append("\n");
            sb.Append("  LAST_PROCESSED_TRADE_CCSEQ: ").Append(LAST_PROCESSED_TRADE_CCSEQ).Append("\n");
            sb.Append("  LAST_PROCESSED_TRADE_PRICE: ").Append(LAST_PROCESSED_TRADE_PRICE).Append("\n");
            sb.Append("  LAST_PROCESSED_TRADE_QUANTITY: ").Append(LAST_PROCESSED_TRADE_QUANTITY).Append("\n");
            sb.Append("  LAST_PROCESSED_TRADE_QUOTE_QUANTITY: ").Append(LAST_PROCESSED_TRADE_QUOTE_QUANTITY).Append("\n");
            sb.Append("  LAST_PROCESSED_TRADE_SIDE: ").Append(LAST_PROCESSED_TRADE_SIDE).Append("\n");
            sb.Append("  LAST_PROCESSED_TRADE_TS: ").Append(LAST_PROCESSED_TRADE_TS).Append("\n");
            sb.Append("  LAST_TRADE_CCSEQ: ").Append(LAST_TRADE_CCSEQ).Append("\n");
            sb.Append("  LAST_TRADE_ID: ").Append(LAST_TRADE_ID).Append("\n");
            sb.Append("  LAST_TRADE_QUANTITY: ").Append(LAST_TRADE_QUANTITY).Append("\n");
            sb.Append("  LAST_TRADE_QUOTE_QUANTITY: ").Append(LAST_TRADE_QUOTE_QUANTITY).Append("\n");
            sb.Append("  LAST_TRADE_SIDE: ").Append(LAST_TRADE_SIDE).Append("\n");
            sb.Append("  LIFETIME_FIRST_TRADE_TS: ").Append(LIFETIME_FIRST_TRADE_TS).Append("\n");
            sb.Append("  LIFETIME_HIGH: ").Append(LIFETIME_HIGH).Append("\n");
            sb.Append("  LIFETIME_HIGH_TS: ").Append(LIFETIME_HIGH_TS).Append("\n");
            sb.Append("  LIFETIME_LOW: ").Append(LIFETIME_LOW).Append("\n");
            sb.Append("  LIFETIME_LOW_TS: ").Append(LIFETIME_LOW_TS).Append("\n");
            sb.Append("  LIFETIME_OPEN: ").Append(LIFETIME_OPEN).Append("\n");
            sb.Append("  LIFETIME_QUOTE_VOLUME: ").Append(LIFETIME_QUOTE_VOLUME).Append("\n");
            sb.Append("  LIFETIME_QUOTE_VOLUME_BUY: ").Append(LIFETIME_QUOTE_VOLUME_BUY).Append("\n");
            sb.Append("  LIFETIME_QUOTE_VOLUME_SELL: ").Append(LIFETIME_QUOTE_VOLUME_SELL).Append("\n");
            sb.Append("  LIFETIME_QUOTE_VOLUME_UNKNOWN: ").Append(LIFETIME_QUOTE_VOLUME_UNKNOWN).Append("\n");
            sb.Append("  LIFETIME_TOTAL_TRADES: ").Append(LIFETIME_TOTAL_TRADES).Append("\n");
            sb.Append("  LIFETIME_TOTAL_TRADES_BUY: ").Append(LIFETIME_TOTAL_TRADES_BUY).Append("\n");
            sb.Append("  LIFETIME_TOTAL_TRADES_SELL: ").Append(LIFETIME_TOTAL_TRADES_SELL).Append("\n");
            sb.Append("  LIFETIME_TOTAL_TRADES_UNKNOWN: ").Append(LIFETIME_TOTAL_TRADES_UNKNOWN).Append("\n");
            sb.Append("  LIFETIME_VOLUME: ").Append(LIFETIME_VOLUME).Append("\n");
            sb.Append("  LIFETIME_VOLUME_BUY: ").Append(LIFETIME_VOLUME_BUY).Append("\n");
            sb.Append("  LIFETIME_VOLUME_SELL: ").Append(LIFETIME_VOLUME_SELL).Append("\n");
            sb.Append("  LIFETIME_VOLUME_UNKNOWN: ").Append(LIFETIME_VOLUME_UNKNOWN).Append("\n");
            sb.Append("  MAPPED_INSTRUMENT: ").Append(MAPPED_INSTRUMENT).Append("\n");
            sb.Append("  MARKET: ").Append(MARKET).Append("\n");
            sb.Append("  MOVING180DAYHIGH: ").Append(MOVING180DAYHIGH).Append("\n");
            sb.Append("  MOVING180DAYLOW: ").Append(MOVING180DAYLOW).Append("\n");
            sb.Append("  MOVING180DAYOPEN: ").Append(MOVING180DAYOPEN).Append("\n");
            sb.Append("  MOVING180DAYQUOTEVOLUME: ").Append(MOVING180DAYQUOTEVOLUME).Append("\n");
            sb.Append("  MOVING180DAYQUOTEVOLUMEBUY: ").Append(MOVING180DAYQUOTEVOLUMEBUY).Append("\n");
            sb.Append("  MOVING180DAYQUOTEVOLUMESELL: ").Append(MOVING180DAYQUOTEVOLUMESELL).Append("\n");
            sb.Append("  MOVING180DAYQUOTEVOLUMEUNKNOWN: ").Append(MOVING180DAYQUOTEVOLUMEUNKNOWN).Append("\n");
            sb.Append("  MOVING180DAYTOTALTRADES: ").Append(MOVING180DAYTOTALTRADES).Append("\n");
            sb.Append("  MOVING180DAYTOTALTRADESBUY: ").Append(MOVING180DAYTOTALTRADESBUY).Append("\n");
            sb.Append("  MOVING180DAYTOTALTRADESSELL: ").Append(MOVING180DAYTOTALTRADESSELL).Append("\n");
            sb.Append("  MOVING180DAYTOTALTRADESUNKNOWN: ").Append(MOVING180DAYTOTALTRADESUNKNOWN).Append("\n");
            sb.Append("  MOVING180DAYVOLUME: ").Append(MOVING180DAYVOLUME).Append("\n");
            sb.Append("  MOVING180DAYVOLUMEBUY: ").Append(MOVING180DAYVOLUMEBUY).Append("\n");
            sb.Append("  MOVING180DAYVOLUMESELL: ").Append(MOVING180DAYVOLUMESELL).Append("\n");
            sb.Append("  MOVING180DAYVOLUMEUNKNOWN: ").Append(MOVING180DAYVOLUMEUNKNOWN).Append("\n");
            sb.Append("  MOVING24HOURHIGH: ").Append(MOVING24HOURHIGH).Append("\n");
            sb.Append("  MOVING24HOURLOW: ").Append(MOVING24HOURLOW).Append("\n");
            sb.Append("  MOVING24HOUROPEN: ").Append(MOVING24HOUROPEN).Append("\n");
            sb.Append("  MOVING24HOURQUOTEVOLUME: ").Append(MOVING24HOURQUOTEVOLUME).Append("\n");
            sb.Append("  MOVING24HOURQUOTEVOLUMEBUY: ").Append(MOVING24HOURQUOTEVOLUMEBUY).Append("\n");
            sb.Append("  MOVING24HOURQUOTEVOLUMESELL: ").Append(MOVING24HOURQUOTEVOLUMESELL).Append("\n");
            sb.Append("  MOVING24HOURQUOTEVOLUMEUNKNOWN: ").Append(MOVING24HOURQUOTEVOLUMEUNKNOWN).Append("\n");
            sb.Append("  MOVING24HOURTOTALTRADES: ").Append(MOVING24HOURTOTALTRADES).Append("\n");
            sb.Append("  MOVING24HOURTOTALTRADESBUY: ").Append(MOVING24HOURTOTALTRADESBUY).Append("\n");
            sb.Append("  MOVING24HOURTOTALTRADESSELL: ").Append(MOVING24HOURTOTALTRADESSELL).Append("\n");
            sb.Append("  MOVING24HOURTOTALTRADESUNKNOWN: ").Append(MOVING24HOURTOTALTRADESUNKNOWN).Append("\n");
            sb.Append("  MOVING24HOURVOLUME: ").Append(MOVING24HOURVOLUME).Append("\n");
            sb.Append("  MOVING24HOURVOLUMEBUY: ").Append(MOVING24HOURVOLUMEBUY).Append("\n");
            sb.Append("  MOVING24HOURVOLUMESELL: ").Append(MOVING24HOURVOLUMESELL).Append("\n");
            sb.Append("  MOVING24HOURVOLUMEUNKNOWN: ").Append(MOVING24HOURVOLUMEUNKNOWN).Append("\n");
            sb.Append("  MOVING30DAYHIGH: ").Append(MOVING30DAYHIGH).Append("\n");
            sb.Append("  MOVING30DAYLOW: ").Append(MOVING30DAYLOW).Append("\n");
            sb.Append("  MOVING30DAYOPEN: ").Append(MOVING30DAYOPEN).Append("\n");
            sb.Append("  MOVING30DAYQUOTEVOLUME: ").Append(MOVING30DAYQUOTEVOLUME).Append("\n");
            sb.Append("  MOVING30DAYQUOTEVOLUMEBUY: ").Append(MOVING30DAYQUOTEVOLUMEBUY).Append("\n");
            sb.Append("  MOVING30DAYQUOTEVOLUMESELL: ").Append(MOVING30DAYQUOTEVOLUMESELL).Append("\n");
            sb.Append("  MOVING30DAYQUOTEVOLUMEUNKNOWN: ").Append(MOVING30DAYQUOTEVOLUMEUNKNOWN).Append("\n");
            sb.Append("  MOVING30DAYTOTALTRADES: ").Append(MOVING30DAYTOTALTRADES).Append("\n");
            sb.Append("  MOVING30DAYTOTALTRADESBUY: ").Append(MOVING30DAYTOTALTRADESBUY).Append("\n");
            sb.Append("  MOVING30DAYTOTALTRADESSELL: ").Append(MOVING30DAYTOTALTRADESSELL).Append("\n");
            sb.Append("  MOVING30DAYTOTALTRADESUNKNOWN: ").Append(MOVING30DAYTOTALTRADESUNKNOWN).Append("\n");
            sb.Append("  MOVING30DAYVOLUME: ").Append(MOVING30DAYVOLUME).Append("\n");
            sb.Append("  MOVING30DAYVOLUMEBUY: ").Append(MOVING30DAYVOLUMEBUY).Append("\n");
            sb.Append("  MOVING30DAYVOLUMESELL: ").Append(MOVING30DAYVOLUMESELL).Append("\n");
            sb.Append("  MOVING30DAYVOLUMEUNKNOWN: ").Append(MOVING30DAYVOLUMEUNKNOWN).Append("\n");
            sb.Append("  MOVING365DAYHIGH: ").Append(MOVING365DAYHIGH).Append("\n");
            sb.Append("  MOVING365DAYLOW: ").Append(MOVING365DAYLOW).Append("\n");
            sb.Append("  MOVING365DAYOPEN: ").Append(MOVING365DAYOPEN).Append("\n");
            sb.Append("  MOVING365DAYQUOTEVOLUME: ").Append(MOVING365DAYQUOTEVOLUME).Append("\n");
            sb.Append("  MOVING365DAYQUOTEVOLUMEBUY: ").Append(MOVING365DAYQUOTEVOLUMEBUY).Append("\n");
            sb.Append("  MOVING365DAYQUOTEVOLUMESELL: ").Append(MOVING365DAYQUOTEVOLUMESELL).Append("\n");
            sb.Append("  MOVING365DAYQUOTEVOLUMEUNKNOWN: ").Append(MOVING365DAYQUOTEVOLUMEUNKNOWN).Append("\n");
            sb.Append("  MOVING365DAYTOTALTRADES: ").Append(MOVING365DAYTOTALTRADES).Append("\n");
            sb.Append("  MOVING365DAYTOTALTRADESBUY: ").Append(MOVING365DAYTOTALTRADESBUY).Append("\n");
            sb.Append("  MOVING365DAYTOTALTRADESSELL: ").Append(MOVING365DAYTOTALTRADESSELL).Append("\n");
            sb.Append("  MOVING365DAYTOTALTRADESUNKNOWN: ").Append(MOVING365DAYTOTALTRADESUNKNOWN).Append("\n");
            sb.Append("  MOVING365DAYVOLUME: ").Append(MOVING365DAYVOLUME).Append("\n");
            sb.Append("  MOVING365DAYVOLUMEBUY: ").Append(MOVING365DAYVOLUMEBUY).Append("\n");
            sb.Append("  MOVING365DAYVOLUMESELL: ").Append(MOVING365DAYVOLUMESELL).Append("\n");
            sb.Append("  MOVING365DAYVOLUMEUNKNOWN: ").Append(MOVING365DAYVOLUMEUNKNOWN).Append("\n");
            sb.Append("  MOVING7DAYHIGH: ").Append(MOVING7DAYHIGH).Append("\n");
            sb.Append("  MOVING7DAYLOW: ").Append(MOVING7DAYLOW).Append("\n");
            sb.Append("  MOVING7DAYOPEN: ").Append(MOVING7DAYOPEN).Append("\n");
            sb.Append("  MOVING7DAYQUOTEVOLUME: ").Append(MOVING7DAYQUOTEVOLUME).Append("\n");
            sb.Append("  MOVING7DAYQUOTEVOLUMEBUY: ").Append(MOVING7DAYQUOTEVOLUMEBUY).Append("\n");
            sb.Append("  MOVING7DAYQUOTEVOLUMESELL: ").Append(MOVING7DAYQUOTEVOLUMESELL).Append("\n");
            sb.Append("  MOVING7DAYQUOTEVOLUMEUNKNOWN: ").Append(MOVING7DAYQUOTEVOLUMEUNKNOWN).Append("\n");
            sb.Append("  MOVING7DAYTOTALTRADES: ").Append(MOVING7DAYTOTALTRADES).Append("\n");
            sb.Append("  MOVING7DAYTOTALTRADESBUY: ").Append(MOVING7DAYTOTALTRADESBUY).Append("\n");
            sb.Append("  MOVING7DAYTOTALTRADESSELL: ").Append(MOVING7DAYTOTALTRADESSELL).Append("\n");
            sb.Append("  MOVING7DAYTOTALTRADESUNKNOWN: ").Append(MOVING7DAYTOTALTRADESUNKNOWN).Append("\n");
            sb.Append("  MOVING7DAYVOLUME: ").Append(MOVING7DAYVOLUME).Append("\n");
            sb.Append("  MOVING7DAYVOLUMEBUY: ").Append(MOVING7DAYVOLUMEBUY).Append("\n");
            sb.Append("  MOVING7DAYVOLUMESELL: ").Append(MOVING7DAYVOLUMESELL).Append("\n");
            sb.Append("  MOVING7DAYVOLUMEUNKNOWN: ").Append(MOVING7DAYVOLUMEUNKNOWN).Append("\n");
            sb.Append("  MOVING90DAYHIGH: ").Append(MOVING90DAYHIGH).Append("\n");
            sb.Append("  MOVING90DAYLOW: ").Append(MOVING90DAYLOW).Append("\n");
            sb.Append("  MOVING90DAYOPEN: ").Append(MOVING90DAYOPEN).Append("\n");
            sb.Append("  MOVING90DAYQUOTEVOLUME: ").Append(MOVING90DAYQUOTEVOLUME).Append("\n");
            sb.Append("  MOVING90DAYQUOTEVOLUMEBUY: ").Append(MOVING90DAYQUOTEVOLUMEBUY).Append("\n");
            sb.Append("  MOVING90DAYQUOTEVOLUMESELL: ").Append(MOVING90DAYQUOTEVOLUMESELL).Append("\n");
            sb.Append("  MOVING90DAYQUOTEVOLUMEUNKNOWN: ").Append(MOVING90DAYQUOTEVOLUMEUNKNOWN).Append("\n");
            sb.Append("  MOVING90DAYTOTALTRADES: ").Append(MOVING90DAYTOTALTRADES).Append("\n");
            sb.Append("  MOVING90DAYTOTALTRADESBUY: ").Append(MOVING90DAYTOTALTRADESBUY).Append("\n");
            sb.Append("  MOVING90DAYTOTALTRADESSELL: ").Append(MOVING90DAYTOTALTRADESSELL).Append("\n");
            sb.Append("  MOVING90DAYTOTALTRADESUNKNOWN: ").Append(MOVING90DAYTOTALTRADESUNKNOWN).Append("\n");
            sb.Append("  MOVING90DAYVOLUME: ").Append(MOVING90DAYVOLUME).Append("\n");
            sb.Append("  MOVING90DAYVOLUMEBUY: ").Append(MOVING90DAYVOLUMEBUY).Append("\n");
            sb.Append("  MOVING90DAYVOLUMESELL: ").Append(MOVING90DAYVOLUMESELL).Append("\n");
            sb.Append("  MOVING90DAYVOLUMEUNKNOWN: ").Append(MOVING90DAYVOLUMEUNKNOWN).Append("\n");
            sb.Append("  PRICE: ").Append(PRICE).Append("\n");
            sb.Append("  PRICE_FLAG: ").Append(PRICE_FLAG).Append("\n");
            sb.Append("  PRICE_LAST_UPDATE_TS: ").Append(PRICE_LAST_UPDATE_TS).Append("\n");
            sb.Append("  QUOTE: ").Append(QUOTE).Append("\n");
            sb.Append("  TOP_ASK_LAST_UPDATE_TS: ").Append(TOP_ASK_LAST_UPDATE_TS).Append("\n");
            sb.Append("  TOP_ASK_PRICE: ").Append(TOP_ASK_PRICE).Append("\n");
            sb.Append("  TOP_ASK_QUANTITY: ").Append(TOP_ASK_QUANTITY).Append("\n");
            sb.Append("  TOP_BID_LAST_UPDATE_TS: ").Append(TOP_BID_LAST_UPDATE_TS).Append("\n");
            sb.Append("  TOP_BID_PRICE: ").Append(TOP_BID_PRICE).Append("\n");
            sb.Append("  TOP_BID_QUANTITY: ").Append(TOP_BID_QUANTITY).Append("\n");
            sb.Append("  TYPE: ").Append(TYPE).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SPOTINSTRUMENTMARKETDATA);
        }

        /// <summary>
        /// Returns true if SPOTINSTRUMENTMARKETDATA instances are equal
        /// </summary>
        /// <param name="input">Instance of SPOTINSTRUMENTMARKETDATA to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SPOTINSTRUMENTMARKETDATA input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BASE == input.BASE ||
                    (this.BASE != null &&
                    this.BASE.Equals(input.BASE))
                ) && 
                (
                    this.CCSEQ == input.CCSEQ ||
                    this.CCSEQ.Equals(input.CCSEQ)
                ) && 
                (
                    this.CURRENT_DAY_HIGH == input.CURRENT_DAY_HIGH ||
                    this.CURRENT_DAY_HIGH.Equals(input.CURRENT_DAY_HIGH)
                ) && 
                (
                    this.CURRENT_DAY_LOW == input.CURRENT_DAY_LOW ||
                    this.CURRENT_DAY_LOW.Equals(input.CURRENT_DAY_LOW)
                ) && 
                (
                    this.CURRENT_DAY_OPEN == input.CURRENT_DAY_OPEN ||
                    this.CURRENT_DAY_OPEN.Equals(input.CURRENT_DAY_OPEN)
                ) && 
                (
                    this.CURRENT_DAY_QUOTE_VOLUME == input.CURRENT_DAY_QUOTE_VOLUME ||
                    this.CURRENT_DAY_QUOTE_VOLUME.Equals(input.CURRENT_DAY_QUOTE_VOLUME)
                ) && 
                (
                    this.CURRENT_DAY_QUOTE_VOLUME_BUY == input.CURRENT_DAY_QUOTE_VOLUME_BUY ||
                    this.CURRENT_DAY_QUOTE_VOLUME_BUY.Equals(input.CURRENT_DAY_QUOTE_VOLUME_BUY)
                ) && 
                (
                    this.CURRENT_DAY_QUOTE_VOLUME_SELL == input.CURRENT_DAY_QUOTE_VOLUME_SELL ||
                    this.CURRENT_DAY_QUOTE_VOLUME_SELL.Equals(input.CURRENT_DAY_QUOTE_VOLUME_SELL)
                ) && 
                (
                    this.CURRENT_DAY_QUOTE_VOLUME_UNKNOWN == input.CURRENT_DAY_QUOTE_VOLUME_UNKNOWN ||
                    this.CURRENT_DAY_QUOTE_VOLUME_UNKNOWN.Equals(input.CURRENT_DAY_QUOTE_VOLUME_UNKNOWN)
                ) && 
                (
                    this.CURRENT_DAY_TOTAL_TRADES == input.CURRENT_DAY_TOTAL_TRADES ||
                    this.CURRENT_DAY_TOTAL_TRADES.Equals(input.CURRENT_DAY_TOTAL_TRADES)
                ) && 
                (
                    this.CURRENT_DAY_TOTAL_TRADES_BUY == input.CURRENT_DAY_TOTAL_TRADES_BUY ||
                    this.CURRENT_DAY_TOTAL_TRADES_BUY.Equals(input.CURRENT_DAY_TOTAL_TRADES_BUY)
                ) && 
                (
                    this.CURRENT_DAY_TOTAL_TRADES_SELL == input.CURRENT_DAY_TOTAL_TRADES_SELL ||
                    this.CURRENT_DAY_TOTAL_TRADES_SELL.Equals(input.CURRENT_DAY_TOTAL_TRADES_SELL)
                ) && 
                (
                    this.CURRENT_DAY_TOTAL_TRADES_UNKNOWN == input.CURRENT_DAY_TOTAL_TRADES_UNKNOWN ||
                    this.CURRENT_DAY_TOTAL_TRADES_UNKNOWN.Equals(input.CURRENT_DAY_TOTAL_TRADES_UNKNOWN)
                ) && 
                (
                    this.CURRENT_DAY_VOLUME == input.CURRENT_DAY_VOLUME ||
                    this.CURRENT_DAY_VOLUME.Equals(input.CURRENT_DAY_VOLUME)
                ) && 
                (
                    this.CURRENT_DAY_VOLUME_BUY == input.CURRENT_DAY_VOLUME_BUY ||
                    this.CURRENT_DAY_VOLUME_BUY.Equals(input.CURRENT_DAY_VOLUME_BUY)
                ) && 
                (
                    this.CURRENT_DAY_VOLUME_SELL == input.CURRENT_DAY_VOLUME_SELL ||
                    this.CURRENT_DAY_VOLUME_SELL.Equals(input.CURRENT_DAY_VOLUME_SELL)
                ) && 
                (
                    this.CURRENT_DAY_VOLUME_UNKNOWN == input.CURRENT_DAY_VOLUME_UNKNOWN ||
                    this.CURRENT_DAY_VOLUME_UNKNOWN.Equals(input.CURRENT_DAY_VOLUME_UNKNOWN)
                ) && 
                (
                    this.CURRENT_HOUR_HIGH == input.CURRENT_HOUR_HIGH ||
                    this.CURRENT_HOUR_HIGH.Equals(input.CURRENT_HOUR_HIGH)
                ) && 
                (
                    this.CURRENT_HOUR_LOW == input.CURRENT_HOUR_LOW ||
                    this.CURRENT_HOUR_LOW.Equals(input.CURRENT_HOUR_LOW)
                ) && 
                (
                    this.CURRENT_HOUR_OPEN == input.CURRENT_HOUR_OPEN ||
                    this.CURRENT_HOUR_OPEN.Equals(input.CURRENT_HOUR_OPEN)
                ) && 
                (
                    this.CURRENT_HOUR_QUOTE_VOLUME == input.CURRENT_HOUR_QUOTE_VOLUME ||
                    this.CURRENT_HOUR_QUOTE_VOLUME.Equals(input.CURRENT_HOUR_QUOTE_VOLUME)
                ) && 
                (
                    this.CURRENT_HOUR_QUOTE_VOLUME_BUY == input.CURRENT_HOUR_QUOTE_VOLUME_BUY ||
                    this.CURRENT_HOUR_QUOTE_VOLUME_BUY.Equals(input.CURRENT_HOUR_QUOTE_VOLUME_BUY)
                ) && 
                (
                    this.CURRENT_HOUR_QUOTE_VOLUME_SELL == input.CURRENT_HOUR_QUOTE_VOLUME_SELL ||
                    this.CURRENT_HOUR_QUOTE_VOLUME_SELL.Equals(input.CURRENT_HOUR_QUOTE_VOLUME_SELL)
                ) && 
                (
                    this.CURRENT_HOUR_QUOTE_VOLUME_UNKNOWN == input.CURRENT_HOUR_QUOTE_VOLUME_UNKNOWN ||
                    this.CURRENT_HOUR_QUOTE_VOLUME_UNKNOWN.Equals(input.CURRENT_HOUR_QUOTE_VOLUME_UNKNOWN)
                ) && 
                (
                    this.CURRENT_HOUR_TOTAL_TRADES == input.CURRENT_HOUR_TOTAL_TRADES ||
                    this.CURRENT_HOUR_TOTAL_TRADES.Equals(input.CURRENT_HOUR_TOTAL_TRADES)
                ) && 
                (
                    this.CURRENT_HOUR_TOTAL_TRADES_BUY == input.CURRENT_HOUR_TOTAL_TRADES_BUY ||
                    this.CURRENT_HOUR_TOTAL_TRADES_BUY.Equals(input.CURRENT_HOUR_TOTAL_TRADES_BUY)
                ) && 
                (
                    this.CURRENT_HOUR_TOTAL_TRADES_SELL == input.CURRENT_HOUR_TOTAL_TRADES_SELL ||
                    this.CURRENT_HOUR_TOTAL_TRADES_SELL.Equals(input.CURRENT_HOUR_TOTAL_TRADES_SELL)
                ) && 
                (
                    this.CURRENT_HOUR_TOTAL_TRADES_UNKNOWN == input.CURRENT_HOUR_TOTAL_TRADES_UNKNOWN ||
                    this.CURRENT_HOUR_TOTAL_TRADES_UNKNOWN.Equals(input.CURRENT_HOUR_TOTAL_TRADES_UNKNOWN)
                ) && 
                (
                    this.CURRENT_HOUR_VOLUME == input.CURRENT_HOUR_VOLUME ||
                    this.CURRENT_HOUR_VOLUME.Equals(input.CURRENT_HOUR_VOLUME)
                ) && 
                (
                    this.CURRENT_HOUR_VOLUME_BUY == input.CURRENT_HOUR_VOLUME_BUY ||
                    this.CURRENT_HOUR_VOLUME_BUY.Equals(input.CURRENT_HOUR_VOLUME_BUY)
                ) && 
                (
                    this.CURRENT_HOUR_VOLUME_SELL == input.CURRENT_HOUR_VOLUME_SELL ||
                    this.CURRENT_HOUR_VOLUME_SELL.Equals(input.CURRENT_HOUR_VOLUME_SELL)
                ) && 
                (
                    this.CURRENT_HOUR_VOLUME_UNKNOWN == input.CURRENT_HOUR_VOLUME_UNKNOWN ||
                    this.CURRENT_HOUR_VOLUME_UNKNOWN.Equals(input.CURRENT_HOUR_VOLUME_UNKNOWN)
                ) && 
                (
                    this.CURRENT_MONTH_HIGH == input.CURRENT_MONTH_HIGH ||
                    this.CURRENT_MONTH_HIGH.Equals(input.CURRENT_MONTH_HIGH)
                ) && 
                (
                    this.CURRENT_MONTH_LOW == input.CURRENT_MONTH_LOW ||
                    this.CURRENT_MONTH_LOW.Equals(input.CURRENT_MONTH_LOW)
                ) && 
                (
                    this.CURRENT_MONTH_OPEN == input.CURRENT_MONTH_OPEN ||
                    this.CURRENT_MONTH_OPEN.Equals(input.CURRENT_MONTH_OPEN)
                ) && 
                (
                    this.CURRENT_MONTH_QUOTE_VOLUME == input.CURRENT_MONTH_QUOTE_VOLUME ||
                    this.CURRENT_MONTH_QUOTE_VOLUME.Equals(input.CURRENT_MONTH_QUOTE_VOLUME)
                ) && 
                (
                    this.CURRENT_MONTH_QUOTE_VOLUME_BUY == input.CURRENT_MONTH_QUOTE_VOLUME_BUY ||
                    this.CURRENT_MONTH_QUOTE_VOLUME_BUY.Equals(input.CURRENT_MONTH_QUOTE_VOLUME_BUY)
                ) && 
                (
                    this.CURRENT_MONTH_QUOTE_VOLUME_SELL == input.CURRENT_MONTH_QUOTE_VOLUME_SELL ||
                    this.CURRENT_MONTH_QUOTE_VOLUME_SELL.Equals(input.CURRENT_MONTH_QUOTE_VOLUME_SELL)
                ) && 
                (
                    this.CURRENT_MONTH_QUOTE_VOLUME_UNKNOWN == input.CURRENT_MONTH_QUOTE_VOLUME_UNKNOWN ||
                    this.CURRENT_MONTH_QUOTE_VOLUME_UNKNOWN.Equals(input.CURRENT_MONTH_QUOTE_VOLUME_UNKNOWN)
                ) && 
                (
                    this.CURRENT_MONTH_TOTAL_TRADES == input.CURRENT_MONTH_TOTAL_TRADES ||
                    this.CURRENT_MONTH_TOTAL_TRADES.Equals(input.CURRENT_MONTH_TOTAL_TRADES)
                ) && 
                (
                    this.CURRENT_MONTH_TOTAL_TRADES_BUY == input.CURRENT_MONTH_TOTAL_TRADES_BUY ||
                    this.CURRENT_MONTH_TOTAL_TRADES_BUY.Equals(input.CURRENT_MONTH_TOTAL_TRADES_BUY)
                ) && 
                (
                    this.CURRENT_MONTH_TOTAL_TRADES_SELL == input.CURRENT_MONTH_TOTAL_TRADES_SELL ||
                    this.CURRENT_MONTH_TOTAL_TRADES_SELL.Equals(input.CURRENT_MONTH_TOTAL_TRADES_SELL)
                ) && 
                (
                    this.CURRENT_MONTH_TOTAL_TRADES_UNKNOWN == input.CURRENT_MONTH_TOTAL_TRADES_UNKNOWN ||
                    this.CURRENT_MONTH_TOTAL_TRADES_UNKNOWN.Equals(input.CURRENT_MONTH_TOTAL_TRADES_UNKNOWN)
                ) && 
                (
                    this.CURRENT_MONTH_VOLUME == input.CURRENT_MONTH_VOLUME ||
                    this.CURRENT_MONTH_VOLUME.Equals(input.CURRENT_MONTH_VOLUME)
                ) && 
                (
                    this.CURRENT_MONTH_VOLUME_BUY == input.CURRENT_MONTH_VOLUME_BUY ||
                    this.CURRENT_MONTH_VOLUME_BUY.Equals(input.CURRENT_MONTH_VOLUME_BUY)
                ) && 
                (
                    this.CURRENT_MONTH_VOLUME_SELL == input.CURRENT_MONTH_VOLUME_SELL ||
                    this.CURRENT_MONTH_VOLUME_SELL.Equals(input.CURRENT_MONTH_VOLUME_SELL)
                ) && 
                (
                    this.CURRENT_MONTH_VOLUME_UNKNOWN == input.CURRENT_MONTH_VOLUME_UNKNOWN ||
                    this.CURRENT_MONTH_VOLUME_UNKNOWN.Equals(input.CURRENT_MONTH_VOLUME_UNKNOWN)
                ) && 
                (
                    this.CURRENT_WEEK_HIGH == input.CURRENT_WEEK_HIGH ||
                    this.CURRENT_WEEK_HIGH.Equals(input.CURRENT_WEEK_HIGH)
                ) && 
                (
                    this.CURRENT_WEEK_LOW == input.CURRENT_WEEK_LOW ||
                    this.CURRENT_WEEK_LOW.Equals(input.CURRENT_WEEK_LOW)
                ) && 
                (
                    this.CURRENT_WEEK_OPEN == input.CURRENT_WEEK_OPEN ||
                    this.CURRENT_WEEK_OPEN.Equals(input.CURRENT_WEEK_OPEN)
                ) && 
                (
                    this.CURRENT_WEEK_QUOTE_VOLUME == input.CURRENT_WEEK_QUOTE_VOLUME ||
                    this.CURRENT_WEEK_QUOTE_VOLUME.Equals(input.CURRENT_WEEK_QUOTE_VOLUME)
                ) && 
                (
                    this.CURRENT_WEEK_QUOTE_VOLUME_BUY == input.CURRENT_WEEK_QUOTE_VOLUME_BUY ||
                    this.CURRENT_WEEK_QUOTE_VOLUME_BUY.Equals(input.CURRENT_WEEK_QUOTE_VOLUME_BUY)
                ) && 
                (
                    this.CURRENT_WEEK_QUOTE_VOLUME_SELL == input.CURRENT_WEEK_QUOTE_VOLUME_SELL ||
                    this.CURRENT_WEEK_QUOTE_VOLUME_SELL.Equals(input.CURRENT_WEEK_QUOTE_VOLUME_SELL)
                ) && 
                (
                    this.CURRENT_WEEK_QUOTE_VOLUME_UNKNOWN == input.CURRENT_WEEK_QUOTE_VOLUME_UNKNOWN ||
                    this.CURRENT_WEEK_QUOTE_VOLUME_UNKNOWN.Equals(input.CURRENT_WEEK_QUOTE_VOLUME_UNKNOWN)
                ) && 
                (
                    this.CURRENT_WEEK_TOTAL_TRADES == input.CURRENT_WEEK_TOTAL_TRADES ||
                    this.CURRENT_WEEK_TOTAL_TRADES.Equals(input.CURRENT_WEEK_TOTAL_TRADES)
                ) && 
                (
                    this.CURRENT_WEEK_TOTAL_TRADES_BUY == input.CURRENT_WEEK_TOTAL_TRADES_BUY ||
                    this.CURRENT_WEEK_TOTAL_TRADES_BUY.Equals(input.CURRENT_WEEK_TOTAL_TRADES_BUY)
                ) && 
                (
                    this.CURRENT_WEEK_TOTAL_TRADES_SELL == input.CURRENT_WEEK_TOTAL_TRADES_SELL ||
                    this.CURRENT_WEEK_TOTAL_TRADES_SELL.Equals(input.CURRENT_WEEK_TOTAL_TRADES_SELL)
                ) && 
                (
                    this.CURRENT_WEEK_TOTAL_TRADES_UNKNOWN == input.CURRENT_WEEK_TOTAL_TRADES_UNKNOWN ||
                    this.CURRENT_WEEK_TOTAL_TRADES_UNKNOWN.Equals(input.CURRENT_WEEK_TOTAL_TRADES_UNKNOWN)
                ) && 
                (
                    this.CURRENT_WEEK_VOLUME == input.CURRENT_WEEK_VOLUME ||
                    this.CURRENT_WEEK_VOLUME.Equals(input.CURRENT_WEEK_VOLUME)
                ) && 
                (
                    this.CURRENT_WEEK_VOLUME_BUY == input.CURRENT_WEEK_VOLUME_BUY ||
                    this.CURRENT_WEEK_VOLUME_BUY.Equals(input.CURRENT_WEEK_VOLUME_BUY)
                ) && 
                (
                    this.CURRENT_WEEK_VOLUME_SELL == input.CURRENT_WEEK_VOLUME_SELL ||
                    this.CURRENT_WEEK_VOLUME_SELL.Equals(input.CURRENT_WEEK_VOLUME_SELL)
                ) && 
                (
                    this.CURRENT_WEEK_VOLUME_UNKNOWN == input.CURRENT_WEEK_VOLUME_UNKNOWN ||
                    this.CURRENT_WEEK_VOLUME_UNKNOWN.Equals(input.CURRENT_WEEK_VOLUME_UNKNOWN)
                ) && 
                (
                    this.CURRENT_YEAR_HIGH == input.CURRENT_YEAR_HIGH ||
                    this.CURRENT_YEAR_HIGH.Equals(input.CURRENT_YEAR_HIGH)
                ) && 
                (
                    this.CURRENT_YEAR_LOW == input.CURRENT_YEAR_LOW ||
                    this.CURRENT_YEAR_LOW.Equals(input.CURRENT_YEAR_LOW)
                ) && 
                (
                    this.CURRENT_YEAR_OPEN == input.CURRENT_YEAR_OPEN ||
                    this.CURRENT_YEAR_OPEN.Equals(input.CURRENT_YEAR_OPEN)
                ) && 
                (
                    this.CURRENT_YEAR_QUOTE_VOLUME == input.CURRENT_YEAR_QUOTE_VOLUME ||
                    this.CURRENT_YEAR_QUOTE_VOLUME.Equals(input.CURRENT_YEAR_QUOTE_VOLUME)
                ) && 
                (
                    this.CURRENT_YEAR_QUOTE_VOLUME_BUY == input.CURRENT_YEAR_QUOTE_VOLUME_BUY ||
                    this.CURRENT_YEAR_QUOTE_VOLUME_BUY.Equals(input.CURRENT_YEAR_QUOTE_VOLUME_BUY)
                ) && 
                (
                    this.CURRENT_YEAR_QUOTE_VOLUME_SELL == input.CURRENT_YEAR_QUOTE_VOLUME_SELL ||
                    this.CURRENT_YEAR_QUOTE_VOLUME_SELL.Equals(input.CURRENT_YEAR_QUOTE_VOLUME_SELL)
                ) && 
                (
                    this.CURRENT_YEAR_QUOTE_VOLUME_UNKNOWN == input.CURRENT_YEAR_QUOTE_VOLUME_UNKNOWN ||
                    this.CURRENT_YEAR_QUOTE_VOLUME_UNKNOWN.Equals(input.CURRENT_YEAR_QUOTE_VOLUME_UNKNOWN)
                ) && 
                (
                    this.CURRENT_YEAR_TOTAL_TRADES == input.CURRENT_YEAR_TOTAL_TRADES ||
                    this.CURRENT_YEAR_TOTAL_TRADES.Equals(input.CURRENT_YEAR_TOTAL_TRADES)
                ) && 
                (
                    this.CURRENT_YEAR_TOTAL_TRADES_BUY == input.CURRENT_YEAR_TOTAL_TRADES_BUY ||
                    this.CURRENT_YEAR_TOTAL_TRADES_BUY.Equals(input.CURRENT_YEAR_TOTAL_TRADES_BUY)
                ) && 
                (
                    this.CURRENT_YEAR_TOTAL_TRADES_SELL == input.CURRENT_YEAR_TOTAL_TRADES_SELL ||
                    this.CURRENT_YEAR_TOTAL_TRADES_SELL.Equals(input.CURRENT_YEAR_TOTAL_TRADES_SELL)
                ) && 
                (
                    this.CURRENT_YEAR_TOTAL_TRADES_UNKNOWN == input.CURRENT_YEAR_TOTAL_TRADES_UNKNOWN ||
                    this.CURRENT_YEAR_TOTAL_TRADES_UNKNOWN.Equals(input.CURRENT_YEAR_TOTAL_TRADES_UNKNOWN)
                ) && 
                (
                    this.CURRENT_YEAR_VOLUME == input.CURRENT_YEAR_VOLUME ||
                    this.CURRENT_YEAR_VOLUME.Equals(input.CURRENT_YEAR_VOLUME)
                ) && 
                (
                    this.CURRENT_YEAR_VOLUME_BUY == input.CURRENT_YEAR_VOLUME_BUY ||
                    this.CURRENT_YEAR_VOLUME_BUY.Equals(input.CURRENT_YEAR_VOLUME_BUY)
                ) && 
                (
                    this.CURRENT_YEAR_VOLUME_SELL == input.CURRENT_YEAR_VOLUME_SELL ||
                    this.CURRENT_YEAR_VOLUME_SELL.Equals(input.CURRENT_YEAR_VOLUME_SELL)
                ) && 
                (
                    this.CURRENT_YEAR_VOLUME_UNKNOWN == input.CURRENT_YEAR_VOLUME_UNKNOWN ||
                    this.CURRENT_YEAR_VOLUME_UNKNOWN.Equals(input.CURRENT_YEAR_VOLUME_UNKNOWN)
                ) && 
                (
                    this.INSTRUMENT == input.INSTRUMENT ||
                    (this.INSTRUMENT != null &&
                    this.INSTRUMENT.Equals(input.INSTRUMENT))
                ) && 
                (
                    this.LAST_PROCESSED_TRADE_CCSEQ == input.LAST_PROCESSED_TRADE_CCSEQ ||
                    (this.LAST_PROCESSED_TRADE_CCSEQ != null &&
                    this.LAST_PROCESSED_TRADE_CCSEQ.Equals(input.LAST_PROCESSED_TRADE_CCSEQ))
                ) && 
                (
                    this.LAST_PROCESSED_TRADE_PRICE == input.LAST_PROCESSED_TRADE_PRICE ||
                    this.LAST_PROCESSED_TRADE_PRICE.Equals(input.LAST_PROCESSED_TRADE_PRICE)
                ) && 
                (
                    this.LAST_PROCESSED_TRADE_QUANTITY == input.LAST_PROCESSED_TRADE_QUANTITY ||
                    this.LAST_PROCESSED_TRADE_QUANTITY.Equals(input.LAST_PROCESSED_TRADE_QUANTITY)
                ) && 
                (
                    this.LAST_PROCESSED_TRADE_QUOTE_QUANTITY == input.LAST_PROCESSED_TRADE_QUOTE_QUANTITY ||
                    this.LAST_PROCESSED_TRADE_QUOTE_QUANTITY.Equals(input.LAST_PROCESSED_TRADE_QUOTE_QUANTITY)
                ) && 
                (
                    this.LAST_PROCESSED_TRADE_SIDE == input.LAST_PROCESSED_TRADE_SIDE ||
                    (this.LAST_PROCESSED_TRADE_SIDE != null &&
                    this.LAST_PROCESSED_TRADE_SIDE.Equals(input.LAST_PROCESSED_TRADE_SIDE))
                ) && 
                (
                    this.LAST_PROCESSED_TRADE_TS == input.LAST_PROCESSED_TRADE_TS ||
                    this.LAST_PROCESSED_TRADE_TS.Equals(input.LAST_PROCESSED_TRADE_TS)
                ) && 
                (
                    this.LAST_TRADE_CCSEQ == input.LAST_TRADE_CCSEQ ||
                    (this.LAST_TRADE_CCSEQ != null &&
                    this.LAST_TRADE_CCSEQ.Equals(input.LAST_TRADE_CCSEQ))
                ) && 
                (
                    this.LAST_TRADE_ID == input.LAST_TRADE_ID ||
                    (this.LAST_TRADE_ID != null &&
                    this.LAST_TRADE_ID.Equals(input.LAST_TRADE_ID))
                ) && 
                (
                    this.LAST_TRADE_QUANTITY == input.LAST_TRADE_QUANTITY ||
                    this.LAST_TRADE_QUANTITY.Equals(input.LAST_TRADE_QUANTITY)
                ) && 
                (
                    this.LAST_TRADE_QUOTE_QUANTITY == input.LAST_TRADE_QUOTE_QUANTITY ||
                    this.LAST_TRADE_QUOTE_QUANTITY.Equals(input.LAST_TRADE_QUOTE_QUANTITY)
                ) && 
                (
                    this.LAST_TRADE_SIDE == input.LAST_TRADE_SIDE ||
                    (this.LAST_TRADE_SIDE != null &&
                    this.LAST_TRADE_SIDE.Equals(input.LAST_TRADE_SIDE))
                ) && 
                (
                    this.LIFETIME_FIRST_TRADE_TS == input.LIFETIME_FIRST_TRADE_TS ||
                    this.LIFETIME_FIRST_TRADE_TS.Equals(input.LIFETIME_FIRST_TRADE_TS)
                ) && 
                (
                    this.LIFETIME_HIGH == input.LIFETIME_HIGH ||
                    this.LIFETIME_HIGH.Equals(input.LIFETIME_HIGH)
                ) && 
                (
                    this.LIFETIME_HIGH_TS == input.LIFETIME_HIGH_TS ||
                    this.LIFETIME_HIGH_TS.Equals(input.LIFETIME_HIGH_TS)
                ) && 
                (
                    this.LIFETIME_LOW == input.LIFETIME_LOW ||
                    this.LIFETIME_LOW.Equals(input.LIFETIME_LOW)
                ) && 
                (
                    this.LIFETIME_LOW_TS == input.LIFETIME_LOW_TS ||
                    this.LIFETIME_LOW_TS.Equals(input.LIFETIME_LOW_TS)
                ) && 
                (
                    this.LIFETIME_OPEN == input.LIFETIME_OPEN ||
                    this.LIFETIME_OPEN.Equals(input.LIFETIME_OPEN)
                ) && 
                (
                    this.LIFETIME_QUOTE_VOLUME == input.LIFETIME_QUOTE_VOLUME ||
                    this.LIFETIME_QUOTE_VOLUME.Equals(input.LIFETIME_QUOTE_VOLUME)
                ) && 
                (
                    this.LIFETIME_QUOTE_VOLUME_BUY == input.LIFETIME_QUOTE_VOLUME_BUY ||
                    this.LIFETIME_QUOTE_VOLUME_BUY.Equals(input.LIFETIME_QUOTE_VOLUME_BUY)
                ) && 
                (
                    this.LIFETIME_QUOTE_VOLUME_SELL == input.LIFETIME_QUOTE_VOLUME_SELL ||
                    this.LIFETIME_QUOTE_VOLUME_SELL.Equals(input.LIFETIME_QUOTE_VOLUME_SELL)
                ) && 
                (
                    this.LIFETIME_QUOTE_VOLUME_UNKNOWN == input.LIFETIME_QUOTE_VOLUME_UNKNOWN ||
                    this.LIFETIME_QUOTE_VOLUME_UNKNOWN.Equals(input.LIFETIME_QUOTE_VOLUME_UNKNOWN)
                ) && 
                (
                    this.LIFETIME_TOTAL_TRADES == input.LIFETIME_TOTAL_TRADES ||
                    this.LIFETIME_TOTAL_TRADES.Equals(input.LIFETIME_TOTAL_TRADES)
                ) && 
                (
                    this.LIFETIME_TOTAL_TRADES_BUY == input.LIFETIME_TOTAL_TRADES_BUY ||
                    this.LIFETIME_TOTAL_TRADES_BUY.Equals(input.LIFETIME_TOTAL_TRADES_BUY)
                ) && 
                (
                    this.LIFETIME_TOTAL_TRADES_SELL == input.LIFETIME_TOTAL_TRADES_SELL ||
                    this.LIFETIME_TOTAL_TRADES_SELL.Equals(input.LIFETIME_TOTAL_TRADES_SELL)
                ) && 
                (
                    this.LIFETIME_TOTAL_TRADES_UNKNOWN == input.LIFETIME_TOTAL_TRADES_UNKNOWN ||
                    this.LIFETIME_TOTAL_TRADES_UNKNOWN.Equals(input.LIFETIME_TOTAL_TRADES_UNKNOWN)
                ) && 
                (
                    this.LIFETIME_VOLUME == input.LIFETIME_VOLUME ||
                    this.LIFETIME_VOLUME.Equals(input.LIFETIME_VOLUME)
                ) && 
                (
                    this.LIFETIME_VOLUME_BUY == input.LIFETIME_VOLUME_BUY ||
                    this.LIFETIME_VOLUME_BUY.Equals(input.LIFETIME_VOLUME_BUY)
                ) && 
                (
                    this.LIFETIME_VOLUME_SELL == input.LIFETIME_VOLUME_SELL ||
                    this.LIFETIME_VOLUME_SELL.Equals(input.LIFETIME_VOLUME_SELL)
                ) && 
                (
                    this.LIFETIME_VOLUME_UNKNOWN == input.LIFETIME_VOLUME_UNKNOWN ||
                    this.LIFETIME_VOLUME_UNKNOWN.Equals(input.LIFETIME_VOLUME_UNKNOWN)
                ) && 
                (
                    this.MAPPED_INSTRUMENT == input.MAPPED_INSTRUMENT ||
                    (this.MAPPED_INSTRUMENT != null &&
                    this.MAPPED_INSTRUMENT.Equals(input.MAPPED_INSTRUMENT))
                ) && 
                (
                    this.MARKET == input.MARKET ||
                    (this.MARKET != null &&
                    this.MARKET.Equals(input.MARKET))
                ) && 
                (
                    this.MOVING180DAYHIGH == input.MOVING180DAYHIGH ||
                    this.MOVING180DAYHIGH.Equals(input.MOVING180DAYHIGH)
                ) && 
                (
                    this.MOVING180DAYLOW == input.MOVING180DAYLOW ||
                    this.MOVING180DAYLOW.Equals(input.MOVING180DAYLOW)
                ) && 
                (
                    this.MOVING180DAYOPEN == input.MOVING180DAYOPEN ||
                    this.MOVING180DAYOPEN.Equals(input.MOVING180DAYOPEN)
                ) && 
                (
                    this.MOVING180DAYQUOTEVOLUME == input.MOVING180DAYQUOTEVOLUME ||
                    this.MOVING180DAYQUOTEVOLUME.Equals(input.MOVING180DAYQUOTEVOLUME)
                ) && 
                (
                    this.MOVING180DAYQUOTEVOLUMEBUY == input.MOVING180DAYQUOTEVOLUMEBUY ||
                    this.MOVING180DAYQUOTEVOLUMEBUY.Equals(input.MOVING180DAYQUOTEVOLUMEBUY)
                ) && 
                (
                    this.MOVING180DAYQUOTEVOLUMESELL == input.MOVING180DAYQUOTEVOLUMESELL ||
                    this.MOVING180DAYQUOTEVOLUMESELL.Equals(input.MOVING180DAYQUOTEVOLUMESELL)
                ) && 
                (
                    this.MOVING180DAYQUOTEVOLUMEUNKNOWN == input.MOVING180DAYQUOTEVOLUMEUNKNOWN ||
                    this.MOVING180DAYQUOTEVOLUMEUNKNOWN.Equals(input.MOVING180DAYQUOTEVOLUMEUNKNOWN)
                ) && 
                (
                    this.MOVING180DAYTOTALTRADES == input.MOVING180DAYTOTALTRADES ||
                    this.MOVING180DAYTOTALTRADES.Equals(input.MOVING180DAYTOTALTRADES)
                ) && 
                (
                    this.MOVING180DAYTOTALTRADESBUY == input.MOVING180DAYTOTALTRADESBUY ||
                    this.MOVING180DAYTOTALTRADESBUY.Equals(input.MOVING180DAYTOTALTRADESBUY)
                ) && 
                (
                    this.MOVING180DAYTOTALTRADESSELL == input.MOVING180DAYTOTALTRADESSELL ||
                    this.MOVING180DAYTOTALTRADESSELL.Equals(input.MOVING180DAYTOTALTRADESSELL)
                ) && 
                (
                    this.MOVING180DAYTOTALTRADESUNKNOWN == input.MOVING180DAYTOTALTRADESUNKNOWN ||
                    this.MOVING180DAYTOTALTRADESUNKNOWN.Equals(input.MOVING180DAYTOTALTRADESUNKNOWN)
                ) && 
                (
                    this.MOVING180DAYVOLUME == input.MOVING180DAYVOLUME ||
                    this.MOVING180DAYVOLUME.Equals(input.MOVING180DAYVOLUME)
                ) && 
                (
                    this.MOVING180DAYVOLUMEBUY == input.MOVING180DAYVOLUMEBUY ||
                    this.MOVING180DAYVOLUMEBUY.Equals(input.MOVING180DAYVOLUMEBUY)
                ) && 
                (
                    this.MOVING180DAYVOLUMESELL == input.MOVING180DAYVOLUMESELL ||
                    this.MOVING180DAYVOLUMESELL.Equals(input.MOVING180DAYVOLUMESELL)
                ) && 
                (
                    this.MOVING180DAYVOLUMEUNKNOWN == input.MOVING180DAYVOLUMEUNKNOWN ||
                    this.MOVING180DAYVOLUMEUNKNOWN.Equals(input.MOVING180DAYVOLUMEUNKNOWN)
                ) && 
                (
                    this.MOVING24HOURHIGH == input.MOVING24HOURHIGH ||
                    this.MOVING24HOURHIGH.Equals(input.MOVING24HOURHIGH)
                ) && 
                (
                    this.MOVING24HOURLOW == input.MOVING24HOURLOW ||
                    this.MOVING24HOURLOW.Equals(input.MOVING24HOURLOW)
                ) && 
                (
                    this.MOVING24HOUROPEN == input.MOVING24HOUROPEN ||
                    this.MOVING24HOUROPEN.Equals(input.MOVING24HOUROPEN)
                ) && 
                (
                    this.MOVING24HOURQUOTEVOLUME == input.MOVING24HOURQUOTEVOLUME ||
                    this.MOVING24HOURQUOTEVOLUME.Equals(input.MOVING24HOURQUOTEVOLUME)
                ) && 
                (
                    this.MOVING24HOURQUOTEVOLUMEBUY == input.MOVING24HOURQUOTEVOLUMEBUY ||
                    this.MOVING24HOURQUOTEVOLUMEBUY.Equals(input.MOVING24HOURQUOTEVOLUMEBUY)
                ) && 
                (
                    this.MOVING24HOURQUOTEVOLUMESELL == input.MOVING24HOURQUOTEVOLUMESELL ||
                    this.MOVING24HOURQUOTEVOLUMESELL.Equals(input.MOVING24HOURQUOTEVOLUMESELL)
                ) && 
                (
                    this.MOVING24HOURQUOTEVOLUMEUNKNOWN == input.MOVING24HOURQUOTEVOLUMEUNKNOWN ||
                    this.MOVING24HOURQUOTEVOLUMEUNKNOWN.Equals(input.MOVING24HOURQUOTEVOLUMEUNKNOWN)
                ) && 
                (
                    this.MOVING24HOURTOTALTRADES == input.MOVING24HOURTOTALTRADES ||
                    this.MOVING24HOURTOTALTRADES.Equals(input.MOVING24HOURTOTALTRADES)
                ) && 
                (
                    this.MOVING24HOURTOTALTRADESBUY == input.MOVING24HOURTOTALTRADESBUY ||
                    this.MOVING24HOURTOTALTRADESBUY.Equals(input.MOVING24HOURTOTALTRADESBUY)
                ) && 
                (
                    this.MOVING24HOURTOTALTRADESSELL == input.MOVING24HOURTOTALTRADESSELL ||
                    this.MOVING24HOURTOTALTRADESSELL.Equals(input.MOVING24HOURTOTALTRADESSELL)
                ) && 
                (
                    this.MOVING24HOURTOTALTRADESUNKNOWN == input.MOVING24HOURTOTALTRADESUNKNOWN ||
                    this.MOVING24HOURTOTALTRADESUNKNOWN.Equals(input.MOVING24HOURTOTALTRADESUNKNOWN)
                ) && 
                (
                    this.MOVING24HOURVOLUME == input.MOVING24HOURVOLUME ||
                    this.MOVING24HOURVOLUME.Equals(input.MOVING24HOURVOLUME)
                ) && 
                (
                    this.MOVING24HOURVOLUMEBUY == input.MOVING24HOURVOLUMEBUY ||
                    this.MOVING24HOURVOLUMEBUY.Equals(input.MOVING24HOURVOLUMEBUY)
                ) && 
                (
                    this.MOVING24HOURVOLUMESELL == input.MOVING24HOURVOLUMESELL ||
                    this.MOVING24HOURVOLUMESELL.Equals(input.MOVING24HOURVOLUMESELL)
                ) && 
                (
                    this.MOVING24HOURVOLUMEUNKNOWN == input.MOVING24HOURVOLUMEUNKNOWN ||
                    this.MOVING24HOURVOLUMEUNKNOWN.Equals(input.MOVING24HOURVOLUMEUNKNOWN)
                ) && 
                (
                    this.MOVING30DAYHIGH == input.MOVING30DAYHIGH ||
                    this.MOVING30DAYHIGH.Equals(input.MOVING30DAYHIGH)
                ) && 
                (
                    this.MOVING30DAYLOW == input.MOVING30DAYLOW ||
                    this.MOVING30DAYLOW.Equals(input.MOVING30DAYLOW)
                ) && 
                (
                    this.MOVING30DAYOPEN == input.MOVING30DAYOPEN ||
                    this.MOVING30DAYOPEN.Equals(input.MOVING30DAYOPEN)
                ) && 
                (
                    this.MOVING30DAYQUOTEVOLUME == input.MOVING30DAYQUOTEVOLUME ||
                    this.MOVING30DAYQUOTEVOLUME.Equals(input.MOVING30DAYQUOTEVOLUME)
                ) && 
                (
                    this.MOVING30DAYQUOTEVOLUMEBUY == input.MOVING30DAYQUOTEVOLUMEBUY ||
                    this.MOVING30DAYQUOTEVOLUMEBUY.Equals(input.MOVING30DAYQUOTEVOLUMEBUY)
                ) && 
                (
                    this.MOVING30DAYQUOTEVOLUMESELL == input.MOVING30DAYQUOTEVOLUMESELL ||
                    this.MOVING30DAYQUOTEVOLUMESELL.Equals(input.MOVING30DAYQUOTEVOLUMESELL)
                ) && 
                (
                    this.MOVING30DAYQUOTEVOLUMEUNKNOWN == input.MOVING30DAYQUOTEVOLUMEUNKNOWN ||
                    this.MOVING30DAYQUOTEVOLUMEUNKNOWN.Equals(input.MOVING30DAYQUOTEVOLUMEUNKNOWN)
                ) && 
                (
                    this.MOVING30DAYTOTALTRADES == input.MOVING30DAYTOTALTRADES ||
                    this.MOVING30DAYTOTALTRADES.Equals(input.MOVING30DAYTOTALTRADES)
                ) && 
                (
                    this.MOVING30DAYTOTALTRADESBUY == input.MOVING30DAYTOTALTRADESBUY ||
                    this.MOVING30DAYTOTALTRADESBUY.Equals(input.MOVING30DAYTOTALTRADESBUY)
                ) && 
                (
                    this.MOVING30DAYTOTALTRADESSELL == input.MOVING30DAYTOTALTRADESSELL ||
                    this.MOVING30DAYTOTALTRADESSELL.Equals(input.MOVING30DAYTOTALTRADESSELL)
                ) && 
                (
                    this.MOVING30DAYTOTALTRADESUNKNOWN == input.MOVING30DAYTOTALTRADESUNKNOWN ||
                    this.MOVING30DAYTOTALTRADESUNKNOWN.Equals(input.MOVING30DAYTOTALTRADESUNKNOWN)
                ) && 
                (
                    this.MOVING30DAYVOLUME == input.MOVING30DAYVOLUME ||
                    this.MOVING30DAYVOLUME.Equals(input.MOVING30DAYVOLUME)
                ) && 
                (
                    this.MOVING30DAYVOLUMEBUY == input.MOVING30DAYVOLUMEBUY ||
                    this.MOVING30DAYVOLUMEBUY.Equals(input.MOVING30DAYVOLUMEBUY)
                ) && 
                (
                    this.MOVING30DAYVOLUMESELL == input.MOVING30DAYVOLUMESELL ||
                    this.MOVING30DAYVOLUMESELL.Equals(input.MOVING30DAYVOLUMESELL)
                ) && 
                (
                    this.MOVING30DAYVOLUMEUNKNOWN == input.MOVING30DAYVOLUMEUNKNOWN ||
                    this.MOVING30DAYVOLUMEUNKNOWN.Equals(input.MOVING30DAYVOLUMEUNKNOWN)
                ) && 
                (
                    this.MOVING365DAYHIGH == input.MOVING365DAYHIGH ||
                    this.MOVING365DAYHIGH.Equals(input.MOVING365DAYHIGH)
                ) && 
                (
                    this.MOVING365DAYLOW == input.MOVING365DAYLOW ||
                    this.MOVING365DAYLOW.Equals(input.MOVING365DAYLOW)
                ) && 
                (
                    this.MOVING365DAYOPEN == input.MOVING365DAYOPEN ||
                    this.MOVING365DAYOPEN.Equals(input.MOVING365DAYOPEN)
                ) && 
                (
                    this.MOVING365DAYQUOTEVOLUME == input.MOVING365DAYQUOTEVOLUME ||
                    this.MOVING365DAYQUOTEVOLUME.Equals(input.MOVING365DAYQUOTEVOLUME)
                ) && 
                (
                    this.MOVING365DAYQUOTEVOLUMEBUY == input.MOVING365DAYQUOTEVOLUMEBUY ||
                    this.MOVING365DAYQUOTEVOLUMEBUY.Equals(input.MOVING365DAYQUOTEVOLUMEBUY)
                ) && 
                (
                    this.MOVING365DAYQUOTEVOLUMESELL == input.MOVING365DAYQUOTEVOLUMESELL ||
                    this.MOVING365DAYQUOTEVOLUMESELL.Equals(input.MOVING365DAYQUOTEVOLUMESELL)
                ) && 
                (
                    this.MOVING365DAYQUOTEVOLUMEUNKNOWN == input.MOVING365DAYQUOTEVOLUMEUNKNOWN ||
                    this.MOVING365DAYQUOTEVOLUMEUNKNOWN.Equals(input.MOVING365DAYQUOTEVOLUMEUNKNOWN)
                ) && 
                (
                    this.MOVING365DAYTOTALTRADES == input.MOVING365DAYTOTALTRADES ||
                    this.MOVING365DAYTOTALTRADES.Equals(input.MOVING365DAYTOTALTRADES)
                ) && 
                (
                    this.MOVING365DAYTOTALTRADESBUY == input.MOVING365DAYTOTALTRADESBUY ||
                    this.MOVING365DAYTOTALTRADESBUY.Equals(input.MOVING365DAYTOTALTRADESBUY)
                ) && 
                (
                    this.MOVING365DAYTOTALTRADESSELL == input.MOVING365DAYTOTALTRADESSELL ||
                    this.MOVING365DAYTOTALTRADESSELL.Equals(input.MOVING365DAYTOTALTRADESSELL)
                ) && 
                (
                    this.MOVING365DAYTOTALTRADESUNKNOWN == input.MOVING365DAYTOTALTRADESUNKNOWN ||
                    this.MOVING365DAYTOTALTRADESUNKNOWN.Equals(input.MOVING365DAYTOTALTRADESUNKNOWN)
                ) && 
                (
                    this.MOVING365DAYVOLUME == input.MOVING365DAYVOLUME ||
                    this.MOVING365DAYVOLUME.Equals(input.MOVING365DAYVOLUME)
                ) && 
                (
                    this.MOVING365DAYVOLUMEBUY == input.MOVING365DAYVOLUMEBUY ||
                    this.MOVING365DAYVOLUMEBUY.Equals(input.MOVING365DAYVOLUMEBUY)
                ) && 
                (
                    this.MOVING365DAYVOLUMESELL == input.MOVING365DAYVOLUMESELL ||
                    this.MOVING365DAYVOLUMESELL.Equals(input.MOVING365DAYVOLUMESELL)
                ) && 
                (
                    this.MOVING365DAYVOLUMEUNKNOWN == input.MOVING365DAYVOLUMEUNKNOWN ||
                    this.MOVING365DAYVOLUMEUNKNOWN.Equals(input.MOVING365DAYVOLUMEUNKNOWN)
                ) && 
                (
                    this.MOVING7DAYHIGH == input.MOVING7DAYHIGH ||
                    this.MOVING7DAYHIGH.Equals(input.MOVING7DAYHIGH)
                ) && 
                (
                    this.MOVING7DAYLOW == input.MOVING7DAYLOW ||
                    this.MOVING7DAYLOW.Equals(input.MOVING7DAYLOW)
                ) && 
                (
                    this.MOVING7DAYOPEN == input.MOVING7DAYOPEN ||
                    this.MOVING7DAYOPEN.Equals(input.MOVING7DAYOPEN)
                ) && 
                (
                    this.MOVING7DAYQUOTEVOLUME == input.MOVING7DAYQUOTEVOLUME ||
                    this.MOVING7DAYQUOTEVOLUME.Equals(input.MOVING7DAYQUOTEVOLUME)
                ) && 
                (
                    this.MOVING7DAYQUOTEVOLUMEBUY == input.MOVING7DAYQUOTEVOLUMEBUY ||
                    this.MOVING7DAYQUOTEVOLUMEBUY.Equals(input.MOVING7DAYQUOTEVOLUMEBUY)
                ) && 
                (
                    this.MOVING7DAYQUOTEVOLUMESELL == input.MOVING7DAYQUOTEVOLUMESELL ||
                    this.MOVING7DAYQUOTEVOLUMESELL.Equals(input.MOVING7DAYQUOTEVOLUMESELL)
                ) && 
                (
                    this.MOVING7DAYQUOTEVOLUMEUNKNOWN == input.MOVING7DAYQUOTEVOLUMEUNKNOWN ||
                    this.MOVING7DAYQUOTEVOLUMEUNKNOWN.Equals(input.MOVING7DAYQUOTEVOLUMEUNKNOWN)
                ) && 
                (
                    this.MOVING7DAYTOTALTRADES == input.MOVING7DAYTOTALTRADES ||
                    this.MOVING7DAYTOTALTRADES.Equals(input.MOVING7DAYTOTALTRADES)
                ) && 
                (
                    this.MOVING7DAYTOTALTRADESBUY == input.MOVING7DAYTOTALTRADESBUY ||
                    this.MOVING7DAYTOTALTRADESBUY.Equals(input.MOVING7DAYTOTALTRADESBUY)
                ) && 
                (
                    this.MOVING7DAYTOTALTRADESSELL == input.MOVING7DAYTOTALTRADESSELL ||
                    this.MOVING7DAYTOTALTRADESSELL.Equals(input.MOVING7DAYTOTALTRADESSELL)
                ) && 
                (
                    this.MOVING7DAYTOTALTRADESUNKNOWN == input.MOVING7DAYTOTALTRADESUNKNOWN ||
                    this.MOVING7DAYTOTALTRADESUNKNOWN.Equals(input.MOVING7DAYTOTALTRADESUNKNOWN)
                ) && 
                (
                    this.MOVING7DAYVOLUME == input.MOVING7DAYVOLUME ||
                    this.MOVING7DAYVOLUME.Equals(input.MOVING7DAYVOLUME)
                ) && 
                (
                    this.MOVING7DAYVOLUMEBUY == input.MOVING7DAYVOLUMEBUY ||
                    this.MOVING7DAYVOLUMEBUY.Equals(input.MOVING7DAYVOLUMEBUY)
                ) && 
                (
                    this.MOVING7DAYVOLUMESELL == input.MOVING7DAYVOLUMESELL ||
                    this.MOVING7DAYVOLUMESELL.Equals(input.MOVING7DAYVOLUMESELL)
                ) && 
                (
                    this.MOVING7DAYVOLUMEUNKNOWN == input.MOVING7DAYVOLUMEUNKNOWN ||
                    this.MOVING7DAYVOLUMEUNKNOWN.Equals(input.MOVING7DAYVOLUMEUNKNOWN)
                ) && 
                (
                    this.MOVING90DAYHIGH == input.MOVING90DAYHIGH ||
                    this.MOVING90DAYHIGH.Equals(input.MOVING90DAYHIGH)
                ) && 
                (
                    this.MOVING90DAYLOW == input.MOVING90DAYLOW ||
                    this.MOVING90DAYLOW.Equals(input.MOVING90DAYLOW)
                ) && 
                (
                    this.MOVING90DAYOPEN == input.MOVING90DAYOPEN ||
                    this.MOVING90DAYOPEN.Equals(input.MOVING90DAYOPEN)
                ) && 
                (
                    this.MOVING90DAYQUOTEVOLUME == input.MOVING90DAYQUOTEVOLUME ||
                    this.MOVING90DAYQUOTEVOLUME.Equals(input.MOVING90DAYQUOTEVOLUME)
                ) && 
                (
                    this.MOVING90DAYQUOTEVOLUMEBUY == input.MOVING90DAYQUOTEVOLUMEBUY ||
                    this.MOVING90DAYQUOTEVOLUMEBUY.Equals(input.MOVING90DAYQUOTEVOLUMEBUY)
                ) && 
                (
                    this.MOVING90DAYQUOTEVOLUMESELL == input.MOVING90DAYQUOTEVOLUMESELL ||
                    this.MOVING90DAYQUOTEVOLUMESELL.Equals(input.MOVING90DAYQUOTEVOLUMESELL)
                ) && 
                (
                    this.MOVING90DAYQUOTEVOLUMEUNKNOWN == input.MOVING90DAYQUOTEVOLUMEUNKNOWN ||
                    this.MOVING90DAYQUOTEVOLUMEUNKNOWN.Equals(input.MOVING90DAYQUOTEVOLUMEUNKNOWN)
                ) && 
                (
                    this.MOVING90DAYTOTALTRADES == input.MOVING90DAYTOTALTRADES ||
                    this.MOVING90DAYTOTALTRADES.Equals(input.MOVING90DAYTOTALTRADES)
                ) && 
                (
                    this.MOVING90DAYTOTALTRADESBUY == input.MOVING90DAYTOTALTRADESBUY ||
                    this.MOVING90DAYTOTALTRADESBUY.Equals(input.MOVING90DAYTOTALTRADESBUY)
                ) && 
                (
                    this.MOVING90DAYTOTALTRADESSELL == input.MOVING90DAYTOTALTRADESSELL ||
                    this.MOVING90DAYTOTALTRADESSELL.Equals(input.MOVING90DAYTOTALTRADESSELL)
                ) && 
                (
                    this.MOVING90DAYTOTALTRADESUNKNOWN == input.MOVING90DAYTOTALTRADESUNKNOWN ||
                    this.MOVING90DAYTOTALTRADESUNKNOWN.Equals(input.MOVING90DAYTOTALTRADESUNKNOWN)
                ) && 
                (
                    this.MOVING90DAYVOLUME == input.MOVING90DAYVOLUME ||
                    this.MOVING90DAYVOLUME.Equals(input.MOVING90DAYVOLUME)
                ) && 
                (
                    this.MOVING90DAYVOLUMEBUY == input.MOVING90DAYVOLUMEBUY ||
                    this.MOVING90DAYVOLUMEBUY.Equals(input.MOVING90DAYVOLUMEBUY)
                ) && 
                (
                    this.MOVING90DAYVOLUMESELL == input.MOVING90DAYVOLUMESELL ||
                    this.MOVING90DAYVOLUMESELL.Equals(input.MOVING90DAYVOLUMESELL)
                ) && 
                (
                    this.MOVING90DAYVOLUMEUNKNOWN == input.MOVING90DAYVOLUMEUNKNOWN ||
                    this.MOVING90DAYVOLUMEUNKNOWN.Equals(input.MOVING90DAYVOLUMEUNKNOWN)
                ) && 
                (
                    this.PRICE == input.PRICE ||
                    this.PRICE.Equals(input.PRICE)
                ) && 
                (
                    this.PRICE_FLAG == input.PRICE_FLAG ||
                    (this.PRICE_FLAG != null &&
                    this.PRICE_FLAG.Equals(input.PRICE_FLAG))
                ) && 
                (
                    this.PRICE_LAST_UPDATE_TS == input.PRICE_LAST_UPDATE_TS ||
                    this.PRICE_LAST_UPDATE_TS.Equals(input.PRICE_LAST_UPDATE_TS)
                ) && 
                (
                    this.QUOTE == input.QUOTE ||
                    (this.QUOTE != null &&
                    this.QUOTE.Equals(input.QUOTE))
                ) && 
                (
                    this.TOP_ASK_LAST_UPDATE_TS == input.TOP_ASK_LAST_UPDATE_TS ||
                    this.TOP_ASK_LAST_UPDATE_TS.Equals(input.TOP_ASK_LAST_UPDATE_TS)
                ) && 
                (
                    this.TOP_ASK_PRICE == input.TOP_ASK_PRICE ||
                    this.TOP_ASK_PRICE.Equals(input.TOP_ASK_PRICE)
                ) && 
                (
                    this.TOP_ASK_QUANTITY == input.TOP_ASK_QUANTITY ||
                    this.TOP_ASK_QUANTITY.Equals(input.TOP_ASK_QUANTITY)
                ) && 
                (
                    this.TOP_BID_LAST_UPDATE_TS == input.TOP_BID_LAST_UPDATE_TS ||
                    this.TOP_BID_LAST_UPDATE_TS.Equals(input.TOP_BID_LAST_UPDATE_TS)
                ) && 
                (
                    this.TOP_BID_PRICE == input.TOP_BID_PRICE ||
                    this.TOP_BID_PRICE.Equals(input.TOP_BID_PRICE)
                ) && 
                (
                    this.TOP_BID_QUANTITY == input.TOP_BID_QUANTITY ||
                    this.TOP_BID_QUANTITY.Equals(input.TOP_BID_QUANTITY)
                ) && 
                (
                    this.TYPE == input.TYPE ||
                    (this.TYPE != null &&
                    this.TYPE.Equals(input.TYPE))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BASE != null)
                {
                    hashCode = (hashCode * 59) + this.BASE.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CCSEQ.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_DAY_HIGH.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_DAY_LOW.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_DAY_OPEN.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_DAY_QUOTE_VOLUME.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_DAY_QUOTE_VOLUME_BUY.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_DAY_QUOTE_VOLUME_SELL.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_DAY_QUOTE_VOLUME_UNKNOWN.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_DAY_TOTAL_TRADES.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_DAY_TOTAL_TRADES_BUY.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_DAY_TOTAL_TRADES_SELL.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_DAY_TOTAL_TRADES_UNKNOWN.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_DAY_VOLUME.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_DAY_VOLUME_BUY.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_DAY_VOLUME_SELL.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_DAY_VOLUME_UNKNOWN.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_HOUR_HIGH.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_HOUR_LOW.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_HOUR_OPEN.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_HOUR_QUOTE_VOLUME.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_HOUR_QUOTE_VOLUME_BUY.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_HOUR_QUOTE_VOLUME_SELL.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_HOUR_QUOTE_VOLUME_UNKNOWN.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_HOUR_TOTAL_TRADES.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_HOUR_TOTAL_TRADES_BUY.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_HOUR_TOTAL_TRADES_SELL.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_HOUR_TOTAL_TRADES_UNKNOWN.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_HOUR_VOLUME.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_HOUR_VOLUME_BUY.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_HOUR_VOLUME_SELL.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_HOUR_VOLUME_UNKNOWN.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_MONTH_HIGH.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_MONTH_LOW.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_MONTH_OPEN.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_MONTH_QUOTE_VOLUME.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_MONTH_QUOTE_VOLUME_BUY.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_MONTH_QUOTE_VOLUME_SELL.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_MONTH_QUOTE_VOLUME_UNKNOWN.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_MONTH_TOTAL_TRADES.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_MONTH_TOTAL_TRADES_BUY.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_MONTH_TOTAL_TRADES_SELL.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_MONTH_TOTAL_TRADES_UNKNOWN.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_MONTH_VOLUME.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_MONTH_VOLUME_BUY.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_MONTH_VOLUME_SELL.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_MONTH_VOLUME_UNKNOWN.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_WEEK_HIGH.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_WEEK_LOW.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_WEEK_OPEN.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_WEEK_QUOTE_VOLUME.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_WEEK_QUOTE_VOLUME_BUY.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_WEEK_QUOTE_VOLUME_SELL.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_WEEK_QUOTE_VOLUME_UNKNOWN.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_WEEK_TOTAL_TRADES.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_WEEK_TOTAL_TRADES_BUY.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_WEEK_TOTAL_TRADES_SELL.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_WEEK_TOTAL_TRADES_UNKNOWN.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_WEEK_VOLUME.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_WEEK_VOLUME_BUY.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_WEEK_VOLUME_SELL.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_WEEK_VOLUME_UNKNOWN.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_YEAR_HIGH.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_YEAR_LOW.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_YEAR_OPEN.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_YEAR_QUOTE_VOLUME.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_YEAR_QUOTE_VOLUME_BUY.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_YEAR_QUOTE_VOLUME_SELL.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_YEAR_QUOTE_VOLUME_UNKNOWN.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_YEAR_TOTAL_TRADES.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_YEAR_TOTAL_TRADES_BUY.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_YEAR_TOTAL_TRADES_SELL.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_YEAR_TOTAL_TRADES_UNKNOWN.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_YEAR_VOLUME.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_YEAR_VOLUME_BUY.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_YEAR_VOLUME_SELL.GetHashCode();
                hashCode = (hashCode * 59) + this.CURRENT_YEAR_VOLUME_UNKNOWN.GetHashCode();
                if (this.INSTRUMENT != null)
                {
                    hashCode = (hashCode * 59) + this.INSTRUMENT.GetHashCode();
                }
                if (this.LAST_PROCESSED_TRADE_CCSEQ != null)
                {
                    hashCode = (hashCode * 59) + this.LAST_PROCESSED_TRADE_CCSEQ.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LAST_PROCESSED_TRADE_PRICE.GetHashCode();
                hashCode = (hashCode * 59) + this.LAST_PROCESSED_TRADE_QUANTITY.GetHashCode();
                hashCode = (hashCode * 59) + this.LAST_PROCESSED_TRADE_QUOTE_QUANTITY.GetHashCode();
                if (this.LAST_PROCESSED_TRADE_SIDE != null)
                {
                    hashCode = (hashCode * 59) + this.LAST_PROCESSED_TRADE_SIDE.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LAST_PROCESSED_TRADE_TS.GetHashCode();
                if (this.LAST_TRADE_CCSEQ != null)
                {
                    hashCode = (hashCode * 59) + this.LAST_TRADE_CCSEQ.GetHashCode();
                }
                if (this.LAST_TRADE_ID != null)
                {
                    hashCode = (hashCode * 59) + this.LAST_TRADE_ID.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LAST_TRADE_QUANTITY.GetHashCode();
                hashCode = (hashCode * 59) + this.LAST_TRADE_QUOTE_QUANTITY.GetHashCode();
                if (this.LAST_TRADE_SIDE != null)
                {
                    hashCode = (hashCode * 59) + this.LAST_TRADE_SIDE.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LIFETIME_FIRST_TRADE_TS.GetHashCode();
                hashCode = (hashCode * 59) + this.LIFETIME_HIGH.GetHashCode();
                hashCode = (hashCode * 59) + this.LIFETIME_HIGH_TS.GetHashCode();
                hashCode = (hashCode * 59) + this.LIFETIME_LOW.GetHashCode();
                hashCode = (hashCode * 59) + this.LIFETIME_LOW_TS.GetHashCode();
                hashCode = (hashCode * 59) + this.LIFETIME_OPEN.GetHashCode();
                hashCode = (hashCode * 59) + this.LIFETIME_QUOTE_VOLUME.GetHashCode();
                hashCode = (hashCode * 59) + this.LIFETIME_QUOTE_VOLUME_BUY.GetHashCode();
                hashCode = (hashCode * 59) + this.LIFETIME_QUOTE_VOLUME_SELL.GetHashCode();
                hashCode = (hashCode * 59) + this.LIFETIME_QUOTE_VOLUME_UNKNOWN.GetHashCode();
                hashCode = (hashCode * 59) + this.LIFETIME_TOTAL_TRADES.GetHashCode();
                hashCode = (hashCode * 59) + this.LIFETIME_TOTAL_TRADES_BUY.GetHashCode();
                hashCode = (hashCode * 59) + this.LIFETIME_TOTAL_TRADES_SELL.GetHashCode();
                hashCode = (hashCode * 59) + this.LIFETIME_TOTAL_TRADES_UNKNOWN.GetHashCode();
                hashCode = (hashCode * 59) + this.LIFETIME_VOLUME.GetHashCode();
                hashCode = (hashCode * 59) + this.LIFETIME_VOLUME_BUY.GetHashCode();
                hashCode = (hashCode * 59) + this.LIFETIME_VOLUME_SELL.GetHashCode();
                hashCode = (hashCode * 59) + this.LIFETIME_VOLUME_UNKNOWN.GetHashCode();
                if (this.MAPPED_INSTRUMENT != null)
                {
                    hashCode = (hashCode * 59) + this.MAPPED_INSTRUMENT.GetHashCode();
                }
                if (this.MARKET != null)
                {
                    hashCode = (hashCode * 59) + this.MARKET.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MOVING180DAYHIGH.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING180DAYLOW.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING180DAYOPEN.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING180DAYQUOTEVOLUME.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING180DAYQUOTEVOLUMEBUY.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING180DAYQUOTEVOLUMESELL.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING180DAYQUOTEVOLUMEUNKNOWN.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING180DAYTOTALTRADES.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING180DAYTOTALTRADESBUY.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING180DAYTOTALTRADESSELL.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING180DAYTOTALTRADESUNKNOWN.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING180DAYVOLUME.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING180DAYVOLUMEBUY.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING180DAYVOLUMESELL.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING180DAYVOLUMEUNKNOWN.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING24HOURHIGH.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING24HOURLOW.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING24HOUROPEN.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING24HOURQUOTEVOLUME.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING24HOURQUOTEVOLUMEBUY.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING24HOURQUOTEVOLUMESELL.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING24HOURQUOTEVOLUMEUNKNOWN.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING24HOURTOTALTRADES.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING24HOURTOTALTRADESBUY.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING24HOURTOTALTRADESSELL.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING24HOURTOTALTRADESUNKNOWN.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING24HOURVOLUME.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING24HOURVOLUMEBUY.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING24HOURVOLUMESELL.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING24HOURVOLUMEUNKNOWN.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING30DAYHIGH.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING30DAYLOW.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING30DAYOPEN.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING30DAYQUOTEVOLUME.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING30DAYQUOTEVOLUMEBUY.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING30DAYQUOTEVOLUMESELL.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING30DAYQUOTEVOLUMEUNKNOWN.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING30DAYTOTALTRADES.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING30DAYTOTALTRADESBUY.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING30DAYTOTALTRADESSELL.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING30DAYTOTALTRADESUNKNOWN.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING30DAYVOLUME.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING30DAYVOLUMEBUY.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING30DAYVOLUMESELL.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING30DAYVOLUMEUNKNOWN.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING365DAYHIGH.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING365DAYLOW.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING365DAYOPEN.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING365DAYQUOTEVOLUME.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING365DAYQUOTEVOLUMEBUY.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING365DAYQUOTEVOLUMESELL.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING365DAYQUOTEVOLUMEUNKNOWN.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING365DAYTOTALTRADES.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING365DAYTOTALTRADESBUY.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING365DAYTOTALTRADESSELL.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING365DAYTOTALTRADESUNKNOWN.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING365DAYVOLUME.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING365DAYVOLUMEBUY.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING365DAYVOLUMESELL.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING365DAYVOLUMEUNKNOWN.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING7DAYHIGH.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING7DAYLOW.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING7DAYOPEN.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING7DAYQUOTEVOLUME.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING7DAYQUOTEVOLUMEBUY.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING7DAYQUOTEVOLUMESELL.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING7DAYQUOTEVOLUMEUNKNOWN.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING7DAYTOTALTRADES.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING7DAYTOTALTRADESBUY.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING7DAYTOTALTRADESSELL.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING7DAYTOTALTRADESUNKNOWN.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING7DAYVOLUME.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING7DAYVOLUMEBUY.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING7DAYVOLUMESELL.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING7DAYVOLUMEUNKNOWN.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING90DAYHIGH.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING90DAYLOW.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING90DAYOPEN.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING90DAYQUOTEVOLUME.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING90DAYQUOTEVOLUMEBUY.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING90DAYQUOTEVOLUMESELL.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING90DAYQUOTEVOLUMEUNKNOWN.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING90DAYTOTALTRADES.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING90DAYTOTALTRADESBUY.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING90DAYTOTALTRADESSELL.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING90DAYTOTALTRADESUNKNOWN.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING90DAYVOLUME.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING90DAYVOLUMEBUY.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING90DAYVOLUMESELL.GetHashCode();
                hashCode = (hashCode * 59) + this.MOVING90DAYVOLUMEUNKNOWN.GetHashCode();
                hashCode = (hashCode * 59) + this.PRICE.GetHashCode();
                if (this.PRICE_FLAG != null)
                {
                    hashCode = (hashCode * 59) + this.PRICE_FLAG.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PRICE_LAST_UPDATE_TS.GetHashCode();
                if (this.QUOTE != null)
                {
                    hashCode = (hashCode * 59) + this.QUOTE.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TOP_ASK_LAST_UPDATE_TS.GetHashCode();
                hashCode = (hashCode * 59) + this.TOP_ASK_PRICE.GetHashCode();
                hashCode = (hashCode * 59) + this.TOP_ASK_QUANTITY.GetHashCode();
                hashCode = (hashCode * 59) + this.TOP_BID_LAST_UPDATE_TS.GetHashCode();
                hashCode = (hashCode * 59) + this.TOP_BID_PRICE.GetHashCode();
                hashCode = (hashCode * 59) + this.TOP_BID_QUANTITY.GetHashCode();
                if (this.TYPE != null)
                {
                    hashCode = (hashCode * 59) + this.TYPE.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
