/**
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 * CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: data@cryptocompare.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;
import java.util.List;
import java.util.Date;
import org.openapitools.client.model.*;

public class JsonUtil {
  public static GsonBuilder gsonBuilder;

  static {
    gsonBuilder = new GsonBuilder();
    gsonBuilder.serializeNulls();
    gsonBuilder.setDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
    gsonBuilder.registerTypeAdapter(Date.class, new JsonDeserializer<Date>() {
      public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
        return new Date(json.getAsJsonPrimitive().getAsLong());
      }
    });
  }

  public static Gson getGson() {
    return gsonBuilder.create();
  }

  public static String serialize(Object obj){
    return getGson().toJson(obj);
  }

  public static <T> T deserializeToList(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getListTypeForDeserialization(cls));
  }

  public static <T> T deserializeToObject(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getTypeForDeserialization(cls));
  }

  public static Type getListTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("Error".equalsIgnoreCase(className)) {
      return new TypeToken<List<Error>>(){}.getType();
    }
    
    if ("ErrorErr".equalsIgnoreCase(className)) {
      return new TypeToken<List<ErrorErr>>(){}.getType();
    }
    
    if ("ErrorErrOtherInfo".equalsIgnoreCase(className)) {
      return new TypeToken<List<ErrorErrOtherInfo>>(){}.getType();
    }
    
    if ("GENERICRESPONSE".equalsIgnoreCase(className)) {
      return new TypeToken<List<GENERICRESPONSE>>(){}.getType();
    }
    
    if ("GENERICRESPONSEData".equalsIgnoreCase(className)) {
      return new TypeToken<List<GENERICRESPONSEData>>(){}.getType();
    }
    
    if ("SPOTINSTRUMENTHISTODATA".equalsIgnoreCase(className)) {
      return new TypeToken<List<SPOTINSTRUMENTHISTODATA>>(){}.getType();
    }
    
    if ("SPOTINSTRUMENTHISTODATARESPONSE".equalsIgnoreCase(className)) {
      return new TypeToken<List<SPOTINSTRUMENTHISTODATARESPONSE>>(){}.getType();
    }
    
    if ("SPOTINSTRUMENTMARKETDATA".equalsIgnoreCase(className)) {
      return new TypeToken<List<SPOTINSTRUMENTMARKETDATA>>(){}.getType();
    }
    
    if ("SPOTINSTRUMENTMARKETDATARESPONSE".equalsIgnoreCase(className)) {
      return new TypeToken<List<SPOTINSTRUMENTMARKETDATARESPONSE>>(){}.getType();
    }
    
    if ("SPOTINSTRUMENTMARKETDATARESPONSEErr".equalsIgnoreCase(className)) {
      return new TypeToken<List<SPOTINSTRUMENTMARKETDATARESPONSEErr>>(){}.getType();
    }
    
    if ("SPOTINSTRUMENTMARKETDATARESPONSEErrOtherInfo".equalsIgnoreCase(className)) {
      return new TypeToken<List<SPOTINSTRUMENTMARKETDATARESPONSEErrOtherInfo>>(){}.getType();
    }
    
    if ("SPOTINSTRUMENTMETADATA".equalsIgnoreCase(className)) {
      return new TypeToken<List<SPOTINSTRUMENTMETADATA>>(){}.getType();
    }
    
    if ("SPOTINSTRUMENTMETADATARESPONSE".equalsIgnoreCase(className)) {
      return new TypeToken<List<SPOTINSTRUMENTMETADATARESPONSE>>(){}.getType();
    }
    
    if ("SPOTINSTRUMENTTRADE".equalsIgnoreCase(className)) {
      return new TypeToken<List<SPOTINSTRUMENTTRADE>>(){}.getType();
    }
    
    if ("SPOTINSTRUMENTTRADERESPONSE".equalsIgnoreCase(className)) {
      return new TypeToken<List<SPOTINSTRUMENTTRADERESPONSE>>(){}.getType();
    }
    
    return new TypeToken<List<Object>>(){}.getType();
  }

  public static Type getTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("Error".equalsIgnoreCase(className)) {
      return new TypeToken<Error>(){}.getType();
    }
    
    if ("ErrorErr".equalsIgnoreCase(className)) {
      return new TypeToken<ErrorErr>(){}.getType();
    }
    
    if ("ErrorErrOtherInfo".equalsIgnoreCase(className)) {
      return new TypeToken<ErrorErrOtherInfo>(){}.getType();
    }
    
    if ("GENERICRESPONSE".equalsIgnoreCase(className)) {
      return new TypeToken<GENERICRESPONSE>(){}.getType();
    }
    
    if ("GENERICRESPONSEData".equalsIgnoreCase(className)) {
      return new TypeToken<GENERICRESPONSEData>(){}.getType();
    }
    
    if ("SPOTINSTRUMENTHISTODATA".equalsIgnoreCase(className)) {
      return new TypeToken<SPOTINSTRUMENTHISTODATA>(){}.getType();
    }
    
    if ("SPOTINSTRUMENTHISTODATARESPONSE".equalsIgnoreCase(className)) {
      return new TypeToken<SPOTINSTRUMENTHISTODATARESPONSE>(){}.getType();
    }
    
    if ("SPOTINSTRUMENTMARKETDATA".equalsIgnoreCase(className)) {
      return new TypeToken<SPOTINSTRUMENTMARKETDATA>(){}.getType();
    }
    
    if ("SPOTINSTRUMENTMARKETDATARESPONSE".equalsIgnoreCase(className)) {
      return new TypeToken<SPOTINSTRUMENTMARKETDATARESPONSE>(){}.getType();
    }
    
    if ("SPOTINSTRUMENTMARKETDATARESPONSEErr".equalsIgnoreCase(className)) {
      return new TypeToken<SPOTINSTRUMENTMARKETDATARESPONSEErr>(){}.getType();
    }
    
    if ("SPOTINSTRUMENTMARKETDATARESPONSEErrOtherInfo".equalsIgnoreCase(className)) {
      return new TypeToken<SPOTINSTRUMENTMARKETDATARESPONSEErrOtherInfo>(){}.getType();
    }
    
    if ("SPOTINSTRUMENTMETADATA".equalsIgnoreCase(className)) {
      return new TypeToken<SPOTINSTRUMENTMETADATA>(){}.getType();
    }
    
    if ("SPOTINSTRUMENTMETADATARESPONSE".equalsIgnoreCase(className)) {
      return new TypeToken<SPOTINSTRUMENTMETADATARESPONSE>(){}.getType();
    }
    
    if ("SPOTINSTRUMENTTRADE".equalsIgnoreCase(className)) {
      return new TypeToken<SPOTINSTRUMENTTRADE>(){}.getType();
    }
    
    if ("SPOTINSTRUMENTTRADERESPONSE".equalsIgnoreCase(className)) {
      return new TypeToken<SPOTINSTRUMENTTRADERESPONSE>(){}.getType();
    }
    
    return new TypeToken<Object>(){}.getType();
  }

};
