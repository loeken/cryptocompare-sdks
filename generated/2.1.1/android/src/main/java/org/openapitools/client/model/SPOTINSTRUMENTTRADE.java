/**
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 * CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: data@cryptocompare.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class SPOTINSTRUMENTTRADE {
  
  @SerializedName("BASE")
  private String BASE = null;
  @SerializedName("CCSEQ")
  private Integer CCSEQ = null;
  @SerializedName("ID")
  private String ID = null;
  @SerializedName("INSTRUMENT")
  private String INSTRUMENT = null;
  @SerializedName("MAPPED_INSTRUMENT")
  private String MAPPED_INSTRUMENT = null;
  @SerializedName("MARKET")
  private String MARKET = null;
  @SerializedName("PRICE")
  private Integer PRICE = null;
  @SerializedName("QUANTITY")
  private Integer QUANTITY = null;
  @SerializedName("QUOTE")
  private String QUOTE = null;
  @SerializedName("QUOTE_QUANTITY")
  private Integer QUOTE_QUANTITY = null;
  @SerializedName("RECEIVED_TIMESTAMP")
  private Integer RECEIVED_TIMESTAMP = null;
  @SerializedName("RECEIVED_TIMESTAMP_NS")
  private Integer RECEIVED_TIMESTAMP_NS = null;
  @SerializedName("SIDE")
  private String SIDE = null;
  @SerializedName("SOURCE")
  private String SOURCE = null;
  @SerializedName("TIMESTAMP")
  private Integer TIMESTAMP = null;
  @SerializedName("TIMESTAMP_NS")
  private Integer TIMESTAMP_NS = null;
  @SerializedName("TYPE")
  private String TYPE = null;

  /**
   * The mapped from asset (base / symbol/ coin). Only available on instruments that have been mapped (e.g. BTC).
   **/
  @ApiModelProperty(value = "The mapped from asset (base / symbol/ coin). Only available on instruments that have been mapped (e.g. BTC).")
  public String getBASE() {
    return BASE;
  }
  public void setBASE(String BASE) {
    this.BASE = BASE;
  }

  /**
   * Our internal sequence number for this trade, this is unique per market / exchange and trading pair. Should always be increasing by 1 for each new trade we discover, not in chronological order.
   **/
  @ApiModelProperty(value = "Our internal sequence number for this trade, this is unique per market / exchange and trading pair. Should always be increasing by 1 for each new trade we discover, not in chronological order.")
  public Integer getCCSEQ() {
    return CCSEQ;
  }
  public void setCCSEQ(Integer CCSEQ) {
    this.CCSEQ = CCSEQ;
  }

  /**
   * The trade ID as reported by the market / exchange. If the exchange does not provide a trade ID, this will be the timestamp of the trade + a number from 0 - 999. This preserves uniqueness, assuming there would never be more than 999 trades in any given second.
   **/
  @ApiModelProperty(value = "The trade ID as reported by the market / exchange. If the exchange does not provide a trade ID, this will be the timestamp of the trade + a number from 0 - 999. This preserves uniqueness, assuming there would never be more than 999 trades in any given second.")
  public String getID() {
    return ID;
  }
  public void setID(String ID) {
    this.ID = ID;
  }

  /**
   * The unmapped instrument ID as given by the exchange (e.g. BTCUSD, BTC_USD, XBT-ZUSD, BTC-USD).
   **/
  @ApiModelProperty(value = "The unmapped instrument ID as given by the exchange (e.g. BTCUSD, BTC_USD, XBT-ZUSD, BTC-USD).")
  public String getINSTRUMENT() {
    return INSTRUMENT;
  }
  public void setINSTRUMENT(String INSTRUMENT) {
    this.INSTRUMENT = INSTRUMENT;
  }

  /**
   * The mapped instrument ID, as derived from our mapping rules. This takes the form: \"BASE-QUOTE\". Only available on instruments that have been mapped (e.g. BTC-USD).
   **/
  @ApiModelProperty(value = "The mapped instrument ID, as derived from our mapping rules. This takes the form: \"BASE-QUOTE\". Only available on instruments that have been mapped (e.g. BTC-USD).")
  public String getMAPPEDINSTRUMENT() {
    return MAPPED_INSTRUMENT;
  }
  public void setMAPPEDINSTRUMENT(String MAPPED_INSTRUMENT) {
    this.MAPPED_INSTRUMENT = MAPPED_INSTRUMENT;
  }

  /**
   * The market / exchange under consideration (e.g. Coinbase, Kraken, etc.).
   **/
  @ApiModelProperty(value = "The market / exchange under consideration (e.g. Coinbase, Kraken, etc.).")
  public String getMARKET() {
    return MARKET;
  }
  public void setMARKET(String MARKET) {
    this.MARKET = MARKET;
  }

  /**
   * The price in the to instrument (quote / counter symbol / coin) of the trade. For a BTC-USD trade, this is how much was paid for one BTC in USD. For futures, this will be the price of the contract.
   **/
  @ApiModelProperty(value = "The price in the to instrument (quote / counter symbol / coin) of the trade. For a BTC-USD trade, this is how much was paid for one BTC in USD. For futures, this will be the price of the contract.")
  public Integer getPRICE() {
    return PRICE;
  }
  public void setPRICE(Integer PRICE) {
    this.PRICE = PRICE;
  }

  /**
   * The volume of the trade, given in the from instrument (base symbol / coin/ contract). For a spot BTC-USD trade, this is how much BTC was traded at the trade price. For a futures BTCUSDPERP, this is the BTC equivalent for the contracts traded.
   **/
  @ApiModelProperty(value = "The volume of the trade, given in the from instrument (base symbol / coin/ contract). For a spot BTC-USD trade, this is how much BTC was traded at the trade price. For a futures BTCUSDPERP, this is the BTC equivalent for the contracts traded.")
  public Integer getQUANTITY() {
    return QUANTITY;
  }
  public void setQUANTITY(Integer QUANTITY) {
    this.QUANTITY = QUANTITY;
  }

  /**
   * The mapped to asset (quote / counter symbol / coin). Only available on instruments that have been mapped (e.g. USD).
   **/
  @ApiModelProperty(value = "The mapped to asset (quote / counter symbol / coin). Only available on instruments that have been mapped (e.g. USD).")
  public String getQUOTE() {
    return QUOTE;
  }
  public void setQUOTE(String QUOTE) {
    this.QUOTE = QUOTE;
  }

  /**
   * The volume of the trade, given in the to instrument (quote / counter symbol / coin). This is equivalent to QUANTITY * PRICE. E.g. for a BTC-USD trade, this is how much USD was paid in total for the volume of BTC traded. For futures this is the quote currency equivalent for the contracts traded.
   **/
  @ApiModelProperty(value = "The volume of the trade, given in the to instrument (quote / counter symbol / coin). This is equivalent to QUANTITY * PRICE. E.g. for a BTC-USD trade, this is how much USD was paid in total for the volume of BTC traded. For futures this is the quote currency equivalent for the contracts traded.")
  public Integer getQUOTEQUANTITY() {
    return QUOTE_QUANTITY;
  }
  public void setQUOTEQUANTITY(Integer QUOTE_QUANTITY) {
    this.QUOTE_QUANTITY = QUOTE_QUANTITY;
  }

  /**
   * The timestamp in seconds that the trade was received. This varies from the trade taking place on the market by a few millisconds to a few seconds depending on the market / exchange API options / rate limits.
   **/
  @ApiModelProperty(value = "The timestamp in seconds that the trade was received. This varies from the trade taking place on the market by a few millisconds to a few seconds depending on the market / exchange API options / rate limits.")
  public Integer getRECEIVEDTIMESTAMP() {
    return RECEIVED_TIMESTAMP;
  }
  public void setRECEIVEDTIMESTAMP(Integer RECEIVED_TIMESTAMP) {
    this.RECEIVED_TIMESTAMP = RECEIVED_TIMESTAMP;
  }

  /**
   * The nanosecond part of the received timestamp.
   **/
  @ApiModelProperty(value = "The nanosecond part of the received timestamp.")
  public Integer getRECEIVEDTIMESTAMPNS() {
    return RECEIVED_TIMESTAMP_NS;
  }
  public void setRECEIVEDTIMESTAMPNS(Integer RECEIVED_TIMESTAMP_NS) {
    this.RECEIVED_TIMESTAMP_NS = RECEIVED_TIMESTAMP_NS;
  }

  /**
   * The side of the trade: SELL, BUY or UNKNOWN. If the exchange / api does not provide a side, \"UNKNOWN\" will be returned.
   **/
  @ApiModelProperty(value = "The side of the trade: SELL, BUY or UNKNOWN. If the exchange / api does not provide a side, \"UNKNOWN\" will be returned.")
  public String getSIDE() {
    return SIDE;
  }
  public void setSIDE(String SIDE) {
    this.SIDE = SIDE;
  }

  /**
   * The source of the trade update: POLLING, STREAMING, GO, BLOB etc.
   **/
  @ApiModelProperty(value = "The source of the trade update: POLLING, STREAMING, GO, BLOB etc.")
  public String getSOURCE() {
    return SOURCE;
  }
  public void setSOURCE(String SOURCE) {
    this.SOURCE = SOURCE;
  }

  /**
   * The timestamp in seconds as reported by the market / exchange or the received timestamp if the market / exchange does not provide one.
   **/
  @ApiModelProperty(value = "The timestamp in seconds as reported by the market / exchange or the received timestamp if the market / exchange does not provide one.")
  public Integer getTIMESTAMP() {
    return TIMESTAMP;
  }
  public void setTIMESTAMP(Integer TIMESTAMP) {
    this.TIMESTAMP = TIMESTAMP;
  }

  /**
   * The nanosecond part of the reported timestamp.
   **/
  @ApiModelProperty(value = "The nanosecond part of the reported timestamp.")
  public Integer getTIMESTAMPNS() {
    return TIMESTAMP_NS;
  }
  public void setTIMESTAMPNS(Integer TIMESTAMP_NS) {
    this.TIMESTAMP_NS = TIMESTAMP_NS;
  }

  /**
   * The type of the message.
   **/
  @ApiModelProperty(value = "The type of the message.")
  public String getTYPE() {
    return TYPE;
  }
  public void setTYPE(String TYPE) {
    this.TYPE = TYPE;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SPOTINSTRUMENTTRADE SPOT_INSTRUMENT_TRADE = (SPOTINSTRUMENTTRADE) o;
    return (this.BASE == null ? SPOT_INSTRUMENT_TRADE.BASE == null : this.BASE.equals(SPOT_INSTRUMENT_TRADE.BASE)) &&
        (this.CCSEQ == null ? SPOT_INSTRUMENT_TRADE.CCSEQ == null : this.CCSEQ.equals(SPOT_INSTRUMENT_TRADE.CCSEQ)) &&
        (this.ID == null ? SPOT_INSTRUMENT_TRADE.ID == null : this.ID.equals(SPOT_INSTRUMENT_TRADE.ID)) &&
        (this.INSTRUMENT == null ? SPOT_INSTRUMENT_TRADE.INSTRUMENT == null : this.INSTRUMENT.equals(SPOT_INSTRUMENT_TRADE.INSTRUMENT)) &&
        (this.MAPPED_INSTRUMENT == null ? SPOT_INSTRUMENT_TRADE.MAPPED_INSTRUMENT == null : this.MAPPED_INSTRUMENT.equals(SPOT_INSTRUMENT_TRADE.MAPPED_INSTRUMENT)) &&
        (this.MARKET == null ? SPOT_INSTRUMENT_TRADE.MARKET == null : this.MARKET.equals(SPOT_INSTRUMENT_TRADE.MARKET)) &&
        (this.PRICE == null ? SPOT_INSTRUMENT_TRADE.PRICE == null : this.PRICE.equals(SPOT_INSTRUMENT_TRADE.PRICE)) &&
        (this.QUANTITY == null ? SPOT_INSTRUMENT_TRADE.QUANTITY == null : this.QUANTITY.equals(SPOT_INSTRUMENT_TRADE.QUANTITY)) &&
        (this.QUOTE == null ? SPOT_INSTRUMENT_TRADE.QUOTE == null : this.QUOTE.equals(SPOT_INSTRUMENT_TRADE.QUOTE)) &&
        (this.QUOTE_QUANTITY == null ? SPOT_INSTRUMENT_TRADE.QUOTE_QUANTITY == null : this.QUOTE_QUANTITY.equals(SPOT_INSTRUMENT_TRADE.QUOTE_QUANTITY)) &&
        (this.RECEIVED_TIMESTAMP == null ? SPOT_INSTRUMENT_TRADE.RECEIVED_TIMESTAMP == null : this.RECEIVED_TIMESTAMP.equals(SPOT_INSTRUMENT_TRADE.RECEIVED_TIMESTAMP)) &&
        (this.RECEIVED_TIMESTAMP_NS == null ? SPOT_INSTRUMENT_TRADE.RECEIVED_TIMESTAMP_NS == null : this.RECEIVED_TIMESTAMP_NS.equals(SPOT_INSTRUMENT_TRADE.RECEIVED_TIMESTAMP_NS)) &&
        (this.SIDE == null ? SPOT_INSTRUMENT_TRADE.SIDE == null : this.SIDE.equals(SPOT_INSTRUMENT_TRADE.SIDE)) &&
        (this.SOURCE == null ? SPOT_INSTRUMENT_TRADE.SOURCE == null : this.SOURCE.equals(SPOT_INSTRUMENT_TRADE.SOURCE)) &&
        (this.TIMESTAMP == null ? SPOT_INSTRUMENT_TRADE.TIMESTAMP == null : this.TIMESTAMP.equals(SPOT_INSTRUMENT_TRADE.TIMESTAMP)) &&
        (this.TIMESTAMP_NS == null ? SPOT_INSTRUMENT_TRADE.TIMESTAMP_NS == null : this.TIMESTAMP_NS.equals(SPOT_INSTRUMENT_TRADE.TIMESTAMP_NS)) &&
        (this.TYPE == null ? SPOT_INSTRUMENT_TRADE.TYPE == null : this.TYPE.equals(SPOT_INSTRUMENT_TRADE.TYPE));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.BASE == null ? 0: this.BASE.hashCode());
    result = 31 * result + (this.CCSEQ == null ? 0: this.CCSEQ.hashCode());
    result = 31 * result + (this.ID == null ? 0: this.ID.hashCode());
    result = 31 * result + (this.INSTRUMENT == null ? 0: this.INSTRUMENT.hashCode());
    result = 31 * result + (this.MAPPED_INSTRUMENT == null ? 0: this.MAPPED_INSTRUMENT.hashCode());
    result = 31 * result + (this.MARKET == null ? 0: this.MARKET.hashCode());
    result = 31 * result + (this.PRICE == null ? 0: this.PRICE.hashCode());
    result = 31 * result + (this.QUANTITY == null ? 0: this.QUANTITY.hashCode());
    result = 31 * result + (this.QUOTE == null ? 0: this.QUOTE.hashCode());
    result = 31 * result + (this.QUOTE_QUANTITY == null ? 0: this.QUOTE_QUANTITY.hashCode());
    result = 31 * result + (this.RECEIVED_TIMESTAMP == null ? 0: this.RECEIVED_TIMESTAMP.hashCode());
    result = 31 * result + (this.RECEIVED_TIMESTAMP_NS == null ? 0: this.RECEIVED_TIMESTAMP_NS.hashCode());
    result = 31 * result + (this.SIDE == null ? 0: this.SIDE.hashCode());
    result = 31 * result + (this.SOURCE == null ? 0: this.SOURCE.hashCode());
    result = 31 * result + (this.TIMESTAMP == null ? 0: this.TIMESTAMP.hashCode());
    result = 31 * result + (this.TIMESTAMP_NS == null ? 0: this.TIMESTAMP_NS.hashCode());
    result = 31 * result + (this.TYPE == null ? 0: this.TYPE.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class SPOTINSTRUMENTTRADE {\n");
    
    sb.append("  BASE: ").append(BASE).append("\n");
    sb.append("  CCSEQ: ").append(CCSEQ).append("\n");
    sb.append("  ID: ").append(ID).append("\n");
    sb.append("  INSTRUMENT: ").append(INSTRUMENT).append("\n");
    sb.append("  MAPPED_INSTRUMENT: ").append(MAPPED_INSTRUMENT).append("\n");
    sb.append("  MARKET: ").append(MARKET).append("\n");
    sb.append("  PRICE: ").append(PRICE).append("\n");
    sb.append("  QUANTITY: ").append(QUANTITY).append("\n");
    sb.append("  QUOTE: ").append(QUOTE).append("\n");
    sb.append("  QUOTE_QUANTITY: ").append(QUOTE_QUANTITY).append("\n");
    sb.append("  RECEIVED_TIMESTAMP: ").append(RECEIVED_TIMESTAMP).append("\n");
    sb.append("  RECEIVED_TIMESTAMP_NS: ").append(RECEIVED_TIMESTAMP_NS).append("\n");
    sb.append("  SIDE: ").append(SIDE).append("\n");
    sb.append("  SOURCE: ").append(SOURCE).append("\n");
    sb.append("  TIMESTAMP: ").append(TIMESTAMP).append("\n");
    sb.append("  TIMESTAMP_NS: ").append(TIMESTAMP_NS).append("\n");
    sb.append("  TYPE: ").append(TYPE).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
