/**
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 * CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: data@cryptocompare.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.Error;
import org.openapitools.client.model.GENERICRESPONSE;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class ReferenceRatesApi {
  String basePath = "https://data-api.cryptocompare.com";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * 
  * 
   * @param market The exchange to obtain data from
   * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
   * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME
   * @param limit The number of data points to return
   * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
   * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
   * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
   * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
   * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV
   * @return GENERICRESPONSE
  */
  public GENERICRESPONSE indexCcV1HistoricalDays (String market, String instrument, List<String> groups, Integer limit, Integer toTs, Integer aggregate, Boolean fill, String mappingPriority, String responseFormat) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'market' is set
    if (market == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'market' when calling indexCcV1HistoricalDays",
        new ApiException(400, "Missing the required parameter 'market' when calling indexCcV1HistoricalDays"));
    }
    // verify the required parameter 'instrument' is set
    if (instrument == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'instrument' when calling indexCcV1HistoricalDays",
        new ApiException(400, "Missing the required parameter 'instrument' when calling indexCcV1HistoricalDays"));
    }

    // create path and map variables
    String path = "/index/cc/v1/historical/days";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "market", market));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "instrument", instrument));
    queryParams.addAll(ApiInvoker.parameterToPairs("csv", "groups", groups));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "to_ts", toTs));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "aggregate", aggregate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "fill", fill));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "mapping_priority", mappingPriority));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "response_format", responseFormat));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GENERICRESPONSE) ApiInvoker.deserialize(localVarResponse, "", GENERICRESPONSE.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * 
   * @param market The exchange to obtain data from   * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.   * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME   * @param limit The number of data points to return   * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}   * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries   * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.   * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST   * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV
  */
  public void indexCcV1HistoricalDays (String market, String instrument, List<String> groups, Integer limit, Integer toTs, Integer aggregate, Boolean fill, String mappingPriority, String responseFormat, final Response.Listener<GENERICRESPONSE> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'market' is set
    if (market == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'market' when calling indexCcV1HistoricalDays",
        new ApiException(400, "Missing the required parameter 'market' when calling indexCcV1HistoricalDays"));
    }
    // verify the required parameter 'instrument' is set
    if (instrument == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'instrument' when calling indexCcV1HistoricalDays",
        new ApiException(400, "Missing the required parameter 'instrument' when calling indexCcV1HistoricalDays"));
    }

    // create path and map variables
    String path = "/index/cc/v1/historical/days".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "market", market));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "instrument", instrument));
    queryParams.addAll(ApiInvoker.parameterToPairs("csv", "groups", groups));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "to_ts", toTs));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "aggregate", aggregate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "fill", fill));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "mapping_priority", mappingPriority));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "response_format", responseFormat));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GENERICRESPONSE) ApiInvoker.deserialize(localVarResponse,  "", GENERICRESPONSE.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * 
   * @param market The exchange to obtain data from
   * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
   * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME
   * @param limit The number of data points to return
   * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
   * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
   * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
   * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
   * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV
   * @return GENERICRESPONSE
  */
  public GENERICRESPONSE indexCcV1HistoricalHours (String market, String instrument, List<String> groups, Integer limit, Integer toTs, Integer aggregate, Boolean fill, String mappingPriority, String responseFormat) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'market' is set
    if (market == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'market' when calling indexCcV1HistoricalHours",
        new ApiException(400, "Missing the required parameter 'market' when calling indexCcV1HistoricalHours"));
    }
    // verify the required parameter 'instrument' is set
    if (instrument == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'instrument' when calling indexCcV1HistoricalHours",
        new ApiException(400, "Missing the required parameter 'instrument' when calling indexCcV1HistoricalHours"));
    }

    // create path and map variables
    String path = "/index/cc/v1/historical/hours";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "market", market));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "instrument", instrument));
    queryParams.addAll(ApiInvoker.parameterToPairs("csv", "groups", groups));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "to_ts", toTs));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "aggregate", aggregate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "fill", fill));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "mapping_priority", mappingPriority));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "response_format", responseFormat));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GENERICRESPONSE) ApiInvoker.deserialize(localVarResponse, "", GENERICRESPONSE.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * 
   * @param market The exchange to obtain data from   * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.   * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME   * @param limit The number of data points to return   * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}   * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries   * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.   * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST   * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV
  */
  public void indexCcV1HistoricalHours (String market, String instrument, List<String> groups, Integer limit, Integer toTs, Integer aggregate, Boolean fill, String mappingPriority, String responseFormat, final Response.Listener<GENERICRESPONSE> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'market' is set
    if (market == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'market' when calling indexCcV1HistoricalHours",
        new ApiException(400, "Missing the required parameter 'market' when calling indexCcV1HistoricalHours"));
    }
    // verify the required parameter 'instrument' is set
    if (instrument == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'instrument' when calling indexCcV1HistoricalHours",
        new ApiException(400, "Missing the required parameter 'instrument' when calling indexCcV1HistoricalHours"));
    }

    // create path and map variables
    String path = "/index/cc/v1/historical/hours".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "market", market));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "instrument", instrument));
    queryParams.addAll(ApiInvoker.parameterToPairs("csv", "groups", groups));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "to_ts", toTs));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "aggregate", aggregate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "fill", fill));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "mapping_priority", mappingPriority));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "response_format", responseFormat));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GENERICRESPONSE) ApiInvoker.deserialize(localVarResponse,  "", GENERICRESPONSE.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * 
   * @param market The exchange to obtain data from
   * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
   * @param afterTs Unix timestamp in seconds of the earliest index message in the response
   * @param lastCcseq The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request.
   * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
   * @param limit The maximum number of index messages to return
   * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV
   * @param return404OnEmptyResponse If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.
   * @return GENERICRESPONSE
  */
  public GENERICRESPONSE indexCcV1HistoricalMessages (String market, String instrument, Integer afterTs, Integer lastCcseq, String mappingPriority, Integer limit, String responseFormat, Boolean return404OnEmptyResponse) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'market' is set
    if (market == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'market' when calling indexCcV1HistoricalMessages",
        new ApiException(400, "Missing the required parameter 'market' when calling indexCcV1HistoricalMessages"));
    }
    // verify the required parameter 'instrument' is set
    if (instrument == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'instrument' when calling indexCcV1HistoricalMessages",
        new ApiException(400, "Missing the required parameter 'instrument' when calling indexCcV1HistoricalMessages"));
    }

    // create path and map variables
    String path = "/index/cc/v1/historical/messages";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "market", market));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "instrument", instrument));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "after_ts", afterTs));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "last_ccseq", lastCcseq));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "mapping_priority", mappingPriority));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "response_format", responseFormat));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "return_404_on_empty_response", return404OnEmptyResponse));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key_header", "api_key_query" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GENERICRESPONSE) ApiInvoker.deserialize(localVarResponse, "", GENERICRESPONSE.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * 
   * @param market The exchange to obtain data from   * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.   * @param afterTs Unix timestamp in seconds of the earliest index message in the response   * @param lastCcseq The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request.   * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST   * @param limit The maximum number of index messages to return   * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV   * @param return404OnEmptyResponse If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.
  */
  public void indexCcV1HistoricalMessages (String market, String instrument, Integer afterTs, Integer lastCcseq, String mappingPriority, Integer limit, String responseFormat, Boolean return404OnEmptyResponse, final Response.Listener<GENERICRESPONSE> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'market' is set
    if (market == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'market' when calling indexCcV1HistoricalMessages",
        new ApiException(400, "Missing the required parameter 'market' when calling indexCcV1HistoricalMessages"));
    }
    // verify the required parameter 'instrument' is set
    if (instrument == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'instrument' when calling indexCcV1HistoricalMessages",
        new ApiException(400, "Missing the required parameter 'instrument' when calling indexCcV1HistoricalMessages"));
    }

    // create path and map variables
    String path = "/index/cc/v1/historical/messages".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "market", market));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "instrument", instrument));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "after_ts", afterTs));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "last_ccseq", lastCcseq));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "mapping_priority", mappingPriority));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "response_format", responseFormat));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "return_404_on_empty_response", return404OnEmptyResponse));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "api_key_header", "api_key_query" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GENERICRESPONSE) ApiInvoker.deserialize(localVarResponse,  "", GENERICRESPONSE.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * 
   * @param market The exchange to obtain data from
   * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
   * @param hourTs Unix timestamp in seconds for the hour containing the index updates you are interested in. You can pass any timestamp in the hour but we will round it down the the full hour timestmap and return all index updates in that hour.
   * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
   * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV
   * @param return404OnEmptyResponse If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.
   * @return GENERICRESPONSE
  */
  public GENERICRESPONSE indexCcV1HistoricalMessagesHour (String market, String instrument, Integer hourTs, String mappingPriority, String responseFormat, Boolean return404OnEmptyResponse) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'market' is set
    if (market == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'market' when calling indexCcV1HistoricalMessagesHour",
        new ApiException(400, "Missing the required parameter 'market' when calling indexCcV1HistoricalMessagesHour"));
    }
    // verify the required parameter 'instrument' is set
    if (instrument == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'instrument' when calling indexCcV1HistoricalMessagesHour",
        new ApiException(400, "Missing the required parameter 'instrument' when calling indexCcV1HistoricalMessagesHour"));
    }

    // create path and map variables
    String path = "/index/cc/v1/historical/messages/hour";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "market", market));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "instrument", instrument));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "hour_ts", hourTs));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "mapping_priority", mappingPriority));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "response_format", responseFormat));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "return_404_on_empty_response", return404OnEmptyResponse));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key_header", "api_key_query" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GENERICRESPONSE) ApiInvoker.deserialize(localVarResponse, "", GENERICRESPONSE.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * 
   * @param market The exchange to obtain data from   * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.   * @param hourTs Unix timestamp in seconds for the hour containing the index updates you are interested in. You can pass any timestamp in the hour but we will round it down the the full hour timestmap and return all index updates in that hour.   * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST   * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV   * @param return404OnEmptyResponse If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.
  */
  public void indexCcV1HistoricalMessagesHour (String market, String instrument, Integer hourTs, String mappingPriority, String responseFormat, Boolean return404OnEmptyResponse, final Response.Listener<GENERICRESPONSE> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'market' is set
    if (market == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'market' when calling indexCcV1HistoricalMessagesHour",
        new ApiException(400, "Missing the required parameter 'market' when calling indexCcV1HistoricalMessagesHour"));
    }
    // verify the required parameter 'instrument' is set
    if (instrument == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'instrument' when calling indexCcV1HistoricalMessagesHour",
        new ApiException(400, "Missing the required parameter 'instrument' when calling indexCcV1HistoricalMessagesHour"));
    }

    // create path and map variables
    String path = "/index/cc/v1/historical/messages/hour".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "market", market));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "instrument", instrument));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "hour_ts", hourTs));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "mapping_priority", mappingPriority));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "response_format", responseFormat));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "return_404_on_empty_response", return404OnEmptyResponse));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "api_key_header", "api_key_query" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GENERICRESPONSE) ApiInvoker.deserialize(localVarResponse,  "", GENERICRESPONSE.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * 
   * @param market The exchange to obtain data from
   * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
   * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME
   * @param limit The number of data points to return
   * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
   * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
   * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
   * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
   * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV
   * @return GENERICRESPONSE
  */
  public GENERICRESPONSE indexCcV1HistoricalMinutes (String market, String instrument, List<String> groups, Integer limit, Integer toTs, Integer aggregate, Boolean fill, String mappingPriority, String responseFormat) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'market' is set
    if (market == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'market' when calling indexCcV1HistoricalMinutes",
        new ApiException(400, "Missing the required parameter 'market' when calling indexCcV1HistoricalMinutes"));
    }
    // verify the required parameter 'instrument' is set
    if (instrument == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'instrument' when calling indexCcV1HistoricalMinutes",
        new ApiException(400, "Missing the required parameter 'instrument' when calling indexCcV1HistoricalMinutes"));
    }

    // create path and map variables
    String path = "/index/cc/v1/historical/minutes";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "market", market));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "instrument", instrument));
    queryParams.addAll(ApiInvoker.parameterToPairs("csv", "groups", groups));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "to_ts", toTs));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "aggregate", aggregate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "fill", fill));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "mapping_priority", mappingPriority));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "response_format", responseFormat));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GENERICRESPONSE) ApiInvoker.deserialize(localVarResponse, "", GENERICRESPONSE.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * 
   * @param market The exchange to obtain data from   * @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.   * @param groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME   * @param limit The number of data points to return   * @param toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}   * @param aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries   * @param fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.   * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST   * @param responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV
  */
  public void indexCcV1HistoricalMinutes (String market, String instrument, List<String> groups, Integer limit, Integer toTs, Integer aggregate, Boolean fill, String mappingPriority, String responseFormat, final Response.Listener<GENERICRESPONSE> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'market' is set
    if (market == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'market' when calling indexCcV1HistoricalMinutes",
        new ApiException(400, "Missing the required parameter 'market' when calling indexCcV1HistoricalMinutes"));
    }
    // verify the required parameter 'instrument' is set
    if (instrument == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'instrument' when calling indexCcV1HistoricalMinutes",
        new ApiException(400, "Missing the required parameter 'instrument' when calling indexCcV1HistoricalMinutes"));
    }

    // create path and map variables
    String path = "/index/cc/v1/historical/minutes".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "market", market));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "instrument", instrument));
    queryParams.addAll(ApiInvoker.parameterToPairs("csv", "groups", groups));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "to_ts", toTs));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "aggregate", aggregate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "fill", fill));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "mapping_priority", mappingPriority));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "response_format", responseFormat));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GENERICRESPONSE) ApiInvoker.deserialize(localVarResponse,  "", GENERICRESPONSE.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * 
   * @param market The exchange to obtain data from
   * @param instruments A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.
   * @param groups When requesting metadata entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: STATUS,INTERNAL,GENERAL,MIGRATION,SOURCE
   * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
   * @return GENERICRESPONSE
  */
  public GENERICRESPONSE indexCcV1LatestInstrumentMetadata (String market, List<String> instruments, List<String> groups, String mappingPriority) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'market' is set
    if (market == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'market' when calling indexCcV1LatestInstrumentMetadata",
        new ApiException(400, "Missing the required parameter 'market' when calling indexCcV1LatestInstrumentMetadata"));
    }
    // verify the required parameter 'instruments' is set
    if (instruments == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'instruments' when calling indexCcV1LatestInstrumentMetadata",
        new ApiException(400, "Missing the required parameter 'instruments' when calling indexCcV1LatestInstrumentMetadata"));
    }

    // create path and map variables
    String path = "/index/cc/v1/latest/instrument/metadata";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "market", market));
    queryParams.addAll(ApiInvoker.parameterToPairs("csv", "instruments", instruments));
    queryParams.addAll(ApiInvoker.parameterToPairs("csv", "groups", groups));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "mapping_priority", mappingPriority));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GENERICRESPONSE) ApiInvoker.deserialize(localVarResponse, "", GENERICRESPONSE.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * 
   * @param market The exchange to obtain data from   * @param instruments A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.   * @param groups When requesting metadata entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: STATUS,INTERNAL,GENERAL,MIGRATION,SOURCE   * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
  */
  public void indexCcV1LatestInstrumentMetadata (String market, List<String> instruments, List<String> groups, String mappingPriority, final Response.Listener<GENERICRESPONSE> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'market' is set
    if (market == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'market' when calling indexCcV1LatestInstrumentMetadata",
        new ApiException(400, "Missing the required parameter 'market' when calling indexCcV1LatestInstrumentMetadata"));
    }
    // verify the required parameter 'instruments' is set
    if (instruments == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'instruments' when calling indexCcV1LatestInstrumentMetadata",
        new ApiException(400, "Missing the required parameter 'instruments' when calling indexCcV1LatestInstrumentMetadata"));
    }

    // create path and map variables
    String path = "/index/cc/v1/latest/instrument/metadata".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "market", market));
    queryParams.addAll(ApiInvoker.parameterToPairs("csv", "instruments", instruments));
    queryParams.addAll(ApiInvoker.parameterToPairs("csv", "groups", groups));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "mapping_priority", mappingPriority));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GENERICRESPONSE) ApiInvoker.deserialize(localVarResponse,  "", GENERICRESPONSE.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * 
   * @param market The exchange to obtain data from
   * @param instruments A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.
   * @param groups When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME
   * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
   * @return GENERICRESPONSE
  */
  public GENERICRESPONSE indexCcV1LatestTick (String market, List<String> instruments, List<String> groups, String mappingPriority) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'market' is set
    if (market == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'market' when calling indexCcV1LatestTick",
        new ApiException(400, "Missing the required parameter 'market' when calling indexCcV1LatestTick"));
    }
    // verify the required parameter 'instruments' is set
    if (instruments == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'instruments' when calling indexCcV1LatestTick",
        new ApiException(400, "Missing the required parameter 'instruments' when calling indexCcV1LatestTick"));
    }

    // create path and map variables
    String path = "/index/cc/v1/latest/tick";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "market", market));
    queryParams.addAll(ApiInvoker.parameterToPairs("csv", "instruments", instruments));
    queryParams.addAll(ApiInvoker.parameterToPairs("csv", "groups", groups));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "mapping_priority", mappingPriority));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GENERICRESPONSE) ApiInvoker.deserialize(localVarResponse, "", GENERICRESPONSE.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * 
   * @param market The exchange to obtain data from   * @param instruments A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.   * @param groups When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME   * @param mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
  */
  public void indexCcV1LatestTick (String market, List<String> instruments, List<String> groups, String mappingPriority, final Response.Listener<GENERICRESPONSE> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'market' is set
    if (market == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'market' when calling indexCcV1LatestTick",
        new ApiException(400, "Missing the required parameter 'market' when calling indexCcV1LatestTick"));
    }
    // verify the required parameter 'instruments' is set
    if (instruments == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'instruments' when calling indexCcV1LatestTick",
        new ApiException(400, "Missing the required parameter 'instruments' when calling indexCcV1LatestTick"));
    }

    // create path and map variables
    String path = "/index/cc/v1/latest/tick".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "market", market));
    queryParams.addAll(ApiInvoker.parameterToPairs("csv", "instruments", instruments));
    queryParams.addAll(ApiInvoker.parameterToPairs("csv", "groups", groups));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "mapping_priority", mappingPriority));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GENERICRESPONSE) ApiInvoker.deserialize(localVarResponse,  "", GENERICRESPONSE.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * 
   * @param market The exchange to obtain data from
   * @return GENERICRESPONSE
  */
  public GENERICRESPONSE indexCcV1Markets (String market) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/index/cc/v1/markets";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "market", market));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GENERICRESPONSE) ApiInvoker.deserialize(localVarResponse, "", GENERICRESPONSE.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * 
   * @param market The exchange to obtain data from
  */
  public void indexCcV1Markets (String market, final Response.Listener<GENERICRESPONSE> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/index/cc/v1/markets".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "market", market));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GENERICRESPONSE) ApiInvoker.deserialize(localVarResponse,  "", GENERICRESPONSE.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * 
   * @param market The exchange to obtain data from
   * @param instrument The mapped instrument to retrieve on a specific market.
   * @param instrumentStatus The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED
   * @return GENERICRESPONSE
  */
  public GENERICRESPONSE indexCcV1MarketsInstruments (String market, String instrument, List<String> instrumentStatus) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/index/cc/v1/markets/instruments";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "market", market));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "instrument", instrument));
    queryParams.addAll(ApiInvoker.parameterToPairs("csv", "instrument_status", instrumentStatus));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GENERICRESPONSE) ApiInvoker.deserialize(localVarResponse, "", GENERICRESPONSE.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * 
   * @param market The exchange to obtain data from   * @param instrument The mapped instrument to retrieve on a specific market.   * @param instrumentStatus The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED
  */
  public void indexCcV1MarketsInstruments (String market, String instrument, List<String> instrumentStatus, final Response.Listener<GENERICRESPONSE> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/index/cc/v1/markets/instruments".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "market", market));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "instrument", instrument));
    queryParams.addAll(ApiInvoker.parameterToPairs("csv", "instrument_status", instrumentStatus));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GENERICRESPONSE) ApiInvoker.deserialize(localVarResponse,  "", GENERICRESPONSE.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * 
   * @param market The exchange to obtain data from
   * @param instrument The unmapped instrument to retrieve on a specific market.
   * @param instrumentStatus The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED
   * @return GENERICRESPONSE
  */
  public GENERICRESPONSE indexCcV1MarketsInstrumentsUnmapped (String market, String instrument, List<String> instrumentStatus) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/index/cc/v1/markets/instruments/unmapped";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "market", market));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "instrument", instrument));
    queryParams.addAll(ApiInvoker.parameterToPairs("csv", "instrument_status", instrumentStatus));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GENERICRESPONSE) ApiInvoker.deserialize(localVarResponse, "", GENERICRESPONSE.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * 
   * @param market The exchange to obtain data from   * @param instrument The unmapped instrument to retrieve on a specific market.   * @param instrumentStatus The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED
  */
  public void indexCcV1MarketsInstrumentsUnmapped (String market, String instrument, List<String> instrumentStatus, final Response.Listener<GENERICRESPONSE> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/index/cc/v1/markets/instruments/unmapped".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "market", market));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "instrument", instrument));
    queryParams.addAll(ApiInvoker.parameterToPairs("csv", "instrument_status", instrumentStatus));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GENERICRESPONSE) ApiInvoker.deserialize(localVarResponse,  "", GENERICRESPONSE.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
