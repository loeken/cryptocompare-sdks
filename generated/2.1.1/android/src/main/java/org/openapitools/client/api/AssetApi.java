/**
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 * CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: data@cryptocompare.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.Error;
import org.openapitools.client.model.GENERICRESPONSE;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class AssetApi {
  String basePath = "https://data-api.cryptocompare.com";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * 
  * 
   * @param address 
   * @param chainSymbol 
   * @param groups 
   * @return GENERICRESPONSE
  */
  public GENERICRESPONSE assetV1DataByAddress (String address, String chainSymbol, String groups) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling assetV1DataByAddress",
        new ApiException(400, "Missing the required parameter 'address' when calling assetV1DataByAddress"));
    }
    // verify the required parameter 'chainSymbol' is set
    if (chainSymbol == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'chainSymbol' when calling assetV1DataByAddress",
        new ApiException(400, "Missing the required parameter 'chainSymbol' when calling assetV1DataByAddress"));
    }

    // create path and map variables
    String path = "/asset/v1/data/by/address";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "address", address));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "chain_symbol", chainSymbol));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "groups", groups));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GENERICRESPONSE) ApiInvoker.deserialize(localVarResponse, "", GENERICRESPONSE.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * 
   * @param address    * @param chainSymbol    * @param groups 
  */
  public void assetV1DataByAddress (String address, String chainSymbol, String groups, final Response.Listener<GENERICRESPONSE> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling assetV1DataByAddress",
        new ApiException(400, "Missing the required parameter 'address' when calling assetV1DataByAddress"));
    }
    // verify the required parameter 'chainSymbol' is set
    if (chainSymbol == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'chainSymbol' when calling assetV1DataByAddress",
        new ApiException(400, "Missing the required parameter 'chainSymbol' when calling assetV1DataByAddress"));
    }

    // create path and map variables
    String path = "/asset/v1/data/by/address".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "address", address));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "chain_symbol", chainSymbol));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "groups", groups));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GENERICRESPONSE) ApiInvoker.deserialize(localVarResponse,  "", GENERICRESPONSE.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * 
   * @param assetId The asset id you are interested in
   * @param groups 
   * @return GENERICRESPONSE
  */
  public GENERICRESPONSE assetV1DataById (Integer assetId, String groups) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'assetId' is set
    if (assetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'assetId' when calling assetV1DataById",
        new ApiException(400, "Missing the required parameter 'assetId' when calling assetV1DataById"));
    }

    // create path and map variables
    String path = "/asset/v1/data/by/id";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "asset_id", assetId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "groups", groups));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GENERICRESPONSE) ApiInvoker.deserialize(localVarResponse, "", GENERICRESPONSE.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * 
   * @param assetId The asset id you are interested in   * @param groups 
  */
  public void assetV1DataById (Integer assetId, String groups, final Response.Listener<GENERICRESPONSE> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'assetId' is set
    if (assetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'assetId' when calling assetV1DataById",
        new ApiException(400, "Missing the required parameter 'assetId' when calling assetV1DataById"));
    }

    // create path and map variables
    String path = "/asset/v1/data/by/id".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "asset_id", assetId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "groups", groups));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GENERICRESPONSE) ApiInvoker.deserialize(localVarResponse,  "", GENERICRESPONSE.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * 
   * @param assetSymbol The asset symbol you are interested in
   * @param groups 
   * @return GENERICRESPONSE
  */
  public GENERICRESPONSE assetV1DataBySymbol (String assetSymbol, String groups) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'assetSymbol' is set
    if (assetSymbol == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'assetSymbol' when calling assetV1DataBySymbol",
        new ApiException(400, "Missing the required parameter 'assetSymbol' when calling assetV1DataBySymbol"));
    }

    // create path and map variables
    String path = "/asset/v1/data/by/symbol";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "asset_symbol", assetSymbol));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "groups", groups));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GENERICRESPONSE) ApiInvoker.deserialize(localVarResponse, "", GENERICRESPONSE.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * 
   * @param assetSymbol The asset symbol you are interested in   * @param groups 
  */
  public void assetV1DataBySymbol (String assetSymbol, String groups, final Response.Listener<GENERICRESPONSE> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'assetSymbol' is set
    if (assetSymbol == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'assetSymbol' when calling assetV1DataBySymbol",
        new ApiException(400, "Missing the required parameter 'assetSymbol' when calling assetV1DataBySymbol"));
    }

    // create path and map variables
    String path = "/asset/v1/data/by/symbol".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "asset_symbol", assetSymbol));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "groups", groups));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GENERICRESPONSE) ApiInvoker.deserialize(localVarResponse,  "", GENERICRESPONSE.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * 
   * @param page The page number for the request to get {page_size} coins at the time.
   * @param pageSize The number of items returned per page
   * @param assetType The asset class/type
   * @param sortBy Sort by field ( CREATED_ON,UPDATED_ON,SYMBOL )
   * @param sortDirection Sort direction ( DESC,ASC )
   * @param groups 
   * @return GENERICRESPONSE
  */
  public GENERICRESPONSE assetV1TopList (Integer page, Integer pageSize, String assetType, String sortBy, String sortDirection, String groups) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/asset/v1/top/list";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "asset_type", assetType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sort_by", sortBy));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sort_direction", sortDirection));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "groups", groups));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GENERICRESPONSE) ApiInvoker.deserialize(localVarResponse, "", GENERICRESPONSE.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * 
   * @param page The page number for the request to get {page_size} coins at the time.   * @param pageSize The number of items returned per page   * @param assetType The asset class/type   * @param sortBy Sort by field ( CREATED_ON,UPDATED_ON,SYMBOL )   * @param sortDirection Sort direction ( DESC,ASC )   * @param groups 
  */
  public void assetV1TopList (Integer page, Integer pageSize, String assetType, String sortBy, String sortDirection, String groups, final Response.Listener<GENERICRESPONSE> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/asset/v1/top/list".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "asset_type", assetType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sort_by", sortBy));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sort_direction", sortDirection));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "groups", groups));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GENERICRESPONSE) ApiInvoker.deserialize(localVarResponse,  "", GENERICRESPONSE.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
