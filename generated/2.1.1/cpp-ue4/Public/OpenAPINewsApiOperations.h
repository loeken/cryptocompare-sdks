/**
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 * CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 *
 * OpenAPI spec version: 2.1.1
 * Contact: data@cryptocompare.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "OpenAPIBaseModel.h"
#include "OpenAPINewsApi.h"

#include "OpenAPIError.h"
#include "OpenAPIGENERICRESPONSE.h"

namespace OpenAPI
{

/* 

*/
class OPENAPI_API OpenAPINewsApi::NewsV1ArticleListRequest : public Request
{
public:
    virtual ~NewsV1ArticleListRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* Get articles from specific sources; either by their ids or keys */
	TOptional<TArray<FString>> SourceIds;
	enum class LangEnum
	{
		En,
		Es,
		Pt,
		,
  	};

	static FString EnumToString(const LangEnum& EnumValue);
	static bool EnumFromString(const FString& EnumAsString, LangEnum& EnumValue);
	/* The article Preferred language - English (EN), Portuguese (PT), Espanol (ES) */
	TOptional<LangEnum> Lang;
	enum class CategoriesEnum
	{
		_1INCH,
		Aave,
		Ada,
		Algo,
		Altcoin,
		Asia,
		Atom,
		Avax,
		Axs,
		Bal,
		Bat,
		Bch,
		Blockchain,
		Btc,
		Business,
		Commodity,
		Comp,
		Crv,
		Dash,
		Doge,
		Dot,
		Enj,
		Etc,
		Eth,
		Exchange,
		Fiat,
		Fil,
		Ftm,
		Ico,
		Knc,
		Link,
		Lrc,
		Ltc,
		Luna,
		Lunc,
		Mana,
		Market,
		Matic,
		Mining,
		Mkr,
		Regulation,
		Ren,
		Sand,
		Shib,
		Snx,
		Sol,
		Sponsored,
		Sushi,
		Technology,
		Trading,
		Trx,
		Uma,
		Uni,
		Usdt,
		Wallet,
		Xlm,
		Xmr,
		Xrp,
		Xtz,
		Yfi,
		Zec,
		Zrx,
		,
  	};

	static FString EnumToString(const CategoriesEnum& EnumValue);
	static bool EnumFromString(const FString& EnumAsString, CategoriesEnum& EnumValue);
	/* News article categories to return */
	TOptional<TArray<CategoriesEnum>> Categories;
	enum class ExcludeCategoriesEnum
	{
		_1INCH,
		Aave,
		Ada,
		Algo,
		Altcoin,
		Asia,
		Atom,
		Avax,
		Axs,
		Bal,
		Bat,
		Bch,
		Blockchain,
		Btc,
		Business,
		Commodity,
		Comp,
		Crv,
		Dash,
		Doge,
		Dot,
		Enj,
		Etc,
		Eth,
		Exchange,
		Fiat,
		Fil,
		Ftm,
		Ico,
		Knc,
		Link,
		Lrc,
		Ltc,
		Luna,
		Lunc,
		Mana,
		Market,
		Matic,
		Mining,
		Mkr,
		Regulation,
		Ren,
		Sand,
		Shib,
		Snx,
		Sol,
		Sponsored,
		Sushi,
		Technology,
		Trading,
		Trx,
		Uma,
		Uni,
		Usdt,
		Wallet,
		Xlm,
		Xmr,
		Xrp,
		Xtz,
		Yfi,
		Zec,
		Zrx,
		,
  	};

	static FString EnumToString(const ExcludeCategoriesEnum& EnumValue);
	static bool EnumFromString(const FString& EnumAsString, ExcludeCategoriesEnum& EnumValue);
	/* News article categories to exclude from results */
	TOptional<TArray<ExcludeCategoriesEnum>> ExcludeCategories;
	/* Articles published on or before this timestamp */
	TOptional<int32> ToTs;
};

class OPENAPI_API OpenAPINewsApi::NewsV1ArticleListResponse : public Response
{
public:
    virtual ~NewsV1ArticleListResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIGENERICRESPONSE Content;
};

/* 

*/
class OPENAPI_API OpenAPINewsApi::NewsV1CategoryListRequest : public Request
{
public:
    virtual ~NewsV1CategoryListRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

};

class OPENAPI_API OpenAPINewsApi::NewsV1CategoryListResponse : public Response
{
public:
    virtual ~NewsV1CategoryListResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIGENERICRESPONSE Content;
};

/* 

*/
class OPENAPI_API OpenAPINewsApi::NewsV1SourceListRequest : public Request
{
public:
    virtual ~NewsV1SourceListRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	enum class LangEnum
	{
		En,
		Es,
		Pt,
		,
  	};

	static FString EnumToString(const LangEnum& EnumValue);
	static bool EnumFromString(const FString& EnumAsString, LangEnum& EnumValue);
	/* The article source Preferred language - English (EN), Portuguese (PT), Espanol (ES) */
	TOptional<LangEnum> Lang;
	enum class TypeEnum
	{
		Rss,
		Api,
		Twitter,
		,
  	};

	static FString EnumToString(const TypeEnum& EnumValue);
	static bool EnumFromString(const FString& EnumAsString, TypeEnum& EnumValue);
	/* RSS, API, TWITTER */
	TOptional<TypeEnum> Type;
	enum class StatusEnum
	{
		Active,
		Inactive,
		,
  	};

	static FString EnumToString(const StatusEnum& EnumValue);
	static bool EnumFromString(const FString& EnumAsString, StatusEnum& EnumValue);
	/* The status for the  article source entry. Allowed values: ACTIVE, INACTIVE */
	TOptional<StatusEnum> Status;
};

class OPENAPI_API OpenAPINewsApi::NewsV1SourceListResponse : public Response
{
public:
    virtual ~NewsV1SourceListResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIGENERICRESPONSE Content;
};

}
