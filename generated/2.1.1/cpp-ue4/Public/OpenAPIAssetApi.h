/**
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 * CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 *
 * OpenAPI spec version: 2.1.1
 * Contact: data@cryptocompare.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "OpenAPIBaseModel.h"

namespace OpenAPI
{

class OPENAPI_API OpenAPIAssetApi
{
public:
	OpenAPIAssetApi();
	~OpenAPIAssetApi();

	/* Sets the URL Endpoint.
	* Note: several fallback endpoints can be configured in request retry policies, see Request::SetShouldRetry */
	void SetURL(const FString& Url);

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();

	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	* If no retry manager is specified and a request needs retries, a default retry manager will be used.
	* See also: Request::SetShouldRetry */
	void SetHttpRetryManager(FHttpRetrySystem::FManager& RetryManager);
	FHttpRetrySystem::FManager& GetHttpRetryManager();

	class AssetV1DataByAddressRequest;
	class AssetV1DataByAddressResponse;
	class AssetV1DataByIdRequest;
	class AssetV1DataByIdResponse;
	class AssetV1DataBySymbolRequest;
	class AssetV1DataBySymbolResponse;
	class AssetV1TopListRequest;
	class AssetV1TopListResponse;
	
    DECLARE_DELEGATE_OneParam(FAssetV1DataByAddressDelegate, const AssetV1DataByAddressResponse&);
    DECLARE_DELEGATE_OneParam(FAssetV1DataByIdDelegate, const AssetV1DataByIdResponse&);
    DECLARE_DELEGATE_OneParam(FAssetV1DataBySymbolDelegate, const AssetV1DataBySymbolResponse&);
    DECLARE_DELEGATE_OneParam(FAssetV1TopListDelegate, const AssetV1TopListResponse&);
    
    FHttpRequestPtr AssetV1DataByAddress(const AssetV1DataByAddressRequest& Request, const FAssetV1DataByAddressDelegate& Delegate = FAssetV1DataByAddressDelegate()) const;
    FHttpRequestPtr AssetV1DataById(const AssetV1DataByIdRequest& Request, const FAssetV1DataByIdDelegate& Delegate = FAssetV1DataByIdDelegate()) const;
    FHttpRequestPtr AssetV1DataBySymbol(const AssetV1DataBySymbolRequest& Request, const FAssetV1DataBySymbolDelegate& Delegate = FAssetV1DataBySymbolDelegate()) const;
    FHttpRequestPtr AssetV1TopList(const AssetV1TopListRequest& Request, const FAssetV1TopListDelegate& Delegate = FAssetV1TopListDelegate()) const;
    
private:
    void OnAssetV1DataByAddressResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FAssetV1DataByAddressDelegate Delegate) const;
    void OnAssetV1DataByIdResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FAssetV1DataByIdDelegate Delegate) const;
    void OnAssetV1DataBySymbolResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FAssetV1DataBySymbolDelegate Delegate) const;
    void OnAssetV1TopListResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FAssetV1TopListDelegate Delegate) const;
    
	FHttpRequestRef CreateHttpRequest(const Request& Request) const;
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
	mutable FHttpRetrySystem::FManager* RetryManager = nullptr;
	mutable TUniquePtr<HttpRetryManager> DefaultRetryManager;
};

}
