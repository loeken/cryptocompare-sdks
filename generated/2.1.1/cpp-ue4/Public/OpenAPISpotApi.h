/**
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 * CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 *
 * OpenAPI spec version: 2.1.1
 * Contact: data@cryptocompare.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "OpenAPIBaseModel.h"

namespace OpenAPI
{

class OPENAPI_API OpenAPISpotApi
{
public:
	OpenAPISpotApi();
	~OpenAPISpotApi();

	/* Sets the URL Endpoint.
	* Note: several fallback endpoints can be configured in request retry policies, see Request::SetShouldRetry */
	void SetURL(const FString& Url);

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();

	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	* If no retry manager is specified and a request needs retries, a default retry manager will be used.
	* See also: Request::SetShouldRetry */
	void SetHttpRetryManager(FHttpRetrySystem::FManager& RetryManager);
	FHttpRetrySystem::FManager& GetHttpRetryManager();

	class SpotV1HistoricalDaysRequest;
	class SpotV1HistoricalDaysResponse;
	class SpotV1HistoricalHoursRequest;
	class SpotV1HistoricalHoursResponse;
	class SpotV1HistoricalMinutesRequest;
	class SpotV1HistoricalMinutesResponse;
	class SpotV1HistoricalOrderbookL2SnapshotMinuteRequest;
	class SpotV1HistoricalOrderbookL2SnapshotMinuteResponse;
	class SpotV1HistoricalTradesRequest;
	class SpotV1HistoricalTradesResponse;
	class SpotV1HistoricalTradesHourRequest;
	class SpotV1HistoricalTradesHourResponse;
	class SpotV1LatestInstrumentMetadataRequest;
	class SpotV1LatestInstrumentMetadataResponse;
	class SpotV1LatestTickRequest;
	class SpotV1LatestTickResponse;
	class SpotV1MarketsRequest;
	class SpotV1MarketsResponse;
	class SpotV1MarketsInstrumentsRequest;
	class SpotV1MarketsInstrumentsResponse;
	class SpotV1MarketsInstrumentsUnmappedRequest;
	class SpotV1MarketsInstrumentsUnmappedResponse;
	
    DECLARE_DELEGATE_OneParam(FSpotV1HistoricalDaysDelegate, const SpotV1HistoricalDaysResponse&);
    DECLARE_DELEGATE_OneParam(FSpotV1HistoricalHoursDelegate, const SpotV1HistoricalHoursResponse&);
    DECLARE_DELEGATE_OneParam(FSpotV1HistoricalMinutesDelegate, const SpotV1HistoricalMinutesResponse&);
    DECLARE_DELEGATE_OneParam(FSpotV1HistoricalOrderbookL2SnapshotMinuteDelegate, const SpotV1HistoricalOrderbookL2SnapshotMinuteResponse&);
    DECLARE_DELEGATE_OneParam(FSpotV1HistoricalTradesDelegate, const SpotV1HistoricalTradesResponse&);
    DECLARE_DELEGATE_OneParam(FSpotV1HistoricalTradesHourDelegate, const SpotV1HistoricalTradesHourResponse&);
    DECLARE_DELEGATE_OneParam(FSpotV1LatestInstrumentMetadataDelegate, const SpotV1LatestInstrumentMetadataResponse&);
    DECLARE_DELEGATE_OneParam(FSpotV1LatestTickDelegate, const SpotV1LatestTickResponse&);
    DECLARE_DELEGATE_OneParam(FSpotV1MarketsDelegate, const SpotV1MarketsResponse&);
    DECLARE_DELEGATE_OneParam(FSpotV1MarketsInstrumentsDelegate, const SpotV1MarketsInstrumentsResponse&);
    DECLARE_DELEGATE_OneParam(FSpotV1MarketsInstrumentsUnmappedDelegate, const SpotV1MarketsInstrumentsUnmappedResponse&);
    
    FHttpRequestPtr SpotV1HistoricalDays(const SpotV1HistoricalDaysRequest& Request, const FSpotV1HistoricalDaysDelegate& Delegate = FSpotV1HistoricalDaysDelegate()) const;
    FHttpRequestPtr SpotV1HistoricalHours(const SpotV1HistoricalHoursRequest& Request, const FSpotV1HistoricalHoursDelegate& Delegate = FSpotV1HistoricalHoursDelegate()) const;
    FHttpRequestPtr SpotV1HistoricalMinutes(const SpotV1HistoricalMinutesRequest& Request, const FSpotV1HistoricalMinutesDelegate& Delegate = FSpotV1HistoricalMinutesDelegate()) const;
    FHttpRequestPtr SpotV1HistoricalOrderbookL2SnapshotMinute(const SpotV1HistoricalOrderbookL2SnapshotMinuteRequest& Request, const FSpotV1HistoricalOrderbookL2SnapshotMinuteDelegate& Delegate = FSpotV1HistoricalOrderbookL2SnapshotMinuteDelegate()) const;
    FHttpRequestPtr SpotV1HistoricalTrades(const SpotV1HistoricalTradesRequest& Request, const FSpotV1HistoricalTradesDelegate& Delegate = FSpotV1HistoricalTradesDelegate()) const;
    FHttpRequestPtr SpotV1HistoricalTradesHour(const SpotV1HistoricalTradesHourRequest& Request, const FSpotV1HistoricalTradesHourDelegate& Delegate = FSpotV1HistoricalTradesHourDelegate()) const;
    FHttpRequestPtr SpotV1LatestInstrumentMetadata(const SpotV1LatestInstrumentMetadataRequest& Request, const FSpotV1LatestInstrumentMetadataDelegate& Delegate = FSpotV1LatestInstrumentMetadataDelegate()) const;
    FHttpRequestPtr SpotV1LatestTick(const SpotV1LatestTickRequest& Request, const FSpotV1LatestTickDelegate& Delegate = FSpotV1LatestTickDelegate()) const;
    FHttpRequestPtr SpotV1Markets(const SpotV1MarketsRequest& Request, const FSpotV1MarketsDelegate& Delegate = FSpotV1MarketsDelegate()) const;
    FHttpRequestPtr SpotV1MarketsInstruments(const SpotV1MarketsInstrumentsRequest& Request, const FSpotV1MarketsInstrumentsDelegate& Delegate = FSpotV1MarketsInstrumentsDelegate()) const;
    FHttpRequestPtr SpotV1MarketsInstrumentsUnmapped(const SpotV1MarketsInstrumentsUnmappedRequest& Request, const FSpotV1MarketsInstrumentsUnmappedDelegate& Delegate = FSpotV1MarketsInstrumentsUnmappedDelegate()) const;
    
private:
    void OnSpotV1HistoricalDaysResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSpotV1HistoricalDaysDelegate Delegate) const;
    void OnSpotV1HistoricalHoursResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSpotV1HistoricalHoursDelegate Delegate) const;
    void OnSpotV1HistoricalMinutesResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSpotV1HistoricalMinutesDelegate Delegate) const;
    void OnSpotV1HistoricalOrderbookL2SnapshotMinuteResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSpotV1HistoricalOrderbookL2SnapshotMinuteDelegate Delegate) const;
    void OnSpotV1HistoricalTradesResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSpotV1HistoricalTradesDelegate Delegate) const;
    void OnSpotV1HistoricalTradesHourResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSpotV1HistoricalTradesHourDelegate Delegate) const;
    void OnSpotV1LatestInstrumentMetadataResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSpotV1LatestInstrumentMetadataDelegate Delegate) const;
    void OnSpotV1LatestTickResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSpotV1LatestTickDelegate Delegate) const;
    void OnSpotV1MarketsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSpotV1MarketsDelegate Delegate) const;
    void OnSpotV1MarketsInstrumentsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSpotV1MarketsInstrumentsDelegate Delegate) const;
    void OnSpotV1MarketsInstrumentsUnmappedResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSpotV1MarketsInstrumentsUnmappedDelegate Delegate) const;
    
	FHttpRequestRef CreateHttpRequest(const Request& Request) const;
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
	mutable FHttpRetrySystem::FManager* RetryManager = nullptr;
	mutable TUniquePtr<HttpRetryManager> DefaultRetryManager;
};

}
