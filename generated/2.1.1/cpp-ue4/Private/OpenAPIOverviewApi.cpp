/**
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 * CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 *
 * OpenAPI spec version: 2.1.1
 * Contact: data@cryptocompare.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIOverviewApi.h"

#include "OpenAPIOverviewApiOperations.h"
#include "OpenAPIModule.h"

#include "HttpModule.h"
#include "Serialization/JsonSerializer.h"

namespace OpenAPI
{

OpenAPIOverviewApi::OpenAPIOverviewApi()
: Url(TEXT("https://data-api.cryptocompare.com"))
{
}

OpenAPIOverviewApi::~OpenAPIOverviewApi() {}

void OpenAPIOverviewApi::SetURL(const FString& InUrl)
{
	Url = InUrl;
}

void OpenAPIOverviewApi::AddHeaderParam(const FString& Key, const FString& Value)
{
	AdditionalHeaderParams.Add(Key, Value);
}

void OpenAPIOverviewApi::ClearHeaderParams()
{
	AdditionalHeaderParams.Reset();
}

bool OpenAPIOverviewApi::IsValid() const
{
	if (Url.IsEmpty())
	{
		UE_LOG(LogOpenAPI, Error, TEXT("OpenAPIOverviewApi: Endpoint Url is not set, request cannot be performed"));
		return false;
	}

	return true;
}

void OpenAPIOverviewApi::SetHttpRetryManager(FHttpRetrySystem::FManager& InRetryManager)
{
	if(RetryManager != &GetHttpRetryManager())
	{
		DefaultRetryManager.Reset();
		RetryManager = &InRetryManager;
	}
}

FHttpRetrySystem::FManager& OpenAPIOverviewApi::GetHttpRetryManager()
{
	checkf(RetryManager, TEXT("OpenAPIOverviewApi: RetryManager is null.  You may have meant to set it with SetHttpRetryManager first, or you may not be using a custom RetryManager at all."))
	return *RetryManager;
}

FHttpRequestRef OpenAPIOverviewApi::CreateHttpRequest(const Request& Request) const
{
	if (!Request.GetRetryParams().IsSet())
	{
		return FHttpModule::Get().CreateRequest();
	}
	else
	{
		if (!RetryManager)
		{
			// Create default retry manager if none was specified
			DefaultRetryManager = MakeUnique<HttpRetryManager>(6, 60);
			RetryManager = DefaultRetryManager.Get();
		}

		const HttpRetryParams& Params = Request.GetRetryParams().GetValue();
		return RetryManager->CreateRequest(Params.RetryLimitCountOverride, Params.RetryTimeoutRelativeSecondsOverride, Params.RetryResponseCodes, Params.RetryVerbs, Params.RetryDomains);
	}
}

void OpenAPIOverviewApi::HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const
{
	InOutResponse.SetHttpResponse(HttpResponse);
	InOutResponse.SetSuccessful(bSucceeded);

	if (bSucceeded && HttpResponse.IsValid())
	{
		InOutResponse.SetHttpResponseCode((EHttpResponseCodes::Type)HttpResponse->GetResponseCode());
		FString ContentType = HttpResponse->GetContentType();
		FString Content;

		if (ContentType.IsEmpty())
		{
			return; // Nothing to parse
		}
		else if (ContentType.StartsWith(TEXT("application/json")) || ContentType.StartsWith("text/json"))
		{
			Content = HttpResponse->GetContentAsString();

			TSharedPtr<FJsonValue> JsonValue;
			auto Reader = TJsonReaderFactory<>::Create(Content);

			if (FJsonSerializer::Deserialize(Reader, JsonValue) && JsonValue.IsValid())
			{
				if (InOutResponse.FromJson(JsonValue))
					return; // Successfully parsed
			}
		}
		else if(ContentType.StartsWith(TEXT("text/plain")))
		{
			Content = HttpResponse->GetContentAsString();
			InOutResponse.SetResponseString(Content);
			return; // Successfully parsed
		}

		// Report the parse error but do not mark the request as unsuccessful. Data could be partial or malformed, but the request succeeded.
		UE_LOG(LogOpenAPI, Error, TEXT("Failed to deserialize Http response content (type:%s):\n%s"), *ContentType , *Content);
		return;
	}

	// By default, assume we failed to establish connection
	InOutResponse.SetHttpResponseCode(EHttpResponseCodes::RequestTimeout);
}

FHttpRequestPtr OpenAPIOverviewApi::OverviewV1HistoricalMarketcapAllAssetsDays(const OverviewV1HistoricalMarketcapAllAssetsDaysRequest& Request, const FOverviewV1HistoricalMarketcapAllAssetsDaysDelegate& Delegate /*= FOverviewV1HistoricalMarketcapAllAssetsDaysDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIOverviewApi::OnOverviewV1HistoricalMarketcapAllAssetsDaysResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIOverviewApi::OnOverviewV1HistoricalMarketcapAllAssetsDaysResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FOverviewV1HistoricalMarketcapAllAssetsDaysDelegate Delegate) const
{
	OverviewV1HistoricalMarketcapAllAssetsDaysResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIOverviewApi::OverviewV1HistoricalMarketcapAllAssetsHours(const OverviewV1HistoricalMarketcapAllAssetsHoursRequest& Request, const FOverviewV1HistoricalMarketcapAllAssetsHoursDelegate& Delegate /*= FOverviewV1HistoricalMarketcapAllAssetsHoursDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIOverviewApi::OnOverviewV1HistoricalMarketcapAllAssetsHoursResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIOverviewApi::OnOverviewV1HistoricalMarketcapAllAssetsHoursResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FOverviewV1HistoricalMarketcapAllAssetsHoursDelegate Delegate) const
{
	OverviewV1HistoricalMarketcapAllAssetsHoursResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIOverviewApi::OverviewV1HistoricalMarketcapFtwAssetsDays(const OverviewV1HistoricalMarketcapFtwAssetsDaysRequest& Request, const FOverviewV1HistoricalMarketcapFtwAssetsDaysDelegate& Delegate /*= FOverviewV1HistoricalMarketcapFtwAssetsDaysDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIOverviewApi::OnOverviewV1HistoricalMarketcapFtwAssetsDaysResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIOverviewApi::OnOverviewV1HistoricalMarketcapFtwAssetsDaysResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FOverviewV1HistoricalMarketcapFtwAssetsDaysDelegate Delegate) const
{
	OverviewV1HistoricalMarketcapFtwAssetsDaysResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIOverviewApi::OverviewV1HistoricalMarketcapFtwAssetsHours(const OverviewV1HistoricalMarketcapFtwAssetsHoursRequest& Request, const FOverviewV1HistoricalMarketcapFtwAssetsHoursDelegate& Delegate /*= FOverviewV1HistoricalMarketcapFtwAssetsHoursDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIOverviewApi::OnOverviewV1HistoricalMarketcapFtwAssetsHoursResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIOverviewApi::OnOverviewV1HistoricalMarketcapFtwAssetsHoursResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FOverviewV1HistoricalMarketcapFtwAssetsHoursDelegate Delegate) const
{
	OverviewV1HistoricalMarketcapFtwAssetsHoursResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIOverviewApi::OverviewV1LatestMarketcapAllTick(const OverviewV1LatestMarketcapAllTickRequest& Request, const FOverviewV1LatestMarketcapAllTickDelegate& Delegate /*= FOverviewV1LatestMarketcapAllTickDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIOverviewApi::OnOverviewV1LatestMarketcapAllTickResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIOverviewApi::OnOverviewV1LatestMarketcapAllTickResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FOverviewV1LatestMarketcapAllTickDelegate Delegate) const
{
	OverviewV1LatestMarketcapAllTickResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIOverviewApi::OverviewV1LatestMarketcapFtwTick(const OverviewV1LatestMarketcapFtwTickRequest& Request, const FOverviewV1LatestMarketcapFtwTickDelegate& Delegate /*= FOverviewV1LatestMarketcapFtwTickDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIOverviewApi::OnOverviewV1LatestMarketcapFtwTickResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIOverviewApi::OnOverviewV1LatestMarketcapFtwTickResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FOverviewV1LatestMarketcapFtwTickDelegate Delegate) const
{
	OverviewV1LatestMarketcapFtwTickResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

}
