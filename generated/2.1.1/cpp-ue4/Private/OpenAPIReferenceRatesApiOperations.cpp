/**
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 * CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 *
 * OpenAPI spec version: 2.1.1
 * Contact: data@cryptocompare.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIReferenceRatesApiOperations.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Dom/JsonObject.h"
#include "Templates/SharedPointer.h"
#include "HttpModule.h"
#include "PlatformHttp.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPIReferenceRatesApi::IndexCcV1HistoricalDaysRequest::MappingPriorityEnum& Value)
{
	switch (Value)
	{
	case OpenAPIReferenceRatesApi::IndexCcV1HistoricalDaysRequest::MappingPriorityEnum::MappedFirst:
		return TEXT("CHECK_MAPPED_FIRST");
	case OpenAPIReferenceRatesApi::IndexCcV1HistoricalDaysRequest::MappingPriorityEnum::UnmappedFirst:
		return TEXT("CHECK_UNMAPPED_FIRST");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIReferenceRatesApi::IndexCcV1HistoricalDaysRequest::MappingPriorityEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIReferenceRatesApi::IndexCcV1HistoricalDaysRequest::EnumToString(const OpenAPIReferenceRatesApi::IndexCcV1HistoricalDaysRequest::MappingPriorityEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIReferenceRatesApi::IndexCcV1HistoricalDaysRequest::MappingPriorityEnum& Value)
{
	static TMap<FString, OpenAPIReferenceRatesApi::IndexCcV1HistoricalDaysRequest::MappingPriorityEnum> StringToEnum = { 
		{ TEXT("CHECK_MAPPED_FIRST"), OpenAPIReferenceRatesApi::IndexCcV1HistoricalDaysRequest::MappingPriorityEnum::MappedFirst },
		{ TEXT("CHECK_UNMAPPED_FIRST"), OpenAPIReferenceRatesApi::IndexCcV1HistoricalDaysRequest::MappingPriorityEnum::UnmappedFirst }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIReferenceRatesApi::IndexCcV1HistoricalDaysRequest::EnumFromString(const FString& EnumAsString, OpenAPIReferenceRatesApi::IndexCcV1HistoricalDaysRequest::MappingPriorityEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline FStringFormatArg ToStringFormatArg(const OpenAPIReferenceRatesApi::IndexCcV1HistoricalDaysRequest::MappingPriorityEnum& Value)
{
	return FStringFormatArg(ToString(Value));
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIReferenceRatesApi::IndexCcV1HistoricalDaysRequest::MappingPriorityEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIReferenceRatesApi::IndexCcV1HistoricalDaysRequest::MappingPriorityEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const OpenAPIReferenceRatesApi::IndexCcV1HistoricalDaysRequest::ResponseFormatEnum& Value)
{
	switch (Value)
	{
	case OpenAPIReferenceRatesApi::IndexCcV1HistoricalDaysRequest::ResponseFormatEnum::Json:
		return TEXT("JSON");
	case OpenAPIReferenceRatesApi::IndexCcV1HistoricalDaysRequest::ResponseFormatEnum::Csv:
		return TEXT("CSV");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIReferenceRatesApi::IndexCcV1HistoricalDaysRequest::ResponseFormatEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIReferenceRatesApi::IndexCcV1HistoricalDaysRequest::EnumToString(const OpenAPIReferenceRatesApi::IndexCcV1HistoricalDaysRequest::ResponseFormatEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIReferenceRatesApi::IndexCcV1HistoricalDaysRequest::ResponseFormatEnum& Value)
{
	static TMap<FString, OpenAPIReferenceRatesApi::IndexCcV1HistoricalDaysRequest::ResponseFormatEnum> StringToEnum = { 
		{ TEXT("JSON"), OpenAPIReferenceRatesApi::IndexCcV1HistoricalDaysRequest::ResponseFormatEnum::Json },
		{ TEXT("CSV"), OpenAPIReferenceRatesApi::IndexCcV1HistoricalDaysRequest::ResponseFormatEnum::Csv }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIReferenceRatesApi::IndexCcV1HistoricalDaysRequest::EnumFromString(const FString& EnumAsString, OpenAPIReferenceRatesApi::IndexCcV1HistoricalDaysRequest::ResponseFormatEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline FStringFormatArg ToStringFormatArg(const OpenAPIReferenceRatesApi::IndexCcV1HistoricalDaysRequest::ResponseFormatEnum& Value)
{
	return FStringFormatArg(ToString(Value));
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIReferenceRatesApi::IndexCcV1HistoricalDaysRequest::ResponseFormatEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIReferenceRatesApi::IndexCcV1HistoricalDaysRequest::ResponseFormatEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

FString OpenAPIReferenceRatesApi::IndexCcV1HistoricalDaysRequest::ComputePath() const
{
	FString Path(TEXT("/index/cc/v1/historical/days"));
	TArray<FString> QueryParams;
	QueryParams.Add(FString(TEXT("market=")) + ToUrlString(Market));
	QueryParams.Add(FString(TEXT("instrument=")) + ToUrlString(Instrument));
	if(Groups.IsSet())
	{
		QueryParams.Add(FString(TEXT("groups=")) + CollectionToUrlString_csv(Groups.GetValue(), TEXT("groups")));
	}
	if(Limit.IsSet())
	{
		QueryParams.Add(FString(TEXT("limit=")) + ToUrlString(Limit.GetValue()));
	}
	if(ToTs.IsSet())
	{
		QueryParams.Add(FString(TEXT("to_ts=")) + ToUrlString(ToTs.GetValue()));
	}
	if(Aggregate.IsSet())
	{
		QueryParams.Add(FString(TEXT("aggregate=")) + ToUrlString(Aggregate.GetValue()));
	}
	if(Fill.IsSet())
	{
		QueryParams.Add(FString(TEXT("fill=")) + ToUrlString(Fill.GetValue()));
	}
	if(MappingPriority.IsSet())
	{
		QueryParams.Add(FString(TEXT("mapping_priority=")) + ToUrlString(MappingPriority.GetValue()));
	}
	if(ResponseFormat.IsSet())
	{
		QueryParams.Add(FString(TEXT("response_format=")) + ToUrlString(ResponseFormat.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPIReferenceRatesApi::IndexCcV1HistoricalDaysRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIReferenceRatesApi::IndexCcV1HistoricalDaysResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Success response from the API."));
		break;
	case 400:
		SetResponseString(TEXT("The 400 error occurs when some of the data sent is malformed."));
		break;
	case 401:
		SetResponseString(TEXT("The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication."));
		break;
	case 403:
		SetResponseString(TEXT("The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication."));
		break;
	case 404:
		SetResponseString(TEXT("The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid"));
		break;
	case 405:
		SetResponseString(TEXT("The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported."));
		break;
	case 429:
		SetResponseString(TEXT("The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits."));
		break;
	case 500:
		SetResponseString(TEXT("The 500 error occurs our API is up but does not know how to / can&#39;t handle the request."));
		break;
	case 502:
		SetResponseString(TEXT("The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer."));
		break;
	case 503:
		SetResponseString(TEXT("The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer."));
		break;
	}
}

bool OpenAPIReferenceRatesApi::IndexCcV1HistoricalDaysResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

inline FString ToString(const OpenAPIReferenceRatesApi::IndexCcV1HistoricalHoursRequest::MappingPriorityEnum& Value)
{
	switch (Value)
	{
	case OpenAPIReferenceRatesApi::IndexCcV1HistoricalHoursRequest::MappingPriorityEnum::MappedFirst:
		return TEXT("CHECK_MAPPED_FIRST");
	case OpenAPIReferenceRatesApi::IndexCcV1HistoricalHoursRequest::MappingPriorityEnum::UnmappedFirst:
		return TEXT("CHECK_UNMAPPED_FIRST");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIReferenceRatesApi::IndexCcV1HistoricalHoursRequest::MappingPriorityEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIReferenceRatesApi::IndexCcV1HistoricalHoursRequest::EnumToString(const OpenAPIReferenceRatesApi::IndexCcV1HistoricalHoursRequest::MappingPriorityEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIReferenceRatesApi::IndexCcV1HistoricalHoursRequest::MappingPriorityEnum& Value)
{
	static TMap<FString, OpenAPIReferenceRatesApi::IndexCcV1HistoricalHoursRequest::MappingPriorityEnum> StringToEnum = { 
		{ TEXT("CHECK_MAPPED_FIRST"), OpenAPIReferenceRatesApi::IndexCcV1HistoricalHoursRequest::MappingPriorityEnum::MappedFirst },
		{ TEXT("CHECK_UNMAPPED_FIRST"), OpenAPIReferenceRatesApi::IndexCcV1HistoricalHoursRequest::MappingPriorityEnum::UnmappedFirst }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIReferenceRatesApi::IndexCcV1HistoricalHoursRequest::EnumFromString(const FString& EnumAsString, OpenAPIReferenceRatesApi::IndexCcV1HistoricalHoursRequest::MappingPriorityEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline FStringFormatArg ToStringFormatArg(const OpenAPIReferenceRatesApi::IndexCcV1HistoricalHoursRequest::MappingPriorityEnum& Value)
{
	return FStringFormatArg(ToString(Value));
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIReferenceRatesApi::IndexCcV1HistoricalHoursRequest::MappingPriorityEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIReferenceRatesApi::IndexCcV1HistoricalHoursRequest::MappingPriorityEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const OpenAPIReferenceRatesApi::IndexCcV1HistoricalHoursRequest::ResponseFormatEnum& Value)
{
	switch (Value)
	{
	case OpenAPIReferenceRatesApi::IndexCcV1HistoricalHoursRequest::ResponseFormatEnum::Json:
		return TEXT("JSON");
	case OpenAPIReferenceRatesApi::IndexCcV1HistoricalHoursRequest::ResponseFormatEnum::Csv:
		return TEXT("CSV");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIReferenceRatesApi::IndexCcV1HistoricalHoursRequest::ResponseFormatEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIReferenceRatesApi::IndexCcV1HistoricalHoursRequest::EnumToString(const OpenAPIReferenceRatesApi::IndexCcV1HistoricalHoursRequest::ResponseFormatEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIReferenceRatesApi::IndexCcV1HistoricalHoursRequest::ResponseFormatEnum& Value)
{
	static TMap<FString, OpenAPIReferenceRatesApi::IndexCcV1HistoricalHoursRequest::ResponseFormatEnum> StringToEnum = { 
		{ TEXT("JSON"), OpenAPIReferenceRatesApi::IndexCcV1HistoricalHoursRequest::ResponseFormatEnum::Json },
		{ TEXT("CSV"), OpenAPIReferenceRatesApi::IndexCcV1HistoricalHoursRequest::ResponseFormatEnum::Csv }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIReferenceRatesApi::IndexCcV1HistoricalHoursRequest::EnumFromString(const FString& EnumAsString, OpenAPIReferenceRatesApi::IndexCcV1HistoricalHoursRequest::ResponseFormatEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline FStringFormatArg ToStringFormatArg(const OpenAPIReferenceRatesApi::IndexCcV1HistoricalHoursRequest::ResponseFormatEnum& Value)
{
	return FStringFormatArg(ToString(Value));
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIReferenceRatesApi::IndexCcV1HistoricalHoursRequest::ResponseFormatEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIReferenceRatesApi::IndexCcV1HistoricalHoursRequest::ResponseFormatEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

FString OpenAPIReferenceRatesApi::IndexCcV1HistoricalHoursRequest::ComputePath() const
{
	FString Path(TEXT("/index/cc/v1/historical/hours"));
	TArray<FString> QueryParams;
	QueryParams.Add(FString(TEXT("market=")) + ToUrlString(Market));
	QueryParams.Add(FString(TEXT("instrument=")) + ToUrlString(Instrument));
	if(Groups.IsSet())
	{
		QueryParams.Add(FString(TEXT("groups=")) + CollectionToUrlString_csv(Groups.GetValue(), TEXT("groups")));
	}
	if(Limit.IsSet())
	{
		QueryParams.Add(FString(TEXT("limit=")) + ToUrlString(Limit.GetValue()));
	}
	if(ToTs.IsSet())
	{
		QueryParams.Add(FString(TEXT("to_ts=")) + ToUrlString(ToTs.GetValue()));
	}
	if(Aggregate.IsSet())
	{
		QueryParams.Add(FString(TEXT("aggregate=")) + ToUrlString(Aggregate.GetValue()));
	}
	if(Fill.IsSet())
	{
		QueryParams.Add(FString(TEXT("fill=")) + ToUrlString(Fill.GetValue()));
	}
	if(MappingPriority.IsSet())
	{
		QueryParams.Add(FString(TEXT("mapping_priority=")) + ToUrlString(MappingPriority.GetValue()));
	}
	if(ResponseFormat.IsSet())
	{
		QueryParams.Add(FString(TEXT("response_format=")) + ToUrlString(ResponseFormat.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPIReferenceRatesApi::IndexCcV1HistoricalHoursRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIReferenceRatesApi::IndexCcV1HistoricalHoursResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Success response from the API."));
		break;
	case 400:
		SetResponseString(TEXT("The 400 error occurs when some of the data sent is malformed."));
		break;
	case 401:
		SetResponseString(TEXT("The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication."));
		break;
	case 403:
		SetResponseString(TEXT("The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication."));
		break;
	case 404:
		SetResponseString(TEXT("The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid"));
		break;
	case 405:
		SetResponseString(TEXT("The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported."));
		break;
	case 429:
		SetResponseString(TEXT("The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits."));
		break;
	case 500:
		SetResponseString(TEXT("The 500 error occurs our API is up but does not know how to / can&#39;t handle the request."));
		break;
	case 502:
		SetResponseString(TEXT("The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer."));
		break;
	case 503:
		SetResponseString(TEXT("The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer."));
		break;
	}
}

bool OpenAPIReferenceRatesApi::IndexCcV1HistoricalHoursResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

inline FString ToString(const OpenAPIReferenceRatesApi::IndexCcV1HistoricalMessagesRequest::MappingPriorityEnum& Value)
{
	switch (Value)
	{
	case OpenAPIReferenceRatesApi::IndexCcV1HistoricalMessagesRequest::MappingPriorityEnum::MappedFirst:
		return TEXT("CHECK_MAPPED_FIRST");
	case OpenAPIReferenceRatesApi::IndexCcV1HistoricalMessagesRequest::MappingPriorityEnum::UnmappedFirst:
		return TEXT("CHECK_UNMAPPED_FIRST");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIReferenceRatesApi::IndexCcV1HistoricalMessagesRequest::MappingPriorityEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIReferenceRatesApi::IndexCcV1HistoricalMessagesRequest::EnumToString(const OpenAPIReferenceRatesApi::IndexCcV1HistoricalMessagesRequest::MappingPriorityEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIReferenceRatesApi::IndexCcV1HistoricalMessagesRequest::MappingPriorityEnum& Value)
{
	static TMap<FString, OpenAPIReferenceRatesApi::IndexCcV1HistoricalMessagesRequest::MappingPriorityEnum> StringToEnum = { 
		{ TEXT("CHECK_MAPPED_FIRST"), OpenAPIReferenceRatesApi::IndexCcV1HistoricalMessagesRequest::MappingPriorityEnum::MappedFirst },
		{ TEXT("CHECK_UNMAPPED_FIRST"), OpenAPIReferenceRatesApi::IndexCcV1HistoricalMessagesRequest::MappingPriorityEnum::UnmappedFirst }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIReferenceRatesApi::IndexCcV1HistoricalMessagesRequest::EnumFromString(const FString& EnumAsString, OpenAPIReferenceRatesApi::IndexCcV1HistoricalMessagesRequest::MappingPriorityEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline FStringFormatArg ToStringFormatArg(const OpenAPIReferenceRatesApi::IndexCcV1HistoricalMessagesRequest::MappingPriorityEnum& Value)
{
	return FStringFormatArg(ToString(Value));
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIReferenceRatesApi::IndexCcV1HistoricalMessagesRequest::MappingPriorityEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIReferenceRatesApi::IndexCcV1HistoricalMessagesRequest::MappingPriorityEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const OpenAPIReferenceRatesApi::IndexCcV1HistoricalMessagesRequest::ResponseFormatEnum& Value)
{
	switch (Value)
	{
	case OpenAPIReferenceRatesApi::IndexCcV1HistoricalMessagesRequest::ResponseFormatEnum::Json:
		return TEXT("JSON");
	case OpenAPIReferenceRatesApi::IndexCcV1HistoricalMessagesRequest::ResponseFormatEnum::Csv:
		return TEXT("CSV");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIReferenceRatesApi::IndexCcV1HistoricalMessagesRequest::ResponseFormatEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIReferenceRatesApi::IndexCcV1HistoricalMessagesRequest::EnumToString(const OpenAPIReferenceRatesApi::IndexCcV1HistoricalMessagesRequest::ResponseFormatEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIReferenceRatesApi::IndexCcV1HistoricalMessagesRequest::ResponseFormatEnum& Value)
{
	static TMap<FString, OpenAPIReferenceRatesApi::IndexCcV1HistoricalMessagesRequest::ResponseFormatEnum> StringToEnum = { 
		{ TEXT("JSON"), OpenAPIReferenceRatesApi::IndexCcV1HistoricalMessagesRequest::ResponseFormatEnum::Json },
		{ TEXT("CSV"), OpenAPIReferenceRatesApi::IndexCcV1HistoricalMessagesRequest::ResponseFormatEnum::Csv }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIReferenceRatesApi::IndexCcV1HistoricalMessagesRequest::EnumFromString(const FString& EnumAsString, OpenAPIReferenceRatesApi::IndexCcV1HistoricalMessagesRequest::ResponseFormatEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline FStringFormatArg ToStringFormatArg(const OpenAPIReferenceRatesApi::IndexCcV1HistoricalMessagesRequest::ResponseFormatEnum& Value)
{
	return FStringFormatArg(ToString(Value));
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIReferenceRatesApi::IndexCcV1HistoricalMessagesRequest::ResponseFormatEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIReferenceRatesApi::IndexCcV1HistoricalMessagesRequest::ResponseFormatEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

FString OpenAPIReferenceRatesApi::IndexCcV1HistoricalMessagesRequest::ComputePath() const
{
	FString Path(TEXT("/index/cc/v1/historical/messages"));
	TArray<FString> QueryParams;
	QueryParams.Add(FString(TEXT("market=")) + ToUrlString(Market));
	QueryParams.Add(FString(TEXT("instrument=")) + ToUrlString(Instrument));
	if(AfterTs.IsSet())
	{
		QueryParams.Add(FString(TEXT("after_ts=")) + ToUrlString(AfterTs.GetValue()));
	}
	if(LastCcseq.IsSet())
	{
		QueryParams.Add(FString(TEXT("last_ccseq=")) + ToUrlString(LastCcseq.GetValue()));
	}
	if(MappingPriority.IsSet())
	{
		QueryParams.Add(FString(TEXT("mapping_priority=")) + ToUrlString(MappingPriority.GetValue()));
	}
	if(Limit.IsSet())
	{
		QueryParams.Add(FString(TEXT("limit=")) + ToUrlString(Limit.GetValue()));
	}
	if(ResponseFormat.IsSet())
	{
		QueryParams.Add(FString(TEXT("response_format=")) + ToUrlString(ResponseFormat.GetValue()));
	}
	if(Return404OnEmptyResponse.IsSet())
	{
		QueryParams.Add(FString(TEXT("return_404_on_empty_response=")) + ToUrlString(Return404OnEmptyResponse.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPIReferenceRatesApi::IndexCcV1HistoricalMessagesRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIReferenceRatesApi::IndexCcV1HistoricalMessagesResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Success response from the API."));
		break;
	case 400:
		SetResponseString(TEXT("The 400 error occurs when some of the data sent is malformed."));
		break;
	case 401:
		SetResponseString(TEXT("The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication."));
		break;
	case 403:
		SetResponseString(TEXT("The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication."));
		break;
	case 404:
		SetResponseString(TEXT("The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid"));
		break;
	case 405:
		SetResponseString(TEXT("The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported."));
		break;
	case 429:
		SetResponseString(TEXT("The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits."));
		break;
	case 500:
		SetResponseString(TEXT("The 500 error occurs our API is up but does not know how to / can&#39;t handle the request."));
		break;
	case 502:
		SetResponseString(TEXT("The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer."));
		break;
	case 503:
		SetResponseString(TEXT("The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer."));
		break;
	}
}

bool OpenAPIReferenceRatesApi::IndexCcV1HistoricalMessagesResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

inline FString ToString(const OpenAPIReferenceRatesApi::IndexCcV1HistoricalMessagesHourRequest::MappingPriorityEnum& Value)
{
	switch (Value)
	{
	case OpenAPIReferenceRatesApi::IndexCcV1HistoricalMessagesHourRequest::MappingPriorityEnum::MappedFirst:
		return TEXT("CHECK_MAPPED_FIRST");
	case OpenAPIReferenceRatesApi::IndexCcV1HistoricalMessagesHourRequest::MappingPriorityEnum::UnmappedFirst:
		return TEXT("CHECK_UNMAPPED_FIRST");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIReferenceRatesApi::IndexCcV1HistoricalMessagesHourRequest::MappingPriorityEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIReferenceRatesApi::IndexCcV1HistoricalMessagesHourRequest::EnumToString(const OpenAPIReferenceRatesApi::IndexCcV1HistoricalMessagesHourRequest::MappingPriorityEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIReferenceRatesApi::IndexCcV1HistoricalMessagesHourRequest::MappingPriorityEnum& Value)
{
	static TMap<FString, OpenAPIReferenceRatesApi::IndexCcV1HistoricalMessagesHourRequest::MappingPriorityEnum> StringToEnum = { 
		{ TEXT("CHECK_MAPPED_FIRST"), OpenAPIReferenceRatesApi::IndexCcV1HistoricalMessagesHourRequest::MappingPriorityEnum::MappedFirst },
		{ TEXT("CHECK_UNMAPPED_FIRST"), OpenAPIReferenceRatesApi::IndexCcV1HistoricalMessagesHourRequest::MappingPriorityEnum::UnmappedFirst }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIReferenceRatesApi::IndexCcV1HistoricalMessagesHourRequest::EnumFromString(const FString& EnumAsString, OpenAPIReferenceRatesApi::IndexCcV1HistoricalMessagesHourRequest::MappingPriorityEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline FStringFormatArg ToStringFormatArg(const OpenAPIReferenceRatesApi::IndexCcV1HistoricalMessagesHourRequest::MappingPriorityEnum& Value)
{
	return FStringFormatArg(ToString(Value));
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIReferenceRatesApi::IndexCcV1HistoricalMessagesHourRequest::MappingPriorityEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIReferenceRatesApi::IndexCcV1HistoricalMessagesHourRequest::MappingPriorityEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const OpenAPIReferenceRatesApi::IndexCcV1HistoricalMessagesHourRequest::ResponseFormatEnum& Value)
{
	switch (Value)
	{
	case OpenAPIReferenceRatesApi::IndexCcV1HistoricalMessagesHourRequest::ResponseFormatEnum::Json:
		return TEXT("JSON");
	case OpenAPIReferenceRatesApi::IndexCcV1HistoricalMessagesHourRequest::ResponseFormatEnum::Csv:
		return TEXT("CSV");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIReferenceRatesApi::IndexCcV1HistoricalMessagesHourRequest::ResponseFormatEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIReferenceRatesApi::IndexCcV1HistoricalMessagesHourRequest::EnumToString(const OpenAPIReferenceRatesApi::IndexCcV1HistoricalMessagesHourRequest::ResponseFormatEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIReferenceRatesApi::IndexCcV1HistoricalMessagesHourRequest::ResponseFormatEnum& Value)
{
	static TMap<FString, OpenAPIReferenceRatesApi::IndexCcV1HistoricalMessagesHourRequest::ResponseFormatEnum> StringToEnum = { 
		{ TEXT("JSON"), OpenAPIReferenceRatesApi::IndexCcV1HistoricalMessagesHourRequest::ResponseFormatEnum::Json },
		{ TEXT("CSV"), OpenAPIReferenceRatesApi::IndexCcV1HistoricalMessagesHourRequest::ResponseFormatEnum::Csv }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIReferenceRatesApi::IndexCcV1HistoricalMessagesHourRequest::EnumFromString(const FString& EnumAsString, OpenAPIReferenceRatesApi::IndexCcV1HistoricalMessagesHourRequest::ResponseFormatEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline FStringFormatArg ToStringFormatArg(const OpenAPIReferenceRatesApi::IndexCcV1HistoricalMessagesHourRequest::ResponseFormatEnum& Value)
{
	return FStringFormatArg(ToString(Value));
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIReferenceRatesApi::IndexCcV1HistoricalMessagesHourRequest::ResponseFormatEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIReferenceRatesApi::IndexCcV1HistoricalMessagesHourRequest::ResponseFormatEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

FString OpenAPIReferenceRatesApi::IndexCcV1HistoricalMessagesHourRequest::ComputePath() const
{
	FString Path(TEXT("/index/cc/v1/historical/messages/hour"));
	TArray<FString> QueryParams;
	QueryParams.Add(FString(TEXT("market=")) + ToUrlString(Market));
	QueryParams.Add(FString(TEXT("instrument=")) + ToUrlString(Instrument));
	if(HourTs.IsSet())
	{
		QueryParams.Add(FString(TEXT("hour_ts=")) + ToUrlString(HourTs.GetValue()));
	}
	if(MappingPriority.IsSet())
	{
		QueryParams.Add(FString(TEXT("mapping_priority=")) + ToUrlString(MappingPriority.GetValue()));
	}
	if(ResponseFormat.IsSet())
	{
		QueryParams.Add(FString(TEXT("response_format=")) + ToUrlString(ResponseFormat.GetValue()));
	}
	if(Return404OnEmptyResponse.IsSet())
	{
		QueryParams.Add(FString(TEXT("return_404_on_empty_response=")) + ToUrlString(Return404OnEmptyResponse.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPIReferenceRatesApi::IndexCcV1HistoricalMessagesHourRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIReferenceRatesApi::IndexCcV1HistoricalMessagesHourResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Success response from the API."));
		break;
	case 400:
		SetResponseString(TEXT("The 400 error occurs when some of the data sent is malformed."));
		break;
	case 401:
		SetResponseString(TEXT("The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication."));
		break;
	case 403:
		SetResponseString(TEXT("The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication."));
		break;
	case 404:
		SetResponseString(TEXT("The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid"));
		break;
	case 405:
		SetResponseString(TEXT("The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported."));
		break;
	case 429:
		SetResponseString(TEXT("The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits."));
		break;
	case 500:
		SetResponseString(TEXT("The 500 error occurs our API is up but does not know how to / can&#39;t handle the request."));
		break;
	case 502:
		SetResponseString(TEXT("The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer."));
		break;
	case 503:
		SetResponseString(TEXT("The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer."));
		break;
	}
}

bool OpenAPIReferenceRatesApi::IndexCcV1HistoricalMessagesHourResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

inline FString ToString(const OpenAPIReferenceRatesApi::IndexCcV1HistoricalMinutesRequest::MappingPriorityEnum& Value)
{
	switch (Value)
	{
	case OpenAPIReferenceRatesApi::IndexCcV1HistoricalMinutesRequest::MappingPriorityEnum::MappedFirst:
		return TEXT("CHECK_MAPPED_FIRST");
	case OpenAPIReferenceRatesApi::IndexCcV1HistoricalMinutesRequest::MappingPriorityEnum::UnmappedFirst:
		return TEXT("CHECK_UNMAPPED_FIRST");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIReferenceRatesApi::IndexCcV1HistoricalMinutesRequest::MappingPriorityEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIReferenceRatesApi::IndexCcV1HistoricalMinutesRequest::EnumToString(const OpenAPIReferenceRatesApi::IndexCcV1HistoricalMinutesRequest::MappingPriorityEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIReferenceRatesApi::IndexCcV1HistoricalMinutesRequest::MappingPriorityEnum& Value)
{
	static TMap<FString, OpenAPIReferenceRatesApi::IndexCcV1HistoricalMinutesRequest::MappingPriorityEnum> StringToEnum = { 
		{ TEXT("CHECK_MAPPED_FIRST"), OpenAPIReferenceRatesApi::IndexCcV1HistoricalMinutesRequest::MappingPriorityEnum::MappedFirst },
		{ TEXT("CHECK_UNMAPPED_FIRST"), OpenAPIReferenceRatesApi::IndexCcV1HistoricalMinutesRequest::MappingPriorityEnum::UnmappedFirst }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIReferenceRatesApi::IndexCcV1HistoricalMinutesRequest::EnumFromString(const FString& EnumAsString, OpenAPIReferenceRatesApi::IndexCcV1HistoricalMinutesRequest::MappingPriorityEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline FStringFormatArg ToStringFormatArg(const OpenAPIReferenceRatesApi::IndexCcV1HistoricalMinutesRequest::MappingPriorityEnum& Value)
{
	return FStringFormatArg(ToString(Value));
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIReferenceRatesApi::IndexCcV1HistoricalMinutesRequest::MappingPriorityEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIReferenceRatesApi::IndexCcV1HistoricalMinutesRequest::MappingPriorityEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const OpenAPIReferenceRatesApi::IndexCcV1HistoricalMinutesRequest::ResponseFormatEnum& Value)
{
	switch (Value)
	{
	case OpenAPIReferenceRatesApi::IndexCcV1HistoricalMinutesRequest::ResponseFormatEnum::Json:
		return TEXT("JSON");
	case OpenAPIReferenceRatesApi::IndexCcV1HistoricalMinutesRequest::ResponseFormatEnum::Csv:
		return TEXT("CSV");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIReferenceRatesApi::IndexCcV1HistoricalMinutesRequest::ResponseFormatEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIReferenceRatesApi::IndexCcV1HistoricalMinutesRequest::EnumToString(const OpenAPIReferenceRatesApi::IndexCcV1HistoricalMinutesRequest::ResponseFormatEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIReferenceRatesApi::IndexCcV1HistoricalMinutesRequest::ResponseFormatEnum& Value)
{
	static TMap<FString, OpenAPIReferenceRatesApi::IndexCcV1HistoricalMinutesRequest::ResponseFormatEnum> StringToEnum = { 
		{ TEXT("JSON"), OpenAPIReferenceRatesApi::IndexCcV1HistoricalMinutesRequest::ResponseFormatEnum::Json },
		{ TEXT("CSV"), OpenAPIReferenceRatesApi::IndexCcV1HistoricalMinutesRequest::ResponseFormatEnum::Csv }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIReferenceRatesApi::IndexCcV1HistoricalMinutesRequest::EnumFromString(const FString& EnumAsString, OpenAPIReferenceRatesApi::IndexCcV1HistoricalMinutesRequest::ResponseFormatEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline FStringFormatArg ToStringFormatArg(const OpenAPIReferenceRatesApi::IndexCcV1HistoricalMinutesRequest::ResponseFormatEnum& Value)
{
	return FStringFormatArg(ToString(Value));
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIReferenceRatesApi::IndexCcV1HistoricalMinutesRequest::ResponseFormatEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIReferenceRatesApi::IndexCcV1HistoricalMinutesRequest::ResponseFormatEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

FString OpenAPIReferenceRatesApi::IndexCcV1HistoricalMinutesRequest::ComputePath() const
{
	FString Path(TEXT("/index/cc/v1/historical/minutes"));
	TArray<FString> QueryParams;
	QueryParams.Add(FString(TEXT("market=")) + ToUrlString(Market));
	QueryParams.Add(FString(TEXT("instrument=")) + ToUrlString(Instrument));
	if(Groups.IsSet())
	{
		QueryParams.Add(FString(TEXT("groups=")) + CollectionToUrlString_csv(Groups.GetValue(), TEXT("groups")));
	}
	if(Limit.IsSet())
	{
		QueryParams.Add(FString(TEXT("limit=")) + ToUrlString(Limit.GetValue()));
	}
	if(ToTs.IsSet())
	{
		QueryParams.Add(FString(TEXT("to_ts=")) + ToUrlString(ToTs.GetValue()));
	}
	if(Aggregate.IsSet())
	{
		QueryParams.Add(FString(TEXT("aggregate=")) + ToUrlString(Aggregate.GetValue()));
	}
	if(Fill.IsSet())
	{
		QueryParams.Add(FString(TEXT("fill=")) + ToUrlString(Fill.GetValue()));
	}
	if(MappingPriority.IsSet())
	{
		QueryParams.Add(FString(TEXT("mapping_priority=")) + ToUrlString(MappingPriority.GetValue()));
	}
	if(ResponseFormat.IsSet())
	{
		QueryParams.Add(FString(TEXT("response_format=")) + ToUrlString(ResponseFormat.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPIReferenceRatesApi::IndexCcV1HistoricalMinutesRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIReferenceRatesApi::IndexCcV1HistoricalMinutesResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Success response from the API."));
		break;
	case 400:
		SetResponseString(TEXT("The 400 error occurs when some of the data sent is malformed."));
		break;
	case 401:
		SetResponseString(TEXT("The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication."));
		break;
	case 403:
		SetResponseString(TEXT("The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication."));
		break;
	case 404:
		SetResponseString(TEXT("The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid"));
		break;
	case 405:
		SetResponseString(TEXT("The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported."));
		break;
	case 429:
		SetResponseString(TEXT("The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits."));
		break;
	case 500:
		SetResponseString(TEXT("The 500 error occurs our API is up but does not know how to / can&#39;t handle the request."));
		break;
	case 502:
		SetResponseString(TEXT("The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer."));
		break;
	case 503:
		SetResponseString(TEXT("The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer."));
		break;
	}
}

bool OpenAPIReferenceRatesApi::IndexCcV1HistoricalMinutesResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

inline FString ToString(const OpenAPIReferenceRatesApi::IndexCcV1LatestInstrumentMetadataRequest::MappingPriorityEnum& Value)
{
	switch (Value)
	{
	case OpenAPIReferenceRatesApi::IndexCcV1LatestInstrumentMetadataRequest::MappingPriorityEnum::MappedFirst:
		return TEXT("CHECK_MAPPED_FIRST");
	case OpenAPIReferenceRatesApi::IndexCcV1LatestInstrumentMetadataRequest::MappingPriorityEnum::UnmappedFirst:
		return TEXT("CHECK_UNMAPPED_FIRST");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIReferenceRatesApi::IndexCcV1LatestInstrumentMetadataRequest::MappingPriorityEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIReferenceRatesApi::IndexCcV1LatestInstrumentMetadataRequest::EnumToString(const OpenAPIReferenceRatesApi::IndexCcV1LatestInstrumentMetadataRequest::MappingPriorityEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIReferenceRatesApi::IndexCcV1LatestInstrumentMetadataRequest::MappingPriorityEnum& Value)
{
	static TMap<FString, OpenAPIReferenceRatesApi::IndexCcV1LatestInstrumentMetadataRequest::MappingPriorityEnum> StringToEnum = { 
		{ TEXT("CHECK_MAPPED_FIRST"), OpenAPIReferenceRatesApi::IndexCcV1LatestInstrumentMetadataRequest::MappingPriorityEnum::MappedFirst },
		{ TEXT("CHECK_UNMAPPED_FIRST"), OpenAPIReferenceRatesApi::IndexCcV1LatestInstrumentMetadataRequest::MappingPriorityEnum::UnmappedFirst }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIReferenceRatesApi::IndexCcV1LatestInstrumentMetadataRequest::EnumFromString(const FString& EnumAsString, OpenAPIReferenceRatesApi::IndexCcV1LatestInstrumentMetadataRequest::MappingPriorityEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline FStringFormatArg ToStringFormatArg(const OpenAPIReferenceRatesApi::IndexCcV1LatestInstrumentMetadataRequest::MappingPriorityEnum& Value)
{
	return FStringFormatArg(ToString(Value));
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIReferenceRatesApi::IndexCcV1LatestInstrumentMetadataRequest::MappingPriorityEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIReferenceRatesApi::IndexCcV1LatestInstrumentMetadataRequest::MappingPriorityEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

FString OpenAPIReferenceRatesApi::IndexCcV1LatestInstrumentMetadataRequest::ComputePath() const
{
	FString Path(TEXT("/index/cc/v1/latest/instrument/metadata"));
	TArray<FString> QueryParams;
	QueryParams.Add(FString(TEXT("market=")) + ToUrlString(Market));
	QueryParams.Add(FString(TEXT("instruments=")) + CollectionToUrlString_csv(Instruments, TEXT("instruments")));
	if(Groups.IsSet())
	{
		QueryParams.Add(FString(TEXT("groups=")) + CollectionToUrlString_csv(Groups.GetValue(), TEXT("groups")));
	}
	if(MappingPriority.IsSet())
	{
		QueryParams.Add(FString(TEXT("mapping_priority=")) + ToUrlString(MappingPriority.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPIReferenceRatesApi::IndexCcV1LatestInstrumentMetadataRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIReferenceRatesApi::IndexCcV1LatestInstrumentMetadataResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Success response from the API."));
		break;
	case 400:
		SetResponseString(TEXT("The 400 error occurs when some of the data sent is malformed."));
		break;
	case 401:
		SetResponseString(TEXT("The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication."));
		break;
	case 403:
		SetResponseString(TEXT("The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication."));
		break;
	case 404:
		SetResponseString(TEXT("The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid"));
		break;
	case 405:
		SetResponseString(TEXT("The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported."));
		break;
	case 429:
		SetResponseString(TEXT("The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits."));
		break;
	case 500:
		SetResponseString(TEXT("The 500 error occurs our API is up but does not know how to / can&#39;t handle the request."));
		break;
	case 502:
		SetResponseString(TEXT("The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer."));
		break;
	case 503:
		SetResponseString(TEXT("The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer."));
		break;
	}
}

bool OpenAPIReferenceRatesApi::IndexCcV1LatestInstrumentMetadataResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

inline FString ToString(const OpenAPIReferenceRatesApi::IndexCcV1LatestTickRequest::MappingPriorityEnum& Value)
{
	switch (Value)
	{
	case OpenAPIReferenceRatesApi::IndexCcV1LatestTickRequest::MappingPriorityEnum::MappedFirst:
		return TEXT("CHECK_MAPPED_FIRST");
	case OpenAPIReferenceRatesApi::IndexCcV1LatestTickRequest::MappingPriorityEnum::UnmappedFirst:
		return TEXT("CHECK_UNMAPPED_FIRST");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIReferenceRatesApi::IndexCcV1LatestTickRequest::MappingPriorityEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIReferenceRatesApi::IndexCcV1LatestTickRequest::EnumToString(const OpenAPIReferenceRatesApi::IndexCcV1LatestTickRequest::MappingPriorityEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIReferenceRatesApi::IndexCcV1LatestTickRequest::MappingPriorityEnum& Value)
{
	static TMap<FString, OpenAPIReferenceRatesApi::IndexCcV1LatestTickRequest::MappingPriorityEnum> StringToEnum = { 
		{ TEXT("CHECK_MAPPED_FIRST"), OpenAPIReferenceRatesApi::IndexCcV1LatestTickRequest::MappingPriorityEnum::MappedFirst },
		{ TEXT("CHECK_UNMAPPED_FIRST"), OpenAPIReferenceRatesApi::IndexCcV1LatestTickRequest::MappingPriorityEnum::UnmappedFirst }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIReferenceRatesApi::IndexCcV1LatestTickRequest::EnumFromString(const FString& EnumAsString, OpenAPIReferenceRatesApi::IndexCcV1LatestTickRequest::MappingPriorityEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline FStringFormatArg ToStringFormatArg(const OpenAPIReferenceRatesApi::IndexCcV1LatestTickRequest::MappingPriorityEnum& Value)
{
	return FStringFormatArg(ToString(Value));
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIReferenceRatesApi::IndexCcV1LatestTickRequest::MappingPriorityEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIReferenceRatesApi::IndexCcV1LatestTickRequest::MappingPriorityEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

FString OpenAPIReferenceRatesApi::IndexCcV1LatestTickRequest::ComputePath() const
{
	FString Path(TEXT("/index/cc/v1/latest/tick"));
	TArray<FString> QueryParams;
	QueryParams.Add(FString(TEXT("market=")) + ToUrlString(Market));
	QueryParams.Add(FString(TEXT("instruments=")) + CollectionToUrlString_csv(Instruments, TEXT("instruments")));
	if(Groups.IsSet())
	{
		QueryParams.Add(FString(TEXT("groups=")) + CollectionToUrlString_csv(Groups.GetValue(), TEXT("groups")));
	}
	if(MappingPriority.IsSet())
	{
		QueryParams.Add(FString(TEXT("mapping_priority=")) + ToUrlString(MappingPriority.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPIReferenceRatesApi::IndexCcV1LatestTickRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIReferenceRatesApi::IndexCcV1LatestTickResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Success response from the API."));
		break;
	case 400:
		SetResponseString(TEXT("The 400 error occurs when some of the data sent is malformed."));
		break;
	case 401:
		SetResponseString(TEXT("The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication."));
		break;
	case 403:
		SetResponseString(TEXT("The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication."));
		break;
	case 404:
		SetResponseString(TEXT("The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid"));
		break;
	case 405:
		SetResponseString(TEXT("The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported."));
		break;
	case 429:
		SetResponseString(TEXT("The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits."));
		break;
	case 500:
		SetResponseString(TEXT("The 500 error occurs our API is up but does not know how to / can&#39;t handle the request."));
		break;
	case 502:
		SetResponseString(TEXT("The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer."));
		break;
	case 503:
		SetResponseString(TEXT("The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer."));
		break;
	}
}

bool OpenAPIReferenceRatesApi::IndexCcV1LatestTickResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIReferenceRatesApi::IndexCcV1MarketsRequest::ComputePath() const
{
	FString Path(TEXT("/index/cc/v1/markets"));
	TArray<FString> QueryParams;
	if(Market.IsSet())
	{
		QueryParams.Add(FString(TEXT("market=")) + ToUrlString(Market.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPIReferenceRatesApi::IndexCcV1MarketsRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIReferenceRatesApi::IndexCcV1MarketsResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Success response from the API."));
		break;
	case 400:
		SetResponseString(TEXT("The 400 error occurs when some of the data sent is malformed."));
		break;
	case 401:
		SetResponseString(TEXT("The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication."));
		break;
	case 403:
		SetResponseString(TEXT("The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication."));
		break;
	case 404:
		SetResponseString(TEXT("The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid"));
		break;
	case 405:
		SetResponseString(TEXT("The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported."));
		break;
	case 429:
		SetResponseString(TEXT("The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits."));
		break;
	case 500:
		SetResponseString(TEXT("The 500 error occurs our API is up but does not know how to / can&#39;t handle the request."));
		break;
	case 502:
		SetResponseString(TEXT("The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer."));
		break;
	case 503:
		SetResponseString(TEXT("The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer."));
		break;
	}
}

bool OpenAPIReferenceRatesApi::IndexCcV1MarketsResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

inline FString ToString(const OpenAPIReferenceRatesApi::IndexCcV1MarketsInstrumentsRequest::InstrumentStatusEnum& Value)
{
	switch (Value)
	{
	case OpenAPIReferenceRatesApi::IndexCcV1MarketsInstrumentsRequest::InstrumentStatusEnum::Active:
		return TEXT("ACTIVE");
	case OpenAPIReferenceRatesApi::IndexCcV1MarketsInstrumentsRequest::InstrumentStatusEnum::Ignored:
		return TEXT("IGNORED");
	case OpenAPIReferenceRatesApi::IndexCcV1MarketsInstrumentsRequest::InstrumentStatusEnum::Retired:
		return TEXT("RETIRED");
	case OpenAPIReferenceRatesApi::IndexCcV1MarketsInstrumentsRequest::InstrumentStatusEnum::Expired:
		return TEXT("EXPIRED");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIReferenceRatesApi::IndexCcV1MarketsInstrumentsRequest::InstrumentStatusEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIReferenceRatesApi::IndexCcV1MarketsInstrumentsRequest::EnumToString(const OpenAPIReferenceRatesApi::IndexCcV1MarketsInstrumentsRequest::InstrumentStatusEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIReferenceRatesApi::IndexCcV1MarketsInstrumentsRequest::InstrumentStatusEnum& Value)
{
	static TMap<FString, OpenAPIReferenceRatesApi::IndexCcV1MarketsInstrumentsRequest::InstrumentStatusEnum> StringToEnum = { 
		{ TEXT("ACTIVE"), OpenAPIReferenceRatesApi::IndexCcV1MarketsInstrumentsRequest::InstrumentStatusEnum::Active },
		{ TEXT("IGNORED"), OpenAPIReferenceRatesApi::IndexCcV1MarketsInstrumentsRequest::InstrumentStatusEnum::Ignored },
		{ TEXT("RETIRED"), OpenAPIReferenceRatesApi::IndexCcV1MarketsInstrumentsRequest::InstrumentStatusEnum::Retired },
		{ TEXT("EXPIRED"), OpenAPIReferenceRatesApi::IndexCcV1MarketsInstrumentsRequest::InstrumentStatusEnum::Expired }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIReferenceRatesApi::IndexCcV1MarketsInstrumentsRequest::EnumFromString(const FString& EnumAsString, OpenAPIReferenceRatesApi::IndexCcV1MarketsInstrumentsRequest::InstrumentStatusEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline FStringFormatArg ToStringFormatArg(const OpenAPIReferenceRatesApi::IndexCcV1MarketsInstrumentsRequest::InstrumentStatusEnum& Value)
{
	return FStringFormatArg(ToString(Value));
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIReferenceRatesApi::IndexCcV1MarketsInstrumentsRequest::InstrumentStatusEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIReferenceRatesApi::IndexCcV1MarketsInstrumentsRequest::InstrumentStatusEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

FString OpenAPIReferenceRatesApi::IndexCcV1MarketsInstrumentsRequest::ComputePath() const
{
	FString Path(TEXT("/index/cc/v1/markets/instruments"));
	TArray<FString> QueryParams;
	if(Market.IsSet())
	{
		QueryParams.Add(FString(TEXT("market=")) + ToUrlString(Market.GetValue()));
	}
	if(Instrument.IsSet())
	{
		QueryParams.Add(FString(TEXT("instrument=")) + ToUrlString(Instrument.GetValue()));
	}
	if(InstrumentStatus.IsSet())
	{
		QueryParams.Add(FString(TEXT("instrument_status=")) + CollectionToUrlString_csv(InstrumentStatus.GetValue(), TEXT("instrument_status")));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPIReferenceRatesApi::IndexCcV1MarketsInstrumentsRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIReferenceRatesApi::IndexCcV1MarketsInstrumentsResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Success response from the API."));
		break;
	case 400:
		SetResponseString(TEXT("The 400 error occurs when some of the data sent is malformed."));
		break;
	case 401:
		SetResponseString(TEXT("The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication."));
		break;
	case 403:
		SetResponseString(TEXT("The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication."));
		break;
	case 404:
		SetResponseString(TEXT("The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid"));
		break;
	case 405:
		SetResponseString(TEXT("The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported."));
		break;
	case 429:
		SetResponseString(TEXT("The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits."));
		break;
	case 500:
		SetResponseString(TEXT("The 500 error occurs our API is up but does not know how to / can&#39;t handle the request."));
		break;
	case 502:
		SetResponseString(TEXT("The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer."));
		break;
	case 503:
		SetResponseString(TEXT("The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer."));
		break;
	}
}

bool OpenAPIReferenceRatesApi::IndexCcV1MarketsInstrumentsResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

inline FString ToString(const OpenAPIReferenceRatesApi::IndexCcV1MarketsInstrumentsUnmappedRequest::InstrumentStatusEnum& Value)
{
	switch (Value)
	{
	case OpenAPIReferenceRatesApi::IndexCcV1MarketsInstrumentsUnmappedRequest::InstrumentStatusEnum::Active:
		return TEXT("ACTIVE");
	case OpenAPIReferenceRatesApi::IndexCcV1MarketsInstrumentsUnmappedRequest::InstrumentStatusEnum::Ignored:
		return TEXT("IGNORED");
	case OpenAPIReferenceRatesApi::IndexCcV1MarketsInstrumentsUnmappedRequest::InstrumentStatusEnum::Retired:
		return TEXT("RETIRED");
	case OpenAPIReferenceRatesApi::IndexCcV1MarketsInstrumentsUnmappedRequest::InstrumentStatusEnum::Expired:
		return TEXT("EXPIRED");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIReferenceRatesApi::IndexCcV1MarketsInstrumentsUnmappedRequest::InstrumentStatusEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIReferenceRatesApi::IndexCcV1MarketsInstrumentsUnmappedRequest::EnumToString(const OpenAPIReferenceRatesApi::IndexCcV1MarketsInstrumentsUnmappedRequest::InstrumentStatusEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIReferenceRatesApi::IndexCcV1MarketsInstrumentsUnmappedRequest::InstrumentStatusEnum& Value)
{
	static TMap<FString, OpenAPIReferenceRatesApi::IndexCcV1MarketsInstrumentsUnmappedRequest::InstrumentStatusEnum> StringToEnum = { 
		{ TEXT("ACTIVE"), OpenAPIReferenceRatesApi::IndexCcV1MarketsInstrumentsUnmappedRequest::InstrumentStatusEnum::Active },
		{ TEXT("IGNORED"), OpenAPIReferenceRatesApi::IndexCcV1MarketsInstrumentsUnmappedRequest::InstrumentStatusEnum::Ignored },
		{ TEXT("RETIRED"), OpenAPIReferenceRatesApi::IndexCcV1MarketsInstrumentsUnmappedRequest::InstrumentStatusEnum::Retired },
		{ TEXT("EXPIRED"), OpenAPIReferenceRatesApi::IndexCcV1MarketsInstrumentsUnmappedRequest::InstrumentStatusEnum::Expired }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIReferenceRatesApi::IndexCcV1MarketsInstrumentsUnmappedRequest::EnumFromString(const FString& EnumAsString, OpenAPIReferenceRatesApi::IndexCcV1MarketsInstrumentsUnmappedRequest::InstrumentStatusEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline FStringFormatArg ToStringFormatArg(const OpenAPIReferenceRatesApi::IndexCcV1MarketsInstrumentsUnmappedRequest::InstrumentStatusEnum& Value)
{
	return FStringFormatArg(ToString(Value));
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIReferenceRatesApi::IndexCcV1MarketsInstrumentsUnmappedRequest::InstrumentStatusEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIReferenceRatesApi::IndexCcV1MarketsInstrumentsUnmappedRequest::InstrumentStatusEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

FString OpenAPIReferenceRatesApi::IndexCcV1MarketsInstrumentsUnmappedRequest::ComputePath() const
{
	FString Path(TEXT("/index/cc/v1/markets/instruments/unmapped"));
	TArray<FString> QueryParams;
	if(Market.IsSet())
	{
		QueryParams.Add(FString(TEXT("market=")) + ToUrlString(Market.GetValue()));
	}
	if(Instrument.IsSet())
	{
		QueryParams.Add(FString(TEXT("instrument=")) + ToUrlString(Instrument.GetValue()));
	}
	if(InstrumentStatus.IsSet())
	{
		QueryParams.Add(FString(TEXT("instrument_status=")) + CollectionToUrlString_csv(InstrumentStatus.GetValue(), TEXT("instrument_status")));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPIReferenceRatesApi::IndexCcV1MarketsInstrumentsUnmappedRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIReferenceRatesApi::IndexCcV1MarketsInstrumentsUnmappedResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Success response from the API."));
		break;
	case 400:
		SetResponseString(TEXT("The 400 error occurs when some of the data sent is malformed."));
		break;
	case 401:
		SetResponseString(TEXT("The 401 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication."));
		break;
	case 403:
		SetResponseString(TEXT("The 403 error occurs when you don&#39;t use a valid API Key on an endpoint that requires authetication."));
		break;
	case 404:
		SetResponseString(TEXT("The 404 error can either be returned when some/all of parameters sent are not found within our system. This could be beacuse parameters like market, instrument, news source, symbol, asset_id etc. are invalid"));
		break;
	case 405:
		SetResponseString(TEXT("The 405 error occurs the user tries to use a http method (GET,POST,PUT etc) that is not supported."));
		break;
	case 429:
		SetResponseString(TEXT("The 429 error occurs when you go over the API Key limit. Rate limits are eforced on a second (resets every second), minute (resers every minute), hour (resets every hour), day (resets every day) and month (resets every month) granularity. You can upgrade your account and access higher rate limits."));
		break;
	case 500:
		SetResponseString(TEXT("The 500 error occurs our API is up but does not know how to / can&#39;t handle the request."));
		break;
	case 502:
		SetResponseString(TEXT("The 502 error occurs when our API is not running. This error is returned by our proxy / load balancer."));
		break;
	case 503:
		SetResponseString(TEXT("The 503 error occurs when there is an issue with one of our data sources and we can&#39;t even return a partial answer."));
		break;
	}
}

bool OpenAPIReferenceRatesApi::IndexCcV1MarketsInstrumentsUnmappedResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

}
