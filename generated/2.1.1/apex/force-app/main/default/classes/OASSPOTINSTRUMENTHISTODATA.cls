/*
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 * CryptoCompare is the world\'s leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: data@cryptocompare.com
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * OASSPOTINSTRUMENTHISTODATA
 */
public class OASSPOTINSTRUMENTHISTODATA {
    /**
     * The mapped from asset (base / symbol/ coin) (e.g. BTC). Only available on instruments that have mapping.
     * @return BASE
     */
    public String BASE { get; set; }

    /**
     * The price of the last trade in this time period. If there were no trades in the time period, the open price will be given.
     * @return CLOSE
     */
    public Integer CLOSE { get; set; }

    /**
     * The price of the first trade in the time period. This is only available when there is at least one trade in the time period.
     * @return FIRST_TRADE_PRICE
     */
    public Integer FIRST_TRADE_PRICE { get; set; }

    /**
     * The timestamp, in seconds, of the first trade in this time perio. This is only available when there is at least one trade in the time period.
     * @return FIRST_TRADE_TIMESTAMP
     */
    public Integer FIRST_TRADE_TIMESTAMP { get; set; }

    /**
     * The highest trade price in the time period. If there were no trades in the time period, the open price will be given.
     * @return HIGH
     */
    public Integer HIGH { get; set; }

    /**
     * The highest value of the trades in the time period. This is only available when there is at least one trade in the time period.
     * @return HIGH_TRADE_PRICE
     */
    public Integer HIGH_TRADE_PRICE { get; set; }

    /**
     * The timestamp, in seconds, of the highest trade in the time period. This is only available when there is at least one trade in the time period.
     * @return HIGH_TRADE_TIMESTAMP
     */
    public Integer HIGH_TRADE_TIMESTAMP { get; set; }

    /**
     * The unmapped instrument ID
     * @return INSTRUMENT
     */
    public String INSTRUMENT { get; set; }

    /**
     * The last trade price in the time period. This is only available when there is at least one trade in the time period.
     * @return LAST_TRADE_PRICE
     */
    public Integer LAST_TRADE_PRICE { get; set; }

    /**
     * The timestamp, in seconds, of the last trade in this time period. This is only available when there is at least one trade in the time period.
     * @return LAST_TRADE_TIMESTAMP
     */
    public Integer LAST_TRADE_TIMESTAMP { get; set; }

    /**
     * The lowest trade price in the time period. If there were no trades in the time period, the open price will be given.
     * @return LOW
     */
    public Integer LOW { get; set; }

    /**
     * The lowest value of the trades in the time period. This is only available when there is at least one trade in the time period.
     * @return LOW_TRADE_PRICE
     */
    public Integer LOW_TRADE_PRICE { get; set; }

    /**
     * The timestamp, in seconds, of the lowest trade in the time period. This is only available when there is at least one trade in the time period.
     * @return LOW_TRADE_TIMESTAMP
     */
    public Integer LOW_TRADE_TIMESTAMP { get; set; }

    /**
     * The instrument ID, as derived from our mapping rules. This takes the form "BASE-QUOTE" (e.g. BTC-USD). Only available on instruments that have been mapped.
     * @return MAPPED_INSTRUMENT
     */
    public String MAPPED_INSTRUMENT { get; set; }

    /**
     * The market / exchange under consideration (e.g. gemini, kraken, coinbase, etc).
     * @return MARKET
     */
    public String MARKET { get; set; }

    /**
     * The open price for the historical period, this is based on the closest trade before the period start.
     * @return OPEN
     */
    public Integer OPEN { get; set; }

    /**
     * The mapped to asset (quote / counter symbol / coin) (e.g. USD). Only available on instruments that have mapping.
     * @return QUOTE
     */
    public String QUOTE { get; set; }

    /**
     * The sum of all the trade volumes in the To asset (quote/counter symbol/coin) for the time period. If there were no trades in the time period, 0 will be returned.
     * @return QUOTE_VOLUME
     */
    public Integer QUOTE_VOLUME { get; set; }

    /**
     * The sum of all the BUY trade volumes in the to asset (quote/counter symbol/coin) for the time period.
     * @return QUOTE_VOLUME_BUY
     */
    public Integer QUOTE_VOLUME_BUY { get; set; }

    /**
     * The sum of all the SELL trade volumes in the To asset (quote/counter symbol/coin) for the time period.
     * @return QUOTE_VOLUME_SELL
     */
    public Integer QUOTE_VOLUME_SELL { get; set; }

    /**
     * The sum of all the UNKNOWN trade volumes in the To asset (quote/counter symbol/coin) for the time period.
     * @return QUOTE_VOLUME_UNKNOWN
     */
    public Integer QUOTE_VOLUME_UNKNOWN { get; set; }

    /**
     * The timestamp in seconds of the beginning of the histo period. For minute it would be every minute at the beginning of the minute, for hour it would be the start of the hour and for daily it is 00:00 GMT.
     * @return TIMESTAMP
     */
    public Integer TIMESTAMP { get; set; }

    /**
     * The total number of trades seen in this time period. If there were no trades in the time period, 0 will be returned.
     * @return TOTAL_TRADES
     */
    public Integer TOTAL_TRADES { get; set; }

    /**
     * The total number of BUY trades seen in this time period. If there were no trades in the time period, 0 will be returned.
     * @return TOTAL_TRADES_BUY
     */
    public Integer TOTAL_TRADES_BUY { get; set; }

    /**
     * The total number of SELL trades seen in this time period. If there were no trades in the time period, 0 will be returned.
     * @return TOTAL_TRADES_SELL
     */
    public Integer TOTAL_TRADES_SELL { get; set; }

    /**
     * The total number of UNKNOWN trades seen in this time period. If there were no trades in the time period, 0 will be returned.
     * @return TOTAL_TRADES_UNKNOWN
     */
    public Integer TOTAL_TRADES_UNKNOWN { get; set; }

    /**
     * The type of the message.
     * @return TYPE
     */
    public String TYPE { get; set; }

    /**
     * The unit of the historical period update: MINUTE for minute, HOUR for hour and DAY for day.
     * @return UNIT
     */
    public String UNIT { get; set; }

    /**
     * The sum of all the trade volumes in the from asset (base symbol / coin) for the time period. If there were no trades in the time period, 0 will be returned.
     * @return VOLUME
     */
    public Integer VOLUME { get; set; }

    /**
     * The sum of all the BUY trade volumes in the from asset (base symbol / coin) for the time period.
     * @return VOLUME_BUY
     */
    public Integer VOLUME_BUY { get; set; }

    /**
     * The sum of all the SELL trade volumes in the from asset (base symbol / coin) for the time period.
     * @return VOLUME_SELL
     */
    public Integer VOLUME_SELL { get; set; }

    /**
     * The sum of all the UNKNOWN trade volumes in the from asset (base symbol / coin) for the time period.
     * @return VOLUME_UNKNOWN
     */
    public Integer VOLUME_UNKNOWN { get; set; }

    public static OASSPOTINSTRUMENTHISTODATA getExample() {
        OASSPOTINSTRUMENTHISTODATA SPOT_INSTRUMENT_HISTO_DATA = new OASSPOTINSTRUMENTHISTODATA();
          SPOT_INSTRUMENT_HISTO_DATA.BASE = '';
          SPOT_INSTRUMENT_HISTO_DATA.CLOSE = 0;
          SPOT_INSTRUMENT_HISTO_DATA.FIRST_TRADE_PRICE = 0;
          SPOT_INSTRUMENT_HISTO_DATA.FIRST_TRADE_TIMESTAMP = 0;
          SPOT_INSTRUMENT_HISTO_DATA.HIGH = 0;
          SPOT_INSTRUMENT_HISTO_DATA.HIGH_TRADE_PRICE = 0;
          SPOT_INSTRUMENT_HISTO_DATA.HIGH_TRADE_TIMESTAMP = 0;
          SPOT_INSTRUMENT_HISTO_DATA.INSTRUMENT = '';
          SPOT_INSTRUMENT_HISTO_DATA.LAST_TRADE_PRICE = 0;
          SPOT_INSTRUMENT_HISTO_DATA.LAST_TRADE_TIMESTAMP = 0;
          SPOT_INSTRUMENT_HISTO_DATA.LOW = 0;
          SPOT_INSTRUMENT_HISTO_DATA.LOW_TRADE_PRICE = 0;
          SPOT_INSTRUMENT_HISTO_DATA.LOW_TRADE_TIMESTAMP = 0;
          SPOT_INSTRUMENT_HISTO_DATA.MAPPED_INSTRUMENT = '';
          SPOT_INSTRUMENT_HISTO_DATA.MARKET = '';
          SPOT_INSTRUMENT_HISTO_DATA.OPEN = 0;
          SPOT_INSTRUMENT_HISTO_DATA.QUOTE = '';
          SPOT_INSTRUMENT_HISTO_DATA.QUOTE_VOLUME = 0;
          SPOT_INSTRUMENT_HISTO_DATA.QUOTE_VOLUME_BUY = 0;
          SPOT_INSTRUMENT_HISTO_DATA.QUOTE_VOLUME_SELL = 0;
          SPOT_INSTRUMENT_HISTO_DATA.QUOTE_VOLUME_UNKNOWN = 0;
          SPOT_INSTRUMENT_HISTO_DATA.TIMESTAMP = 0;
          SPOT_INSTRUMENT_HISTO_DATA.TOTAL_TRADES = 0;
          SPOT_INSTRUMENT_HISTO_DATA.TOTAL_TRADES_BUY = 0;
          SPOT_INSTRUMENT_HISTO_DATA.TOTAL_TRADES_SELL = 0;
          SPOT_INSTRUMENT_HISTO_DATA.TOTAL_TRADES_UNKNOWN = 0;
          SPOT_INSTRUMENT_HISTO_DATA.TYPE = '';
          SPOT_INSTRUMENT_HISTO_DATA.UNIT = '';
          SPOT_INSTRUMENT_HISTO_DATA.VOLUME = 0;
          SPOT_INSTRUMENT_HISTO_DATA.VOLUME_BUY = 0;
          SPOT_INSTRUMENT_HISTO_DATA.VOLUME_SELL = 0;
          SPOT_INSTRUMENT_HISTO_DATA.VOLUME_UNKNOWN = 0;
        return SPOT_INSTRUMENT_HISTO_DATA;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASSPOTINSTRUMENTHISTODATA) {           
            OASSPOTINSTRUMENTHISTODATA SPOT_INSTRUMENT_HISTO_DATA = (OASSPOTINSTRUMENTHISTODATA) obj;
            return this.BASE == SPOT_INSTRUMENT_HISTO_DATA.BASE
                && this.CLOSE == SPOT_INSTRUMENT_HISTO_DATA.CLOSE
                && this.FIRST_TRADE_PRICE == SPOT_INSTRUMENT_HISTO_DATA.FIRST_TRADE_PRICE
                && this.FIRST_TRADE_TIMESTAMP == SPOT_INSTRUMENT_HISTO_DATA.FIRST_TRADE_TIMESTAMP
                && this.HIGH == SPOT_INSTRUMENT_HISTO_DATA.HIGH
                && this.HIGH_TRADE_PRICE == SPOT_INSTRUMENT_HISTO_DATA.HIGH_TRADE_PRICE
                && this.HIGH_TRADE_TIMESTAMP == SPOT_INSTRUMENT_HISTO_DATA.HIGH_TRADE_TIMESTAMP
                && this.INSTRUMENT == SPOT_INSTRUMENT_HISTO_DATA.INSTRUMENT
                && this.LAST_TRADE_PRICE == SPOT_INSTRUMENT_HISTO_DATA.LAST_TRADE_PRICE
                && this.LAST_TRADE_TIMESTAMP == SPOT_INSTRUMENT_HISTO_DATA.LAST_TRADE_TIMESTAMP
                && this.LOW == SPOT_INSTRUMENT_HISTO_DATA.LOW
                && this.LOW_TRADE_PRICE == SPOT_INSTRUMENT_HISTO_DATA.LOW_TRADE_PRICE
                && this.LOW_TRADE_TIMESTAMP == SPOT_INSTRUMENT_HISTO_DATA.LOW_TRADE_TIMESTAMP
                && this.MAPPED_INSTRUMENT == SPOT_INSTRUMENT_HISTO_DATA.MAPPED_INSTRUMENT
                && this.MARKET == SPOT_INSTRUMENT_HISTO_DATA.MARKET
                && this.OPEN == SPOT_INSTRUMENT_HISTO_DATA.OPEN
                && this.QUOTE == SPOT_INSTRUMENT_HISTO_DATA.QUOTE
                && this.QUOTE_VOLUME == SPOT_INSTRUMENT_HISTO_DATA.QUOTE_VOLUME
                && this.QUOTE_VOLUME_BUY == SPOT_INSTRUMENT_HISTO_DATA.QUOTE_VOLUME_BUY
                && this.QUOTE_VOLUME_SELL == SPOT_INSTRUMENT_HISTO_DATA.QUOTE_VOLUME_SELL
                && this.QUOTE_VOLUME_UNKNOWN == SPOT_INSTRUMENT_HISTO_DATA.QUOTE_VOLUME_UNKNOWN
                && this.TIMESTAMP == SPOT_INSTRUMENT_HISTO_DATA.TIMESTAMP
                && this.TOTAL_TRADES == SPOT_INSTRUMENT_HISTO_DATA.TOTAL_TRADES
                && this.TOTAL_TRADES_BUY == SPOT_INSTRUMENT_HISTO_DATA.TOTAL_TRADES_BUY
                && this.TOTAL_TRADES_SELL == SPOT_INSTRUMENT_HISTO_DATA.TOTAL_TRADES_SELL
                && this.TOTAL_TRADES_UNKNOWN == SPOT_INSTRUMENT_HISTO_DATA.TOTAL_TRADES_UNKNOWN
                && this.TYPE == SPOT_INSTRUMENT_HISTO_DATA.TYPE
                && this.UNIT == SPOT_INSTRUMENT_HISTO_DATA.UNIT
                && this.VOLUME == SPOT_INSTRUMENT_HISTO_DATA.VOLUME
                && this.VOLUME_BUY == SPOT_INSTRUMENT_HISTO_DATA.VOLUME_BUY
                && this.VOLUME_SELL == SPOT_INSTRUMENT_HISTO_DATA.VOLUME_SELL
                && this.VOLUME_UNKNOWN == SPOT_INSTRUMENT_HISTO_DATA.VOLUME_UNKNOWN;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (BASE == null ? 0 : System.hashCode(BASE));
        hashCode = (17 * hashCode) + (CLOSE == null ? 0 : System.hashCode(CLOSE));
        hashCode = (17 * hashCode) + (FIRST_TRADE_PRICE == null ? 0 : System.hashCode(FIRST_TRADE_PRICE));
        hashCode = (17 * hashCode) + (FIRST_TRADE_TIMESTAMP == null ? 0 : System.hashCode(FIRST_TRADE_TIMESTAMP));
        hashCode = (17 * hashCode) + (HIGH == null ? 0 : System.hashCode(HIGH));
        hashCode = (17 * hashCode) + (HIGH_TRADE_PRICE == null ? 0 : System.hashCode(HIGH_TRADE_PRICE));
        hashCode = (17 * hashCode) + (HIGH_TRADE_TIMESTAMP == null ? 0 : System.hashCode(HIGH_TRADE_TIMESTAMP));
        hashCode = (17 * hashCode) + (INSTRUMENT == null ? 0 : System.hashCode(INSTRUMENT));
        hashCode = (17 * hashCode) + (LAST_TRADE_PRICE == null ? 0 : System.hashCode(LAST_TRADE_PRICE));
        hashCode = (17 * hashCode) + (LAST_TRADE_TIMESTAMP == null ? 0 : System.hashCode(LAST_TRADE_TIMESTAMP));
        hashCode = (17 * hashCode) + (LOW == null ? 0 : System.hashCode(LOW));
        hashCode = (17 * hashCode) + (LOW_TRADE_PRICE == null ? 0 : System.hashCode(LOW_TRADE_PRICE));
        hashCode = (17 * hashCode) + (LOW_TRADE_TIMESTAMP == null ? 0 : System.hashCode(LOW_TRADE_TIMESTAMP));
        hashCode = (17 * hashCode) + (MAPPED_INSTRUMENT == null ? 0 : System.hashCode(MAPPED_INSTRUMENT));
        hashCode = (17 * hashCode) + (MARKET == null ? 0 : System.hashCode(MARKET));
        hashCode = (17 * hashCode) + (OPEN == null ? 0 : System.hashCode(OPEN));
        hashCode = (17 * hashCode) + (QUOTE == null ? 0 : System.hashCode(QUOTE));
        hashCode = (17 * hashCode) + (QUOTE_VOLUME == null ? 0 : System.hashCode(QUOTE_VOLUME));
        hashCode = (17 * hashCode) + (QUOTE_VOLUME_BUY == null ? 0 : System.hashCode(QUOTE_VOLUME_BUY));
        hashCode = (17 * hashCode) + (QUOTE_VOLUME_SELL == null ? 0 : System.hashCode(QUOTE_VOLUME_SELL));
        hashCode = (17 * hashCode) + (QUOTE_VOLUME_UNKNOWN == null ? 0 : System.hashCode(QUOTE_VOLUME_UNKNOWN));
        hashCode = (17 * hashCode) + (TIMESTAMP == null ? 0 : System.hashCode(TIMESTAMP));
        hashCode = (17 * hashCode) + (TOTAL_TRADES == null ? 0 : System.hashCode(TOTAL_TRADES));
        hashCode = (17 * hashCode) + (TOTAL_TRADES_BUY == null ? 0 : System.hashCode(TOTAL_TRADES_BUY));
        hashCode = (17 * hashCode) + (TOTAL_TRADES_SELL == null ? 0 : System.hashCode(TOTAL_TRADES_SELL));
        hashCode = (17 * hashCode) + (TOTAL_TRADES_UNKNOWN == null ? 0 : System.hashCode(TOTAL_TRADES_UNKNOWN));
        hashCode = (17 * hashCode) + (TYPE == null ? 0 : System.hashCode(TYPE));
        hashCode = (17 * hashCode) + (UNIT == null ? 0 : System.hashCode(UNIT));
        hashCode = (17 * hashCode) + (VOLUME == null ? 0 : System.hashCode(VOLUME));
        hashCode = (17 * hashCode) + (VOLUME_BUY == null ? 0 : System.hashCode(VOLUME_BUY));
        hashCode = (17 * hashCode) + (VOLUME_SELL == null ? 0 : System.hashCode(VOLUME_SELL));
        hashCode = (17 * hashCode) + (VOLUME_UNKNOWN == null ? 0 : System.hashCode(VOLUME_UNKNOWN));
        return hashCode;
    }
}

