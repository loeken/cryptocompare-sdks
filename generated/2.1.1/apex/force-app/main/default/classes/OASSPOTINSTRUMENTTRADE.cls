/*
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 * CryptoCompare is the world\'s leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: data@cryptocompare.com
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * OASSPOTINSTRUMENTTRADE
 */
public class OASSPOTINSTRUMENTTRADE {
    /**
     * The mapped from asset (base / symbol/ coin). Only available on instruments that have been mapped (e.g. BTC).
     * @return BASE
     */
    public String BASE { get; set; }

    /**
     * Our internal sequence number for this trade, this is unique per market / exchange and trading pair. Should always be increasing by 1 for each new trade we discover, not in chronological order.
     * @return CCSEQ
     */
    public Integer CCSEQ { get; set; }

    /**
     * The trade ID as reported by the market / exchange. If the exchange does not provide a trade ID, this will be the timestamp of the trade + a number from 0 - 999. This preserves uniqueness, assuming there would never be more than 999 trades in any given second.
     * @return ID
     */
    public String ID { get; set; }

    /**
     * The unmapped instrument ID as given by the exchange (e.g. BTCUSD, BTC_USD, XBT-ZUSD, BTC-USD).
     * @return INSTRUMENT
     */
    public String INSTRUMENT { get; set; }

    /**
     * The mapped instrument ID, as derived from our mapping rules. This takes the form: "BASE-QUOTE". Only available on instruments that have been mapped (e.g. BTC-USD).
     * @return MAPPED_INSTRUMENT
     */
    public String MAPPED_INSTRUMENT { get; set; }

    /**
     * The market / exchange under consideration (e.g. Coinbase, Kraken, etc.).
     * @return MARKET
     */
    public String MARKET { get; set; }

    /**
     * The price in the to instrument (quote / counter symbol / coin) of the trade. For a BTC-USD trade, this is how much was paid for one BTC in USD. For futures, this will be the price of the contract.
     * @return PRICE
     */
    public Integer PRICE { get; set; }

    /**
     * The volume of the trade, given in the from instrument (base symbol / coin/ contract). For a spot BTC-USD trade, this is how much BTC was traded at the trade price. For a futures BTCUSDPERP, this is the BTC equivalent for the contracts traded.
     * @return QUANTITY
     */
    public Integer QUANTITY { get; set; }

    /**
     * The mapped to asset (quote / counter symbol / coin). Only available on instruments that have been mapped (e.g. USD).
     * @return QUOTE
     */
    public String QUOTE { get; set; }

    /**
     * The volume of the trade, given in the to instrument (quote / counter symbol / coin). This is equivalent to QUANTITY * PRICE. E.g. for a BTC-USD trade, this is how much USD was paid in total for the volume of BTC traded. For futures this is the quote currency equivalent for the contracts traded.
     * @return QUOTE_QUANTITY
     */
    public Integer QUOTE_QUANTITY { get; set; }

    /**
     * The timestamp in seconds that the trade was received. This varies from the trade taking place on the market by a few millisconds to a few seconds depending on the market / exchange API options / rate limits.
     * @return RECEIVED_TIMESTAMP
     */
    public Integer RECEIVED_TIMESTAMP { get; set; }

    /**
     * The nanosecond part of the received timestamp.
     * @return RECEIVED_TIMESTAMP_NS
     */
    public Integer RECEIVED_TIMESTAMP_NS { get; set; }

    /**
     * The side of the trade: SELL, BUY or UNKNOWN. If the exchange / api does not provide a side, "UNKNOWN" will be returned.
     * @return SIDE
     */
    public String SIDE { get; set; }

    /**
     * The source of the trade update: POLLING, STREAMING, GO, BLOB etc.
     * @return SOURCE
     */
    public String SOURCE { get; set; }

    /**
     * The timestamp in seconds as reported by the market / exchange or the received timestamp if the market / exchange does not provide one.
     * @return TIMESTAMP
     */
    public Integer TIMESTAMP { get; set; }

    /**
     * The nanosecond part of the reported timestamp.
     * @return TIMESTAMP_NS
     */
    public Integer TIMESTAMP_NS { get; set; }

    /**
     * The type of the message.
     * @return TYPE
     */
    public String TYPE { get; set; }

    public static OASSPOTINSTRUMENTTRADE getExample() {
        OASSPOTINSTRUMENTTRADE SPOT_INSTRUMENT_TRADE = new OASSPOTINSTRUMENTTRADE();
          SPOT_INSTRUMENT_TRADE.BASE = '';
          SPOT_INSTRUMENT_TRADE.CCSEQ = 0;
          SPOT_INSTRUMENT_TRADE.ID = '';
          SPOT_INSTRUMENT_TRADE.INSTRUMENT = '';
          SPOT_INSTRUMENT_TRADE.MAPPED_INSTRUMENT = '';
          SPOT_INSTRUMENT_TRADE.MARKET = '';
          SPOT_INSTRUMENT_TRADE.PRICE = 0;
          SPOT_INSTRUMENT_TRADE.QUANTITY = 0;
          SPOT_INSTRUMENT_TRADE.QUOTE = '';
          SPOT_INSTRUMENT_TRADE.QUOTE_QUANTITY = 0;
          SPOT_INSTRUMENT_TRADE.RECEIVED_TIMESTAMP = 0;
          SPOT_INSTRUMENT_TRADE.RECEIVED_TIMESTAMP_NS = 0;
          SPOT_INSTRUMENT_TRADE.SIDE = '';
          SPOT_INSTRUMENT_TRADE.SOURCE = '';
          SPOT_INSTRUMENT_TRADE.TIMESTAMP = 0;
          SPOT_INSTRUMENT_TRADE.TIMESTAMP_NS = 0;
          SPOT_INSTRUMENT_TRADE.TYPE = '';
        return SPOT_INSTRUMENT_TRADE;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASSPOTINSTRUMENTTRADE) {           
            OASSPOTINSTRUMENTTRADE SPOT_INSTRUMENT_TRADE = (OASSPOTINSTRUMENTTRADE) obj;
            return this.BASE == SPOT_INSTRUMENT_TRADE.BASE
                && this.CCSEQ == SPOT_INSTRUMENT_TRADE.CCSEQ
                && this.ID == SPOT_INSTRUMENT_TRADE.ID
                && this.INSTRUMENT == SPOT_INSTRUMENT_TRADE.INSTRUMENT
                && this.MAPPED_INSTRUMENT == SPOT_INSTRUMENT_TRADE.MAPPED_INSTRUMENT
                && this.MARKET == SPOT_INSTRUMENT_TRADE.MARKET
                && this.PRICE == SPOT_INSTRUMENT_TRADE.PRICE
                && this.QUANTITY == SPOT_INSTRUMENT_TRADE.QUANTITY
                && this.QUOTE == SPOT_INSTRUMENT_TRADE.QUOTE
                && this.QUOTE_QUANTITY == SPOT_INSTRUMENT_TRADE.QUOTE_QUANTITY
                && this.RECEIVED_TIMESTAMP == SPOT_INSTRUMENT_TRADE.RECEIVED_TIMESTAMP
                && this.RECEIVED_TIMESTAMP_NS == SPOT_INSTRUMENT_TRADE.RECEIVED_TIMESTAMP_NS
                && this.SIDE == SPOT_INSTRUMENT_TRADE.SIDE
                && this.SOURCE == SPOT_INSTRUMENT_TRADE.SOURCE
                && this.TIMESTAMP == SPOT_INSTRUMENT_TRADE.TIMESTAMP
                && this.TIMESTAMP_NS == SPOT_INSTRUMENT_TRADE.TIMESTAMP_NS
                && this.TYPE == SPOT_INSTRUMENT_TRADE.TYPE;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (BASE == null ? 0 : System.hashCode(BASE));
        hashCode = (17 * hashCode) + (CCSEQ == null ? 0 : System.hashCode(CCSEQ));
        hashCode = (17 * hashCode) + (ID == null ? 0 : System.hashCode(ID));
        hashCode = (17 * hashCode) + (INSTRUMENT == null ? 0 : System.hashCode(INSTRUMENT));
        hashCode = (17 * hashCode) + (MAPPED_INSTRUMENT == null ? 0 : System.hashCode(MAPPED_INSTRUMENT));
        hashCode = (17 * hashCode) + (MARKET == null ? 0 : System.hashCode(MARKET));
        hashCode = (17 * hashCode) + (PRICE == null ? 0 : System.hashCode(PRICE));
        hashCode = (17 * hashCode) + (QUANTITY == null ? 0 : System.hashCode(QUANTITY));
        hashCode = (17 * hashCode) + (QUOTE == null ? 0 : System.hashCode(QUOTE));
        hashCode = (17 * hashCode) + (QUOTE_QUANTITY == null ? 0 : System.hashCode(QUOTE_QUANTITY));
        hashCode = (17 * hashCode) + (RECEIVED_TIMESTAMP == null ? 0 : System.hashCode(RECEIVED_TIMESTAMP));
        hashCode = (17 * hashCode) + (RECEIVED_TIMESTAMP_NS == null ? 0 : System.hashCode(RECEIVED_TIMESTAMP_NS));
        hashCode = (17 * hashCode) + (SIDE == null ? 0 : System.hashCode(SIDE));
        hashCode = (17 * hashCode) + (SOURCE == null ? 0 : System.hashCode(SOURCE));
        hashCode = (17 * hashCode) + (TIMESTAMP == null ? 0 : System.hashCode(TIMESTAMP));
        hashCode = (17 * hashCode) + (TIMESTAMP_NS == null ? 0 : System.hashCode(TIMESTAMP_NS));
        hashCode = (17 * hashCode) + (TYPE == null ? 0 : System.hashCode(TYPE));
        return hashCode;
    }
}

