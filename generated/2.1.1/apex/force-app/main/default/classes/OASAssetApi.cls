/*
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 * CryptoCompare is the world\'s leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: data@cryptocompare.com
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

public class OASAssetApi {
    OASClient client;

    public OASAssetApi(OASClient client) {
        this.client = client;
    }

    public OASAssetApi() {
        this.client = new OASClient();
    }

    public OASClient getClient() {
        return this.client;
    }

    /**
     * 
     * 
     * @param address  (required)
     * @param chainSymbol  (required)
     * @param groups  (optional, default to '')
     * @return OASGENERICRESPONSE
     * @throws OAS.ApiException if fails to make API call
     */
    public OASGENERICRESPONSE assetV1DataByAddress(Map<String, Object> params) {
        client.assertNotNull(params.get('address'), 'address');
        client.assertNotNull(params.get('chainSymbol'), 'chainSymbol');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('address', (String) params.get('address')));
        query.addAll(client.makeParam('chain_symbol', (String) params.get('chainSymbol')));
        query.addAll(client.makeParam('groups', (String) params.get('groups')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASGENERICRESPONSE) client.invoke(
            'GET', '/asset/v1/data/by/address', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASGENERICRESPONSE.class
        );
    }
    /**
     * 
     * 
     * @param assetId The asset id you are interested in (required)
     * @param groups  (optional, default to '')
     * @return OASGENERICRESPONSE
     * @throws OAS.ApiException if fails to make API call
     */
    public OASGENERICRESPONSE assetV1DataById(Map<String, Object> params) {
        client.assertNotNull(params.get('assetId'), 'assetId');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('asset_id', (Integer) params.get('assetId')));
        query.addAll(client.makeParam('groups', (String) params.get('groups')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASGENERICRESPONSE) client.invoke(
            'GET', '/asset/v1/data/by/id', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASGENERICRESPONSE.class
        );
    }
    /**
     * 
     * 
     * @param assetSymbol The asset symbol you are interested in (required)
     * @param groups  (optional, default to '')
     * @return OASGENERICRESPONSE
     * @throws OAS.ApiException if fails to make API call
     */
    public OASGENERICRESPONSE assetV1DataBySymbol(Map<String, Object> params) {
        client.assertNotNull(params.get('assetSymbol'), 'assetSymbol');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('asset_symbol', (String) params.get('assetSymbol')));
        query.addAll(client.makeParam('groups', (String) params.get('groups')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASGENERICRESPONSE) client.invoke(
            'GET', '/asset/v1/data/by/symbol', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASGENERICRESPONSE.class
        );
    }
    /**
     * 
     * 
     * @param page The page number for the request to get {page_size} coins at the time. (optional, default to 1)
     * @param pageSize The number of items returned per page (optional, default to 100)
     * @param assetType The asset class/type (optional, default to '')
     * @param sortBy Sort by field ( CREATED_ON,UPDATED_ON,SYMBOL ) (optional, default to CREATED_ON)
     * @param sortDirection Sort direction ( DESC,ASC ) (optional, default to DESC)
     * @param groups  (optional, default to '')
     * @return OASGENERICRESPONSE
     * @throws OAS.ApiException if fails to make API call
     */
    public OASGENERICRESPONSE assetV1TopList(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('page', (Integer) params.get('page')));
        query.addAll(client.makeParam('page_size', (Integer) params.get('pageSize')));
        query.addAll(client.makeParam('asset_type', (String) params.get('assetType')));
        query.addAll(client.makeParam('sort_by', (String) params.get('sortBy')));
        query.addAll(client.makeParam('sort_direction', (String) params.get('sortDirection')));
        query.addAll(client.makeParam('groups', (String) params.get('groups')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASGENERICRESPONSE) client.invoke(
            'GET', '/asset/v1/top/list', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASGENERICRESPONSE.class
        );
    }
}
