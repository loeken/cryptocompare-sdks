=begin
#CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry

#CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.

The version of the OpenAPI document: 2.1.1
Contact: data@cryptocompare.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.3.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class OverviewApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :groups When requesting all market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME
    # @option opts [Integer] :limit The number of data points to return (default to 30)
    # @option opts [Integer] :to_ts Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
    # @option opts [Integer] :aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (default to 1)
    # @option opts [Boolean] :fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (default to true)
    # @option opts [String] :response_format The format of the data response in uppercase. It can be one of the following: JSON,CSV (default to 'JSON')
    # @return [GENERICRESPONSE]
    def overview_v1_historical_marketcap_all_assets_days(opts = {})
      data, _status_code, _headers = overview_v1_historical_marketcap_all_assets_days_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :groups When requesting all market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME
    # @option opts [Integer] :limit The number of data points to return (default to 30)
    # @option opts [Integer] :to_ts Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
    # @option opts [Integer] :aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (default to 1)
    # @option opts [Boolean] :fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (default to true)
    # @option opts [String] :response_format The format of the data response in uppercase. It can be one of the following: JSON,CSV (default to 'JSON')
    # @return [Array<(GENERICRESPONSE, Integer, Hash)>] GENERICRESPONSE data, response status code and response headers
    def overview_v1_historical_marketcap_all_assets_days_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OverviewApi.overview_v1_historical_marketcap_all_assets_days ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 2000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling OverviewApi.overview_v1_historical_marketcap_all_assets_days, must be smaller than or equal to 2000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling OverviewApi.overview_v1_historical_marketcap_all_assets_days, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'aggregate'].nil? && opts[:'aggregate'] > 30
        fail ArgumentError, 'invalid value for "opts[:"aggregate"]" when calling OverviewApi.overview_v1_historical_marketcap_all_assets_days, must be smaller than or equal to 30.'
      end

      if @api_client.config.client_side_validation && !opts[:'aggregate'].nil? && opts[:'aggregate'] < 1
        fail ArgumentError, 'invalid value for "opts[:"aggregate"]" when calling OverviewApi.overview_v1_historical_marketcap_all_assets_days, must be greater than or equal to 1.'
      end

      allowable_values = ["JSON", "CSV"]
      if @api_client.config.client_side_validation && opts[:'response_format'] && !allowable_values.include?(opts[:'response_format'])
        fail ArgumentError, "invalid value for \"response_format\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/overview/v1/historical/marketcap/all/assets/days'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'groups'] = @api_client.build_collection_param(opts[:'groups'], :csv) if !opts[:'groups'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'to_ts'] = opts[:'to_ts'] if !opts[:'to_ts'].nil?
      query_params[:'aggregate'] = opts[:'aggregate'] if !opts[:'aggregate'].nil?
      query_params[:'fill'] = opts[:'fill'] if !opts[:'fill'].nil?
      query_params[:'response_format'] = opts[:'response_format'] if !opts[:'response_format'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GENERICRESPONSE'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OverviewApi.overview_v1_historical_marketcap_all_assets_days",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OverviewApi#overview_v1_historical_marketcap_all_assets_days\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :groups When requesting all market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME
    # @option opts [Integer] :limit The number of data points to return (default to 30)
    # @option opts [Integer] :to_ts Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
    # @option opts [Integer] :aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (default to 1)
    # @option opts [Boolean] :fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (default to true)
    # @option opts [String] :response_format The format of the data response in uppercase. It can be one of the following: JSON,CSV (default to 'JSON')
    # @return [GENERICRESPONSE]
    def overview_v1_historical_marketcap_all_assets_hours(opts = {})
      data, _status_code, _headers = overview_v1_historical_marketcap_all_assets_hours_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :groups When requesting all market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME
    # @option opts [Integer] :limit The number of data points to return (default to 30)
    # @option opts [Integer] :to_ts Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
    # @option opts [Integer] :aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (default to 1)
    # @option opts [Boolean] :fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (default to true)
    # @option opts [String] :response_format The format of the data response in uppercase. It can be one of the following: JSON,CSV (default to 'JSON')
    # @return [Array<(GENERICRESPONSE, Integer, Hash)>] GENERICRESPONSE data, response status code and response headers
    def overview_v1_historical_marketcap_all_assets_hours_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OverviewApi.overview_v1_historical_marketcap_all_assets_hours ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 2000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling OverviewApi.overview_v1_historical_marketcap_all_assets_hours, must be smaller than or equal to 2000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling OverviewApi.overview_v1_historical_marketcap_all_assets_hours, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'aggregate'].nil? && opts[:'aggregate'] > 30
        fail ArgumentError, 'invalid value for "opts[:"aggregate"]" when calling OverviewApi.overview_v1_historical_marketcap_all_assets_hours, must be smaller than or equal to 30.'
      end

      if @api_client.config.client_side_validation && !opts[:'aggregate'].nil? && opts[:'aggregate'] < 1
        fail ArgumentError, 'invalid value for "opts[:"aggregate"]" when calling OverviewApi.overview_v1_historical_marketcap_all_assets_hours, must be greater than or equal to 1.'
      end

      allowable_values = ["JSON", "CSV"]
      if @api_client.config.client_side_validation && opts[:'response_format'] && !allowable_values.include?(opts[:'response_format'])
        fail ArgumentError, "invalid value for \"response_format\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/overview/v1/historical/marketcap/all/assets/hours'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'groups'] = @api_client.build_collection_param(opts[:'groups'], :csv) if !opts[:'groups'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'to_ts'] = opts[:'to_ts'] if !opts[:'to_ts'].nil?
      query_params[:'aggregate'] = opts[:'aggregate'] if !opts[:'aggregate'].nil?
      query_params[:'fill'] = opts[:'fill'] if !opts[:'fill'].nil?
      query_params[:'response_format'] = opts[:'response_format'] if !opts[:'response_format'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GENERICRESPONSE'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OverviewApi.overview_v1_historical_marketcap_all_assets_hours",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OverviewApi#overview_v1_historical_marketcap_all_assets_hours\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :groups When requesting ftw universe market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME
    # @option opts [Integer] :limit The number of data points to return (default to 30)
    # @option opts [Integer] :to_ts Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
    # @option opts [Integer] :aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (default to 1)
    # @option opts [Boolean] :fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (default to true)
    # @option opts [String] :response_format The format of the data response in uppercase. It can be one of the following: JSON,CSV (default to 'JSON')
    # @return [GENERICRESPONSE]
    def overview_v1_historical_marketcap_ftw_assets_days(opts = {})
      data, _status_code, _headers = overview_v1_historical_marketcap_ftw_assets_days_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :groups When requesting ftw universe market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME
    # @option opts [Integer] :limit The number of data points to return (default to 30)
    # @option opts [Integer] :to_ts Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
    # @option opts [Integer] :aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (default to 1)
    # @option opts [Boolean] :fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (default to true)
    # @option opts [String] :response_format The format of the data response in uppercase. It can be one of the following: JSON,CSV (default to 'JSON')
    # @return [Array<(GENERICRESPONSE, Integer, Hash)>] GENERICRESPONSE data, response status code and response headers
    def overview_v1_historical_marketcap_ftw_assets_days_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OverviewApi.overview_v1_historical_marketcap_ftw_assets_days ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 2000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling OverviewApi.overview_v1_historical_marketcap_ftw_assets_days, must be smaller than or equal to 2000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling OverviewApi.overview_v1_historical_marketcap_ftw_assets_days, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'aggregate'].nil? && opts[:'aggregate'] > 30
        fail ArgumentError, 'invalid value for "opts[:"aggregate"]" when calling OverviewApi.overview_v1_historical_marketcap_ftw_assets_days, must be smaller than or equal to 30.'
      end

      if @api_client.config.client_side_validation && !opts[:'aggregate'].nil? && opts[:'aggregate'] < 1
        fail ArgumentError, 'invalid value for "opts[:"aggregate"]" when calling OverviewApi.overview_v1_historical_marketcap_ftw_assets_days, must be greater than or equal to 1.'
      end

      allowable_values = ["JSON", "CSV"]
      if @api_client.config.client_side_validation && opts[:'response_format'] && !allowable_values.include?(opts[:'response_format'])
        fail ArgumentError, "invalid value for \"response_format\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/overview/v1/historical/marketcap/ftw/assets/days'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'groups'] = @api_client.build_collection_param(opts[:'groups'], :csv) if !opts[:'groups'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'to_ts'] = opts[:'to_ts'] if !opts[:'to_ts'].nil?
      query_params[:'aggregate'] = opts[:'aggregate'] if !opts[:'aggregate'].nil?
      query_params[:'fill'] = opts[:'fill'] if !opts[:'fill'].nil?
      query_params[:'response_format'] = opts[:'response_format'] if !opts[:'response_format'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GENERICRESPONSE'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OverviewApi.overview_v1_historical_marketcap_ftw_assets_days",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OverviewApi#overview_v1_historical_marketcap_ftw_assets_days\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :groups When requesting ftw universe market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME
    # @option opts [Integer] :limit The number of data points to return (default to 30)
    # @option opts [Integer] :to_ts Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
    # @option opts [Integer] :aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (default to 1)
    # @option opts [Boolean] :fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (default to true)
    # @option opts [String] :response_format The format of the data response in uppercase. It can be one of the following: JSON,CSV (default to 'JSON')
    # @return [GENERICRESPONSE]
    def overview_v1_historical_marketcap_ftw_assets_hours(opts = {})
      data, _status_code, _headers = overview_v1_historical_marketcap_ftw_assets_hours_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :groups When requesting ftw universe market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME
    # @option opts [Integer] :limit The number of data points to return (default to 30)
    # @option opts [Integer] :to_ts Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
    # @option opts [Integer] :aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (default to 1)
    # @option opts [Boolean] :fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (default to true)
    # @option opts [String] :response_format The format of the data response in uppercase. It can be one of the following: JSON,CSV (default to 'JSON')
    # @return [Array<(GENERICRESPONSE, Integer, Hash)>] GENERICRESPONSE data, response status code and response headers
    def overview_v1_historical_marketcap_ftw_assets_hours_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OverviewApi.overview_v1_historical_marketcap_ftw_assets_hours ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 2000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling OverviewApi.overview_v1_historical_marketcap_ftw_assets_hours, must be smaller than or equal to 2000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling OverviewApi.overview_v1_historical_marketcap_ftw_assets_hours, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'aggregate'].nil? && opts[:'aggregate'] > 30
        fail ArgumentError, 'invalid value for "opts[:"aggregate"]" when calling OverviewApi.overview_v1_historical_marketcap_ftw_assets_hours, must be smaller than or equal to 30.'
      end

      if @api_client.config.client_side_validation && !opts[:'aggregate'].nil? && opts[:'aggregate'] < 1
        fail ArgumentError, 'invalid value for "opts[:"aggregate"]" when calling OverviewApi.overview_v1_historical_marketcap_ftw_assets_hours, must be greater than or equal to 1.'
      end

      allowable_values = ["JSON", "CSV"]
      if @api_client.config.client_side_validation && opts[:'response_format'] && !allowable_values.include?(opts[:'response_format'])
        fail ArgumentError, "invalid value for \"response_format\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/overview/v1/historical/marketcap/ftw/assets/hours'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'groups'] = @api_client.build_collection_param(opts[:'groups'], :csv) if !opts[:'groups'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'to_ts'] = opts[:'to_ts'] if !opts[:'to_ts'].nil?
      query_params[:'aggregate'] = opts[:'aggregate'] if !opts[:'aggregate'].nil?
      query_params[:'fill'] = opts[:'fill'] if !opts[:'fill'].nil?
      query_params[:'response_format'] = opts[:'response_format'] if !opts[:'response_format'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GENERICRESPONSE'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OverviewApi.overview_v1_historical_marketcap_ftw_assets_hours",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OverviewApi#overview_v1_historical_marketcap_ftw_assets_hours\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :groups When requesting all market cap tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,MOVING_24_HOUR
    # @return [GENERICRESPONSE]
    def overview_v1_latest_marketcap_all_tick(opts = {})
      data, _status_code, _headers = overview_v1_latest_marketcap_all_tick_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :groups When requesting all market cap tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,MOVING_24_HOUR
    # @return [Array<(GENERICRESPONSE, Integer, Hash)>] GENERICRESPONSE data, response status code and response headers
    def overview_v1_latest_marketcap_all_tick_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OverviewApi.overview_v1_latest_marketcap_all_tick ...'
      end
      # resource path
      local_var_path = '/overview/v1/latest/marketcap/all/tick'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'groups'] = @api_client.build_collection_param(opts[:'groups'], :csv) if !opts[:'groups'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GENERICRESPONSE'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OverviewApi.overview_v1_latest_marketcap_all_tick",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OverviewApi#overview_v1_latest_marketcap_all_tick\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :groups When requesting ftw universe market cap tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,MOVING_24_HOUR
    # @return [GENERICRESPONSE]
    def overview_v1_latest_marketcap_ftw_tick(opts = {})
      data, _status_code, _headers = overview_v1_latest_marketcap_ftw_tick_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :groups When requesting ftw universe market cap tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,MOVING_24_HOUR
    # @return [Array<(GENERICRESPONSE, Integer, Hash)>] GENERICRESPONSE data, response status code and response headers
    def overview_v1_latest_marketcap_ftw_tick_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OverviewApi.overview_v1_latest_marketcap_ftw_tick ...'
      end
      # resource path
      local_var_path = '/overview/v1/latest/marketcap/ftw/tick'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'groups'] = @api_client.build_collection_param(opts[:'groups'], :csv) if !opts[:'groups'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GENERICRESPONSE'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OverviewApi.overview_v1_latest_marketcap_ftw_tick",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OverviewApi#overview_v1_latest_marketcap_ftw_tick\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
