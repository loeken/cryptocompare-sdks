=begin
#CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry

#CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.

The version of the OpenAPI document: 2.1.1
Contact: data@cryptocompare.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.3.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class AssetApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # @param address [String] 
    # @param chain_symbol [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :groups  (default to '')
    # @return [GENERICRESPONSE]
    def asset_v1_data_by_address(address, chain_symbol, opts = {})
      data, _status_code, _headers = asset_v1_data_by_address_with_http_info(address, chain_symbol, opts)
      data
    end

    # @param address [String] 
    # @param chain_symbol [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :groups  (default to '')
    # @return [Array<(GENERICRESPONSE, Integer, Hash)>] GENERICRESPONSE data, response status code and response headers
    def asset_v1_data_by_address_with_http_info(address, chain_symbol, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetApi.asset_v1_data_by_address ...'
      end
      # verify the required parameter 'address' is set
      if @api_client.config.client_side_validation && address.nil?
        fail ArgumentError, "Missing the required parameter 'address' when calling AssetApi.asset_v1_data_by_address"
      end
      if @api_client.config.client_side_validation && address.to_s.length > 500
        fail ArgumentError, 'invalid value for "address" when calling AssetApi.asset_v1_data_by_address, the character length must be smaller than or equal to 500.'
      end

      if @api_client.config.client_side_validation && address.to_s.length < 1
        fail ArgumentError, 'invalid value for "address" when calling AssetApi.asset_v1_data_by_address, the character length must be great than or equal to 1.'
      end

      # verify the required parameter 'chain_symbol' is set
      if @api_client.config.client_side_validation && chain_symbol.nil?
        fail ArgumentError, "Missing the required parameter 'chain_symbol' when calling AssetApi.asset_v1_data_by_address"
      end
      if @api_client.config.client_side_validation && chain_symbol.to_s.length > 100
        fail ArgumentError, 'invalid value for "chain_symbol" when calling AssetApi.asset_v1_data_by_address, the character length must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && chain_symbol.to_s.length < 1
        fail ArgumentError, 'invalid value for "chain_symbol" when calling AssetApi.asset_v1_data_by_address, the character length must be great than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'groups'].nil? && opts[:'groups'].to_s.length > 2000
        fail ArgumentError, 'invalid value for "opts[:"groups"]" when calling AssetApi.asset_v1_data_by_address, the character length must be smaller than or equal to 2000.'
      end

      if @api_client.config.client_side_validation && !opts[:'groups'].nil? && opts[:'groups'].to_s.length < 0
        fail ArgumentError, 'invalid value for "opts[:"groups"]" when calling AssetApi.asset_v1_data_by_address, the character length must be great than or equal to 0.'
      end

      # resource path
      local_var_path = '/asset/v1/data/by/address'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'address'] = address
      query_params[:'chain_symbol'] = chain_symbol
      query_params[:'groups'] = opts[:'groups'] if !opts[:'groups'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GENERICRESPONSE'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AssetApi.asset_v1_data_by_address",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetApi#asset_v1_data_by_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param asset_id [Integer] The asset id you are interested in
    # @param [Hash] opts the optional parameters
    # @option opts [String] :groups  (default to '')
    # @return [GENERICRESPONSE]
    def asset_v1_data_by_id(asset_id, opts = {})
      data, _status_code, _headers = asset_v1_data_by_id_with_http_info(asset_id, opts)
      data
    end

    # @param asset_id [Integer] The asset id you are interested in
    # @param [Hash] opts the optional parameters
    # @option opts [String] :groups  (default to '')
    # @return [Array<(GENERICRESPONSE, Integer, Hash)>] GENERICRESPONSE data, response status code and response headers
    def asset_v1_data_by_id_with_http_info(asset_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetApi.asset_v1_data_by_id ...'
      end
      # verify the required parameter 'asset_id' is set
      if @api_client.config.client_side_validation && asset_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_id' when calling AssetApi.asset_v1_data_by_id"
      end
      if @api_client.config.client_side_validation && !opts[:'groups'].nil? && opts[:'groups'].to_s.length > 2000
        fail ArgumentError, 'invalid value for "opts[:"groups"]" when calling AssetApi.asset_v1_data_by_id, the character length must be smaller than or equal to 2000.'
      end

      if @api_client.config.client_side_validation && !opts[:'groups'].nil? && opts[:'groups'].to_s.length < 0
        fail ArgumentError, 'invalid value for "opts[:"groups"]" when calling AssetApi.asset_v1_data_by_id, the character length must be great than or equal to 0.'
      end

      # resource path
      local_var_path = '/asset/v1/data/by/id'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'asset_id'] = asset_id
      query_params[:'groups'] = opts[:'groups'] if !opts[:'groups'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GENERICRESPONSE'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AssetApi.asset_v1_data_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetApi#asset_v1_data_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param asset_symbol [String] The asset symbol you are interested in
    # @param [Hash] opts the optional parameters
    # @option opts [String] :groups  (default to '')
    # @return [GENERICRESPONSE]
    def asset_v1_data_by_symbol(asset_symbol, opts = {})
      data, _status_code, _headers = asset_v1_data_by_symbol_with_http_info(asset_symbol, opts)
      data
    end

    # @param asset_symbol [String] The asset symbol you are interested in
    # @param [Hash] opts the optional parameters
    # @option opts [String] :groups  (default to '')
    # @return [Array<(GENERICRESPONSE, Integer, Hash)>] GENERICRESPONSE data, response status code and response headers
    def asset_v1_data_by_symbol_with_http_info(asset_symbol, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetApi.asset_v1_data_by_symbol ...'
      end
      # verify the required parameter 'asset_symbol' is set
      if @api_client.config.client_side_validation && asset_symbol.nil?
        fail ArgumentError, "Missing the required parameter 'asset_symbol' when calling AssetApi.asset_v1_data_by_symbol"
      end
      if @api_client.config.client_side_validation && asset_symbol.to_s.length > 100
        fail ArgumentError, 'invalid value for "asset_symbol" when calling AssetApi.asset_v1_data_by_symbol, the character length must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && asset_symbol.to_s.length < 1
        fail ArgumentError, 'invalid value for "asset_symbol" when calling AssetApi.asset_v1_data_by_symbol, the character length must be great than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'groups'].nil? && opts[:'groups'].to_s.length > 2000
        fail ArgumentError, 'invalid value for "opts[:"groups"]" when calling AssetApi.asset_v1_data_by_symbol, the character length must be smaller than or equal to 2000.'
      end

      if @api_client.config.client_side_validation && !opts[:'groups'].nil? && opts[:'groups'].to_s.length < 0
        fail ArgumentError, 'invalid value for "opts[:"groups"]" when calling AssetApi.asset_v1_data_by_symbol, the character length must be great than or equal to 0.'
      end

      # resource path
      local_var_path = '/asset/v1/data/by/symbol'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'asset_symbol'] = asset_symbol
      query_params[:'groups'] = opts[:'groups'] if !opts[:'groups'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GENERICRESPONSE'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AssetApi.asset_v1_data_by_symbol",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetApi#asset_v1_data_by_symbol\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page number for the request to get {page_size} coins at the time. (default to 1)
    # @option opts [Integer] :page_size The number of items returned per page (default to 100)
    # @option opts [String] :asset_type The asset class/type (default to '')
    # @option opts [String] :sort_by Sort by field ( CREATED_ON,UPDATED_ON,SYMBOL ) (default to 'CREATED_ON')
    # @option opts [String] :sort_direction Sort direction ( DESC,ASC ) (default to 'DESC')
    # @option opts [String] :groups  (default to '')
    # @return [GENERICRESPONSE]
    def asset_v1_top_list(opts = {})
      data, _status_code, _headers = asset_v1_top_list_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page number for the request to get {page_size} coins at the time. (default to 1)
    # @option opts [Integer] :page_size The number of items returned per page (default to 100)
    # @option opts [String] :asset_type The asset class/type (default to '')
    # @option opts [String] :sort_by Sort by field ( CREATED_ON,UPDATED_ON,SYMBOL ) (default to 'CREATED_ON')
    # @option opts [String] :sort_direction Sort direction ( DESC,ASC ) (default to 'DESC')
    # @option opts [String] :groups  (default to '')
    # @return [Array<(GENERICRESPONSE, Integer, Hash)>] GENERICRESPONSE data, response status code and response headers
    def asset_v1_top_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetApi.asset_v1_top_list ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] > 100
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AssetApi.asset_v1_top_list, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AssetApi.asset_v1_top_list, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 100
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AssetApi.asset_v1_top_list, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 10
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AssetApi.asset_v1_top_list, must be greater than or equal to 10.'
      end

      allowable_values = ["CREATED_ON", "UPDATED_ON", "SYMBOL"]
      if @api_client.config.client_side_validation && opts[:'sort_by'] && !allowable_values.include?(opts[:'sort_by'])
        fail ArgumentError, "invalid value for \"sort_by\", must be one of #{allowable_values}"
      end
      allowable_values = ["DESC", "ASC"]
      if @api_client.config.client_side_validation && opts[:'sort_direction'] && !allowable_values.include?(opts[:'sort_direction'])
        fail ArgumentError, "invalid value for \"sort_direction\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'groups'].nil? && opts[:'groups'].to_s.length > 2000
        fail ArgumentError, 'invalid value for "opts[:"groups"]" when calling AssetApi.asset_v1_top_list, the character length must be smaller than or equal to 2000.'
      end

      if @api_client.config.client_side_validation && !opts[:'groups'].nil? && opts[:'groups'].to_s.length < 0
        fail ArgumentError, 'invalid value for "opts[:"groups"]" when calling AssetApi.asset_v1_top_list, the character length must be great than or equal to 0.'
      end

      # resource path
      local_var_path = '/asset/v1/top/list'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'asset_type'] = opts[:'asset_type'] if !opts[:'asset_type'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'sort_direction'] = opts[:'sort_direction'] if !opts[:'sort_direction'].nil?
      query_params[:'groups'] = opts[:'groups'] if !opts[:'groups'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GENERICRESPONSE'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AssetApi.asset_v1_top_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetApi#asset_v1_top_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
