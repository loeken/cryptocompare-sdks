=begin
#CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry

#CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.

The version of the OpenAPI document: 2.1.1
Contact: data@cryptocompare.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.3.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class ReferenceRatesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # @param market [String] The exchange to obtain data from
    # @param instrument [String] The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME
    # @option opts [Integer] :limit The number of data points to return (default to 30)
    # @option opts [Integer] :to_ts Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
    # @option opts [Integer] :aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (default to 1)
    # @option opts [Boolean] :fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (default to true)
    # @option opts [String] :mapping_priority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (default to 'CHECK_MAPPED_FIRST')
    # @option opts [String] :response_format The format of the data response in uppercase. It can be one of the following: JSON,CSV (default to 'JSON')
    # @return [GENERICRESPONSE]
    def index_cc_v1_historical_days(market, instrument, opts = {})
      data, _status_code, _headers = index_cc_v1_historical_days_with_http_info(market, instrument, opts)
      data
    end

    # @param market [String] The exchange to obtain data from
    # @param instrument [String] The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME
    # @option opts [Integer] :limit The number of data points to return (default to 30)
    # @option opts [Integer] :to_ts Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
    # @option opts [Integer] :aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (default to 1)
    # @option opts [Boolean] :fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (default to true)
    # @option opts [String] :mapping_priority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (default to 'CHECK_MAPPED_FIRST')
    # @option opts [String] :response_format The format of the data response in uppercase. It can be one of the following: JSON,CSV (default to 'JSON')
    # @return [Array<(GENERICRESPONSE, Integer, Hash)>] GENERICRESPONSE data, response status code and response headers
    def index_cc_v1_historical_days_with_http_info(market, instrument, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReferenceRatesApi.index_cc_v1_historical_days ...'
      end
      # verify the required parameter 'market' is set
      if @api_client.config.client_side_validation && market.nil?
        fail ArgumentError, "Missing the required parameter 'market' when calling ReferenceRatesApi.index_cc_v1_historical_days"
      end
      if @api_client.config.client_side_validation && market.to_s.length > 30
        fail ArgumentError, 'invalid value for "market" when calling ReferenceRatesApi.index_cc_v1_historical_days, the character length must be smaller than or equal to 30.'
      end

      if @api_client.config.client_side_validation && market.to_s.length < 2
        fail ArgumentError, 'invalid value for "market" when calling ReferenceRatesApi.index_cc_v1_historical_days, the character length must be great than or equal to 2.'
      end

      # verify the required parameter 'instrument' is set
      if @api_client.config.client_side_validation && instrument.nil?
        fail ArgumentError, "Missing the required parameter 'instrument' when calling ReferenceRatesApi.index_cc_v1_historical_days"
      end
      if @api_client.config.client_side_validation && instrument.to_s.length > 500
        fail ArgumentError, 'invalid value for "instrument" when calling ReferenceRatesApi.index_cc_v1_historical_days, the character length must be smaller than or equal to 500.'
      end

      if @api_client.config.client_side_validation && instrument.to_s.length < 1
        fail ArgumentError, 'invalid value for "instrument" when calling ReferenceRatesApi.index_cc_v1_historical_days, the character length must be great than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 5000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ReferenceRatesApi.index_cc_v1_historical_days, must be smaller than or equal to 5000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ReferenceRatesApi.index_cc_v1_historical_days, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'aggregate'].nil? && opts[:'aggregate'] > 30
        fail ArgumentError, 'invalid value for "opts[:"aggregate"]" when calling ReferenceRatesApi.index_cc_v1_historical_days, must be smaller than or equal to 30.'
      end

      if @api_client.config.client_side_validation && !opts[:'aggregate'].nil? && opts[:'aggregate'] < 1
        fail ArgumentError, 'invalid value for "opts[:"aggregate"]" when calling ReferenceRatesApi.index_cc_v1_historical_days, must be greater than or equal to 1.'
      end

      allowable_values = ["CHECK_MAPPED_FIRST", "CHECK_UNMAPPED_FIRST"]
      if @api_client.config.client_side_validation && opts[:'mapping_priority'] && !allowable_values.include?(opts[:'mapping_priority'])
        fail ArgumentError, "invalid value for \"mapping_priority\", must be one of #{allowable_values}"
      end
      allowable_values = ["JSON", "CSV"]
      if @api_client.config.client_side_validation && opts[:'response_format'] && !allowable_values.include?(opts[:'response_format'])
        fail ArgumentError, "invalid value for \"response_format\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/index/cc/v1/historical/days'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'market'] = market
      query_params[:'instrument'] = instrument
      query_params[:'groups'] = @api_client.build_collection_param(opts[:'groups'], :csv) if !opts[:'groups'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'to_ts'] = opts[:'to_ts'] if !opts[:'to_ts'].nil?
      query_params[:'aggregate'] = opts[:'aggregate'] if !opts[:'aggregate'].nil?
      query_params[:'fill'] = opts[:'fill'] if !opts[:'fill'].nil?
      query_params[:'mapping_priority'] = opts[:'mapping_priority'] if !opts[:'mapping_priority'].nil?
      query_params[:'response_format'] = opts[:'response_format'] if !opts[:'response_format'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GENERICRESPONSE'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ReferenceRatesApi.index_cc_v1_historical_days",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReferenceRatesApi#index_cc_v1_historical_days\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param market [String] The exchange to obtain data from
    # @param instrument [String] The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME
    # @option opts [Integer] :limit The number of data points to return (default to 30)
    # @option opts [Integer] :to_ts Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
    # @option opts [Integer] :aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (default to 1)
    # @option opts [Boolean] :fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (default to true)
    # @option opts [String] :mapping_priority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (default to 'CHECK_MAPPED_FIRST')
    # @option opts [String] :response_format The format of the data response in uppercase. It can be one of the following: JSON,CSV (default to 'JSON')
    # @return [GENERICRESPONSE]
    def index_cc_v1_historical_hours(market, instrument, opts = {})
      data, _status_code, _headers = index_cc_v1_historical_hours_with_http_info(market, instrument, opts)
      data
    end

    # @param market [String] The exchange to obtain data from
    # @param instrument [String] The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME
    # @option opts [Integer] :limit The number of data points to return (default to 30)
    # @option opts [Integer] :to_ts Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
    # @option opts [Integer] :aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (default to 1)
    # @option opts [Boolean] :fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (default to true)
    # @option opts [String] :mapping_priority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (default to 'CHECK_MAPPED_FIRST')
    # @option opts [String] :response_format The format of the data response in uppercase. It can be one of the following: JSON,CSV (default to 'JSON')
    # @return [Array<(GENERICRESPONSE, Integer, Hash)>] GENERICRESPONSE data, response status code and response headers
    def index_cc_v1_historical_hours_with_http_info(market, instrument, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReferenceRatesApi.index_cc_v1_historical_hours ...'
      end
      # verify the required parameter 'market' is set
      if @api_client.config.client_side_validation && market.nil?
        fail ArgumentError, "Missing the required parameter 'market' when calling ReferenceRatesApi.index_cc_v1_historical_hours"
      end
      if @api_client.config.client_side_validation && market.to_s.length > 30
        fail ArgumentError, 'invalid value for "market" when calling ReferenceRatesApi.index_cc_v1_historical_hours, the character length must be smaller than or equal to 30.'
      end

      if @api_client.config.client_side_validation && market.to_s.length < 2
        fail ArgumentError, 'invalid value for "market" when calling ReferenceRatesApi.index_cc_v1_historical_hours, the character length must be great than or equal to 2.'
      end

      # verify the required parameter 'instrument' is set
      if @api_client.config.client_side_validation && instrument.nil?
        fail ArgumentError, "Missing the required parameter 'instrument' when calling ReferenceRatesApi.index_cc_v1_historical_hours"
      end
      if @api_client.config.client_side_validation && instrument.to_s.length > 500
        fail ArgumentError, 'invalid value for "instrument" when calling ReferenceRatesApi.index_cc_v1_historical_hours, the character length must be smaller than or equal to 500.'
      end

      if @api_client.config.client_side_validation && instrument.to_s.length < 1
        fail ArgumentError, 'invalid value for "instrument" when calling ReferenceRatesApi.index_cc_v1_historical_hours, the character length must be great than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 2000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ReferenceRatesApi.index_cc_v1_historical_hours, must be smaller than or equal to 2000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ReferenceRatesApi.index_cc_v1_historical_hours, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'aggregate'].nil? && opts[:'aggregate'] > 30
        fail ArgumentError, 'invalid value for "opts[:"aggregate"]" when calling ReferenceRatesApi.index_cc_v1_historical_hours, must be smaller than or equal to 30.'
      end

      if @api_client.config.client_side_validation && !opts[:'aggregate'].nil? && opts[:'aggregate'] < 1
        fail ArgumentError, 'invalid value for "opts[:"aggregate"]" when calling ReferenceRatesApi.index_cc_v1_historical_hours, must be greater than or equal to 1.'
      end

      allowable_values = ["CHECK_MAPPED_FIRST", "CHECK_UNMAPPED_FIRST"]
      if @api_client.config.client_side_validation && opts[:'mapping_priority'] && !allowable_values.include?(opts[:'mapping_priority'])
        fail ArgumentError, "invalid value for \"mapping_priority\", must be one of #{allowable_values}"
      end
      allowable_values = ["JSON", "CSV"]
      if @api_client.config.client_side_validation && opts[:'response_format'] && !allowable_values.include?(opts[:'response_format'])
        fail ArgumentError, "invalid value for \"response_format\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/index/cc/v1/historical/hours'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'market'] = market
      query_params[:'instrument'] = instrument
      query_params[:'groups'] = @api_client.build_collection_param(opts[:'groups'], :csv) if !opts[:'groups'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'to_ts'] = opts[:'to_ts'] if !opts[:'to_ts'].nil?
      query_params[:'aggregate'] = opts[:'aggregate'] if !opts[:'aggregate'].nil?
      query_params[:'fill'] = opts[:'fill'] if !opts[:'fill'].nil?
      query_params[:'mapping_priority'] = opts[:'mapping_priority'] if !opts[:'mapping_priority'].nil?
      query_params[:'response_format'] = opts[:'response_format'] if !opts[:'response_format'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GENERICRESPONSE'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ReferenceRatesApi.index_cc_v1_historical_hours",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReferenceRatesApi#index_cc_v1_historical_hours\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param market [String] The exchange to obtain data from
    # @param instrument [String] The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :after_ts Unix timestamp in seconds of the earliest index message in the response
    # @option opts [Integer] :last_ccseq The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request. (default to 0)
    # @option opts [String] :mapping_priority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (default to 'CHECK_MAPPED_FIRST')
    # @option opts [Integer] :limit The maximum number of index messages to return (default to 100)
    # @option opts [String] :response_format The format of the data response in uppercase. It can be one of the following: JSON,CSV (default to 'JSON')
    # @option opts [Boolean] :return_404_on_empty_response If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (default to false)
    # @return [GENERICRESPONSE]
    def index_cc_v1_historical_messages(market, instrument, opts = {})
      data, _status_code, _headers = index_cc_v1_historical_messages_with_http_info(market, instrument, opts)
      data
    end

    # @param market [String] The exchange to obtain data from
    # @param instrument [String] The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :after_ts Unix timestamp in seconds of the earliest index message in the response
    # @option opts [Integer] :last_ccseq The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request. (default to 0)
    # @option opts [String] :mapping_priority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (default to 'CHECK_MAPPED_FIRST')
    # @option opts [Integer] :limit The maximum number of index messages to return (default to 100)
    # @option opts [String] :response_format The format of the data response in uppercase. It can be one of the following: JSON,CSV (default to 'JSON')
    # @option opts [Boolean] :return_404_on_empty_response If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (default to false)
    # @return [Array<(GENERICRESPONSE, Integer, Hash)>] GENERICRESPONSE data, response status code and response headers
    def index_cc_v1_historical_messages_with_http_info(market, instrument, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReferenceRatesApi.index_cc_v1_historical_messages ...'
      end
      # verify the required parameter 'market' is set
      if @api_client.config.client_side_validation && market.nil?
        fail ArgumentError, "Missing the required parameter 'market' when calling ReferenceRatesApi.index_cc_v1_historical_messages"
      end
      if @api_client.config.client_side_validation && market.to_s.length > 30
        fail ArgumentError, 'invalid value for "market" when calling ReferenceRatesApi.index_cc_v1_historical_messages, the character length must be smaller than or equal to 30.'
      end

      if @api_client.config.client_side_validation && market.to_s.length < 2
        fail ArgumentError, 'invalid value for "market" when calling ReferenceRatesApi.index_cc_v1_historical_messages, the character length must be great than or equal to 2.'
      end

      # verify the required parameter 'instrument' is set
      if @api_client.config.client_side_validation && instrument.nil?
        fail ArgumentError, "Missing the required parameter 'instrument' when calling ReferenceRatesApi.index_cc_v1_historical_messages"
      end
      if @api_client.config.client_side_validation && instrument.to_s.length > 500
        fail ArgumentError, 'invalid value for "instrument" when calling ReferenceRatesApi.index_cc_v1_historical_messages, the character length must be smaller than or equal to 500.'
      end

      if @api_client.config.client_side_validation && instrument.to_s.length < 1
        fail ArgumentError, 'invalid value for "instrument" when calling ReferenceRatesApi.index_cc_v1_historical_messages, the character length must be great than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'after_ts'].nil? && opts[:'after_ts'] < 0
        fail ArgumentError, 'invalid value for "opts[:"after_ts"]" when calling ReferenceRatesApi.index_cc_v1_historical_messages, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'last_ccseq'].nil? && opts[:'last_ccseq'] < 0
        fail ArgumentError, 'invalid value for "opts[:"last_ccseq"]" when calling ReferenceRatesApi.index_cc_v1_historical_messages, must be greater than or equal to 0.'
      end

      allowable_values = ["CHECK_MAPPED_FIRST", "CHECK_UNMAPPED_FIRST"]
      if @api_client.config.client_side_validation && opts[:'mapping_priority'] && !allowable_values.include?(opts[:'mapping_priority'])
        fail ArgumentError, "invalid value for \"mapping_priority\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 5000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ReferenceRatesApi.index_cc_v1_historical_messages, must be smaller than or equal to 5000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ReferenceRatesApi.index_cc_v1_historical_messages, must be greater than or equal to 1.'
      end

      allowable_values = ["JSON", "CSV"]
      if @api_client.config.client_side_validation && opts[:'response_format'] && !allowable_values.include?(opts[:'response_format'])
        fail ArgumentError, "invalid value for \"response_format\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/index/cc/v1/historical/messages'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'market'] = market
      query_params[:'instrument'] = instrument
      query_params[:'after_ts'] = opts[:'after_ts'] if !opts[:'after_ts'].nil?
      query_params[:'last_ccseq'] = opts[:'last_ccseq'] if !opts[:'last_ccseq'].nil?
      query_params[:'mapping_priority'] = opts[:'mapping_priority'] if !opts[:'mapping_priority'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'response_format'] = opts[:'response_format'] if !opts[:'response_format'].nil?
      query_params[:'return_404_on_empty_response'] = opts[:'return_404_on_empty_response'] if !opts[:'return_404_on_empty_response'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GENERICRESPONSE'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key_header', 'api_key_query']

      new_options = opts.merge(
        :operation => :"ReferenceRatesApi.index_cc_v1_historical_messages",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReferenceRatesApi#index_cc_v1_historical_messages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param market [String] The exchange to obtain data from
    # @param instrument [String] The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :hour_ts Unix timestamp in seconds for the hour containing the index updates you are interested in. You can pass any timestamp in the hour but we will round it down the the full hour timestmap and return all index updates in that hour.
    # @option opts [String] :mapping_priority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (default to 'CHECK_MAPPED_FIRST')
    # @option opts [String] :response_format The format of the data response in uppercase. It can be one of the following: JSON,CSV (default to 'JSON')
    # @option opts [Boolean] :return_404_on_empty_response If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (default to false)
    # @return [GENERICRESPONSE]
    def index_cc_v1_historical_messages_hour(market, instrument, opts = {})
      data, _status_code, _headers = index_cc_v1_historical_messages_hour_with_http_info(market, instrument, opts)
      data
    end

    # @param market [String] The exchange to obtain data from
    # @param instrument [String] The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :hour_ts Unix timestamp in seconds for the hour containing the index updates you are interested in. You can pass any timestamp in the hour but we will round it down the the full hour timestmap and return all index updates in that hour.
    # @option opts [String] :mapping_priority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (default to 'CHECK_MAPPED_FIRST')
    # @option opts [String] :response_format The format of the data response in uppercase. It can be one of the following: JSON,CSV (default to 'JSON')
    # @option opts [Boolean] :return_404_on_empty_response If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats. (default to false)
    # @return [Array<(GENERICRESPONSE, Integer, Hash)>] GENERICRESPONSE data, response status code and response headers
    def index_cc_v1_historical_messages_hour_with_http_info(market, instrument, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReferenceRatesApi.index_cc_v1_historical_messages_hour ...'
      end
      # verify the required parameter 'market' is set
      if @api_client.config.client_side_validation && market.nil?
        fail ArgumentError, "Missing the required parameter 'market' when calling ReferenceRatesApi.index_cc_v1_historical_messages_hour"
      end
      if @api_client.config.client_side_validation && market.to_s.length > 30
        fail ArgumentError, 'invalid value for "market" when calling ReferenceRatesApi.index_cc_v1_historical_messages_hour, the character length must be smaller than or equal to 30.'
      end

      if @api_client.config.client_side_validation && market.to_s.length < 2
        fail ArgumentError, 'invalid value for "market" when calling ReferenceRatesApi.index_cc_v1_historical_messages_hour, the character length must be great than or equal to 2.'
      end

      # verify the required parameter 'instrument' is set
      if @api_client.config.client_side_validation && instrument.nil?
        fail ArgumentError, "Missing the required parameter 'instrument' when calling ReferenceRatesApi.index_cc_v1_historical_messages_hour"
      end
      if @api_client.config.client_side_validation && instrument.to_s.length > 500
        fail ArgumentError, 'invalid value for "instrument" when calling ReferenceRatesApi.index_cc_v1_historical_messages_hour, the character length must be smaller than or equal to 500.'
      end

      if @api_client.config.client_side_validation && instrument.to_s.length < 1
        fail ArgumentError, 'invalid value for "instrument" when calling ReferenceRatesApi.index_cc_v1_historical_messages_hour, the character length must be great than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'hour_ts'].nil? && opts[:'hour_ts'] < 0
        fail ArgumentError, 'invalid value for "opts[:"hour_ts"]" when calling ReferenceRatesApi.index_cc_v1_historical_messages_hour, must be greater than or equal to 0.'
      end

      allowable_values = ["CHECK_MAPPED_FIRST", "CHECK_UNMAPPED_FIRST"]
      if @api_client.config.client_side_validation && opts[:'mapping_priority'] && !allowable_values.include?(opts[:'mapping_priority'])
        fail ArgumentError, "invalid value for \"mapping_priority\", must be one of #{allowable_values}"
      end
      allowable_values = ["JSON", "CSV"]
      if @api_client.config.client_side_validation && opts[:'response_format'] && !allowable_values.include?(opts[:'response_format'])
        fail ArgumentError, "invalid value for \"response_format\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/index/cc/v1/historical/messages/hour'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'market'] = market
      query_params[:'instrument'] = instrument
      query_params[:'hour_ts'] = opts[:'hour_ts'] if !opts[:'hour_ts'].nil?
      query_params[:'mapping_priority'] = opts[:'mapping_priority'] if !opts[:'mapping_priority'].nil?
      query_params[:'response_format'] = opts[:'response_format'] if !opts[:'response_format'].nil?
      query_params[:'return_404_on_empty_response'] = opts[:'return_404_on_empty_response'] if !opts[:'return_404_on_empty_response'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GENERICRESPONSE'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key_header', 'api_key_query']

      new_options = opts.merge(
        :operation => :"ReferenceRatesApi.index_cc_v1_historical_messages_hour",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReferenceRatesApi#index_cc_v1_historical_messages_hour\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param market [String] The exchange to obtain data from
    # @param instrument [String] The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME
    # @option opts [Integer] :limit The number of data points to return (default to 30)
    # @option opts [Integer] :to_ts Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
    # @option opts [Integer] :aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (default to 1)
    # @option opts [Boolean] :fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (default to true)
    # @option opts [String] :mapping_priority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (default to 'CHECK_MAPPED_FIRST')
    # @option opts [String] :response_format The format of the data response in uppercase. It can be one of the following: JSON,CSV (default to 'JSON')
    # @return [GENERICRESPONSE]
    def index_cc_v1_historical_minutes(market, instrument, opts = {})
      data, _status_code, _headers = index_cc_v1_historical_minutes_with_http_info(market, instrument, opts)
      data
    end

    # @param market [String] The exchange to obtain data from
    # @param instrument [String] The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME
    # @option opts [Integer] :limit The number of data points to return (default to 30)
    # @option opts [Integer] :to_ts Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
    # @option opts [Integer] :aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries (default to 1)
    # @option opts [Boolean] :fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity. (default to true)
    # @option opts [String] :mapping_priority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (default to 'CHECK_MAPPED_FIRST')
    # @option opts [String] :response_format The format of the data response in uppercase. It can be one of the following: JSON,CSV (default to 'JSON')
    # @return [Array<(GENERICRESPONSE, Integer, Hash)>] GENERICRESPONSE data, response status code and response headers
    def index_cc_v1_historical_minutes_with_http_info(market, instrument, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReferenceRatesApi.index_cc_v1_historical_minutes ...'
      end
      # verify the required parameter 'market' is set
      if @api_client.config.client_side_validation && market.nil?
        fail ArgumentError, "Missing the required parameter 'market' when calling ReferenceRatesApi.index_cc_v1_historical_minutes"
      end
      if @api_client.config.client_side_validation && market.to_s.length > 30
        fail ArgumentError, 'invalid value for "market" when calling ReferenceRatesApi.index_cc_v1_historical_minutes, the character length must be smaller than or equal to 30.'
      end

      if @api_client.config.client_side_validation && market.to_s.length < 2
        fail ArgumentError, 'invalid value for "market" when calling ReferenceRatesApi.index_cc_v1_historical_minutes, the character length must be great than or equal to 2.'
      end

      # verify the required parameter 'instrument' is set
      if @api_client.config.client_side_validation && instrument.nil?
        fail ArgumentError, "Missing the required parameter 'instrument' when calling ReferenceRatesApi.index_cc_v1_historical_minutes"
      end
      if @api_client.config.client_side_validation && instrument.to_s.length > 500
        fail ArgumentError, 'invalid value for "instrument" when calling ReferenceRatesApi.index_cc_v1_historical_minutes, the character length must be smaller than or equal to 500.'
      end

      if @api_client.config.client_side_validation && instrument.to_s.length < 1
        fail ArgumentError, 'invalid value for "instrument" when calling ReferenceRatesApi.index_cc_v1_historical_minutes, the character length must be great than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 2000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ReferenceRatesApi.index_cc_v1_historical_minutes, must be smaller than or equal to 2000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ReferenceRatesApi.index_cc_v1_historical_minutes, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'aggregate'].nil? && opts[:'aggregate'] > 30
        fail ArgumentError, 'invalid value for "opts[:"aggregate"]" when calling ReferenceRatesApi.index_cc_v1_historical_minutes, must be smaller than or equal to 30.'
      end

      if @api_client.config.client_side_validation && !opts[:'aggregate'].nil? && opts[:'aggregate'] < 1
        fail ArgumentError, 'invalid value for "opts[:"aggregate"]" when calling ReferenceRatesApi.index_cc_v1_historical_minutes, must be greater than or equal to 1.'
      end

      allowable_values = ["CHECK_MAPPED_FIRST", "CHECK_UNMAPPED_FIRST"]
      if @api_client.config.client_side_validation && opts[:'mapping_priority'] && !allowable_values.include?(opts[:'mapping_priority'])
        fail ArgumentError, "invalid value for \"mapping_priority\", must be one of #{allowable_values}"
      end
      allowable_values = ["JSON", "CSV"]
      if @api_client.config.client_side_validation && opts[:'response_format'] && !allowable_values.include?(opts[:'response_format'])
        fail ArgumentError, "invalid value for \"response_format\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/index/cc/v1/historical/minutes'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'market'] = market
      query_params[:'instrument'] = instrument
      query_params[:'groups'] = @api_client.build_collection_param(opts[:'groups'], :csv) if !opts[:'groups'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'to_ts'] = opts[:'to_ts'] if !opts[:'to_ts'].nil?
      query_params[:'aggregate'] = opts[:'aggregate'] if !opts[:'aggregate'].nil?
      query_params[:'fill'] = opts[:'fill'] if !opts[:'fill'].nil?
      query_params[:'mapping_priority'] = opts[:'mapping_priority'] if !opts[:'mapping_priority'].nil?
      query_params[:'response_format'] = opts[:'response_format'] if !opts[:'response_format'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GENERICRESPONSE'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ReferenceRatesApi.index_cc_v1_historical_minutes",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReferenceRatesApi#index_cc_v1_historical_minutes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param market [String] The exchange to obtain data from
    # @param instruments [Array<String>] A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :groups When requesting metadata entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: STATUS,INTERNAL,GENERAL,MIGRATION,SOURCE
    # @option opts [String] :mapping_priority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (default to 'CHECK_MAPPED_FIRST')
    # @return [GENERICRESPONSE]
    def index_cc_v1_latest_instrument_metadata(market, instruments, opts = {})
      data, _status_code, _headers = index_cc_v1_latest_instrument_metadata_with_http_info(market, instruments, opts)
      data
    end

    # @param market [String] The exchange to obtain data from
    # @param instruments [Array<String>] A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :groups When requesting metadata entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: STATUS,INTERNAL,GENERAL,MIGRATION,SOURCE
    # @option opts [String] :mapping_priority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (default to 'CHECK_MAPPED_FIRST')
    # @return [Array<(GENERICRESPONSE, Integer, Hash)>] GENERICRESPONSE data, response status code and response headers
    def index_cc_v1_latest_instrument_metadata_with_http_info(market, instruments, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReferenceRatesApi.index_cc_v1_latest_instrument_metadata ...'
      end
      # verify the required parameter 'market' is set
      if @api_client.config.client_side_validation && market.nil?
        fail ArgumentError, "Missing the required parameter 'market' when calling ReferenceRatesApi.index_cc_v1_latest_instrument_metadata"
      end
      if @api_client.config.client_side_validation && market.to_s.length > 30
        fail ArgumentError, 'invalid value for "market" when calling ReferenceRatesApi.index_cc_v1_latest_instrument_metadata, the character length must be smaller than or equal to 30.'
      end

      if @api_client.config.client_side_validation && market.to_s.length < 2
        fail ArgumentError, 'invalid value for "market" when calling ReferenceRatesApi.index_cc_v1_latest_instrument_metadata, the character length must be great than or equal to 2.'
      end

      # verify the required parameter 'instruments' is set
      if @api_client.config.client_side_validation && instruments.nil?
        fail ArgumentError, "Missing the required parameter 'instruments' when calling ReferenceRatesApi.index_cc_v1_latest_instrument_metadata"
      end
      if @api_client.config.client_side_validation && instruments.length > 25
        fail ArgumentError, 'invalid value for "instruments" when calling ReferenceRatesApi.index_cc_v1_latest_instrument_metadata, number of items must be less than or equal to 25.'
      end

      if @api_client.config.client_side_validation && instruments.length < 1
        fail ArgumentError, 'invalid value for "instruments" when calling ReferenceRatesApi.index_cc_v1_latest_instrument_metadata, number of items must be greater than or equal to 1.'
      end

      allowable_values = ["CHECK_MAPPED_FIRST", "CHECK_UNMAPPED_FIRST"]
      if @api_client.config.client_side_validation && opts[:'mapping_priority'] && !allowable_values.include?(opts[:'mapping_priority'])
        fail ArgumentError, "invalid value for \"mapping_priority\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/index/cc/v1/latest/instrument/metadata'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'market'] = market
      query_params[:'instruments'] = @api_client.build_collection_param(instruments, :csv)
      query_params[:'groups'] = @api_client.build_collection_param(opts[:'groups'], :csv) if !opts[:'groups'].nil?
      query_params[:'mapping_priority'] = opts[:'mapping_priority'] if !opts[:'mapping_priority'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GENERICRESPONSE'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ReferenceRatesApi.index_cc_v1_latest_instrument_metadata",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReferenceRatesApi#index_cc_v1_latest_instrument_metadata\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param market [String] The exchange to obtain data from
    # @param instruments [Array<String>] A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :groups When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME
    # @option opts [String] :mapping_priority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (default to 'CHECK_MAPPED_FIRST')
    # @return [GENERICRESPONSE]
    def index_cc_v1_latest_tick(market, instruments, opts = {})
      data, _status_code, _headers = index_cc_v1_latest_tick_with_http_info(market, instruments, opts)
      data
    end

    # @param market [String] The exchange to obtain data from
    # @param instruments [Array<String>] A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :groups When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME
    # @option opts [String] :mapping_priority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST (default to 'CHECK_MAPPED_FIRST')
    # @return [Array<(GENERICRESPONSE, Integer, Hash)>] GENERICRESPONSE data, response status code and response headers
    def index_cc_v1_latest_tick_with_http_info(market, instruments, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReferenceRatesApi.index_cc_v1_latest_tick ...'
      end
      # verify the required parameter 'market' is set
      if @api_client.config.client_side_validation && market.nil?
        fail ArgumentError, "Missing the required parameter 'market' when calling ReferenceRatesApi.index_cc_v1_latest_tick"
      end
      if @api_client.config.client_side_validation && market.to_s.length > 30
        fail ArgumentError, 'invalid value for "market" when calling ReferenceRatesApi.index_cc_v1_latest_tick, the character length must be smaller than or equal to 30.'
      end

      if @api_client.config.client_side_validation && market.to_s.length < 2
        fail ArgumentError, 'invalid value for "market" when calling ReferenceRatesApi.index_cc_v1_latest_tick, the character length must be great than or equal to 2.'
      end

      # verify the required parameter 'instruments' is set
      if @api_client.config.client_side_validation && instruments.nil?
        fail ArgumentError, "Missing the required parameter 'instruments' when calling ReferenceRatesApi.index_cc_v1_latest_tick"
      end
      if @api_client.config.client_side_validation && instruments.length > 25
        fail ArgumentError, 'invalid value for "instruments" when calling ReferenceRatesApi.index_cc_v1_latest_tick, number of items must be less than or equal to 25.'
      end

      if @api_client.config.client_side_validation && instruments.length < 1
        fail ArgumentError, 'invalid value for "instruments" when calling ReferenceRatesApi.index_cc_v1_latest_tick, number of items must be greater than or equal to 1.'
      end

      allowable_values = ["CHECK_MAPPED_FIRST", "CHECK_UNMAPPED_FIRST"]
      if @api_client.config.client_side_validation && opts[:'mapping_priority'] && !allowable_values.include?(opts[:'mapping_priority'])
        fail ArgumentError, "invalid value for \"mapping_priority\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/index/cc/v1/latest/tick'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'market'] = market
      query_params[:'instruments'] = @api_client.build_collection_param(instruments, :csv)
      query_params[:'groups'] = @api_client.build_collection_param(opts[:'groups'], :csv) if !opts[:'groups'].nil?
      query_params[:'mapping_priority'] = opts[:'mapping_priority'] if !opts[:'mapping_priority'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GENERICRESPONSE'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ReferenceRatesApi.index_cc_v1_latest_tick",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReferenceRatesApi#index_cc_v1_latest_tick\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :market The exchange to obtain data from (default to '')
    # @return [GENERICRESPONSE]
    def index_cc_v1_markets(opts = {})
      data, _status_code, _headers = index_cc_v1_markets_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :market The exchange to obtain data from (default to '')
    # @return [Array<(GENERICRESPONSE, Integer, Hash)>] GENERICRESPONSE data, response status code and response headers
    def index_cc_v1_markets_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReferenceRatesApi.index_cc_v1_markets ...'
      end
      if @api_client.config.client_side_validation && !opts[:'market'].nil? && opts[:'market'].to_s.length > 30
        fail ArgumentError, 'invalid value for "opts[:"market"]" when calling ReferenceRatesApi.index_cc_v1_markets, the character length must be smaller than or equal to 30.'
      end

      if @api_client.config.client_side_validation && !opts[:'market'].nil? && opts[:'market'].to_s.length < 0
        fail ArgumentError, 'invalid value for "opts[:"market"]" when calling ReferenceRatesApi.index_cc_v1_markets, the character length must be great than or equal to 0.'
      end

      # resource path
      local_var_path = '/index/cc/v1/markets'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'market'] = opts[:'market'] if !opts[:'market'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GENERICRESPONSE'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ReferenceRatesApi.index_cc_v1_markets",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReferenceRatesApi#index_cc_v1_markets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :market The exchange to obtain data from (default to '')
    # @option opts [String] :instrument The mapped instrument to retrieve on a specific market. (default to '')
    # @option opts [Array<String>] :instrument_status The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED
    # @return [GENERICRESPONSE]
    def index_cc_v1_markets_instruments(opts = {})
      data, _status_code, _headers = index_cc_v1_markets_instruments_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :market The exchange to obtain data from (default to '')
    # @option opts [String] :instrument The mapped instrument to retrieve on a specific market. (default to '')
    # @option opts [Array<String>] :instrument_status The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED
    # @return [Array<(GENERICRESPONSE, Integer, Hash)>] GENERICRESPONSE data, response status code and response headers
    def index_cc_v1_markets_instruments_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReferenceRatesApi.index_cc_v1_markets_instruments ...'
      end
      if @api_client.config.client_side_validation && !opts[:'market'].nil? && opts[:'market'].to_s.length > 30
        fail ArgumentError, 'invalid value for "opts[:"market"]" when calling ReferenceRatesApi.index_cc_v1_markets_instruments, the character length must be smaller than or equal to 30.'
      end

      if @api_client.config.client_side_validation && !opts[:'market'].nil? && opts[:'market'].to_s.length < 0
        fail ArgumentError, 'invalid value for "opts[:"market"]" when calling ReferenceRatesApi.index_cc_v1_markets_instruments, the character length must be great than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'instrument'].nil? && opts[:'instrument'].to_s.length > 30
        fail ArgumentError, 'invalid value for "opts[:"instrument"]" when calling ReferenceRatesApi.index_cc_v1_markets_instruments, the character length must be smaller than or equal to 30.'
      end

      if @api_client.config.client_side_validation && !opts[:'instrument'].nil? && opts[:'instrument'].to_s.length < 0
        fail ArgumentError, 'invalid value for "opts[:"instrument"]" when calling ReferenceRatesApi.index_cc_v1_markets_instruments, the character length must be great than or equal to 0.'
      end

      allowable_values = ["ACTIVE", "IGNORED", "RETIRED", "EXPIRED"]
      if @api_client.config.client_side_validation && opts[:'instrument_status'] && !opts[:'instrument_status'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"instrument_status\", must include one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/index/cc/v1/markets/instruments'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'market'] = opts[:'market'] if !opts[:'market'].nil?
      query_params[:'instrument'] = opts[:'instrument'] if !opts[:'instrument'].nil?
      query_params[:'instrument_status'] = @api_client.build_collection_param(opts[:'instrument_status'], :csv) if !opts[:'instrument_status'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GENERICRESPONSE'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ReferenceRatesApi.index_cc_v1_markets_instruments",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReferenceRatesApi#index_cc_v1_markets_instruments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :market The exchange to obtain data from (default to '')
    # @option opts [String] :instrument The unmapped instrument to retrieve on a specific market. (default to '')
    # @option opts [Array<String>] :instrument_status The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED
    # @return [GENERICRESPONSE]
    def index_cc_v1_markets_instruments_unmapped(opts = {})
      data, _status_code, _headers = index_cc_v1_markets_instruments_unmapped_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :market The exchange to obtain data from (default to '')
    # @option opts [String] :instrument The unmapped instrument to retrieve on a specific market. (default to '')
    # @option opts [Array<String>] :instrument_status The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED
    # @return [Array<(GENERICRESPONSE, Integer, Hash)>] GENERICRESPONSE data, response status code and response headers
    def index_cc_v1_markets_instruments_unmapped_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReferenceRatesApi.index_cc_v1_markets_instruments_unmapped ...'
      end
      if @api_client.config.client_side_validation && !opts[:'market'].nil? && opts[:'market'].to_s.length > 30
        fail ArgumentError, 'invalid value for "opts[:"market"]" when calling ReferenceRatesApi.index_cc_v1_markets_instruments_unmapped, the character length must be smaller than or equal to 30.'
      end

      if @api_client.config.client_side_validation && !opts[:'market'].nil? && opts[:'market'].to_s.length < 0
        fail ArgumentError, 'invalid value for "opts[:"market"]" when calling ReferenceRatesApi.index_cc_v1_markets_instruments_unmapped, the character length must be great than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'instrument'].nil? && opts[:'instrument'].to_s.length > 30
        fail ArgumentError, 'invalid value for "opts[:"instrument"]" when calling ReferenceRatesApi.index_cc_v1_markets_instruments_unmapped, the character length must be smaller than or equal to 30.'
      end

      if @api_client.config.client_side_validation && !opts[:'instrument'].nil? && opts[:'instrument'].to_s.length < 0
        fail ArgumentError, 'invalid value for "opts[:"instrument"]" when calling ReferenceRatesApi.index_cc_v1_markets_instruments_unmapped, the character length must be great than or equal to 0.'
      end

      allowable_values = ["ACTIVE", "IGNORED", "RETIRED", "EXPIRED"]
      if @api_client.config.client_side_validation && opts[:'instrument_status'] && !opts[:'instrument_status'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"instrument_status\", must include one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/index/cc/v1/markets/instruments/unmapped'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'market'] = opts[:'market'] if !opts[:'market'].nil?
      query_params[:'instrument'] = opts[:'instrument'] if !opts[:'instrument'].nil?
      query_params[:'instrument_status'] = @api_client.build_collection_param(opts[:'instrument_status'], :csv) if !opts[:'instrument_status'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GENERICRESPONSE'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ReferenceRatesApi.index_cc_v1_markets_instruments_unmapped",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReferenceRatesApi#index_cc_v1_markets_instruments_unmapped\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
