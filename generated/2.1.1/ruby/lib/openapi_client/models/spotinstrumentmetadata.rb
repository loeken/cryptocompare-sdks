=begin
#CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry

#CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.

The version of the OpenAPI document: 2.1.1
Contact: data@cryptocompare.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.3.0-SNAPSHOT

=end

require 'date'
require 'time'

module OpenapiClient
  class SPOTINSTRUMENTMETADATA
    # This is the first time instrument was seen on instrumentListSourceType BLOB.
    attr_accessor :first_seen_on_blob_ts

    # This is the first time instrument was seen on instrumentListSourceType FIX.
    attr_accessor :first_seen_on_fix_ts

    # This is the first time instrument was seen on instrumentListSourceType HARDCODED.
    attr_accessor :first_seen_on_hardcoded_ts

    # This is the first time instrument was seen on instrumentListSourceType INDEX_COMPOSITION.
    attr_accessor :first_seen_on_index_composition_ts

    # This is the first time instrument was seen on instrumentListSourceType NSQ.
    attr_accessor :first_seen_on_nsq_ts

    # This is the first time instrument was seen on instrumentListSourceType POLLING.
    attr_accessor :first_seen_on_polling_ts

    # This is the first time instrument was seen on instrumentListSourceType STREAMING.
    attr_accessor :first_seen_on_streaming_ts

    # This is the first TRADE_SPOT that we have seen on the specific source type in internal format.
    attr_accessor :first_trade_spot_from_backfill

    # This is the first TRADE_SPOT that we have seen on the specific source type in external format.
    attr_accessor :first_trade_spot_from_backfill_external

    # This is the first TRADE_SPOT that we have seen on the specific source type in internal format.
    attr_accessor :first_trade_spot_from_blob

    # This is the first TRADE_SPOT that we have seen on the specific source type in external format.
    attr_accessor :first_trade_spot_from_blob_external

    # This is the first TRADE_SPOT that we have seen on the specific source type in internal format.
    attr_accessor :first_trade_spot_from_calculated

    # This is the first TRADE_SPOT that we have seen on the specific source type in external format.
    attr_accessor :first_trade_spot_from_calculated_external

    # This is the first TRADE_SPOT that we have seen on the specific source type in internal format.
    attr_accessor :first_trade_spot_from_fix

    # This is the first TRADE_SPOT that we have seen on the specific source type in external format.
    attr_accessor :first_trade_spot_from_fix_external

    # This is the first TRADE_SPOT that we have seen on the specific source type in internal format.
    attr_accessor :first_trade_spot_from_go

    # This is the first TRADE_SPOT that we have seen on the specific source type in external format.
    attr_accessor :first_trade_spot_from_go_external

    # This is the first TRADE_SPOT that we have seen on the specific source type in internal format.
    attr_accessor :first_trade_spot_from_polling

    # This is the first TRADE_SPOT that we have seen on the specific source type in external format.
    attr_accessor :first_trade_spot_from_polling_external

    # This is the first TRADE_SPOT that we have seen on the specific source type in internal format.
    attr_accessor :first_trade_spot_from_streaming

    # This is the first TRADE_SPOT that we have seen on the specific source type in external format.
    attr_accessor :first_trade_spot_from_streaming_external

    # The migration destination vm hostname.
    attr_accessor :host_migration_destination

    # The migration source vm hostname.
    attr_accessor :host_migration_source

    # The migration status of the symbol, we only poll / stream / connect empty or SETTLED
    attr_accessor :host_migration_status

    # The instrument ID as it is on the exchange with small modifications - we do not allow the following characters inside isntrument ids: ,/&?
    attr_accessor :instrument

    # The full data we get from the polling endpoint for this specific instrument. This is a JSON stringified object with different properties per exchange.
    attr_accessor :instrument_external_data

    # The current mapping information for this instrument
    attr_accessor :instrument_mapping

    # Historical mapping information for this instrument
    attr_accessor :instrument_mapping_history

    # Where do we get the instrument id / INSTRUMENT_{messageName}_REST_URI / INSTRUMENT_{messageName}_STREAMING_SUBSCRIPTION etc from.
    attr_accessor :instrument_source_backfill

    # Where do we get the instrument id / INSTRUMENT_{messageName}_REST_URI / INSTRUMENT_{messageName}_STREAMING_SUBSCRIPTION etc from.
    attr_accessor :instrument_source_blob

    # Where do we get the instrument id / INSTRUMENT_{messageName}_REST_URI / INSTRUMENT_{messageName}_STREAMING_SUBSCRIPTION etc from.
    attr_accessor :instrument_source_calculated

    # Where do we get the instrument id / INSTRUMENT_{messageName}_REST_URI / INSTRUMENT_{messageName}_STREAMING_SUBSCRIPTION etc from.
    attr_accessor :instrument_source_fix

    # Where do we get the instrument id / INSTRUMENT_{messageName}_REST_URI / INSTRUMENT_{messageName}_STREAMING_SUBSCRIPTION etc from.
    attr_accessor :instrument_source_go

    # Where do we get the instrument id / INSTRUMENT_{messageName}_REST_URI / INSTRUMENT_{messageName}_STREAMING_SUBSCRIPTION etc from.
    attr_accessor :instrument_source_polling

    # Where do we get the instrument id / INSTRUMENT_{messageName}_REST_URI / INSTRUMENT_{messageName}_STREAMING_SUBSCRIPTION etc from.
    attr_accessor :instrument_source_streaming

    # The status of the symbol, we only poll / stream / connect to the ACTIVE ones, for the RETIRED / IGNORED / EXPIRED  one we no longer query for data.
    attr_accessor :instrument_status

    # The last proxied REST request we sent to the proxy swarm to get TRADE_SPOT for the instrument.
    attr_accessor :instrument_trade_spot_from_backfill_last_proxied_rest_request

    # The last time we sent a request to the proxy swarm to get TRADE_SPOT for the instrument.
    attr_accessor :instrument_trade_spot_from_backfill_rest_uri_last_request_ts

    # The last time we received a request from the proxy swarm with TRADE_SPOT for this instrument.
    attr_accessor :instrument_trade_spot_from_backfill_rest_uri_last_response_ts

    # The next time we expect to make a request for TRADE_SPOT on this instrument.
    attr_accessor :instrument_trade_spot_from_backfill_rest_uri_next_request_ts

    # The last proxied REST request we sent to the proxy swarm to get TRADE_SPOT for the instrument.
    attr_accessor :instrument_trade_spot_from_blob_last_proxied_rest_request

    # The last time we sent a request to the proxy swarm to get TRADE_SPOT for the instrument.
    attr_accessor :instrument_trade_spot_from_blob_rest_uri_last_request_ts

    # The last time we received a request from the proxy swarm with TRADE_SPOT for this instrument.
    attr_accessor :instrument_trade_spot_from_blob_rest_uri_last_response_ts

    # The next time we expect to make a request for TRADE_SPOT on this instrument.
    attr_accessor :instrument_trade_spot_from_blob_rest_uri_next_request_ts

    # The last proxied REST request we sent to the proxy swarm to get TRADE_SPOT for the instrument.
    attr_accessor :instrument_trade_spot_from_calculated_last_proxied_rest_request

    # The last time we sent a request to the proxy swarm to get TRADE_SPOT for the instrument.
    attr_accessor :instrument_trade_spot_from_calculated_rest_uri_last_request_ts

    # The last time we received a request from the proxy swarm with TRADE_SPOT for this instrument.
    attr_accessor :instrument_trade_spot_from_calculated_rest_uri_last_response_ts

    # The next time we expect to make a request for TRADE_SPOT on this instrument.
    attr_accessor :instrument_trade_spot_from_calculated_rest_uri_next_request_ts

    # The last proxied REST request we sent to the proxy swarm to get TRADE_SPOT for the instrument.
    attr_accessor :instrument_trade_spot_from_fix_last_proxied_rest_request

    # The last time we sent a request to the proxy swarm to get TRADE_SPOT for the instrument.
    attr_accessor :instrument_trade_spot_from_fix_rest_uri_last_request_ts

    # The last time we received a request from the proxy swarm with TRADE_SPOT for this instrument.
    attr_accessor :instrument_trade_spot_from_fix_rest_uri_last_response_ts

    # The next time we expect to make a request for TRADE_SPOT on this instrument.
    attr_accessor :instrument_trade_spot_from_fix_rest_uri_next_request_ts

    # The last proxied REST request we sent to the proxy swarm to get TRADE_SPOT for the instrument.
    attr_accessor :instrument_trade_spot_from_go_last_proxied_rest_request

    # The last time we sent a request to the proxy swarm to get TRADE_SPOT for the instrument.
    attr_accessor :instrument_trade_spot_from_go_rest_uri_last_request_ts

    # The last time we received a request from the proxy swarm with TRADE_SPOT for this instrument.
    attr_accessor :instrument_trade_spot_from_go_rest_uri_last_response_ts

    # The next time we expect to make a request for TRADE_SPOT on this instrument.
    attr_accessor :instrument_trade_spot_from_go_rest_uri_next_request_ts

    # The last proxied REST request we sent to the proxy swarm to get TRADE_SPOT for the instrument.
    attr_accessor :instrument_trade_spot_from_polling_last_proxied_rest_request

    # The last time we sent a request to the proxy swarm to get TRADE_SPOT for the instrument.
    attr_accessor :instrument_trade_spot_from_polling_rest_uri_last_request_ts

    # The last time we received a request from the proxy swarm with TRADE_SPOT for this instrument.
    attr_accessor :instrument_trade_spot_from_polling_rest_uri_last_response_ts

    # The next time we expect to make a request for TRADE_SPOT on this instrument.
    attr_accessor :instrument_trade_spot_from_polling_rest_uri_next_request_ts

    # The last proxied REST request we sent to the proxy swarm to get TRADE_SPOT for the instrument.
    attr_accessor :instrument_trade_spot_from_streaming_last_proxied_rest_request

    # The last time we sent a request to the proxy swarm to get TRADE_SPOT for the instrument.
    attr_accessor :instrument_trade_spot_from_streaming_rest_uri_last_request_ts

    # The last time we received a request from the proxy swarm with TRADE_SPOT for this instrument.
    attr_accessor :instrument_trade_spot_from_streaming_rest_uri_last_response_ts

    # The next time we expect to make a request for TRADE_SPOT on this instrument.
    attr_accessor :instrument_trade_spot_from_streaming_rest_uri_next_request_ts

    # This flags the exchange instrument as in ready to consume TRADE_SPOT via a streaming integration.
    attr_accessor :instrument_trade_spot_is_ready_for_streaming_integration

    # This is used to build up the request in some cases, this is where we put the id we use when querying for TRADE_SPOT.
    attr_accessor :instrument_trade_spot_rest_uri

    # The URL we send to the proxy swarm to get TRADE_SPOT for the instrument.
    attr_accessor :instrument_trade_spot_rest_url

    # This is used to build up the subscription in some cases, this is where we put the id we use when subscribing for TRADE_SPOT on this instrument.
    attr_accessor :instrument_trade_spot_streaming_subscription

    # The timestamp last encountered where the batch of trades from TRADES_SPOT all occured at the same time. This is an issue when making the next request that requires polling by timestamp as a start/from parameter
    attr_accessor :last_concurrent_batch_of_trades_spot_ms

    # This is the last time instrument was seen on instrumentListSourceType BLOB.
    attr_accessor :last_seen_on_blob_ts

    # This is the last time instrument was seen on instrumentListSourceType FIX.
    attr_accessor :last_seen_on_fix_ts

    # This is the last time instrument was seen on instrumentListSourceType HARDCODED.
    attr_accessor :last_seen_on_hardcoded_ts

    # This is the last time instrument was seen on instrumentListSourceType INDEX_COMPOSITION.
    attr_accessor :last_seen_on_index_composition_ts

    # This is the last time instrument was seen on instrumentListSourceType NSQ.
    attr_accessor :last_seen_on_nsq_ts

    # This is the last time instrument was seen on instrumentListSourceType POLLING.
    attr_accessor :last_seen_on_polling_ts

    # This is the last time instrument was seen on instrumentListSourceType STREAMING.
    attr_accessor :last_seen_on_streaming_ts

    # This is the last TRADE_SPOT that we have seen on the specific source type in internal format.
    attr_accessor :last_trade_spot_from_backfill

    # This is the last TRADE_SPOT that we have seen on the specific trade source in external format.
    attr_accessor :last_trade_spot_from_backfill_external

    # This is the last TRADE_SPOT that we have seen on the specific source type in internal format.
    attr_accessor :last_trade_spot_from_blob

    # This is the last TRADE_SPOT that we have seen on the specific trade source in external format.
    attr_accessor :last_trade_spot_from_blob_external

    # This is the last TRADE_SPOT that we have seen on the specific source type in internal format.
    attr_accessor :last_trade_spot_from_calculated

    # This is the last TRADE_SPOT that we have seen on the specific trade source in external format.
    attr_accessor :last_trade_spot_from_calculated_external

    # This is the last TRADE_SPOT that we have seen on the specific source type in internal format.
    attr_accessor :last_trade_spot_from_fix

    # This is the last TRADE_SPOT that we have seen on the specific trade source in external format.
    attr_accessor :last_trade_spot_from_fix_external

    # This is the last TRADE_SPOT that we have seen on the specific source type in internal format.
    attr_accessor :last_trade_spot_from_go

    # This is the last TRADE_SPOT that we have seen on the specific trade source in external format.
    attr_accessor :last_trade_spot_from_go_external

    # This is the last TRADE_SPOT that we have seen on the specific source type in internal format.
    attr_accessor :last_trade_spot_from_polling

    # This is the last TRADE_SPOT that we have seen on the specific trade source in external format.
    attr_accessor :last_trade_spot_from_polling_external

    # This is the last TRADE_SPOT that we have seen on the specific source type in internal format.
    attr_accessor :last_trade_spot_from_streaming

    # This is the last TRADE_SPOT that we have seen on the specific trade source in external format.
    attr_accessor :last_trade_spot_from_streaming_external

    # The version of metadata, used for version conversions/migrates.
    attr_accessor :metadata_version

    # This states the status of blob migration for this intrument on this exchange.
    attr_accessor :processing_trades_from_blob_status

    # This is both the CCSEQ and the total TRADES_SPOT we have processed on this instrument
    attr_accessor :total_trades_spot

    # This is any extra helper TRADE_SPOT data that we would need for creating polling requests or subscribing with non standard information and anything that is very specific to one exchange API/Integration and it does not fit any of the other existing fields and is definitly only updated or written in only one service.
    attr_accessor :unstructured_trade_spot_from_backfill_internal_data

    # This is any extra helper TRADE_SPOT data that we would need for creating polling requests or subscribing with non standard information and anything that is very specific to one exchange API/Integration and it does not fit any of the other existing fields and is definitly only updated or written in only one service.
    attr_accessor :unstructured_trade_spot_from_blob_internal_data

    # This is any extra helper TRADE_SPOT data that we would need for creating polling requests or subscribing with non standard information and anything that is very specific to one exchange API/Integration and it does not fit any of the other existing fields and is definitly only updated or written in only one service.
    attr_accessor :unstructured_trade_spot_from_calculated_internal_data

    # This is any extra helper TRADE_SPOT data that we would need for creating polling requests or subscribing with non standard information and anything that is very specific to one exchange API/Integration and it does not fit any of the other existing fields and is definitly only updated or written in only one service.
    attr_accessor :unstructured_trade_spot_from_fix_internal_data

    # This is any extra helper TRADE_SPOT data that we would need for creating polling requests or subscribing with non standard information and anything that is very specific to one exchange API/Integration and it does not fit any of the other existing fields and is definitly only updated or written in only one service.
    attr_accessor :unstructured_trade_spot_from_go_internal_data

    # This is any extra helper TRADE_SPOT data that we would need for creating polling requests or subscribing with non standard information and anything that is very specific to one exchange API/Integration and it does not fit any of the other existing fields and is definitly only updated or written in only one service.
    attr_accessor :unstructured_trade_spot_from_polling_internal_data

    # This is any extra helper TRADE_SPOT data that we would need for creating polling requests or subscribing with non standard information and anything that is very specific to one exchange API/Integration and it does not fit any of the other existing fields and is definitly only updated or written in only one service.
    attr_accessor :unstructured_trade_spot_from_streaming_internal_data

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'first_seen_on_blob_ts' => :'FIRST_SEEN_ON_BLOB_TS',
        :'first_seen_on_fix_ts' => :'FIRST_SEEN_ON_FIX_TS',
        :'first_seen_on_hardcoded_ts' => :'FIRST_SEEN_ON_HARDCODED_TS',
        :'first_seen_on_index_composition_ts' => :'FIRST_SEEN_ON_INDEX_COMPOSITION_TS',
        :'first_seen_on_nsq_ts' => :'FIRST_SEEN_ON_NSQ_TS',
        :'first_seen_on_polling_ts' => :'FIRST_SEEN_ON_POLLING_TS',
        :'first_seen_on_streaming_ts' => :'FIRST_SEEN_ON_STREAMING_TS',
        :'first_trade_spot_from_backfill' => :'FIRST_TRADE_SPOT_FROM_BACKFILL',
        :'first_trade_spot_from_backfill_external' => :'FIRST_TRADE_SPOT_FROM_BACKFILL_EXTERNAL',
        :'first_trade_spot_from_blob' => :'FIRST_TRADE_SPOT_FROM_BLOB',
        :'first_trade_spot_from_blob_external' => :'FIRST_TRADE_SPOT_FROM_BLOB_EXTERNAL',
        :'first_trade_spot_from_calculated' => :'FIRST_TRADE_SPOT_FROM_CALCULATED',
        :'first_trade_spot_from_calculated_external' => :'FIRST_TRADE_SPOT_FROM_CALCULATED_EXTERNAL',
        :'first_trade_spot_from_fix' => :'FIRST_TRADE_SPOT_FROM_FIX',
        :'first_trade_spot_from_fix_external' => :'FIRST_TRADE_SPOT_FROM_FIX_EXTERNAL',
        :'first_trade_spot_from_go' => :'FIRST_TRADE_SPOT_FROM_GO',
        :'first_trade_spot_from_go_external' => :'FIRST_TRADE_SPOT_FROM_GO_EXTERNAL',
        :'first_trade_spot_from_polling' => :'FIRST_TRADE_SPOT_FROM_POLLING',
        :'first_trade_spot_from_polling_external' => :'FIRST_TRADE_SPOT_FROM_POLLING_EXTERNAL',
        :'first_trade_spot_from_streaming' => :'FIRST_TRADE_SPOT_FROM_STREAMING',
        :'first_trade_spot_from_streaming_external' => :'FIRST_TRADE_SPOT_FROM_STREAMING_EXTERNAL',
        :'host_migration_destination' => :'HOST_MIGRATION_DESTINATION',
        :'host_migration_source' => :'HOST_MIGRATION_SOURCE',
        :'host_migration_status' => :'HOST_MIGRATION_STATUS',
        :'instrument' => :'INSTRUMENT',
        :'instrument_external_data' => :'INSTRUMENT_EXTERNAL_DATA',
        :'instrument_mapping' => :'INSTRUMENT_MAPPING',
        :'instrument_mapping_history' => :'INSTRUMENT_MAPPING_HISTORY',
        :'instrument_source_backfill' => :'INSTRUMENT_SOURCE_BACKFILL',
        :'instrument_source_blob' => :'INSTRUMENT_SOURCE_BLOB',
        :'instrument_source_calculated' => :'INSTRUMENT_SOURCE_CALCULATED',
        :'instrument_source_fix' => :'INSTRUMENT_SOURCE_FIX',
        :'instrument_source_go' => :'INSTRUMENT_SOURCE_GO',
        :'instrument_source_polling' => :'INSTRUMENT_SOURCE_POLLING',
        :'instrument_source_streaming' => :'INSTRUMENT_SOURCE_STREAMING',
        :'instrument_status' => :'INSTRUMENT_STATUS',
        :'instrument_trade_spot_from_backfill_last_proxied_rest_request' => :'INSTRUMENT_TRADE_SPOT_FROM_BACKFILL_LAST_PROXIED_REST_REQUEST',
        :'instrument_trade_spot_from_backfill_rest_uri_last_request_ts' => :'INSTRUMENT_TRADE_SPOT_FROM_BACKFILL_REST_URI_LAST_REQUEST_TS',
        :'instrument_trade_spot_from_backfill_rest_uri_last_response_ts' => :'INSTRUMENT_TRADE_SPOT_FROM_BACKFILL_REST_URI_LAST_RESPONSE_TS',
        :'instrument_trade_spot_from_backfill_rest_uri_next_request_ts' => :'INSTRUMENT_TRADE_SPOT_FROM_BACKFILL_REST_URI_NEXT_REQUEST_TS',
        :'instrument_trade_spot_from_blob_last_proxied_rest_request' => :'INSTRUMENT_TRADE_SPOT_FROM_BLOB_LAST_PROXIED_REST_REQUEST',
        :'instrument_trade_spot_from_blob_rest_uri_last_request_ts' => :'INSTRUMENT_TRADE_SPOT_FROM_BLOB_REST_URI_LAST_REQUEST_TS',
        :'instrument_trade_spot_from_blob_rest_uri_last_response_ts' => :'INSTRUMENT_TRADE_SPOT_FROM_BLOB_REST_URI_LAST_RESPONSE_TS',
        :'instrument_trade_spot_from_blob_rest_uri_next_request_ts' => :'INSTRUMENT_TRADE_SPOT_FROM_BLOB_REST_URI_NEXT_REQUEST_TS',
        :'instrument_trade_spot_from_calculated_last_proxied_rest_request' => :'INSTRUMENT_TRADE_SPOT_FROM_CALCULATED_LAST_PROXIED_REST_REQUEST',
        :'instrument_trade_spot_from_calculated_rest_uri_last_request_ts' => :'INSTRUMENT_TRADE_SPOT_FROM_CALCULATED_REST_URI_LAST_REQUEST_TS',
        :'instrument_trade_spot_from_calculated_rest_uri_last_response_ts' => :'INSTRUMENT_TRADE_SPOT_FROM_CALCULATED_REST_URI_LAST_RESPONSE_TS',
        :'instrument_trade_spot_from_calculated_rest_uri_next_request_ts' => :'INSTRUMENT_TRADE_SPOT_FROM_CALCULATED_REST_URI_NEXT_REQUEST_TS',
        :'instrument_trade_spot_from_fix_last_proxied_rest_request' => :'INSTRUMENT_TRADE_SPOT_FROM_FIX_LAST_PROXIED_REST_REQUEST',
        :'instrument_trade_spot_from_fix_rest_uri_last_request_ts' => :'INSTRUMENT_TRADE_SPOT_FROM_FIX_REST_URI_LAST_REQUEST_TS',
        :'instrument_trade_spot_from_fix_rest_uri_last_response_ts' => :'INSTRUMENT_TRADE_SPOT_FROM_FIX_REST_URI_LAST_RESPONSE_TS',
        :'instrument_trade_spot_from_fix_rest_uri_next_request_ts' => :'INSTRUMENT_TRADE_SPOT_FROM_FIX_REST_URI_NEXT_REQUEST_TS',
        :'instrument_trade_spot_from_go_last_proxied_rest_request' => :'INSTRUMENT_TRADE_SPOT_FROM_GO_LAST_PROXIED_REST_REQUEST',
        :'instrument_trade_spot_from_go_rest_uri_last_request_ts' => :'INSTRUMENT_TRADE_SPOT_FROM_GO_REST_URI_LAST_REQUEST_TS',
        :'instrument_trade_spot_from_go_rest_uri_last_response_ts' => :'INSTRUMENT_TRADE_SPOT_FROM_GO_REST_URI_LAST_RESPONSE_TS',
        :'instrument_trade_spot_from_go_rest_uri_next_request_ts' => :'INSTRUMENT_TRADE_SPOT_FROM_GO_REST_URI_NEXT_REQUEST_TS',
        :'instrument_trade_spot_from_polling_last_proxied_rest_request' => :'INSTRUMENT_TRADE_SPOT_FROM_POLLING_LAST_PROXIED_REST_REQUEST',
        :'instrument_trade_spot_from_polling_rest_uri_last_request_ts' => :'INSTRUMENT_TRADE_SPOT_FROM_POLLING_REST_URI_LAST_REQUEST_TS',
        :'instrument_trade_spot_from_polling_rest_uri_last_response_ts' => :'INSTRUMENT_TRADE_SPOT_FROM_POLLING_REST_URI_LAST_RESPONSE_TS',
        :'instrument_trade_spot_from_polling_rest_uri_next_request_ts' => :'INSTRUMENT_TRADE_SPOT_FROM_POLLING_REST_URI_NEXT_REQUEST_TS',
        :'instrument_trade_spot_from_streaming_last_proxied_rest_request' => :'INSTRUMENT_TRADE_SPOT_FROM_STREAMING_LAST_PROXIED_REST_REQUEST',
        :'instrument_trade_spot_from_streaming_rest_uri_last_request_ts' => :'INSTRUMENT_TRADE_SPOT_FROM_STREAMING_REST_URI_LAST_REQUEST_TS',
        :'instrument_trade_spot_from_streaming_rest_uri_last_response_ts' => :'INSTRUMENT_TRADE_SPOT_FROM_STREAMING_REST_URI_LAST_RESPONSE_TS',
        :'instrument_trade_spot_from_streaming_rest_uri_next_request_ts' => :'INSTRUMENT_TRADE_SPOT_FROM_STREAMING_REST_URI_NEXT_REQUEST_TS',
        :'instrument_trade_spot_is_ready_for_streaming_integration' => :'INSTRUMENT_TRADE_SPOT_IS_READY_FOR_STREAMING_INTEGRATION',
        :'instrument_trade_spot_rest_uri' => :'INSTRUMENT_TRADE_SPOT_REST_URI',
        :'instrument_trade_spot_rest_url' => :'INSTRUMENT_TRADE_SPOT_REST_URL',
        :'instrument_trade_spot_streaming_subscription' => :'INSTRUMENT_TRADE_SPOT_STREAMING_SUBSCRIPTION',
        :'last_concurrent_batch_of_trades_spot_ms' => :'LAST_CONCURRENT_BATCH_OF_TRADES_SPOT_MS',
        :'last_seen_on_blob_ts' => :'LAST_SEEN_ON_BLOB_TS',
        :'last_seen_on_fix_ts' => :'LAST_SEEN_ON_FIX_TS',
        :'last_seen_on_hardcoded_ts' => :'LAST_SEEN_ON_HARDCODED_TS',
        :'last_seen_on_index_composition_ts' => :'LAST_SEEN_ON_INDEX_COMPOSITION_TS',
        :'last_seen_on_nsq_ts' => :'LAST_SEEN_ON_NSQ_TS',
        :'last_seen_on_polling_ts' => :'LAST_SEEN_ON_POLLING_TS',
        :'last_seen_on_streaming_ts' => :'LAST_SEEN_ON_STREAMING_TS',
        :'last_trade_spot_from_backfill' => :'LAST_TRADE_SPOT_FROM_BACKFILL',
        :'last_trade_spot_from_backfill_external' => :'LAST_TRADE_SPOT_FROM_BACKFILL_EXTERNAL',
        :'last_trade_spot_from_blob' => :'LAST_TRADE_SPOT_FROM_BLOB',
        :'last_trade_spot_from_blob_external' => :'LAST_TRADE_SPOT_FROM_BLOB_EXTERNAL',
        :'last_trade_spot_from_calculated' => :'LAST_TRADE_SPOT_FROM_CALCULATED',
        :'last_trade_spot_from_calculated_external' => :'LAST_TRADE_SPOT_FROM_CALCULATED_EXTERNAL',
        :'last_trade_spot_from_fix' => :'LAST_TRADE_SPOT_FROM_FIX',
        :'last_trade_spot_from_fix_external' => :'LAST_TRADE_SPOT_FROM_FIX_EXTERNAL',
        :'last_trade_spot_from_go' => :'LAST_TRADE_SPOT_FROM_GO',
        :'last_trade_spot_from_go_external' => :'LAST_TRADE_SPOT_FROM_GO_EXTERNAL',
        :'last_trade_spot_from_polling' => :'LAST_TRADE_SPOT_FROM_POLLING',
        :'last_trade_spot_from_polling_external' => :'LAST_TRADE_SPOT_FROM_POLLING_EXTERNAL',
        :'last_trade_spot_from_streaming' => :'LAST_TRADE_SPOT_FROM_STREAMING',
        :'last_trade_spot_from_streaming_external' => :'LAST_TRADE_SPOT_FROM_STREAMING_EXTERNAL',
        :'metadata_version' => :'METADATA_VERSION',
        :'processing_trades_from_blob_status' => :'PROCESSING_TRADES_FROM_BLOB_STATUS',
        :'total_trades_spot' => :'TOTAL_TRADES_SPOT',
        :'unstructured_trade_spot_from_backfill_internal_data' => :'UNSTRUCTURED_TRADE_SPOT_FROM_BACKFILL_INTERNAL_DATA',
        :'unstructured_trade_spot_from_blob_internal_data' => :'UNSTRUCTURED_TRADE_SPOT_FROM_BLOB_INTERNAL_DATA',
        :'unstructured_trade_spot_from_calculated_internal_data' => :'UNSTRUCTURED_TRADE_SPOT_FROM_CALCULATED_INTERNAL_DATA',
        :'unstructured_trade_spot_from_fix_internal_data' => :'UNSTRUCTURED_TRADE_SPOT_FROM_FIX_INTERNAL_DATA',
        :'unstructured_trade_spot_from_go_internal_data' => :'UNSTRUCTURED_TRADE_SPOT_FROM_GO_INTERNAL_DATA',
        :'unstructured_trade_spot_from_polling_internal_data' => :'UNSTRUCTURED_TRADE_SPOT_FROM_POLLING_INTERNAL_DATA',
        :'unstructured_trade_spot_from_streaming_internal_data' => :'UNSTRUCTURED_TRADE_SPOT_FROM_STREAMING_INTERNAL_DATA'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'first_seen_on_blob_ts' => :'Integer',
        :'first_seen_on_fix_ts' => :'Integer',
        :'first_seen_on_hardcoded_ts' => :'Integer',
        :'first_seen_on_index_composition_ts' => :'Integer',
        :'first_seen_on_nsq_ts' => :'Integer',
        :'first_seen_on_polling_ts' => :'Integer',
        :'first_seen_on_streaming_ts' => :'Integer',
        :'first_trade_spot_from_backfill' => :'Object',
        :'first_trade_spot_from_backfill_external' => :'Object',
        :'first_trade_spot_from_blob' => :'Object',
        :'first_trade_spot_from_blob_external' => :'Object',
        :'first_trade_spot_from_calculated' => :'Object',
        :'first_trade_spot_from_calculated_external' => :'Object',
        :'first_trade_spot_from_fix' => :'Object',
        :'first_trade_spot_from_fix_external' => :'Object',
        :'first_trade_spot_from_go' => :'Object',
        :'first_trade_spot_from_go_external' => :'Object',
        :'first_trade_spot_from_polling' => :'Object',
        :'first_trade_spot_from_polling_external' => :'Object',
        :'first_trade_spot_from_streaming' => :'Object',
        :'first_trade_spot_from_streaming_external' => :'Object',
        :'host_migration_destination' => :'String',
        :'host_migration_source' => :'String',
        :'host_migration_status' => :'String',
        :'instrument' => :'String',
        :'instrument_external_data' => :'String',
        :'instrument_mapping' => :'Object',
        :'instrument_mapping_history' => :'Array<String>',
        :'instrument_source_backfill' => :'String',
        :'instrument_source_blob' => :'String',
        :'instrument_source_calculated' => :'String',
        :'instrument_source_fix' => :'String',
        :'instrument_source_go' => :'String',
        :'instrument_source_polling' => :'String',
        :'instrument_source_streaming' => :'String',
        :'instrument_status' => :'String',
        :'instrument_trade_spot_from_backfill_last_proxied_rest_request' => :'Object',
        :'instrument_trade_spot_from_backfill_rest_uri_last_request_ts' => :'Integer',
        :'instrument_trade_spot_from_backfill_rest_uri_last_response_ts' => :'Integer',
        :'instrument_trade_spot_from_backfill_rest_uri_next_request_ts' => :'Integer',
        :'instrument_trade_spot_from_blob_last_proxied_rest_request' => :'Object',
        :'instrument_trade_spot_from_blob_rest_uri_last_request_ts' => :'Integer',
        :'instrument_trade_spot_from_blob_rest_uri_last_response_ts' => :'Integer',
        :'instrument_trade_spot_from_blob_rest_uri_next_request_ts' => :'Integer',
        :'instrument_trade_spot_from_calculated_last_proxied_rest_request' => :'Object',
        :'instrument_trade_spot_from_calculated_rest_uri_last_request_ts' => :'Integer',
        :'instrument_trade_spot_from_calculated_rest_uri_last_response_ts' => :'Integer',
        :'instrument_trade_spot_from_calculated_rest_uri_next_request_ts' => :'Integer',
        :'instrument_trade_spot_from_fix_last_proxied_rest_request' => :'Object',
        :'instrument_trade_spot_from_fix_rest_uri_last_request_ts' => :'Integer',
        :'instrument_trade_spot_from_fix_rest_uri_last_response_ts' => :'Integer',
        :'instrument_trade_spot_from_fix_rest_uri_next_request_ts' => :'Integer',
        :'instrument_trade_spot_from_go_last_proxied_rest_request' => :'Object',
        :'instrument_trade_spot_from_go_rest_uri_last_request_ts' => :'Integer',
        :'instrument_trade_spot_from_go_rest_uri_last_response_ts' => :'Integer',
        :'instrument_trade_spot_from_go_rest_uri_next_request_ts' => :'Integer',
        :'instrument_trade_spot_from_polling_last_proxied_rest_request' => :'Object',
        :'instrument_trade_spot_from_polling_rest_uri_last_request_ts' => :'Integer',
        :'instrument_trade_spot_from_polling_rest_uri_last_response_ts' => :'Integer',
        :'instrument_trade_spot_from_polling_rest_uri_next_request_ts' => :'Integer',
        :'instrument_trade_spot_from_streaming_last_proxied_rest_request' => :'Object',
        :'instrument_trade_spot_from_streaming_rest_uri_last_request_ts' => :'Integer',
        :'instrument_trade_spot_from_streaming_rest_uri_last_response_ts' => :'Integer',
        :'instrument_trade_spot_from_streaming_rest_uri_next_request_ts' => :'Integer',
        :'instrument_trade_spot_is_ready_for_streaming_integration' => :'Boolean',
        :'instrument_trade_spot_rest_uri' => :'String',
        :'instrument_trade_spot_rest_url' => :'String',
        :'instrument_trade_spot_streaming_subscription' => :'String',
        :'last_concurrent_batch_of_trades_spot_ms' => :'Integer',
        :'last_seen_on_blob_ts' => :'Integer',
        :'last_seen_on_fix_ts' => :'Integer',
        :'last_seen_on_hardcoded_ts' => :'Integer',
        :'last_seen_on_index_composition_ts' => :'Integer',
        :'last_seen_on_nsq_ts' => :'Integer',
        :'last_seen_on_polling_ts' => :'Integer',
        :'last_seen_on_streaming_ts' => :'Integer',
        :'last_trade_spot_from_backfill' => :'Object',
        :'last_trade_spot_from_backfill_external' => :'Object',
        :'last_trade_spot_from_blob' => :'Object',
        :'last_trade_spot_from_blob_external' => :'Object',
        :'last_trade_spot_from_calculated' => :'Object',
        :'last_trade_spot_from_calculated_external' => :'Object',
        :'last_trade_spot_from_fix' => :'Object',
        :'last_trade_spot_from_fix_external' => :'Object',
        :'last_trade_spot_from_go' => :'Object',
        :'last_trade_spot_from_go_external' => :'Object',
        :'last_trade_spot_from_polling' => :'Object',
        :'last_trade_spot_from_polling_external' => :'Object',
        :'last_trade_spot_from_streaming' => :'Object',
        :'last_trade_spot_from_streaming_external' => :'Object',
        :'metadata_version' => :'Integer',
        :'processing_trades_from_blob_status' => :'String',
        :'total_trades_spot' => :'Integer',
        :'unstructured_trade_spot_from_backfill_internal_data' => :'Object',
        :'unstructured_trade_spot_from_blob_internal_data' => :'Object',
        :'unstructured_trade_spot_from_calculated_internal_data' => :'Object',
        :'unstructured_trade_spot_from_fix_internal_data' => :'Object',
        :'unstructured_trade_spot_from_go_internal_data' => :'Object',
        :'unstructured_trade_spot_from_polling_internal_data' => :'Object',
        :'unstructured_trade_spot_from_streaming_internal_data' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::SPOTINSTRUMENTMETADATA` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::SPOTINSTRUMENTMETADATA`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'first_seen_on_blob_ts')
        self.first_seen_on_blob_ts = attributes[:'first_seen_on_blob_ts']
      end

      if attributes.key?(:'first_seen_on_fix_ts')
        self.first_seen_on_fix_ts = attributes[:'first_seen_on_fix_ts']
      end

      if attributes.key?(:'first_seen_on_hardcoded_ts')
        self.first_seen_on_hardcoded_ts = attributes[:'first_seen_on_hardcoded_ts']
      end

      if attributes.key?(:'first_seen_on_index_composition_ts')
        self.first_seen_on_index_composition_ts = attributes[:'first_seen_on_index_composition_ts']
      end

      if attributes.key?(:'first_seen_on_nsq_ts')
        self.first_seen_on_nsq_ts = attributes[:'first_seen_on_nsq_ts']
      end

      if attributes.key?(:'first_seen_on_polling_ts')
        self.first_seen_on_polling_ts = attributes[:'first_seen_on_polling_ts']
      end

      if attributes.key?(:'first_seen_on_streaming_ts')
        self.first_seen_on_streaming_ts = attributes[:'first_seen_on_streaming_ts']
      end

      if attributes.key?(:'first_trade_spot_from_backfill')
        self.first_trade_spot_from_backfill = attributes[:'first_trade_spot_from_backfill']
      end

      if attributes.key?(:'first_trade_spot_from_backfill_external')
        self.first_trade_spot_from_backfill_external = attributes[:'first_trade_spot_from_backfill_external']
      end

      if attributes.key?(:'first_trade_spot_from_blob')
        self.first_trade_spot_from_blob = attributes[:'first_trade_spot_from_blob']
      end

      if attributes.key?(:'first_trade_spot_from_blob_external')
        self.first_trade_spot_from_blob_external = attributes[:'first_trade_spot_from_blob_external']
      end

      if attributes.key?(:'first_trade_spot_from_calculated')
        self.first_trade_spot_from_calculated = attributes[:'first_trade_spot_from_calculated']
      end

      if attributes.key?(:'first_trade_spot_from_calculated_external')
        self.first_trade_spot_from_calculated_external = attributes[:'first_trade_spot_from_calculated_external']
      end

      if attributes.key?(:'first_trade_spot_from_fix')
        self.first_trade_spot_from_fix = attributes[:'first_trade_spot_from_fix']
      end

      if attributes.key?(:'first_trade_spot_from_fix_external')
        self.first_trade_spot_from_fix_external = attributes[:'first_trade_spot_from_fix_external']
      end

      if attributes.key?(:'first_trade_spot_from_go')
        self.first_trade_spot_from_go = attributes[:'first_trade_spot_from_go']
      end

      if attributes.key?(:'first_trade_spot_from_go_external')
        self.first_trade_spot_from_go_external = attributes[:'first_trade_spot_from_go_external']
      end

      if attributes.key?(:'first_trade_spot_from_polling')
        self.first_trade_spot_from_polling = attributes[:'first_trade_spot_from_polling']
      end

      if attributes.key?(:'first_trade_spot_from_polling_external')
        self.first_trade_spot_from_polling_external = attributes[:'first_trade_spot_from_polling_external']
      end

      if attributes.key?(:'first_trade_spot_from_streaming')
        self.first_trade_spot_from_streaming = attributes[:'first_trade_spot_from_streaming']
      end

      if attributes.key?(:'first_trade_spot_from_streaming_external')
        self.first_trade_spot_from_streaming_external = attributes[:'first_trade_spot_from_streaming_external']
      end

      if attributes.key?(:'host_migration_destination')
        self.host_migration_destination = attributes[:'host_migration_destination']
      end

      if attributes.key?(:'host_migration_source')
        self.host_migration_source = attributes[:'host_migration_source']
      end

      if attributes.key?(:'host_migration_status')
        self.host_migration_status = attributes[:'host_migration_status']
      end

      if attributes.key?(:'instrument')
        self.instrument = attributes[:'instrument']
      end

      if attributes.key?(:'instrument_external_data')
        self.instrument_external_data = attributes[:'instrument_external_data']
      end

      if attributes.key?(:'instrument_mapping')
        self.instrument_mapping = attributes[:'instrument_mapping']
      end

      if attributes.key?(:'instrument_mapping_history')
        if (value = attributes[:'instrument_mapping_history']).is_a?(Array)
          self.instrument_mapping_history = value
        end
      end

      if attributes.key?(:'instrument_source_backfill')
        self.instrument_source_backfill = attributes[:'instrument_source_backfill']
      end

      if attributes.key?(:'instrument_source_blob')
        self.instrument_source_blob = attributes[:'instrument_source_blob']
      end

      if attributes.key?(:'instrument_source_calculated')
        self.instrument_source_calculated = attributes[:'instrument_source_calculated']
      end

      if attributes.key?(:'instrument_source_fix')
        self.instrument_source_fix = attributes[:'instrument_source_fix']
      end

      if attributes.key?(:'instrument_source_go')
        self.instrument_source_go = attributes[:'instrument_source_go']
      end

      if attributes.key?(:'instrument_source_polling')
        self.instrument_source_polling = attributes[:'instrument_source_polling']
      end

      if attributes.key?(:'instrument_source_streaming')
        self.instrument_source_streaming = attributes[:'instrument_source_streaming']
      end

      if attributes.key?(:'instrument_status')
        self.instrument_status = attributes[:'instrument_status']
      else
        self.instrument_status = 'ACTIVE'
      end

      if attributes.key?(:'instrument_trade_spot_from_backfill_last_proxied_rest_request')
        self.instrument_trade_spot_from_backfill_last_proxied_rest_request = attributes[:'instrument_trade_spot_from_backfill_last_proxied_rest_request']
      end

      if attributes.key?(:'instrument_trade_spot_from_backfill_rest_uri_last_request_ts')
        self.instrument_trade_spot_from_backfill_rest_uri_last_request_ts = attributes[:'instrument_trade_spot_from_backfill_rest_uri_last_request_ts']
      end

      if attributes.key?(:'instrument_trade_spot_from_backfill_rest_uri_last_response_ts')
        self.instrument_trade_spot_from_backfill_rest_uri_last_response_ts = attributes[:'instrument_trade_spot_from_backfill_rest_uri_last_response_ts']
      end

      if attributes.key?(:'instrument_trade_spot_from_backfill_rest_uri_next_request_ts')
        self.instrument_trade_spot_from_backfill_rest_uri_next_request_ts = attributes[:'instrument_trade_spot_from_backfill_rest_uri_next_request_ts']
      end

      if attributes.key?(:'instrument_trade_spot_from_blob_last_proxied_rest_request')
        self.instrument_trade_spot_from_blob_last_proxied_rest_request = attributes[:'instrument_trade_spot_from_blob_last_proxied_rest_request']
      end

      if attributes.key?(:'instrument_trade_spot_from_blob_rest_uri_last_request_ts')
        self.instrument_trade_spot_from_blob_rest_uri_last_request_ts = attributes[:'instrument_trade_spot_from_blob_rest_uri_last_request_ts']
      end

      if attributes.key?(:'instrument_trade_spot_from_blob_rest_uri_last_response_ts')
        self.instrument_trade_spot_from_blob_rest_uri_last_response_ts = attributes[:'instrument_trade_spot_from_blob_rest_uri_last_response_ts']
      end

      if attributes.key?(:'instrument_trade_spot_from_blob_rest_uri_next_request_ts')
        self.instrument_trade_spot_from_blob_rest_uri_next_request_ts = attributes[:'instrument_trade_spot_from_blob_rest_uri_next_request_ts']
      end

      if attributes.key?(:'instrument_trade_spot_from_calculated_last_proxied_rest_request')
        self.instrument_trade_spot_from_calculated_last_proxied_rest_request = attributes[:'instrument_trade_spot_from_calculated_last_proxied_rest_request']
      end

      if attributes.key?(:'instrument_trade_spot_from_calculated_rest_uri_last_request_ts')
        self.instrument_trade_spot_from_calculated_rest_uri_last_request_ts = attributes[:'instrument_trade_spot_from_calculated_rest_uri_last_request_ts']
      end

      if attributes.key?(:'instrument_trade_spot_from_calculated_rest_uri_last_response_ts')
        self.instrument_trade_spot_from_calculated_rest_uri_last_response_ts = attributes[:'instrument_trade_spot_from_calculated_rest_uri_last_response_ts']
      end

      if attributes.key?(:'instrument_trade_spot_from_calculated_rest_uri_next_request_ts')
        self.instrument_trade_spot_from_calculated_rest_uri_next_request_ts = attributes[:'instrument_trade_spot_from_calculated_rest_uri_next_request_ts']
      end

      if attributes.key?(:'instrument_trade_spot_from_fix_last_proxied_rest_request')
        self.instrument_trade_spot_from_fix_last_proxied_rest_request = attributes[:'instrument_trade_spot_from_fix_last_proxied_rest_request']
      end

      if attributes.key?(:'instrument_trade_spot_from_fix_rest_uri_last_request_ts')
        self.instrument_trade_spot_from_fix_rest_uri_last_request_ts = attributes[:'instrument_trade_spot_from_fix_rest_uri_last_request_ts']
      end

      if attributes.key?(:'instrument_trade_spot_from_fix_rest_uri_last_response_ts')
        self.instrument_trade_spot_from_fix_rest_uri_last_response_ts = attributes[:'instrument_trade_spot_from_fix_rest_uri_last_response_ts']
      end

      if attributes.key?(:'instrument_trade_spot_from_fix_rest_uri_next_request_ts')
        self.instrument_trade_spot_from_fix_rest_uri_next_request_ts = attributes[:'instrument_trade_spot_from_fix_rest_uri_next_request_ts']
      end

      if attributes.key?(:'instrument_trade_spot_from_go_last_proxied_rest_request')
        self.instrument_trade_spot_from_go_last_proxied_rest_request = attributes[:'instrument_trade_spot_from_go_last_proxied_rest_request']
      end

      if attributes.key?(:'instrument_trade_spot_from_go_rest_uri_last_request_ts')
        self.instrument_trade_spot_from_go_rest_uri_last_request_ts = attributes[:'instrument_trade_spot_from_go_rest_uri_last_request_ts']
      end

      if attributes.key?(:'instrument_trade_spot_from_go_rest_uri_last_response_ts')
        self.instrument_trade_spot_from_go_rest_uri_last_response_ts = attributes[:'instrument_trade_spot_from_go_rest_uri_last_response_ts']
      end

      if attributes.key?(:'instrument_trade_spot_from_go_rest_uri_next_request_ts')
        self.instrument_trade_spot_from_go_rest_uri_next_request_ts = attributes[:'instrument_trade_spot_from_go_rest_uri_next_request_ts']
      end

      if attributes.key?(:'instrument_trade_spot_from_polling_last_proxied_rest_request')
        self.instrument_trade_spot_from_polling_last_proxied_rest_request = attributes[:'instrument_trade_spot_from_polling_last_proxied_rest_request']
      end

      if attributes.key?(:'instrument_trade_spot_from_polling_rest_uri_last_request_ts')
        self.instrument_trade_spot_from_polling_rest_uri_last_request_ts = attributes[:'instrument_trade_spot_from_polling_rest_uri_last_request_ts']
      end

      if attributes.key?(:'instrument_trade_spot_from_polling_rest_uri_last_response_ts')
        self.instrument_trade_spot_from_polling_rest_uri_last_response_ts = attributes[:'instrument_trade_spot_from_polling_rest_uri_last_response_ts']
      end

      if attributes.key?(:'instrument_trade_spot_from_polling_rest_uri_next_request_ts')
        self.instrument_trade_spot_from_polling_rest_uri_next_request_ts = attributes[:'instrument_trade_spot_from_polling_rest_uri_next_request_ts']
      end

      if attributes.key?(:'instrument_trade_spot_from_streaming_last_proxied_rest_request')
        self.instrument_trade_spot_from_streaming_last_proxied_rest_request = attributes[:'instrument_trade_spot_from_streaming_last_proxied_rest_request']
      end

      if attributes.key?(:'instrument_trade_spot_from_streaming_rest_uri_last_request_ts')
        self.instrument_trade_spot_from_streaming_rest_uri_last_request_ts = attributes[:'instrument_trade_spot_from_streaming_rest_uri_last_request_ts']
      end

      if attributes.key?(:'instrument_trade_spot_from_streaming_rest_uri_last_response_ts')
        self.instrument_trade_spot_from_streaming_rest_uri_last_response_ts = attributes[:'instrument_trade_spot_from_streaming_rest_uri_last_response_ts']
      end

      if attributes.key?(:'instrument_trade_spot_from_streaming_rest_uri_next_request_ts')
        self.instrument_trade_spot_from_streaming_rest_uri_next_request_ts = attributes[:'instrument_trade_spot_from_streaming_rest_uri_next_request_ts']
      end

      if attributes.key?(:'instrument_trade_spot_is_ready_for_streaming_integration')
        self.instrument_trade_spot_is_ready_for_streaming_integration = attributes[:'instrument_trade_spot_is_ready_for_streaming_integration']
      else
        self.instrument_trade_spot_is_ready_for_streaming_integration = false
      end

      if attributes.key?(:'instrument_trade_spot_rest_uri')
        self.instrument_trade_spot_rest_uri = attributes[:'instrument_trade_spot_rest_uri']
      end

      if attributes.key?(:'instrument_trade_spot_rest_url')
        self.instrument_trade_spot_rest_url = attributes[:'instrument_trade_spot_rest_url']
      end

      if attributes.key?(:'instrument_trade_spot_streaming_subscription')
        self.instrument_trade_spot_streaming_subscription = attributes[:'instrument_trade_spot_streaming_subscription']
      end

      if attributes.key?(:'last_concurrent_batch_of_trades_spot_ms')
        self.last_concurrent_batch_of_trades_spot_ms = attributes[:'last_concurrent_batch_of_trades_spot_ms']
      end

      if attributes.key?(:'last_seen_on_blob_ts')
        self.last_seen_on_blob_ts = attributes[:'last_seen_on_blob_ts']
      end

      if attributes.key?(:'last_seen_on_fix_ts')
        self.last_seen_on_fix_ts = attributes[:'last_seen_on_fix_ts']
      end

      if attributes.key?(:'last_seen_on_hardcoded_ts')
        self.last_seen_on_hardcoded_ts = attributes[:'last_seen_on_hardcoded_ts']
      end

      if attributes.key?(:'last_seen_on_index_composition_ts')
        self.last_seen_on_index_composition_ts = attributes[:'last_seen_on_index_composition_ts']
      end

      if attributes.key?(:'last_seen_on_nsq_ts')
        self.last_seen_on_nsq_ts = attributes[:'last_seen_on_nsq_ts']
      end

      if attributes.key?(:'last_seen_on_polling_ts')
        self.last_seen_on_polling_ts = attributes[:'last_seen_on_polling_ts']
      end

      if attributes.key?(:'last_seen_on_streaming_ts')
        self.last_seen_on_streaming_ts = attributes[:'last_seen_on_streaming_ts']
      end

      if attributes.key?(:'last_trade_spot_from_backfill')
        self.last_trade_spot_from_backfill = attributes[:'last_trade_spot_from_backfill']
      end

      if attributes.key?(:'last_trade_spot_from_backfill_external')
        self.last_trade_spot_from_backfill_external = attributes[:'last_trade_spot_from_backfill_external']
      end

      if attributes.key?(:'last_trade_spot_from_blob')
        self.last_trade_spot_from_blob = attributes[:'last_trade_spot_from_blob']
      end

      if attributes.key?(:'last_trade_spot_from_blob_external')
        self.last_trade_spot_from_blob_external = attributes[:'last_trade_spot_from_blob_external']
      end

      if attributes.key?(:'last_trade_spot_from_calculated')
        self.last_trade_spot_from_calculated = attributes[:'last_trade_spot_from_calculated']
      end

      if attributes.key?(:'last_trade_spot_from_calculated_external')
        self.last_trade_spot_from_calculated_external = attributes[:'last_trade_spot_from_calculated_external']
      end

      if attributes.key?(:'last_trade_spot_from_fix')
        self.last_trade_spot_from_fix = attributes[:'last_trade_spot_from_fix']
      end

      if attributes.key?(:'last_trade_spot_from_fix_external')
        self.last_trade_spot_from_fix_external = attributes[:'last_trade_spot_from_fix_external']
      end

      if attributes.key?(:'last_trade_spot_from_go')
        self.last_trade_spot_from_go = attributes[:'last_trade_spot_from_go']
      end

      if attributes.key?(:'last_trade_spot_from_go_external')
        self.last_trade_spot_from_go_external = attributes[:'last_trade_spot_from_go_external']
      end

      if attributes.key?(:'last_trade_spot_from_polling')
        self.last_trade_spot_from_polling = attributes[:'last_trade_spot_from_polling']
      end

      if attributes.key?(:'last_trade_spot_from_polling_external')
        self.last_trade_spot_from_polling_external = attributes[:'last_trade_spot_from_polling_external']
      end

      if attributes.key?(:'last_trade_spot_from_streaming')
        self.last_trade_spot_from_streaming = attributes[:'last_trade_spot_from_streaming']
      end

      if attributes.key?(:'last_trade_spot_from_streaming_external')
        self.last_trade_spot_from_streaming_external = attributes[:'last_trade_spot_from_streaming_external']
      end

      if attributes.key?(:'metadata_version')
        self.metadata_version = attributes[:'metadata_version']
      else
        self.metadata_version = 4
      end

      if attributes.key?(:'processing_trades_from_blob_status')
        self.processing_trades_from_blob_status = attributes[:'processing_trades_from_blob_status']
      end

      if attributes.key?(:'total_trades_spot')
        self.total_trades_spot = attributes[:'total_trades_spot']
      end

      if attributes.key?(:'unstructured_trade_spot_from_backfill_internal_data')
        self.unstructured_trade_spot_from_backfill_internal_data = attributes[:'unstructured_trade_spot_from_backfill_internal_data']
      end

      if attributes.key?(:'unstructured_trade_spot_from_blob_internal_data')
        self.unstructured_trade_spot_from_blob_internal_data = attributes[:'unstructured_trade_spot_from_blob_internal_data']
      end

      if attributes.key?(:'unstructured_trade_spot_from_calculated_internal_data')
        self.unstructured_trade_spot_from_calculated_internal_data = attributes[:'unstructured_trade_spot_from_calculated_internal_data']
      end

      if attributes.key?(:'unstructured_trade_spot_from_fix_internal_data')
        self.unstructured_trade_spot_from_fix_internal_data = attributes[:'unstructured_trade_spot_from_fix_internal_data']
      end

      if attributes.key?(:'unstructured_trade_spot_from_go_internal_data')
        self.unstructured_trade_spot_from_go_internal_data = attributes[:'unstructured_trade_spot_from_go_internal_data']
      end

      if attributes.key?(:'unstructured_trade_spot_from_polling_internal_data')
        self.unstructured_trade_spot_from_polling_internal_data = attributes[:'unstructured_trade_spot_from_polling_internal_data']
      end

      if attributes.key?(:'unstructured_trade_spot_from_streaming_internal_data')
        self.unstructured_trade_spot_from_streaming_internal_data = attributes[:'unstructured_trade_spot_from_streaming_internal_data']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          first_seen_on_blob_ts == o.first_seen_on_blob_ts &&
          first_seen_on_fix_ts == o.first_seen_on_fix_ts &&
          first_seen_on_hardcoded_ts == o.first_seen_on_hardcoded_ts &&
          first_seen_on_index_composition_ts == o.first_seen_on_index_composition_ts &&
          first_seen_on_nsq_ts == o.first_seen_on_nsq_ts &&
          first_seen_on_polling_ts == o.first_seen_on_polling_ts &&
          first_seen_on_streaming_ts == o.first_seen_on_streaming_ts &&
          first_trade_spot_from_backfill == o.first_trade_spot_from_backfill &&
          first_trade_spot_from_backfill_external == o.first_trade_spot_from_backfill_external &&
          first_trade_spot_from_blob == o.first_trade_spot_from_blob &&
          first_trade_spot_from_blob_external == o.first_trade_spot_from_blob_external &&
          first_trade_spot_from_calculated == o.first_trade_spot_from_calculated &&
          first_trade_spot_from_calculated_external == o.first_trade_spot_from_calculated_external &&
          first_trade_spot_from_fix == o.first_trade_spot_from_fix &&
          first_trade_spot_from_fix_external == o.first_trade_spot_from_fix_external &&
          first_trade_spot_from_go == o.first_trade_spot_from_go &&
          first_trade_spot_from_go_external == o.first_trade_spot_from_go_external &&
          first_trade_spot_from_polling == o.first_trade_spot_from_polling &&
          first_trade_spot_from_polling_external == o.first_trade_spot_from_polling_external &&
          first_trade_spot_from_streaming == o.first_trade_spot_from_streaming &&
          first_trade_spot_from_streaming_external == o.first_trade_spot_from_streaming_external &&
          host_migration_destination == o.host_migration_destination &&
          host_migration_source == o.host_migration_source &&
          host_migration_status == o.host_migration_status &&
          instrument == o.instrument &&
          instrument_external_data == o.instrument_external_data &&
          instrument_mapping == o.instrument_mapping &&
          instrument_mapping_history == o.instrument_mapping_history &&
          instrument_source_backfill == o.instrument_source_backfill &&
          instrument_source_blob == o.instrument_source_blob &&
          instrument_source_calculated == o.instrument_source_calculated &&
          instrument_source_fix == o.instrument_source_fix &&
          instrument_source_go == o.instrument_source_go &&
          instrument_source_polling == o.instrument_source_polling &&
          instrument_source_streaming == o.instrument_source_streaming &&
          instrument_status == o.instrument_status &&
          instrument_trade_spot_from_backfill_last_proxied_rest_request == o.instrument_trade_spot_from_backfill_last_proxied_rest_request &&
          instrument_trade_spot_from_backfill_rest_uri_last_request_ts == o.instrument_trade_spot_from_backfill_rest_uri_last_request_ts &&
          instrument_trade_spot_from_backfill_rest_uri_last_response_ts == o.instrument_trade_spot_from_backfill_rest_uri_last_response_ts &&
          instrument_trade_spot_from_backfill_rest_uri_next_request_ts == o.instrument_trade_spot_from_backfill_rest_uri_next_request_ts &&
          instrument_trade_spot_from_blob_last_proxied_rest_request == o.instrument_trade_spot_from_blob_last_proxied_rest_request &&
          instrument_trade_spot_from_blob_rest_uri_last_request_ts == o.instrument_trade_spot_from_blob_rest_uri_last_request_ts &&
          instrument_trade_spot_from_blob_rest_uri_last_response_ts == o.instrument_trade_spot_from_blob_rest_uri_last_response_ts &&
          instrument_trade_spot_from_blob_rest_uri_next_request_ts == o.instrument_trade_spot_from_blob_rest_uri_next_request_ts &&
          instrument_trade_spot_from_calculated_last_proxied_rest_request == o.instrument_trade_spot_from_calculated_last_proxied_rest_request &&
          instrument_trade_spot_from_calculated_rest_uri_last_request_ts == o.instrument_trade_spot_from_calculated_rest_uri_last_request_ts &&
          instrument_trade_spot_from_calculated_rest_uri_last_response_ts == o.instrument_trade_spot_from_calculated_rest_uri_last_response_ts &&
          instrument_trade_spot_from_calculated_rest_uri_next_request_ts == o.instrument_trade_spot_from_calculated_rest_uri_next_request_ts &&
          instrument_trade_spot_from_fix_last_proxied_rest_request == o.instrument_trade_spot_from_fix_last_proxied_rest_request &&
          instrument_trade_spot_from_fix_rest_uri_last_request_ts == o.instrument_trade_spot_from_fix_rest_uri_last_request_ts &&
          instrument_trade_spot_from_fix_rest_uri_last_response_ts == o.instrument_trade_spot_from_fix_rest_uri_last_response_ts &&
          instrument_trade_spot_from_fix_rest_uri_next_request_ts == o.instrument_trade_spot_from_fix_rest_uri_next_request_ts &&
          instrument_trade_spot_from_go_last_proxied_rest_request == o.instrument_trade_spot_from_go_last_proxied_rest_request &&
          instrument_trade_spot_from_go_rest_uri_last_request_ts == o.instrument_trade_spot_from_go_rest_uri_last_request_ts &&
          instrument_trade_spot_from_go_rest_uri_last_response_ts == o.instrument_trade_spot_from_go_rest_uri_last_response_ts &&
          instrument_trade_spot_from_go_rest_uri_next_request_ts == o.instrument_trade_spot_from_go_rest_uri_next_request_ts &&
          instrument_trade_spot_from_polling_last_proxied_rest_request == o.instrument_trade_spot_from_polling_last_proxied_rest_request &&
          instrument_trade_spot_from_polling_rest_uri_last_request_ts == o.instrument_trade_spot_from_polling_rest_uri_last_request_ts &&
          instrument_trade_spot_from_polling_rest_uri_last_response_ts == o.instrument_trade_spot_from_polling_rest_uri_last_response_ts &&
          instrument_trade_spot_from_polling_rest_uri_next_request_ts == o.instrument_trade_spot_from_polling_rest_uri_next_request_ts &&
          instrument_trade_spot_from_streaming_last_proxied_rest_request == o.instrument_trade_spot_from_streaming_last_proxied_rest_request &&
          instrument_trade_spot_from_streaming_rest_uri_last_request_ts == o.instrument_trade_spot_from_streaming_rest_uri_last_request_ts &&
          instrument_trade_spot_from_streaming_rest_uri_last_response_ts == o.instrument_trade_spot_from_streaming_rest_uri_last_response_ts &&
          instrument_trade_spot_from_streaming_rest_uri_next_request_ts == o.instrument_trade_spot_from_streaming_rest_uri_next_request_ts &&
          instrument_trade_spot_is_ready_for_streaming_integration == o.instrument_trade_spot_is_ready_for_streaming_integration &&
          instrument_trade_spot_rest_uri == o.instrument_trade_spot_rest_uri &&
          instrument_trade_spot_rest_url == o.instrument_trade_spot_rest_url &&
          instrument_trade_spot_streaming_subscription == o.instrument_trade_spot_streaming_subscription &&
          last_concurrent_batch_of_trades_spot_ms == o.last_concurrent_batch_of_trades_spot_ms &&
          last_seen_on_blob_ts == o.last_seen_on_blob_ts &&
          last_seen_on_fix_ts == o.last_seen_on_fix_ts &&
          last_seen_on_hardcoded_ts == o.last_seen_on_hardcoded_ts &&
          last_seen_on_index_composition_ts == o.last_seen_on_index_composition_ts &&
          last_seen_on_nsq_ts == o.last_seen_on_nsq_ts &&
          last_seen_on_polling_ts == o.last_seen_on_polling_ts &&
          last_seen_on_streaming_ts == o.last_seen_on_streaming_ts &&
          last_trade_spot_from_backfill == o.last_trade_spot_from_backfill &&
          last_trade_spot_from_backfill_external == o.last_trade_spot_from_backfill_external &&
          last_trade_spot_from_blob == o.last_trade_spot_from_blob &&
          last_trade_spot_from_blob_external == o.last_trade_spot_from_blob_external &&
          last_trade_spot_from_calculated == o.last_trade_spot_from_calculated &&
          last_trade_spot_from_calculated_external == o.last_trade_spot_from_calculated_external &&
          last_trade_spot_from_fix == o.last_trade_spot_from_fix &&
          last_trade_spot_from_fix_external == o.last_trade_spot_from_fix_external &&
          last_trade_spot_from_go == o.last_trade_spot_from_go &&
          last_trade_spot_from_go_external == o.last_trade_spot_from_go_external &&
          last_trade_spot_from_polling == o.last_trade_spot_from_polling &&
          last_trade_spot_from_polling_external == o.last_trade_spot_from_polling_external &&
          last_trade_spot_from_streaming == o.last_trade_spot_from_streaming &&
          last_trade_spot_from_streaming_external == o.last_trade_spot_from_streaming_external &&
          metadata_version == o.metadata_version &&
          processing_trades_from_blob_status == o.processing_trades_from_blob_status &&
          total_trades_spot == o.total_trades_spot &&
          unstructured_trade_spot_from_backfill_internal_data == o.unstructured_trade_spot_from_backfill_internal_data &&
          unstructured_trade_spot_from_blob_internal_data == o.unstructured_trade_spot_from_blob_internal_data &&
          unstructured_trade_spot_from_calculated_internal_data == o.unstructured_trade_spot_from_calculated_internal_data &&
          unstructured_trade_spot_from_fix_internal_data == o.unstructured_trade_spot_from_fix_internal_data &&
          unstructured_trade_spot_from_go_internal_data == o.unstructured_trade_spot_from_go_internal_data &&
          unstructured_trade_spot_from_polling_internal_data == o.unstructured_trade_spot_from_polling_internal_data &&
          unstructured_trade_spot_from_streaming_internal_data == o.unstructured_trade_spot_from_streaming_internal_data
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [first_seen_on_blob_ts, first_seen_on_fix_ts, first_seen_on_hardcoded_ts, first_seen_on_index_composition_ts, first_seen_on_nsq_ts, first_seen_on_polling_ts, first_seen_on_streaming_ts, first_trade_spot_from_backfill, first_trade_spot_from_backfill_external, first_trade_spot_from_blob, first_trade_spot_from_blob_external, first_trade_spot_from_calculated, first_trade_spot_from_calculated_external, first_trade_spot_from_fix, first_trade_spot_from_fix_external, first_trade_spot_from_go, first_trade_spot_from_go_external, first_trade_spot_from_polling, first_trade_spot_from_polling_external, first_trade_spot_from_streaming, first_trade_spot_from_streaming_external, host_migration_destination, host_migration_source, host_migration_status, instrument, instrument_external_data, instrument_mapping, instrument_mapping_history, instrument_source_backfill, instrument_source_blob, instrument_source_calculated, instrument_source_fix, instrument_source_go, instrument_source_polling, instrument_source_streaming, instrument_status, instrument_trade_spot_from_backfill_last_proxied_rest_request, instrument_trade_spot_from_backfill_rest_uri_last_request_ts, instrument_trade_spot_from_backfill_rest_uri_last_response_ts, instrument_trade_spot_from_backfill_rest_uri_next_request_ts, instrument_trade_spot_from_blob_last_proxied_rest_request, instrument_trade_spot_from_blob_rest_uri_last_request_ts, instrument_trade_spot_from_blob_rest_uri_last_response_ts, instrument_trade_spot_from_blob_rest_uri_next_request_ts, instrument_trade_spot_from_calculated_last_proxied_rest_request, instrument_trade_spot_from_calculated_rest_uri_last_request_ts, instrument_trade_spot_from_calculated_rest_uri_last_response_ts, instrument_trade_spot_from_calculated_rest_uri_next_request_ts, instrument_trade_spot_from_fix_last_proxied_rest_request, instrument_trade_spot_from_fix_rest_uri_last_request_ts, instrument_trade_spot_from_fix_rest_uri_last_response_ts, instrument_trade_spot_from_fix_rest_uri_next_request_ts, instrument_trade_spot_from_go_last_proxied_rest_request, instrument_trade_spot_from_go_rest_uri_last_request_ts, instrument_trade_spot_from_go_rest_uri_last_response_ts, instrument_trade_spot_from_go_rest_uri_next_request_ts, instrument_trade_spot_from_polling_last_proxied_rest_request, instrument_trade_spot_from_polling_rest_uri_last_request_ts, instrument_trade_spot_from_polling_rest_uri_last_response_ts, instrument_trade_spot_from_polling_rest_uri_next_request_ts, instrument_trade_spot_from_streaming_last_proxied_rest_request, instrument_trade_spot_from_streaming_rest_uri_last_request_ts, instrument_trade_spot_from_streaming_rest_uri_last_response_ts, instrument_trade_spot_from_streaming_rest_uri_next_request_ts, instrument_trade_spot_is_ready_for_streaming_integration, instrument_trade_spot_rest_uri, instrument_trade_spot_rest_url, instrument_trade_spot_streaming_subscription, last_concurrent_batch_of_trades_spot_ms, last_seen_on_blob_ts, last_seen_on_fix_ts, last_seen_on_hardcoded_ts, last_seen_on_index_composition_ts, last_seen_on_nsq_ts, last_seen_on_polling_ts, last_seen_on_streaming_ts, last_trade_spot_from_backfill, last_trade_spot_from_backfill_external, last_trade_spot_from_blob, last_trade_spot_from_blob_external, last_trade_spot_from_calculated, last_trade_spot_from_calculated_external, last_trade_spot_from_fix, last_trade_spot_from_fix_external, last_trade_spot_from_go, last_trade_spot_from_go_external, last_trade_spot_from_polling, last_trade_spot_from_polling_external, last_trade_spot_from_streaming, last_trade_spot_from_streaming_external, metadata_version, processing_trades_from_blob_status, total_trades_spot, unstructured_trade_spot_from_backfill_internal_data, unstructured_trade_spot_from_blob_internal_data, unstructured_trade_spot_from_calculated_internal_data, unstructured_trade_spot_from_fix_internal_data, unstructured_trade_spot_from_go_internal_data, unstructured_trade_spot_from_polling_internal_data, unstructured_trade_spot_from_streaming_internal_data].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
