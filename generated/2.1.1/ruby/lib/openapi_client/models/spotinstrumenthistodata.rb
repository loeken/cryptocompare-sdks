=begin
#CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry

#CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.

The version of the OpenAPI document: 2.1.1
Contact: data@cryptocompare.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.3.0-SNAPSHOT

=end

require 'date'
require 'time'

module OpenapiClient
  class SPOTINSTRUMENTHISTODATA
    # The mapped from asset (base / symbol/ coin) (e.g. BTC). Only available on instruments that have mapping.
    attr_accessor :base

    # The price of the last trade in this time period. If there were no trades in the time period, the open price will be given.
    attr_accessor :close

    # The price of the first trade in the time period. This is only available when there is at least one trade in the time period.
    attr_accessor :first_trade_price

    # The timestamp, in seconds, of the first trade in this time perio. This is only available when there is at least one trade in the time period.
    attr_accessor :first_trade_timestamp

    # The highest trade price in the time period. If there were no trades in the time period, the open price will be given.
    attr_accessor :high

    # The highest value of the trades in the time period. This is only available when there is at least one trade in the time period.
    attr_accessor :high_trade_price

    # The timestamp, in seconds, of the highest trade in the time period. This is only available when there is at least one trade in the time period.
    attr_accessor :high_trade_timestamp

    # The unmapped instrument ID
    attr_accessor :instrument

    # The last trade price in the time period. This is only available when there is at least one trade in the time period.
    attr_accessor :last_trade_price

    # The timestamp, in seconds, of the last trade in this time period. This is only available when there is at least one trade in the time period.
    attr_accessor :last_trade_timestamp

    # The lowest trade price in the time period. If there were no trades in the time period, the open price will be given.
    attr_accessor :low

    # The lowest value of the trades in the time period. This is only available when there is at least one trade in the time period.
    attr_accessor :low_trade_price

    # The timestamp, in seconds, of the lowest trade in the time period. This is only available when there is at least one trade in the time period.
    attr_accessor :low_trade_timestamp

    # The instrument ID, as derived from our mapping rules. This takes the form \"BASE-QUOTE\" (e.g. BTC-USD). Only available on instruments that have been mapped.
    attr_accessor :mapped_instrument

    # The market / exchange under consideration (e.g. gemini, kraken, coinbase, etc).
    attr_accessor :market

    # The open price for the historical period, this is based on the closest trade before the period start.
    attr_accessor :open

    # The mapped to asset (quote / counter symbol / coin) (e.g. USD). Only available on instruments that have mapping.
    attr_accessor :quote

    # The sum of all the trade volumes in the To asset (quote/counter symbol/coin) for the time period. If there were no trades in the time period, 0 will be returned.
    attr_accessor :quote_volume

    # The sum of all the BUY trade volumes in the to asset (quote/counter symbol/coin) for the time period.
    attr_accessor :quote_volume_buy

    # The sum of all the SELL trade volumes in the To asset (quote/counter symbol/coin) for the time period.
    attr_accessor :quote_volume_sell

    # The sum of all the UNKNOWN trade volumes in the To asset (quote/counter symbol/coin) for the time period.
    attr_accessor :quote_volume_unknown

    # The timestamp in seconds of the beginning of the histo period. For minute it would be every minute at the beginning of the minute, for hour it would be the start of the hour and for daily it is 00:00 GMT.
    attr_accessor :timestamp

    # The total number of trades seen in this time period. If there were no trades in the time period, 0 will be returned.
    attr_accessor :total_trades

    # The total number of BUY trades seen in this time period. If there were no trades in the time period, 0 will be returned.
    attr_accessor :total_trades_buy

    # The total number of SELL trades seen in this time period. If there were no trades in the time period, 0 will be returned.
    attr_accessor :total_trades_sell

    # The total number of UNKNOWN trades seen in this time period. If there were no trades in the time period, 0 will be returned.
    attr_accessor :total_trades_unknown

    # The type of the message.
    attr_accessor :type

    # The unit of the historical period update: MINUTE for minute, HOUR for hour and DAY for day.
    attr_accessor :unit

    # The sum of all the trade volumes in the from asset (base symbol / coin) for the time period. If there were no trades in the time period, 0 will be returned.
    attr_accessor :volume

    # The sum of all the BUY trade volumes in the from asset (base symbol / coin) for the time period.
    attr_accessor :volume_buy

    # The sum of all the SELL trade volumes in the from asset (base symbol / coin) for the time period.
    attr_accessor :volume_sell

    # The sum of all the UNKNOWN trade volumes in the from asset (base symbol / coin) for the time period.
    attr_accessor :volume_unknown

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'base' => :'BASE',
        :'close' => :'CLOSE',
        :'first_trade_price' => :'FIRST_TRADE_PRICE',
        :'first_trade_timestamp' => :'FIRST_TRADE_TIMESTAMP',
        :'high' => :'HIGH',
        :'high_trade_price' => :'HIGH_TRADE_PRICE',
        :'high_trade_timestamp' => :'HIGH_TRADE_TIMESTAMP',
        :'instrument' => :'INSTRUMENT',
        :'last_trade_price' => :'LAST_TRADE_PRICE',
        :'last_trade_timestamp' => :'LAST_TRADE_TIMESTAMP',
        :'low' => :'LOW',
        :'low_trade_price' => :'LOW_TRADE_PRICE',
        :'low_trade_timestamp' => :'LOW_TRADE_TIMESTAMP',
        :'mapped_instrument' => :'MAPPED_INSTRUMENT',
        :'market' => :'MARKET',
        :'open' => :'OPEN',
        :'quote' => :'QUOTE',
        :'quote_volume' => :'QUOTE_VOLUME',
        :'quote_volume_buy' => :'QUOTE_VOLUME_BUY',
        :'quote_volume_sell' => :'QUOTE_VOLUME_SELL',
        :'quote_volume_unknown' => :'QUOTE_VOLUME_UNKNOWN',
        :'timestamp' => :'TIMESTAMP',
        :'total_trades' => :'TOTAL_TRADES',
        :'total_trades_buy' => :'TOTAL_TRADES_BUY',
        :'total_trades_sell' => :'TOTAL_TRADES_SELL',
        :'total_trades_unknown' => :'TOTAL_TRADES_UNKNOWN',
        :'type' => :'TYPE',
        :'unit' => :'UNIT',
        :'volume' => :'VOLUME',
        :'volume_buy' => :'VOLUME_BUY',
        :'volume_sell' => :'VOLUME_SELL',
        :'volume_unknown' => :'VOLUME_UNKNOWN'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'base' => :'String',
        :'close' => :'Integer',
        :'first_trade_price' => :'Integer',
        :'first_trade_timestamp' => :'Integer',
        :'high' => :'Integer',
        :'high_trade_price' => :'Integer',
        :'high_trade_timestamp' => :'Integer',
        :'instrument' => :'String',
        :'last_trade_price' => :'Integer',
        :'last_trade_timestamp' => :'Integer',
        :'low' => :'Integer',
        :'low_trade_price' => :'Integer',
        :'low_trade_timestamp' => :'Integer',
        :'mapped_instrument' => :'String',
        :'market' => :'String',
        :'open' => :'Integer',
        :'quote' => :'String',
        :'quote_volume' => :'Integer',
        :'quote_volume_buy' => :'Integer',
        :'quote_volume_sell' => :'Integer',
        :'quote_volume_unknown' => :'Integer',
        :'timestamp' => :'Integer',
        :'total_trades' => :'Integer',
        :'total_trades_buy' => :'Integer',
        :'total_trades_sell' => :'Integer',
        :'total_trades_unknown' => :'Integer',
        :'type' => :'String',
        :'unit' => :'String',
        :'volume' => :'Integer',
        :'volume_buy' => :'Integer',
        :'volume_sell' => :'Integer',
        :'volume_unknown' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::SPOTINSTRUMENTHISTODATA` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::SPOTINSTRUMENTHISTODATA`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'base')
        self.base = attributes[:'base']
      end

      if attributes.key?(:'close')
        self.close = attributes[:'close']
      end

      if attributes.key?(:'first_trade_price')
        self.first_trade_price = attributes[:'first_trade_price']
      end

      if attributes.key?(:'first_trade_timestamp')
        self.first_trade_timestamp = attributes[:'first_trade_timestamp']
      end

      if attributes.key?(:'high')
        self.high = attributes[:'high']
      end

      if attributes.key?(:'high_trade_price')
        self.high_trade_price = attributes[:'high_trade_price']
      end

      if attributes.key?(:'high_trade_timestamp')
        self.high_trade_timestamp = attributes[:'high_trade_timestamp']
      end

      if attributes.key?(:'instrument')
        self.instrument = attributes[:'instrument']
      end

      if attributes.key?(:'last_trade_price')
        self.last_trade_price = attributes[:'last_trade_price']
      end

      if attributes.key?(:'last_trade_timestamp')
        self.last_trade_timestamp = attributes[:'last_trade_timestamp']
      end

      if attributes.key?(:'low')
        self.low = attributes[:'low']
      end

      if attributes.key?(:'low_trade_price')
        self.low_trade_price = attributes[:'low_trade_price']
      end

      if attributes.key?(:'low_trade_timestamp')
        self.low_trade_timestamp = attributes[:'low_trade_timestamp']
      end

      if attributes.key?(:'mapped_instrument')
        self.mapped_instrument = attributes[:'mapped_instrument']
      end

      if attributes.key?(:'market')
        self.market = attributes[:'market']
      end

      if attributes.key?(:'open')
        self.open = attributes[:'open']
      end

      if attributes.key?(:'quote')
        self.quote = attributes[:'quote']
      end

      if attributes.key?(:'quote_volume')
        self.quote_volume = attributes[:'quote_volume']
      end

      if attributes.key?(:'quote_volume_buy')
        self.quote_volume_buy = attributes[:'quote_volume_buy']
      end

      if attributes.key?(:'quote_volume_sell')
        self.quote_volume_sell = attributes[:'quote_volume_sell']
      end

      if attributes.key?(:'quote_volume_unknown')
        self.quote_volume_unknown = attributes[:'quote_volume_unknown']
      end

      if attributes.key?(:'timestamp')
        self.timestamp = attributes[:'timestamp']
      end

      if attributes.key?(:'total_trades')
        self.total_trades = attributes[:'total_trades']
      end

      if attributes.key?(:'total_trades_buy')
        self.total_trades_buy = attributes[:'total_trades_buy']
      end

      if attributes.key?(:'total_trades_sell')
        self.total_trades_sell = attributes[:'total_trades_sell']
      end

      if attributes.key?(:'total_trades_unknown')
        self.total_trades_unknown = attributes[:'total_trades_unknown']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'unit')
        self.unit = attributes[:'unit']
      end

      if attributes.key?(:'volume')
        self.volume = attributes[:'volume']
      end

      if attributes.key?(:'volume_buy')
        self.volume_buy = attributes[:'volume_buy']
      end

      if attributes.key?(:'volume_sell')
        self.volume_sell = attributes[:'volume_sell']
      end

      if attributes.key?(:'volume_unknown')
        self.volume_unknown = attributes[:'volume_unknown']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          base == o.base &&
          close == o.close &&
          first_trade_price == o.first_trade_price &&
          first_trade_timestamp == o.first_trade_timestamp &&
          high == o.high &&
          high_trade_price == o.high_trade_price &&
          high_trade_timestamp == o.high_trade_timestamp &&
          instrument == o.instrument &&
          last_trade_price == o.last_trade_price &&
          last_trade_timestamp == o.last_trade_timestamp &&
          low == o.low &&
          low_trade_price == o.low_trade_price &&
          low_trade_timestamp == o.low_trade_timestamp &&
          mapped_instrument == o.mapped_instrument &&
          market == o.market &&
          open == o.open &&
          quote == o.quote &&
          quote_volume == o.quote_volume &&
          quote_volume_buy == o.quote_volume_buy &&
          quote_volume_sell == o.quote_volume_sell &&
          quote_volume_unknown == o.quote_volume_unknown &&
          timestamp == o.timestamp &&
          total_trades == o.total_trades &&
          total_trades_buy == o.total_trades_buy &&
          total_trades_sell == o.total_trades_sell &&
          total_trades_unknown == o.total_trades_unknown &&
          type == o.type &&
          unit == o.unit &&
          volume == o.volume &&
          volume_buy == o.volume_buy &&
          volume_sell == o.volume_sell &&
          volume_unknown == o.volume_unknown
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [base, close, first_trade_price, first_trade_timestamp, high, high_trade_price, high_trade_timestamp, instrument, last_trade_price, last_trade_timestamp, low, low_trade_price, low_trade_timestamp, mapped_instrument, market, open, quote, quote_volume, quote_volume_buy, quote_volume_sell, quote_volume_unknown, timestamp, total_trades, total_trades_buy, total_trades_sell, total_trades_unknown, type, unit, volume, volume_buy, volume_sell, volume_unknown].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
