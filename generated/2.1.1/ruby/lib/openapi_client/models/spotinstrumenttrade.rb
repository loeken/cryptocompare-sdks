=begin
#CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry

#CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.

The version of the OpenAPI document: 2.1.1
Contact: data@cryptocompare.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.3.0-SNAPSHOT

=end

require 'date'
require 'time'

module OpenapiClient
  class SPOTINSTRUMENTTRADE
    # The mapped from asset (base / symbol/ coin). Only available on instruments that have been mapped (e.g. BTC).
    attr_accessor :base

    # Our internal sequence number for this trade, this is unique per market / exchange and trading pair. Should always be increasing by 1 for each new trade we discover, not in chronological order.
    attr_accessor :ccseq

    # The trade ID as reported by the market / exchange. If the exchange does not provide a trade ID, this will be the timestamp of the trade + a number from 0 - 999. This preserves uniqueness, assuming there would never be more than 999 trades in any given second.
    attr_accessor :id

    # The unmapped instrument ID as given by the exchange (e.g. BTCUSD, BTC_USD, XBT-ZUSD, BTC-USD).
    attr_accessor :instrument

    # The mapped instrument ID, as derived from our mapping rules. This takes the form: \"BASE-QUOTE\". Only available on instruments that have been mapped (e.g. BTC-USD).
    attr_accessor :mapped_instrument

    # The market / exchange under consideration (e.g. Coinbase, Kraken, etc.).
    attr_accessor :market

    # The price in the to instrument (quote / counter symbol / coin) of the trade. For a BTC-USD trade, this is how much was paid for one BTC in USD. For futures, this will be the price of the contract.
    attr_accessor :price

    # The volume of the trade, given in the from instrument (base symbol / coin/ contract). For a spot BTC-USD trade, this is how much BTC was traded at the trade price. For a futures BTCUSDPERP, this is the BTC equivalent for the contracts traded.
    attr_accessor :quantity

    # The mapped to asset (quote / counter symbol / coin). Only available on instruments that have been mapped (e.g. USD).
    attr_accessor :quote

    # The volume of the trade, given in the to instrument (quote / counter symbol / coin). This is equivalent to QUANTITY * PRICE. E.g. for a BTC-USD trade, this is how much USD was paid in total for the volume of BTC traded. For futures this is the quote currency equivalent for the contracts traded.
    attr_accessor :quote_quantity

    # The timestamp in seconds that the trade was received. This varies from the trade taking place on the market by a few millisconds to a few seconds depending on the market / exchange API options / rate limits.
    attr_accessor :received_timestamp

    # The nanosecond part of the received timestamp.
    attr_accessor :received_timestamp_ns

    # The side of the trade: SELL, BUY or UNKNOWN. If the exchange / api does not provide a side, \"UNKNOWN\" will be returned.
    attr_accessor :side

    # The source of the trade update: POLLING, STREAMING, GO, BLOB etc.
    attr_accessor :source

    # The timestamp in seconds as reported by the market / exchange or the received timestamp if the market / exchange does not provide one.
    attr_accessor :timestamp

    # The nanosecond part of the reported timestamp.
    attr_accessor :timestamp_ns

    # The type of the message.
    attr_accessor :type

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'base' => :'BASE',
        :'ccseq' => :'CCSEQ',
        :'id' => :'ID',
        :'instrument' => :'INSTRUMENT',
        :'mapped_instrument' => :'MAPPED_INSTRUMENT',
        :'market' => :'MARKET',
        :'price' => :'PRICE',
        :'quantity' => :'QUANTITY',
        :'quote' => :'QUOTE',
        :'quote_quantity' => :'QUOTE_QUANTITY',
        :'received_timestamp' => :'RECEIVED_TIMESTAMP',
        :'received_timestamp_ns' => :'RECEIVED_TIMESTAMP_NS',
        :'side' => :'SIDE',
        :'source' => :'SOURCE',
        :'timestamp' => :'TIMESTAMP',
        :'timestamp_ns' => :'TIMESTAMP_NS',
        :'type' => :'TYPE'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'base' => :'String',
        :'ccseq' => :'Integer',
        :'id' => :'String',
        :'instrument' => :'String',
        :'mapped_instrument' => :'String',
        :'market' => :'String',
        :'price' => :'Integer',
        :'quantity' => :'Integer',
        :'quote' => :'String',
        :'quote_quantity' => :'Integer',
        :'received_timestamp' => :'Integer',
        :'received_timestamp_ns' => :'Integer',
        :'side' => :'String',
        :'source' => :'String',
        :'timestamp' => :'Integer',
        :'timestamp_ns' => :'Integer',
        :'type' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::SPOTINSTRUMENTTRADE` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::SPOTINSTRUMENTTRADE`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'base')
        self.base = attributes[:'base']
      end

      if attributes.key?(:'ccseq')
        self.ccseq = attributes[:'ccseq']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'instrument')
        self.instrument = attributes[:'instrument']
      end

      if attributes.key?(:'mapped_instrument')
        self.mapped_instrument = attributes[:'mapped_instrument']
      end

      if attributes.key?(:'market')
        self.market = attributes[:'market']
      end

      if attributes.key?(:'price')
        self.price = attributes[:'price']
      end

      if attributes.key?(:'quantity')
        self.quantity = attributes[:'quantity']
      end

      if attributes.key?(:'quote')
        self.quote = attributes[:'quote']
      end

      if attributes.key?(:'quote_quantity')
        self.quote_quantity = attributes[:'quote_quantity']
      end

      if attributes.key?(:'received_timestamp')
        self.received_timestamp = attributes[:'received_timestamp']
      end

      if attributes.key?(:'received_timestamp_ns')
        self.received_timestamp_ns = attributes[:'received_timestamp_ns']
      end

      if attributes.key?(:'side')
        self.side = attributes[:'side']
      end

      if attributes.key?(:'source')
        self.source = attributes[:'source']
      end

      if attributes.key?(:'timestamp')
        self.timestamp = attributes[:'timestamp']
      end

      if attributes.key?(:'timestamp_ns')
        self.timestamp_ns = attributes[:'timestamp_ns']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          base == o.base &&
          ccseq == o.ccseq &&
          id == o.id &&
          instrument == o.instrument &&
          mapped_instrument == o.mapped_instrument &&
          market == o.market &&
          price == o.price &&
          quantity == o.quantity &&
          quote == o.quote &&
          quote_quantity == o.quote_quantity &&
          received_timestamp == o.received_timestamp &&
          received_timestamp_ns == o.received_timestamp_ns &&
          side == o.side &&
          source == o.source &&
          timestamp == o.timestamp &&
          timestamp_ns == o.timestamp_ns &&
          type == o.type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [base, ccseq, id, instrument, mapped_instrument, market, price, quantity, quote, quote_quantity, received_timestamp, received_timestamp_ns, side, source, timestamp, timestamp_ns, type].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
