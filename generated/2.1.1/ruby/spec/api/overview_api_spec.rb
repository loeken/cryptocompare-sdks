=begin
#CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry

#CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.

The version of the OpenAPI document: 2.1.1
Contact: data@cryptocompare.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.3.0-SNAPSHOT

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::OverviewApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'OverviewApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::OverviewApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of OverviewApi' do
    it 'should create an instance of OverviewApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::OverviewApi)
    end
  end

  # unit tests for overview_v1_historical_marketcap_all_assets_days
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :groups When requesting all market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME
  # @option opts [Integer] :limit The number of data points to return
  # @option opts [Integer] :to_ts Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
  # @option opts [Integer] :aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
  # @option opts [Boolean] :fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
  # @option opts [String] :response_format The format of the data response in uppercase. It can be one of the following: JSON,CSV
  # @return [GENERICRESPONSE]
  describe 'overview_v1_historical_marketcap_all_assets_days test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for overview_v1_historical_marketcap_all_assets_hours
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :groups When requesting all market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME
  # @option opts [Integer] :limit The number of data points to return
  # @option opts [Integer] :to_ts Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
  # @option opts [Integer] :aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
  # @option opts [Boolean] :fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
  # @option opts [String] :response_format The format of the data response in uppercase. It can be one of the following: JSON,CSV
  # @return [GENERICRESPONSE]
  describe 'overview_v1_historical_marketcap_all_assets_hours test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for overview_v1_historical_marketcap_ftw_assets_days
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :groups When requesting ftw universe market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME
  # @option opts [Integer] :limit The number of data points to return
  # @option opts [Integer] :to_ts Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
  # @option opts [Integer] :aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
  # @option opts [Boolean] :fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
  # @option opts [String] :response_format The format of the data response in uppercase. It can be one of the following: JSON,CSV
  # @return [GENERICRESPONSE]
  describe 'overview_v1_historical_marketcap_ftw_assets_days test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for overview_v1_historical_marketcap_ftw_assets_hours
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :groups When requesting ftw universe market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME
  # @option opts [Integer] :limit The number of data points to return
  # @option opts [Integer] :to_ts Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
  # @option opts [Integer] :aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
  # @option opts [Boolean] :fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
  # @option opts [String] :response_format The format of the data response in uppercase. It can be one of the following: JSON,CSV
  # @return [GENERICRESPONSE]
  describe 'overview_v1_historical_marketcap_ftw_assets_hours test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for overview_v1_latest_marketcap_all_tick
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :groups When requesting all market cap tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,MOVING_24_HOUR
  # @return [GENERICRESPONSE]
  describe 'overview_v1_latest_marketcap_all_tick test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for overview_v1_latest_marketcap_ftw_tick
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :groups When requesting ftw universe market cap tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,MOVING_24_HOUR
  # @return [GENERICRESPONSE]
  describe 'overview_v1_latest_marketcap_ftw_tick test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
