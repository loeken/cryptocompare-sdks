=begin
#CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry

#CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.

The version of the OpenAPI document: 2.1.1
Contact: data@cryptocompare.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.3.0-SNAPSHOT

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::FuturesApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'FuturesApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::FuturesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of FuturesApi' do
    it 'should create an instance of FuturesApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::FuturesApi)
    end
  end

  # unit tests for futures_v1_historical_days
  # @param market The exchange to obtain data from
  # @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME
  # @option opts [Integer] :limit The number of data points to return
  # @option opts [Integer] :to_ts Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
  # @option opts [Integer] :aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
  # @option opts [Boolean] :fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
  # @option opts [String] :mapping_priority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
  # @option opts [String] :response_format The format of the data response in uppercase. It can be one of the following: JSON,CSV
  # @return [GENERICRESPONSE]
  describe 'futures_v1_historical_days test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for futures_v1_historical_funding_rate_days
  # @param market The exchange to obtain data from
  # @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,OHLC,OHLC_MESSAGE,MESSAGE
  # @option opts [Integer] :limit The number of data points to return
  # @option opts [Integer] :to_ts Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
  # @option opts [Integer] :aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
  # @option opts [Boolean] :fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
  # @option opts [String] :mapping_priority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
  # @option opts [String] :response_format The format of the data response in uppercase. It can be one of the following: JSON,CSV
  # @return [GENERICRESPONSE]
  describe 'futures_v1_historical_funding_rate_days test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for futures_v1_historical_funding_rate_hours
  # @param market The exchange to obtain data from
  # @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,OHLC,OHLC_MESSAGE,MESSAGE
  # @option opts [Integer] :limit The number of data points to return
  # @option opts [Integer] :to_ts Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
  # @option opts [Integer] :aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
  # @option opts [Boolean] :fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
  # @option opts [String] :mapping_priority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
  # @option opts [String] :response_format The format of the data response in uppercase. It can be one of the following: JSON,CSV
  # @return [GENERICRESPONSE]
  describe 'futures_v1_historical_funding_rate_hours test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for futures_v1_historical_funding_rate_messages
  # @param market The exchange to obtain data from
  # @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :after_ts Unix timestamp in seconds of the earliest funding rate message in the response
  # @option opts [Integer] :last_ccseq The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request.
  # @option opts [Integer] :limit The maximum number of funding rate messages to return
  # @option opts [String] :mapping_priority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
  # @option opts [String] :response_format The format of the data response in uppercase. It can be one of the following: JSON,CSV
  # @option opts [Boolean] :return_404_on_empty_response If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.
  # @return [GENERICRESPONSE]
  describe 'futures_v1_historical_funding_rate_messages test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for futures_v1_historical_funding_rate_messages_hour
  # @param market The exchange to obtain data from
  # @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :hour_ts Unix timestamp in seconds for the hour containing the funding rate updates you are interested in. You can pass any timestamp in the hour but we will round it down the the full hour timestmap and return all funding rate updates in that hour.
  # @option opts [String] :mapping_priority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
  # @option opts [String] :response_format The format of the data response in uppercase. It can be one of the following: JSON,CSV
  # @option opts [Boolean] :return_404_on_empty_response If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.
  # @return [GENERICRESPONSE]
  describe 'futures_v1_historical_funding_rate_messages_hour test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for futures_v1_historical_funding_rate_minutes
  # @param market The exchange to obtain data from
  # @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,OHLC,OHLC_MESSAGE,MESSAGE
  # @option opts [Integer] :limit The number of data points to return
  # @option opts [Integer] :to_ts Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
  # @option opts [Integer] :aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
  # @option opts [Boolean] :fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
  # @option opts [String] :mapping_priority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
  # @option opts [String] :response_format The format of the data response in uppercase. It can be one of the following: JSON,CSV
  # @return [GENERICRESPONSE]
  describe 'futures_v1_historical_funding_rate_minutes test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for futures_v1_historical_hours
  # @param market The exchange to obtain data from
  # @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME
  # @option opts [Integer] :limit The number of data points to return
  # @option opts [Integer] :to_ts Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
  # @option opts [Integer] :aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
  # @option opts [Boolean] :fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
  # @option opts [String] :mapping_priority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
  # @option opts [String] :response_format The format of the data response in uppercase. It can be one of the following: JSON,CSV
  # @return [GENERICRESPONSE]
  describe 'futures_v1_historical_hours test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for futures_v1_historical_minutes
  # @param market The exchange to obtain data from
  # @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME
  # @option opts [Integer] :limit The number of data points to return
  # @option opts [Integer] :to_ts Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
  # @option opts [Integer] :aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
  # @option opts [Boolean] :fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
  # @option opts [String] :mapping_priority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
  # @option opts [String] :response_format The format of the data response in uppercase. It can be one of the following: JSON,CSV
  # @return [GENERICRESPONSE]
  describe 'futures_v1_historical_minutes test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for futures_v1_historical_open_interest_days
  # @param market The exchange to obtain data from
  # @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_MESSAGE,MESSAGE
  # @option opts [Integer] :limit The number of data points to return
  # @option opts [Integer] :to_ts Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
  # @option opts [Integer] :aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
  # @option opts [Boolean] :fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
  # @option opts [String] :mapping_priority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
  # @option opts [String] :response_format The format of the data response in uppercase. It can be one of the following: JSON,CSV
  # @return [GENERICRESPONSE]
  describe 'futures_v1_historical_open_interest_days test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for futures_v1_historical_open_interest_hours
  # @param market The exchange to obtain data from
  # @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_MESSAGE,MESSAGE
  # @option opts [Integer] :limit The number of data points to return
  # @option opts [Integer] :to_ts Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
  # @option opts [Integer] :aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
  # @option opts [Boolean] :fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
  # @option opts [String] :mapping_priority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
  # @option opts [String] :response_format The format of the data response in uppercase. It can be one of the following: JSON,CSV
  # @return [GENERICRESPONSE]
  describe 'futures_v1_historical_open_interest_hours test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for futures_v1_historical_open_interest_messages
  # @param market The exchange to obtain data from
  # @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :after_ts Unix timestamp in seconds of the earliest open interest message in the response
  # @option opts [Integer] :last_ccseq The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request.
  # @option opts [Integer] :limit The maximum number of open interest messages to return
  # @option opts [String] :mapping_priority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
  # @option opts [String] :response_format The format of the data response in uppercase. It can be one of the following: JSON,CSV
  # @option opts [Boolean] :return_404_on_empty_response If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.
  # @return [GENERICRESPONSE]
  describe 'futures_v1_historical_open_interest_messages test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for futures_v1_historical_open_interest_messages_hour
  # @param market The exchange to obtain data from
  # @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :hour_ts Unix timestamp in seconds for the hour containing the open interest updates you are interested in. You can pass any timestamp in the hour but we will round it down the the full hour timestmap and return all open interest updates in that hour.
  # @option opts [String] :mapping_priority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
  # @option opts [String] :response_format The format of the data response in uppercase. It can be one of the following: JSON,CSV
  # @option opts [Boolean] :return_404_on_empty_response If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.
  # @return [GENERICRESPONSE]
  describe 'futures_v1_historical_open_interest_messages_hour test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for futures_v1_historical_open_interest_minutes
  # @param market The exchange to obtain data from
  # @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_MESSAGE,MESSAGE
  # @option opts [Integer] :limit The number of data points to return
  # @option opts [Integer] :to_ts Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
  # @option opts [Integer] :aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
  # @option opts [Boolean] :fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
  # @option opts [String] :mapping_priority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
  # @option opts [String] :response_format The format of the data response in uppercase. It can be one of the following: JSON,CSV
  # @return [GENERICRESPONSE]
  describe 'futures_v1_historical_open_interest_minutes test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for futures_v1_historical_trades
  # @param market The exchange to obtain data from
  # @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :after_ts Unix timestamp in seconds of the earliest trade in the response.
  # @option opts [Integer] :last_ccseq The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request.
  # @option opts [Integer] :limit The maximum number of trades to return
  # @option opts [String] :mapping_priority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
  # @option opts [String] :response_format The format of the data response in uppercase. It can be one of the following: JSON,CSV
  # @option opts [Boolean] :return_404_on_empty_response If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.
  # @return [GENERICRESPONSE]
  describe 'futures_v1_historical_trades test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for futures_v1_historical_trades_hour
  # @param market The exchange to obtain data from
  # @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :hour_ts Unix timestamp in seconds for the hour containing the trades you are interested in. You can pass any timestamp within an hour but we will round it down the the full hour timestmap and return all trades in that hour.
  # @option opts [String] :mapping_priority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
  # @option opts [String] :response_format The format of the data response in uppercase. It can be one of the following: JSON,CSV
  # @option opts [Boolean] :return_404_on_empty_response If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.
  # @return [GENERICRESPONSE]
  describe 'futures_v1_historical_trades_hour test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for futures_v1_latest_funding_rate_tick
  # @param market The exchange to obtain data from
  # @param instruments A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :groups When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME
  # @option opts [String] :mapping_priority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
  # @return [GENERICRESPONSE]
  describe 'futures_v1_latest_funding_rate_tick test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for futures_v1_latest_instrument_metadata
  # @param market The exchange to obtain data from
  # @param instruments A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :groups When requesting metadata entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: STATUS,INTERNAL,GENERAL,MIGRATION,SOURCE
  # @option opts [String] :mapping_priority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
  # @return [GENERICRESPONSE]
  describe 'futures_v1_latest_instrument_metadata test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for futures_v1_latest_open_interest_tick
  # @param market The exchange to obtain data from
  # @param instruments A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :groups When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME
  # @option opts [String] :mapping_priority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
  # @return [GENERICRESPONSE]
  describe 'futures_v1_latest_open_interest_tick test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for futures_v1_latest_tick
  # @param market The exchange to obtain data from
  # @param instruments A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :groups When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,LAST_UPDATE,TOP_OF_BOOK,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME
  # @option opts [String] :mapping_priority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
  # @return [GENERICRESPONSE]
  describe 'futures_v1_latest_tick test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for futures_v1_markets
  # @param [Hash] opts the optional parameters
  # @option opts [String] :market The exchange to obtain data from
  # @return [GENERICRESPONSE]
  describe 'futures_v1_markets test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for futures_v1_markets_instruments
  # @param [Hash] opts the optional parameters
  # @option opts [String] :market The exchange to obtain data from
  # @option opts [String] :instrument The mapped instrument to retrieve on a specific market.
  # @option opts [Array<String>] :instrument_status The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED
  # @return [GENERICRESPONSE]
  describe 'futures_v1_markets_instruments test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for futures_v1_markets_instruments_unmapped
  # @param [Hash] opts the optional parameters
  # @option opts [String] :market The exchange to obtain data from
  # @option opts [String] :instrument The unmapped instrument to retrieve on a specific market.
  # @option opts [Array<String>] :instrument_status The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED
  # @return [GENERICRESPONSE]
  describe 'futures_v1_markets_instruments_unmapped test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for index_v1_historical_days
  # @param market The exchange to obtain data from
  # @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME
  # @option opts [Integer] :limit The number of data points to return
  # @option opts [Integer] :to_ts Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
  # @option opts [Integer] :aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
  # @option opts [Boolean] :fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
  # @option opts [String] :mapping_priority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
  # @option opts [String] :response_format The format of the data response in uppercase. It can be one of the following: JSON,CSV
  # @return [GENERICRESPONSE]
  describe 'index_v1_historical_days test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for index_v1_historical_hours
  # @param market The exchange to obtain data from
  # @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME
  # @option opts [Integer] :limit The number of data points to return
  # @option opts [Integer] :to_ts Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
  # @option opts [Integer] :aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
  # @option opts [Boolean] :fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
  # @option opts [String] :mapping_priority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
  # @option opts [String] :response_format The format of the data response in uppercase. It can be one of the following: JSON,CSV
  # @return [GENERICRESPONSE]
  describe 'index_v1_historical_hours test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for index_v1_historical_messages
  # @param market The exchange to obtain data from
  # @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :after_ts Unix timestamp in seconds of the earliest index message in the response
  # @option opts [Integer] :last_ccseq The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request.
  # @option opts [Integer] :limit The maximum number of index messages to return
  # @option opts [String] :mapping_priority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
  # @option opts [String] :response_format The format of the data response in uppercase. It can be one of the following: JSON,CSV
  # @option opts [Boolean] :return_404_on_empty_response If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.
  # @return [GENERICRESPONSE]
  describe 'index_v1_historical_messages test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for index_v1_historical_messages_hour
  # @param market The exchange to obtain data from
  # @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :hour_ts Unix timestamp in seconds for the hour containing the index updates you are interested in. You can pass any timestamp in the hour but we will round it down the the full hour timestmap and return all index updates in that hour.
  # @option opts [String] :mapping_priority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
  # @option opts [String] :response_format The format of the data response in uppercase. It can be one of the following: JSON,CSV
  # @option opts [Boolean] :return_404_on_empty_response If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.
  # @return [GENERICRESPONSE]
  describe 'index_v1_historical_messages_hour test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for index_v1_historical_minutes
  # @param market The exchange to obtain data from
  # @param instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME
  # @option opts [Integer] :limit The number of data points to return
  # @option opts [Integer] :to_ts Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
  # @option opts [Integer] :aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
  # @option opts [Boolean] :fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
  # @option opts [String] :mapping_priority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
  # @option opts [String] :response_format The format of the data response in uppercase. It can be one of the following: JSON,CSV
  # @return [GENERICRESPONSE]
  describe 'index_v1_historical_minutes test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for index_v1_latest_instrument_metadata
  # @param market The exchange to obtain data from
  # @param instruments A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :groups When requesting metadata entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: STATUS,INTERNAL,GENERAL,MIGRATION,SOURCE
  # @option opts [String] :mapping_priority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
  # @return [GENERICRESPONSE]
  describe 'index_v1_latest_instrument_metadata test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for index_v1_latest_tick
  # @param market The exchange to obtain data from
  # @param instruments A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :groups When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME
  # @option opts [String] :mapping_priority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
  # @return [GENERICRESPONSE]
  describe 'index_v1_latest_tick test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for index_v1_markets
  # @param [Hash] opts the optional parameters
  # @option opts [String] :market The exchange to obtain data from
  # @return [GENERICRESPONSE]
  describe 'index_v1_markets test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for index_v1_markets_instruments
  # @param [Hash] opts the optional parameters
  # @option opts [String] :market The exchange to obtain data from
  # @option opts [String] :instrument The mapped instrument to retrieve on a specific market.
  # @option opts [Array<String>] :instrument_status The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED
  # @return [GENERICRESPONSE]
  describe 'index_v1_markets_instruments test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for index_v1_markets_instruments_unmapped
  # @param [Hash] opts the optional parameters
  # @option opts [String] :market The exchange to obtain data from
  # @option opts [String] :instrument The unmapped instrument to retrieve on a specific market.
  # @option opts [Array<String>] :instrument_status The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED
  # @return [GENERICRESPONSE]
  describe 'index_v1_markets_instruments_unmapped test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
