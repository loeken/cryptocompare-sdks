/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.OverviewApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * CryptoCompare is the world&#39;s leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 * Version: 2.1.1
 * Generated by: org.openapitools.codegen.languages.JavascriptClosureAngularClientCodegen
 */
/**
 * @license CryptoCompare API License Agreement
 * https://www.cryptocompare.com/api-licence-agreement/
 */

goog.provide('API.Client.OverviewApi');

goog.require('API.Client.Error');
goog.require('API.Client.GENERIC_RESPONSE');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.OverviewApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('OverviewApiBasePath') ?
                   /** @type {!string} */ ($injector.get('OverviewApiBasePath')) :
                   'https://data-api.cryptocompare.com';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('OverviewApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('OverviewApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.OverviewApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * 
 * 
 * @param {!Array<!string>=} opt_groups When requesting all market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME
 * @param {!number=} opt_limit The number of data points to return
 * @param {!number=} opt_toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
 * @param {!number=} opt_aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
 * @param {!boolean=} opt_fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
 * @param {!string=} opt_responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.GENERIC_RESPONSE>}
 */
API.Client.OverviewApi.prototype.overviewV1HistoricalMarketcapAllAssetsDays = function(opt_groups, opt_limit, opt_toTs, opt_aggregate, opt_fill, opt_responseFormat, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/overview/v1/historical/marketcap/all/assets/days';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_groups !== undefined) {
    queryParameters['groups'] = opt_groups;
  }

  if (opt_limit !== undefined) {
    queryParameters['limit'] = opt_limit;
  }

  if (opt_toTs !== undefined) {
    queryParameters['to_ts'] = opt_toTs;
  }

  if (opt_aggregate !== undefined) {
    queryParameters['aggregate'] = opt_aggregate;
  }

  if (opt_fill !== undefined) {
    queryParameters['fill'] = opt_fill;
  }

  if (opt_responseFormat !== undefined) {
    queryParameters['response_format'] = opt_responseFormat;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!Array<!string>=} opt_groups When requesting all market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME
 * @param {!number=} opt_limit The number of data points to return
 * @param {!number=} opt_toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
 * @param {!number=} opt_aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
 * @param {!boolean=} opt_fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
 * @param {!string=} opt_responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.GENERIC_RESPONSE>}
 */
API.Client.OverviewApi.prototype.overviewV1HistoricalMarketcapAllAssetsHours = function(opt_groups, opt_limit, opt_toTs, opt_aggregate, opt_fill, opt_responseFormat, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/overview/v1/historical/marketcap/all/assets/hours';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_groups !== undefined) {
    queryParameters['groups'] = opt_groups;
  }

  if (opt_limit !== undefined) {
    queryParameters['limit'] = opt_limit;
  }

  if (opt_toTs !== undefined) {
    queryParameters['to_ts'] = opt_toTs;
  }

  if (opt_aggregate !== undefined) {
    queryParameters['aggregate'] = opt_aggregate;
  }

  if (opt_fill !== undefined) {
    queryParameters['fill'] = opt_fill;
  }

  if (opt_responseFormat !== undefined) {
    queryParameters['response_format'] = opt_responseFormat;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!Array<!string>=} opt_groups When requesting ftw universe market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME
 * @param {!number=} opt_limit The number of data points to return
 * @param {!number=} opt_toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
 * @param {!number=} opt_aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
 * @param {!boolean=} opt_fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
 * @param {!string=} opt_responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.GENERIC_RESPONSE>}
 */
API.Client.OverviewApi.prototype.overviewV1HistoricalMarketcapFtwAssetsDays = function(opt_groups, opt_limit, opt_toTs, opt_aggregate, opt_fill, opt_responseFormat, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/overview/v1/historical/marketcap/ftw/assets/days';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_groups !== undefined) {
    queryParameters['groups'] = opt_groups;
  }

  if (opt_limit !== undefined) {
    queryParameters['limit'] = opt_limit;
  }

  if (opt_toTs !== undefined) {
    queryParameters['to_ts'] = opt_toTs;
  }

  if (opt_aggregate !== undefined) {
    queryParameters['aggregate'] = opt_aggregate;
  }

  if (opt_fill !== undefined) {
    queryParameters['fill'] = opt_fill;
  }

  if (opt_responseFormat !== undefined) {
    queryParameters['response_format'] = opt_responseFormat;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!Array<!string>=} opt_groups When requesting ftw universe market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME
 * @param {!number=} opt_limit The number of data points to return
 * @param {!number=} opt_toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
 * @param {!number=} opt_aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
 * @param {!boolean=} opt_fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
 * @param {!string=} opt_responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.GENERIC_RESPONSE>}
 */
API.Client.OverviewApi.prototype.overviewV1HistoricalMarketcapFtwAssetsHours = function(opt_groups, opt_limit, opt_toTs, opt_aggregate, opt_fill, opt_responseFormat, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/overview/v1/historical/marketcap/ftw/assets/hours';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_groups !== undefined) {
    queryParameters['groups'] = opt_groups;
  }

  if (opt_limit !== undefined) {
    queryParameters['limit'] = opt_limit;
  }

  if (opt_toTs !== undefined) {
    queryParameters['to_ts'] = opt_toTs;
  }

  if (opt_aggregate !== undefined) {
    queryParameters['aggregate'] = opt_aggregate;
  }

  if (opt_fill !== undefined) {
    queryParameters['fill'] = opt_fill;
  }

  if (opt_responseFormat !== undefined) {
    queryParameters['response_format'] = opt_responseFormat;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!Array<!string>=} opt_groups When requesting all market cap tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,MOVING_24_HOUR
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.GENERIC_RESPONSE>}
 */
API.Client.OverviewApi.prototype.overviewV1LatestMarketcapAllTick = function(opt_groups, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/overview/v1/latest/marketcap/all/tick';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_groups !== undefined) {
    queryParameters['groups'] = opt_groups;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!Array<!string>=} opt_groups When requesting ftw universe market cap tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,MOVING_24_HOUR
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.GENERIC_RESPONSE>}
 */
API.Client.OverviewApi.prototype.overviewV1LatestMarketcapFtwTick = function(opt_groups, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/overview/v1/latest/marketcap/ftw/tick';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_groups !== undefined) {
    queryParameters['groups'] = opt_groups;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
