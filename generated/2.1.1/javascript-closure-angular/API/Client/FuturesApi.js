/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.FuturesApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * CryptoCompare is the world&#39;s leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 * Version: 2.1.1
 * Generated by: org.openapitools.codegen.languages.JavascriptClosureAngularClientCodegen
 */
/**
 * @license CryptoCompare API License Agreement
 * https://www.cryptocompare.com/api-licence-agreement/
 */

goog.provide('API.Client.FuturesApi');

goog.require('API.Client.Error');
goog.require('API.Client.GENERIC_RESPONSE');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.FuturesApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('FuturesApiBasePath') ?
                   /** @type {!string} */ ($injector.get('FuturesApiBasePath')) :
                   'https://data-api.cryptocompare.com';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('FuturesApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('FuturesApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.FuturesApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * 
 * 
 * @param {!string} market The exchange to obtain data from
 * @param {!string} instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
 * @param {!Array<!string>=} opt_groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME
 * @param {!number=} opt_limit The number of data points to return
 * @param {!number=} opt_toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
 * @param {!number=} opt_aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
 * @param {!boolean=} opt_fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
 * @param {!string=} opt_mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
 * @param {!string=} opt_responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.GENERIC_RESPONSE>}
 */
API.Client.FuturesApi.prototype.futuresV1HistoricalDays = function(market, instrument, opt_groups, opt_limit, opt_toTs, opt_aggregate, opt_fill, opt_mappingPriority, opt_responseFormat, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/futures/v1/historical/days';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'market' is set
  if (!market) {
    throw new Error('Missing required parameter market when calling futuresV1HistoricalDays');
  }
  // verify required parameter 'instrument' is set
  if (!instrument) {
    throw new Error('Missing required parameter instrument when calling futuresV1HistoricalDays');
  }
  if (market !== undefined) {
    queryParameters['market'] = market;
  }

  if (instrument !== undefined) {
    queryParameters['instrument'] = instrument;
  }

  if (opt_groups !== undefined) {
    queryParameters['groups'] = opt_groups;
  }

  if (opt_limit !== undefined) {
    queryParameters['limit'] = opt_limit;
  }

  if (opt_toTs !== undefined) {
    queryParameters['to_ts'] = opt_toTs;
  }

  if (opt_aggregate !== undefined) {
    queryParameters['aggregate'] = opt_aggregate;
  }

  if (opt_fill !== undefined) {
    queryParameters['fill'] = opt_fill;
  }

  if (opt_mappingPriority !== undefined) {
    queryParameters['mapping_priority'] = opt_mappingPriority;
  }

  if (opt_responseFormat !== undefined) {
    queryParameters['response_format'] = opt_responseFormat;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string} market The exchange to obtain data from
 * @param {!string} instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
 * @param {!Array<!string>=} opt_groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,OHLC,OHLC_MESSAGE,MESSAGE
 * @param {!number=} opt_limit The number of data points to return
 * @param {!number=} opt_toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
 * @param {!number=} opt_aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
 * @param {!boolean=} opt_fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
 * @param {!string=} opt_mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
 * @param {!string=} opt_responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.GENERIC_RESPONSE>}
 */
API.Client.FuturesApi.prototype.futuresV1HistoricalFundingRateDays = function(market, instrument, opt_groups, opt_limit, opt_toTs, opt_aggregate, opt_fill, opt_mappingPriority, opt_responseFormat, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/futures/v1/historical/funding-rate/days';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'market' is set
  if (!market) {
    throw new Error('Missing required parameter market when calling futuresV1HistoricalFundingRateDays');
  }
  // verify required parameter 'instrument' is set
  if (!instrument) {
    throw new Error('Missing required parameter instrument when calling futuresV1HistoricalFundingRateDays');
  }
  if (market !== undefined) {
    queryParameters['market'] = market;
  }

  if (instrument !== undefined) {
    queryParameters['instrument'] = instrument;
  }

  if (opt_groups !== undefined) {
    queryParameters['groups'] = opt_groups;
  }

  if (opt_limit !== undefined) {
    queryParameters['limit'] = opt_limit;
  }

  if (opt_toTs !== undefined) {
    queryParameters['to_ts'] = opt_toTs;
  }

  if (opt_aggregate !== undefined) {
    queryParameters['aggregate'] = opt_aggregate;
  }

  if (opt_fill !== undefined) {
    queryParameters['fill'] = opt_fill;
  }

  if (opt_mappingPriority !== undefined) {
    queryParameters['mapping_priority'] = opt_mappingPriority;
  }

  if (opt_responseFormat !== undefined) {
    queryParameters['response_format'] = opt_responseFormat;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string} market The exchange to obtain data from
 * @param {!string} instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
 * @param {!Array<!string>=} opt_groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,OHLC,OHLC_MESSAGE,MESSAGE
 * @param {!number=} opt_limit The number of data points to return
 * @param {!number=} opt_toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
 * @param {!number=} opt_aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
 * @param {!boolean=} opt_fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
 * @param {!string=} opt_mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
 * @param {!string=} opt_responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.GENERIC_RESPONSE>}
 */
API.Client.FuturesApi.prototype.futuresV1HistoricalFundingRateHours = function(market, instrument, opt_groups, opt_limit, opt_toTs, opt_aggregate, opt_fill, opt_mappingPriority, opt_responseFormat, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/futures/v1/historical/funding-rate/hours';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'market' is set
  if (!market) {
    throw new Error('Missing required parameter market when calling futuresV1HistoricalFundingRateHours');
  }
  // verify required parameter 'instrument' is set
  if (!instrument) {
    throw new Error('Missing required parameter instrument when calling futuresV1HistoricalFundingRateHours');
  }
  if (market !== undefined) {
    queryParameters['market'] = market;
  }

  if (instrument !== undefined) {
    queryParameters['instrument'] = instrument;
  }

  if (opt_groups !== undefined) {
    queryParameters['groups'] = opt_groups;
  }

  if (opt_limit !== undefined) {
    queryParameters['limit'] = opt_limit;
  }

  if (opt_toTs !== undefined) {
    queryParameters['to_ts'] = opt_toTs;
  }

  if (opt_aggregate !== undefined) {
    queryParameters['aggregate'] = opt_aggregate;
  }

  if (opt_fill !== undefined) {
    queryParameters['fill'] = opt_fill;
  }

  if (opt_mappingPriority !== undefined) {
    queryParameters['mapping_priority'] = opt_mappingPriority;
  }

  if (opt_responseFormat !== undefined) {
    queryParameters['response_format'] = opt_responseFormat;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string} market The exchange to obtain data from
 * @param {!string} instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
 * @param {!number=} opt_afterTs Unix timestamp in seconds of the earliest funding rate message in the response
 * @param {!number=} opt_lastCcseq The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request.
 * @param {!number=} opt_limit The maximum number of funding rate messages to return
 * @param {!string=} opt_mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
 * @param {!string=} opt_responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV
 * @param {!boolean=} opt_return404OnEmptyResponse If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.GENERIC_RESPONSE>}
 */
API.Client.FuturesApi.prototype.futuresV1HistoricalFundingRateMessages = function(market, instrument, opt_afterTs, opt_lastCcseq, opt_limit, opt_mappingPriority, opt_responseFormat, opt_return404OnEmptyResponse, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/futures/v1/historical/funding-rate-messages';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'market' is set
  if (!market) {
    throw new Error('Missing required parameter market when calling futuresV1HistoricalFundingRateMessages');
  }
  // verify required parameter 'instrument' is set
  if (!instrument) {
    throw new Error('Missing required parameter instrument when calling futuresV1HistoricalFundingRateMessages');
  }
  if (market !== undefined) {
    queryParameters['market'] = market;
  }

  if (instrument !== undefined) {
    queryParameters['instrument'] = instrument;
  }

  if (opt_afterTs !== undefined) {
    queryParameters['after_ts'] = opt_afterTs;
  }

  if (opt_lastCcseq !== undefined) {
    queryParameters['last_ccseq'] = opt_lastCcseq;
  }

  if (opt_limit !== undefined) {
    queryParameters['limit'] = opt_limit;
  }

  if (opt_mappingPriority !== undefined) {
    queryParameters['mapping_priority'] = opt_mappingPriority;
  }

  if (opt_responseFormat !== undefined) {
    queryParameters['response_format'] = opt_responseFormat;
  }

  if (opt_return404OnEmptyResponse !== undefined) {
    queryParameters['return_404_on_empty_response'] = opt_return404OnEmptyResponse;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string} market The exchange to obtain data from
 * @param {!string} instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
 * @param {!number=} opt_hourTs Unix timestamp in seconds for the hour containing the funding rate updates you are interested in. You can pass any timestamp in the hour but we will round it down the the full hour timestmap and return all funding rate updates in that hour.
 * @param {!string=} opt_mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
 * @param {!string=} opt_responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV
 * @param {!boolean=} opt_return404OnEmptyResponse If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.GENERIC_RESPONSE>}
 */
API.Client.FuturesApi.prototype.futuresV1HistoricalFundingRateMessagesHour = function(market, instrument, opt_hourTs, opt_mappingPriority, opt_responseFormat, opt_return404OnEmptyResponse, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/futures/v1/historical/funding-rate-messages/hour';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'market' is set
  if (!market) {
    throw new Error('Missing required parameter market when calling futuresV1HistoricalFundingRateMessagesHour');
  }
  // verify required parameter 'instrument' is set
  if (!instrument) {
    throw new Error('Missing required parameter instrument when calling futuresV1HistoricalFundingRateMessagesHour');
  }
  if (market !== undefined) {
    queryParameters['market'] = market;
  }

  if (instrument !== undefined) {
    queryParameters['instrument'] = instrument;
  }

  if (opt_hourTs !== undefined) {
    queryParameters['hour_ts'] = opt_hourTs;
  }

  if (opt_mappingPriority !== undefined) {
    queryParameters['mapping_priority'] = opt_mappingPriority;
  }

  if (opt_responseFormat !== undefined) {
    queryParameters['response_format'] = opt_responseFormat;
  }

  if (opt_return404OnEmptyResponse !== undefined) {
    queryParameters['return_404_on_empty_response'] = opt_return404OnEmptyResponse;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string} market The exchange to obtain data from
 * @param {!string} instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
 * @param {!Array<!string>=} opt_groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,OHLC,OHLC_MESSAGE,MESSAGE
 * @param {!number=} opt_limit The number of data points to return
 * @param {!number=} opt_toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
 * @param {!number=} opt_aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
 * @param {!boolean=} opt_fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
 * @param {!string=} opt_mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
 * @param {!string=} opt_responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.GENERIC_RESPONSE>}
 */
API.Client.FuturesApi.prototype.futuresV1HistoricalFundingRateMinutes = function(market, instrument, opt_groups, opt_limit, opt_toTs, opt_aggregate, opt_fill, opt_mappingPriority, opt_responseFormat, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/futures/v1/historical/funding-rate/minutes';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'market' is set
  if (!market) {
    throw new Error('Missing required parameter market when calling futuresV1HistoricalFundingRateMinutes');
  }
  // verify required parameter 'instrument' is set
  if (!instrument) {
    throw new Error('Missing required parameter instrument when calling futuresV1HistoricalFundingRateMinutes');
  }
  if (market !== undefined) {
    queryParameters['market'] = market;
  }

  if (instrument !== undefined) {
    queryParameters['instrument'] = instrument;
  }

  if (opt_groups !== undefined) {
    queryParameters['groups'] = opt_groups;
  }

  if (opt_limit !== undefined) {
    queryParameters['limit'] = opt_limit;
  }

  if (opt_toTs !== undefined) {
    queryParameters['to_ts'] = opt_toTs;
  }

  if (opt_aggregate !== undefined) {
    queryParameters['aggregate'] = opt_aggregate;
  }

  if (opt_fill !== undefined) {
    queryParameters['fill'] = opt_fill;
  }

  if (opt_mappingPriority !== undefined) {
    queryParameters['mapping_priority'] = opt_mappingPriority;
  }

  if (opt_responseFormat !== undefined) {
    queryParameters['response_format'] = opt_responseFormat;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string} market The exchange to obtain data from
 * @param {!string} instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
 * @param {!Array<!string>=} opt_groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME
 * @param {!number=} opt_limit The number of data points to return
 * @param {!number=} opt_toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
 * @param {!number=} opt_aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
 * @param {!boolean=} opt_fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
 * @param {!string=} opt_mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
 * @param {!string=} opt_responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.GENERIC_RESPONSE>}
 */
API.Client.FuturesApi.prototype.futuresV1HistoricalHours = function(market, instrument, opt_groups, opt_limit, opt_toTs, opt_aggregate, opt_fill, opt_mappingPriority, opt_responseFormat, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/futures/v1/historical/hours';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'market' is set
  if (!market) {
    throw new Error('Missing required parameter market when calling futuresV1HistoricalHours');
  }
  // verify required parameter 'instrument' is set
  if (!instrument) {
    throw new Error('Missing required parameter instrument when calling futuresV1HistoricalHours');
  }
  if (market !== undefined) {
    queryParameters['market'] = market;
  }

  if (instrument !== undefined) {
    queryParameters['instrument'] = instrument;
  }

  if (opt_groups !== undefined) {
    queryParameters['groups'] = opt_groups;
  }

  if (opt_limit !== undefined) {
    queryParameters['limit'] = opt_limit;
  }

  if (opt_toTs !== undefined) {
    queryParameters['to_ts'] = opt_toTs;
  }

  if (opt_aggregate !== undefined) {
    queryParameters['aggregate'] = opt_aggregate;
  }

  if (opt_fill !== undefined) {
    queryParameters['fill'] = opt_fill;
  }

  if (opt_mappingPriority !== undefined) {
    queryParameters['mapping_priority'] = opt_mappingPriority;
  }

  if (opt_responseFormat !== undefined) {
    queryParameters['response_format'] = opt_responseFormat;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string} market The exchange to obtain data from
 * @param {!string} instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
 * @param {!Array<!string>=} opt_groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME
 * @param {!number=} opt_limit The number of data points to return
 * @param {!number=} opt_toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
 * @param {!number=} opt_aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
 * @param {!boolean=} opt_fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
 * @param {!string=} opt_mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
 * @param {!string=} opt_responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.GENERIC_RESPONSE>}
 */
API.Client.FuturesApi.prototype.futuresV1HistoricalMinutes = function(market, instrument, opt_groups, opt_limit, opt_toTs, opt_aggregate, opt_fill, opt_mappingPriority, opt_responseFormat, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/futures/v1/historical/minutes';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'market' is set
  if (!market) {
    throw new Error('Missing required parameter market when calling futuresV1HistoricalMinutes');
  }
  // verify required parameter 'instrument' is set
  if (!instrument) {
    throw new Error('Missing required parameter instrument when calling futuresV1HistoricalMinutes');
  }
  if (market !== undefined) {
    queryParameters['market'] = market;
  }

  if (instrument !== undefined) {
    queryParameters['instrument'] = instrument;
  }

  if (opt_groups !== undefined) {
    queryParameters['groups'] = opt_groups;
  }

  if (opt_limit !== undefined) {
    queryParameters['limit'] = opt_limit;
  }

  if (opt_toTs !== undefined) {
    queryParameters['to_ts'] = opt_toTs;
  }

  if (opt_aggregate !== undefined) {
    queryParameters['aggregate'] = opt_aggregate;
  }

  if (opt_fill !== undefined) {
    queryParameters['fill'] = opt_fill;
  }

  if (opt_mappingPriority !== undefined) {
    queryParameters['mapping_priority'] = opt_mappingPriority;
  }

  if (opt_responseFormat !== undefined) {
    queryParameters['response_format'] = opt_responseFormat;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string} market The exchange to obtain data from
 * @param {!string} instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
 * @param {!Array<!string>=} opt_groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_MESSAGE,MESSAGE
 * @param {!number=} opt_limit The number of data points to return
 * @param {!number=} opt_toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
 * @param {!number=} opt_aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
 * @param {!boolean=} opt_fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
 * @param {!string=} opt_mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
 * @param {!string=} opt_responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.GENERIC_RESPONSE>}
 */
API.Client.FuturesApi.prototype.futuresV1HistoricalOpenInterestDays = function(market, instrument, opt_groups, opt_limit, opt_toTs, opt_aggregate, opt_fill, opt_mappingPriority, opt_responseFormat, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/futures/v1/historical/open-interest/days';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'market' is set
  if (!market) {
    throw new Error('Missing required parameter market when calling futuresV1HistoricalOpenInterestDays');
  }
  // verify required parameter 'instrument' is set
  if (!instrument) {
    throw new Error('Missing required parameter instrument when calling futuresV1HistoricalOpenInterestDays');
  }
  if (market !== undefined) {
    queryParameters['market'] = market;
  }

  if (instrument !== undefined) {
    queryParameters['instrument'] = instrument;
  }

  if (opt_groups !== undefined) {
    queryParameters['groups'] = opt_groups;
  }

  if (opt_limit !== undefined) {
    queryParameters['limit'] = opt_limit;
  }

  if (opt_toTs !== undefined) {
    queryParameters['to_ts'] = opt_toTs;
  }

  if (opt_aggregate !== undefined) {
    queryParameters['aggregate'] = opt_aggregate;
  }

  if (opt_fill !== undefined) {
    queryParameters['fill'] = opt_fill;
  }

  if (opt_mappingPriority !== undefined) {
    queryParameters['mapping_priority'] = opt_mappingPriority;
  }

  if (opt_responseFormat !== undefined) {
    queryParameters['response_format'] = opt_responseFormat;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string} market The exchange to obtain data from
 * @param {!string} instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
 * @param {!Array<!string>=} opt_groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_MESSAGE,MESSAGE
 * @param {!number=} opt_limit The number of data points to return
 * @param {!number=} opt_toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
 * @param {!number=} opt_aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
 * @param {!boolean=} opt_fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
 * @param {!string=} opt_mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
 * @param {!string=} opt_responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.GENERIC_RESPONSE>}
 */
API.Client.FuturesApi.prototype.futuresV1HistoricalOpenInterestHours = function(market, instrument, opt_groups, opt_limit, opt_toTs, opt_aggregate, opt_fill, opt_mappingPriority, opt_responseFormat, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/futures/v1/historical/open-interest/hours';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'market' is set
  if (!market) {
    throw new Error('Missing required parameter market when calling futuresV1HistoricalOpenInterestHours');
  }
  // verify required parameter 'instrument' is set
  if (!instrument) {
    throw new Error('Missing required parameter instrument when calling futuresV1HistoricalOpenInterestHours');
  }
  if (market !== undefined) {
    queryParameters['market'] = market;
  }

  if (instrument !== undefined) {
    queryParameters['instrument'] = instrument;
  }

  if (opt_groups !== undefined) {
    queryParameters['groups'] = opt_groups;
  }

  if (opt_limit !== undefined) {
    queryParameters['limit'] = opt_limit;
  }

  if (opt_toTs !== undefined) {
    queryParameters['to_ts'] = opt_toTs;
  }

  if (opt_aggregate !== undefined) {
    queryParameters['aggregate'] = opt_aggregate;
  }

  if (opt_fill !== undefined) {
    queryParameters['fill'] = opt_fill;
  }

  if (opt_mappingPriority !== undefined) {
    queryParameters['mapping_priority'] = opt_mappingPriority;
  }

  if (opt_responseFormat !== undefined) {
    queryParameters['response_format'] = opt_responseFormat;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string} market The exchange to obtain data from
 * @param {!string} instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
 * @param {!number=} opt_afterTs Unix timestamp in seconds of the earliest open interest message in the response
 * @param {!number=} opt_lastCcseq The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request.
 * @param {!number=} opt_limit The maximum number of open interest messages to return
 * @param {!string=} opt_mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
 * @param {!string=} opt_responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV
 * @param {!boolean=} opt_return404OnEmptyResponse If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.GENERIC_RESPONSE>}
 */
API.Client.FuturesApi.prototype.futuresV1HistoricalOpenInterestMessages = function(market, instrument, opt_afterTs, opt_lastCcseq, opt_limit, opt_mappingPriority, opt_responseFormat, opt_return404OnEmptyResponse, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/futures/v1/historical/open-interest-messages';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'market' is set
  if (!market) {
    throw new Error('Missing required parameter market when calling futuresV1HistoricalOpenInterestMessages');
  }
  // verify required parameter 'instrument' is set
  if (!instrument) {
    throw new Error('Missing required parameter instrument when calling futuresV1HistoricalOpenInterestMessages');
  }
  if (market !== undefined) {
    queryParameters['market'] = market;
  }

  if (instrument !== undefined) {
    queryParameters['instrument'] = instrument;
  }

  if (opt_afterTs !== undefined) {
    queryParameters['after_ts'] = opt_afterTs;
  }

  if (opt_lastCcseq !== undefined) {
    queryParameters['last_ccseq'] = opt_lastCcseq;
  }

  if (opt_limit !== undefined) {
    queryParameters['limit'] = opt_limit;
  }

  if (opt_mappingPriority !== undefined) {
    queryParameters['mapping_priority'] = opt_mappingPriority;
  }

  if (opt_responseFormat !== undefined) {
    queryParameters['response_format'] = opt_responseFormat;
  }

  if (opt_return404OnEmptyResponse !== undefined) {
    queryParameters['return_404_on_empty_response'] = opt_return404OnEmptyResponse;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string} market The exchange to obtain data from
 * @param {!string} instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
 * @param {!number=} opt_hourTs Unix timestamp in seconds for the hour containing the open interest updates you are interested in. You can pass any timestamp in the hour but we will round it down the the full hour timestmap and return all open interest updates in that hour.
 * @param {!string=} opt_mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
 * @param {!string=} opt_responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV
 * @param {!boolean=} opt_return404OnEmptyResponse If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.GENERIC_RESPONSE>}
 */
API.Client.FuturesApi.prototype.futuresV1HistoricalOpenInterestMessagesHour = function(market, instrument, opt_hourTs, opt_mappingPriority, opt_responseFormat, opt_return404OnEmptyResponse, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/futures/v1/historical/open-interest-messages/hour';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'market' is set
  if (!market) {
    throw new Error('Missing required parameter market when calling futuresV1HistoricalOpenInterestMessagesHour');
  }
  // verify required parameter 'instrument' is set
  if (!instrument) {
    throw new Error('Missing required parameter instrument when calling futuresV1HistoricalOpenInterestMessagesHour');
  }
  if (market !== undefined) {
    queryParameters['market'] = market;
  }

  if (instrument !== undefined) {
    queryParameters['instrument'] = instrument;
  }

  if (opt_hourTs !== undefined) {
    queryParameters['hour_ts'] = opt_hourTs;
  }

  if (opt_mappingPriority !== undefined) {
    queryParameters['mapping_priority'] = opt_mappingPriority;
  }

  if (opt_responseFormat !== undefined) {
    queryParameters['response_format'] = opt_responseFormat;
  }

  if (opt_return404OnEmptyResponse !== undefined) {
    queryParameters['return_404_on_empty_response'] = opt_return404OnEmptyResponse;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string} market The exchange to obtain data from
 * @param {!string} instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
 * @param {!Array<!string>=} opt_groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_MESSAGE,MESSAGE
 * @param {!number=} opt_limit The number of data points to return
 * @param {!number=} opt_toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
 * @param {!number=} opt_aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
 * @param {!boolean=} opt_fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
 * @param {!string=} opt_mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
 * @param {!string=} opt_responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.GENERIC_RESPONSE>}
 */
API.Client.FuturesApi.prototype.futuresV1HistoricalOpenInterestMinutes = function(market, instrument, opt_groups, opt_limit, opt_toTs, opt_aggregate, opt_fill, opt_mappingPriority, opt_responseFormat, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/futures/v1/historical/open-interest/minutes';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'market' is set
  if (!market) {
    throw new Error('Missing required parameter market when calling futuresV1HistoricalOpenInterestMinutes');
  }
  // verify required parameter 'instrument' is set
  if (!instrument) {
    throw new Error('Missing required parameter instrument when calling futuresV1HistoricalOpenInterestMinutes');
  }
  if (market !== undefined) {
    queryParameters['market'] = market;
  }

  if (instrument !== undefined) {
    queryParameters['instrument'] = instrument;
  }

  if (opt_groups !== undefined) {
    queryParameters['groups'] = opt_groups;
  }

  if (opt_limit !== undefined) {
    queryParameters['limit'] = opt_limit;
  }

  if (opt_toTs !== undefined) {
    queryParameters['to_ts'] = opt_toTs;
  }

  if (opt_aggregate !== undefined) {
    queryParameters['aggregate'] = opt_aggregate;
  }

  if (opt_fill !== undefined) {
    queryParameters['fill'] = opt_fill;
  }

  if (opt_mappingPriority !== undefined) {
    queryParameters['mapping_priority'] = opt_mappingPriority;
  }

  if (opt_responseFormat !== undefined) {
    queryParameters['response_format'] = opt_responseFormat;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string} market The exchange to obtain data from
 * @param {!string} instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
 * @param {!number=} opt_afterTs Unix timestamp in seconds of the earliest trade in the response.
 * @param {!number=} opt_lastCcseq The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request.
 * @param {!number=} opt_limit The maximum number of trades to return
 * @param {!string=} opt_mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
 * @param {!string=} opt_responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV
 * @param {!boolean=} opt_return404OnEmptyResponse If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.GENERIC_RESPONSE>}
 */
API.Client.FuturesApi.prototype.futuresV1HistoricalTrades = function(market, instrument, opt_afterTs, opt_lastCcseq, opt_limit, opt_mappingPriority, opt_responseFormat, opt_return404OnEmptyResponse, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/futures/v1/historical/trades';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'market' is set
  if (!market) {
    throw new Error('Missing required parameter market when calling futuresV1HistoricalTrades');
  }
  // verify required parameter 'instrument' is set
  if (!instrument) {
    throw new Error('Missing required parameter instrument when calling futuresV1HistoricalTrades');
  }
  if (market !== undefined) {
    queryParameters['market'] = market;
  }

  if (instrument !== undefined) {
    queryParameters['instrument'] = instrument;
  }

  if (opt_afterTs !== undefined) {
    queryParameters['after_ts'] = opt_afterTs;
  }

  if (opt_lastCcseq !== undefined) {
    queryParameters['last_ccseq'] = opt_lastCcseq;
  }

  if (opt_limit !== undefined) {
    queryParameters['limit'] = opt_limit;
  }

  if (opt_mappingPriority !== undefined) {
    queryParameters['mapping_priority'] = opt_mappingPriority;
  }

  if (opt_responseFormat !== undefined) {
    queryParameters['response_format'] = opt_responseFormat;
  }

  if (opt_return404OnEmptyResponse !== undefined) {
    queryParameters['return_404_on_empty_response'] = opt_return404OnEmptyResponse;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string} market The exchange to obtain data from
 * @param {!string} instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
 * @param {!number=} opt_hourTs Unix timestamp in seconds for the hour containing the trades you are interested in. You can pass any timestamp within an hour but we will round it down the the full hour timestmap and return all trades in that hour.
 * @param {!string=} opt_mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
 * @param {!string=} opt_responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV
 * @param {!boolean=} opt_return404OnEmptyResponse If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.GENERIC_RESPONSE>}
 */
API.Client.FuturesApi.prototype.futuresV1HistoricalTradesHour = function(market, instrument, opt_hourTs, opt_mappingPriority, opt_responseFormat, opt_return404OnEmptyResponse, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/futures/v1/historical/trades/hour';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'market' is set
  if (!market) {
    throw new Error('Missing required parameter market when calling futuresV1HistoricalTradesHour');
  }
  // verify required parameter 'instrument' is set
  if (!instrument) {
    throw new Error('Missing required parameter instrument when calling futuresV1HistoricalTradesHour');
  }
  if (market !== undefined) {
    queryParameters['market'] = market;
  }

  if (instrument !== undefined) {
    queryParameters['instrument'] = instrument;
  }

  if (opt_hourTs !== undefined) {
    queryParameters['hour_ts'] = opt_hourTs;
  }

  if (opt_mappingPriority !== undefined) {
    queryParameters['mapping_priority'] = opt_mappingPriority;
  }

  if (opt_responseFormat !== undefined) {
    queryParameters['response_format'] = opt_responseFormat;
  }

  if (opt_return404OnEmptyResponse !== undefined) {
    queryParameters['return_404_on_empty_response'] = opt_return404OnEmptyResponse;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string} market The exchange to obtain data from
 * @param {!Array<!string>} instruments A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.
 * @param {!Array<!string>=} opt_groups When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME
 * @param {!string=} opt_mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.GENERIC_RESPONSE>}
 */
API.Client.FuturesApi.prototype.futuresV1LatestFundingRateTick = function(market, instruments, opt_groups, opt_mappingPriority, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/futures/v1/latest/funding-rate/tick';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'market' is set
  if (!market) {
    throw new Error('Missing required parameter market when calling futuresV1LatestFundingRateTick');
  }
  // verify required parameter 'instruments' is set
  if (!instruments) {
    throw new Error('Missing required parameter instruments when calling futuresV1LatestFundingRateTick');
  }
  if (market !== undefined) {
    queryParameters['market'] = market;
  }

  if (instruments !== undefined) {
    queryParameters['instruments'] = instruments;
  }

  if (opt_groups !== undefined) {
    queryParameters['groups'] = opt_groups;
  }

  if (opt_mappingPriority !== undefined) {
    queryParameters['mapping_priority'] = opt_mappingPriority;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string} market The exchange to obtain data from
 * @param {!Array<!string>} instruments A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.
 * @param {!Array<!string>=} opt_groups When requesting metadata entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: STATUS,INTERNAL,GENERAL,MIGRATION,SOURCE
 * @param {!string=} opt_mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.GENERIC_RESPONSE>}
 */
API.Client.FuturesApi.prototype.futuresV1LatestInstrumentMetadata = function(market, instruments, opt_groups, opt_mappingPriority, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/futures/v1/latest/instrument/metadata';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'market' is set
  if (!market) {
    throw new Error('Missing required parameter market when calling futuresV1LatestInstrumentMetadata');
  }
  // verify required parameter 'instruments' is set
  if (!instruments) {
    throw new Error('Missing required parameter instruments when calling futuresV1LatestInstrumentMetadata');
  }
  if (market !== undefined) {
    queryParameters['market'] = market;
  }

  if (instruments !== undefined) {
    queryParameters['instruments'] = instruments;
  }

  if (opt_groups !== undefined) {
    queryParameters['groups'] = opt_groups;
  }

  if (opt_mappingPriority !== undefined) {
    queryParameters['mapping_priority'] = opt_mappingPriority;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string} market The exchange to obtain data from
 * @param {!Array<!string>} instruments A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.
 * @param {!Array<!string>=} opt_groups When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME
 * @param {!string=} opt_mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.GENERIC_RESPONSE>}
 */
API.Client.FuturesApi.prototype.futuresV1LatestOpenInterestTick = function(market, instruments, opt_groups, opt_mappingPriority, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/futures/v1/latest/open-interest/tick';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'market' is set
  if (!market) {
    throw new Error('Missing required parameter market when calling futuresV1LatestOpenInterestTick');
  }
  // verify required parameter 'instruments' is set
  if (!instruments) {
    throw new Error('Missing required parameter instruments when calling futuresV1LatestOpenInterestTick');
  }
  if (market !== undefined) {
    queryParameters['market'] = market;
  }

  if (instruments !== undefined) {
    queryParameters['instruments'] = instruments;
  }

  if (opt_groups !== undefined) {
    queryParameters['groups'] = opt_groups;
  }

  if (opt_mappingPriority !== undefined) {
    queryParameters['mapping_priority'] = opt_mappingPriority;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string} market The exchange to obtain data from
 * @param {!Array<!string>} instruments A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.
 * @param {!Array<!string>=} opt_groups When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,LAST_UPDATE,TOP_OF_BOOK,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME
 * @param {!string=} opt_mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.GENERIC_RESPONSE>}
 */
API.Client.FuturesApi.prototype.futuresV1LatestTick = function(market, instruments, opt_groups, opt_mappingPriority, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/futures/v1/latest/tick';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'market' is set
  if (!market) {
    throw new Error('Missing required parameter market when calling futuresV1LatestTick');
  }
  // verify required parameter 'instruments' is set
  if (!instruments) {
    throw new Error('Missing required parameter instruments when calling futuresV1LatestTick');
  }
  if (market !== undefined) {
    queryParameters['market'] = market;
  }

  if (instruments !== undefined) {
    queryParameters['instruments'] = instruments;
  }

  if (opt_groups !== undefined) {
    queryParameters['groups'] = opt_groups;
  }

  if (opt_mappingPriority !== undefined) {
    queryParameters['mapping_priority'] = opt_mappingPriority;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string=} opt_market The exchange to obtain data from
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.GENERIC_RESPONSE>}
 */
API.Client.FuturesApi.prototype.futuresV1Markets = function(opt_market, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/futures/v1/markets';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_market !== undefined) {
    queryParameters['market'] = opt_market;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string=} opt_market The exchange to obtain data from
 * @param {!string=} opt_instrument The mapped instrument to retrieve on a specific market.
 * @param {!Array<!string>=} opt_instrumentStatus The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.GENERIC_RESPONSE>}
 */
API.Client.FuturesApi.prototype.futuresV1MarketsInstruments = function(opt_market, opt_instrument, opt_instrumentStatus, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/futures/v1/markets/instruments';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_market !== undefined) {
    queryParameters['market'] = opt_market;
  }

  if (opt_instrument !== undefined) {
    queryParameters['instrument'] = opt_instrument;
  }

  if (opt_instrumentStatus !== undefined) {
    queryParameters['instrument_status'] = opt_instrumentStatus;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string=} opt_market The exchange to obtain data from
 * @param {!string=} opt_instrument The unmapped instrument to retrieve on a specific market.
 * @param {!Array<!string>=} opt_instrumentStatus The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.GENERIC_RESPONSE>}
 */
API.Client.FuturesApi.prototype.futuresV1MarketsInstrumentsUnmapped = function(opt_market, opt_instrument, opt_instrumentStatus, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/futures/v1/markets/instruments/unmapped';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_market !== undefined) {
    queryParameters['market'] = opt_market;
  }

  if (opt_instrument !== undefined) {
    queryParameters['instrument'] = opt_instrument;
  }

  if (opt_instrumentStatus !== undefined) {
    queryParameters['instrument_status'] = opt_instrumentStatus;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string} market The exchange to obtain data from
 * @param {!string} instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
 * @param {!Array<!string>=} opt_groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME
 * @param {!number=} opt_limit The number of data points to return
 * @param {!number=} opt_toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
 * @param {!number=} opt_aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
 * @param {!boolean=} opt_fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
 * @param {!string=} opt_mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
 * @param {!string=} opt_responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.GENERIC_RESPONSE>}
 */
API.Client.FuturesApi.prototype.indexV1HistoricalDays = function(market, instrument, opt_groups, opt_limit, opt_toTs, opt_aggregate, opt_fill, opt_mappingPriority, opt_responseFormat, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/index/v1/historical/days';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'market' is set
  if (!market) {
    throw new Error('Missing required parameter market when calling indexV1HistoricalDays');
  }
  // verify required parameter 'instrument' is set
  if (!instrument) {
    throw new Error('Missing required parameter instrument when calling indexV1HistoricalDays');
  }
  if (market !== undefined) {
    queryParameters['market'] = market;
  }

  if (instrument !== undefined) {
    queryParameters['instrument'] = instrument;
  }

  if (opt_groups !== undefined) {
    queryParameters['groups'] = opt_groups;
  }

  if (opt_limit !== undefined) {
    queryParameters['limit'] = opt_limit;
  }

  if (opt_toTs !== undefined) {
    queryParameters['to_ts'] = opt_toTs;
  }

  if (opt_aggregate !== undefined) {
    queryParameters['aggregate'] = opt_aggregate;
  }

  if (opt_fill !== undefined) {
    queryParameters['fill'] = opt_fill;
  }

  if (opt_mappingPriority !== undefined) {
    queryParameters['mapping_priority'] = opt_mappingPriority;
  }

  if (opt_responseFormat !== undefined) {
    queryParameters['response_format'] = opt_responseFormat;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string} market The exchange to obtain data from
 * @param {!string} instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
 * @param {!Array<!string>=} opt_groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME
 * @param {!number=} opt_limit The number of data points to return
 * @param {!number=} opt_toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
 * @param {!number=} opt_aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
 * @param {!boolean=} opt_fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
 * @param {!string=} opt_mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
 * @param {!string=} opt_responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.GENERIC_RESPONSE>}
 */
API.Client.FuturesApi.prototype.indexV1HistoricalHours = function(market, instrument, opt_groups, opt_limit, opt_toTs, opt_aggregate, opt_fill, opt_mappingPriority, opt_responseFormat, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/index/v1/historical/hours';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'market' is set
  if (!market) {
    throw new Error('Missing required parameter market when calling indexV1HistoricalHours');
  }
  // verify required parameter 'instrument' is set
  if (!instrument) {
    throw new Error('Missing required parameter instrument when calling indexV1HistoricalHours');
  }
  if (market !== undefined) {
    queryParameters['market'] = market;
  }

  if (instrument !== undefined) {
    queryParameters['instrument'] = instrument;
  }

  if (opt_groups !== undefined) {
    queryParameters['groups'] = opt_groups;
  }

  if (opt_limit !== undefined) {
    queryParameters['limit'] = opt_limit;
  }

  if (opt_toTs !== undefined) {
    queryParameters['to_ts'] = opt_toTs;
  }

  if (opt_aggregate !== undefined) {
    queryParameters['aggregate'] = opt_aggregate;
  }

  if (opt_fill !== undefined) {
    queryParameters['fill'] = opt_fill;
  }

  if (opt_mappingPriority !== undefined) {
    queryParameters['mapping_priority'] = opt_mappingPriority;
  }

  if (opt_responseFormat !== undefined) {
    queryParameters['response_format'] = opt_responseFormat;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string} market The exchange to obtain data from
 * @param {!string} instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
 * @param {!number=} opt_afterTs Unix timestamp in seconds of the earliest index message in the response
 * @param {!number=} opt_lastCcseq The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request.
 * @param {!number=} opt_limit The maximum number of index messages to return
 * @param {!string=} opt_mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
 * @param {!string=} opt_responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV
 * @param {!boolean=} opt_return404OnEmptyResponse If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.GENERIC_RESPONSE>}
 */
API.Client.FuturesApi.prototype.indexV1HistoricalMessages = function(market, instrument, opt_afterTs, opt_lastCcseq, opt_limit, opt_mappingPriority, opt_responseFormat, opt_return404OnEmptyResponse, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/index/v1/historical/messages';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'market' is set
  if (!market) {
    throw new Error('Missing required parameter market when calling indexV1HistoricalMessages');
  }
  // verify required parameter 'instrument' is set
  if (!instrument) {
    throw new Error('Missing required parameter instrument when calling indexV1HistoricalMessages');
  }
  if (market !== undefined) {
    queryParameters['market'] = market;
  }

  if (instrument !== undefined) {
    queryParameters['instrument'] = instrument;
  }

  if (opt_afterTs !== undefined) {
    queryParameters['after_ts'] = opt_afterTs;
  }

  if (opt_lastCcseq !== undefined) {
    queryParameters['last_ccseq'] = opt_lastCcseq;
  }

  if (opt_limit !== undefined) {
    queryParameters['limit'] = opt_limit;
  }

  if (opt_mappingPriority !== undefined) {
    queryParameters['mapping_priority'] = opt_mappingPriority;
  }

  if (opt_responseFormat !== undefined) {
    queryParameters['response_format'] = opt_responseFormat;
  }

  if (opt_return404OnEmptyResponse !== undefined) {
    queryParameters['return_404_on_empty_response'] = opt_return404OnEmptyResponse;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string} market The exchange to obtain data from
 * @param {!string} instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
 * @param {!number=} opt_hourTs Unix timestamp in seconds for the hour containing the index updates you are interested in. You can pass any timestamp in the hour but we will round it down the the full hour timestmap and return all index updates in that hour.
 * @param {!string=} opt_mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
 * @param {!string=} opt_responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV
 * @param {!boolean=} opt_return404OnEmptyResponse If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.GENERIC_RESPONSE>}
 */
API.Client.FuturesApi.prototype.indexV1HistoricalMessagesHour = function(market, instrument, opt_hourTs, opt_mappingPriority, opt_responseFormat, opt_return404OnEmptyResponse, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/index/v1/historical/messages/hour';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'market' is set
  if (!market) {
    throw new Error('Missing required parameter market when calling indexV1HistoricalMessagesHour');
  }
  // verify required parameter 'instrument' is set
  if (!instrument) {
    throw new Error('Missing required parameter instrument when calling indexV1HistoricalMessagesHour');
  }
  if (market !== undefined) {
    queryParameters['market'] = market;
  }

  if (instrument !== undefined) {
    queryParameters['instrument'] = instrument;
  }

  if (opt_hourTs !== undefined) {
    queryParameters['hour_ts'] = opt_hourTs;
  }

  if (opt_mappingPriority !== undefined) {
    queryParameters['mapping_priority'] = opt_mappingPriority;
  }

  if (opt_responseFormat !== undefined) {
    queryParameters['response_format'] = opt_responseFormat;
  }

  if (opt_return404OnEmptyResponse !== undefined) {
    queryParameters['return_404_on_empty_response'] = opt_return404OnEmptyResponse;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string} market The exchange to obtain data from
 * @param {!string} instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
 * @param {!Array<!string>=} opt_groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME
 * @param {!number=} opt_limit The number of data points to return
 * @param {!number=} opt_toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
 * @param {!number=} opt_aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
 * @param {!boolean=} opt_fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
 * @param {!string=} opt_mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
 * @param {!string=} opt_responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.GENERIC_RESPONSE>}
 */
API.Client.FuturesApi.prototype.indexV1HistoricalMinutes = function(market, instrument, opt_groups, opt_limit, opt_toTs, opt_aggregate, opt_fill, opt_mappingPriority, opt_responseFormat, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/index/v1/historical/minutes';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'market' is set
  if (!market) {
    throw new Error('Missing required parameter market when calling indexV1HistoricalMinutes');
  }
  // verify required parameter 'instrument' is set
  if (!instrument) {
    throw new Error('Missing required parameter instrument when calling indexV1HistoricalMinutes');
  }
  if (market !== undefined) {
    queryParameters['market'] = market;
  }

  if (instrument !== undefined) {
    queryParameters['instrument'] = instrument;
  }

  if (opt_groups !== undefined) {
    queryParameters['groups'] = opt_groups;
  }

  if (opt_limit !== undefined) {
    queryParameters['limit'] = opt_limit;
  }

  if (opt_toTs !== undefined) {
    queryParameters['to_ts'] = opt_toTs;
  }

  if (opt_aggregate !== undefined) {
    queryParameters['aggregate'] = opt_aggregate;
  }

  if (opt_fill !== undefined) {
    queryParameters['fill'] = opt_fill;
  }

  if (opt_mappingPriority !== undefined) {
    queryParameters['mapping_priority'] = opt_mappingPriority;
  }

  if (opt_responseFormat !== undefined) {
    queryParameters['response_format'] = opt_responseFormat;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string} market The exchange to obtain data from
 * @param {!Array<!string>} instruments A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.
 * @param {!Array<!string>=} opt_groups When requesting metadata entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: STATUS,INTERNAL,GENERAL,MIGRATION,SOURCE
 * @param {!string=} opt_mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.GENERIC_RESPONSE>}
 */
API.Client.FuturesApi.prototype.indexV1LatestInstrumentMetadata = function(market, instruments, opt_groups, opt_mappingPriority, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/index/v1/latest/instrument/metadata';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'market' is set
  if (!market) {
    throw new Error('Missing required parameter market when calling indexV1LatestInstrumentMetadata');
  }
  // verify required parameter 'instruments' is set
  if (!instruments) {
    throw new Error('Missing required parameter instruments when calling indexV1LatestInstrumentMetadata');
  }
  if (market !== undefined) {
    queryParameters['market'] = market;
  }

  if (instruments !== undefined) {
    queryParameters['instruments'] = instruments;
  }

  if (opt_groups !== undefined) {
    queryParameters['groups'] = opt_groups;
  }

  if (opt_mappingPriority !== undefined) {
    queryParameters['mapping_priority'] = opt_mappingPriority;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string} market The exchange to obtain data from
 * @param {!Array<!string>} instruments A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.
 * @param {!Array<!string>=} opt_groups When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME
 * @param {!string=} opt_mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.GENERIC_RESPONSE>}
 */
API.Client.FuturesApi.prototype.indexV1LatestTick = function(market, instruments, opt_groups, opt_mappingPriority, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/index/v1/latest/tick';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'market' is set
  if (!market) {
    throw new Error('Missing required parameter market when calling indexV1LatestTick');
  }
  // verify required parameter 'instruments' is set
  if (!instruments) {
    throw new Error('Missing required parameter instruments when calling indexV1LatestTick');
  }
  if (market !== undefined) {
    queryParameters['market'] = market;
  }

  if (instruments !== undefined) {
    queryParameters['instruments'] = instruments;
  }

  if (opt_groups !== undefined) {
    queryParameters['groups'] = opt_groups;
  }

  if (opt_mappingPriority !== undefined) {
    queryParameters['mapping_priority'] = opt_mappingPriority;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string=} opt_market The exchange to obtain data from
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.GENERIC_RESPONSE>}
 */
API.Client.FuturesApi.prototype.indexV1Markets = function(opt_market, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/index/v1/markets';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_market !== undefined) {
    queryParameters['market'] = opt_market;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string=} opt_market The exchange to obtain data from
 * @param {!string=} opt_instrument The mapped instrument to retrieve on a specific market.
 * @param {!Array<!string>=} opt_instrumentStatus The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.GENERIC_RESPONSE>}
 */
API.Client.FuturesApi.prototype.indexV1MarketsInstruments = function(opt_market, opt_instrument, opt_instrumentStatus, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/index/v1/markets/instruments';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_market !== undefined) {
    queryParameters['market'] = opt_market;
  }

  if (opt_instrument !== undefined) {
    queryParameters['instrument'] = opt_instrument;
  }

  if (opt_instrumentStatus !== undefined) {
    queryParameters['instrument_status'] = opt_instrumentStatus;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string=} opt_market The exchange to obtain data from
 * @param {!string=} opt_instrument The unmapped instrument to retrieve on a specific market.
 * @param {!Array<!string>=} opt_instrumentStatus The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.GENERIC_RESPONSE>}
 */
API.Client.FuturesApi.prototype.indexV1MarketsInstrumentsUnmapped = function(opt_market, opt_instrument, opt_instrumentStatus, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/index/v1/markets/instruments/unmapped';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_market !== undefined) {
    queryParameters['market'] = opt_market;
  }

  if (opt_instrument !== undefined) {
    queryParameters['instrument'] = opt_instrument;
  }

  if (opt_instrumentStatus !== undefined) {
    queryParameters['instrument_status'] = opt_instrumentStatus;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
