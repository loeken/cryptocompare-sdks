# coding: utf-8

"""
    CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry

    CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.  # noqa: E501

    The version of the OpenAPI document: 2.1.1
    Contact: data@cryptocompare.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr, constr, validator

from typing import List, Optional

from openapi_client.models.genericresponse import GENERICRESPONSE

from openapi_client.api_client import ApiClient
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class NewsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def news_v1_article_list(self, source_ids : Annotated[Optional[List[StrictStr]], Field(description="Get articles from specific sources; either by their ids or keys")] = None, lang : Annotated[Optional[constr(strict=True, min_length=1)], Field(description="The article Preferred language - English (EN), Portuguese (PT), Espanol (ES)")] = None, categories : Annotated[Optional[List[StrictStr]], Field(description="News article categories to return")] = None, exclude_categories : Annotated[Optional[List[StrictStr]], Field(description="News article categories to exclude from results")] = None, to_ts : Annotated[Optional[StrictInt], Field(description="Articles published on or before this timestamp")] = None, **kwargs) -> GENERICRESPONSE:  # noqa: E501
        """news_v1_article_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.news_v1_article_list(source_ids, lang, categories, exclude_categories, to_ts, async_req=True)
        >>> result = thread.get()

        :param source_ids: Get articles from specific sources; either by their ids or keys
        :type source_ids: List[str]
        :param lang: The article Preferred language - English (EN), Portuguese (PT), Espanol (ES)
        :type lang: str
        :param categories: News article categories to return
        :type categories: List[str]
        :param exclude_categories: News article categories to exclude from results
        :type exclude_categories: List[str]
        :param to_ts: Articles published on or before this timestamp
        :type to_ts: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GENERICRESPONSE
        """
        kwargs['_return_http_data_only'] = True
        return self.news_v1_article_list_with_http_info(source_ids, lang, categories, exclude_categories, to_ts, **kwargs)  # noqa: E501

    @validate_arguments
    def news_v1_article_list_with_http_info(self, source_ids : Annotated[Optional[List[StrictStr]], Field(description="Get articles from specific sources; either by their ids or keys")] = None, lang : Annotated[Optional[constr(strict=True, min_length=1)], Field(description="The article Preferred language - English (EN), Portuguese (PT), Espanol (ES)")] = None, categories : Annotated[Optional[List[StrictStr]], Field(description="News article categories to return")] = None, exclude_categories : Annotated[Optional[List[StrictStr]], Field(description="News article categories to exclude from results")] = None, to_ts : Annotated[Optional[StrictInt], Field(description="Articles published on or before this timestamp")] = None, **kwargs):  # noqa: E501
        """news_v1_article_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.news_v1_article_list_with_http_info(source_ids, lang, categories, exclude_categories, to_ts, async_req=True)
        >>> result = thread.get()

        :param source_ids: Get articles from specific sources; either by their ids or keys
        :type source_ids: List[str]
        :param lang: The article Preferred language - English (EN), Portuguese (PT), Espanol (ES)
        :type lang: str
        :param categories: News article categories to return
        :type categories: List[str]
        :param exclude_categories: News article categories to exclude from results
        :type exclude_categories: List[str]
        :param to_ts: Articles published on or before this timestamp
        :type to_ts: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GENERICRESPONSE, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'source_ids',
            'lang',
            'categories',
            'exclude_categories',
            'to_ts'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method news_v1_article_list" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('source_ids') is not None:  # noqa: E501
            _query_params.append(('source_ids', _params['source_ids']))
            _collection_formats['source_ids'] = 'csv'
        if _params.get('lang') is not None:  # noqa: E501
            _query_params.append(('lang', _params['lang']))
        if _params.get('categories') is not None:  # noqa: E501
            _query_params.append(('categories', _params['categories']))
            _collection_formats['categories'] = 'csv'
        if _params.get('exclude_categories') is not None:  # noqa: E501
            _query_params.append(('exclude_categories', _params['exclude_categories']))
            _collection_formats['exclude_categories'] = 'csv'
        if _params.get('to_ts') is not None:  # noqa: E501
            _query_params.append(('to_ts', _params['to_ts']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "GENERICRESPONSE",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '404': "Error",
            '405': "Error",
            '429': "Error",
            '500': "Error",
            '502': "Error",
            '503': "Error",
        }

        return self.api_client.call_api(
            '/news/v1/article/list', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def news_v1_category_list(self, **kwargs) -> GENERICRESPONSE:  # noqa: E501
        """news_v1_category_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.news_v1_category_list(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GENERICRESPONSE
        """
        kwargs['_return_http_data_only'] = True
        return self.news_v1_category_list_with_http_info(**kwargs)  # noqa: E501

    @validate_arguments
    def news_v1_category_list_with_http_info(self, **kwargs):  # noqa: E501
        """news_v1_category_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.news_v1_category_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GENERICRESPONSE, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method news_v1_category_list" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "GENERICRESPONSE",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '404': "Error",
            '405': "Error",
            '429': "Error",
            '500': "Error",
            '502': "Error",
            '503': "Error",
        }

        return self.api_client.call_api(
            '/news/v1/category/list', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def news_v1_source_list(self, lang : Annotated[Optional[constr(strict=True, min_length=1)], Field(description="The article source Preferred language - English (EN), Portuguese (PT), Espanol (ES)")] = None, type : Annotated[Optional[constr(strict=True, min_length=1)], Field(description="RSS, API, TWITTER")] = None, status : Annotated[Optional[constr(strict=True, min_length=1)], Field(description="The status for the  article source entry. Allowed values: ACTIVE, INACTIVE")] = None, **kwargs) -> GENERICRESPONSE:  # noqa: E501
        """news_v1_source_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.news_v1_source_list(lang, type, status, async_req=True)
        >>> result = thread.get()

        :param lang: The article source Preferred language - English (EN), Portuguese (PT), Espanol (ES)
        :type lang: str
        :param type: RSS, API, TWITTER
        :type type: str
        :param status: The status for the  article source entry. Allowed values: ACTIVE, INACTIVE
        :type status: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GENERICRESPONSE
        """
        kwargs['_return_http_data_only'] = True
        return self.news_v1_source_list_with_http_info(lang, type, status, **kwargs)  # noqa: E501

    @validate_arguments
    def news_v1_source_list_with_http_info(self, lang : Annotated[Optional[constr(strict=True, min_length=1)], Field(description="The article source Preferred language - English (EN), Portuguese (PT), Espanol (ES)")] = None, type : Annotated[Optional[constr(strict=True, min_length=1)], Field(description="RSS, API, TWITTER")] = None, status : Annotated[Optional[constr(strict=True, min_length=1)], Field(description="The status for the  article source entry. Allowed values: ACTIVE, INACTIVE")] = None, **kwargs):  # noqa: E501
        """news_v1_source_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.news_v1_source_list_with_http_info(lang, type, status, async_req=True)
        >>> result = thread.get()

        :param lang: The article source Preferred language - English (EN), Portuguese (PT), Espanol (ES)
        :type lang: str
        :param type: RSS, API, TWITTER
        :type type: str
        :param status: The status for the  article source entry. Allowed values: ACTIVE, INACTIVE
        :type status: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GENERICRESPONSE, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'lang',
            'type',
            'status'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method news_v1_source_list" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('lang') is not None:  # noqa: E501
            _query_params.append(('lang', _params['lang']))
        if _params.get('type') is not None:  # noqa: E501
            _query_params.append(('type', _params['type']))
        if _params.get('status') is not None:  # noqa: E501
            _query_params.append(('status', _params['status']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "GENERICRESPONSE",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '404': "Error",
            '405': "Error",
            '429': "Error",
            '500': "Error",
            '502': "Error",
            '503': "Error",
        }

        return self.api_client.call_api(
            '/news/v1/source/list', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
