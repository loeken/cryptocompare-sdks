# coding: utf-8

"""
    CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry

    CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.  # noqa: E501

    The version of the OpenAPI document: 2.1.1
    Contact: data@cryptocompare.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr, conint, constr, validator

from typing import List, Optional

from openapi_client.models.genericresponse import GENERICRESPONSE

from openapi_client.api_client import ApiClient
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class ReferenceRatesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def index_cc_v1_historical_days(self, market : Annotated[constr(strict=True, max_length=30, min_length=2), Field(..., description="The exchange to obtain data from")], instrument : Annotated[constr(strict=True, max_length=500, min_length=1), Field(..., description="The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.")], groups : Annotated[Optional[List[StrictStr]], Field(description="When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME")] = None, limit : Annotated[Optional[conint(strict=True, le=5000, ge=1)], Field(description="The number of data points to return")] = None, to_ts : Annotated[Optional[StrictInt], Field(description="Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}")] = None, aggregate : Annotated[Optional[conint(strict=True, le=30, ge=1)], Field(description="The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries")] = None, fill : Annotated[Optional[StrictBool], Field(description="Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.")] = None, mapping_priority : Annotated[Optional[StrictStr], Field(description="The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST")] = None, response_format : Annotated[Optional[StrictStr], Field(description="The format of the data response in uppercase. It can be one of the following: JSON,CSV")] = None, **kwargs) -> GENERICRESPONSE:  # noqa: E501
        """index_cc_v1_historical_days  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.index_cc_v1_historical_days(market, instrument, groups, limit, to_ts, aggregate, fill, mapping_priority, response_format, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from (required)
        :type market: str
        :param instrument: The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
        :type instrument: str
        :param groups: When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME
        :type groups: List[str]
        :param limit: The number of data points to return
        :type limit: int
        :param to_ts: Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}
        :type to_ts: int
        :param aggregate: The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
        :type aggregate: int
        :param fill: Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
        :type fill: bool
        :param mapping_priority: The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
        :type mapping_priority: str
        :param response_format: The format of the data response in uppercase. It can be one of the following: JSON,CSV
        :type response_format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GENERICRESPONSE
        """
        kwargs['_return_http_data_only'] = True
        return self.index_cc_v1_historical_days_with_http_info(market, instrument, groups, limit, to_ts, aggregate, fill, mapping_priority, response_format, **kwargs)  # noqa: E501

    @validate_arguments
    def index_cc_v1_historical_days_with_http_info(self, market : Annotated[constr(strict=True, max_length=30, min_length=2), Field(..., description="The exchange to obtain data from")], instrument : Annotated[constr(strict=True, max_length=500, min_length=1), Field(..., description="The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.")], groups : Annotated[Optional[List[StrictStr]], Field(description="When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME")] = None, limit : Annotated[Optional[conint(strict=True, le=5000, ge=1)], Field(description="The number of data points to return")] = None, to_ts : Annotated[Optional[StrictInt], Field(description="Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}")] = None, aggregate : Annotated[Optional[conint(strict=True, le=30, ge=1)], Field(description="The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries")] = None, fill : Annotated[Optional[StrictBool], Field(description="Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.")] = None, mapping_priority : Annotated[Optional[StrictStr], Field(description="The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST")] = None, response_format : Annotated[Optional[StrictStr], Field(description="The format of the data response in uppercase. It can be one of the following: JSON,CSV")] = None, **kwargs):  # noqa: E501
        """index_cc_v1_historical_days  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.index_cc_v1_historical_days_with_http_info(market, instrument, groups, limit, to_ts, aggregate, fill, mapping_priority, response_format, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from (required)
        :type market: str
        :param instrument: The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
        :type instrument: str
        :param groups: When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME
        :type groups: List[str]
        :param limit: The number of data points to return
        :type limit: int
        :param to_ts: Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}
        :type to_ts: int
        :param aggregate: The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
        :type aggregate: int
        :param fill: Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
        :type fill: bool
        :param mapping_priority: The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
        :type mapping_priority: str
        :param response_format: The format of the data response in uppercase. It can be one of the following: JSON,CSV
        :type response_format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GENERICRESPONSE, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'market',
            'instrument',
            'groups',
            'limit',
            'to_ts',
            'aggregate',
            'fill',
            'mapping_priority',
            'response_format'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method index_cc_v1_historical_days" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('market') is not None:  # noqa: E501
            _query_params.append(('market', _params['market']))
        if _params.get('instrument') is not None:  # noqa: E501
            _query_params.append(('instrument', _params['instrument']))
        if _params.get('groups') is not None:  # noqa: E501
            _query_params.append(('groups', _params['groups']))
            _collection_formats['groups'] = 'csv'
        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))
        if _params.get('to_ts') is not None:  # noqa: E501
            _query_params.append(('to_ts', _params['to_ts']))
        if _params.get('aggregate') is not None:  # noqa: E501
            _query_params.append(('aggregate', _params['aggregate']))
        if _params.get('fill') is not None:  # noqa: E501
            _query_params.append(('fill', _params['fill']))
        if _params.get('mapping_priority') is not None:  # noqa: E501
            _query_params.append(('mapping_priority', _params['mapping_priority']))
        if _params.get('response_format') is not None:  # noqa: E501
            _query_params.append(('response_format', _params['response_format']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "GENERICRESPONSE",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '404': "Error",
            '405': "Error",
            '429': "Error",
            '500': "Error",
            '502': "Error",
            '503': "Error",
        }

        return self.api_client.call_api(
            '/index/cc/v1/historical/days', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def index_cc_v1_historical_hours(self, market : Annotated[constr(strict=True, max_length=30, min_length=2), Field(..., description="The exchange to obtain data from")], instrument : Annotated[constr(strict=True, max_length=500, min_length=1), Field(..., description="The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.")], groups : Annotated[Optional[List[StrictStr]], Field(description="When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME")] = None, limit : Annotated[Optional[conint(strict=True, le=2000, ge=1)], Field(description="The number of data points to return")] = None, to_ts : Annotated[Optional[StrictInt], Field(description="Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}")] = None, aggregate : Annotated[Optional[conint(strict=True, le=30, ge=1)], Field(description="The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries")] = None, fill : Annotated[Optional[StrictBool], Field(description="Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.")] = None, mapping_priority : Annotated[Optional[StrictStr], Field(description="The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST")] = None, response_format : Annotated[Optional[StrictStr], Field(description="The format of the data response in uppercase. It can be one of the following: JSON,CSV")] = None, **kwargs) -> GENERICRESPONSE:  # noqa: E501
        """index_cc_v1_historical_hours  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.index_cc_v1_historical_hours(market, instrument, groups, limit, to_ts, aggregate, fill, mapping_priority, response_format, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from (required)
        :type market: str
        :param instrument: The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
        :type instrument: str
        :param groups: When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME
        :type groups: List[str]
        :param limit: The number of data points to return
        :type limit: int
        :param to_ts: Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}
        :type to_ts: int
        :param aggregate: The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
        :type aggregate: int
        :param fill: Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
        :type fill: bool
        :param mapping_priority: The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
        :type mapping_priority: str
        :param response_format: The format of the data response in uppercase. It can be one of the following: JSON,CSV
        :type response_format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GENERICRESPONSE
        """
        kwargs['_return_http_data_only'] = True
        return self.index_cc_v1_historical_hours_with_http_info(market, instrument, groups, limit, to_ts, aggregate, fill, mapping_priority, response_format, **kwargs)  # noqa: E501

    @validate_arguments
    def index_cc_v1_historical_hours_with_http_info(self, market : Annotated[constr(strict=True, max_length=30, min_length=2), Field(..., description="The exchange to obtain data from")], instrument : Annotated[constr(strict=True, max_length=500, min_length=1), Field(..., description="The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.")], groups : Annotated[Optional[List[StrictStr]], Field(description="When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME")] = None, limit : Annotated[Optional[conint(strict=True, le=2000, ge=1)], Field(description="The number of data points to return")] = None, to_ts : Annotated[Optional[StrictInt], Field(description="Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}")] = None, aggregate : Annotated[Optional[conint(strict=True, le=30, ge=1)], Field(description="The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries")] = None, fill : Annotated[Optional[StrictBool], Field(description="Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.")] = None, mapping_priority : Annotated[Optional[StrictStr], Field(description="The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST")] = None, response_format : Annotated[Optional[StrictStr], Field(description="The format of the data response in uppercase. It can be one of the following: JSON,CSV")] = None, **kwargs):  # noqa: E501
        """index_cc_v1_historical_hours  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.index_cc_v1_historical_hours_with_http_info(market, instrument, groups, limit, to_ts, aggregate, fill, mapping_priority, response_format, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from (required)
        :type market: str
        :param instrument: The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
        :type instrument: str
        :param groups: When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME
        :type groups: List[str]
        :param limit: The number of data points to return
        :type limit: int
        :param to_ts: Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}
        :type to_ts: int
        :param aggregate: The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
        :type aggregate: int
        :param fill: Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
        :type fill: bool
        :param mapping_priority: The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
        :type mapping_priority: str
        :param response_format: The format of the data response in uppercase. It can be one of the following: JSON,CSV
        :type response_format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GENERICRESPONSE, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'market',
            'instrument',
            'groups',
            'limit',
            'to_ts',
            'aggregate',
            'fill',
            'mapping_priority',
            'response_format'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method index_cc_v1_historical_hours" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('market') is not None:  # noqa: E501
            _query_params.append(('market', _params['market']))
        if _params.get('instrument') is not None:  # noqa: E501
            _query_params.append(('instrument', _params['instrument']))
        if _params.get('groups') is not None:  # noqa: E501
            _query_params.append(('groups', _params['groups']))
            _collection_formats['groups'] = 'csv'
        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))
        if _params.get('to_ts') is not None:  # noqa: E501
            _query_params.append(('to_ts', _params['to_ts']))
        if _params.get('aggregate') is not None:  # noqa: E501
            _query_params.append(('aggregate', _params['aggregate']))
        if _params.get('fill') is not None:  # noqa: E501
            _query_params.append(('fill', _params['fill']))
        if _params.get('mapping_priority') is not None:  # noqa: E501
            _query_params.append(('mapping_priority', _params['mapping_priority']))
        if _params.get('response_format') is not None:  # noqa: E501
            _query_params.append(('response_format', _params['response_format']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "GENERICRESPONSE",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '404': "Error",
            '405': "Error",
            '429': "Error",
            '500': "Error",
            '502': "Error",
            '503': "Error",
        }

        return self.api_client.call_api(
            '/index/cc/v1/historical/hours', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def index_cc_v1_historical_messages(self, market : Annotated[constr(strict=True, max_length=30, min_length=2), Field(..., description="The exchange to obtain data from")], instrument : Annotated[constr(strict=True, max_length=500, min_length=1), Field(..., description="The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.")], after_ts : Annotated[Optional[conint(strict=True, ge=0)], Field(description="Unix timestamp in seconds of the earliest index message in the response")] = None, last_ccseq : Annotated[Optional[conint(strict=True, ge=0)], Field(description="The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request.")] = None, mapping_priority : Annotated[Optional[StrictStr], Field(description="The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST")] = None, limit : Annotated[Optional[conint(strict=True, le=5000, ge=1)], Field(description="The maximum number of index messages to return")] = None, response_format : Annotated[Optional[StrictStr], Field(description="The format of the data response in uppercase. It can be one of the following: JSON,CSV")] = None, return_404_on_empty_response : Annotated[Optional[StrictBool], Field(description="If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.")] = None, **kwargs) -> GENERICRESPONSE:  # noqa: E501
        """index_cc_v1_historical_messages  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.index_cc_v1_historical_messages(market, instrument, after_ts, last_ccseq, mapping_priority, limit, response_format, return_404_on_empty_response, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from (required)
        :type market: str
        :param instrument: The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
        :type instrument: str
        :param after_ts: Unix timestamp in seconds of the earliest index message in the response
        :type after_ts: int
        :param last_ccseq: The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request.
        :type last_ccseq: int
        :param mapping_priority: The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
        :type mapping_priority: str
        :param limit: The maximum number of index messages to return
        :type limit: int
        :param response_format: The format of the data response in uppercase. It can be one of the following: JSON,CSV
        :type response_format: str
        :param return_404_on_empty_response: If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.
        :type return_404_on_empty_response: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GENERICRESPONSE
        """
        kwargs['_return_http_data_only'] = True
        return self.index_cc_v1_historical_messages_with_http_info(market, instrument, after_ts, last_ccseq, mapping_priority, limit, response_format, return_404_on_empty_response, **kwargs)  # noqa: E501

    @validate_arguments
    def index_cc_v1_historical_messages_with_http_info(self, market : Annotated[constr(strict=True, max_length=30, min_length=2), Field(..., description="The exchange to obtain data from")], instrument : Annotated[constr(strict=True, max_length=500, min_length=1), Field(..., description="The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.")], after_ts : Annotated[Optional[conint(strict=True, ge=0)], Field(description="Unix timestamp in seconds of the earliest index message in the response")] = None, last_ccseq : Annotated[Optional[conint(strict=True, ge=0)], Field(description="The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request.")] = None, mapping_priority : Annotated[Optional[StrictStr], Field(description="The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST")] = None, limit : Annotated[Optional[conint(strict=True, le=5000, ge=1)], Field(description="The maximum number of index messages to return")] = None, response_format : Annotated[Optional[StrictStr], Field(description="The format of the data response in uppercase. It can be one of the following: JSON,CSV")] = None, return_404_on_empty_response : Annotated[Optional[StrictBool], Field(description="If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.")] = None, **kwargs):  # noqa: E501
        """index_cc_v1_historical_messages  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.index_cc_v1_historical_messages_with_http_info(market, instrument, after_ts, last_ccseq, mapping_priority, limit, response_format, return_404_on_empty_response, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from (required)
        :type market: str
        :param instrument: The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
        :type instrument: str
        :param after_ts: Unix timestamp in seconds of the earliest index message in the response
        :type after_ts: int
        :param last_ccseq: The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request.
        :type last_ccseq: int
        :param mapping_priority: The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
        :type mapping_priority: str
        :param limit: The maximum number of index messages to return
        :type limit: int
        :param response_format: The format of the data response in uppercase. It can be one of the following: JSON,CSV
        :type response_format: str
        :param return_404_on_empty_response: If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.
        :type return_404_on_empty_response: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GENERICRESPONSE, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'market',
            'instrument',
            'after_ts',
            'last_ccseq',
            'mapping_priority',
            'limit',
            'response_format',
            'return_404_on_empty_response'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method index_cc_v1_historical_messages" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('market') is not None:  # noqa: E501
            _query_params.append(('market', _params['market']))
        if _params.get('instrument') is not None:  # noqa: E501
            _query_params.append(('instrument', _params['instrument']))
        if _params.get('after_ts') is not None:  # noqa: E501
            _query_params.append(('after_ts', _params['after_ts']))
        if _params.get('last_ccseq') is not None:  # noqa: E501
            _query_params.append(('last_ccseq', _params['last_ccseq']))
        if _params.get('mapping_priority') is not None:  # noqa: E501
            _query_params.append(('mapping_priority', _params['mapping_priority']))
        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))
        if _params.get('response_format') is not None:  # noqa: E501
            _query_params.append(('response_format', _params['response_format']))
        if _params.get('return_404_on_empty_response') is not None:  # noqa: E501
            _query_params.append(('return_404_on_empty_response', _params['return_404_on_empty_response']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['api_key_header', 'api_key_query']  # noqa: E501

        _response_types_map = {
            '200': "GENERICRESPONSE",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '404': "Error",
            '405': "Error",
            '429': "Error",
            '500': "Error",
            '502': "Error",
            '503': "Error",
        }

        return self.api_client.call_api(
            '/index/cc/v1/historical/messages', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def index_cc_v1_historical_messages_hour(self, market : Annotated[constr(strict=True, max_length=30, min_length=2), Field(..., description="The exchange to obtain data from")], instrument : Annotated[constr(strict=True, max_length=500, min_length=1), Field(..., description="The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.")], hour_ts : Annotated[Optional[conint(strict=True, ge=0)], Field(description="Unix timestamp in seconds for the hour containing the index updates you are interested in. You can pass any timestamp in the hour but we will round it down the the full hour timestmap and return all index updates in that hour.")] = None, mapping_priority : Annotated[Optional[StrictStr], Field(description="The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST")] = None, response_format : Annotated[Optional[StrictStr], Field(description="The format of the data response in uppercase. It can be one of the following: JSON,CSV")] = None, return_404_on_empty_response : Annotated[Optional[StrictBool], Field(description="If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.")] = None, **kwargs) -> GENERICRESPONSE:  # noqa: E501
        """index_cc_v1_historical_messages_hour  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.index_cc_v1_historical_messages_hour(market, instrument, hour_ts, mapping_priority, response_format, return_404_on_empty_response, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from (required)
        :type market: str
        :param instrument: The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
        :type instrument: str
        :param hour_ts: Unix timestamp in seconds for the hour containing the index updates you are interested in. You can pass any timestamp in the hour but we will round it down the the full hour timestmap and return all index updates in that hour.
        :type hour_ts: int
        :param mapping_priority: The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
        :type mapping_priority: str
        :param response_format: The format of the data response in uppercase. It can be one of the following: JSON,CSV
        :type response_format: str
        :param return_404_on_empty_response: If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.
        :type return_404_on_empty_response: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GENERICRESPONSE
        """
        kwargs['_return_http_data_only'] = True
        return self.index_cc_v1_historical_messages_hour_with_http_info(market, instrument, hour_ts, mapping_priority, response_format, return_404_on_empty_response, **kwargs)  # noqa: E501

    @validate_arguments
    def index_cc_v1_historical_messages_hour_with_http_info(self, market : Annotated[constr(strict=True, max_length=30, min_length=2), Field(..., description="The exchange to obtain data from")], instrument : Annotated[constr(strict=True, max_length=500, min_length=1), Field(..., description="The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.")], hour_ts : Annotated[Optional[conint(strict=True, ge=0)], Field(description="Unix timestamp in seconds for the hour containing the index updates you are interested in. You can pass any timestamp in the hour but we will round it down the the full hour timestmap and return all index updates in that hour.")] = None, mapping_priority : Annotated[Optional[StrictStr], Field(description="The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST")] = None, response_format : Annotated[Optional[StrictStr], Field(description="The format of the data response in uppercase. It can be one of the following: JSON,CSV")] = None, return_404_on_empty_response : Annotated[Optional[StrictBool], Field(description="If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.")] = None, **kwargs):  # noqa: E501
        """index_cc_v1_historical_messages_hour  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.index_cc_v1_historical_messages_hour_with_http_info(market, instrument, hour_ts, mapping_priority, response_format, return_404_on_empty_response, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from (required)
        :type market: str
        :param instrument: The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
        :type instrument: str
        :param hour_ts: Unix timestamp in seconds for the hour containing the index updates you are interested in. You can pass any timestamp in the hour but we will round it down the the full hour timestmap and return all index updates in that hour.
        :type hour_ts: int
        :param mapping_priority: The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
        :type mapping_priority: str
        :param response_format: The format of the data response in uppercase. It can be one of the following: JSON,CSV
        :type response_format: str
        :param return_404_on_empty_response: If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.
        :type return_404_on_empty_response: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GENERICRESPONSE, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'market',
            'instrument',
            'hour_ts',
            'mapping_priority',
            'response_format',
            'return_404_on_empty_response'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method index_cc_v1_historical_messages_hour" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('market') is not None:  # noqa: E501
            _query_params.append(('market', _params['market']))
        if _params.get('instrument') is not None:  # noqa: E501
            _query_params.append(('instrument', _params['instrument']))
        if _params.get('hour_ts') is not None:  # noqa: E501
            _query_params.append(('hour_ts', _params['hour_ts']))
        if _params.get('mapping_priority') is not None:  # noqa: E501
            _query_params.append(('mapping_priority', _params['mapping_priority']))
        if _params.get('response_format') is not None:  # noqa: E501
            _query_params.append(('response_format', _params['response_format']))
        if _params.get('return_404_on_empty_response') is not None:  # noqa: E501
            _query_params.append(('return_404_on_empty_response', _params['return_404_on_empty_response']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['api_key_header', 'api_key_query']  # noqa: E501

        _response_types_map = {
            '200': "GENERICRESPONSE",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '404': "Error",
            '405': "Error",
            '429': "Error",
            '500': "Error",
            '502': "Error",
            '503': "Error",
        }

        return self.api_client.call_api(
            '/index/cc/v1/historical/messages/hour', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def index_cc_v1_historical_minutes(self, market : Annotated[constr(strict=True, max_length=30, min_length=2), Field(..., description="The exchange to obtain data from")], instrument : Annotated[constr(strict=True, max_length=500, min_length=1), Field(..., description="The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.")], groups : Annotated[Optional[List[StrictStr]], Field(description="When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME")] = None, limit : Annotated[Optional[conint(strict=True, le=2000, ge=1)], Field(description="The number of data points to return")] = None, to_ts : Annotated[Optional[StrictInt], Field(description="Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}")] = None, aggregate : Annotated[Optional[conint(strict=True, le=30, ge=1)], Field(description="The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries")] = None, fill : Annotated[Optional[StrictBool], Field(description="Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.")] = None, mapping_priority : Annotated[Optional[StrictStr], Field(description="The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST")] = None, response_format : Annotated[Optional[StrictStr], Field(description="The format of the data response in uppercase. It can be one of the following: JSON,CSV")] = None, **kwargs) -> GENERICRESPONSE:  # noqa: E501
        """index_cc_v1_historical_minutes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.index_cc_v1_historical_minutes(market, instrument, groups, limit, to_ts, aggregate, fill, mapping_priority, response_format, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from (required)
        :type market: str
        :param instrument: The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
        :type instrument: str
        :param groups: When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME
        :type groups: List[str]
        :param limit: The number of data points to return
        :type limit: int
        :param to_ts: Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}
        :type to_ts: int
        :param aggregate: The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
        :type aggregate: int
        :param fill: Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
        :type fill: bool
        :param mapping_priority: The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
        :type mapping_priority: str
        :param response_format: The format of the data response in uppercase. It can be one of the following: JSON,CSV
        :type response_format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GENERICRESPONSE
        """
        kwargs['_return_http_data_only'] = True
        return self.index_cc_v1_historical_minutes_with_http_info(market, instrument, groups, limit, to_ts, aggregate, fill, mapping_priority, response_format, **kwargs)  # noqa: E501

    @validate_arguments
    def index_cc_v1_historical_minutes_with_http_info(self, market : Annotated[constr(strict=True, max_length=30, min_length=2), Field(..., description="The exchange to obtain data from")], instrument : Annotated[constr(strict=True, max_length=500, min_length=1), Field(..., description="The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.")], groups : Annotated[Optional[List[StrictStr]], Field(description="When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME")] = None, limit : Annotated[Optional[conint(strict=True, le=2000, ge=1)], Field(description="The number of data points to return")] = None, to_ts : Annotated[Optional[StrictInt], Field(description="Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}")] = None, aggregate : Annotated[Optional[conint(strict=True, le=30, ge=1)], Field(description="The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries")] = None, fill : Annotated[Optional[StrictBool], Field(description="Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.")] = None, mapping_priority : Annotated[Optional[StrictStr], Field(description="The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST")] = None, response_format : Annotated[Optional[StrictStr], Field(description="The format of the data response in uppercase. It can be one of the following: JSON,CSV")] = None, **kwargs):  # noqa: E501
        """index_cc_v1_historical_minutes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.index_cc_v1_historical_minutes_with_http_info(market, instrument, groups, limit, to_ts, aggregate, fill, mapping_priority, response_format, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from (required)
        :type market: str
        :param instrument: The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first. (required)
        :type instrument: str
        :param groups: When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME
        :type groups: List[str]
        :param limit: The number of data points to return
        :type limit: int
        :param to_ts: Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}
        :type to_ts: int
        :param aggregate: The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
        :type aggregate: int
        :param fill: Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
        :type fill: bool
        :param mapping_priority: The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
        :type mapping_priority: str
        :param response_format: The format of the data response in uppercase. It can be one of the following: JSON,CSV
        :type response_format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GENERICRESPONSE, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'market',
            'instrument',
            'groups',
            'limit',
            'to_ts',
            'aggregate',
            'fill',
            'mapping_priority',
            'response_format'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method index_cc_v1_historical_minutes" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('market') is not None:  # noqa: E501
            _query_params.append(('market', _params['market']))
        if _params.get('instrument') is not None:  # noqa: E501
            _query_params.append(('instrument', _params['instrument']))
        if _params.get('groups') is not None:  # noqa: E501
            _query_params.append(('groups', _params['groups']))
            _collection_formats['groups'] = 'csv'
        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))
        if _params.get('to_ts') is not None:  # noqa: E501
            _query_params.append(('to_ts', _params['to_ts']))
        if _params.get('aggregate') is not None:  # noqa: E501
            _query_params.append(('aggregate', _params['aggregate']))
        if _params.get('fill') is not None:  # noqa: E501
            _query_params.append(('fill', _params['fill']))
        if _params.get('mapping_priority') is not None:  # noqa: E501
            _query_params.append(('mapping_priority', _params['mapping_priority']))
        if _params.get('response_format') is not None:  # noqa: E501
            _query_params.append(('response_format', _params['response_format']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "GENERICRESPONSE",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '404': "Error",
            '405': "Error",
            '429': "Error",
            '500': "Error",
            '502': "Error",
            '503': "Error",
        }

        return self.api_client.call_api(
            '/index/cc/v1/historical/minutes', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def index_cc_v1_latest_instrument_metadata(self, market : Annotated[constr(strict=True, max_length=30, min_length=2), Field(..., description="The exchange to obtain data from")], instruments : Annotated[List[StrictStr], Field(..., description="A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.")], groups : Annotated[Optional[List[StrictStr]], Field(description="When requesting metadata entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: STATUS,INTERNAL,GENERAL,MIGRATION,SOURCE")] = None, mapping_priority : Annotated[Optional[StrictStr], Field(description="The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST")] = None, **kwargs) -> GENERICRESPONSE:  # noqa: E501
        """index_cc_v1_latest_instrument_metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.index_cc_v1_latest_instrument_metadata(market, instruments, groups, mapping_priority, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from (required)
        :type market: str
        :param instruments: A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first. (required)
        :type instruments: List[str]
        :param groups: When requesting metadata entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: STATUS,INTERNAL,GENERAL,MIGRATION,SOURCE
        :type groups: List[str]
        :param mapping_priority: The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
        :type mapping_priority: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GENERICRESPONSE
        """
        kwargs['_return_http_data_only'] = True
        return self.index_cc_v1_latest_instrument_metadata_with_http_info(market, instruments, groups, mapping_priority, **kwargs)  # noqa: E501

    @validate_arguments
    def index_cc_v1_latest_instrument_metadata_with_http_info(self, market : Annotated[constr(strict=True, max_length=30, min_length=2), Field(..., description="The exchange to obtain data from")], instruments : Annotated[List[StrictStr], Field(..., description="A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.")], groups : Annotated[Optional[List[StrictStr]], Field(description="When requesting metadata entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: STATUS,INTERNAL,GENERAL,MIGRATION,SOURCE")] = None, mapping_priority : Annotated[Optional[StrictStr], Field(description="The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST")] = None, **kwargs):  # noqa: E501
        """index_cc_v1_latest_instrument_metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.index_cc_v1_latest_instrument_metadata_with_http_info(market, instruments, groups, mapping_priority, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from (required)
        :type market: str
        :param instruments: A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first. (required)
        :type instruments: List[str]
        :param groups: When requesting metadata entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: STATUS,INTERNAL,GENERAL,MIGRATION,SOURCE
        :type groups: List[str]
        :param mapping_priority: The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
        :type mapping_priority: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GENERICRESPONSE, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'market',
            'instruments',
            'groups',
            'mapping_priority'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method index_cc_v1_latest_instrument_metadata" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('market') is not None:  # noqa: E501
            _query_params.append(('market', _params['market']))
        if _params.get('instruments') is not None:  # noqa: E501
            _query_params.append(('instruments', _params['instruments']))
            _collection_formats['instruments'] = 'csv'
        if _params.get('groups') is not None:  # noqa: E501
            _query_params.append(('groups', _params['groups']))
            _collection_formats['groups'] = 'csv'
        if _params.get('mapping_priority') is not None:  # noqa: E501
            _query_params.append(('mapping_priority', _params['mapping_priority']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "GENERICRESPONSE",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '404': "Error",
            '405': "Error",
            '429': "Error",
            '500': "Error",
            '502': "Error",
            '503': "Error",
        }

        return self.api_client.call_api(
            '/index/cc/v1/latest/instrument/metadata', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def index_cc_v1_latest_tick(self, market : Annotated[constr(strict=True, max_length=30, min_length=2), Field(..., description="The exchange to obtain data from")], instruments : Annotated[List[StrictStr], Field(..., description="A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.")], groups : Annotated[Optional[List[StrictStr]], Field(description="When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME")] = None, mapping_priority : Annotated[Optional[StrictStr], Field(description="The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST")] = None, **kwargs) -> GENERICRESPONSE:  # noqa: E501
        """index_cc_v1_latest_tick  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.index_cc_v1_latest_tick(market, instruments, groups, mapping_priority, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from (required)
        :type market: str
        :param instruments: A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first. (required)
        :type instruments: List[str]
        :param groups: When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME
        :type groups: List[str]
        :param mapping_priority: The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
        :type mapping_priority: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GENERICRESPONSE
        """
        kwargs['_return_http_data_only'] = True
        return self.index_cc_v1_latest_tick_with_http_info(market, instruments, groups, mapping_priority, **kwargs)  # noqa: E501

    @validate_arguments
    def index_cc_v1_latest_tick_with_http_info(self, market : Annotated[constr(strict=True, max_length=30, min_length=2), Field(..., description="The exchange to obtain data from")], instruments : Annotated[List[StrictStr], Field(..., description="A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.")], groups : Annotated[Optional[List[StrictStr]], Field(description="When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME")] = None, mapping_priority : Annotated[Optional[StrictStr], Field(description="The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST")] = None, **kwargs):  # noqa: E501
        """index_cc_v1_latest_tick  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.index_cc_v1_latest_tick_with_http_info(market, instruments, groups, mapping_priority, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from (required)
        :type market: str
        :param instruments: A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first. (required)
        :type instruments: List[str]
        :param groups: When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME
        :type groups: List[str]
        :param mapping_priority: The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
        :type mapping_priority: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GENERICRESPONSE, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'market',
            'instruments',
            'groups',
            'mapping_priority'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method index_cc_v1_latest_tick" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('market') is not None:  # noqa: E501
            _query_params.append(('market', _params['market']))
        if _params.get('instruments') is not None:  # noqa: E501
            _query_params.append(('instruments', _params['instruments']))
            _collection_formats['instruments'] = 'csv'
        if _params.get('groups') is not None:  # noqa: E501
            _query_params.append(('groups', _params['groups']))
            _collection_formats['groups'] = 'csv'
        if _params.get('mapping_priority') is not None:  # noqa: E501
            _query_params.append(('mapping_priority', _params['mapping_priority']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "GENERICRESPONSE",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '404': "Error",
            '405': "Error",
            '429': "Error",
            '500': "Error",
            '502': "Error",
            '503': "Error",
        }

        return self.api_client.call_api(
            '/index/cc/v1/latest/tick', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def index_cc_v1_markets(self, market : Annotated[Optional[constr(strict=True, max_length=30, min_length=0)], Field(description="The exchange to obtain data from")] = None, **kwargs) -> GENERICRESPONSE:  # noqa: E501
        """index_cc_v1_markets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.index_cc_v1_markets(market, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from
        :type market: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GENERICRESPONSE
        """
        kwargs['_return_http_data_only'] = True
        return self.index_cc_v1_markets_with_http_info(market, **kwargs)  # noqa: E501

    @validate_arguments
    def index_cc_v1_markets_with_http_info(self, market : Annotated[Optional[constr(strict=True, max_length=30, min_length=0)], Field(description="The exchange to obtain data from")] = None, **kwargs):  # noqa: E501
        """index_cc_v1_markets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.index_cc_v1_markets_with_http_info(market, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from
        :type market: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GENERICRESPONSE, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'market'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method index_cc_v1_markets" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('market') is not None:  # noqa: E501
            _query_params.append(('market', _params['market']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "GENERICRESPONSE",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '404': "Error",
            '405': "Error",
            '429': "Error",
            '500': "Error",
            '502': "Error",
            '503': "Error",
        }

        return self.api_client.call_api(
            '/index/cc/v1/markets', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def index_cc_v1_markets_instruments(self, market : Annotated[Optional[constr(strict=True, max_length=30, min_length=0)], Field(description="The exchange to obtain data from")] = None, instrument : Annotated[Optional[constr(strict=True, max_length=30, min_length=0)], Field(description="The mapped instrument to retrieve on a specific market.")] = None, instrument_status : Annotated[Optional[List[StrictStr]], Field(description="The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED")] = None, **kwargs) -> GENERICRESPONSE:  # noqa: E501
        """index_cc_v1_markets_instruments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.index_cc_v1_markets_instruments(market, instrument, instrument_status, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from
        :type market: str
        :param instrument: The mapped instrument to retrieve on a specific market.
        :type instrument: str
        :param instrument_status: The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED
        :type instrument_status: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GENERICRESPONSE
        """
        kwargs['_return_http_data_only'] = True
        return self.index_cc_v1_markets_instruments_with_http_info(market, instrument, instrument_status, **kwargs)  # noqa: E501

    @validate_arguments
    def index_cc_v1_markets_instruments_with_http_info(self, market : Annotated[Optional[constr(strict=True, max_length=30, min_length=0)], Field(description="The exchange to obtain data from")] = None, instrument : Annotated[Optional[constr(strict=True, max_length=30, min_length=0)], Field(description="The mapped instrument to retrieve on a specific market.")] = None, instrument_status : Annotated[Optional[List[StrictStr]], Field(description="The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED")] = None, **kwargs):  # noqa: E501
        """index_cc_v1_markets_instruments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.index_cc_v1_markets_instruments_with_http_info(market, instrument, instrument_status, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from
        :type market: str
        :param instrument: The mapped instrument to retrieve on a specific market.
        :type instrument: str
        :param instrument_status: The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED
        :type instrument_status: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GENERICRESPONSE, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'market',
            'instrument',
            'instrument_status'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method index_cc_v1_markets_instruments" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('market') is not None:  # noqa: E501
            _query_params.append(('market', _params['market']))
        if _params.get('instrument') is not None:  # noqa: E501
            _query_params.append(('instrument', _params['instrument']))
        if _params.get('instrument_status') is not None:  # noqa: E501
            _query_params.append(('instrument_status', _params['instrument_status']))
            _collection_formats['instrument_status'] = 'csv'

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "GENERICRESPONSE",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '404': "Error",
            '405': "Error",
            '429': "Error",
            '500': "Error",
            '502': "Error",
            '503': "Error",
        }

        return self.api_client.call_api(
            '/index/cc/v1/markets/instruments', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def index_cc_v1_markets_instruments_unmapped(self, market : Annotated[Optional[constr(strict=True, max_length=30, min_length=0)], Field(description="The exchange to obtain data from")] = None, instrument : Annotated[Optional[constr(strict=True, max_length=30, min_length=0)], Field(description="The unmapped instrument to retrieve on a specific market.")] = None, instrument_status : Annotated[Optional[List[StrictStr]], Field(description="The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED")] = None, **kwargs) -> GENERICRESPONSE:  # noqa: E501
        """index_cc_v1_markets_instruments_unmapped  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.index_cc_v1_markets_instruments_unmapped(market, instrument, instrument_status, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from
        :type market: str
        :param instrument: The unmapped instrument to retrieve on a specific market.
        :type instrument: str
        :param instrument_status: The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED
        :type instrument_status: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GENERICRESPONSE
        """
        kwargs['_return_http_data_only'] = True
        return self.index_cc_v1_markets_instruments_unmapped_with_http_info(market, instrument, instrument_status, **kwargs)  # noqa: E501

    @validate_arguments
    def index_cc_v1_markets_instruments_unmapped_with_http_info(self, market : Annotated[Optional[constr(strict=True, max_length=30, min_length=0)], Field(description="The exchange to obtain data from")] = None, instrument : Annotated[Optional[constr(strict=True, max_length=30, min_length=0)], Field(description="The unmapped instrument to retrieve on a specific market.")] = None, instrument_status : Annotated[Optional[List[StrictStr]], Field(description="The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED")] = None, **kwargs):  # noqa: E501
        """index_cc_v1_markets_instruments_unmapped  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.index_cc_v1_markets_instruments_unmapped_with_http_info(market, instrument, instrument_status, async_req=True)
        >>> result = thread.get()

        :param market: The exchange to obtain data from
        :type market: str
        :param instrument: The unmapped instrument to retrieve on a specific market.
        :type instrument: str
        :param instrument_status: The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED
        :type instrument_status: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GENERICRESPONSE, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'market',
            'instrument',
            'instrument_status'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method index_cc_v1_markets_instruments_unmapped" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('market') is not None:  # noqa: E501
            _query_params.append(('market', _params['market']))
        if _params.get('instrument') is not None:  # noqa: E501
            _query_params.append(('instrument', _params['instrument']))
        if _params.get('instrument_status') is not None:  # noqa: E501
            _query_params.append(('instrument_status', _params['instrument_status']))
            _collection_formats['instrument_status'] = 'csv'

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "GENERICRESPONSE",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '404': "Error",
            '405': "Error",
            '429': "Error",
            '500': "Error",
            '502': "Error",
            '503': "Error",
        }

        return self.api_client.call_api(
            '/index/cc/v1/markets/instruments/unmapped', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
