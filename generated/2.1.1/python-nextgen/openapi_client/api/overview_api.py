# coding: utf-8

"""
    CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry

    CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.  # noqa: E501

    The version of the OpenAPI document: 2.1.1
    Contact: data@cryptocompare.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr, conint

from typing import List, Optional

from openapi_client.models.genericresponse import GENERICRESPONSE

from openapi_client.api_client import ApiClient
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class OverviewApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def overview_v1_historical_marketcap_all_assets_days(self, groups : Annotated[Optional[List[StrictStr]], Field(description="When requesting all market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME")] = None, limit : Annotated[Optional[conint(strict=True, le=2000, ge=1)], Field(description="The number of data points to return")] = None, to_ts : Annotated[Optional[StrictInt], Field(description="Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}")] = None, aggregate : Annotated[Optional[conint(strict=True, le=30, ge=1)], Field(description="The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries")] = None, fill : Annotated[Optional[StrictBool], Field(description="Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.")] = None, response_format : Annotated[Optional[StrictStr], Field(description="The format of the data response in uppercase. It can be one of the following: JSON,CSV")] = None, **kwargs) -> GENERICRESPONSE:  # noqa: E501
        """overview_v1_historical_marketcap_all_assets_days  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.overview_v1_historical_marketcap_all_assets_days(groups, limit, to_ts, aggregate, fill, response_format, async_req=True)
        >>> result = thread.get()

        :param groups: When requesting all market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME
        :type groups: List[str]
        :param limit: The number of data points to return
        :type limit: int
        :param to_ts: Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}
        :type to_ts: int
        :param aggregate: The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
        :type aggregate: int
        :param fill: Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
        :type fill: bool
        :param response_format: The format of the data response in uppercase. It can be one of the following: JSON,CSV
        :type response_format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GENERICRESPONSE
        """
        kwargs['_return_http_data_only'] = True
        return self.overview_v1_historical_marketcap_all_assets_days_with_http_info(groups, limit, to_ts, aggregate, fill, response_format, **kwargs)  # noqa: E501

    @validate_arguments
    def overview_v1_historical_marketcap_all_assets_days_with_http_info(self, groups : Annotated[Optional[List[StrictStr]], Field(description="When requesting all market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME")] = None, limit : Annotated[Optional[conint(strict=True, le=2000, ge=1)], Field(description="The number of data points to return")] = None, to_ts : Annotated[Optional[StrictInt], Field(description="Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}")] = None, aggregate : Annotated[Optional[conint(strict=True, le=30, ge=1)], Field(description="The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries")] = None, fill : Annotated[Optional[StrictBool], Field(description="Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.")] = None, response_format : Annotated[Optional[StrictStr], Field(description="The format of the data response in uppercase. It can be one of the following: JSON,CSV")] = None, **kwargs):  # noqa: E501
        """overview_v1_historical_marketcap_all_assets_days  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.overview_v1_historical_marketcap_all_assets_days_with_http_info(groups, limit, to_ts, aggregate, fill, response_format, async_req=True)
        >>> result = thread.get()

        :param groups: When requesting all market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME
        :type groups: List[str]
        :param limit: The number of data points to return
        :type limit: int
        :param to_ts: Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}
        :type to_ts: int
        :param aggregate: The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
        :type aggregate: int
        :param fill: Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
        :type fill: bool
        :param response_format: The format of the data response in uppercase. It can be one of the following: JSON,CSV
        :type response_format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GENERICRESPONSE, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'groups',
            'limit',
            'to_ts',
            'aggregate',
            'fill',
            'response_format'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method overview_v1_historical_marketcap_all_assets_days" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('groups') is not None:  # noqa: E501
            _query_params.append(('groups', _params['groups']))
            _collection_formats['groups'] = 'csv'
        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))
        if _params.get('to_ts') is not None:  # noqa: E501
            _query_params.append(('to_ts', _params['to_ts']))
        if _params.get('aggregate') is not None:  # noqa: E501
            _query_params.append(('aggregate', _params['aggregate']))
        if _params.get('fill') is not None:  # noqa: E501
            _query_params.append(('fill', _params['fill']))
        if _params.get('response_format') is not None:  # noqa: E501
            _query_params.append(('response_format', _params['response_format']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "GENERICRESPONSE",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '404': "Error",
            '405': "Error",
            '429': "Error",
            '500': "Error",
            '502': "Error",
            '503': "Error",
        }

        return self.api_client.call_api(
            '/overview/v1/historical/marketcap/all/assets/days', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def overview_v1_historical_marketcap_all_assets_hours(self, groups : Annotated[Optional[List[StrictStr]], Field(description="When requesting all market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME")] = None, limit : Annotated[Optional[conint(strict=True, le=2000, ge=1)], Field(description="The number of data points to return")] = None, to_ts : Annotated[Optional[StrictInt], Field(description="Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}")] = None, aggregate : Annotated[Optional[conint(strict=True, le=30, ge=1)], Field(description="The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries")] = None, fill : Annotated[Optional[StrictBool], Field(description="Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.")] = None, response_format : Annotated[Optional[StrictStr], Field(description="The format of the data response in uppercase. It can be one of the following: JSON,CSV")] = None, **kwargs) -> GENERICRESPONSE:  # noqa: E501
        """overview_v1_historical_marketcap_all_assets_hours  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.overview_v1_historical_marketcap_all_assets_hours(groups, limit, to_ts, aggregate, fill, response_format, async_req=True)
        >>> result = thread.get()

        :param groups: When requesting all market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME
        :type groups: List[str]
        :param limit: The number of data points to return
        :type limit: int
        :param to_ts: Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}
        :type to_ts: int
        :param aggregate: The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
        :type aggregate: int
        :param fill: Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
        :type fill: bool
        :param response_format: The format of the data response in uppercase. It can be one of the following: JSON,CSV
        :type response_format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GENERICRESPONSE
        """
        kwargs['_return_http_data_only'] = True
        return self.overview_v1_historical_marketcap_all_assets_hours_with_http_info(groups, limit, to_ts, aggregate, fill, response_format, **kwargs)  # noqa: E501

    @validate_arguments
    def overview_v1_historical_marketcap_all_assets_hours_with_http_info(self, groups : Annotated[Optional[List[StrictStr]], Field(description="When requesting all market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME")] = None, limit : Annotated[Optional[conint(strict=True, le=2000, ge=1)], Field(description="The number of data points to return")] = None, to_ts : Annotated[Optional[StrictInt], Field(description="Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}")] = None, aggregate : Annotated[Optional[conint(strict=True, le=30, ge=1)], Field(description="The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries")] = None, fill : Annotated[Optional[StrictBool], Field(description="Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.")] = None, response_format : Annotated[Optional[StrictStr], Field(description="The format of the data response in uppercase. It can be one of the following: JSON,CSV")] = None, **kwargs):  # noqa: E501
        """overview_v1_historical_marketcap_all_assets_hours  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.overview_v1_historical_marketcap_all_assets_hours_with_http_info(groups, limit, to_ts, aggregate, fill, response_format, async_req=True)
        >>> result = thread.get()

        :param groups: When requesting all market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME
        :type groups: List[str]
        :param limit: The number of data points to return
        :type limit: int
        :param to_ts: Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}
        :type to_ts: int
        :param aggregate: The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
        :type aggregate: int
        :param fill: Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
        :type fill: bool
        :param response_format: The format of the data response in uppercase. It can be one of the following: JSON,CSV
        :type response_format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GENERICRESPONSE, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'groups',
            'limit',
            'to_ts',
            'aggregate',
            'fill',
            'response_format'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method overview_v1_historical_marketcap_all_assets_hours" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('groups') is not None:  # noqa: E501
            _query_params.append(('groups', _params['groups']))
            _collection_formats['groups'] = 'csv'
        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))
        if _params.get('to_ts') is not None:  # noqa: E501
            _query_params.append(('to_ts', _params['to_ts']))
        if _params.get('aggregate') is not None:  # noqa: E501
            _query_params.append(('aggregate', _params['aggregate']))
        if _params.get('fill') is not None:  # noqa: E501
            _query_params.append(('fill', _params['fill']))
        if _params.get('response_format') is not None:  # noqa: E501
            _query_params.append(('response_format', _params['response_format']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "GENERICRESPONSE",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '404': "Error",
            '405': "Error",
            '429': "Error",
            '500': "Error",
            '502': "Error",
            '503': "Error",
        }

        return self.api_client.call_api(
            '/overview/v1/historical/marketcap/all/assets/hours', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def overview_v1_historical_marketcap_ftw_assets_days(self, groups : Annotated[Optional[List[StrictStr]], Field(description="When requesting ftw universe market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME")] = None, limit : Annotated[Optional[conint(strict=True, le=2000, ge=1)], Field(description="The number of data points to return")] = None, to_ts : Annotated[Optional[StrictInt], Field(description="Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}")] = None, aggregate : Annotated[Optional[conint(strict=True, le=30, ge=1)], Field(description="The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries")] = None, fill : Annotated[Optional[StrictBool], Field(description="Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.")] = None, response_format : Annotated[Optional[StrictStr], Field(description="The format of the data response in uppercase. It can be one of the following: JSON,CSV")] = None, **kwargs) -> GENERICRESPONSE:  # noqa: E501
        """overview_v1_historical_marketcap_ftw_assets_days  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.overview_v1_historical_marketcap_ftw_assets_days(groups, limit, to_ts, aggregate, fill, response_format, async_req=True)
        >>> result = thread.get()

        :param groups: When requesting ftw universe market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME
        :type groups: List[str]
        :param limit: The number of data points to return
        :type limit: int
        :param to_ts: Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}
        :type to_ts: int
        :param aggregate: The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
        :type aggregate: int
        :param fill: Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
        :type fill: bool
        :param response_format: The format of the data response in uppercase. It can be one of the following: JSON,CSV
        :type response_format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GENERICRESPONSE
        """
        kwargs['_return_http_data_only'] = True
        return self.overview_v1_historical_marketcap_ftw_assets_days_with_http_info(groups, limit, to_ts, aggregate, fill, response_format, **kwargs)  # noqa: E501

    @validate_arguments
    def overview_v1_historical_marketcap_ftw_assets_days_with_http_info(self, groups : Annotated[Optional[List[StrictStr]], Field(description="When requesting ftw universe market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME")] = None, limit : Annotated[Optional[conint(strict=True, le=2000, ge=1)], Field(description="The number of data points to return")] = None, to_ts : Annotated[Optional[StrictInt], Field(description="Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}")] = None, aggregate : Annotated[Optional[conint(strict=True, le=30, ge=1)], Field(description="The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries")] = None, fill : Annotated[Optional[StrictBool], Field(description="Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.")] = None, response_format : Annotated[Optional[StrictStr], Field(description="The format of the data response in uppercase. It can be one of the following: JSON,CSV")] = None, **kwargs):  # noqa: E501
        """overview_v1_historical_marketcap_ftw_assets_days  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.overview_v1_historical_marketcap_ftw_assets_days_with_http_info(groups, limit, to_ts, aggregate, fill, response_format, async_req=True)
        >>> result = thread.get()

        :param groups: When requesting ftw universe market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME
        :type groups: List[str]
        :param limit: The number of data points to return
        :type limit: int
        :param to_ts: Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}
        :type to_ts: int
        :param aggregate: The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
        :type aggregate: int
        :param fill: Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
        :type fill: bool
        :param response_format: The format of the data response in uppercase. It can be one of the following: JSON,CSV
        :type response_format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GENERICRESPONSE, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'groups',
            'limit',
            'to_ts',
            'aggregate',
            'fill',
            'response_format'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method overview_v1_historical_marketcap_ftw_assets_days" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('groups') is not None:  # noqa: E501
            _query_params.append(('groups', _params['groups']))
            _collection_formats['groups'] = 'csv'
        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))
        if _params.get('to_ts') is not None:  # noqa: E501
            _query_params.append(('to_ts', _params['to_ts']))
        if _params.get('aggregate') is not None:  # noqa: E501
            _query_params.append(('aggregate', _params['aggregate']))
        if _params.get('fill') is not None:  # noqa: E501
            _query_params.append(('fill', _params['fill']))
        if _params.get('response_format') is not None:  # noqa: E501
            _query_params.append(('response_format', _params['response_format']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "GENERICRESPONSE",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '404': "Error",
            '405': "Error",
            '429': "Error",
            '500': "Error",
            '502': "Error",
            '503': "Error",
        }

        return self.api_client.call_api(
            '/overview/v1/historical/marketcap/ftw/assets/days', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def overview_v1_historical_marketcap_ftw_assets_hours(self, groups : Annotated[Optional[List[StrictStr]], Field(description="When requesting ftw universe market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME")] = None, limit : Annotated[Optional[conint(strict=True, le=2000, ge=1)], Field(description="The number of data points to return")] = None, to_ts : Annotated[Optional[StrictInt], Field(description="Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}")] = None, aggregate : Annotated[Optional[conint(strict=True, le=30, ge=1)], Field(description="The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries")] = None, fill : Annotated[Optional[StrictBool], Field(description="Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.")] = None, response_format : Annotated[Optional[StrictStr], Field(description="The format of the data response in uppercase. It can be one of the following: JSON,CSV")] = None, **kwargs) -> GENERICRESPONSE:  # noqa: E501
        """overview_v1_historical_marketcap_ftw_assets_hours  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.overview_v1_historical_marketcap_ftw_assets_hours(groups, limit, to_ts, aggregate, fill, response_format, async_req=True)
        >>> result = thread.get()

        :param groups: When requesting ftw universe market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME
        :type groups: List[str]
        :param limit: The number of data points to return
        :type limit: int
        :param to_ts: Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}
        :type to_ts: int
        :param aggregate: The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
        :type aggregate: int
        :param fill: Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
        :type fill: bool
        :param response_format: The format of the data response in uppercase. It can be one of the following: JSON,CSV
        :type response_format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GENERICRESPONSE
        """
        kwargs['_return_http_data_only'] = True
        return self.overview_v1_historical_marketcap_ftw_assets_hours_with_http_info(groups, limit, to_ts, aggregate, fill, response_format, **kwargs)  # noqa: E501

    @validate_arguments
    def overview_v1_historical_marketcap_ftw_assets_hours_with_http_info(self, groups : Annotated[Optional[List[StrictStr]], Field(description="When requesting ftw universe market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME")] = None, limit : Annotated[Optional[conint(strict=True, le=2000, ge=1)], Field(description="The number of data points to return")] = None, to_ts : Annotated[Optional[StrictInt], Field(description="Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}")] = None, aggregate : Annotated[Optional[conint(strict=True, le=30, ge=1)], Field(description="The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries")] = None, fill : Annotated[Optional[StrictBool], Field(description="Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.")] = None, response_format : Annotated[Optional[StrictStr], Field(description="The format of the data response in uppercase. It can be one of the following: JSON,CSV")] = None, **kwargs):  # noqa: E501
        """overview_v1_historical_marketcap_ftw_assets_hours  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.overview_v1_historical_marketcap_ftw_assets_hours_with_http_info(groups, limit, to_ts, aggregate, fill, response_format, async_req=True)
        >>> result = thread.get()

        :param groups: When requesting ftw universe market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME
        :type groups: List[str]
        :param limit: The number of data points to return
        :type limit: int
        :param to_ts: Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}
        :type to_ts: int
        :param aggregate: The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
        :type aggregate: int
        :param fill: Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
        :type fill: bool
        :param response_format: The format of the data response in uppercase. It can be one of the following: JSON,CSV
        :type response_format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GENERICRESPONSE, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'groups',
            'limit',
            'to_ts',
            'aggregate',
            'fill',
            'response_format'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method overview_v1_historical_marketcap_ftw_assets_hours" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('groups') is not None:  # noqa: E501
            _query_params.append(('groups', _params['groups']))
            _collection_formats['groups'] = 'csv'
        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))
        if _params.get('to_ts') is not None:  # noqa: E501
            _query_params.append(('to_ts', _params['to_ts']))
        if _params.get('aggregate') is not None:  # noqa: E501
            _query_params.append(('aggregate', _params['aggregate']))
        if _params.get('fill') is not None:  # noqa: E501
            _query_params.append(('fill', _params['fill']))
        if _params.get('response_format') is not None:  # noqa: E501
            _query_params.append(('response_format', _params['response_format']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "GENERICRESPONSE",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '404': "Error",
            '405': "Error",
            '429': "Error",
            '500': "Error",
            '502': "Error",
            '503': "Error",
        }

        return self.api_client.call_api(
            '/overview/v1/historical/marketcap/ftw/assets/hours', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def overview_v1_latest_marketcap_all_tick(self, groups : Annotated[Optional[List[StrictStr]], Field(description="When requesting all market cap tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,MOVING_24_HOUR")] = None, **kwargs) -> GENERICRESPONSE:  # noqa: E501
        """overview_v1_latest_marketcap_all_tick  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.overview_v1_latest_marketcap_all_tick(groups, async_req=True)
        >>> result = thread.get()

        :param groups: When requesting all market cap tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,MOVING_24_HOUR
        :type groups: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GENERICRESPONSE
        """
        kwargs['_return_http_data_only'] = True
        return self.overview_v1_latest_marketcap_all_tick_with_http_info(groups, **kwargs)  # noqa: E501

    @validate_arguments
    def overview_v1_latest_marketcap_all_tick_with_http_info(self, groups : Annotated[Optional[List[StrictStr]], Field(description="When requesting all market cap tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,MOVING_24_HOUR")] = None, **kwargs):  # noqa: E501
        """overview_v1_latest_marketcap_all_tick  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.overview_v1_latest_marketcap_all_tick_with_http_info(groups, async_req=True)
        >>> result = thread.get()

        :param groups: When requesting all market cap tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,MOVING_24_HOUR
        :type groups: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GENERICRESPONSE, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'groups'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method overview_v1_latest_marketcap_all_tick" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('groups') is not None:  # noqa: E501
            _query_params.append(('groups', _params['groups']))
            _collection_formats['groups'] = 'csv'

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "GENERICRESPONSE",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '404': "Error",
            '405': "Error",
            '429': "Error",
            '500': "Error",
            '502': "Error",
            '503': "Error",
        }

        return self.api_client.call_api(
            '/overview/v1/latest/marketcap/all/tick', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def overview_v1_latest_marketcap_ftw_tick(self, groups : Annotated[Optional[List[StrictStr]], Field(description="When requesting ftw universe market cap tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,MOVING_24_HOUR")] = None, **kwargs) -> GENERICRESPONSE:  # noqa: E501
        """overview_v1_latest_marketcap_ftw_tick  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.overview_v1_latest_marketcap_ftw_tick(groups, async_req=True)
        >>> result = thread.get()

        :param groups: When requesting ftw universe market cap tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,MOVING_24_HOUR
        :type groups: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GENERICRESPONSE
        """
        kwargs['_return_http_data_only'] = True
        return self.overview_v1_latest_marketcap_ftw_tick_with_http_info(groups, **kwargs)  # noqa: E501

    @validate_arguments
    def overview_v1_latest_marketcap_ftw_tick_with_http_info(self, groups : Annotated[Optional[List[StrictStr]], Field(description="When requesting ftw universe market cap tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,MOVING_24_HOUR")] = None, **kwargs):  # noqa: E501
        """overview_v1_latest_marketcap_ftw_tick  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.overview_v1_latest_marketcap_ftw_tick_with_http_info(groups, async_req=True)
        >>> result = thread.get()

        :param groups: When requesting ftw universe market cap tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,MOVING_24_HOUR
        :type groups: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GENERICRESPONSE, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'groups'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method overview_v1_latest_marketcap_ftw_tick" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('groups') is not None:  # noqa: E501
            _query_params.append(('groups', _params['groups']))
            _collection_formats['groups'] = 'csv'

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "GENERICRESPONSE",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '404': "Error",
            '405': "Error",
            '429': "Error",
            '500': "Error",
            '502': "Error",
            '503': "Error",
        }

        return self.api_client.call_api(
            '/overview/v1/latest/marketcap/ftw/tick', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
