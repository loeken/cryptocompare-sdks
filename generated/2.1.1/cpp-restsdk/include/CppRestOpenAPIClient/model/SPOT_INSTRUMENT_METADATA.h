/**
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 * CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: data@cryptocompare.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.3.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * SPOT_INSTRUMENT_METADATA.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_SPOT_INSTRUMENT_METADATA_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_SPOT_INSTRUMENT_METADATA_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/Object.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  SPOT_INSTRUMENT_METADATA
    : public ModelBase
{
public:
    SPOT_INSTRUMENT_METADATA();
    virtual ~SPOT_INSTRUMENT_METADATA();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// SPOT_INSTRUMENT_METADATA members

    /// <summary>
    /// This is the first time instrument was seen on instrumentListSourceType BLOB.
    /// </summary>
    int32_t getFIRSTSEENONBLOBTS() const;
    bool fIRSTSEENONBLOBTSIsSet() const;
    void unsetFIRST_SEEN_ON_BLOB_TS();

    void setFIRSTSEENONBLOBTS(int32_t value);

    /// <summary>
    /// This is the first time instrument was seen on instrumentListSourceType FIX.
    /// </summary>
    int32_t getFIRSTSEENONFIXTS() const;
    bool fIRSTSEENONFIXTSIsSet() const;
    void unsetFIRST_SEEN_ON_FIX_TS();

    void setFIRSTSEENONFIXTS(int32_t value);

    /// <summary>
    /// This is the first time instrument was seen on instrumentListSourceType HARDCODED.
    /// </summary>
    int32_t getFIRSTSEENONHARDCODEDTS() const;
    bool fIRSTSEENONHARDCODEDTSIsSet() const;
    void unsetFIRST_SEEN_ON_HARDCODED_TS();

    void setFIRSTSEENONHARDCODEDTS(int32_t value);

    /// <summary>
    /// This is the first time instrument was seen on instrumentListSourceType INDEX_COMPOSITION.
    /// </summary>
    int32_t getFIRSTSEENONINDEXCOMPOSITIONTS() const;
    bool fIRSTSEENONINDEXCOMPOSITIONTSIsSet() const;
    void unsetFIRST_SEEN_ON_INDEX_COMPOSITION_TS();

    void setFIRSTSEENONINDEXCOMPOSITIONTS(int32_t value);

    /// <summary>
    /// This is the first time instrument was seen on instrumentListSourceType NSQ.
    /// </summary>
    int32_t getFIRSTSEENONNSQTS() const;
    bool fIRSTSEENONNSQTSIsSet() const;
    void unsetFIRST_SEEN_ON_NSQ_TS();

    void setFIRSTSEENONNSQTS(int32_t value);

    /// <summary>
    /// This is the first time instrument was seen on instrumentListSourceType POLLING.
    /// </summary>
    int32_t getFIRSTSEENONPOLLINGTS() const;
    bool fIRSTSEENONPOLLINGTSIsSet() const;
    void unsetFIRST_SEEN_ON_POLLING_TS();

    void setFIRSTSEENONPOLLINGTS(int32_t value);

    /// <summary>
    /// This is the first time instrument was seen on instrumentListSourceType STREAMING.
    /// </summary>
    int32_t getFIRSTSEENONSTREAMINGTS() const;
    bool fIRSTSEENONSTREAMINGTSIsSet() const;
    void unsetFIRST_SEEN_ON_STREAMING_TS();

    void setFIRSTSEENONSTREAMINGTS(int32_t value);

    /// <summary>
    /// This is the first TRADE_SPOT that we have seen on the specific source type in internal format.
    /// </summary>
    std::shared_ptr<Object> getFIRSTTRADESPOTFROMBACKFILL() const;
    bool fIRSTTRADESPOTFROMBACKFILLIsSet() const;
    void unsetFIRST_TRADE_SPOT_FROM_BACKFILL();

    void setFIRSTTRADESPOTFROMBACKFILL(const std::shared_ptr<Object>& value);

    /// <summary>
    /// This is the first TRADE_SPOT that we have seen on the specific source type in external format.
    /// </summary>
    std::shared_ptr<Object> getFIRSTTRADESPOTFROMBACKFILLEXTERNAL() const;
    bool fIRSTTRADESPOTFROMBACKFILLEXTERNALIsSet() const;
    void unsetFIRST_TRADE_SPOT_FROM_BACKFILL_EXTERNAL();

    void setFIRSTTRADESPOTFROMBACKFILLEXTERNAL(const std::shared_ptr<Object>& value);

    /// <summary>
    /// This is the first TRADE_SPOT that we have seen on the specific source type in internal format.
    /// </summary>
    std::shared_ptr<Object> getFIRSTTRADESPOTFROMBLOB() const;
    bool fIRSTTRADESPOTFROMBLOBIsSet() const;
    void unsetFIRST_TRADE_SPOT_FROM_BLOB();

    void setFIRSTTRADESPOTFROMBLOB(const std::shared_ptr<Object>& value);

    /// <summary>
    /// This is the first TRADE_SPOT that we have seen on the specific source type in external format.
    /// </summary>
    std::shared_ptr<Object> getFIRSTTRADESPOTFROMBLOBEXTERNAL() const;
    bool fIRSTTRADESPOTFROMBLOBEXTERNALIsSet() const;
    void unsetFIRST_TRADE_SPOT_FROM_BLOB_EXTERNAL();

    void setFIRSTTRADESPOTFROMBLOBEXTERNAL(const std::shared_ptr<Object>& value);

    /// <summary>
    /// This is the first TRADE_SPOT that we have seen on the specific source type in internal format.
    /// </summary>
    std::shared_ptr<Object> getFIRSTTRADESPOTFROMCALCULATED() const;
    bool fIRSTTRADESPOTFROMCALCULATEDIsSet() const;
    void unsetFIRST_TRADE_SPOT_FROM_CALCULATED();

    void setFIRSTTRADESPOTFROMCALCULATED(const std::shared_ptr<Object>& value);

    /// <summary>
    /// This is the first TRADE_SPOT that we have seen on the specific source type in external format.
    /// </summary>
    std::shared_ptr<Object> getFIRSTTRADESPOTFROMCALCULATEDEXTERNAL() const;
    bool fIRSTTRADESPOTFROMCALCULATEDEXTERNALIsSet() const;
    void unsetFIRST_TRADE_SPOT_FROM_CALCULATED_EXTERNAL();

    void setFIRSTTRADESPOTFROMCALCULATEDEXTERNAL(const std::shared_ptr<Object>& value);

    /// <summary>
    /// This is the first TRADE_SPOT that we have seen on the specific source type in internal format.
    /// </summary>
    std::shared_ptr<Object> getFIRSTTRADESPOTFROMFIX() const;
    bool fIRSTTRADESPOTFROMFIXIsSet() const;
    void unsetFIRST_TRADE_SPOT_FROM_FIX();

    void setFIRSTTRADESPOTFROMFIX(const std::shared_ptr<Object>& value);

    /// <summary>
    /// This is the first TRADE_SPOT that we have seen on the specific source type in external format.
    /// </summary>
    std::shared_ptr<Object> getFIRSTTRADESPOTFROMFIXEXTERNAL() const;
    bool fIRSTTRADESPOTFROMFIXEXTERNALIsSet() const;
    void unsetFIRST_TRADE_SPOT_FROM_FIX_EXTERNAL();

    void setFIRSTTRADESPOTFROMFIXEXTERNAL(const std::shared_ptr<Object>& value);

    /// <summary>
    /// This is the first TRADE_SPOT that we have seen on the specific source type in internal format.
    /// </summary>
    std::shared_ptr<Object> getFIRSTTRADESPOTFROMGO() const;
    bool fIRSTTRADESPOTFROMGOIsSet() const;
    void unsetFIRST_TRADE_SPOT_FROM_GO();

    void setFIRSTTRADESPOTFROMGO(const std::shared_ptr<Object>& value);

    /// <summary>
    /// This is the first TRADE_SPOT that we have seen on the specific source type in external format.
    /// </summary>
    std::shared_ptr<Object> getFIRSTTRADESPOTFROMGOEXTERNAL() const;
    bool fIRSTTRADESPOTFROMGOEXTERNALIsSet() const;
    void unsetFIRST_TRADE_SPOT_FROM_GO_EXTERNAL();

    void setFIRSTTRADESPOTFROMGOEXTERNAL(const std::shared_ptr<Object>& value);

    /// <summary>
    /// This is the first TRADE_SPOT that we have seen on the specific source type in internal format.
    /// </summary>
    std::shared_ptr<Object> getFIRSTTRADESPOTFROMPOLLING() const;
    bool fIRSTTRADESPOTFROMPOLLINGIsSet() const;
    void unsetFIRST_TRADE_SPOT_FROM_POLLING();

    void setFIRSTTRADESPOTFROMPOLLING(const std::shared_ptr<Object>& value);

    /// <summary>
    /// This is the first TRADE_SPOT that we have seen on the specific source type in external format.
    /// </summary>
    std::shared_ptr<Object> getFIRSTTRADESPOTFROMPOLLINGEXTERNAL() const;
    bool fIRSTTRADESPOTFROMPOLLINGEXTERNALIsSet() const;
    void unsetFIRST_TRADE_SPOT_FROM_POLLING_EXTERNAL();

    void setFIRSTTRADESPOTFROMPOLLINGEXTERNAL(const std::shared_ptr<Object>& value);

    /// <summary>
    /// This is the first TRADE_SPOT that we have seen on the specific source type in internal format.
    /// </summary>
    std::shared_ptr<Object> getFIRSTTRADESPOTFROMSTREAMING() const;
    bool fIRSTTRADESPOTFROMSTREAMINGIsSet() const;
    void unsetFIRST_TRADE_SPOT_FROM_STREAMING();

    void setFIRSTTRADESPOTFROMSTREAMING(const std::shared_ptr<Object>& value);

    /// <summary>
    /// This is the first TRADE_SPOT that we have seen on the specific source type in external format.
    /// </summary>
    std::shared_ptr<Object> getFIRSTTRADESPOTFROMSTREAMINGEXTERNAL() const;
    bool fIRSTTRADESPOTFROMSTREAMINGEXTERNALIsSet() const;
    void unsetFIRST_TRADE_SPOT_FROM_STREAMING_EXTERNAL();

    void setFIRSTTRADESPOTFROMSTREAMINGEXTERNAL(const std::shared_ptr<Object>& value);

    /// <summary>
    /// The migration destination vm hostname.
    /// </summary>
    utility::string_t getHOSTMIGRATIONDESTINATION() const;
    bool hOSTMIGRATIONDESTINATIONIsSet() const;
    void unsetHOST_MIGRATION_DESTINATION();

    void setHOSTMIGRATIONDESTINATION(const utility::string_t& value);

    /// <summary>
    /// The migration source vm hostname.
    /// </summary>
    utility::string_t getHOSTMIGRATIONSOURCE() const;
    bool hOSTMIGRATIONSOURCEIsSet() const;
    void unsetHOST_MIGRATION_SOURCE();

    void setHOSTMIGRATIONSOURCE(const utility::string_t& value);

    /// <summary>
    /// The migration status of the symbol, we only poll / stream / connect empty or SETTLED
    /// </summary>
    utility::string_t getHOSTMIGRATIONSTATUS() const;
    bool hOSTMIGRATIONSTATUSIsSet() const;
    void unsetHOST_MIGRATION_STATUS();

    void setHOSTMIGRATIONSTATUS(const utility::string_t& value);

    /// <summary>
    /// The instrument ID as it is on the exchange with small modifications - we do not allow the following characters inside isntrument ids: ,/&amp;?
    /// </summary>
    utility::string_t getINSTRUMENT() const;
    bool iNSTRUMENTIsSet() const;
    void unsetINSTRUMENT();

    void setINSTRUMENT(const utility::string_t& value);

    /// <summary>
    /// The full data we get from the polling endpoint for this specific instrument. This is a JSON stringified object with different properties per exchange.
    /// </summary>
    utility::string_t getINSTRUMENTEXTERNALDATA() const;
    bool iNSTRUMENTEXTERNALDATAIsSet() const;
    void unsetINSTRUMENT_EXTERNAL_DATA();

    void setINSTRUMENTEXTERNALDATA(const utility::string_t& value);

    /// <summary>
    /// The current mapping information for this instrument
    /// </summary>
    std::shared_ptr<Object> getINSTRUMENTMAPPING() const;
    bool iNSTRUMENTMAPPINGIsSet() const;
    void unsetINSTRUMENT_MAPPING();

    void setINSTRUMENTMAPPING(const std::shared_ptr<Object>& value);

    /// <summary>
    /// Historical mapping information for this instrument
    /// </summary>
    std::vector<utility::string_t>& getINSTRUMENTMAPPINGHISTORY();
    bool iNSTRUMENTMAPPINGHISTORYIsSet() const;
    void unsetINSTRUMENT_MAPPING_HISTORY();

    void setINSTRUMENTMAPPINGHISTORY(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Where do we get the instrument id / INSTRUMENT_{messageName}_REST_URI / INSTRUMENT_{messageName}_STREAMING_SUBSCRIPTION etc from.
    /// </summary>
    utility::string_t getINSTRUMENTSOURCEBACKFILL() const;
    bool iNSTRUMENTSOURCEBACKFILLIsSet() const;
    void unsetINSTRUMENT_SOURCE_BACKFILL();

    void setINSTRUMENTSOURCEBACKFILL(const utility::string_t& value);

    /// <summary>
    /// Where do we get the instrument id / INSTRUMENT_{messageName}_REST_URI / INSTRUMENT_{messageName}_STREAMING_SUBSCRIPTION etc from.
    /// </summary>
    utility::string_t getINSTRUMENTSOURCEBLOB() const;
    bool iNSTRUMENTSOURCEBLOBIsSet() const;
    void unsetINSTRUMENT_SOURCE_BLOB();

    void setINSTRUMENTSOURCEBLOB(const utility::string_t& value);

    /// <summary>
    /// Where do we get the instrument id / INSTRUMENT_{messageName}_REST_URI / INSTRUMENT_{messageName}_STREAMING_SUBSCRIPTION etc from.
    /// </summary>
    utility::string_t getINSTRUMENTSOURCECALCULATED() const;
    bool iNSTRUMENTSOURCECALCULATEDIsSet() const;
    void unsetINSTRUMENT_SOURCE_CALCULATED();

    void setINSTRUMENTSOURCECALCULATED(const utility::string_t& value);

    /// <summary>
    /// Where do we get the instrument id / INSTRUMENT_{messageName}_REST_URI / INSTRUMENT_{messageName}_STREAMING_SUBSCRIPTION etc from.
    /// </summary>
    utility::string_t getINSTRUMENTSOURCEFIX() const;
    bool iNSTRUMENTSOURCEFIXIsSet() const;
    void unsetINSTRUMENT_SOURCE_FIX();

    void setINSTRUMENTSOURCEFIX(const utility::string_t& value);

    /// <summary>
    /// Where do we get the instrument id / INSTRUMENT_{messageName}_REST_URI / INSTRUMENT_{messageName}_STREAMING_SUBSCRIPTION etc from.
    /// </summary>
    utility::string_t getINSTRUMENTSOURCEGO() const;
    bool iNSTRUMENTSOURCEGOIsSet() const;
    void unsetINSTRUMENT_SOURCE_GO();

    void setINSTRUMENTSOURCEGO(const utility::string_t& value);

    /// <summary>
    /// Where do we get the instrument id / INSTRUMENT_{messageName}_REST_URI / INSTRUMENT_{messageName}_STREAMING_SUBSCRIPTION etc from.
    /// </summary>
    utility::string_t getINSTRUMENTSOURCEPOLLING() const;
    bool iNSTRUMENTSOURCEPOLLINGIsSet() const;
    void unsetINSTRUMENT_SOURCE_POLLING();

    void setINSTRUMENTSOURCEPOLLING(const utility::string_t& value);

    /// <summary>
    /// Where do we get the instrument id / INSTRUMENT_{messageName}_REST_URI / INSTRUMENT_{messageName}_STREAMING_SUBSCRIPTION etc from.
    /// </summary>
    utility::string_t getINSTRUMENTSOURCESTREAMING() const;
    bool iNSTRUMENTSOURCESTREAMINGIsSet() const;
    void unsetINSTRUMENT_SOURCE_STREAMING();

    void setINSTRUMENTSOURCESTREAMING(const utility::string_t& value);

    /// <summary>
    /// The status of the symbol, we only poll / stream / connect to the ACTIVE ones, for the RETIRED / IGNORED / EXPIRED  one we no longer query for data.
    /// </summary>
    utility::string_t getINSTRUMENTSTATUS() const;
    bool iNSTRUMENTSTATUSIsSet() const;
    void unsetINSTRUMENT_STATUS();

    void setINSTRUMENTSTATUS(const utility::string_t& value);

    /// <summary>
    /// The last proxied REST request we sent to the proxy swarm to get TRADE_SPOT for the instrument.
    /// </summary>
    std::shared_ptr<Object> getINSTRUMENTTRADESPOTFROMBACKFILLLASTPROXIEDRESTREQUEST() const;
    bool iNSTRUMENTTRADESPOTFROMBACKFILLLASTPROXIEDRESTREQUESTIsSet() const;
    void unsetINSTRUMENT_TRADE_SPOT_FROM_BACKFILL_LAST_PROXIED_REST_REQUEST();

    void setINSTRUMENTTRADESPOTFROMBACKFILLLASTPROXIEDRESTREQUEST(const std::shared_ptr<Object>& value);

    /// <summary>
    /// The last time we sent a request to the proxy swarm to get TRADE_SPOT for the instrument.
    /// </summary>
    int32_t getINSTRUMENTTRADESPOTFROMBACKFILLRESTURILASTREQUESTTS() const;
    bool iNSTRUMENTTRADESPOTFROMBACKFILLRESTURILASTREQUESTTSIsSet() const;
    void unsetINSTRUMENT_TRADE_SPOT_FROM_BACKFILL_REST_URI_LAST_REQUEST_TS();

    void setINSTRUMENTTRADESPOTFROMBACKFILLRESTURILASTREQUESTTS(int32_t value);

    /// <summary>
    /// The last time we received a request from the proxy swarm with TRADE_SPOT for this instrument.
    /// </summary>
    int32_t getINSTRUMENTTRADESPOTFROMBACKFILLRESTURILASTRESPONSETS() const;
    bool iNSTRUMENTTRADESPOTFROMBACKFILLRESTURILASTRESPONSETSIsSet() const;
    void unsetINSTRUMENT_TRADE_SPOT_FROM_BACKFILL_REST_URI_LAST_RESPONSE_TS();

    void setINSTRUMENTTRADESPOTFROMBACKFILLRESTURILASTRESPONSETS(int32_t value);

    /// <summary>
    /// The next time we expect to make a request for TRADE_SPOT on this instrument.
    /// </summary>
    int32_t getINSTRUMENTTRADESPOTFROMBACKFILLRESTURINEXTREQUESTTS() const;
    bool iNSTRUMENTTRADESPOTFROMBACKFILLRESTURINEXTREQUESTTSIsSet() const;
    void unsetINSTRUMENT_TRADE_SPOT_FROM_BACKFILL_REST_URI_NEXT_REQUEST_TS();

    void setINSTRUMENTTRADESPOTFROMBACKFILLRESTURINEXTREQUESTTS(int32_t value);

    /// <summary>
    /// The last proxied REST request we sent to the proxy swarm to get TRADE_SPOT for the instrument.
    /// </summary>
    std::shared_ptr<Object> getINSTRUMENTTRADESPOTFROMBLOBLASTPROXIEDRESTREQUEST() const;
    bool iNSTRUMENTTRADESPOTFROMBLOBLASTPROXIEDRESTREQUESTIsSet() const;
    void unsetINSTRUMENT_TRADE_SPOT_FROM_BLOB_LAST_PROXIED_REST_REQUEST();

    void setINSTRUMENTTRADESPOTFROMBLOBLASTPROXIEDRESTREQUEST(const std::shared_ptr<Object>& value);

    /// <summary>
    /// The last time we sent a request to the proxy swarm to get TRADE_SPOT for the instrument.
    /// </summary>
    int32_t getINSTRUMENTTRADESPOTFROMBLOBRESTURILASTREQUESTTS() const;
    bool iNSTRUMENTTRADESPOTFROMBLOBRESTURILASTREQUESTTSIsSet() const;
    void unsetINSTRUMENT_TRADE_SPOT_FROM_BLOB_REST_URI_LAST_REQUEST_TS();

    void setINSTRUMENTTRADESPOTFROMBLOBRESTURILASTREQUESTTS(int32_t value);

    /// <summary>
    /// The last time we received a request from the proxy swarm with TRADE_SPOT for this instrument.
    /// </summary>
    int32_t getINSTRUMENTTRADESPOTFROMBLOBRESTURILASTRESPONSETS() const;
    bool iNSTRUMENTTRADESPOTFROMBLOBRESTURILASTRESPONSETSIsSet() const;
    void unsetINSTRUMENT_TRADE_SPOT_FROM_BLOB_REST_URI_LAST_RESPONSE_TS();

    void setINSTRUMENTTRADESPOTFROMBLOBRESTURILASTRESPONSETS(int32_t value);

    /// <summary>
    /// The next time we expect to make a request for TRADE_SPOT on this instrument.
    /// </summary>
    int32_t getINSTRUMENTTRADESPOTFROMBLOBRESTURINEXTREQUESTTS() const;
    bool iNSTRUMENTTRADESPOTFROMBLOBRESTURINEXTREQUESTTSIsSet() const;
    void unsetINSTRUMENT_TRADE_SPOT_FROM_BLOB_REST_URI_NEXT_REQUEST_TS();

    void setINSTRUMENTTRADESPOTFROMBLOBRESTURINEXTREQUESTTS(int32_t value);

    /// <summary>
    /// The last proxied REST request we sent to the proxy swarm to get TRADE_SPOT for the instrument.
    /// </summary>
    std::shared_ptr<Object> getINSTRUMENTTRADESPOTFROMCALCULATEDLASTPROXIEDRESTREQUEST() const;
    bool iNSTRUMENTTRADESPOTFROMCALCULATEDLASTPROXIEDRESTREQUESTIsSet() const;
    void unsetINSTRUMENT_TRADE_SPOT_FROM_CALCULATED_LAST_PROXIED_REST_REQUEST();

    void setINSTRUMENTTRADESPOTFROMCALCULATEDLASTPROXIEDRESTREQUEST(const std::shared_ptr<Object>& value);

    /// <summary>
    /// The last time we sent a request to the proxy swarm to get TRADE_SPOT for the instrument.
    /// </summary>
    int32_t getINSTRUMENTTRADESPOTFROMCALCULATEDRESTURILASTREQUESTTS() const;
    bool iNSTRUMENTTRADESPOTFROMCALCULATEDRESTURILASTREQUESTTSIsSet() const;
    void unsetINSTRUMENT_TRADE_SPOT_FROM_CALCULATED_REST_URI_LAST_REQUEST_TS();

    void setINSTRUMENTTRADESPOTFROMCALCULATEDRESTURILASTREQUESTTS(int32_t value);

    /// <summary>
    /// The last time we received a request from the proxy swarm with TRADE_SPOT for this instrument.
    /// </summary>
    int32_t getINSTRUMENTTRADESPOTFROMCALCULATEDRESTURILASTRESPONSETS() const;
    bool iNSTRUMENTTRADESPOTFROMCALCULATEDRESTURILASTRESPONSETSIsSet() const;
    void unsetINSTRUMENT_TRADE_SPOT_FROM_CALCULATED_REST_URI_LAST_RESPONSE_TS();

    void setINSTRUMENTTRADESPOTFROMCALCULATEDRESTURILASTRESPONSETS(int32_t value);

    /// <summary>
    /// The next time we expect to make a request for TRADE_SPOT on this instrument.
    /// </summary>
    int32_t getINSTRUMENTTRADESPOTFROMCALCULATEDRESTURINEXTREQUESTTS() const;
    bool iNSTRUMENTTRADESPOTFROMCALCULATEDRESTURINEXTREQUESTTSIsSet() const;
    void unsetINSTRUMENT_TRADE_SPOT_FROM_CALCULATED_REST_URI_NEXT_REQUEST_TS();

    void setINSTRUMENTTRADESPOTFROMCALCULATEDRESTURINEXTREQUESTTS(int32_t value);

    /// <summary>
    /// The last proxied REST request we sent to the proxy swarm to get TRADE_SPOT for the instrument.
    /// </summary>
    std::shared_ptr<Object> getINSTRUMENTTRADESPOTFROMFIXLASTPROXIEDRESTREQUEST() const;
    bool iNSTRUMENTTRADESPOTFROMFIXLASTPROXIEDRESTREQUESTIsSet() const;
    void unsetINSTRUMENT_TRADE_SPOT_FROM_FIX_LAST_PROXIED_REST_REQUEST();

    void setINSTRUMENTTRADESPOTFROMFIXLASTPROXIEDRESTREQUEST(const std::shared_ptr<Object>& value);

    /// <summary>
    /// The last time we sent a request to the proxy swarm to get TRADE_SPOT for the instrument.
    /// </summary>
    int32_t getINSTRUMENTTRADESPOTFROMFIXRESTURILASTREQUESTTS() const;
    bool iNSTRUMENTTRADESPOTFROMFIXRESTURILASTREQUESTTSIsSet() const;
    void unsetINSTRUMENT_TRADE_SPOT_FROM_FIX_REST_URI_LAST_REQUEST_TS();

    void setINSTRUMENTTRADESPOTFROMFIXRESTURILASTREQUESTTS(int32_t value);

    /// <summary>
    /// The last time we received a request from the proxy swarm with TRADE_SPOT for this instrument.
    /// </summary>
    int32_t getINSTRUMENTTRADESPOTFROMFIXRESTURILASTRESPONSETS() const;
    bool iNSTRUMENTTRADESPOTFROMFIXRESTURILASTRESPONSETSIsSet() const;
    void unsetINSTRUMENT_TRADE_SPOT_FROM_FIX_REST_URI_LAST_RESPONSE_TS();

    void setINSTRUMENTTRADESPOTFROMFIXRESTURILASTRESPONSETS(int32_t value);

    /// <summary>
    /// The next time we expect to make a request for TRADE_SPOT on this instrument.
    /// </summary>
    int32_t getINSTRUMENTTRADESPOTFROMFIXRESTURINEXTREQUESTTS() const;
    bool iNSTRUMENTTRADESPOTFROMFIXRESTURINEXTREQUESTTSIsSet() const;
    void unsetINSTRUMENT_TRADE_SPOT_FROM_FIX_REST_URI_NEXT_REQUEST_TS();

    void setINSTRUMENTTRADESPOTFROMFIXRESTURINEXTREQUESTTS(int32_t value);

    /// <summary>
    /// The last proxied REST request we sent to the proxy swarm to get TRADE_SPOT for the instrument.
    /// </summary>
    std::shared_ptr<Object> getINSTRUMENTTRADESPOTFROMGOLASTPROXIEDRESTREQUEST() const;
    bool iNSTRUMENTTRADESPOTFROMGOLASTPROXIEDRESTREQUESTIsSet() const;
    void unsetINSTRUMENT_TRADE_SPOT_FROM_GO_LAST_PROXIED_REST_REQUEST();

    void setINSTRUMENTTRADESPOTFROMGOLASTPROXIEDRESTREQUEST(const std::shared_ptr<Object>& value);

    /// <summary>
    /// The last time we sent a request to the proxy swarm to get TRADE_SPOT for the instrument.
    /// </summary>
    int32_t getINSTRUMENTTRADESPOTFROMGORESTURILASTREQUESTTS() const;
    bool iNSTRUMENTTRADESPOTFROMGORESTURILASTREQUESTTSIsSet() const;
    void unsetINSTRUMENT_TRADE_SPOT_FROM_GO_REST_URI_LAST_REQUEST_TS();

    void setINSTRUMENTTRADESPOTFROMGORESTURILASTREQUESTTS(int32_t value);

    /// <summary>
    /// The last time we received a request from the proxy swarm with TRADE_SPOT for this instrument.
    /// </summary>
    int32_t getINSTRUMENTTRADESPOTFROMGORESTURILASTRESPONSETS() const;
    bool iNSTRUMENTTRADESPOTFROMGORESTURILASTRESPONSETSIsSet() const;
    void unsetINSTRUMENT_TRADE_SPOT_FROM_GO_REST_URI_LAST_RESPONSE_TS();

    void setINSTRUMENTTRADESPOTFROMGORESTURILASTRESPONSETS(int32_t value);

    /// <summary>
    /// The next time we expect to make a request for TRADE_SPOT on this instrument.
    /// </summary>
    int32_t getINSTRUMENTTRADESPOTFROMGORESTURINEXTREQUESTTS() const;
    bool iNSTRUMENTTRADESPOTFROMGORESTURINEXTREQUESTTSIsSet() const;
    void unsetINSTRUMENT_TRADE_SPOT_FROM_GO_REST_URI_NEXT_REQUEST_TS();

    void setINSTRUMENTTRADESPOTFROMGORESTURINEXTREQUESTTS(int32_t value);

    /// <summary>
    /// The last proxied REST request we sent to the proxy swarm to get TRADE_SPOT for the instrument.
    /// </summary>
    std::shared_ptr<Object> getINSTRUMENTTRADESPOTFROMPOLLINGLASTPROXIEDRESTREQUEST() const;
    bool iNSTRUMENTTRADESPOTFROMPOLLINGLASTPROXIEDRESTREQUESTIsSet() const;
    void unsetINSTRUMENT_TRADE_SPOT_FROM_POLLING_LAST_PROXIED_REST_REQUEST();

    void setINSTRUMENTTRADESPOTFROMPOLLINGLASTPROXIEDRESTREQUEST(const std::shared_ptr<Object>& value);

    /// <summary>
    /// The last time we sent a request to the proxy swarm to get TRADE_SPOT for the instrument.
    /// </summary>
    int32_t getINSTRUMENTTRADESPOTFROMPOLLINGRESTURILASTREQUESTTS() const;
    bool iNSTRUMENTTRADESPOTFROMPOLLINGRESTURILASTREQUESTTSIsSet() const;
    void unsetINSTRUMENT_TRADE_SPOT_FROM_POLLING_REST_URI_LAST_REQUEST_TS();

    void setINSTRUMENTTRADESPOTFROMPOLLINGRESTURILASTREQUESTTS(int32_t value);

    /// <summary>
    /// The last time we received a request from the proxy swarm with TRADE_SPOT for this instrument.
    /// </summary>
    int32_t getINSTRUMENTTRADESPOTFROMPOLLINGRESTURILASTRESPONSETS() const;
    bool iNSTRUMENTTRADESPOTFROMPOLLINGRESTURILASTRESPONSETSIsSet() const;
    void unsetINSTRUMENT_TRADE_SPOT_FROM_POLLING_REST_URI_LAST_RESPONSE_TS();

    void setINSTRUMENTTRADESPOTFROMPOLLINGRESTURILASTRESPONSETS(int32_t value);

    /// <summary>
    /// The next time we expect to make a request for TRADE_SPOT on this instrument.
    /// </summary>
    int32_t getINSTRUMENTTRADESPOTFROMPOLLINGRESTURINEXTREQUESTTS() const;
    bool iNSTRUMENTTRADESPOTFROMPOLLINGRESTURINEXTREQUESTTSIsSet() const;
    void unsetINSTRUMENT_TRADE_SPOT_FROM_POLLING_REST_URI_NEXT_REQUEST_TS();

    void setINSTRUMENTTRADESPOTFROMPOLLINGRESTURINEXTREQUESTTS(int32_t value);

    /// <summary>
    /// The last proxied REST request we sent to the proxy swarm to get TRADE_SPOT for the instrument.
    /// </summary>
    std::shared_ptr<Object> getINSTRUMENTTRADESPOTFROMSTREAMINGLASTPROXIEDRESTREQUEST() const;
    bool iNSTRUMENTTRADESPOTFROMSTREAMINGLASTPROXIEDRESTREQUESTIsSet() const;
    void unsetINSTRUMENT_TRADE_SPOT_FROM_STREAMING_LAST_PROXIED_REST_REQUEST();

    void setINSTRUMENTTRADESPOTFROMSTREAMINGLASTPROXIEDRESTREQUEST(const std::shared_ptr<Object>& value);

    /// <summary>
    /// The last time we sent a request to the proxy swarm to get TRADE_SPOT for the instrument.
    /// </summary>
    int32_t getINSTRUMENTTRADESPOTFROMSTREAMINGRESTURILASTREQUESTTS() const;
    bool iNSTRUMENTTRADESPOTFROMSTREAMINGRESTURILASTREQUESTTSIsSet() const;
    void unsetINSTRUMENT_TRADE_SPOT_FROM_STREAMING_REST_URI_LAST_REQUEST_TS();

    void setINSTRUMENTTRADESPOTFROMSTREAMINGRESTURILASTREQUESTTS(int32_t value);

    /// <summary>
    /// The last time we received a request from the proxy swarm with TRADE_SPOT for this instrument.
    /// </summary>
    int32_t getINSTRUMENTTRADESPOTFROMSTREAMINGRESTURILASTRESPONSETS() const;
    bool iNSTRUMENTTRADESPOTFROMSTREAMINGRESTURILASTRESPONSETSIsSet() const;
    void unsetINSTRUMENT_TRADE_SPOT_FROM_STREAMING_REST_URI_LAST_RESPONSE_TS();

    void setINSTRUMENTTRADESPOTFROMSTREAMINGRESTURILASTRESPONSETS(int32_t value);

    /// <summary>
    /// The next time we expect to make a request for TRADE_SPOT on this instrument.
    /// </summary>
    int32_t getINSTRUMENTTRADESPOTFROMSTREAMINGRESTURINEXTREQUESTTS() const;
    bool iNSTRUMENTTRADESPOTFROMSTREAMINGRESTURINEXTREQUESTTSIsSet() const;
    void unsetINSTRUMENT_TRADE_SPOT_FROM_STREAMING_REST_URI_NEXT_REQUEST_TS();

    void setINSTRUMENTTRADESPOTFROMSTREAMINGRESTURINEXTREQUESTTS(int32_t value);

    /// <summary>
    /// This flags the exchange instrument as in ready to consume TRADE_SPOT via a streaming integration.
    /// </summary>
    bool isINSTRUMENTTRADESPOTISREADYFORSTREAMINGINTEGRATION() const;
    bool iNSTRUMENTTRADESPOTISREADYFORSTREAMINGINTEGRATIONIsSet() const;
    void unsetINSTRUMENT_TRADE_SPOT_IS_READY_FOR_STREAMING_INTEGRATION();

    void setINSTRUMENTTRADESPOTISREADYFORSTREAMINGINTEGRATION(bool value);

    /// <summary>
    /// This is used to build up the request in some cases, this is where we put the id we use when querying for TRADE_SPOT.
    /// </summary>
    utility::string_t getINSTRUMENTTRADESPOTRESTURI() const;
    bool iNSTRUMENTTRADESPOTRESTURIIsSet() const;
    void unsetINSTRUMENT_TRADE_SPOT_REST_URI();

    void setINSTRUMENTTRADESPOTRESTURI(const utility::string_t& value);

    /// <summary>
    /// The URL we send to the proxy swarm to get TRADE_SPOT for the instrument.
    /// </summary>
    utility::string_t getINSTRUMENTTRADESPOTRESTURL() const;
    bool iNSTRUMENTTRADESPOTRESTURLIsSet() const;
    void unsetINSTRUMENT_TRADE_SPOT_REST_URL();

    void setINSTRUMENTTRADESPOTRESTURL(const utility::string_t& value);

    /// <summary>
    /// This is used to build up the subscription in some cases, this is where we put the id we use when subscribing for TRADE_SPOT on this instrument.
    /// </summary>
    utility::string_t getINSTRUMENTTRADESPOTSTREAMINGSUBSCRIPTION() const;
    bool iNSTRUMENTTRADESPOTSTREAMINGSUBSCRIPTIONIsSet() const;
    void unsetINSTRUMENT_TRADE_SPOT_STREAMING_SUBSCRIPTION();

    void setINSTRUMENTTRADESPOTSTREAMINGSUBSCRIPTION(const utility::string_t& value);

    /// <summary>
    /// The timestamp last encountered where the batch of trades from TRADES_SPOT all occured at the same time. This is an issue when making the next request that requires polling by timestamp as a start/from parameter
    /// </summary>
    int32_t getLASTCONCURRENTBATCHOFTRADESSPOTMS() const;
    bool lASTCONCURRENTBATCHOFTRADESSPOTMSIsSet() const;
    void unsetLAST_CONCURRENT_BATCH_OF_TRADES_SPOT_MS();

    void setLASTCONCURRENTBATCHOFTRADESSPOTMS(int32_t value);

    /// <summary>
    /// This is the last time instrument was seen on instrumentListSourceType BLOB.
    /// </summary>
    int32_t getLASTSEENONBLOBTS() const;
    bool lASTSEENONBLOBTSIsSet() const;
    void unsetLAST_SEEN_ON_BLOB_TS();

    void setLASTSEENONBLOBTS(int32_t value);

    /// <summary>
    /// This is the last time instrument was seen on instrumentListSourceType FIX.
    /// </summary>
    int32_t getLASTSEENONFIXTS() const;
    bool lASTSEENONFIXTSIsSet() const;
    void unsetLAST_SEEN_ON_FIX_TS();

    void setLASTSEENONFIXTS(int32_t value);

    /// <summary>
    /// This is the last time instrument was seen on instrumentListSourceType HARDCODED.
    /// </summary>
    int32_t getLASTSEENONHARDCODEDTS() const;
    bool lASTSEENONHARDCODEDTSIsSet() const;
    void unsetLAST_SEEN_ON_HARDCODED_TS();

    void setLASTSEENONHARDCODEDTS(int32_t value);

    /// <summary>
    /// This is the last time instrument was seen on instrumentListSourceType INDEX_COMPOSITION.
    /// </summary>
    int32_t getLASTSEENONINDEXCOMPOSITIONTS() const;
    bool lASTSEENONINDEXCOMPOSITIONTSIsSet() const;
    void unsetLAST_SEEN_ON_INDEX_COMPOSITION_TS();

    void setLASTSEENONINDEXCOMPOSITIONTS(int32_t value);

    /// <summary>
    /// This is the last time instrument was seen on instrumentListSourceType NSQ.
    /// </summary>
    int32_t getLASTSEENONNSQTS() const;
    bool lASTSEENONNSQTSIsSet() const;
    void unsetLAST_SEEN_ON_NSQ_TS();

    void setLASTSEENONNSQTS(int32_t value);

    /// <summary>
    /// This is the last time instrument was seen on instrumentListSourceType POLLING.
    /// </summary>
    int32_t getLASTSEENONPOLLINGTS() const;
    bool lASTSEENONPOLLINGTSIsSet() const;
    void unsetLAST_SEEN_ON_POLLING_TS();

    void setLASTSEENONPOLLINGTS(int32_t value);

    /// <summary>
    /// This is the last time instrument was seen on instrumentListSourceType STREAMING.
    /// </summary>
    int32_t getLASTSEENONSTREAMINGTS() const;
    bool lASTSEENONSTREAMINGTSIsSet() const;
    void unsetLAST_SEEN_ON_STREAMING_TS();

    void setLASTSEENONSTREAMINGTS(int32_t value);

    /// <summary>
    /// This is the last TRADE_SPOT that we have seen on the specific source type in internal format.
    /// </summary>
    std::shared_ptr<Object> getLASTTRADESPOTFROMBACKFILL() const;
    bool lASTTRADESPOTFROMBACKFILLIsSet() const;
    void unsetLAST_TRADE_SPOT_FROM_BACKFILL();

    void setLASTTRADESPOTFROMBACKFILL(const std::shared_ptr<Object>& value);

    /// <summary>
    /// This is the last TRADE_SPOT that we have seen on the specific trade source in external format.
    /// </summary>
    std::shared_ptr<Object> getLASTTRADESPOTFROMBACKFILLEXTERNAL() const;
    bool lASTTRADESPOTFROMBACKFILLEXTERNALIsSet() const;
    void unsetLAST_TRADE_SPOT_FROM_BACKFILL_EXTERNAL();

    void setLASTTRADESPOTFROMBACKFILLEXTERNAL(const std::shared_ptr<Object>& value);

    /// <summary>
    /// This is the last TRADE_SPOT that we have seen on the specific source type in internal format.
    /// </summary>
    std::shared_ptr<Object> getLASTTRADESPOTFROMBLOB() const;
    bool lASTTRADESPOTFROMBLOBIsSet() const;
    void unsetLAST_TRADE_SPOT_FROM_BLOB();

    void setLASTTRADESPOTFROMBLOB(const std::shared_ptr<Object>& value);

    /// <summary>
    /// This is the last TRADE_SPOT that we have seen on the specific trade source in external format.
    /// </summary>
    std::shared_ptr<Object> getLASTTRADESPOTFROMBLOBEXTERNAL() const;
    bool lASTTRADESPOTFROMBLOBEXTERNALIsSet() const;
    void unsetLAST_TRADE_SPOT_FROM_BLOB_EXTERNAL();

    void setLASTTRADESPOTFROMBLOBEXTERNAL(const std::shared_ptr<Object>& value);

    /// <summary>
    /// This is the last TRADE_SPOT that we have seen on the specific source type in internal format.
    /// </summary>
    std::shared_ptr<Object> getLASTTRADESPOTFROMCALCULATED() const;
    bool lASTTRADESPOTFROMCALCULATEDIsSet() const;
    void unsetLAST_TRADE_SPOT_FROM_CALCULATED();

    void setLASTTRADESPOTFROMCALCULATED(const std::shared_ptr<Object>& value);

    /// <summary>
    /// This is the last TRADE_SPOT that we have seen on the specific trade source in external format.
    /// </summary>
    std::shared_ptr<Object> getLASTTRADESPOTFROMCALCULATEDEXTERNAL() const;
    bool lASTTRADESPOTFROMCALCULATEDEXTERNALIsSet() const;
    void unsetLAST_TRADE_SPOT_FROM_CALCULATED_EXTERNAL();

    void setLASTTRADESPOTFROMCALCULATEDEXTERNAL(const std::shared_ptr<Object>& value);

    /// <summary>
    /// This is the last TRADE_SPOT that we have seen on the specific source type in internal format.
    /// </summary>
    std::shared_ptr<Object> getLASTTRADESPOTFROMFIX() const;
    bool lASTTRADESPOTFROMFIXIsSet() const;
    void unsetLAST_TRADE_SPOT_FROM_FIX();

    void setLASTTRADESPOTFROMFIX(const std::shared_ptr<Object>& value);

    /// <summary>
    /// This is the last TRADE_SPOT that we have seen on the specific trade source in external format.
    /// </summary>
    std::shared_ptr<Object> getLASTTRADESPOTFROMFIXEXTERNAL() const;
    bool lASTTRADESPOTFROMFIXEXTERNALIsSet() const;
    void unsetLAST_TRADE_SPOT_FROM_FIX_EXTERNAL();

    void setLASTTRADESPOTFROMFIXEXTERNAL(const std::shared_ptr<Object>& value);

    /// <summary>
    /// This is the last TRADE_SPOT that we have seen on the specific source type in internal format.
    /// </summary>
    std::shared_ptr<Object> getLASTTRADESPOTFROMGO() const;
    bool lASTTRADESPOTFROMGOIsSet() const;
    void unsetLAST_TRADE_SPOT_FROM_GO();

    void setLASTTRADESPOTFROMGO(const std::shared_ptr<Object>& value);

    /// <summary>
    /// This is the last TRADE_SPOT that we have seen on the specific trade source in external format.
    /// </summary>
    std::shared_ptr<Object> getLASTTRADESPOTFROMGOEXTERNAL() const;
    bool lASTTRADESPOTFROMGOEXTERNALIsSet() const;
    void unsetLAST_TRADE_SPOT_FROM_GO_EXTERNAL();

    void setLASTTRADESPOTFROMGOEXTERNAL(const std::shared_ptr<Object>& value);

    /// <summary>
    /// This is the last TRADE_SPOT that we have seen on the specific source type in internal format.
    /// </summary>
    std::shared_ptr<Object> getLASTTRADESPOTFROMPOLLING() const;
    bool lASTTRADESPOTFROMPOLLINGIsSet() const;
    void unsetLAST_TRADE_SPOT_FROM_POLLING();

    void setLASTTRADESPOTFROMPOLLING(const std::shared_ptr<Object>& value);

    /// <summary>
    /// This is the last TRADE_SPOT that we have seen on the specific trade source in external format.
    /// </summary>
    std::shared_ptr<Object> getLASTTRADESPOTFROMPOLLINGEXTERNAL() const;
    bool lASTTRADESPOTFROMPOLLINGEXTERNALIsSet() const;
    void unsetLAST_TRADE_SPOT_FROM_POLLING_EXTERNAL();

    void setLASTTRADESPOTFROMPOLLINGEXTERNAL(const std::shared_ptr<Object>& value);

    /// <summary>
    /// This is the last TRADE_SPOT that we have seen on the specific source type in internal format.
    /// </summary>
    std::shared_ptr<Object> getLASTTRADESPOTFROMSTREAMING() const;
    bool lASTTRADESPOTFROMSTREAMINGIsSet() const;
    void unsetLAST_TRADE_SPOT_FROM_STREAMING();

    void setLASTTRADESPOTFROMSTREAMING(const std::shared_ptr<Object>& value);

    /// <summary>
    /// This is the last TRADE_SPOT that we have seen on the specific trade source in external format.
    /// </summary>
    std::shared_ptr<Object> getLASTTRADESPOTFROMSTREAMINGEXTERNAL() const;
    bool lASTTRADESPOTFROMSTREAMINGEXTERNALIsSet() const;
    void unsetLAST_TRADE_SPOT_FROM_STREAMING_EXTERNAL();

    void setLASTTRADESPOTFROMSTREAMINGEXTERNAL(const std::shared_ptr<Object>& value);

    /// <summary>
    /// The version of metadata, used for version conversions/migrates.
    /// </summary>
    int32_t getMETADATAVERSION() const;
    bool mETADATAVERSIONIsSet() const;
    void unsetMETADATA_VERSION();

    void setMETADATAVERSION(int32_t value);

    /// <summary>
    /// This states the status of blob migration for this intrument on this exchange.
    /// </summary>
    utility::string_t getPROCESSINGTRADESFROMBLOBSTATUS() const;
    bool pROCESSINGTRADESFROMBLOBSTATUSIsSet() const;
    void unsetPROCESSING_TRADES_FROM_BLOB_STATUS();

    void setPROCESSINGTRADESFROMBLOBSTATUS(const utility::string_t& value);

    /// <summary>
    /// This is both the CCSEQ and the total TRADES_SPOT we have processed on this instrument
    /// </summary>
    int32_t getTOTALTRADESSPOT() const;
    bool tOTALTRADESSPOTIsSet() const;
    void unsetTOTAL_TRADES_SPOT();

    void setTOTALTRADESSPOT(int32_t value);

    /// <summary>
    /// This is any extra helper TRADE_SPOT data that we would need for creating polling requests or subscribing with non standard information and anything that is very specific to one exchange API/Integration and it does not fit any of the other existing fields and is definitly only updated or written in only one service.
    /// </summary>
    std::shared_ptr<Object> getUNSTRUCTUREDTRADESPOTFROMBACKFILLINTERNALDATA() const;
    bool uNSTRUCTUREDTRADESPOTFROMBACKFILLINTERNALDATAIsSet() const;
    void unsetUNSTRUCTURED_TRADE_SPOT_FROM_BACKFILL_INTERNAL_DATA();

    void setUNSTRUCTUREDTRADESPOTFROMBACKFILLINTERNALDATA(const std::shared_ptr<Object>& value);

    /// <summary>
    /// This is any extra helper TRADE_SPOT data that we would need for creating polling requests or subscribing with non standard information and anything that is very specific to one exchange API/Integration and it does not fit any of the other existing fields and is definitly only updated or written in only one service.
    /// </summary>
    std::shared_ptr<Object> getUNSTRUCTUREDTRADESPOTFROMBLOBINTERNALDATA() const;
    bool uNSTRUCTUREDTRADESPOTFROMBLOBINTERNALDATAIsSet() const;
    void unsetUNSTRUCTURED_TRADE_SPOT_FROM_BLOB_INTERNAL_DATA();

    void setUNSTRUCTUREDTRADESPOTFROMBLOBINTERNALDATA(const std::shared_ptr<Object>& value);

    /// <summary>
    /// This is any extra helper TRADE_SPOT data that we would need for creating polling requests or subscribing with non standard information and anything that is very specific to one exchange API/Integration and it does not fit any of the other existing fields and is definitly only updated or written in only one service.
    /// </summary>
    std::shared_ptr<Object> getUNSTRUCTUREDTRADESPOTFROMCALCULATEDINTERNALDATA() const;
    bool uNSTRUCTUREDTRADESPOTFROMCALCULATEDINTERNALDATAIsSet() const;
    void unsetUNSTRUCTURED_TRADE_SPOT_FROM_CALCULATED_INTERNAL_DATA();

    void setUNSTRUCTUREDTRADESPOTFROMCALCULATEDINTERNALDATA(const std::shared_ptr<Object>& value);

    /// <summary>
    /// This is any extra helper TRADE_SPOT data that we would need for creating polling requests or subscribing with non standard information and anything that is very specific to one exchange API/Integration and it does not fit any of the other existing fields and is definitly only updated or written in only one service.
    /// </summary>
    std::shared_ptr<Object> getUNSTRUCTUREDTRADESPOTFROMFIXINTERNALDATA() const;
    bool uNSTRUCTUREDTRADESPOTFROMFIXINTERNALDATAIsSet() const;
    void unsetUNSTRUCTURED_TRADE_SPOT_FROM_FIX_INTERNAL_DATA();

    void setUNSTRUCTUREDTRADESPOTFROMFIXINTERNALDATA(const std::shared_ptr<Object>& value);

    /// <summary>
    /// This is any extra helper TRADE_SPOT data that we would need for creating polling requests or subscribing with non standard information and anything that is very specific to one exchange API/Integration and it does not fit any of the other existing fields and is definitly only updated or written in only one service.
    /// </summary>
    std::shared_ptr<Object> getUNSTRUCTUREDTRADESPOTFROMGOINTERNALDATA() const;
    bool uNSTRUCTUREDTRADESPOTFROMGOINTERNALDATAIsSet() const;
    void unsetUNSTRUCTURED_TRADE_SPOT_FROM_GO_INTERNAL_DATA();

    void setUNSTRUCTUREDTRADESPOTFROMGOINTERNALDATA(const std::shared_ptr<Object>& value);

    /// <summary>
    /// This is any extra helper TRADE_SPOT data that we would need for creating polling requests or subscribing with non standard information and anything that is very specific to one exchange API/Integration and it does not fit any of the other existing fields and is definitly only updated or written in only one service.
    /// </summary>
    std::shared_ptr<Object> getUNSTRUCTUREDTRADESPOTFROMPOLLINGINTERNALDATA() const;
    bool uNSTRUCTUREDTRADESPOTFROMPOLLINGINTERNALDATAIsSet() const;
    void unsetUNSTRUCTURED_TRADE_SPOT_FROM_POLLING_INTERNAL_DATA();

    void setUNSTRUCTUREDTRADESPOTFROMPOLLINGINTERNALDATA(const std::shared_ptr<Object>& value);

    /// <summary>
    /// This is any extra helper TRADE_SPOT data that we would need for creating polling requests or subscribing with non standard information and anything that is very specific to one exchange API/Integration and it does not fit any of the other existing fields and is definitly only updated or written in only one service.
    /// </summary>
    std::shared_ptr<Object> getUNSTRUCTUREDTRADESPOTFROMSTREAMINGINTERNALDATA() const;
    bool uNSTRUCTUREDTRADESPOTFROMSTREAMINGINTERNALDATAIsSet() const;
    void unsetUNSTRUCTURED_TRADE_SPOT_FROM_STREAMING_INTERNAL_DATA();

    void setUNSTRUCTUREDTRADESPOTFROMSTREAMINGINTERNALDATA(const std::shared_ptr<Object>& value);


protected:
    int32_t m_FIRST_SEEN_ON_BLOB_TS;
    bool m_FIRST_SEEN_ON_BLOB_TSIsSet;
    int32_t m_FIRST_SEEN_ON_FIX_TS;
    bool m_FIRST_SEEN_ON_FIX_TSIsSet;
    int32_t m_FIRST_SEEN_ON_HARDCODED_TS;
    bool m_FIRST_SEEN_ON_HARDCODED_TSIsSet;
    int32_t m_FIRST_SEEN_ON_INDEX_COMPOSITION_TS;
    bool m_FIRST_SEEN_ON_INDEX_COMPOSITION_TSIsSet;
    int32_t m_FIRST_SEEN_ON_NSQ_TS;
    bool m_FIRST_SEEN_ON_NSQ_TSIsSet;
    int32_t m_FIRST_SEEN_ON_POLLING_TS;
    bool m_FIRST_SEEN_ON_POLLING_TSIsSet;
    int32_t m_FIRST_SEEN_ON_STREAMING_TS;
    bool m_FIRST_SEEN_ON_STREAMING_TSIsSet;
    std::shared_ptr<Object> m_FIRST_TRADE_SPOT_FROM_BACKFILL;
    bool m_FIRST_TRADE_SPOT_FROM_BACKFILLIsSet;
    std::shared_ptr<Object> m_FIRST_TRADE_SPOT_FROM_BACKFILL_EXTERNAL;
    bool m_FIRST_TRADE_SPOT_FROM_BACKFILL_EXTERNALIsSet;
    std::shared_ptr<Object> m_FIRST_TRADE_SPOT_FROM_BLOB;
    bool m_FIRST_TRADE_SPOT_FROM_BLOBIsSet;
    std::shared_ptr<Object> m_FIRST_TRADE_SPOT_FROM_BLOB_EXTERNAL;
    bool m_FIRST_TRADE_SPOT_FROM_BLOB_EXTERNALIsSet;
    std::shared_ptr<Object> m_FIRST_TRADE_SPOT_FROM_CALCULATED;
    bool m_FIRST_TRADE_SPOT_FROM_CALCULATEDIsSet;
    std::shared_ptr<Object> m_FIRST_TRADE_SPOT_FROM_CALCULATED_EXTERNAL;
    bool m_FIRST_TRADE_SPOT_FROM_CALCULATED_EXTERNALIsSet;
    std::shared_ptr<Object> m_FIRST_TRADE_SPOT_FROM_FIX;
    bool m_FIRST_TRADE_SPOT_FROM_FIXIsSet;
    std::shared_ptr<Object> m_FIRST_TRADE_SPOT_FROM_FIX_EXTERNAL;
    bool m_FIRST_TRADE_SPOT_FROM_FIX_EXTERNALIsSet;
    std::shared_ptr<Object> m_FIRST_TRADE_SPOT_FROM_GO;
    bool m_FIRST_TRADE_SPOT_FROM_GOIsSet;
    std::shared_ptr<Object> m_FIRST_TRADE_SPOT_FROM_GO_EXTERNAL;
    bool m_FIRST_TRADE_SPOT_FROM_GO_EXTERNALIsSet;
    std::shared_ptr<Object> m_FIRST_TRADE_SPOT_FROM_POLLING;
    bool m_FIRST_TRADE_SPOT_FROM_POLLINGIsSet;
    std::shared_ptr<Object> m_FIRST_TRADE_SPOT_FROM_POLLING_EXTERNAL;
    bool m_FIRST_TRADE_SPOT_FROM_POLLING_EXTERNALIsSet;
    std::shared_ptr<Object> m_FIRST_TRADE_SPOT_FROM_STREAMING;
    bool m_FIRST_TRADE_SPOT_FROM_STREAMINGIsSet;
    std::shared_ptr<Object> m_FIRST_TRADE_SPOT_FROM_STREAMING_EXTERNAL;
    bool m_FIRST_TRADE_SPOT_FROM_STREAMING_EXTERNALIsSet;
    utility::string_t m_HOST_MIGRATION_DESTINATION;
    bool m_HOST_MIGRATION_DESTINATIONIsSet;
    utility::string_t m_HOST_MIGRATION_SOURCE;
    bool m_HOST_MIGRATION_SOURCEIsSet;
    utility::string_t m_HOST_MIGRATION_STATUS;
    bool m_HOST_MIGRATION_STATUSIsSet;
    utility::string_t m_INSTRUMENT;
    bool m_INSTRUMENTIsSet;
    utility::string_t m_INSTRUMENT_EXTERNAL_DATA;
    bool m_INSTRUMENT_EXTERNAL_DATAIsSet;
    std::shared_ptr<Object> m_INSTRUMENT_MAPPING;
    bool m_INSTRUMENT_MAPPINGIsSet;
    std::vector<utility::string_t> m_INSTRUMENT_MAPPING_HISTORY;
    bool m_INSTRUMENT_MAPPING_HISTORYIsSet;
    utility::string_t m_INSTRUMENT_SOURCE_BACKFILL;
    bool m_INSTRUMENT_SOURCE_BACKFILLIsSet;
    utility::string_t m_INSTRUMENT_SOURCE_BLOB;
    bool m_INSTRUMENT_SOURCE_BLOBIsSet;
    utility::string_t m_INSTRUMENT_SOURCE_CALCULATED;
    bool m_INSTRUMENT_SOURCE_CALCULATEDIsSet;
    utility::string_t m_INSTRUMENT_SOURCE_FIX;
    bool m_INSTRUMENT_SOURCE_FIXIsSet;
    utility::string_t m_INSTRUMENT_SOURCE_GO;
    bool m_INSTRUMENT_SOURCE_GOIsSet;
    utility::string_t m_INSTRUMENT_SOURCE_POLLING;
    bool m_INSTRUMENT_SOURCE_POLLINGIsSet;
    utility::string_t m_INSTRUMENT_SOURCE_STREAMING;
    bool m_INSTRUMENT_SOURCE_STREAMINGIsSet;
    utility::string_t m_INSTRUMENT_STATUS;
    bool m_INSTRUMENT_STATUSIsSet;
    std::shared_ptr<Object> m_INSTRUMENT_TRADE_SPOT_FROM_BACKFILL_LAST_PROXIED_REST_REQUEST;
    bool m_INSTRUMENT_TRADE_SPOT_FROM_BACKFILL_LAST_PROXIED_REST_REQUESTIsSet;
    int32_t m_INSTRUMENT_TRADE_SPOT_FROM_BACKFILL_REST_URI_LAST_REQUEST_TS;
    bool m_INSTRUMENT_TRADE_SPOT_FROM_BACKFILL_REST_URI_LAST_REQUEST_TSIsSet;
    int32_t m_INSTRUMENT_TRADE_SPOT_FROM_BACKFILL_REST_URI_LAST_RESPONSE_TS;
    bool m_INSTRUMENT_TRADE_SPOT_FROM_BACKFILL_REST_URI_LAST_RESPONSE_TSIsSet;
    int32_t m_INSTRUMENT_TRADE_SPOT_FROM_BACKFILL_REST_URI_NEXT_REQUEST_TS;
    bool m_INSTRUMENT_TRADE_SPOT_FROM_BACKFILL_REST_URI_NEXT_REQUEST_TSIsSet;
    std::shared_ptr<Object> m_INSTRUMENT_TRADE_SPOT_FROM_BLOB_LAST_PROXIED_REST_REQUEST;
    bool m_INSTRUMENT_TRADE_SPOT_FROM_BLOB_LAST_PROXIED_REST_REQUESTIsSet;
    int32_t m_INSTRUMENT_TRADE_SPOT_FROM_BLOB_REST_URI_LAST_REQUEST_TS;
    bool m_INSTRUMENT_TRADE_SPOT_FROM_BLOB_REST_URI_LAST_REQUEST_TSIsSet;
    int32_t m_INSTRUMENT_TRADE_SPOT_FROM_BLOB_REST_URI_LAST_RESPONSE_TS;
    bool m_INSTRUMENT_TRADE_SPOT_FROM_BLOB_REST_URI_LAST_RESPONSE_TSIsSet;
    int32_t m_INSTRUMENT_TRADE_SPOT_FROM_BLOB_REST_URI_NEXT_REQUEST_TS;
    bool m_INSTRUMENT_TRADE_SPOT_FROM_BLOB_REST_URI_NEXT_REQUEST_TSIsSet;
    std::shared_ptr<Object> m_INSTRUMENT_TRADE_SPOT_FROM_CALCULATED_LAST_PROXIED_REST_REQUEST;
    bool m_INSTRUMENT_TRADE_SPOT_FROM_CALCULATED_LAST_PROXIED_REST_REQUESTIsSet;
    int32_t m_INSTRUMENT_TRADE_SPOT_FROM_CALCULATED_REST_URI_LAST_REQUEST_TS;
    bool m_INSTRUMENT_TRADE_SPOT_FROM_CALCULATED_REST_URI_LAST_REQUEST_TSIsSet;
    int32_t m_INSTRUMENT_TRADE_SPOT_FROM_CALCULATED_REST_URI_LAST_RESPONSE_TS;
    bool m_INSTRUMENT_TRADE_SPOT_FROM_CALCULATED_REST_URI_LAST_RESPONSE_TSIsSet;
    int32_t m_INSTRUMENT_TRADE_SPOT_FROM_CALCULATED_REST_URI_NEXT_REQUEST_TS;
    bool m_INSTRUMENT_TRADE_SPOT_FROM_CALCULATED_REST_URI_NEXT_REQUEST_TSIsSet;
    std::shared_ptr<Object> m_INSTRUMENT_TRADE_SPOT_FROM_FIX_LAST_PROXIED_REST_REQUEST;
    bool m_INSTRUMENT_TRADE_SPOT_FROM_FIX_LAST_PROXIED_REST_REQUESTIsSet;
    int32_t m_INSTRUMENT_TRADE_SPOT_FROM_FIX_REST_URI_LAST_REQUEST_TS;
    bool m_INSTRUMENT_TRADE_SPOT_FROM_FIX_REST_URI_LAST_REQUEST_TSIsSet;
    int32_t m_INSTRUMENT_TRADE_SPOT_FROM_FIX_REST_URI_LAST_RESPONSE_TS;
    bool m_INSTRUMENT_TRADE_SPOT_FROM_FIX_REST_URI_LAST_RESPONSE_TSIsSet;
    int32_t m_INSTRUMENT_TRADE_SPOT_FROM_FIX_REST_URI_NEXT_REQUEST_TS;
    bool m_INSTRUMENT_TRADE_SPOT_FROM_FIX_REST_URI_NEXT_REQUEST_TSIsSet;
    std::shared_ptr<Object> m_INSTRUMENT_TRADE_SPOT_FROM_GO_LAST_PROXIED_REST_REQUEST;
    bool m_INSTRUMENT_TRADE_SPOT_FROM_GO_LAST_PROXIED_REST_REQUESTIsSet;
    int32_t m_INSTRUMENT_TRADE_SPOT_FROM_GO_REST_URI_LAST_REQUEST_TS;
    bool m_INSTRUMENT_TRADE_SPOT_FROM_GO_REST_URI_LAST_REQUEST_TSIsSet;
    int32_t m_INSTRUMENT_TRADE_SPOT_FROM_GO_REST_URI_LAST_RESPONSE_TS;
    bool m_INSTRUMENT_TRADE_SPOT_FROM_GO_REST_URI_LAST_RESPONSE_TSIsSet;
    int32_t m_INSTRUMENT_TRADE_SPOT_FROM_GO_REST_URI_NEXT_REQUEST_TS;
    bool m_INSTRUMENT_TRADE_SPOT_FROM_GO_REST_URI_NEXT_REQUEST_TSIsSet;
    std::shared_ptr<Object> m_INSTRUMENT_TRADE_SPOT_FROM_POLLING_LAST_PROXIED_REST_REQUEST;
    bool m_INSTRUMENT_TRADE_SPOT_FROM_POLLING_LAST_PROXIED_REST_REQUESTIsSet;
    int32_t m_INSTRUMENT_TRADE_SPOT_FROM_POLLING_REST_URI_LAST_REQUEST_TS;
    bool m_INSTRUMENT_TRADE_SPOT_FROM_POLLING_REST_URI_LAST_REQUEST_TSIsSet;
    int32_t m_INSTRUMENT_TRADE_SPOT_FROM_POLLING_REST_URI_LAST_RESPONSE_TS;
    bool m_INSTRUMENT_TRADE_SPOT_FROM_POLLING_REST_URI_LAST_RESPONSE_TSIsSet;
    int32_t m_INSTRUMENT_TRADE_SPOT_FROM_POLLING_REST_URI_NEXT_REQUEST_TS;
    bool m_INSTRUMENT_TRADE_SPOT_FROM_POLLING_REST_URI_NEXT_REQUEST_TSIsSet;
    std::shared_ptr<Object> m_INSTRUMENT_TRADE_SPOT_FROM_STREAMING_LAST_PROXIED_REST_REQUEST;
    bool m_INSTRUMENT_TRADE_SPOT_FROM_STREAMING_LAST_PROXIED_REST_REQUESTIsSet;
    int32_t m_INSTRUMENT_TRADE_SPOT_FROM_STREAMING_REST_URI_LAST_REQUEST_TS;
    bool m_INSTRUMENT_TRADE_SPOT_FROM_STREAMING_REST_URI_LAST_REQUEST_TSIsSet;
    int32_t m_INSTRUMENT_TRADE_SPOT_FROM_STREAMING_REST_URI_LAST_RESPONSE_TS;
    bool m_INSTRUMENT_TRADE_SPOT_FROM_STREAMING_REST_URI_LAST_RESPONSE_TSIsSet;
    int32_t m_INSTRUMENT_TRADE_SPOT_FROM_STREAMING_REST_URI_NEXT_REQUEST_TS;
    bool m_INSTRUMENT_TRADE_SPOT_FROM_STREAMING_REST_URI_NEXT_REQUEST_TSIsSet;
    bool m_INSTRUMENT_TRADE_SPOT_IS_READY_FOR_STREAMING_INTEGRATION;
    bool m_INSTRUMENT_TRADE_SPOT_IS_READY_FOR_STREAMING_INTEGRATIONIsSet;
    utility::string_t m_INSTRUMENT_TRADE_SPOT_REST_URI;
    bool m_INSTRUMENT_TRADE_SPOT_REST_URIIsSet;
    utility::string_t m_INSTRUMENT_TRADE_SPOT_REST_URL;
    bool m_INSTRUMENT_TRADE_SPOT_REST_URLIsSet;
    utility::string_t m_INSTRUMENT_TRADE_SPOT_STREAMING_SUBSCRIPTION;
    bool m_INSTRUMENT_TRADE_SPOT_STREAMING_SUBSCRIPTIONIsSet;
    int32_t m_LAST_CONCURRENT_BATCH_OF_TRADES_SPOT_MS;
    bool m_LAST_CONCURRENT_BATCH_OF_TRADES_SPOT_MSIsSet;
    int32_t m_LAST_SEEN_ON_BLOB_TS;
    bool m_LAST_SEEN_ON_BLOB_TSIsSet;
    int32_t m_LAST_SEEN_ON_FIX_TS;
    bool m_LAST_SEEN_ON_FIX_TSIsSet;
    int32_t m_LAST_SEEN_ON_HARDCODED_TS;
    bool m_LAST_SEEN_ON_HARDCODED_TSIsSet;
    int32_t m_LAST_SEEN_ON_INDEX_COMPOSITION_TS;
    bool m_LAST_SEEN_ON_INDEX_COMPOSITION_TSIsSet;
    int32_t m_LAST_SEEN_ON_NSQ_TS;
    bool m_LAST_SEEN_ON_NSQ_TSIsSet;
    int32_t m_LAST_SEEN_ON_POLLING_TS;
    bool m_LAST_SEEN_ON_POLLING_TSIsSet;
    int32_t m_LAST_SEEN_ON_STREAMING_TS;
    bool m_LAST_SEEN_ON_STREAMING_TSIsSet;
    std::shared_ptr<Object> m_LAST_TRADE_SPOT_FROM_BACKFILL;
    bool m_LAST_TRADE_SPOT_FROM_BACKFILLIsSet;
    std::shared_ptr<Object> m_LAST_TRADE_SPOT_FROM_BACKFILL_EXTERNAL;
    bool m_LAST_TRADE_SPOT_FROM_BACKFILL_EXTERNALIsSet;
    std::shared_ptr<Object> m_LAST_TRADE_SPOT_FROM_BLOB;
    bool m_LAST_TRADE_SPOT_FROM_BLOBIsSet;
    std::shared_ptr<Object> m_LAST_TRADE_SPOT_FROM_BLOB_EXTERNAL;
    bool m_LAST_TRADE_SPOT_FROM_BLOB_EXTERNALIsSet;
    std::shared_ptr<Object> m_LAST_TRADE_SPOT_FROM_CALCULATED;
    bool m_LAST_TRADE_SPOT_FROM_CALCULATEDIsSet;
    std::shared_ptr<Object> m_LAST_TRADE_SPOT_FROM_CALCULATED_EXTERNAL;
    bool m_LAST_TRADE_SPOT_FROM_CALCULATED_EXTERNALIsSet;
    std::shared_ptr<Object> m_LAST_TRADE_SPOT_FROM_FIX;
    bool m_LAST_TRADE_SPOT_FROM_FIXIsSet;
    std::shared_ptr<Object> m_LAST_TRADE_SPOT_FROM_FIX_EXTERNAL;
    bool m_LAST_TRADE_SPOT_FROM_FIX_EXTERNALIsSet;
    std::shared_ptr<Object> m_LAST_TRADE_SPOT_FROM_GO;
    bool m_LAST_TRADE_SPOT_FROM_GOIsSet;
    std::shared_ptr<Object> m_LAST_TRADE_SPOT_FROM_GO_EXTERNAL;
    bool m_LAST_TRADE_SPOT_FROM_GO_EXTERNALIsSet;
    std::shared_ptr<Object> m_LAST_TRADE_SPOT_FROM_POLLING;
    bool m_LAST_TRADE_SPOT_FROM_POLLINGIsSet;
    std::shared_ptr<Object> m_LAST_TRADE_SPOT_FROM_POLLING_EXTERNAL;
    bool m_LAST_TRADE_SPOT_FROM_POLLING_EXTERNALIsSet;
    std::shared_ptr<Object> m_LAST_TRADE_SPOT_FROM_STREAMING;
    bool m_LAST_TRADE_SPOT_FROM_STREAMINGIsSet;
    std::shared_ptr<Object> m_LAST_TRADE_SPOT_FROM_STREAMING_EXTERNAL;
    bool m_LAST_TRADE_SPOT_FROM_STREAMING_EXTERNALIsSet;
    int32_t m_METADATA_VERSION;
    bool m_METADATA_VERSIONIsSet;
    utility::string_t m_PROCESSING_TRADES_FROM_BLOB_STATUS;
    bool m_PROCESSING_TRADES_FROM_BLOB_STATUSIsSet;
    int32_t m_TOTAL_TRADES_SPOT;
    bool m_TOTAL_TRADES_SPOTIsSet;
    std::shared_ptr<Object> m_UNSTRUCTURED_TRADE_SPOT_FROM_BACKFILL_INTERNAL_DATA;
    bool m_UNSTRUCTURED_TRADE_SPOT_FROM_BACKFILL_INTERNAL_DATAIsSet;
    std::shared_ptr<Object> m_UNSTRUCTURED_TRADE_SPOT_FROM_BLOB_INTERNAL_DATA;
    bool m_UNSTRUCTURED_TRADE_SPOT_FROM_BLOB_INTERNAL_DATAIsSet;
    std::shared_ptr<Object> m_UNSTRUCTURED_TRADE_SPOT_FROM_CALCULATED_INTERNAL_DATA;
    bool m_UNSTRUCTURED_TRADE_SPOT_FROM_CALCULATED_INTERNAL_DATAIsSet;
    std::shared_ptr<Object> m_UNSTRUCTURED_TRADE_SPOT_FROM_FIX_INTERNAL_DATA;
    bool m_UNSTRUCTURED_TRADE_SPOT_FROM_FIX_INTERNAL_DATAIsSet;
    std::shared_ptr<Object> m_UNSTRUCTURED_TRADE_SPOT_FROM_GO_INTERNAL_DATA;
    bool m_UNSTRUCTURED_TRADE_SPOT_FROM_GO_INTERNAL_DATAIsSet;
    std::shared_ptr<Object> m_UNSTRUCTURED_TRADE_SPOT_FROM_POLLING_INTERNAL_DATA;
    bool m_UNSTRUCTURED_TRADE_SPOT_FROM_POLLING_INTERNAL_DATAIsSet;
    std::shared_ptr<Object> m_UNSTRUCTURED_TRADE_SPOT_FROM_STREAMING_INTERNAL_DATA;
    bool m_UNSTRUCTURED_TRADE_SPOT_FROM_STREAMING_INTERNAL_DATAIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_SPOT_INSTRUMENT_METADATA_H_ */
