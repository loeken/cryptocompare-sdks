/**
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 * CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: data@cryptocompare.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.3.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * SPOT_INSTRUMENT_HISTO_DATA.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_SPOT_INSTRUMENT_HISTO_DATA_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_SPOT_INSTRUMENT_HISTO_DATA_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  SPOT_INSTRUMENT_HISTO_DATA
    : public ModelBase
{
public:
    SPOT_INSTRUMENT_HISTO_DATA();
    virtual ~SPOT_INSTRUMENT_HISTO_DATA();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// SPOT_INSTRUMENT_HISTO_DATA members

    /// <summary>
    /// The mapped from asset (base / symbol/ coin) (e.g. BTC). Only available on instruments that have mapping.
    /// </summary>
    utility::string_t getBASE() const;
    bool bASEIsSet() const;
    void unsetBASE();

    void setBASE(const utility::string_t& value);

    /// <summary>
    /// The price of the last trade in this time period. If there were no trades in the time period, the open price will be given.
    /// </summary>
    int32_t getCLOSE() const;
    bool cLOSEIsSet() const;
    void unsetCLOSE();

    void setCLOSE(int32_t value);

    /// <summary>
    /// The price of the first trade in the time period. This is only available when there is at least one trade in the time period.
    /// </summary>
    int32_t getFIRSTTRADEPRICE() const;
    bool fIRSTTRADEPRICEIsSet() const;
    void unsetFIRST_TRADE_PRICE();

    void setFIRSTTRADEPRICE(int32_t value);

    /// <summary>
    /// The timestamp, in seconds, of the first trade in this time perio. This is only available when there is at least one trade in the time period.
    /// </summary>
    int32_t getFIRSTTRADETIMESTAMP() const;
    bool fIRSTTRADETIMESTAMPIsSet() const;
    void unsetFIRST_TRADE_TIMESTAMP();

    void setFIRSTTRADETIMESTAMP(int32_t value);

    /// <summary>
    /// The highest trade price in the time period. If there were no trades in the time period, the open price will be given.
    /// </summary>
    int32_t getHIGH() const;
    bool hIGHIsSet() const;
    void unsetHIGH();

    void setHIGH(int32_t value);

    /// <summary>
    /// The highest value of the trades in the time period. This is only available when there is at least one trade in the time period.
    /// </summary>
    int32_t getHIGHTRADEPRICE() const;
    bool hIGHTRADEPRICEIsSet() const;
    void unsetHIGH_TRADE_PRICE();

    void setHIGHTRADEPRICE(int32_t value);

    /// <summary>
    /// The timestamp, in seconds, of the highest trade in the time period. This is only available when there is at least one trade in the time period.
    /// </summary>
    int32_t getHIGHTRADETIMESTAMP() const;
    bool hIGHTRADETIMESTAMPIsSet() const;
    void unsetHIGH_TRADE_TIMESTAMP();

    void setHIGHTRADETIMESTAMP(int32_t value);

    /// <summary>
    /// The unmapped instrument ID
    /// </summary>
    utility::string_t getINSTRUMENT() const;
    bool iNSTRUMENTIsSet() const;
    void unsetINSTRUMENT();

    void setINSTRUMENT(const utility::string_t& value);

    /// <summary>
    /// The last trade price in the time period. This is only available when there is at least one trade in the time period.
    /// </summary>
    int32_t getLASTTRADEPRICE() const;
    bool lASTTRADEPRICEIsSet() const;
    void unsetLAST_TRADE_PRICE();

    void setLASTTRADEPRICE(int32_t value);

    /// <summary>
    /// The timestamp, in seconds, of the last trade in this time period. This is only available when there is at least one trade in the time period.
    /// </summary>
    int32_t getLASTTRADETIMESTAMP() const;
    bool lASTTRADETIMESTAMPIsSet() const;
    void unsetLAST_TRADE_TIMESTAMP();

    void setLASTTRADETIMESTAMP(int32_t value);

    /// <summary>
    /// The lowest trade price in the time period. If there were no trades in the time period, the open price will be given.
    /// </summary>
    int32_t getLOW() const;
    bool lOWIsSet() const;
    void unsetLOW();

    void setLOW(int32_t value);

    /// <summary>
    /// The lowest value of the trades in the time period. This is only available when there is at least one trade in the time period.
    /// </summary>
    int32_t getLOWTRADEPRICE() const;
    bool lOWTRADEPRICEIsSet() const;
    void unsetLOW_TRADE_PRICE();

    void setLOWTRADEPRICE(int32_t value);

    /// <summary>
    /// The timestamp, in seconds, of the lowest trade in the time period. This is only available when there is at least one trade in the time period.
    /// </summary>
    int32_t getLOWTRADETIMESTAMP() const;
    bool lOWTRADETIMESTAMPIsSet() const;
    void unsetLOW_TRADE_TIMESTAMP();

    void setLOWTRADETIMESTAMP(int32_t value);

    /// <summary>
    /// The instrument ID, as derived from our mapping rules. This takes the form \&quot;BASE-QUOTE\&quot; (e.g. BTC-USD). Only available on instruments that have been mapped.
    /// </summary>
    utility::string_t getMAPPEDINSTRUMENT() const;
    bool mAPPEDINSTRUMENTIsSet() const;
    void unsetMAPPED_INSTRUMENT();

    void setMAPPEDINSTRUMENT(const utility::string_t& value);

    /// <summary>
    /// The market / exchange under consideration (e.g. gemini, kraken, coinbase, etc).
    /// </summary>
    utility::string_t getMARKET() const;
    bool mARKETIsSet() const;
    void unsetMARKET();

    void setMARKET(const utility::string_t& value);

    /// <summary>
    /// The open price for the historical period, this is based on the closest trade before the period start.
    /// </summary>
    int32_t getOPEN() const;
    bool oPENIsSet() const;
    void unsetOPEN();

    void setOPEN(int32_t value);

    /// <summary>
    /// The mapped to asset (quote / counter symbol / coin) (e.g. USD). Only available on instruments that have mapping.
    /// </summary>
    utility::string_t getQUOTE() const;
    bool qUOTEIsSet() const;
    void unsetQUOTE();

    void setQUOTE(const utility::string_t& value);

    /// <summary>
    /// The sum of all the trade volumes in the To asset (quote/counter symbol/coin) for the time period. If there were no trades in the time period, 0 will be returned.
    /// </summary>
    int32_t getQUOTEVOLUME() const;
    bool qUOTEVOLUMEIsSet() const;
    void unsetQUOTE_VOLUME();

    void setQUOTEVOLUME(int32_t value);

    /// <summary>
    /// The sum of all the BUY trade volumes in the to asset (quote/counter symbol/coin) for the time period.
    /// </summary>
    int32_t getQUOTEVOLUMEBUY() const;
    bool qUOTEVOLUMEBUYIsSet() const;
    void unsetQUOTE_VOLUME_BUY();

    void setQUOTEVOLUMEBUY(int32_t value);

    /// <summary>
    /// The sum of all the SELL trade volumes in the To asset (quote/counter symbol/coin) for the time period.
    /// </summary>
    int32_t getQUOTEVOLUMESELL() const;
    bool qUOTEVOLUMESELLIsSet() const;
    void unsetQUOTE_VOLUME_SELL();

    void setQUOTEVOLUMESELL(int32_t value);

    /// <summary>
    /// The sum of all the UNKNOWN trade volumes in the To asset (quote/counter symbol/coin) for the time period.
    /// </summary>
    int32_t getQUOTEVOLUMEUNKNOWN() const;
    bool qUOTEVOLUMEUNKNOWNIsSet() const;
    void unsetQUOTE_VOLUME_UNKNOWN();

    void setQUOTEVOLUMEUNKNOWN(int32_t value);

    /// <summary>
    /// The timestamp in seconds of the beginning of the histo period. For minute it would be every minute at the beginning of the minute, for hour it would be the start of the hour and for daily it is 00:00 GMT.
    /// </summary>
    int32_t getTIMESTAMP() const;
    bool tIMESTAMPIsSet() const;
    void unsetTIMESTAMP();

    void setTIMESTAMP(int32_t value);

    /// <summary>
    /// The total number of trades seen in this time period. If there were no trades in the time period, 0 will be returned.
    /// </summary>
    int32_t getTOTALTRADES() const;
    bool tOTALTRADESIsSet() const;
    void unsetTOTAL_TRADES();

    void setTOTALTRADES(int32_t value);

    /// <summary>
    /// The total number of BUY trades seen in this time period. If there were no trades in the time period, 0 will be returned.
    /// </summary>
    int32_t getTOTALTRADESBUY() const;
    bool tOTALTRADESBUYIsSet() const;
    void unsetTOTAL_TRADES_BUY();

    void setTOTALTRADESBUY(int32_t value);

    /// <summary>
    /// The total number of SELL trades seen in this time period. If there were no trades in the time period, 0 will be returned.
    /// </summary>
    int32_t getTOTALTRADESSELL() const;
    bool tOTALTRADESSELLIsSet() const;
    void unsetTOTAL_TRADES_SELL();

    void setTOTALTRADESSELL(int32_t value);

    /// <summary>
    /// The total number of UNKNOWN trades seen in this time period. If there were no trades in the time period, 0 will be returned.
    /// </summary>
    int32_t getTOTALTRADESUNKNOWN() const;
    bool tOTALTRADESUNKNOWNIsSet() const;
    void unsetTOTAL_TRADES_UNKNOWN();

    void setTOTALTRADESUNKNOWN(int32_t value);

    /// <summary>
    /// The type of the message.
    /// </summary>
    utility::string_t getTYPE() const;
    bool tYPEIsSet() const;
    void unsetTYPE();

    void setTYPE(const utility::string_t& value);

    /// <summary>
    /// The unit of the historical period update: MINUTE for minute, HOUR for hour and DAY for day.
    /// </summary>
    utility::string_t getUNIT() const;
    bool uNITIsSet() const;
    void unsetUNIT();

    void setUNIT(const utility::string_t& value);

    /// <summary>
    /// The sum of all the trade volumes in the from asset (base symbol / coin) for the time period. If there were no trades in the time period, 0 will be returned.
    /// </summary>
    int32_t getVOLUME() const;
    bool vOLUMEIsSet() const;
    void unsetVOLUME();

    void setVOLUME(int32_t value);

    /// <summary>
    /// The sum of all the BUY trade volumes in the from asset (base symbol / coin) for the time period.
    /// </summary>
    int32_t getVOLUMEBUY() const;
    bool vOLUMEBUYIsSet() const;
    void unsetVOLUME_BUY();

    void setVOLUMEBUY(int32_t value);

    /// <summary>
    /// The sum of all the SELL trade volumes in the from asset (base symbol / coin) for the time period.
    /// </summary>
    int32_t getVOLUMESELL() const;
    bool vOLUMESELLIsSet() const;
    void unsetVOLUME_SELL();

    void setVOLUMESELL(int32_t value);

    /// <summary>
    /// The sum of all the UNKNOWN trade volumes in the from asset (base symbol / coin) for the time period.
    /// </summary>
    int32_t getVOLUMEUNKNOWN() const;
    bool vOLUMEUNKNOWNIsSet() const;
    void unsetVOLUME_UNKNOWN();

    void setVOLUMEUNKNOWN(int32_t value);


protected:
    utility::string_t m_BASE;
    bool m_BASEIsSet;
    int32_t m_CLOSE;
    bool m_CLOSEIsSet;
    int32_t m_FIRST_TRADE_PRICE;
    bool m_FIRST_TRADE_PRICEIsSet;
    int32_t m_FIRST_TRADE_TIMESTAMP;
    bool m_FIRST_TRADE_TIMESTAMPIsSet;
    int32_t m_HIGH;
    bool m_HIGHIsSet;
    int32_t m_HIGH_TRADE_PRICE;
    bool m_HIGH_TRADE_PRICEIsSet;
    int32_t m_HIGH_TRADE_TIMESTAMP;
    bool m_HIGH_TRADE_TIMESTAMPIsSet;
    utility::string_t m_INSTRUMENT;
    bool m_INSTRUMENTIsSet;
    int32_t m_LAST_TRADE_PRICE;
    bool m_LAST_TRADE_PRICEIsSet;
    int32_t m_LAST_TRADE_TIMESTAMP;
    bool m_LAST_TRADE_TIMESTAMPIsSet;
    int32_t m_LOW;
    bool m_LOWIsSet;
    int32_t m_LOW_TRADE_PRICE;
    bool m_LOW_TRADE_PRICEIsSet;
    int32_t m_LOW_TRADE_TIMESTAMP;
    bool m_LOW_TRADE_TIMESTAMPIsSet;
    utility::string_t m_MAPPED_INSTRUMENT;
    bool m_MAPPED_INSTRUMENTIsSet;
    utility::string_t m_MARKET;
    bool m_MARKETIsSet;
    int32_t m_OPEN;
    bool m_OPENIsSet;
    utility::string_t m_QUOTE;
    bool m_QUOTEIsSet;
    int32_t m_QUOTE_VOLUME;
    bool m_QUOTE_VOLUMEIsSet;
    int32_t m_QUOTE_VOLUME_BUY;
    bool m_QUOTE_VOLUME_BUYIsSet;
    int32_t m_QUOTE_VOLUME_SELL;
    bool m_QUOTE_VOLUME_SELLIsSet;
    int32_t m_QUOTE_VOLUME_UNKNOWN;
    bool m_QUOTE_VOLUME_UNKNOWNIsSet;
    int32_t m_TIMESTAMP;
    bool m_TIMESTAMPIsSet;
    int32_t m_TOTAL_TRADES;
    bool m_TOTAL_TRADESIsSet;
    int32_t m_TOTAL_TRADES_BUY;
    bool m_TOTAL_TRADES_BUYIsSet;
    int32_t m_TOTAL_TRADES_SELL;
    bool m_TOTAL_TRADES_SELLIsSet;
    int32_t m_TOTAL_TRADES_UNKNOWN;
    bool m_TOTAL_TRADES_UNKNOWNIsSet;
    utility::string_t m_TYPE;
    bool m_TYPEIsSet;
    utility::string_t m_UNIT;
    bool m_UNITIsSet;
    int32_t m_VOLUME;
    bool m_VOLUMEIsSet;
    int32_t m_VOLUME_BUY;
    bool m_VOLUME_BUYIsSet;
    int32_t m_VOLUME_SELL;
    bool m_VOLUME_SELLIsSet;
    int32_t m_VOLUME_UNKNOWN;
    bool m_VOLUME_UNKNOWNIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_SPOT_INSTRUMENT_HISTO_DATA_H_ */
