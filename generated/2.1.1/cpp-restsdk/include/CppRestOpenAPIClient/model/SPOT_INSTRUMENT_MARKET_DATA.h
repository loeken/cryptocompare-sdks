/**
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 * CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: data@cryptocompare.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.3.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * SPOT_INSTRUMENT_MARKET_DATA.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_SPOT_INSTRUMENT_MARKET_DATA_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_SPOT_INSTRUMENT_MARKET_DATA_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  SPOT_INSTRUMENT_MARKET_DATA
    : public ModelBase
{
public:
    SPOT_INSTRUMENT_MARKET_DATA();
    virtual ~SPOT_INSTRUMENT_MARKET_DATA();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// SPOT_INSTRUMENT_MARKET_DATA members

    /// <summary>
    /// The mapped from asset (base / symbol/ coin), e.g. BTC. Only available on instruments that have been mapped.
    /// </summary>
    utility::string_t getBASE() const;
    bool bASEIsSet() const;
    void unsetBASE();

    void setBASE(const utility::string_t& value);

    /// <summary>
    /// Our internal sequence number for this tick update. This is unique per market / exchange and trading pair / instrument. It will always be increasing by 1 for each new tick update we send.
    /// </summary>
    int32_t getCCSEQ() const;
    bool cCSEQIsSet() const;
    void unsetCCSEQ();

    void setCCSEQ(int32_t value);

    /// <summary>
    /// The highest trade price of the current day (00:00:00 GMT/UTC). If there were no updates in the time period, the open price will be given. Given in the quote asset.
    /// </summary>
    int32_t getCURRENTDAYHIGH() const;
    bool cURRENTDAYHIGHIsSet() const;
    void unsetCURRENT_DAY_HIGH();

    void setCURRENTDAYHIGH(int32_t value);

    /// <summary>
    /// The lowest trade price of the current day (00:00:00 GMT/UTC). If there were no updates in the time period, the open price will be given. Given in the quote asset.
    /// </summary>
    int32_t getCURRENTDAYLOW() const;
    bool cURRENTDAYLOWIsSet() const;
    void unsetCURRENT_DAY_LOW();

    void setCURRENTDAYLOW(int32_t value);

    /// <summary>
    /// The open price for the current day, this is based on the closest trade occurring before the start of the current day (00:00:00 GMT/UTC). Given in the quote asset.
    /// </summary>
    int32_t getCURRENTDAYOPEN() const;
    bool cURRENTDAYOPENIsSet() const;
    void unsetCURRENT_DAY_OPEN();

    void setCURRENTDAYOPEN(int32_t value);

    /// <summary>
    /// The sum of all trade quote quantities from the start of the current day (00:00:00 GMT/UTC) until now. Given in the quote asset.
    /// </summary>
    int32_t getCURRENTDAYQUOTEVOLUME() const;
    bool cURRENTDAYQUOTEVOLUMEIsSet() const;
    void unsetCURRENT_DAY_QUOTE_VOLUME();

    void setCURRENTDAYQUOTEVOLUME(int32_t value);

    /// <summary>
    /// The sum of all buy trade quote quantities from the start of the current day (00:00:00 GMT/UTC) until now. Given in the quote asset.
    /// </summary>
    int32_t getCURRENTDAYQUOTEVOLUMEBUY() const;
    bool cURRENTDAYQUOTEVOLUMEBUYIsSet() const;
    void unsetCURRENT_DAY_QUOTE_VOLUME_BUY();

    void setCURRENTDAYQUOTEVOLUMEBUY(int32_t value);

    /// <summary>
    /// The sum of all sell trade quote quantities from the start of the current day (00:00:00 GMT/UTC) until now. Given in the quote asset.
    /// </summary>
    int32_t getCURRENTDAYQUOTEVOLUMESELL() const;
    bool cURRENTDAYQUOTEVOLUMESELLIsSet() const;
    void unsetCURRENT_DAY_QUOTE_VOLUME_SELL();

    void setCURRENTDAYQUOTEVOLUMESELL(int32_t value);

    /// <summary>
    /// The sum of all unknown trade quote quantities from the start of the current day (00:00:00 GMT/UTC) until now. Given in the quote asset.
    /// </summary>
    int32_t getCURRENTDAYQUOTEVOLUMEUNKNOWN() const;
    bool cURRENTDAYQUOTEVOLUMEUNKNOWNIsSet() const;
    void unsetCURRENT_DAY_QUOTE_VOLUME_UNKNOWN();

    void setCURRENTDAYQUOTEVOLUMEUNKNOWN(int32_t value);

    /// <summary>
    /// The total number of trades that have occurred since the start of the current day (00:00:00 GMT/UTC).
    /// </summary>
    int32_t getCURRENTDAYTOTALTRADES() const;
    bool cURRENTDAYTOTALTRADESIsSet() const;
    void unsetCURRENT_DAY_TOTAL_TRADES();

    void setCURRENTDAYTOTALTRADES(int32_t value);

    /// <summary>
    /// The total number of buy trades since the start of the current day (00:00:00 GMT/UTC).
    /// </summary>
    int32_t getCURRENTDAYTOTALTRADESBUY() const;
    bool cURRENTDAYTOTALTRADESBUYIsSet() const;
    void unsetCURRENT_DAY_TOTAL_TRADES_BUY();

    void setCURRENTDAYTOTALTRADESBUY(int32_t value);

    /// <summary>
    /// The total number of sell trades since the start of the current day (00:00:00 GMT/UTC).
    /// </summary>
    int32_t getCURRENTDAYTOTALTRADESSELL() const;
    bool cURRENTDAYTOTALTRADESSELLIsSet() const;
    void unsetCURRENT_DAY_TOTAL_TRADES_SELL();

    void setCURRENTDAYTOTALTRADESSELL(int32_t value);

    /// <summary>
    /// The total number of unknown trades since the start of the current day (00:00:00 GMT/UTC).
    /// </summary>
    int32_t getCURRENTDAYTOTALTRADESUNKNOWN() const;
    bool cURRENTDAYTOTALTRADESUNKNOWNIsSet() const;
    void unsetCURRENT_DAY_TOTAL_TRADES_UNKNOWN();

    void setCURRENTDAYTOTALTRADESUNKNOWN(int32_t value);

    /// <summary>
    /// The sum of all trade quantities from the start of the current day (00:00:00 GMT/UTC) until now. Given in the base asset.
    /// </summary>
    int32_t getCURRENTDAYVOLUME() const;
    bool cURRENTDAYVOLUMEIsSet() const;
    void unsetCURRENT_DAY_VOLUME();

    void setCURRENTDAYVOLUME(int32_t value);

    /// <summary>
    /// The sum of all buy trade quantities from the start of the current day (00:00:00 GMT/UTC) until now. Given in the base asset.
    /// </summary>
    int32_t getCURRENTDAYVOLUMEBUY() const;
    bool cURRENTDAYVOLUMEBUYIsSet() const;
    void unsetCURRENT_DAY_VOLUME_BUY();

    void setCURRENTDAYVOLUMEBUY(int32_t value);

    /// <summary>
    /// The sum of all sell trade quantities from the start of the current day (00:00:00 GMT/UTC) until now. Given in the base asset.
    /// </summary>
    int32_t getCURRENTDAYVOLUMESELL() const;
    bool cURRENTDAYVOLUMESELLIsSet() const;
    void unsetCURRENT_DAY_VOLUME_SELL();

    void setCURRENTDAYVOLUMESELL(int32_t value);

    /// <summary>
    /// The sum of all unknown trade quantities from the start of the current day (00:00:00 GMT/UTC) until now. Given in the base asset.
    /// </summary>
    int32_t getCURRENTDAYVOLUMEUNKNOWN() const;
    bool cURRENTDAYVOLUMEUNKNOWNIsSet() const;
    void unsetCURRENT_DAY_VOLUME_UNKNOWN();

    void setCURRENTDAYVOLUMEUNKNOWN(int32_t value);

    /// <summary>
    /// The highest trade price of the current hour. If there were no updates in the time period, the open price will be given. Given in the quote asset.
    /// </summary>
    int32_t getCURRENTHOURHIGH() const;
    bool cURRENTHOURHIGHIsSet() const;
    void unsetCURRENT_HOUR_HIGH();

    void setCURRENTHOURHIGH(int32_t value);

    /// <summary>
    /// The lowest trade price of the current hour. If there were no updates in the time period, the open price will be given. Given in the quote asset.
    /// </summary>
    int32_t getCURRENTHOURLOW() const;
    bool cURRENTHOURLOWIsSet() const;
    void unsetCURRENT_HOUR_LOW();

    void setCURRENTHOURLOW(int32_t value);

    /// <summary>
    /// The open price for the current hour, this is based on the closest trade occurring before the start of the current hour. Given in the quote asset.
    /// </summary>
    int32_t getCURRENTHOUROPEN() const;
    bool cURRENTHOUROPENIsSet() const;
    void unsetCURRENT_HOUR_OPEN();

    void setCURRENTHOUROPEN(int32_t value);

    /// <summary>
    /// The sum of all trade quote quantities from the start of the current hour until now. Given in the quote asset.
    /// </summary>
    int32_t getCURRENTHOURQUOTEVOLUME() const;
    bool cURRENTHOURQUOTEVOLUMEIsSet() const;
    void unsetCURRENT_HOUR_QUOTE_VOLUME();

    void setCURRENTHOURQUOTEVOLUME(int32_t value);

    /// <summary>
    /// The sum of all buy trade quote quantities from the start of the current hour until now. Given in the quote asset.
    /// </summary>
    int32_t getCURRENTHOURQUOTEVOLUMEBUY() const;
    bool cURRENTHOURQUOTEVOLUMEBUYIsSet() const;
    void unsetCURRENT_HOUR_QUOTE_VOLUME_BUY();

    void setCURRENTHOURQUOTEVOLUMEBUY(int32_t value);

    /// <summary>
    /// The sum of all sell trade quote quantities from the start of the current hour until now. Given in the quote asset.
    /// </summary>
    int32_t getCURRENTHOURQUOTEVOLUMESELL() const;
    bool cURRENTHOURQUOTEVOLUMESELLIsSet() const;
    void unsetCURRENT_HOUR_QUOTE_VOLUME_SELL();

    void setCURRENTHOURQUOTEVOLUMESELL(int32_t value);

    /// <summary>
    /// The sum of all unknown trade quote quantities from the start of the current hour until now. Given in the quote asset.
    /// </summary>
    int32_t getCURRENTHOURQUOTEVOLUMEUNKNOWN() const;
    bool cURRENTHOURQUOTEVOLUMEUNKNOWNIsSet() const;
    void unsetCURRENT_HOUR_QUOTE_VOLUME_UNKNOWN();

    void setCURRENTHOURQUOTEVOLUMEUNKNOWN(int32_t value);

    /// <summary>
    /// The total number of trades that have occurred since the start of the current hour.
    /// </summary>
    int32_t getCURRENTHOURTOTALTRADES() const;
    bool cURRENTHOURTOTALTRADESIsSet() const;
    void unsetCURRENT_HOUR_TOTAL_TRADES();

    void setCURRENTHOURTOTALTRADES(int32_t value);

    /// <summary>
    /// The total number of buy trades since the start of the current hour.
    /// </summary>
    int32_t getCURRENTHOURTOTALTRADESBUY() const;
    bool cURRENTHOURTOTALTRADESBUYIsSet() const;
    void unsetCURRENT_HOUR_TOTAL_TRADES_BUY();

    void setCURRENTHOURTOTALTRADESBUY(int32_t value);

    /// <summary>
    /// The total number of sell trades since the start of the current hour.
    /// </summary>
    int32_t getCURRENTHOURTOTALTRADESSELL() const;
    bool cURRENTHOURTOTALTRADESSELLIsSet() const;
    void unsetCURRENT_HOUR_TOTAL_TRADES_SELL();

    void setCURRENTHOURTOTALTRADESSELL(int32_t value);

    /// <summary>
    /// The total number of unknown trades since the start of the current hour.
    /// </summary>
    int32_t getCURRENTHOURTOTALTRADESUNKNOWN() const;
    bool cURRENTHOURTOTALTRADESUNKNOWNIsSet() const;
    void unsetCURRENT_HOUR_TOTAL_TRADES_UNKNOWN();

    void setCURRENTHOURTOTALTRADESUNKNOWN(int32_t value);

    /// <summary>
    /// The sum of all trade quantities from the start of the current hour until now. Given in the base asset.
    /// </summary>
    int32_t getCURRENTHOURVOLUME() const;
    bool cURRENTHOURVOLUMEIsSet() const;
    void unsetCURRENT_HOUR_VOLUME();

    void setCURRENTHOURVOLUME(int32_t value);

    /// <summary>
    /// The sum of all buy trade quantities from the start of the current hour until now. Given in the base asset.
    /// </summary>
    int32_t getCURRENTHOURVOLUMEBUY() const;
    bool cURRENTHOURVOLUMEBUYIsSet() const;
    void unsetCURRENT_HOUR_VOLUME_BUY();

    void setCURRENTHOURVOLUMEBUY(int32_t value);

    /// <summary>
    /// The sum of all sell trade quantities from the start of the current hour until now. Given in the base asset.
    /// </summary>
    int32_t getCURRENTHOURVOLUMESELL() const;
    bool cURRENTHOURVOLUMESELLIsSet() const;
    void unsetCURRENT_HOUR_VOLUME_SELL();

    void setCURRENTHOURVOLUMESELL(int32_t value);

    /// <summary>
    /// The sum of all trade quote quantities from the start of the current hour until now. Given in the base asset.
    /// </summary>
    int32_t getCURRENTHOURVOLUMEUNKNOWN() const;
    bool cURRENTHOURVOLUMEUNKNOWNIsSet() const;
    void unsetCURRENT_HOUR_VOLUME_UNKNOWN();

    void setCURRENTHOURVOLUMEUNKNOWN(int32_t value);

    /// <summary>
    /// The highest traded price of the month excluding the current day. The period will run from the 1st of the month - 00:00:00 GMT/UTC to the beginning - 00:00:00 GMT/UTC of the current day of the month. If today is the 1st of the month, this value will be CURRENT_MONTH_OPEN. Given in the quote asset.
    /// </summary>
    int32_t getCURRENTMONTHHIGH() const;
    bool cURRENTMONTHHIGHIsSet() const;
    void unsetCURRENT_MONTH_HIGH();

    void setCURRENTMONTHHIGH(int32_t value);

    /// <summary>
    /// The lowest traded price of the month excluding the current day. The period will run from the 1st of the month - 00:00:00 GMT/UTC to the beginning - 00:00:00 GMT/UTC of the current day of the month. If today is the 1st of the month, this value will be CURRENT_MONTH_OPEN. Given in the quote asset.
    /// </summary>
    int32_t getCURRENTMONTHLOW() const;
    bool cURRENTMONTHLOWIsSet() const;
    void unsetCURRENT_MONTH_LOW();

    void setCURRENTMONTHLOW(int32_t value);

    /// <summary>
    /// The price of the closest trade to the 1st day (00:00:00 GMT/UTC) of this month. In a highly liquid market, this would be the last trade that happened on the previous month at (23:59:59 999 GMT/UTC). This will always be supplied and there is no need to do any calculation to get the full monthly value. Given in the quote asset.
    /// </summary>
    int32_t getCURRENTMONTHOPEN() const;
    bool cURRENTMONTHOPENIsSet() const;
    void unsetCURRENT_MONTH_OPEN();

    void setCURRENTMONTHOPEN(int32_t value);

    /// <summary>
    /// The sum of all trade quote quantities from the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the first of the month, this value will be 0. Given in the quote asset.
    /// </summary>
    int32_t getCURRENTMONTHQUOTEVOLUME() const;
    bool cURRENTMONTHQUOTEVOLUMEIsSet() const;
    void unsetCURRENT_MONTH_QUOTE_VOLUME();

    void setCURRENTMONTHQUOTEVOLUME(int32_t value);

    /// <summary>
    /// The sum of all buy trade quote quantities from the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the first of the month, this value will be 0. Given in the quote asset.
    /// </summary>
    int32_t getCURRENTMONTHQUOTEVOLUMEBUY() const;
    bool cURRENTMONTHQUOTEVOLUMEBUYIsSet() const;
    void unsetCURRENT_MONTH_QUOTE_VOLUME_BUY();

    void setCURRENTMONTHQUOTEVOLUMEBUY(int32_t value);

    /// <summary>
    /// The sum of all sell trade quote quantities from the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the first of the month, this value will be 0. Given in the quote asset.
    /// </summary>
    int32_t getCURRENTMONTHQUOTEVOLUMESELL() const;
    bool cURRENTMONTHQUOTEVOLUMESELLIsSet() const;
    void unsetCURRENT_MONTH_QUOTE_VOLUME_SELL();

    void setCURRENTMONTHQUOTEVOLUMESELL(int32_t value);

    /// <summary>
    /// The sum of all unknown trade quote quantities from the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the first of the month, this value will be 0. Given in the quote asset.
    /// </summary>
    int32_t getCURRENTMONTHQUOTEVOLUMEUNKNOWN() const;
    bool cURRENTMONTHQUOTEVOLUMEUNKNOWNIsSet() const;
    void unsetCURRENT_MONTH_QUOTE_VOLUME_UNKNOWN();

    void setCURRENTMONTHQUOTEVOLUMEUNKNOWN(int32_t value);

    /// <summary>
    /// The total number of trades between the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the 1st of the month, this value will be 0.
    /// </summary>
    int32_t getCURRENTMONTHTOTALTRADES() const;
    bool cURRENTMONTHTOTALTRADESIsSet() const;
    void unsetCURRENT_MONTH_TOTAL_TRADES();

    void setCURRENTMONTHTOTALTRADES(int32_t value);

    /// <summary>
    /// The total number of buy trades between the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the 1st of the month, this value will be 0.
    /// </summary>
    int32_t getCURRENTMONTHTOTALTRADESBUY() const;
    bool cURRENTMONTHTOTALTRADESBUYIsSet() const;
    void unsetCURRENT_MONTH_TOTAL_TRADES_BUY();

    void setCURRENTMONTHTOTALTRADESBUY(int32_t value);

    /// <summary>
    /// The total number of sell trades between the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the 1st of the month, this value will be 0.
    /// </summary>
    int32_t getCURRENTMONTHTOTALTRADESSELL() const;
    bool cURRENTMONTHTOTALTRADESSELLIsSet() const;
    void unsetCURRENT_MONTH_TOTAL_TRADES_SELL();

    void setCURRENTMONTHTOTALTRADESSELL(int32_t value);

    /// <summary>
    /// The total number of unknown trades between the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the 1st of the month, this value will be 0.
    /// </summary>
    int32_t getCURRENTMONTHTOTALTRADESUNKNOWN() const;
    bool cURRENTMONTHTOTALTRADESUNKNOWNIsSet() const;
    void unsetCURRENT_MONTH_TOTAL_TRADES_UNKNOWN();

    void setCURRENTMONTHTOTALTRADESUNKNOWN(int32_t value);

    /// <summary>
    /// The sum of all trade quantities from the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the first of the month, this value will be 0. Given in the base asset.
    /// </summary>
    int32_t getCURRENTMONTHVOLUME() const;
    bool cURRENTMONTHVOLUMEIsSet() const;
    void unsetCURRENT_MONTH_VOLUME();

    void setCURRENTMONTHVOLUME(int32_t value);

    /// <summary>
    /// The sum of all buy trade quantities from the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the first of the month, this value will be 0. Given in the base asset.
    /// </summary>
    int32_t getCURRENTMONTHVOLUMEBUY() const;
    bool cURRENTMONTHVOLUMEBUYIsSet() const;
    void unsetCURRENT_MONTH_VOLUME_BUY();

    void setCURRENTMONTHVOLUMEBUY(int32_t value);

    /// <summary>
    /// The sum of all sell trade quantities from the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the first of the month, this value will be 0. Given in the base asset.
    /// </summary>
    int32_t getCURRENTMONTHVOLUMESELL() const;
    bool cURRENTMONTHVOLUMESELLIsSet() const;
    void unsetCURRENT_MONTH_VOLUME_SELL();

    void setCURRENTMONTHVOLUMESELL(int32_t value);

    /// <summary>
    /// The sum of all unknown trade quantities from the 1st of the month (xxxx:xx:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the month. If today is the first of the month, this value will be 0. Given in the base asset.
    /// </summary>
    int32_t getCURRENTMONTHVOLUMEUNKNOWN() const;
    bool cURRENTMONTHVOLUMEUNKNOWNIsSet() const;
    void unsetCURRENT_MONTH_VOLUME_UNKNOWN();

    void setCURRENTMONTHVOLUMEUNKNOWN(int32_t value);

    /// <summary>
    /// The highest traded price of the week excluding the current day. The period will run from Monday - 00:00:00 GMT/UTC to the beginning - 00:00:00 GMT/UTC of the current day of the week. If today is Monday, this value will be the same as CURRENT_WEEK_OPEN. Given in the quote asset.
    /// </summary>
    int32_t getCURRENTWEEKHIGH() const;
    bool cURRENTWEEKHIGHIsSet() const;
    void unsetCURRENT_WEEK_HIGH();

    void setCURRENTWEEKHIGH(int32_t value);

    /// <summary>
    /// The lowest traded price of the week excluding the current day. The period will run from Monday - 00:00:00 GMT/UTC to the beginning - 00:00:00 GMT/UTC of the current day of the week. If today is Monday, this value will be CURRENT_WEEK_LOW. Given in the quote asset.
    /// </summary>
    int32_t getCURRENTWEEKLOW() const;
    bool cURRENTWEEKLOWIsSet() const;
    void unsetCURRENT_WEEK_LOW();

    void setCURRENTWEEKLOW(int32_t value);

    /// <summary>
    /// The price of the closest trade to Monday (00:00:00 GMT/UTC) of this week. In a highly liquid market, this would be the last trade that happened on the previous Sunday at (23:59:59 999 GMT/UTC). This will always be supplied and there is no need to do any calculation to get the full weekly value. Given in the quote asset.
    /// </summary>
    int32_t getCURRENTWEEKOPEN() const;
    bool cURRENTWEEKOPENIsSet() const;
    void unsetCURRENT_WEEK_OPEN();

    void setCURRENTWEEKOPEN(int32_t value);

    /// <summary>
    /// The sum of all trade quote quantities from Monday (00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0. Given in the quote asset.
    /// </summary>
    int32_t getCURRENTWEEKQUOTEVOLUME() const;
    bool cURRENTWEEKQUOTEVOLUMEIsSet() const;
    void unsetCURRENT_WEEK_QUOTE_VOLUME();

    void setCURRENTWEEKQUOTEVOLUME(int32_t value);

    /// <summary>
    /// The sum of all buy trade quote quantities from Monday (00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0. Given in the quote asset.
    /// </summary>
    int32_t getCURRENTWEEKQUOTEVOLUMEBUY() const;
    bool cURRENTWEEKQUOTEVOLUMEBUYIsSet() const;
    void unsetCURRENT_WEEK_QUOTE_VOLUME_BUY();

    void setCURRENTWEEKQUOTEVOLUMEBUY(int32_t value);

    /// <summary>
    /// The sum of all sell trade quote quantities from Monday (00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0. Given in the quote asset.
    /// </summary>
    int32_t getCURRENTWEEKQUOTEVOLUMESELL() const;
    bool cURRENTWEEKQUOTEVOLUMESELLIsSet() const;
    void unsetCURRENT_WEEK_QUOTE_VOLUME_SELL();

    void setCURRENTWEEKQUOTEVOLUMESELL(int32_t value);

    /// <summary>
    /// The sum of all unknown trade quote quantities from Monday (00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0. Given in the quote asset.
    /// </summary>
    int32_t getCURRENTWEEKQUOTEVOLUMEUNKNOWN() const;
    bool cURRENTWEEKQUOTEVOLUMEUNKNOWNIsSet() const;
    void unsetCURRENT_WEEK_QUOTE_VOLUME_UNKNOWN();

    void setCURRENTWEEKQUOTEVOLUMEUNKNOWN(int32_t value);

    /// <summary>
    /// The total number of trades between Monday (00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0.
    /// </summary>
    int32_t getCURRENTWEEKTOTALTRADES() const;
    bool cURRENTWEEKTOTALTRADESIsSet() const;
    void unsetCURRENT_WEEK_TOTAL_TRADES();

    void setCURRENTWEEKTOTALTRADES(int32_t value);

    /// <summary>
    /// The total number of buy trades between Monday (00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0.
    /// </summary>
    int32_t getCURRENTWEEKTOTALTRADESBUY() const;
    bool cURRENTWEEKTOTALTRADESBUYIsSet() const;
    void unsetCURRENT_WEEK_TOTAL_TRADES_BUY();

    void setCURRENTWEEKTOTALTRADESBUY(int32_t value);

    /// <summary>
    /// The total number of sell trades between Monday (00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0.
    /// </summary>
    int32_t getCURRENTWEEKTOTALTRADESSELL() const;
    bool cURRENTWEEKTOTALTRADESSELLIsSet() const;
    void unsetCURRENT_WEEK_TOTAL_TRADES_SELL();

    void setCURRENTWEEKTOTALTRADESSELL(int32_t value);

    /// <summary>
    /// The total number of unknown trades between Monday (00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0.
    /// </summary>
    int32_t getCURRENTWEEKTOTALTRADESUNKNOWN() const;
    bool cURRENTWEEKTOTALTRADESUNKNOWNIsSet() const;
    void unsetCURRENT_WEEK_TOTAL_TRADES_UNKNOWN();

    void setCURRENTWEEKTOTALTRADESUNKNOWN(int32_t value);

    /// <summary>
    /// The sum of all trade quantities from Monday (00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0. Given in the base asset.
    /// </summary>
    int32_t getCURRENTWEEKVOLUME() const;
    bool cURRENTWEEKVOLUMEIsSet() const;
    void unsetCURRENT_WEEK_VOLUME();

    void setCURRENTWEEKVOLUME(int32_t value);

    /// <summary>
    /// The sum of all buy trade quantities from Monday (00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0. Given in the base asset.
    /// </summary>
    int32_t getCURRENTWEEKVOLUMEBUY() const;
    bool cURRENTWEEKVOLUMEBUYIsSet() const;
    void unsetCURRENT_WEEK_VOLUME_BUY();

    void setCURRENTWEEKVOLUMEBUY(int32_t value);

    /// <summary>
    /// The sum of all sell trade quantities from Monday (00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0. Given in the base asset.
    /// </summary>
    int32_t getCURRENTWEEKVOLUMESELL() const;
    bool cURRENTWEEKVOLUMESELLIsSet() const;
    void unsetCURRENT_WEEK_VOLUME_SELL();

    void setCURRENTWEEKVOLUMESELL(int32_t value);

    /// <summary>
    /// The sum of all unknown trade quantities from Monday (00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the week. If today is Monday, this value will be 0. Given in the base asset.
    /// </summary>
    int32_t getCURRENTWEEKVOLUMEUNKNOWN() const;
    bool cURRENTWEEKVOLUMEUNKNOWNIsSet() const;
    void unsetCURRENT_WEEK_VOLUME_UNKNOWN();

    void setCURRENTWEEKVOLUMEUNKNOWN(int32_t value);

    /// <summary>
    /// The highest traded price of the year excluding the current day. The period runs from the 1st of January - 00:00:00 GMT/UTC to the beginning - 00:00:00 GMT/UTC of the current day of the year. If today is the 1st of January, this value will be CURRENT_YEAR_OPEN. Given in the quote asset.
    /// </summary>
    int32_t getCURRENTYEARHIGH() const;
    bool cURRENTYEARHIGHIsSet() const;
    void unsetCURRENT_YEAR_HIGH();

    void setCURRENTYEARHIGH(int32_t value);

    /// <summary>
    /// The lowest traded price of the year excluding the current day. The period runs from the 1st of January - 00:00:00 GMT/UTC to the beginning - 00:00:00 GMT/UTC of the current day of the year. If today is the 1st of January, this value will be CURRENT_YEAR_OPEN. Given in the quote asset.
    /// </summary>
    int32_t getCURRENTYEARLOW() const;
    bool cURRENTYEARLOWIsSet() const;
    void unsetCURRENT_YEAR_LOW();

    void setCURRENTYEARLOW(int32_t value);

    /// <summary>
    /// The price of the closest trade to the 1st of January (00:00:00 GMT/UTC) of this year. In a highly liquid market, this would be the last trade that happened on on the 31st of December of the previous year (23:59:59 999 GMT/UTC). This will always be supplied and there is no need to do any calculation to get the full yearly value. Given in the quote asset.
    /// </summary>
    int32_t getCURRENTYEAROPEN() const;
    bool cURRENTYEAROPENIsSet() const;
    void unsetCURRENT_YEAR_OPEN();

    void setCURRENTYEAROPEN(int32_t value);

    /// <summary>
    /// The sum of all trade quote quantities from the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0. Given in the quote asset.
    /// </summary>
    int32_t getCURRENTYEARQUOTEVOLUME() const;
    bool cURRENTYEARQUOTEVOLUMEIsSet() const;
    void unsetCURRENT_YEAR_QUOTE_VOLUME();

    void setCURRENTYEARQUOTEVOLUME(int32_t value);

    /// <summary>
    /// The sum of all buy trade quote quantities from the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0. Given in the quote asset.
    /// </summary>
    int32_t getCURRENTYEARQUOTEVOLUMEBUY() const;
    bool cURRENTYEARQUOTEVOLUMEBUYIsSet() const;
    void unsetCURRENT_YEAR_QUOTE_VOLUME_BUY();

    void setCURRENTYEARQUOTEVOLUMEBUY(int32_t value);

    /// <summary>
    /// The sum of all sell trade quote quantities from the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0. Given in the quote asset.
    /// </summary>
    int32_t getCURRENTYEARQUOTEVOLUMESELL() const;
    bool cURRENTYEARQUOTEVOLUMESELLIsSet() const;
    void unsetCURRENT_YEAR_QUOTE_VOLUME_SELL();

    void setCURRENTYEARQUOTEVOLUMESELL(int32_t value);

    /// <summary>
    /// The sum of all unknown trade quote quantities from the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0. Given in the quote asset.
    /// </summary>
    int32_t getCURRENTYEARQUOTEVOLUMEUNKNOWN() const;
    bool cURRENTYEARQUOTEVOLUMEUNKNOWNIsSet() const;
    void unsetCURRENT_YEAR_QUOTE_VOLUME_UNKNOWN();

    void setCURRENTYEARQUOTEVOLUMEUNKNOWN(int32_t value);

    /// <summary>
    /// The total number of trades between the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0.
    /// </summary>
    int32_t getCURRENTYEARTOTALTRADES() const;
    bool cURRENTYEARTOTALTRADESIsSet() const;
    void unsetCURRENT_YEAR_TOTAL_TRADES();

    void setCURRENTYEARTOTALTRADES(int32_t value);

    /// <summary>
    /// The total number of buy trades between the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0.
    /// </summary>
    int32_t getCURRENTYEARTOTALTRADESBUY() const;
    bool cURRENTYEARTOTALTRADESBUYIsSet() const;
    void unsetCURRENT_YEAR_TOTAL_TRADES_BUY();

    void setCURRENTYEARTOTALTRADESBUY(int32_t value);

    /// <summary>
    /// The total number of sell trades between the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0.
    /// </summary>
    int32_t getCURRENTYEARTOTALTRADESSELL() const;
    bool cURRENTYEARTOTALTRADESSELLIsSet() const;
    void unsetCURRENT_YEAR_TOTAL_TRADES_SELL();

    void setCURRENTYEARTOTALTRADESSELL(int32_t value);

    /// <summary>
    /// The total number of unknown trades between the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) and the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0.
    /// </summary>
    int32_t getCURRENTYEARTOTALTRADESUNKNOWN() const;
    bool cURRENTYEARTOTALTRADESUNKNOWNIsSet() const;
    void unsetCURRENT_YEAR_TOTAL_TRADES_UNKNOWN();

    void setCURRENTYEARTOTALTRADESUNKNOWN(int32_t value);

    /// <summary>
    /// The sum of all trade quantities from the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0. Given in the base asset.
    /// </summary>
    int32_t getCURRENTYEARVOLUME() const;
    bool cURRENTYEARVOLUMEIsSet() const;
    void unsetCURRENT_YEAR_VOLUME();

    void setCURRENTYEARVOLUME(int32_t value);

    /// <summary>
    /// The sum of all buy trade quantities from the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0. Given in the base asset.
    /// </summary>
    int32_t getCURRENTYEARVOLUMEBUY() const;
    bool cURRENTYEARVOLUMEBUYIsSet() const;
    void unsetCURRENT_YEAR_VOLUME_BUY();

    void setCURRENTYEARVOLUMEBUY(int32_t value);

    /// <summary>
    /// The sum of all sell trade quantities from the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0. Given in the base asset.
    /// </summary>
    int32_t getCURRENTYEARVOLUMESELL() const;
    bool cURRENTYEARVOLUMESELLIsSet() const;
    void unsetCURRENT_YEAR_VOLUME_SELL();

    void setCURRENTYEARVOLUMESELL(int32_t value);

    /// <summary>
    /// The sum of all unknown trade quantities from the 1st of January (xxxx:01:01 00:00:00 GMT/UTC) to the beginning (00:00:00 GMT/UTC) of the current day of the year. If today is the 1st of January, this value will be 0. Given in the base asset.
    /// </summary>
    int32_t getCURRENTYEARVOLUMEUNKNOWN() const;
    bool cURRENTYEARVOLUMEUNKNOWNIsSet() const;
    void unsetCURRENT_YEAR_VOLUME_UNKNOWN();

    void setCURRENTYEARVOLUMEUNKNOWN(int32_t value);

    /// <summary>
    /// The unmapped instrument ID
    /// </summary>
    utility::string_t getINSTRUMENT() const;
    bool iNSTRUMENTIsSet() const;
    void unsetINSTRUMENT();

    void setINSTRUMENT(const utility::string_t& value);

    /// <summary>
    /// The CCSEQ of the latest trade.
    /// </summary>
    utility::string_t getLASTPROCESSEDTRADECCSEQ() const;
    bool lASTPROCESSEDTRADECCSEQIsSet() const;
    void unsetLAST_PROCESSED_TRADE_CCSEQ();

    void setLASTPROCESSEDTRADECCSEQ(const utility::string_t& value);

    /// <summary>
    /// The price in the quote asset of the last trade processed, as reported by the market / exchange.
    /// </summary>
    int32_t getLASTPROCESSEDTRADEPRICE() const;
    bool lASTPROCESSEDTRADEPRICEIsSet() const;
    void unsetLAST_PROCESSED_TRADE_PRICE();

    void setLASTPROCESSEDTRADEPRICE(int32_t value);

    /// <summary>
    /// The quantity of the last processed trade in the from symbol (base / coin).
    /// </summary>
    int32_t getLASTPROCESSEDTRADEQUANTITY() const;
    bool lASTPROCESSEDTRADEQUANTITYIsSet() const;
    void unsetLAST_PROCESSED_TRADE_QUANTITY();

    void setLASTPROCESSEDTRADEQUANTITY(int32_t value);

    /// <summary>
    /// The  volume of the last processed trade in the to asset / quote.
    /// </summary>
    int32_t getLASTPROCESSEDTRADEQUOTEQUANTITY() const;
    bool lASTPROCESSEDTRADEQUOTEQUANTITYIsSet() const;
    void unsetLAST_PROCESSED_TRADE_QUOTE_QUANTITY();

    void setLASTPROCESSEDTRADEQUOTEQUANTITY(int32_t value);

    /// <summary>
    /// The side of the last processed trade.
    /// </summary>
    utility::string_t getLASTPROCESSEDTRADESIDE() const;
    bool lASTPROCESSEDTRADESIDEIsSet() const;
    void unsetLAST_PROCESSED_TRADE_SIDE();

    void setLASTPROCESSEDTRADESIDE(const utility::string_t& value);

    /// <summary>
    /// The timestamp in seconds that the last trade was processed, as reported by the market / exchange. If the market / exchange does not provide this information, the timestamp that the trade was received will be returned.
    /// </summary>
    int32_t getLASTPROCESSEDTRADETS() const;
    bool lASTPROCESSEDTRADETSIsSet() const;
    void unsetLAST_PROCESSED_TRADE_TS();

    void setLASTPROCESSEDTRADETS(int32_t value);

    /// <summary>
    /// The CCSEQ of the latest trade.
    /// </summary>
    utility::string_t getLASTTRADECCSEQ() const;
    bool lASTTRADECCSEQIsSet() const;
    void unsetLAST_TRADE_CCSEQ();

    void setLASTTRADECCSEQ(const utility::string_t& value);

    /// <summary>
    /// The ID of the latest trade.
    /// </summary>
    utility::string_t getLASTTRADEID() const;
    bool lASTTRADEIDIsSet() const;
    void unsetLAST_TRADE_ID();

    void setLASTTRADEID(const utility::string_t& value);

    /// <summary>
    /// The quantity of the latest trade in the from symbol (base / coin).
    /// </summary>
    int32_t getLASTTRADEQUANTITY() const;
    bool lASTTRADEQUANTITYIsSet() const;
    void unsetLAST_TRADE_QUANTITY();

    void setLASTTRADEQUANTITY(int32_t value);

    /// <summary>
    /// The volume of the latest trade in the to asset / quote.
    /// </summary>
    int32_t getLASTTRADEQUOTEQUANTITY() const;
    bool lASTTRADEQUOTEQUANTITYIsSet() const;
    void unsetLAST_TRADE_QUOTE_QUANTITY();

    void setLASTTRADEQUOTEQUANTITY(int32_t value);

    /// <summary>
    /// The side of the latest trade.
    /// </summary>
    utility::string_t getLASTTRADESIDE() const;
    bool lASTTRADESIDEIsSet() const;
    void unsetLAST_TRADE_SIDE();

    void setLASTTRADESIDE(const utility::string_t& value);

    /// <summary>
    /// The timestamp of the first trade ever recorded for the instrument
    /// </summary>
    int32_t getLIFETIMEFIRSTTRADETS() const;
    bool lIFETIMEFIRSTTRADETSIsSet() const;
    void unsetLIFETIME_FIRST_TRADE_TS();

    void setLIFETIMEFIRSTTRADETS(int32_t value);

    /// <summary>
    /// The price of the highest trade ever executed for this instrument. Given in the quote asset.
    /// </summary>
    int32_t getLIFETIMEHIGH() const;
    bool lIFETIMEHIGHIsSet() const;
    void unsetLIFETIME_HIGH();

    void setLIFETIMEHIGH(int32_t value);

    /// <summary>
    /// The the timestamp of the highest trade ever executed for this instrument. Given in the quote asset.
    /// </summary>
    int32_t getLIFETIMEHIGHTS() const;
    bool lIFETIMEHIGHTSIsSet() const;
    void unsetLIFETIME_HIGH_TS();

    void setLIFETIMEHIGHTS(int32_t value);

    /// <summary>
    /// The price of the lowest trade ever executed for this instrument. Given in the quote asset.
    /// </summary>
    int32_t getLIFETIMELOW() const;
    bool lIFETIMELOWIsSet() const;
    void unsetLIFETIME_LOW();

    void setLIFETIMELOW(int32_t value);

    /// <summary>
    /// The timestamp of the lowest trade ever executed for this instrument. Given in the quote asset.
    /// </summary>
    int32_t getLIFETIMELOWTS() const;
    bool lIFETIMELOWTSIsSet() const;
    void unsetLIFETIME_LOW_TS();

    void setLIFETIMELOWTS(int32_t value);

    /// <summary>
    /// The price of the first trade of the instrument. Given in the quote asset.
    /// </summary>
    int32_t getLIFETIMEOPEN() const;
    bool lIFETIMEOPENIsSet() const;
    void unsetLIFETIME_OPEN();

    void setLIFETIMEOPEN(int32_t value);

    /// <summary>
    /// The sum of all trade quote quantities of all the trades of this instrument. Given in the quote asset.
    /// </summary>
    int32_t getLIFETIMEQUOTEVOLUME() const;
    bool lIFETIMEQUOTEVOLUMEIsSet() const;
    void unsetLIFETIME_QUOTE_VOLUME();

    void setLIFETIMEQUOTEVOLUME(int32_t value);

    /// <summary>
    /// The sum of all buy trade quote quantities of all the trades of this instrument. Given in the quote asset.
    /// </summary>
    int32_t getLIFETIMEQUOTEVOLUMEBUY() const;
    bool lIFETIMEQUOTEVOLUMEBUYIsSet() const;
    void unsetLIFETIME_QUOTE_VOLUME_BUY();

    void setLIFETIMEQUOTEVOLUMEBUY(int32_t value);

    /// <summary>
    /// The sum of all sell trade quote quantities of all the trades of this instrument. Given in the quote asset.
    /// </summary>
    int32_t getLIFETIMEQUOTEVOLUMESELL() const;
    bool lIFETIMEQUOTEVOLUMESELLIsSet() const;
    void unsetLIFETIME_QUOTE_VOLUME_SELL();

    void setLIFETIMEQUOTEVOLUMESELL(int32_t value);

    /// <summary>
    /// The sum of all unknown trade quote quantities of all the trades of this instrument. Given in the quote asset.
    /// </summary>
    int32_t getLIFETIMEQUOTEVOLUMEUNKNOWN() const;
    bool lIFETIMEQUOTEVOLUMEUNKNOWNIsSet() const;
    void unsetLIFETIME_QUOTE_VOLUME_UNKNOWN();

    void setLIFETIMEQUOTEVOLUMEUNKNOWN(int32_t value);

    /// <summary>
    /// The total number of all trades that have ever been executed for this instrument.
    /// </summary>
    int32_t getLIFETIMETOTALTRADES() const;
    bool lIFETIMETOTALTRADESIsSet() const;
    void unsetLIFETIME_TOTAL_TRADES();

    void setLIFETIMETOTALTRADES(int32_t value);

    /// <summary>
    /// The total number of all buy trades that have ever been executed for this instrument.
    /// </summary>
    int32_t getLIFETIMETOTALTRADESBUY() const;
    bool lIFETIMETOTALTRADESBUYIsSet() const;
    void unsetLIFETIME_TOTAL_TRADES_BUY();

    void setLIFETIMETOTALTRADESBUY(int32_t value);

    /// <summary>
    /// The total number of all sell trades that have ever been executed for this instrument.
    /// </summary>
    int32_t getLIFETIMETOTALTRADESSELL() const;
    bool lIFETIMETOTALTRADESSELLIsSet() const;
    void unsetLIFETIME_TOTAL_TRADES_SELL();

    void setLIFETIMETOTALTRADESSELL(int32_t value);

    /// <summary>
    /// The total number of all unknown trades that have ever been executed for this instrument.
    /// </summary>
    int32_t getLIFETIMETOTALTRADESUNKNOWN() const;
    bool lIFETIMETOTALTRADESUNKNOWNIsSet() const;
    void unsetLIFETIME_TOTAL_TRADES_UNKNOWN();

    void setLIFETIMETOTALTRADESUNKNOWN(int32_t value);

    /// <summary>
    /// The sum of all trade quantities of all the trades of this instrument. Given in the base asset.
    /// </summary>
    int32_t getLIFETIMEVOLUME() const;
    bool lIFETIMEVOLUMEIsSet() const;
    void unsetLIFETIME_VOLUME();

    void setLIFETIMEVOLUME(int32_t value);

    /// <summary>
    /// The sum of all buy trade quantities of all the trades of this instrument. Given in the base asset.
    /// </summary>
    int32_t getLIFETIMEVOLUMEBUY() const;
    bool lIFETIMEVOLUMEBUYIsSet() const;
    void unsetLIFETIME_VOLUME_BUY();

    void setLIFETIMEVOLUMEBUY(int32_t value);

    /// <summary>
    /// The sum of all sell trade quantities of all the trades of this instrument. Given in the base asset.
    /// </summary>
    int32_t getLIFETIMEVOLUMESELL() const;
    bool lIFETIMEVOLUMESELLIsSet() const;
    void unsetLIFETIME_VOLUME_SELL();

    void setLIFETIMEVOLUMESELL(int32_t value);

    /// <summary>
    /// The sum of all unknown trade quantities of all the trades of this instrument. Given in the base asset.
    /// </summary>
    int32_t getLIFETIMEVOLUMEUNKNOWN() const;
    bool lIFETIMEVOLUMEUNKNOWNIsSet() const;
    void unsetLIFETIME_VOLUME_UNKNOWN();

    void setLIFETIMEVOLUMEUNKNOWN(int32_t value);

    /// <summary>
    /// The mapped instrument ID, derived from our mapping rules. This takes the form: \&quot;BASE-QUOTE\&quot; (e.g. BTC-USD). Only available on instruments that have been mapped.
    /// </summary>
    utility::string_t getMAPPEDINSTRUMENT() const;
    bool mAPPEDINSTRUMENTIsSet() const;
    void unsetMAPPED_INSTRUMENT();

    void setMAPPEDINSTRUMENT(const utility::string_t& value);

    /// <summary>
    /// The market / exchange under consideration (e.g. coinbase, kraken, etc).
    /// </summary>
    utility::string_t getMARKET() const;
    bool mARKETIsSet() const;
    void unsetMARKET();

    void setMARKET(const utility::string_t& value);

    /// <summary>
    /// The  highest traded price of the period. Here, the period runs from 180 days ago up to the beginning of the current day (179 days in total). Given in the quote asset.
    /// </summary>
    int32_t getMOVING180DAYHIGH() const;
    bool mOVING180DAYHIGHIsSet() const;
    void unsetMOVING_180_DAY_HIGH();

    void setMOVING180DAYHIGH(int32_t value);

    /// <summary>
    /// The lowest traded price of the period. Here, the period runs from 180 days ago up to the beginning of the current day (179 days in total). Given in the quote asset.
    /// </summary>
    int32_t getMOVING180DAYLOW() const;
    bool mOVING180DAYLOWIsSet() const;
    void unsetMOVING_180_DAY_LOW();

    void setMOVING180DAYLOW(int32_t value);

    /// <summary>
    /// The price of the closest trade to the period start date (179 days + current day - 00:00:00 GMT/UTC to now). This will always be supplied and there is no need to do any calculation to get the full 180 day value. Given in the quote asset.
    /// </summary>
    int32_t getMOVING180DAYOPEN() const;
    bool mOVING180DAYOPENIsSet() const;
    void unsetMOVING_180_DAY_OPEN();

    void setMOVING180DAYOPEN(int32_t value);

    /// <summary>
    /// The sum of all trade quote quantities from 180 days ago up to the beginning of the current day (179 days in total). Given in the quote asset.
    /// </summary>
    int32_t getMOVING180DAYQUOTEVOLUME() const;
    bool mOVING180DAYQUOTEVOLUMEIsSet() const;
    void unsetMOVING_180_DAY_QUOTE_VOLUME();

    void setMOVING180DAYQUOTEVOLUME(int32_t value);

    /// <summary>
    /// The sum of all buy trade quote quantities from 180 days ago up to the beginning of the current day (179 days in total). Given in the quote asset.
    /// </summary>
    int32_t getMOVING180DAYQUOTEVOLUMEBUY() const;
    bool mOVING180DAYQUOTEVOLUMEBUYIsSet() const;
    void unsetMOVING_180_DAY_QUOTE_VOLUME_BUY();

    void setMOVING180DAYQUOTEVOLUMEBUY(int32_t value);

    /// <summary>
    /// The sum of all sell trade quote quantities from 180 days ago up to the beginning of the current day (179 days in total). Given in the quote asset.
    /// </summary>
    int32_t getMOVING180DAYQUOTEVOLUMESELL() const;
    bool mOVING180DAYQUOTEVOLUMESELLIsSet() const;
    void unsetMOVING_180_DAY_QUOTE_VOLUME_SELL();

    void setMOVING180DAYQUOTEVOLUMESELL(int32_t value);

    /// <summary>
    /// The sum of all unknown trade quote quantities from 180 days ago up to the beginning of the current day (179 days in total). Given in the quote asset.
    /// </summary>
    int32_t getMOVING180DAYQUOTEVOLUMEUNKNOWN() const;
    bool mOVING180DAYQUOTEVOLUMEUNKNOWNIsSet() const;
    void unsetMOVING_180_DAY_QUOTE_VOLUME_UNKNOWN();

    void setMOVING180DAYQUOTEVOLUMEUNKNOWN(int32_t value);

    /// <summary>
    /// The total number of trades that have occurred in the period from 180 days ago to the beginning (00:00:00 GMT/UTC) of the current day (179 days in total).
    /// </summary>
    int32_t getMOVING180DAYTOTALTRADES() const;
    bool mOVING180DAYTOTALTRADESIsSet() const;
    void unsetMOVING_180_DAY_TOTAL_TRADES();

    void setMOVING180DAYTOTALTRADES(int32_t value);

    /// <summary>
    /// The total number of buy trades that have occurred in the period from 180 days ago to the beginning (00:00:00 GMT/UTC) of the current day (179 days in total).
    /// </summary>
    int32_t getMOVING180DAYTOTALTRADESBUY() const;
    bool mOVING180DAYTOTALTRADESBUYIsSet() const;
    void unsetMOVING_180_DAY_TOTAL_TRADES_BUY();

    void setMOVING180DAYTOTALTRADESBUY(int32_t value);

    /// <summary>
    /// The total number of sell trades that have occurred in the period from 180 days ago to the beginning (00:00:00 GMT/UTC) of the current day (179 days in total).
    /// </summary>
    int32_t getMOVING180DAYTOTALTRADESSELL() const;
    bool mOVING180DAYTOTALTRADESSELLIsSet() const;
    void unsetMOVING_180_DAY_TOTAL_TRADES_SELL();

    void setMOVING180DAYTOTALTRADESSELL(int32_t value);

    /// <summary>
    /// The total number of unknown trades that have occurred in the period from 180 days ago to the beginning (00:00:00 GMT/UTC) of the current day (179 days in total).
    /// </summary>
    int32_t getMOVING180DAYTOTALTRADESUNKNOWN() const;
    bool mOVING180DAYTOTALTRADESUNKNOWNIsSet() const;
    void unsetMOVING_180_DAY_TOTAL_TRADES_UNKNOWN();

    void setMOVING180DAYTOTALTRADESUNKNOWN(int32_t value);

    /// <summary>
    /// The sum of all trade quantities from 180 days ago up to the beginning of the current day (179 days in total). Given in the base asset.
    /// </summary>
    int32_t getMOVING180DAYVOLUME() const;
    bool mOVING180DAYVOLUMEIsSet() const;
    void unsetMOVING_180_DAY_VOLUME();

    void setMOVING180DAYVOLUME(int32_t value);

    /// <summary>
    /// The sum of all trade quantities from 180 days ago up to the beginning of the current day (179 days in total). Given in the base asset.
    /// </summary>
    int32_t getMOVING180DAYVOLUMEBUY() const;
    bool mOVING180DAYVOLUMEBUYIsSet() const;
    void unsetMOVING_180_DAY_VOLUME_BUY();

    void setMOVING180DAYVOLUMEBUY(int32_t value);

    /// <summary>
    /// The sum of all sell trade quantities from 180 days ago up to the beginning of the current day (179 days in total). Given in the base asset.
    /// </summary>
    int32_t getMOVING180DAYVOLUMESELL() const;
    bool mOVING180DAYVOLUMESELLIsSet() const;
    void unsetMOVING_180_DAY_VOLUME_SELL();

    void setMOVING180DAYVOLUMESELL(int32_t value);

    /// <summary>
    /// The sum of all unknown trade quantities from 180 days ago up to the beginning of the current day (179 days in total). Given in the base asset.
    /// </summary>
    int32_t getMOVING180DAYVOLUMEUNKNOWN() const;
    bool mOVING180DAYVOLUMEUNKNOWNIsSet() const;
    void unsetMOVING_180_DAY_VOLUME_UNKNOWN();

    void setMOVING180DAYVOLUMEUNKNOWN(int32_t value);

    /// <summary>
    /// The highest traded price of the period. Here, the period runs from 24 hours ago up to the beginning of the current hour (23 hours in total). Given in the quote asset.
    /// </summary>
    int32_t getMOVING24HOURHIGH() const;
    bool mOVING24HOURHIGHIsSet() const;
    void unsetMOVING_24_HOUR_HIGH();

    void setMOVING24HOURHIGH(int32_t value);

    /// <summary>
    /// The lowest traded price of the period. Here, the period runs from 24 hours ago up to the beginning of the current hour (23 hours in total). Given in the quote asset.
    /// </summary>
    int32_t getMOVING24HOURLOW() const;
    bool mOVING24HOURLOWIsSet() const;
    void unsetMOVING_24_HOUR_LOW();

    void setMOVING24HOURLOW(int32_t value);

    /// <summary>
    /// The price of the closest trade to the period start date (23 hours + current hour ago). This will always be supplied and there is no need to do any calculation to get the full 24 hour value. Given in the quote asset.
    /// </summary>
    int32_t getMOVING24HOUROPEN() const;
    bool mOVING24HOUROPENIsSet() const;
    void unsetMOVING_24_HOUR_OPEN();

    void setMOVING24HOUROPEN(int32_t value);

    /// <summary>
    /// The sum of all trade quote quantities from 24 hours ago up to the beginning of the current hour (23 hours in total). Given in the quote asset.
    /// </summary>
    int32_t getMOVING24HOURQUOTEVOLUME() const;
    bool mOVING24HOURQUOTEVOLUMEIsSet() const;
    void unsetMOVING_24_HOUR_QUOTE_VOLUME();

    void setMOVING24HOURQUOTEVOLUME(int32_t value);

    /// <summary>
    /// The sum of all buy trade quote quantities from 24 hours ago up to the beginning of the current hour (23 hours in total). Given in the quote asset.
    /// </summary>
    int32_t getMOVING24HOURQUOTEVOLUMEBUY() const;
    bool mOVING24HOURQUOTEVOLUMEBUYIsSet() const;
    void unsetMOVING_24_HOUR_QUOTE_VOLUME_BUY();

    void setMOVING24HOURQUOTEVOLUMEBUY(int32_t value);

    /// <summary>
    /// The sum of all sell trade quote quantities from 24 hours ago up to the beginning of the current hour (23 hours in total). Given in the quote asset.
    /// </summary>
    int32_t getMOVING24HOURQUOTEVOLUMESELL() const;
    bool mOVING24HOURQUOTEVOLUMESELLIsSet() const;
    void unsetMOVING_24_HOUR_QUOTE_VOLUME_SELL();

    void setMOVING24HOURQUOTEVOLUMESELL(int32_t value);

    /// <summary>
    /// The sum of all unknown trade quote quantities from 24 hours ago up to the beginning of the current hour (23 hours in total). Given in the quote asset.
    /// </summary>
    int32_t getMOVING24HOURQUOTEVOLUMEUNKNOWN() const;
    bool mOVING24HOURQUOTEVOLUMEUNKNOWNIsSet() const;
    void unsetMOVING_24_HOUR_QUOTE_VOLUME_UNKNOWN();

    void setMOVING24HOURQUOTEVOLUMEUNKNOWN(int32_t value);

    /// <summary>
    /// The total number of trades that have occurred in the period running from 24 hours ago to the beginning (xx:00:00) of the current hour (23 hours in total).
    /// </summary>
    int32_t getMOVING24HOURTOTALTRADES() const;
    bool mOVING24HOURTOTALTRADESIsSet() const;
    void unsetMOVING_24_HOUR_TOTAL_TRADES();

    void setMOVING24HOURTOTALTRADES(int32_t value);

    /// <summary>
    /// The total number of buy trades that have occurred in the period running from 24 hours ago to the beginning (xx:00:00) of the current hour (23 hours in total).
    /// </summary>
    int32_t getMOVING24HOURTOTALTRADESBUY() const;
    bool mOVING24HOURTOTALTRADESBUYIsSet() const;
    void unsetMOVING_24_HOUR_TOTAL_TRADES_BUY();

    void setMOVING24HOURTOTALTRADESBUY(int32_t value);

    /// <summary>
    /// The total number of sell trades that have occurred in the period running from 24 hours ago to the beginning (xx:00:00) of the current hour (23 hours in total).
    /// </summary>
    int32_t getMOVING24HOURTOTALTRADESSELL() const;
    bool mOVING24HOURTOTALTRADESSELLIsSet() const;
    void unsetMOVING_24_HOUR_TOTAL_TRADES_SELL();

    void setMOVING24HOURTOTALTRADESSELL(int32_t value);

    /// <summary>
    /// The total number of unknown trades that have occurred in the period running from 24 hours ago to the beginning (xx:00:00) of the current hour (23 hours in total).
    /// </summary>
    int32_t getMOVING24HOURTOTALTRADESUNKNOWN() const;
    bool mOVING24HOURTOTALTRADESUNKNOWNIsSet() const;
    void unsetMOVING_24_HOUR_TOTAL_TRADES_UNKNOWN();

    void setMOVING24HOURTOTALTRADESUNKNOWN(int32_t value);

    /// <summary>
    /// The sum of all trade quantities from 24 hours ago up to the beginning of the current hour (23 hours in total). Given in the base asset.
    /// </summary>
    int32_t getMOVING24HOURVOLUME() const;
    bool mOVING24HOURVOLUMEIsSet() const;
    void unsetMOVING_24_HOUR_VOLUME();

    void setMOVING24HOURVOLUME(int32_t value);

    /// <summary>
    /// The sum of all buy trade quantities from 24 hours ago up to the beginning of the current hour (23 hours in total). Given in the base asset.
    /// </summary>
    int32_t getMOVING24HOURVOLUMEBUY() const;
    bool mOVING24HOURVOLUMEBUYIsSet() const;
    void unsetMOVING_24_HOUR_VOLUME_BUY();

    void setMOVING24HOURVOLUMEBUY(int32_t value);

    /// <summary>
    /// The sum of all sell trade quantities from 24 hours ago up to the beginning of the current hour (23 hours in total). Given in the base asset.
    /// </summary>
    int32_t getMOVING24HOURVOLUMESELL() const;
    bool mOVING24HOURVOLUMESELLIsSet() const;
    void unsetMOVING_24_HOUR_VOLUME_SELL();

    void setMOVING24HOURVOLUMESELL(int32_t value);

    /// <summary>
    /// The sum of all unknown trade quantities from 24 hours ago up to the beginning of the current hour (23 hours in total). Given in the base asset.
    /// </summary>
    int32_t getMOVING24HOURVOLUMEUNKNOWN() const;
    bool mOVING24HOURVOLUMEUNKNOWNIsSet() const;
    void unsetMOVING_24_HOUR_VOLUME_UNKNOWN();

    void setMOVING24HOURVOLUMEUNKNOWN(int32_t value);

    /// <summary>
    /// The highest traded price of the period. Here, the period runs from 30 days ago up to the beginning of the current day (29 days in total). Given in the quote asset.
    /// </summary>
    int32_t getMOVING30DAYHIGH() const;
    bool mOVING30DAYHIGHIsSet() const;
    void unsetMOVING_30_DAY_HIGH();

    void setMOVING30DAYHIGH(int32_t value);

    /// <summary>
    /// The lowest traded price of the period. Here, the period runs from 30 days ago up to the beginning of the current day (29 days in total). Given in the quote asset.
    /// </summary>
    int32_t getMOVING30DAYLOW() const;
    bool mOVING30DAYLOWIsSet() const;
    void unsetMOVING_30_DAY_LOW();

    void setMOVING30DAYLOW(int32_t value);

    /// <summary>
    /// The price of the closest trade to the period start date (29 days + current day - 00:00:00 GMT/UTC to now).  This will always be supplied and there is no need to do any calculation to get the full 30 day value. Given in the quote asset.
    /// </summary>
    int32_t getMOVING30DAYOPEN() const;
    bool mOVING30DAYOPENIsSet() const;
    void unsetMOVING_30_DAY_OPEN();

    void setMOVING30DAYOPEN(int32_t value);

    /// <summary>
    /// The sum of all trade quote quantities from 30 days ago up to the beginning of the current day (29 days in total). Given in the quote asset.
    /// </summary>
    int32_t getMOVING30DAYQUOTEVOLUME() const;
    bool mOVING30DAYQUOTEVOLUMEIsSet() const;
    void unsetMOVING_30_DAY_QUOTE_VOLUME();

    void setMOVING30DAYQUOTEVOLUME(int32_t value);

    /// <summary>
    /// The sum of all buy trade quote quantities from 30 days ago up to the beginning of the current day (29 days in total). Given in the quote asset.
    /// </summary>
    int32_t getMOVING30DAYQUOTEVOLUMEBUY() const;
    bool mOVING30DAYQUOTEVOLUMEBUYIsSet() const;
    void unsetMOVING_30_DAY_QUOTE_VOLUME_BUY();

    void setMOVING30DAYQUOTEVOLUMEBUY(int32_t value);

    /// <summary>
    /// The sum of all sell trade quote quantities from 30 days ago up to the beginning of the current day (29 days in total). Given in the quote asset.
    /// </summary>
    int32_t getMOVING30DAYQUOTEVOLUMESELL() const;
    bool mOVING30DAYQUOTEVOLUMESELLIsSet() const;
    void unsetMOVING_30_DAY_QUOTE_VOLUME_SELL();

    void setMOVING30DAYQUOTEVOLUMESELL(int32_t value);

    /// <summary>
    /// The sum of all unknown trade quote quantities from 30 days ago up to the beginning of the current day (29 days in total). Given in the quote asset.
    /// </summary>
    int32_t getMOVING30DAYQUOTEVOLUMEUNKNOWN() const;
    bool mOVING30DAYQUOTEVOLUMEUNKNOWNIsSet() const;
    void unsetMOVING_30_DAY_QUOTE_VOLUME_UNKNOWN();

    void setMOVING30DAYQUOTEVOLUMEUNKNOWN(int32_t value);

    /// <summary>
    /// The total number of trades that have occurred in the period running from 30 days ago to the beginning (00:00:00 GMT/UTC) of the current day (29 days in total).
    /// </summary>
    int32_t getMOVING30DAYTOTALTRADES() const;
    bool mOVING30DAYTOTALTRADESIsSet() const;
    void unsetMOVING_30_DAY_TOTAL_TRADES();

    void setMOVING30DAYTOTALTRADES(int32_t value);

    /// <summary>
    /// The total number of buy trades that have occurred in the period running from 30 days ago to the beginning (00:00:00 GMT/UTC) of the current day (29 days in total).
    /// </summary>
    int32_t getMOVING30DAYTOTALTRADESBUY() const;
    bool mOVING30DAYTOTALTRADESBUYIsSet() const;
    void unsetMOVING_30_DAY_TOTAL_TRADES_BUY();

    void setMOVING30DAYTOTALTRADESBUY(int32_t value);

    /// <summary>
    /// The total number of sell trades that have occurred in the period running from 30 days ago to the beginning (00:00:00 GMT/UTC) of the current day (29 days in total).
    /// </summary>
    int32_t getMOVING30DAYTOTALTRADESSELL() const;
    bool mOVING30DAYTOTALTRADESSELLIsSet() const;
    void unsetMOVING_30_DAY_TOTAL_TRADES_SELL();

    void setMOVING30DAYTOTALTRADESSELL(int32_t value);

    /// <summary>
    /// The total number of unknown trades that have occurred in the period running from 30 days ago to the beginning (00:00:00 GMT/UTC) of the current day (29 days in total).
    /// </summary>
    int32_t getMOVING30DAYTOTALTRADESUNKNOWN() const;
    bool mOVING30DAYTOTALTRADESUNKNOWNIsSet() const;
    void unsetMOVING_30_DAY_TOTAL_TRADES_UNKNOWN();

    void setMOVING30DAYTOTALTRADESUNKNOWN(int32_t value);

    /// <summary>
    /// The sum of all trade quantities from 30 days ago up to the beginning of the current day (29 days in total). Given in the base asset.
    /// </summary>
    int32_t getMOVING30DAYVOLUME() const;
    bool mOVING30DAYVOLUMEIsSet() const;
    void unsetMOVING_30_DAY_VOLUME();

    void setMOVING30DAYVOLUME(int32_t value);

    /// <summary>
    /// The sum of all buy trade quantities from 30 days ago up to the beginning of the current day (29 days in total). Given in the base asset.
    /// </summary>
    int32_t getMOVING30DAYVOLUMEBUY() const;
    bool mOVING30DAYVOLUMEBUYIsSet() const;
    void unsetMOVING_30_DAY_VOLUME_BUY();

    void setMOVING30DAYVOLUMEBUY(int32_t value);

    /// <summary>
    /// The sum of all sell trade quantities from 30 days ago up to the beginning of the current day (29 days in total). Given in the base asset.
    /// </summary>
    int32_t getMOVING30DAYVOLUMESELL() const;
    bool mOVING30DAYVOLUMESELLIsSet() const;
    void unsetMOVING_30_DAY_VOLUME_SELL();

    void setMOVING30DAYVOLUMESELL(int32_t value);

    /// <summary>
    /// The sum of all unknown trade quantities from 30 days ago up to the beginning of the current day (29 days in total). Given in the base asset.
    /// </summary>
    int32_t getMOVING30DAYVOLUMEUNKNOWN() const;
    bool mOVING30DAYVOLUMEUNKNOWNIsSet() const;
    void unsetMOVING_30_DAY_VOLUME_UNKNOWN();

    void setMOVING30DAYVOLUMEUNKNOWN(int32_t value);

    /// <summary>
    /// The highest price of the period. Here, the period runs from 365 days ago up to the beginning of the current day (364 days in total). Given in the quote asset.
    /// </summary>
    int32_t getMOVING365DAYHIGH() const;
    bool mOVING365DAYHIGHIsSet() const;
    void unsetMOVING_365_DAY_HIGH();

    void setMOVING365DAYHIGH(int32_t value);

    /// <summary>
    /// The lowest traded price of the period. Here, the period runs from 365 days ago up to the beginning of the current day (364 days in total). Given in the quote asset.
    /// </summary>
    int32_t getMOVING365DAYLOW() const;
    bool mOVING365DAYLOWIsSet() const;
    void unsetMOVING_365_DAY_LOW();

    void setMOVING365DAYLOW(int32_t value);

    /// <summary>
    /// The price of the closest trade to the period start date (364 days + current day - 00:00:00 GMT/UTC to now).  This will always be supplied and there is no need to do any calculation to get the full 365 day value. Given in the quote asset.
    /// </summary>
    int32_t getMOVING365DAYOPEN() const;
    bool mOVING365DAYOPENIsSet() const;
    void unsetMOVING_365_DAY_OPEN();

    void setMOVING365DAYOPEN(int32_t value);

    /// <summary>
    /// The sum of all trade quote quantities from 365 days ago up to the beginning of the current day (364 days in total). Given in the quote asset.
    /// </summary>
    int32_t getMOVING365DAYQUOTEVOLUME() const;
    bool mOVING365DAYQUOTEVOLUMEIsSet() const;
    void unsetMOVING_365_DAY_QUOTE_VOLUME();

    void setMOVING365DAYQUOTEVOLUME(int32_t value);

    /// <summary>
    /// The sum of all buy trade quote quantities from 365 days ago up to the beginning of the current day (364 days in total). Given in the quote asset.
    /// </summary>
    int32_t getMOVING365DAYQUOTEVOLUMEBUY() const;
    bool mOVING365DAYQUOTEVOLUMEBUYIsSet() const;
    void unsetMOVING_365_DAY_QUOTE_VOLUME_BUY();

    void setMOVING365DAYQUOTEVOLUMEBUY(int32_t value);

    /// <summary>
    /// The sum of all sell trade quote quantities from 365 days ago up to the beginning of the current day (364 days in total). Given in the quote asset.
    /// </summary>
    int32_t getMOVING365DAYQUOTEVOLUMESELL() const;
    bool mOVING365DAYQUOTEVOLUMESELLIsSet() const;
    void unsetMOVING_365_DAY_QUOTE_VOLUME_SELL();

    void setMOVING365DAYQUOTEVOLUMESELL(int32_t value);

    /// <summary>
    /// The sum of all unknown trade quote quantities from 365 days ago up to the beginning of the current day (364 days in total). Given in the quote asset.
    /// </summary>
    int32_t getMOVING365DAYQUOTEVOLUMEUNKNOWN() const;
    bool mOVING365DAYQUOTEVOLUMEUNKNOWNIsSet() const;
    void unsetMOVING_365_DAY_QUOTE_VOLUME_UNKNOWN();

    void setMOVING365DAYQUOTEVOLUMEUNKNOWN(int32_t value);

    /// <summary>
    /// The total number of trades that have occurred during the period running from 365 days ago to the beginning (00:00:00 GMT/UTC) of the current day (364 days in total).
    /// </summary>
    int32_t getMOVING365DAYTOTALTRADES() const;
    bool mOVING365DAYTOTALTRADESIsSet() const;
    void unsetMOVING_365_DAY_TOTAL_TRADES();

    void setMOVING365DAYTOTALTRADES(int32_t value);

    /// <summary>
    /// The total number of buy trades that have occurred during the period running from 365 days ago to the beginning (00:00:00 GMT/UTC) of the current day (364 days in total).
    /// </summary>
    int32_t getMOVING365DAYTOTALTRADESBUY() const;
    bool mOVING365DAYTOTALTRADESBUYIsSet() const;
    void unsetMOVING_365_DAY_TOTAL_TRADES_BUY();

    void setMOVING365DAYTOTALTRADESBUY(int32_t value);

    /// <summary>
    /// The total number of sell trades that have occurred during the period running from 365 days ago to the beginning (00:00:00 GMT/UTC) of the current day (364 days in total).
    /// </summary>
    int32_t getMOVING365DAYTOTALTRADESSELL() const;
    bool mOVING365DAYTOTALTRADESSELLIsSet() const;
    void unsetMOVING_365_DAY_TOTAL_TRADES_SELL();

    void setMOVING365DAYTOTALTRADESSELL(int32_t value);

    /// <summary>
    /// The total number of unknown trades that have occurred during the period running from 365 days ago to the beginning (00:00:00 GMT/UTC) of the current day (364 days in total).
    /// </summary>
    int32_t getMOVING365DAYTOTALTRADESUNKNOWN() const;
    bool mOVING365DAYTOTALTRADESUNKNOWNIsSet() const;
    void unsetMOVING_365_DAY_TOTAL_TRADES_UNKNOWN();

    void setMOVING365DAYTOTALTRADESUNKNOWN(int32_t value);

    /// <summary>
    /// The sum of all trade quantities from 365 days ago up to the beginning of the current day (364 days in total). Given in the base asset.
    /// </summary>
    int32_t getMOVING365DAYVOLUME() const;
    bool mOVING365DAYVOLUMEIsSet() const;
    void unsetMOVING_365_DAY_VOLUME();

    void setMOVING365DAYVOLUME(int32_t value);

    /// <summary>
    /// The sum of all trade quantities from 365 days ago up to the beginning of the current day (364 days in total). Given in the base asset.
    /// </summary>
    int32_t getMOVING365DAYVOLUMEBUY() const;
    bool mOVING365DAYVOLUMEBUYIsSet() const;
    void unsetMOVING_365_DAY_VOLUME_BUY();

    void setMOVING365DAYVOLUMEBUY(int32_t value);

    /// <summary>
    /// The sum of all sell trade quantities from 365 days ago up to the beginning of the current day (364 days in total). Given in the base asset.
    /// </summary>
    int32_t getMOVING365DAYVOLUMESELL() const;
    bool mOVING365DAYVOLUMESELLIsSet() const;
    void unsetMOVING_365_DAY_VOLUME_SELL();

    void setMOVING365DAYVOLUMESELL(int32_t value);

    /// <summary>
    /// The sum of all unknown trade quantities from 365 days ago up to the beginning of the current day (364 days in total). Given in the base asset.
    /// </summary>
    int32_t getMOVING365DAYVOLUMEUNKNOWN() const;
    bool mOVING365DAYVOLUMEUNKNOWNIsSet() const;
    void unsetMOVING_365_DAY_VOLUME_UNKNOWN();

    void setMOVING365DAYVOLUMEUNKNOWN(int32_t value);

    /// <summary>
    /// The highest traded price of the period. Here, the period runs from 7 days ago up to the beginning of the current day (6 days in total). Given in the quote asset.
    /// </summary>
    int32_t getMOVING7DAYHIGH() const;
    bool mOVING7DAYHIGHIsSet() const;
    void unsetMOVING_7_DAY_HIGH();

    void setMOVING7DAYHIGH(int32_t value);

    /// <summary>
    /// The lowest traded price of the period. Here, the period runs from 7 days ago up to the beginning of the current day (6 days in total). Given in the quote asset.
    /// </summary>
    int32_t getMOVING7DAYLOW() const;
    bool mOVING7DAYLOWIsSet() const;
    void unsetMOVING_7_DAY_LOW();

    void setMOVING7DAYLOW(int32_t value);

    /// <summary>
    /// The price of the closest trade to the period start date (6 days + current day - 00:00:00 GMT/UTC to now). This will always be supplied and there is no need to do any calculation to get the full 7 day value. Given in the quote asset.
    /// </summary>
    int32_t getMOVING7DAYOPEN() const;
    bool mOVING7DAYOPENIsSet() const;
    void unsetMOVING_7_DAY_OPEN();

    void setMOVING7DAYOPEN(int32_t value);

    /// <summary>
    /// The sum of all trade quote quantities from 7 days ago up to the beginning of the current day (6 days in total). Given in the quote asset.
    /// </summary>
    int32_t getMOVING7DAYQUOTEVOLUME() const;
    bool mOVING7DAYQUOTEVOLUMEIsSet() const;
    void unsetMOVING_7_DAY_QUOTE_VOLUME();

    void setMOVING7DAYQUOTEVOLUME(int32_t value);

    /// <summary>
    /// The sum of all buy trade quote quantities from 7 days ago up to the beginning of the current day (6 days in total). Given in the quote asset.
    /// </summary>
    int32_t getMOVING7DAYQUOTEVOLUMEBUY() const;
    bool mOVING7DAYQUOTEVOLUMEBUYIsSet() const;
    void unsetMOVING_7_DAY_QUOTE_VOLUME_BUY();

    void setMOVING7DAYQUOTEVOLUMEBUY(int32_t value);

    /// <summary>
    /// The sum of all sell trade quote quantities from 7 days ago up to the beginning of the current day (6 days in total). Given in the quote asset.
    /// </summary>
    int32_t getMOVING7DAYQUOTEVOLUMESELL() const;
    bool mOVING7DAYQUOTEVOLUMESELLIsSet() const;
    void unsetMOVING_7_DAY_QUOTE_VOLUME_SELL();

    void setMOVING7DAYQUOTEVOLUMESELL(int32_t value);

    /// <summary>
    /// The sum of all unknown trade quote quantities from 7 days ago up to the beginning of the current day (6 days in total). Given in the quote asset.
    /// </summary>
    int32_t getMOVING7DAYQUOTEVOLUMEUNKNOWN() const;
    bool mOVING7DAYQUOTEVOLUMEUNKNOWNIsSet() const;
    void unsetMOVING_7_DAY_QUOTE_VOLUME_UNKNOWN();

    void setMOVING7DAYQUOTEVOLUMEUNKNOWN(int32_t value);

    /// <summary>
    /// The total number of trades that have occurred in the period running from 7 days ago to the beginning (00:00:00 GMT/UTC) of the current day (6 days in total).
    /// </summary>
    int32_t getMOVING7DAYTOTALTRADES() const;
    bool mOVING7DAYTOTALTRADESIsSet() const;
    void unsetMOVING_7_DAY_TOTAL_TRADES();

    void setMOVING7DAYTOTALTRADES(int32_t value);

    /// <summary>
    /// The total number of buy trades that have occurred in the period running from 7 days ago to the beginning (00:00:00 GMT/UTC) of the current day (6 days in total).
    /// </summary>
    int32_t getMOVING7DAYTOTALTRADESBUY() const;
    bool mOVING7DAYTOTALTRADESBUYIsSet() const;
    void unsetMOVING_7_DAY_TOTAL_TRADES_BUY();

    void setMOVING7DAYTOTALTRADESBUY(int32_t value);

    /// <summary>
    /// The total number of sell trades that have occurred in the period running from 7 days ago to the beginning (00:00:00 GMT/UTC) of the current day (6 days in total).
    /// </summary>
    int32_t getMOVING7DAYTOTALTRADESSELL() const;
    bool mOVING7DAYTOTALTRADESSELLIsSet() const;
    void unsetMOVING_7_DAY_TOTAL_TRADES_SELL();

    void setMOVING7DAYTOTALTRADESSELL(int32_t value);

    /// <summary>
    /// The total number of unknown trades that have occurred in the period running from 7 days ago to the beginning (00:00:00 GMT/UTC) of the current day (6 days in total).
    /// </summary>
    int32_t getMOVING7DAYTOTALTRADESUNKNOWN() const;
    bool mOVING7DAYTOTALTRADESUNKNOWNIsSet() const;
    void unsetMOVING_7_DAY_TOTAL_TRADES_UNKNOWN();

    void setMOVING7DAYTOTALTRADESUNKNOWN(int32_t value);

    /// <summary>
    /// The sum of all trade quantities from 7 days ago up to the beginning of the current day (6 days in total). Given in the base asset.
    /// </summary>
    int32_t getMOVING7DAYVOLUME() const;
    bool mOVING7DAYVOLUMEIsSet() const;
    void unsetMOVING_7_DAY_VOLUME();

    void setMOVING7DAYVOLUME(int32_t value);

    /// <summary>
    /// The sum of all buy trade quantities from 7 days ago up to the beginning of the current day (6 days in total). Given in the base asset.
    /// </summary>
    int32_t getMOVING7DAYVOLUMEBUY() const;
    bool mOVING7DAYVOLUMEBUYIsSet() const;
    void unsetMOVING_7_DAY_VOLUME_BUY();

    void setMOVING7DAYVOLUMEBUY(int32_t value);

    /// <summary>
    /// The sum of all sell trade quantities from 7 days ago up to the beginning of the current day (6 days in total). Given in the base asset.
    /// </summary>
    int32_t getMOVING7DAYVOLUMESELL() const;
    bool mOVING7DAYVOLUMESELLIsSet() const;
    void unsetMOVING_7_DAY_VOLUME_SELL();

    void setMOVING7DAYVOLUMESELL(int32_t value);

    /// <summary>
    /// The sum of all unknown trade quantities from 7 days ago up to the beginning of the current day (6 days in total). Given in the base asset.
    /// </summary>
    int32_t getMOVING7DAYVOLUMEUNKNOWN() const;
    bool mOVING7DAYVOLUMEUNKNOWNIsSet() const;
    void unsetMOVING_7_DAY_VOLUME_UNKNOWN();

    void setMOVING7DAYVOLUMEUNKNOWN(int32_t value);

    /// <summary>
    /// The highest value between the MOVING_90_DAY_OPEN and the highest traded price of the period. Here, the period runs from 90 days ago up to the beginning of the current day (89 days in total). Given in the quote asset.
    /// </summary>
    int32_t getMOVING90DAYHIGH() const;
    bool mOVING90DAYHIGHIsSet() const;
    void unsetMOVING_90_DAY_HIGH();

    void setMOVING90DAYHIGH(int32_t value);

    /// <summary>
    /// The lowest traded price of the period. Here, the period runs from 90 days ago up to the beginning of the current day (89 days in total). Given in the quote asset.
    /// </summary>
    int32_t getMOVING90DAYLOW() const;
    bool mOVING90DAYLOWIsSet() const;
    void unsetMOVING_90_DAY_LOW();

    void setMOVING90DAYLOW(int32_t value);

    /// <summary>
    /// The price of the closest trade to the period start date (89 days + current day - 00:00:00 GMT/UTC to now).  This will always be supplied and there is no need to do any calculation to get the full 90 day value. Given in the quote asset.
    /// </summary>
    int32_t getMOVING90DAYOPEN() const;
    bool mOVING90DAYOPENIsSet() const;
    void unsetMOVING_90_DAY_OPEN();

    void setMOVING90DAYOPEN(int32_t value);

    /// <summary>
    /// The sum of all trade quote quantities from 90 days ago up to the beginning of the current day (89 days in total). Given in the quote asset.
    /// </summary>
    int32_t getMOVING90DAYQUOTEVOLUME() const;
    bool mOVING90DAYQUOTEVOLUMEIsSet() const;
    void unsetMOVING_90_DAY_QUOTE_VOLUME();

    void setMOVING90DAYQUOTEVOLUME(int32_t value);

    /// <summary>
    /// The sum of all buy trade quote quantities from 90 days ago up to the beginning of the current day (89 days in total). Given in the quote asset.
    /// </summary>
    int32_t getMOVING90DAYQUOTEVOLUMEBUY() const;
    bool mOVING90DAYQUOTEVOLUMEBUYIsSet() const;
    void unsetMOVING_90_DAY_QUOTE_VOLUME_BUY();

    void setMOVING90DAYQUOTEVOLUMEBUY(int32_t value);

    /// <summary>
    /// The sum of all sell trade quote quantities from 90 days ago up to the beginning of the current day (89 days in total). Given in the quote asset.
    /// </summary>
    int32_t getMOVING90DAYQUOTEVOLUMESELL() const;
    bool mOVING90DAYQUOTEVOLUMESELLIsSet() const;
    void unsetMOVING_90_DAY_QUOTE_VOLUME_SELL();

    void setMOVING90DAYQUOTEVOLUMESELL(int32_t value);

    /// <summary>
    /// The sum of all unknown trade quote quantities from 90 days ago up to the beginning of the current day (89 days in total). Given in the quote asset.
    /// </summary>
    int32_t getMOVING90DAYQUOTEVOLUMEUNKNOWN() const;
    bool mOVING90DAYQUOTEVOLUMEUNKNOWNIsSet() const;
    void unsetMOVING_90_DAY_QUOTE_VOLUME_UNKNOWN();

    void setMOVING90DAYQUOTEVOLUMEUNKNOWN(int32_t value);

    /// <summary>
    /// The total number of trades that have occurred in the period running from 90 days ago to the beginning (00:00:00 GMT/UTC) of the current day (89 days in total).
    /// </summary>
    int32_t getMOVING90DAYTOTALTRADES() const;
    bool mOVING90DAYTOTALTRADESIsSet() const;
    void unsetMOVING_90_DAY_TOTAL_TRADES();

    void setMOVING90DAYTOTALTRADES(int32_t value);

    /// <summary>
    /// The total number of buy trades that have occurred in the period running from 90 days ago to the beginning (00:00:00 GMT/UTC) of the current day (89 days in total).
    /// </summary>
    int32_t getMOVING90DAYTOTALTRADESBUY() const;
    bool mOVING90DAYTOTALTRADESBUYIsSet() const;
    void unsetMOVING_90_DAY_TOTAL_TRADES_BUY();

    void setMOVING90DAYTOTALTRADESBUY(int32_t value);

    /// <summary>
    /// The total number of sell trades that have occurred in the period running from 90 days ago to the beginning (00:00:00 GMT/UTC) of the current day (89 days in total).
    /// </summary>
    int32_t getMOVING90DAYTOTALTRADESSELL() const;
    bool mOVING90DAYTOTALTRADESSELLIsSet() const;
    void unsetMOVING_90_DAY_TOTAL_TRADES_SELL();

    void setMOVING90DAYTOTALTRADESSELL(int32_t value);

    /// <summary>
    /// The total number of unknown trades that have occurred in the period running from 90 days ago to the beginning (00:00:00 GMT/UTC) of the current day (89 days in total).
    /// </summary>
    int32_t getMOVING90DAYTOTALTRADESUNKNOWN() const;
    bool mOVING90DAYTOTALTRADESUNKNOWNIsSet() const;
    void unsetMOVING_90_DAY_TOTAL_TRADES_UNKNOWN();

    void setMOVING90DAYTOTALTRADESUNKNOWN(int32_t value);

    /// <summary>
    /// The sum of all trade quantities from 90 days ago up to the beginning of the current day (89 days in total). Given in the base asset.
    /// </summary>
    int32_t getMOVING90DAYVOLUME() const;
    bool mOVING90DAYVOLUMEIsSet() const;
    void unsetMOVING_90_DAY_VOLUME();

    void setMOVING90DAYVOLUME(int32_t value);

    /// <summary>
    /// The sum of all trade quantities from 90 days ago up to the beginning of the current day (89 days in total). Given in the base asset.
    /// </summary>
    int32_t getMOVING90DAYVOLUMEBUY() const;
    bool mOVING90DAYVOLUMEBUYIsSet() const;
    void unsetMOVING_90_DAY_VOLUME_BUY();

    void setMOVING90DAYVOLUMEBUY(int32_t value);

    /// <summary>
    /// The sum of all sell trade quantities from 90 days ago up to the beginning of the current day (89 days in total). Given in the base asset.
    /// </summary>
    int32_t getMOVING90DAYVOLUMESELL() const;
    bool mOVING90DAYVOLUMESELLIsSet() const;
    void unsetMOVING_90_DAY_VOLUME_SELL();

    void setMOVING90DAYVOLUMESELL(int32_t value);

    /// <summary>
    /// The sum of all unknown trade quantities from 90 days ago up to the beginning of the current day (89 days in total). Given in the base asset.
    /// </summary>
    int32_t getMOVING90DAYVOLUMEUNKNOWN() const;
    bool mOVING90DAYVOLUMEUNKNOWNIsSet() const;
    void unsetMOVING_90_DAY_VOLUME_UNKNOWN();

    void setMOVING90DAYVOLUMEUNKNOWN(int32_t value);

    /// <summary>
    /// The price in the to asset (quote / number symbol / coin) of the latest trade. I.e. for a BTC-USD trade, how much was paid for one BTC in USD).
    /// </summary>
    int32_t getPRICE() const;
    bool pRICEIsSet() const;
    void unsetPRICE();

    void setPRICE(int32_t value);

    /// <summary>
    /// The flag indicating whether the price has increased, decreased, or not changed
    /// </summary>
    utility::string_t getPRICEFLAG() const;
    bool pRICEFLAGIsSet() const;
    void unsetPRICE_FLAG();

    void setPRICEFLAG(const utility::string_t& value);

    /// <summary>
    /// The timestamp in seconds as reported by the market / exchange. If the market /exchange does not provide this information, the received timestamp will be returned.
    /// </summary>
    int32_t getPRICELASTUPDATETS() const;
    bool pRICELASTUPDATETSIsSet() const;
    void unsetPRICE_LAST_UPDATE_TS();

    void setPRICELASTUPDATETS(int32_t value);

    /// <summary>
    /// The mapped to asset (quote / counter symbol / coin), e.g. USD. Only available on instruments that have been mapped.
    /// </summary>
    utility::string_t getQUOTE() const;
    bool qUOTEIsSet() const;
    void unsetQUOTE();

    void setQUOTE(const utility::string_t& value);

    /// <summary>
    /// The timestamp in seconds of the last time the top ask was updated, as reported by the market / exchange. If the market / exchange does not provide this information, the received timestamp will be returned.
    /// </summary>
    int32_t getTOPASKLASTUPDATETS() const;
    bool tOPASKLASTUPDATETSIsSet() const;
    void unsetTOP_ASK_LAST_UPDATE_TS();

    void setTOPASKLASTUPDATETS(int32_t value);

    /// <summary>
    /// The price of the top ask in the to asset (quote / numberer symbol / coin). For a BTC-USD order book, this will be the best price someone is willing to sell some BTC in USD, as quoted for 1 full BTC.
    /// </summary>
    int32_t getTOPASKPRICE() const;
    bool tOPASKPRICEIsSet() const;
    void unsetTOP_ASK_PRICE();

    void setTOPASKPRICE(int32_t value);

    /// <summary>
    /// The quantity of the top ask in the from asset (base / coin). For a BTC-USD order book, this will be the amount of BTC a person is willing to sell at the best price.
    /// </summary>
    int32_t getTOPASKQUANTITY() const;
    bool tOPASKQUANTITYIsSet() const;
    void unsetTOP_ASK_QUANTITY();

    void setTOPASKQUANTITY(int32_t value);

    /// <summary>
    /// The timestamp in seconds of the last time the top bid was updated, as reported by the market / exchange. If the market / exchange does not provide this information, the received timestamp will be returned.
    /// </summary>
    int32_t getTOPBIDLASTUPDATETS() const;
    bool tOPBIDLASTUPDATETSIsSet() const;
    void unsetTOP_BID_LAST_UPDATE_TS();

    void setTOPBIDLASTUPDATETS(int32_t value);

    /// <summary>
    /// The price of the top bid in the to asset (quote / numberer symbol / coin). For a BTC-USD order book, this will be the highest price a person is willing to pay for some BTC in USD, as quoted for 1 full BTC.
    /// </summary>
    int32_t getTOPBIDPRICE() const;
    bool tOPBIDPRICEIsSet() const;
    void unsetTOP_BID_PRICE();

    void setTOPBIDPRICE(int32_t value);

    /// <summary>
    /// The quantity of the top bid in the from asset (base / coin). For a BTC-USD order book , this will be the amount of BTC someone is willing to buy at the best price.
    /// </summary>
    int32_t getTOPBIDQUANTITY() const;
    bool tOPBIDQUANTITYIsSet() const;
    void unsetTOP_BID_QUANTITY();

    void setTOPBIDQUANTITY(int32_t value);

    /// <summary>
    /// The type of the message.
    /// </summary>
    utility::string_t getTYPE() const;
    bool tYPEIsSet() const;
    void unsetTYPE();

    void setTYPE(const utility::string_t& value);


protected:
    utility::string_t m_BASE;
    bool m_BASEIsSet;
    int32_t m_CCSEQ;
    bool m_CCSEQIsSet;
    int32_t m_CURRENT_DAY_HIGH;
    bool m_CURRENT_DAY_HIGHIsSet;
    int32_t m_CURRENT_DAY_LOW;
    bool m_CURRENT_DAY_LOWIsSet;
    int32_t m_CURRENT_DAY_OPEN;
    bool m_CURRENT_DAY_OPENIsSet;
    int32_t m_CURRENT_DAY_QUOTE_VOLUME;
    bool m_CURRENT_DAY_QUOTE_VOLUMEIsSet;
    int32_t m_CURRENT_DAY_QUOTE_VOLUME_BUY;
    bool m_CURRENT_DAY_QUOTE_VOLUME_BUYIsSet;
    int32_t m_CURRENT_DAY_QUOTE_VOLUME_SELL;
    bool m_CURRENT_DAY_QUOTE_VOLUME_SELLIsSet;
    int32_t m_CURRENT_DAY_QUOTE_VOLUME_UNKNOWN;
    bool m_CURRENT_DAY_QUOTE_VOLUME_UNKNOWNIsSet;
    int32_t m_CURRENT_DAY_TOTAL_TRADES;
    bool m_CURRENT_DAY_TOTAL_TRADESIsSet;
    int32_t m_CURRENT_DAY_TOTAL_TRADES_BUY;
    bool m_CURRENT_DAY_TOTAL_TRADES_BUYIsSet;
    int32_t m_CURRENT_DAY_TOTAL_TRADES_SELL;
    bool m_CURRENT_DAY_TOTAL_TRADES_SELLIsSet;
    int32_t m_CURRENT_DAY_TOTAL_TRADES_UNKNOWN;
    bool m_CURRENT_DAY_TOTAL_TRADES_UNKNOWNIsSet;
    int32_t m_CURRENT_DAY_VOLUME;
    bool m_CURRENT_DAY_VOLUMEIsSet;
    int32_t m_CURRENT_DAY_VOLUME_BUY;
    bool m_CURRENT_DAY_VOLUME_BUYIsSet;
    int32_t m_CURRENT_DAY_VOLUME_SELL;
    bool m_CURRENT_DAY_VOLUME_SELLIsSet;
    int32_t m_CURRENT_DAY_VOLUME_UNKNOWN;
    bool m_CURRENT_DAY_VOLUME_UNKNOWNIsSet;
    int32_t m_CURRENT_HOUR_HIGH;
    bool m_CURRENT_HOUR_HIGHIsSet;
    int32_t m_CURRENT_HOUR_LOW;
    bool m_CURRENT_HOUR_LOWIsSet;
    int32_t m_CURRENT_HOUR_OPEN;
    bool m_CURRENT_HOUR_OPENIsSet;
    int32_t m_CURRENT_HOUR_QUOTE_VOLUME;
    bool m_CURRENT_HOUR_QUOTE_VOLUMEIsSet;
    int32_t m_CURRENT_HOUR_QUOTE_VOLUME_BUY;
    bool m_CURRENT_HOUR_QUOTE_VOLUME_BUYIsSet;
    int32_t m_CURRENT_HOUR_QUOTE_VOLUME_SELL;
    bool m_CURRENT_HOUR_QUOTE_VOLUME_SELLIsSet;
    int32_t m_CURRENT_HOUR_QUOTE_VOLUME_UNKNOWN;
    bool m_CURRENT_HOUR_QUOTE_VOLUME_UNKNOWNIsSet;
    int32_t m_CURRENT_HOUR_TOTAL_TRADES;
    bool m_CURRENT_HOUR_TOTAL_TRADESIsSet;
    int32_t m_CURRENT_HOUR_TOTAL_TRADES_BUY;
    bool m_CURRENT_HOUR_TOTAL_TRADES_BUYIsSet;
    int32_t m_CURRENT_HOUR_TOTAL_TRADES_SELL;
    bool m_CURRENT_HOUR_TOTAL_TRADES_SELLIsSet;
    int32_t m_CURRENT_HOUR_TOTAL_TRADES_UNKNOWN;
    bool m_CURRENT_HOUR_TOTAL_TRADES_UNKNOWNIsSet;
    int32_t m_CURRENT_HOUR_VOLUME;
    bool m_CURRENT_HOUR_VOLUMEIsSet;
    int32_t m_CURRENT_HOUR_VOLUME_BUY;
    bool m_CURRENT_HOUR_VOLUME_BUYIsSet;
    int32_t m_CURRENT_HOUR_VOLUME_SELL;
    bool m_CURRENT_HOUR_VOLUME_SELLIsSet;
    int32_t m_CURRENT_HOUR_VOLUME_UNKNOWN;
    bool m_CURRENT_HOUR_VOLUME_UNKNOWNIsSet;
    int32_t m_CURRENT_MONTH_HIGH;
    bool m_CURRENT_MONTH_HIGHIsSet;
    int32_t m_CURRENT_MONTH_LOW;
    bool m_CURRENT_MONTH_LOWIsSet;
    int32_t m_CURRENT_MONTH_OPEN;
    bool m_CURRENT_MONTH_OPENIsSet;
    int32_t m_CURRENT_MONTH_QUOTE_VOLUME;
    bool m_CURRENT_MONTH_QUOTE_VOLUMEIsSet;
    int32_t m_CURRENT_MONTH_QUOTE_VOLUME_BUY;
    bool m_CURRENT_MONTH_QUOTE_VOLUME_BUYIsSet;
    int32_t m_CURRENT_MONTH_QUOTE_VOLUME_SELL;
    bool m_CURRENT_MONTH_QUOTE_VOLUME_SELLIsSet;
    int32_t m_CURRENT_MONTH_QUOTE_VOLUME_UNKNOWN;
    bool m_CURRENT_MONTH_QUOTE_VOLUME_UNKNOWNIsSet;
    int32_t m_CURRENT_MONTH_TOTAL_TRADES;
    bool m_CURRENT_MONTH_TOTAL_TRADESIsSet;
    int32_t m_CURRENT_MONTH_TOTAL_TRADES_BUY;
    bool m_CURRENT_MONTH_TOTAL_TRADES_BUYIsSet;
    int32_t m_CURRENT_MONTH_TOTAL_TRADES_SELL;
    bool m_CURRENT_MONTH_TOTAL_TRADES_SELLIsSet;
    int32_t m_CURRENT_MONTH_TOTAL_TRADES_UNKNOWN;
    bool m_CURRENT_MONTH_TOTAL_TRADES_UNKNOWNIsSet;
    int32_t m_CURRENT_MONTH_VOLUME;
    bool m_CURRENT_MONTH_VOLUMEIsSet;
    int32_t m_CURRENT_MONTH_VOLUME_BUY;
    bool m_CURRENT_MONTH_VOLUME_BUYIsSet;
    int32_t m_CURRENT_MONTH_VOLUME_SELL;
    bool m_CURRENT_MONTH_VOLUME_SELLIsSet;
    int32_t m_CURRENT_MONTH_VOLUME_UNKNOWN;
    bool m_CURRENT_MONTH_VOLUME_UNKNOWNIsSet;
    int32_t m_CURRENT_WEEK_HIGH;
    bool m_CURRENT_WEEK_HIGHIsSet;
    int32_t m_CURRENT_WEEK_LOW;
    bool m_CURRENT_WEEK_LOWIsSet;
    int32_t m_CURRENT_WEEK_OPEN;
    bool m_CURRENT_WEEK_OPENIsSet;
    int32_t m_CURRENT_WEEK_QUOTE_VOLUME;
    bool m_CURRENT_WEEK_QUOTE_VOLUMEIsSet;
    int32_t m_CURRENT_WEEK_QUOTE_VOLUME_BUY;
    bool m_CURRENT_WEEK_QUOTE_VOLUME_BUYIsSet;
    int32_t m_CURRENT_WEEK_QUOTE_VOLUME_SELL;
    bool m_CURRENT_WEEK_QUOTE_VOLUME_SELLIsSet;
    int32_t m_CURRENT_WEEK_QUOTE_VOLUME_UNKNOWN;
    bool m_CURRENT_WEEK_QUOTE_VOLUME_UNKNOWNIsSet;
    int32_t m_CURRENT_WEEK_TOTAL_TRADES;
    bool m_CURRENT_WEEK_TOTAL_TRADESIsSet;
    int32_t m_CURRENT_WEEK_TOTAL_TRADES_BUY;
    bool m_CURRENT_WEEK_TOTAL_TRADES_BUYIsSet;
    int32_t m_CURRENT_WEEK_TOTAL_TRADES_SELL;
    bool m_CURRENT_WEEK_TOTAL_TRADES_SELLIsSet;
    int32_t m_CURRENT_WEEK_TOTAL_TRADES_UNKNOWN;
    bool m_CURRENT_WEEK_TOTAL_TRADES_UNKNOWNIsSet;
    int32_t m_CURRENT_WEEK_VOLUME;
    bool m_CURRENT_WEEK_VOLUMEIsSet;
    int32_t m_CURRENT_WEEK_VOLUME_BUY;
    bool m_CURRENT_WEEK_VOLUME_BUYIsSet;
    int32_t m_CURRENT_WEEK_VOLUME_SELL;
    bool m_CURRENT_WEEK_VOLUME_SELLIsSet;
    int32_t m_CURRENT_WEEK_VOLUME_UNKNOWN;
    bool m_CURRENT_WEEK_VOLUME_UNKNOWNIsSet;
    int32_t m_CURRENT_YEAR_HIGH;
    bool m_CURRENT_YEAR_HIGHIsSet;
    int32_t m_CURRENT_YEAR_LOW;
    bool m_CURRENT_YEAR_LOWIsSet;
    int32_t m_CURRENT_YEAR_OPEN;
    bool m_CURRENT_YEAR_OPENIsSet;
    int32_t m_CURRENT_YEAR_QUOTE_VOLUME;
    bool m_CURRENT_YEAR_QUOTE_VOLUMEIsSet;
    int32_t m_CURRENT_YEAR_QUOTE_VOLUME_BUY;
    bool m_CURRENT_YEAR_QUOTE_VOLUME_BUYIsSet;
    int32_t m_CURRENT_YEAR_QUOTE_VOLUME_SELL;
    bool m_CURRENT_YEAR_QUOTE_VOLUME_SELLIsSet;
    int32_t m_CURRENT_YEAR_QUOTE_VOLUME_UNKNOWN;
    bool m_CURRENT_YEAR_QUOTE_VOLUME_UNKNOWNIsSet;
    int32_t m_CURRENT_YEAR_TOTAL_TRADES;
    bool m_CURRENT_YEAR_TOTAL_TRADESIsSet;
    int32_t m_CURRENT_YEAR_TOTAL_TRADES_BUY;
    bool m_CURRENT_YEAR_TOTAL_TRADES_BUYIsSet;
    int32_t m_CURRENT_YEAR_TOTAL_TRADES_SELL;
    bool m_CURRENT_YEAR_TOTAL_TRADES_SELLIsSet;
    int32_t m_CURRENT_YEAR_TOTAL_TRADES_UNKNOWN;
    bool m_CURRENT_YEAR_TOTAL_TRADES_UNKNOWNIsSet;
    int32_t m_CURRENT_YEAR_VOLUME;
    bool m_CURRENT_YEAR_VOLUMEIsSet;
    int32_t m_CURRENT_YEAR_VOLUME_BUY;
    bool m_CURRENT_YEAR_VOLUME_BUYIsSet;
    int32_t m_CURRENT_YEAR_VOLUME_SELL;
    bool m_CURRENT_YEAR_VOLUME_SELLIsSet;
    int32_t m_CURRENT_YEAR_VOLUME_UNKNOWN;
    bool m_CURRENT_YEAR_VOLUME_UNKNOWNIsSet;
    utility::string_t m_INSTRUMENT;
    bool m_INSTRUMENTIsSet;
    utility::string_t m_LAST_PROCESSED_TRADE_CCSEQ;
    bool m_LAST_PROCESSED_TRADE_CCSEQIsSet;
    int32_t m_LAST_PROCESSED_TRADE_PRICE;
    bool m_LAST_PROCESSED_TRADE_PRICEIsSet;
    int32_t m_LAST_PROCESSED_TRADE_QUANTITY;
    bool m_LAST_PROCESSED_TRADE_QUANTITYIsSet;
    int32_t m_LAST_PROCESSED_TRADE_QUOTE_QUANTITY;
    bool m_LAST_PROCESSED_TRADE_QUOTE_QUANTITYIsSet;
    utility::string_t m_LAST_PROCESSED_TRADE_SIDE;
    bool m_LAST_PROCESSED_TRADE_SIDEIsSet;
    int32_t m_LAST_PROCESSED_TRADE_TS;
    bool m_LAST_PROCESSED_TRADE_TSIsSet;
    utility::string_t m_LAST_TRADE_CCSEQ;
    bool m_LAST_TRADE_CCSEQIsSet;
    utility::string_t m_LAST_TRADE_ID;
    bool m_LAST_TRADE_IDIsSet;
    int32_t m_LAST_TRADE_QUANTITY;
    bool m_LAST_TRADE_QUANTITYIsSet;
    int32_t m_LAST_TRADE_QUOTE_QUANTITY;
    bool m_LAST_TRADE_QUOTE_QUANTITYIsSet;
    utility::string_t m_LAST_TRADE_SIDE;
    bool m_LAST_TRADE_SIDEIsSet;
    int32_t m_LIFETIME_FIRST_TRADE_TS;
    bool m_LIFETIME_FIRST_TRADE_TSIsSet;
    int32_t m_LIFETIME_HIGH;
    bool m_LIFETIME_HIGHIsSet;
    int32_t m_LIFETIME_HIGH_TS;
    bool m_LIFETIME_HIGH_TSIsSet;
    int32_t m_LIFETIME_LOW;
    bool m_LIFETIME_LOWIsSet;
    int32_t m_LIFETIME_LOW_TS;
    bool m_LIFETIME_LOW_TSIsSet;
    int32_t m_LIFETIME_OPEN;
    bool m_LIFETIME_OPENIsSet;
    int32_t m_LIFETIME_QUOTE_VOLUME;
    bool m_LIFETIME_QUOTE_VOLUMEIsSet;
    int32_t m_LIFETIME_QUOTE_VOLUME_BUY;
    bool m_LIFETIME_QUOTE_VOLUME_BUYIsSet;
    int32_t m_LIFETIME_QUOTE_VOLUME_SELL;
    bool m_LIFETIME_QUOTE_VOLUME_SELLIsSet;
    int32_t m_LIFETIME_QUOTE_VOLUME_UNKNOWN;
    bool m_LIFETIME_QUOTE_VOLUME_UNKNOWNIsSet;
    int32_t m_LIFETIME_TOTAL_TRADES;
    bool m_LIFETIME_TOTAL_TRADESIsSet;
    int32_t m_LIFETIME_TOTAL_TRADES_BUY;
    bool m_LIFETIME_TOTAL_TRADES_BUYIsSet;
    int32_t m_LIFETIME_TOTAL_TRADES_SELL;
    bool m_LIFETIME_TOTAL_TRADES_SELLIsSet;
    int32_t m_LIFETIME_TOTAL_TRADES_UNKNOWN;
    bool m_LIFETIME_TOTAL_TRADES_UNKNOWNIsSet;
    int32_t m_LIFETIME_VOLUME;
    bool m_LIFETIME_VOLUMEIsSet;
    int32_t m_LIFETIME_VOLUME_BUY;
    bool m_LIFETIME_VOLUME_BUYIsSet;
    int32_t m_LIFETIME_VOLUME_SELL;
    bool m_LIFETIME_VOLUME_SELLIsSet;
    int32_t m_LIFETIME_VOLUME_UNKNOWN;
    bool m_LIFETIME_VOLUME_UNKNOWNIsSet;
    utility::string_t m_MAPPED_INSTRUMENT;
    bool m_MAPPED_INSTRUMENTIsSet;
    utility::string_t m_MARKET;
    bool m_MARKETIsSet;
    int32_t m_MOVING_180_DAY_HIGH;
    bool m_MOVING_180_DAY_HIGHIsSet;
    int32_t m_MOVING_180_DAY_LOW;
    bool m_MOVING_180_DAY_LOWIsSet;
    int32_t m_MOVING_180_DAY_OPEN;
    bool m_MOVING_180_DAY_OPENIsSet;
    int32_t m_MOVING_180_DAY_QUOTE_VOLUME;
    bool m_MOVING_180_DAY_QUOTE_VOLUMEIsSet;
    int32_t m_MOVING_180_DAY_QUOTE_VOLUME_BUY;
    bool m_MOVING_180_DAY_QUOTE_VOLUME_BUYIsSet;
    int32_t m_MOVING_180_DAY_QUOTE_VOLUME_SELL;
    bool m_MOVING_180_DAY_QUOTE_VOLUME_SELLIsSet;
    int32_t m_MOVING_180_DAY_QUOTE_VOLUME_UNKNOWN;
    bool m_MOVING_180_DAY_QUOTE_VOLUME_UNKNOWNIsSet;
    int32_t m_MOVING_180_DAY_TOTAL_TRADES;
    bool m_MOVING_180_DAY_TOTAL_TRADESIsSet;
    int32_t m_MOVING_180_DAY_TOTAL_TRADES_BUY;
    bool m_MOVING_180_DAY_TOTAL_TRADES_BUYIsSet;
    int32_t m_MOVING_180_DAY_TOTAL_TRADES_SELL;
    bool m_MOVING_180_DAY_TOTAL_TRADES_SELLIsSet;
    int32_t m_MOVING_180_DAY_TOTAL_TRADES_UNKNOWN;
    bool m_MOVING_180_DAY_TOTAL_TRADES_UNKNOWNIsSet;
    int32_t m_MOVING_180_DAY_VOLUME;
    bool m_MOVING_180_DAY_VOLUMEIsSet;
    int32_t m_MOVING_180_DAY_VOLUME_BUY;
    bool m_MOVING_180_DAY_VOLUME_BUYIsSet;
    int32_t m_MOVING_180_DAY_VOLUME_SELL;
    bool m_MOVING_180_DAY_VOLUME_SELLIsSet;
    int32_t m_MOVING_180_DAY_VOLUME_UNKNOWN;
    bool m_MOVING_180_DAY_VOLUME_UNKNOWNIsSet;
    int32_t m_MOVING_24_HOUR_HIGH;
    bool m_MOVING_24_HOUR_HIGHIsSet;
    int32_t m_MOVING_24_HOUR_LOW;
    bool m_MOVING_24_HOUR_LOWIsSet;
    int32_t m_MOVING_24_HOUR_OPEN;
    bool m_MOVING_24_HOUR_OPENIsSet;
    int32_t m_MOVING_24_HOUR_QUOTE_VOLUME;
    bool m_MOVING_24_HOUR_QUOTE_VOLUMEIsSet;
    int32_t m_MOVING_24_HOUR_QUOTE_VOLUME_BUY;
    bool m_MOVING_24_HOUR_QUOTE_VOLUME_BUYIsSet;
    int32_t m_MOVING_24_HOUR_QUOTE_VOLUME_SELL;
    bool m_MOVING_24_HOUR_QUOTE_VOLUME_SELLIsSet;
    int32_t m_MOVING_24_HOUR_QUOTE_VOLUME_UNKNOWN;
    bool m_MOVING_24_HOUR_QUOTE_VOLUME_UNKNOWNIsSet;
    int32_t m_MOVING_24_HOUR_TOTAL_TRADES;
    bool m_MOVING_24_HOUR_TOTAL_TRADESIsSet;
    int32_t m_MOVING_24_HOUR_TOTAL_TRADES_BUY;
    bool m_MOVING_24_HOUR_TOTAL_TRADES_BUYIsSet;
    int32_t m_MOVING_24_HOUR_TOTAL_TRADES_SELL;
    bool m_MOVING_24_HOUR_TOTAL_TRADES_SELLIsSet;
    int32_t m_MOVING_24_HOUR_TOTAL_TRADES_UNKNOWN;
    bool m_MOVING_24_HOUR_TOTAL_TRADES_UNKNOWNIsSet;
    int32_t m_MOVING_24_HOUR_VOLUME;
    bool m_MOVING_24_HOUR_VOLUMEIsSet;
    int32_t m_MOVING_24_HOUR_VOLUME_BUY;
    bool m_MOVING_24_HOUR_VOLUME_BUYIsSet;
    int32_t m_MOVING_24_HOUR_VOLUME_SELL;
    bool m_MOVING_24_HOUR_VOLUME_SELLIsSet;
    int32_t m_MOVING_24_HOUR_VOLUME_UNKNOWN;
    bool m_MOVING_24_HOUR_VOLUME_UNKNOWNIsSet;
    int32_t m_MOVING_30_DAY_HIGH;
    bool m_MOVING_30_DAY_HIGHIsSet;
    int32_t m_MOVING_30_DAY_LOW;
    bool m_MOVING_30_DAY_LOWIsSet;
    int32_t m_MOVING_30_DAY_OPEN;
    bool m_MOVING_30_DAY_OPENIsSet;
    int32_t m_MOVING_30_DAY_QUOTE_VOLUME;
    bool m_MOVING_30_DAY_QUOTE_VOLUMEIsSet;
    int32_t m_MOVING_30_DAY_QUOTE_VOLUME_BUY;
    bool m_MOVING_30_DAY_QUOTE_VOLUME_BUYIsSet;
    int32_t m_MOVING_30_DAY_QUOTE_VOLUME_SELL;
    bool m_MOVING_30_DAY_QUOTE_VOLUME_SELLIsSet;
    int32_t m_MOVING_30_DAY_QUOTE_VOLUME_UNKNOWN;
    bool m_MOVING_30_DAY_QUOTE_VOLUME_UNKNOWNIsSet;
    int32_t m_MOVING_30_DAY_TOTAL_TRADES;
    bool m_MOVING_30_DAY_TOTAL_TRADESIsSet;
    int32_t m_MOVING_30_DAY_TOTAL_TRADES_BUY;
    bool m_MOVING_30_DAY_TOTAL_TRADES_BUYIsSet;
    int32_t m_MOVING_30_DAY_TOTAL_TRADES_SELL;
    bool m_MOVING_30_DAY_TOTAL_TRADES_SELLIsSet;
    int32_t m_MOVING_30_DAY_TOTAL_TRADES_UNKNOWN;
    bool m_MOVING_30_DAY_TOTAL_TRADES_UNKNOWNIsSet;
    int32_t m_MOVING_30_DAY_VOLUME;
    bool m_MOVING_30_DAY_VOLUMEIsSet;
    int32_t m_MOVING_30_DAY_VOLUME_BUY;
    bool m_MOVING_30_DAY_VOLUME_BUYIsSet;
    int32_t m_MOVING_30_DAY_VOLUME_SELL;
    bool m_MOVING_30_DAY_VOLUME_SELLIsSet;
    int32_t m_MOVING_30_DAY_VOLUME_UNKNOWN;
    bool m_MOVING_30_DAY_VOLUME_UNKNOWNIsSet;
    int32_t m_MOVING_365_DAY_HIGH;
    bool m_MOVING_365_DAY_HIGHIsSet;
    int32_t m_MOVING_365_DAY_LOW;
    bool m_MOVING_365_DAY_LOWIsSet;
    int32_t m_MOVING_365_DAY_OPEN;
    bool m_MOVING_365_DAY_OPENIsSet;
    int32_t m_MOVING_365_DAY_QUOTE_VOLUME;
    bool m_MOVING_365_DAY_QUOTE_VOLUMEIsSet;
    int32_t m_MOVING_365_DAY_QUOTE_VOLUME_BUY;
    bool m_MOVING_365_DAY_QUOTE_VOLUME_BUYIsSet;
    int32_t m_MOVING_365_DAY_QUOTE_VOLUME_SELL;
    bool m_MOVING_365_DAY_QUOTE_VOLUME_SELLIsSet;
    int32_t m_MOVING_365_DAY_QUOTE_VOLUME_UNKNOWN;
    bool m_MOVING_365_DAY_QUOTE_VOLUME_UNKNOWNIsSet;
    int32_t m_MOVING_365_DAY_TOTAL_TRADES;
    bool m_MOVING_365_DAY_TOTAL_TRADESIsSet;
    int32_t m_MOVING_365_DAY_TOTAL_TRADES_BUY;
    bool m_MOVING_365_DAY_TOTAL_TRADES_BUYIsSet;
    int32_t m_MOVING_365_DAY_TOTAL_TRADES_SELL;
    bool m_MOVING_365_DAY_TOTAL_TRADES_SELLIsSet;
    int32_t m_MOVING_365_DAY_TOTAL_TRADES_UNKNOWN;
    bool m_MOVING_365_DAY_TOTAL_TRADES_UNKNOWNIsSet;
    int32_t m_MOVING_365_DAY_VOLUME;
    bool m_MOVING_365_DAY_VOLUMEIsSet;
    int32_t m_MOVING_365_DAY_VOLUME_BUY;
    bool m_MOVING_365_DAY_VOLUME_BUYIsSet;
    int32_t m_MOVING_365_DAY_VOLUME_SELL;
    bool m_MOVING_365_DAY_VOLUME_SELLIsSet;
    int32_t m_MOVING_365_DAY_VOLUME_UNKNOWN;
    bool m_MOVING_365_DAY_VOLUME_UNKNOWNIsSet;
    int32_t m_MOVING_7_DAY_HIGH;
    bool m_MOVING_7_DAY_HIGHIsSet;
    int32_t m_MOVING_7_DAY_LOW;
    bool m_MOVING_7_DAY_LOWIsSet;
    int32_t m_MOVING_7_DAY_OPEN;
    bool m_MOVING_7_DAY_OPENIsSet;
    int32_t m_MOVING_7_DAY_QUOTE_VOLUME;
    bool m_MOVING_7_DAY_QUOTE_VOLUMEIsSet;
    int32_t m_MOVING_7_DAY_QUOTE_VOLUME_BUY;
    bool m_MOVING_7_DAY_QUOTE_VOLUME_BUYIsSet;
    int32_t m_MOVING_7_DAY_QUOTE_VOLUME_SELL;
    bool m_MOVING_7_DAY_QUOTE_VOLUME_SELLIsSet;
    int32_t m_MOVING_7_DAY_QUOTE_VOLUME_UNKNOWN;
    bool m_MOVING_7_DAY_QUOTE_VOLUME_UNKNOWNIsSet;
    int32_t m_MOVING_7_DAY_TOTAL_TRADES;
    bool m_MOVING_7_DAY_TOTAL_TRADESIsSet;
    int32_t m_MOVING_7_DAY_TOTAL_TRADES_BUY;
    bool m_MOVING_7_DAY_TOTAL_TRADES_BUYIsSet;
    int32_t m_MOVING_7_DAY_TOTAL_TRADES_SELL;
    bool m_MOVING_7_DAY_TOTAL_TRADES_SELLIsSet;
    int32_t m_MOVING_7_DAY_TOTAL_TRADES_UNKNOWN;
    bool m_MOVING_7_DAY_TOTAL_TRADES_UNKNOWNIsSet;
    int32_t m_MOVING_7_DAY_VOLUME;
    bool m_MOVING_7_DAY_VOLUMEIsSet;
    int32_t m_MOVING_7_DAY_VOLUME_BUY;
    bool m_MOVING_7_DAY_VOLUME_BUYIsSet;
    int32_t m_MOVING_7_DAY_VOLUME_SELL;
    bool m_MOVING_7_DAY_VOLUME_SELLIsSet;
    int32_t m_MOVING_7_DAY_VOLUME_UNKNOWN;
    bool m_MOVING_7_DAY_VOLUME_UNKNOWNIsSet;
    int32_t m_MOVING_90_DAY_HIGH;
    bool m_MOVING_90_DAY_HIGHIsSet;
    int32_t m_MOVING_90_DAY_LOW;
    bool m_MOVING_90_DAY_LOWIsSet;
    int32_t m_MOVING_90_DAY_OPEN;
    bool m_MOVING_90_DAY_OPENIsSet;
    int32_t m_MOVING_90_DAY_QUOTE_VOLUME;
    bool m_MOVING_90_DAY_QUOTE_VOLUMEIsSet;
    int32_t m_MOVING_90_DAY_QUOTE_VOLUME_BUY;
    bool m_MOVING_90_DAY_QUOTE_VOLUME_BUYIsSet;
    int32_t m_MOVING_90_DAY_QUOTE_VOLUME_SELL;
    bool m_MOVING_90_DAY_QUOTE_VOLUME_SELLIsSet;
    int32_t m_MOVING_90_DAY_QUOTE_VOLUME_UNKNOWN;
    bool m_MOVING_90_DAY_QUOTE_VOLUME_UNKNOWNIsSet;
    int32_t m_MOVING_90_DAY_TOTAL_TRADES;
    bool m_MOVING_90_DAY_TOTAL_TRADESIsSet;
    int32_t m_MOVING_90_DAY_TOTAL_TRADES_BUY;
    bool m_MOVING_90_DAY_TOTAL_TRADES_BUYIsSet;
    int32_t m_MOVING_90_DAY_TOTAL_TRADES_SELL;
    bool m_MOVING_90_DAY_TOTAL_TRADES_SELLIsSet;
    int32_t m_MOVING_90_DAY_TOTAL_TRADES_UNKNOWN;
    bool m_MOVING_90_DAY_TOTAL_TRADES_UNKNOWNIsSet;
    int32_t m_MOVING_90_DAY_VOLUME;
    bool m_MOVING_90_DAY_VOLUMEIsSet;
    int32_t m_MOVING_90_DAY_VOLUME_BUY;
    bool m_MOVING_90_DAY_VOLUME_BUYIsSet;
    int32_t m_MOVING_90_DAY_VOLUME_SELL;
    bool m_MOVING_90_DAY_VOLUME_SELLIsSet;
    int32_t m_MOVING_90_DAY_VOLUME_UNKNOWN;
    bool m_MOVING_90_DAY_VOLUME_UNKNOWNIsSet;
    int32_t m_PRICE;
    bool m_PRICEIsSet;
    utility::string_t m_PRICE_FLAG;
    bool m_PRICE_FLAGIsSet;
    int32_t m_PRICE_LAST_UPDATE_TS;
    bool m_PRICE_LAST_UPDATE_TSIsSet;
    utility::string_t m_QUOTE;
    bool m_QUOTEIsSet;
    int32_t m_TOP_ASK_LAST_UPDATE_TS;
    bool m_TOP_ASK_LAST_UPDATE_TSIsSet;
    int32_t m_TOP_ASK_PRICE;
    bool m_TOP_ASK_PRICEIsSet;
    int32_t m_TOP_ASK_QUANTITY;
    bool m_TOP_ASK_QUANTITYIsSet;
    int32_t m_TOP_BID_LAST_UPDATE_TS;
    bool m_TOP_BID_LAST_UPDATE_TSIsSet;
    int32_t m_TOP_BID_PRICE;
    bool m_TOP_BID_PRICEIsSet;
    int32_t m_TOP_BID_QUANTITY;
    bool m_TOP_BID_QUANTITYIsSet;
    utility::string_t m_TYPE;
    bool m_TYPEIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_SPOT_INSTRUMENT_MARKET_DATA_H_ */
