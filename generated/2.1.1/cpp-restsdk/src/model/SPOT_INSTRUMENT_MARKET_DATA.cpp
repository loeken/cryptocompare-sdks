/**
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 * CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: data@cryptocompare.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.3.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/SPOT_INSTRUMENT_MARKET_DATA.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



SPOT_INSTRUMENT_MARKET_DATA::SPOT_INSTRUMENT_MARKET_DATA()
{
    m_BASE = utility::conversions::to_string_t("");
    m_BASEIsSet = false;
    m_CCSEQ = 0;
    m_CCSEQIsSet = false;
    m_CURRENT_DAY_HIGH = 0;
    m_CURRENT_DAY_HIGHIsSet = false;
    m_CURRENT_DAY_LOW = 0;
    m_CURRENT_DAY_LOWIsSet = false;
    m_CURRENT_DAY_OPEN = 0;
    m_CURRENT_DAY_OPENIsSet = false;
    m_CURRENT_DAY_QUOTE_VOLUME = 0;
    m_CURRENT_DAY_QUOTE_VOLUMEIsSet = false;
    m_CURRENT_DAY_QUOTE_VOLUME_BUY = 0;
    m_CURRENT_DAY_QUOTE_VOLUME_BUYIsSet = false;
    m_CURRENT_DAY_QUOTE_VOLUME_SELL = 0;
    m_CURRENT_DAY_QUOTE_VOLUME_SELLIsSet = false;
    m_CURRENT_DAY_QUOTE_VOLUME_UNKNOWN = 0;
    m_CURRENT_DAY_QUOTE_VOLUME_UNKNOWNIsSet = false;
    m_CURRENT_DAY_TOTAL_TRADES = 0;
    m_CURRENT_DAY_TOTAL_TRADESIsSet = false;
    m_CURRENT_DAY_TOTAL_TRADES_BUY = 0;
    m_CURRENT_DAY_TOTAL_TRADES_BUYIsSet = false;
    m_CURRENT_DAY_TOTAL_TRADES_SELL = 0;
    m_CURRENT_DAY_TOTAL_TRADES_SELLIsSet = false;
    m_CURRENT_DAY_TOTAL_TRADES_UNKNOWN = 0;
    m_CURRENT_DAY_TOTAL_TRADES_UNKNOWNIsSet = false;
    m_CURRENT_DAY_VOLUME = 0;
    m_CURRENT_DAY_VOLUMEIsSet = false;
    m_CURRENT_DAY_VOLUME_BUY = 0;
    m_CURRENT_DAY_VOLUME_BUYIsSet = false;
    m_CURRENT_DAY_VOLUME_SELL = 0;
    m_CURRENT_DAY_VOLUME_SELLIsSet = false;
    m_CURRENT_DAY_VOLUME_UNKNOWN = 0;
    m_CURRENT_DAY_VOLUME_UNKNOWNIsSet = false;
    m_CURRENT_HOUR_HIGH = 0;
    m_CURRENT_HOUR_HIGHIsSet = false;
    m_CURRENT_HOUR_LOW = 0;
    m_CURRENT_HOUR_LOWIsSet = false;
    m_CURRENT_HOUR_OPEN = 0;
    m_CURRENT_HOUR_OPENIsSet = false;
    m_CURRENT_HOUR_QUOTE_VOLUME = 0;
    m_CURRENT_HOUR_QUOTE_VOLUMEIsSet = false;
    m_CURRENT_HOUR_QUOTE_VOLUME_BUY = 0;
    m_CURRENT_HOUR_QUOTE_VOLUME_BUYIsSet = false;
    m_CURRENT_HOUR_QUOTE_VOLUME_SELL = 0;
    m_CURRENT_HOUR_QUOTE_VOLUME_SELLIsSet = false;
    m_CURRENT_HOUR_QUOTE_VOLUME_UNKNOWN = 0;
    m_CURRENT_HOUR_QUOTE_VOLUME_UNKNOWNIsSet = false;
    m_CURRENT_HOUR_TOTAL_TRADES = 0;
    m_CURRENT_HOUR_TOTAL_TRADESIsSet = false;
    m_CURRENT_HOUR_TOTAL_TRADES_BUY = 0;
    m_CURRENT_HOUR_TOTAL_TRADES_BUYIsSet = false;
    m_CURRENT_HOUR_TOTAL_TRADES_SELL = 0;
    m_CURRENT_HOUR_TOTAL_TRADES_SELLIsSet = false;
    m_CURRENT_HOUR_TOTAL_TRADES_UNKNOWN = 0;
    m_CURRENT_HOUR_TOTAL_TRADES_UNKNOWNIsSet = false;
    m_CURRENT_HOUR_VOLUME = 0;
    m_CURRENT_HOUR_VOLUMEIsSet = false;
    m_CURRENT_HOUR_VOLUME_BUY = 0;
    m_CURRENT_HOUR_VOLUME_BUYIsSet = false;
    m_CURRENT_HOUR_VOLUME_SELL = 0;
    m_CURRENT_HOUR_VOLUME_SELLIsSet = false;
    m_CURRENT_HOUR_VOLUME_UNKNOWN = 0;
    m_CURRENT_HOUR_VOLUME_UNKNOWNIsSet = false;
    m_CURRENT_MONTH_HIGH = 0;
    m_CURRENT_MONTH_HIGHIsSet = false;
    m_CURRENT_MONTH_LOW = 0;
    m_CURRENT_MONTH_LOWIsSet = false;
    m_CURRENT_MONTH_OPEN = 0;
    m_CURRENT_MONTH_OPENIsSet = false;
    m_CURRENT_MONTH_QUOTE_VOLUME = 0;
    m_CURRENT_MONTH_QUOTE_VOLUMEIsSet = false;
    m_CURRENT_MONTH_QUOTE_VOLUME_BUY = 0;
    m_CURRENT_MONTH_QUOTE_VOLUME_BUYIsSet = false;
    m_CURRENT_MONTH_QUOTE_VOLUME_SELL = 0;
    m_CURRENT_MONTH_QUOTE_VOLUME_SELLIsSet = false;
    m_CURRENT_MONTH_QUOTE_VOLUME_UNKNOWN = 0;
    m_CURRENT_MONTH_QUOTE_VOLUME_UNKNOWNIsSet = false;
    m_CURRENT_MONTH_TOTAL_TRADES = 0;
    m_CURRENT_MONTH_TOTAL_TRADESIsSet = false;
    m_CURRENT_MONTH_TOTAL_TRADES_BUY = 0;
    m_CURRENT_MONTH_TOTAL_TRADES_BUYIsSet = false;
    m_CURRENT_MONTH_TOTAL_TRADES_SELL = 0;
    m_CURRENT_MONTH_TOTAL_TRADES_SELLIsSet = false;
    m_CURRENT_MONTH_TOTAL_TRADES_UNKNOWN = 0;
    m_CURRENT_MONTH_TOTAL_TRADES_UNKNOWNIsSet = false;
    m_CURRENT_MONTH_VOLUME = 0;
    m_CURRENT_MONTH_VOLUMEIsSet = false;
    m_CURRENT_MONTH_VOLUME_BUY = 0;
    m_CURRENT_MONTH_VOLUME_BUYIsSet = false;
    m_CURRENT_MONTH_VOLUME_SELL = 0;
    m_CURRENT_MONTH_VOLUME_SELLIsSet = false;
    m_CURRENT_MONTH_VOLUME_UNKNOWN = 0;
    m_CURRENT_MONTH_VOLUME_UNKNOWNIsSet = false;
    m_CURRENT_WEEK_HIGH = 0;
    m_CURRENT_WEEK_HIGHIsSet = false;
    m_CURRENT_WEEK_LOW = 0;
    m_CURRENT_WEEK_LOWIsSet = false;
    m_CURRENT_WEEK_OPEN = 0;
    m_CURRENT_WEEK_OPENIsSet = false;
    m_CURRENT_WEEK_QUOTE_VOLUME = 0;
    m_CURRENT_WEEK_QUOTE_VOLUMEIsSet = false;
    m_CURRENT_WEEK_QUOTE_VOLUME_BUY = 0;
    m_CURRENT_WEEK_QUOTE_VOLUME_BUYIsSet = false;
    m_CURRENT_WEEK_QUOTE_VOLUME_SELL = 0;
    m_CURRENT_WEEK_QUOTE_VOLUME_SELLIsSet = false;
    m_CURRENT_WEEK_QUOTE_VOLUME_UNKNOWN = 0;
    m_CURRENT_WEEK_QUOTE_VOLUME_UNKNOWNIsSet = false;
    m_CURRENT_WEEK_TOTAL_TRADES = 0;
    m_CURRENT_WEEK_TOTAL_TRADESIsSet = false;
    m_CURRENT_WEEK_TOTAL_TRADES_BUY = 0;
    m_CURRENT_WEEK_TOTAL_TRADES_BUYIsSet = false;
    m_CURRENT_WEEK_TOTAL_TRADES_SELL = 0;
    m_CURRENT_WEEK_TOTAL_TRADES_SELLIsSet = false;
    m_CURRENT_WEEK_TOTAL_TRADES_UNKNOWN = 0;
    m_CURRENT_WEEK_TOTAL_TRADES_UNKNOWNIsSet = false;
    m_CURRENT_WEEK_VOLUME = 0;
    m_CURRENT_WEEK_VOLUMEIsSet = false;
    m_CURRENT_WEEK_VOLUME_BUY = 0;
    m_CURRENT_WEEK_VOLUME_BUYIsSet = false;
    m_CURRENT_WEEK_VOLUME_SELL = 0;
    m_CURRENT_WEEK_VOLUME_SELLIsSet = false;
    m_CURRENT_WEEK_VOLUME_UNKNOWN = 0;
    m_CURRENT_WEEK_VOLUME_UNKNOWNIsSet = false;
    m_CURRENT_YEAR_HIGH = 0;
    m_CURRENT_YEAR_HIGHIsSet = false;
    m_CURRENT_YEAR_LOW = 0;
    m_CURRENT_YEAR_LOWIsSet = false;
    m_CURRENT_YEAR_OPEN = 0;
    m_CURRENT_YEAR_OPENIsSet = false;
    m_CURRENT_YEAR_QUOTE_VOLUME = 0;
    m_CURRENT_YEAR_QUOTE_VOLUMEIsSet = false;
    m_CURRENT_YEAR_QUOTE_VOLUME_BUY = 0;
    m_CURRENT_YEAR_QUOTE_VOLUME_BUYIsSet = false;
    m_CURRENT_YEAR_QUOTE_VOLUME_SELL = 0;
    m_CURRENT_YEAR_QUOTE_VOLUME_SELLIsSet = false;
    m_CURRENT_YEAR_QUOTE_VOLUME_UNKNOWN = 0;
    m_CURRENT_YEAR_QUOTE_VOLUME_UNKNOWNIsSet = false;
    m_CURRENT_YEAR_TOTAL_TRADES = 0;
    m_CURRENT_YEAR_TOTAL_TRADESIsSet = false;
    m_CURRENT_YEAR_TOTAL_TRADES_BUY = 0;
    m_CURRENT_YEAR_TOTAL_TRADES_BUYIsSet = false;
    m_CURRENT_YEAR_TOTAL_TRADES_SELL = 0;
    m_CURRENT_YEAR_TOTAL_TRADES_SELLIsSet = false;
    m_CURRENT_YEAR_TOTAL_TRADES_UNKNOWN = 0;
    m_CURRENT_YEAR_TOTAL_TRADES_UNKNOWNIsSet = false;
    m_CURRENT_YEAR_VOLUME = 0;
    m_CURRENT_YEAR_VOLUMEIsSet = false;
    m_CURRENT_YEAR_VOLUME_BUY = 0;
    m_CURRENT_YEAR_VOLUME_BUYIsSet = false;
    m_CURRENT_YEAR_VOLUME_SELL = 0;
    m_CURRENT_YEAR_VOLUME_SELLIsSet = false;
    m_CURRENT_YEAR_VOLUME_UNKNOWN = 0;
    m_CURRENT_YEAR_VOLUME_UNKNOWNIsSet = false;
    m_INSTRUMENT = utility::conversions::to_string_t("");
    m_INSTRUMENTIsSet = false;
    m_LAST_PROCESSED_TRADE_CCSEQ = utility::conversions::to_string_t("");
    m_LAST_PROCESSED_TRADE_CCSEQIsSet = false;
    m_LAST_PROCESSED_TRADE_PRICE = 0;
    m_LAST_PROCESSED_TRADE_PRICEIsSet = false;
    m_LAST_PROCESSED_TRADE_QUANTITY = 0;
    m_LAST_PROCESSED_TRADE_QUANTITYIsSet = false;
    m_LAST_PROCESSED_TRADE_QUOTE_QUANTITY = 0;
    m_LAST_PROCESSED_TRADE_QUOTE_QUANTITYIsSet = false;
    m_LAST_PROCESSED_TRADE_SIDE = utility::conversions::to_string_t("");
    m_LAST_PROCESSED_TRADE_SIDEIsSet = false;
    m_LAST_PROCESSED_TRADE_TS = 0;
    m_LAST_PROCESSED_TRADE_TSIsSet = false;
    m_LAST_TRADE_CCSEQ = utility::conversions::to_string_t("");
    m_LAST_TRADE_CCSEQIsSet = false;
    m_LAST_TRADE_ID = utility::conversions::to_string_t("");
    m_LAST_TRADE_IDIsSet = false;
    m_LAST_TRADE_QUANTITY = 0;
    m_LAST_TRADE_QUANTITYIsSet = false;
    m_LAST_TRADE_QUOTE_QUANTITY = 0;
    m_LAST_TRADE_QUOTE_QUANTITYIsSet = false;
    m_LAST_TRADE_SIDE = utility::conversions::to_string_t("");
    m_LAST_TRADE_SIDEIsSet = false;
    m_LIFETIME_FIRST_TRADE_TS = 0;
    m_LIFETIME_FIRST_TRADE_TSIsSet = false;
    m_LIFETIME_HIGH = 0;
    m_LIFETIME_HIGHIsSet = false;
    m_LIFETIME_HIGH_TS = 0;
    m_LIFETIME_HIGH_TSIsSet = false;
    m_LIFETIME_LOW = 0;
    m_LIFETIME_LOWIsSet = false;
    m_LIFETIME_LOW_TS = 0;
    m_LIFETIME_LOW_TSIsSet = false;
    m_LIFETIME_OPEN = 0;
    m_LIFETIME_OPENIsSet = false;
    m_LIFETIME_QUOTE_VOLUME = 0;
    m_LIFETIME_QUOTE_VOLUMEIsSet = false;
    m_LIFETIME_QUOTE_VOLUME_BUY = 0;
    m_LIFETIME_QUOTE_VOLUME_BUYIsSet = false;
    m_LIFETIME_QUOTE_VOLUME_SELL = 0;
    m_LIFETIME_QUOTE_VOLUME_SELLIsSet = false;
    m_LIFETIME_QUOTE_VOLUME_UNKNOWN = 0;
    m_LIFETIME_QUOTE_VOLUME_UNKNOWNIsSet = false;
    m_LIFETIME_TOTAL_TRADES = 0;
    m_LIFETIME_TOTAL_TRADESIsSet = false;
    m_LIFETIME_TOTAL_TRADES_BUY = 0;
    m_LIFETIME_TOTAL_TRADES_BUYIsSet = false;
    m_LIFETIME_TOTAL_TRADES_SELL = 0;
    m_LIFETIME_TOTAL_TRADES_SELLIsSet = false;
    m_LIFETIME_TOTAL_TRADES_UNKNOWN = 0;
    m_LIFETIME_TOTAL_TRADES_UNKNOWNIsSet = false;
    m_LIFETIME_VOLUME = 0;
    m_LIFETIME_VOLUMEIsSet = false;
    m_LIFETIME_VOLUME_BUY = 0;
    m_LIFETIME_VOLUME_BUYIsSet = false;
    m_LIFETIME_VOLUME_SELL = 0;
    m_LIFETIME_VOLUME_SELLIsSet = false;
    m_LIFETIME_VOLUME_UNKNOWN = 0;
    m_LIFETIME_VOLUME_UNKNOWNIsSet = false;
    m_MAPPED_INSTRUMENT = utility::conversions::to_string_t("");
    m_MAPPED_INSTRUMENTIsSet = false;
    m_MARKET = utility::conversions::to_string_t("");
    m_MARKETIsSet = false;
    m_MOVING_180_DAY_HIGH = 0;
    m_MOVING_180_DAY_HIGHIsSet = false;
    m_MOVING_180_DAY_LOW = 0;
    m_MOVING_180_DAY_LOWIsSet = false;
    m_MOVING_180_DAY_OPEN = 0;
    m_MOVING_180_DAY_OPENIsSet = false;
    m_MOVING_180_DAY_QUOTE_VOLUME = 0;
    m_MOVING_180_DAY_QUOTE_VOLUMEIsSet = false;
    m_MOVING_180_DAY_QUOTE_VOLUME_BUY = 0;
    m_MOVING_180_DAY_QUOTE_VOLUME_BUYIsSet = false;
    m_MOVING_180_DAY_QUOTE_VOLUME_SELL = 0;
    m_MOVING_180_DAY_QUOTE_VOLUME_SELLIsSet = false;
    m_MOVING_180_DAY_QUOTE_VOLUME_UNKNOWN = 0;
    m_MOVING_180_DAY_QUOTE_VOLUME_UNKNOWNIsSet = false;
    m_MOVING_180_DAY_TOTAL_TRADES = 0;
    m_MOVING_180_DAY_TOTAL_TRADESIsSet = false;
    m_MOVING_180_DAY_TOTAL_TRADES_BUY = 0;
    m_MOVING_180_DAY_TOTAL_TRADES_BUYIsSet = false;
    m_MOVING_180_DAY_TOTAL_TRADES_SELL = 0;
    m_MOVING_180_DAY_TOTAL_TRADES_SELLIsSet = false;
    m_MOVING_180_DAY_TOTAL_TRADES_UNKNOWN = 0;
    m_MOVING_180_DAY_TOTAL_TRADES_UNKNOWNIsSet = false;
    m_MOVING_180_DAY_VOLUME = 0;
    m_MOVING_180_DAY_VOLUMEIsSet = false;
    m_MOVING_180_DAY_VOLUME_BUY = 0;
    m_MOVING_180_DAY_VOLUME_BUYIsSet = false;
    m_MOVING_180_DAY_VOLUME_SELL = 0;
    m_MOVING_180_DAY_VOLUME_SELLIsSet = false;
    m_MOVING_180_DAY_VOLUME_UNKNOWN = 0;
    m_MOVING_180_DAY_VOLUME_UNKNOWNIsSet = false;
    m_MOVING_24_HOUR_HIGH = 0;
    m_MOVING_24_HOUR_HIGHIsSet = false;
    m_MOVING_24_HOUR_LOW = 0;
    m_MOVING_24_HOUR_LOWIsSet = false;
    m_MOVING_24_HOUR_OPEN = 0;
    m_MOVING_24_HOUR_OPENIsSet = false;
    m_MOVING_24_HOUR_QUOTE_VOLUME = 0;
    m_MOVING_24_HOUR_QUOTE_VOLUMEIsSet = false;
    m_MOVING_24_HOUR_QUOTE_VOLUME_BUY = 0;
    m_MOVING_24_HOUR_QUOTE_VOLUME_BUYIsSet = false;
    m_MOVING_24_HOUR_QUOTE_VOLUME_SELL = 0;
    m_MOVING_24_HOUR_QUOTE_VOLUME_SELLIsSet = false;
    m_MOVING_24_HOUR_QUOTE_VOLUME_UNKNOWN = 0;
    m_MOVING_24_HOUR_QUOTE_VOLUME_UNKNOWNIsSet = false;
    m_MOVING_24_HOUR_TOTAL_TRADES = 0;
    m_MOVING_24_HOUR_TOTAL_TRADESIsSet = false;
    m_MOVING_24_HOUR_TOTAL_TRADES_BUY = 0;
    m_MOVING_24_HOUR_TOTAL_TRADES_BUYIsSet = false;
    m_MOVING_24_HOUR_TOTAL_TRADES_SELL = 0;
    m_MOVING_24_HOUR_TOTAL_TRADES_SELLIsSet = false;
    m_MOVING_24_HOUR_TOTAL_TRADES_UNKNOWN = 0;
    m_MOVING_24_HOUR_TOTAL_TRADES_UNKNOWNIsSet = false;
    m_MOVING_24_HOUR_VOLUME = 0;
    m_MOVING_24_HOUR_VOLUMEIsSet = false;
    m_MOVING_24_HOUR_VOLUME_BUY = 0;
    m_MOVING_24_HOUR_VOLUME_BUYIsSet = false;
    m_MOVING_24_HOUR_VOLUME_SELL = 0;
    m_MOVING_24_HOUR_VOLUME_SELLIsSet = false;
    m_MOVING_24_HOUR_VOLUME_UNKNOWN = 0;
    m_MOVING_24_HOUR_VOLUME_UNKNOWNIsSet = false;
    m_MOVING_30_DAY_HIGH = 0;
    m_MOVING_30_DAY_HIGHIsSet = false;
    m_MOVING_30_DAY_LOW = 0;
    m_MOVING_30_DAY_LOWIsSet = false;
    m_MOVING_30_DAY_OPEN = 0;
    m_MOVING_30_DAY_OPENIsSet = false;
    m_MOVING_30_DAY_QUOTE_VOLUME = 0;
    m_MOVING_30_DAY_QUOTE_VOLUMEIsSet = false;
    m_MOVING_30_DAY_QUOTE_VOLUME_BUY = 0;
    m_MOVING_30_DAY_QUOTE_VOLUME_BUYIsSet = false;
    m_MOVING_30_DAY_QUOTE_VOLUME_SELL = 0;
    m_MOVING_30_DAY_QUOTE_VOLUME_SELLIsSet = false;
    m_MOVING_30_DAY_QUOTE_VOLUME_UNKNOWN = 0;
    m_MOVING_30_DAY_QUOTE_VOLUME_UNKNOWNIsSet = false;
    m_MOVING_30_DAY_TOTAL_TRADES = 0;
    m_MOVING_30_DAY_TOTAL_TRADESIsSet = false;
    m_MOVING_30_DAY_TOTAL_TRADES_BUY = 0;
    m_MOVING_30_DAY_TOTAL_TRADES_BUYIsSet = false;
    m_MOVING_30_DAY_TOTAL_TRADES_SELL = 0;
    m_MOVING_30_DAY_TOTAL_TRADES_SELLIsSet = false;
    m_MOVING_30_DAY_TOTAL_TRADES_UNKNOWN = 0;
    m_MOVING_30_DAY_TOTAL_TRADES_UNKNOWNIsSet = false;
    m_MOVING_30_DAY_VOLUME = 0;
    m_MOVING_30_DAY_VOLUMEIsSet = false;
    m_MOVING_30_DAY_VOLUME_BUY = 0;
    m_MOVING_30_DAY_VOLUME_BUYIsSet = false;
    m_MOVING_30_DAY_VOLUME_SELL = 0;
    m_MOVING_30_DAY_VOLUME_SELLIsSet = false;
    m_MOVING_30_DAY_VOLUME_UNKNOWN = 0;
    m_MOVING_30_DAY_VOLUME_UNKNOWNIsSet = false;
    m_MOVING_365_DAY_HIGH = 0;
    m_MOVING_365_DAY_HIGHIsSet = false;
    m_MOVING_365_DAY_LOW = 0;
    m_MOVING_365_DAY_LOWIsSet = false;
    m_MOVING_365_DAY_OPEN = 0;
    m_MOVING_365_DAY_OPENIsSet = false;
    m_MOVING_365_DAY_QUOTE_VOLUME = 0;
    m_MOVING_365_DAY_QUOTE_VOLUMEIsSet = false;
    m_MOVING_365_DAY_QUOTE_VOLUME_BUY = 0;
    m_MOVING_365_DAY_QUOTE_VOLUME_BUYIsSet = false;
    m_MOVING_365_DAY_QUOTE_VOLUME_SELL = 0;
    m_MOVING_365_DAY_QUOTE_VOLUME_SELLIsSet = false;
    m_MOVING_365_DAY_QUOTE_VOLUME_UNKNOWN = 0;
    m_MOVING_365_DAY_QUOTE_VOLUME_UNKNOWNIsSet = false;
    m_MOVING_365_DAY_TOTAL_TRADES = 0;
    m_MOVING_365_DAY_TOTAL_TRADESIsSet = false;
    m_MOVING_365_DAY_TOTAL_TRADES_BUY = 0;
    m_MOVING_365_DAY_TOTAL_TRADES_BUYIsSet = false;
    m_MOVING_365_DAY_TOTAL_TRADES_SELL = 0;
    m_MOVING_365_DAY_TOTAL_TRADES_SELLIsSet = false;
    m_MOVING_365_DAY_TOTAL_TRADES_UNKNOWN = 0;
    m_MOVING_365_DAY_TOTAL_TRADES_UNKNOWNIsSet = false;
    m_MOVING_365_DAY_VOLUME = 0;
    m_MOVING_365_DAY_VOLUMEIsSet = false;
    m_MOVING_365_DAY_VOLUME_BUY = 0;
    m_MOVING_365_DAY_VOLUME_BUYIsSet = false;
    m_MOVING_365_DAY_VOLUME_SELL = 0;
    m_MOVING_365_DAY_VOLUME_SELLIsSet = false;
    m_MOVING_365_DAY_VOLUME_UNKNOWN = 0;
    m_MOVING_365_DAY_VOLUME_UNKNOWNIsSet = false;
    m_MOVING_7_DAY_HIGH = 0;
    m_MOVING_7_DAY_HIGHIsSet = false;
    m_MOVING_7_DAY_LOW = 0;
    m_MOVING_7_DAY_LOWIsSet = false;
    m_MOVING_7_DAY_OPEN = 0;
    m_MOVING_7_DAY_OPENIsSet = false;
    m_MOVING_7_DAY_QUOTE_VOLUME = 0;
    m_MOVING_7_DAY_QUOTE_VOLUMEIsSet = false;
    m_MOVING_7_DAY_QUOTE_VOLUME_BUY = 0;
    m_MOVING_7_DAY_QUOTE_VOLUME_BUYIsSet = false;
    m_MOVING_7_DAY_QUOTE_VOLUME_SELL = 0;
    m_MOVING_7_DAY_QUOTE_VOLUME_SELLIsSet = false;
    m_MOVING_7_DAY_QUOTE_VOLUME_UNKNOWN = 0;
    m_MOVING_7_DAY_QUOTE_VOLUME_UNKNOWNIsSet = false;
    m_MOVING_7_DAY_TOTAL_TRADES = 0;
    m_MOVING_7_DAY_TOTAL_TRADESIsSet = false;
    m_MOVING_7_DAY_TOTAL_TRADES_BUY = 0;
    m_MOVING_7_DAY_TOTAL_TRADES_BUYIsSet = false;
    m_MOVING_7_DAY_TOTAL_TRADES_SELL = 0;
    m_MOVING_7_DAY_TOTAL_TRADES_SELLIsSet = false;
    m_MOVING_7_DAY_TOTAL_TRADES_UNKNOWN = 0;
    m_MOVING_7_DAY_TOTAL_TRADES_UNKNOWNIsSet = false;
    m_MOVING_7_DAY_VOLUME = 0;
    m_MOVING_7_DAY_VOLUMEIsSet = false;
    m_MOVING_7_DAY_VOLUME_BUY = 0;
    m_MOVING_7_DAY_VOLUME_BUYIsSet = false;
    m_MOVING_7_DAY_VOLUME_SELL = 0;
    m_MOVING_7_DAY_VOLUME_SELLIsSet = false;
    m_MOVING_7_DAY_VOLUME_UNKNOWN = 0;
    m_MOVING_7_DAY_VOLUME_UNKNOWNIsSet = false;
    m_MOVING_90_DAY_HIGH = 0;
    m_MOVING_90_DAY_HIGHIsSet = false;
    m_MOVING_90_DAY_LOW = 0;
    m_MOVING_90_DAY_LOWIsSet = false;
    m_MOVING_90_DAY_OPEN = 0;
    m_MOVING_90_DAY_OPENIsSet = false;
    m_MOVING_90_DAY_QUOTE_VOLUME = 0;
    m_MOVING_90_DAY_QUOTE_VOLUMEIsSet = false;
    m_MOVING_90_DAY_QUOTE_VOLUME_BUY = 0;
    m_MOVING_90_DAY_QUOTE_VOLUME_BUYIsSet = false;
    m_MOVING_90_DAY_QUOTE_VOLUME_SELL = 0;
    m_MOVING_90_DAY_QUOTE_VOLUME_SELLIsSet = false;
    m_MOVING_90_DAY_QUOTE_VOLUME_UNKNOWN = 0;
    m_MOVING_90_DAY_QUOTE_VOLUME_UNKNOWNIsSet = false;
    m_MOVING_90_DAY_TOTAL_TRADES = 0;
    m_MOVING_90_DAY_TOTAL_TRADESIsSet = false;
    m_MOVING_90_DAY_TOTAL_TRADES_BUY = 0;
    m_MOVING_90_DAY_TOTAL_TRADES_BUYIsSet = false;
    m_MOVING_90_DAY_TOTAL_TRADES_SELL = 0;
    m_MOVING_90_DAY_TOTAL_TRADES_SELLIsSet = false;
    m_MOVING_90_DAY_TOTAL_TRADES_UNKNOWN = 0;
    m_MOVING_90_DAY_TOTAL_TRADES_UNKNOWNIsSet = false;
    m_MOVING_90_DAY_VOLUME = 0;
    m_MOVING_90_DAY_VOLUMEIsSet = false;
    m_MOVING_90_DAY_VOLUME_BUY = 0;
    m_MOVING_90_DAY_VOLUME_BUYIsSet = false;
    m_MOVING_90_DAY_VOLUME_SELL = 0;
    m_MOVING_90_DAY_VOLUME_SELLIsSet = false;
    m_MOVING_90_DAY_VOLUME_UNKNOWN = 0;
    m_MOVING_90_DAY_VOLUME_UNKNOWNIsSet = false;
    m_PRICE = 0;
    m_PRICEIsSet = false;
    m_PRICE_FLAG = utility::conversions::to_string_t("");
    m_PRICE_FLAGIsSet = false;
    m_PRICE_LAST_UPDATE_TS = 0;
    m_PRICE_LAST_UPDATE_TSIsSet = false;
    m_QUOTE = utility::conversions::to_string_t("");
    m_QUOTEIsSet = false;
    m_TOP_ASK_LAST_UPDATE_TS = 0;
    m_TOP_ASK_LAST_UPDATE_TSIsSet = false;
    m_TOP_ASK_PRICE = 0;
    m_TOP_ASK_PRICEIsSet = false;
    m_TOP_ASK_QUANTITY = 0;
    m_TOP_ASK_QUANTITYIsSet = false;
    m_TOP_BID_LAST_UPDATE_TS = 0;
    m_TOP_BID_LAST_UPDATE_TSIsSet = false;
    m_TOP_BID_PRICE = 0;
    m_TOP_BID_PRICEIsSet = false;
    m_TOP_BID_QUANTITY = 0;
    m_TOP_BID_QUANTITYIsSet = false;
    m_TYPE = utility::conversions::to_string_t("");
    m_TYPEIsSet = false;
}

SPOT_INSTRUMENT_MARKET_DATA::~SPOT_INSTRUMENT_MARKET_DATA()
{
}

void SPOT_INSTRUMENT_MARKET_DATA::validate()
{
    // TODO: implement validation
}

web::json::value SPOT_INSTRUMENT_MARKET_DATA::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_BASEIsSet)
    {
        val[utility::conversions::to_string_t(U("BASE"))] = ModelBase::toJson(m_BASE);
    }
    if(m_CCSEQIsSet)
    {
        val[utility::conversions::to_string_t(U("CCSEQ"))] = ModelBase::toJson(m_CCSEQ);
    }
    if(m_CURRENT_DAY_HIGHIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_DAY_HIGH"))] = ModelBase::toJson(m_CURRENT_DAY_HIGH);
    }
    if(m_CURRENT_DAY_LOWIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_DAY_LOW"))] = ModelBase::toJson(m_CURRENT_DAY_LOW);
    }
    if(m_CURRENT_DAY_OPENIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_DAY_OPEN"))] = ModelBase::toJson(m_CURRENT_DAY_OPEN);
    }
    if(m_CURRENT_DAY_QUOTE_VOLUMEIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_DAY_QUOTE_VOLUME"))] = ModelBase::toJson(m_CURRENT_DAY_QUOTE_VOLUME);
    }
    if(m_CURRENT_DAY_QUOTE_VOLUME_BUYIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_DAY_QUOTE_VOLUME_BUY"))] = ModelBase::toJson(m_CURRENT_DAY_QUOTE_VOLUME_BUY);
    }
    if(m_CURRENT_DAY_QUOTE_VOLUME_SELLIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_DAY_QUOTE_VOLUME_SELL"))] = ModelBase::toJson(m_CURRENT_DAY_QUOTE_VOLUME_SELL);
    }
    if(m_CURRENT_DAY_QUOTE_VOLUME_UNKNOWNIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_DAY_QUOTE_VOLUME_UNKNOWN"))] = ModelBase::toJson(m_CURRENT_DAY_QUOTE_VOLUME_UNKNOWN);
    }
    if(m_CURRENT_DAY_TOTAL_TRADESIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_DAY_TOTAL_TRADES"))] = ModelBase::toJson(m_CURRENT_DAY_TOTAL_TRADES);
    }
    if(m_CURRENT_DAY_TOTAL_TRADES_BUYIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_DAY_TOTAL_TRADES_BUY"))] = ModelBase::toJson(m_CURRENT_DAY_TOTAL_TRADES_BUY);
    }
    if(m_CURRENT_DAY_TOTAL_TRADES_SELLIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_DAY_TOTAL_TRADES_SELL"))] = ModelBase::toJson(m_CURRENT_DAY_TOTAL_TRADES_SELL);
    }
    if(m_CURRENT_DAY_TOTAL_TRADES_UNKNOWNIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_DAY_TOTAL_TRADES_UNKNOWN"))] = ModelBase::toJson(m_CURRENT_DAY_TOTAL_TRADES_UNKNOWN);
    }
    if(m_CURRENT_DAY_VOLUMEIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_DAY_VOLUME"))] = ModelBase::toJson(m_CURRENT_DAY_VOLUME);
    }
    if(m_CURRENT_DAY_VOLUME_BUYIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_DAY_VOLUME_BUY"))] = ModelBase::toJson(m_CURRENT_DAY_VOLUME_BUY);
    }
    if(m_CURRENT_DAY_VOLUME_SELLIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_DAY_VOLUME_SELL"))] = ModelBase::toJson(m_CURRENT_DAY_VOLUME_SELL);
    }
    if(m_CURRENT_DAY_VOLUME_UNKNOWNIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_DAY_VOLUME_UNKNOWN"))] = ModelBase::toJson(m_CURRENT_DAY_VOLUME_UNKNOWN);
    }
    if(m_CURRENT_HOUR_HIGHIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_HOUR_HIGH"))] = ModelBase::toJson(m_CURRENT_HOUR_HIGH);
    }
    if(m_CURRENT_HOUR_LOWIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_HOUR_LOW"))] = ModelBase::toJson(m_CURRENT_HOUR_LOW);
    }
    if(m_CURRENT_HOUR_OPENIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_HOUR_OPEN"))] = ModelBase::toJson(m_CURRENT_HOUR_OPEN);
    }
    if(m_CURRENT_HOUR_QUOTE_VOLUMEIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_HOUR_QUOTE_VOLUME"))] = ModelBase::toJson(m_CURRENT_HOUR_QUOTE_VOLUME);
    }
    if(m_CURRENT_HOUR_QUOTE_VOLUME_BUYIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_HOUR_QUOTE_VOLUME_BUY"))] = ModelBase::toJson(m_CURRENT_HOUR_QUOTE_VOLUME_BUY);
    }
    if(m_CURRENT_HOUR_QUOTE_VOLUME_SELLIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_HOUR_QUOTE_VOLUME_SELL"))] = ModelBase::toJson(m_CURRENT_HOUR_QUOTE_VOLUME_SELL);
    }
    if(m_CURRENT_HOUR_QUOTE_VOLUME_UNKNOWNIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_HOUR_QUOTE_VOLUME_UNKNOWN"))] = ModelBase::toJson(m_CURRENT_HOUR_QUOTE_VOLUME_UNKNOWN);
    }
    if(m_CURRENT_HOUR_TOTAL_TRADESIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_HOUR_TOTAL_TRADES"))] = ModelBase::toJson(m_CURRENT_HOUR_TOTAL_TRADES);
    }
    if(m_CURRENT_HOUR_TOTAL_TRADES_BUYIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_HOUR_TOTAL_TRADES_BUY"))] = ModelBase::toJson(m_CURRENT_HOUR_TOTAL_TRADES_BUY);
    }
    if(m_CURRENT_HOUR_TOTAL_TRADES_SELLIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_HOUR_TOTAL_TRADES_SELL"))] = ModelBase::toJson(m_CURRENT_HOUR_TOTAL_TRADES_SELL);
    }
    if(m_CURRENT_HOUR_TOTAL_TRADES_UNKNOWNIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_HOUR_TOTAL_TRADES_UNKNOWN"))] = ModelBase::toJson(m_CURRENT_HOUR_TOTAL_TRADES_UNKNOWN);
    }
    if(m_CURRENT_HOUR_VOLUMEIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_HOUR_VOLUME"))] = ModelBase::toJson(m_CURRENT_HOUR_VOLUME);
    }
    if(m_CURRENT_HOUR_VOLUME_BUYIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_HOUR_VOLUME_BUY"))] = ModelBase::toJson(m_CURRENT_HOUR_VOLUME_BUY);
    }
    if(m_CURRENT_HOUR_VOLUME_SELLIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_HOUR_VOLUME_SELL"))] = ModelBase::toJson(m_CURRENT_HOUR_VOLUME_SELL);
    }
    if(m_CURRENT_HOUR_VOLUME_UNKNOWNIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_HOUR_VOLUME_UNKNOWN"))] = ModelBase::toJson(m_CURRENT_HOUR_VOLUME_UNKNOWN);
    }
    if(m_CURRENT_MONTH_HIGHIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_MONTH_HIGH"))] = ModelBase::toJson(m_CURRENT_MONTH_HIGH);
    }
    if(m_CURRENT_MONTH_LOWIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_MONTH_LOW"))] = ModelBase::toJson(m_CURRENT_MONTH_LOW);
    }
    if(m_CURRENT_MONTH_OPENIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_MONTH_OPEN"))] = ModelBase::toJson(m_CURRENT_MONTH_OPEN);
    }
    if(m_CURRENT_MONTH_QUOTE_VOLUMEIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_MONTH_QUOTE_VOLUME"))] = ModelBase::toJson(m_CURRENT_MONTH_QUOTE_VOLUME);
    }
    if(m_CURRENT_MONTH_QUOTE_VOLUME_BUYIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_MONTH_QUOTE_VOLUME_BUY"))] = ModelBase::toJson(m_CURRENT_MONTH_QUOTE_VOLUME_BUY);
    }
    if(m_CURRENT_MONTH_QUOTE_VOLUME_SELLIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_MONTH_QUOTE_VOLUME_SELL"))] = ModelBase::toJson(m_CURRENT_MONTH_QUOTE_VOLUME_SELL);
    }
    if(m_CURRENT_MONTH_QUOTE_VOLUME_UNKNOWNIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_MONTH_QUOTE_VOLUME_UNKNOWN"))] = ModelBase::toJson(m_CURRENT_MONTH_QUOTE_VOLUME_UNKNOWN);
    }
    if(m_CURRENT_MONTH_TOTAL_TRADESIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_MONTH_TOTAL_TRADES"))] = ModelBase::toJson(m_CURRENT_MONTH_TOTAL_TRADES);
    }
    if(m_CURRENT_MONTH_TOTAL_TRADES_BUYIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_MONTH_TOTAL_TRADES_BUY"))] = ModelBase::toJson(m_CURRENT_MONTH_TOTAL_TRADES_BUY);
    }
    if(m_CURRENT_MONTH_TOTAL_TRADES_SELLIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_MONTH_TOTAL_TRADES_SELL"))] = ModelBase::toJson(m_CURRENT_MONTH_TOTAL_TRADES_SELL);
    }
    if(m_CURRENT_MONTH_TOTAL_TRADES_UNKNOWNIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_MONTH_TOTAL_TRADES_UNKNOWN"))] = ModelBase::toJson(m_CURRENT_MONTH_TOTAL_TRADES_UNKNOWN);
    }
    if(m_CURRENT_MONTH_VOLUMEIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_MONTH_VOLUME"))] = ModelBase::toJson(m_CURRENT_MONTH_VOLUME);
    }
    if(m_CURRENT_MONTH_VOLUME_BUYIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_MONTH_VOLUME_BUY"))] = ModelBase::toJson(m_CURRENT_MONTH_VOLUME_BUY);
    }
    if(m_CURRENT_MONTH_VOLUME_SELLIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_MONTH_VOLUME_SELL"))] = ModelBase::toJson(m_CURRENT_MONTH_VOLUME_SELL);
    }
    if(m_CURRENT_MONTH_VOLUME_UNKNOWNIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_MONTH_VOLUME_UNKNOWN"))] = ModelBase::toJson(m_CURRENT_MONTH_VOLUME_UNKNOWN);
    }
    if(m_CURRENT_WEEK_HIGHIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_WEEK_HIGH"))] = ModelBase::toJson(m_CURRENT_WEEK_HIGH);
    }
    if(m_CURRENT_WEEK_LOWIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_WEEK_LOW"))] = ModelBase::toJson(m_CURRENT_WEEK_LOW);
    }
    if(m_CURRENT_WEEK_OPENIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_WEEK_OPEN"))] = ModelBase::toJson(m_CURRENT_WEEK_OPEN);
    }
    if(m_CURRENT_WEEK_QUOTE_VOLUMEIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_WEEK_QUOTE_VOLUME"))] = ModelBase::toJson(m_CURRENT_WEEK_QUOTE_VOLUME);
    }
    if(m_CURRENT_WEEK_QUOTE_VOLUME_BUYIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_WEEK_QUOTE_VOLUME_BUY"))] = ModelBase::toJson(m_CURRENT_WEEK_QUOTE_VOLUME_BUY);
    }
    if(m_CURRENT_WEEK_QUOTE_VOLUME_SELLIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_WEEK_QUOTE_VOLUME_SELL"))] = ModelBase::toJson(m_CURRENT_WEEK_QUOTE_VOLUME_SELL);
    }
    if(m_CURRENT_WEEK_QUOTE_VOLUME_UNKNOWNIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_WEEK_QUOTE_VOLUME_UNKNOWN"))] = ModelBase::toJson(m_CURRENT_WEEK_QUOTE_VOLUME_UNKNOWN);
    }
    if(m_CURRENT_WEEK_TOTAL_TRADESIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_WEEK_TOTAL_TRADES"))] = ModelBase::toJson(m_CURRENT_WEEK_TOTAL_TRADES);
    }
    if(m_CURRENT_WEEK_TOTAL_TRADES_BUYIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_WEEK_TOTAL_TRADES_BUY"))] = ModelBase::toJson(m_CURRENT_WEEK_TOTAL_TRADES_BUY);
    }
    if(m_CURRENT_WEEK_TOTAL_TRADES_SELLIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_WEEK_TOTAL_TRADES_SELL"))] = ModelBase::toJson(m_CURRENT_WEEK_TOTAL_TRADES_SELL);
    }
    if(m_CURRENT_WEEK_TOTAL_TRADES_UNKNOWNIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_WEEK_TOTAL_TRADES_UNKNOWN"))] = ModelBase::toJson(m_CURRENT_WEEK_TOTAL_TRADES_UNKNOWN);
    }
    if(m_CURRENT_WEEK_VOLUMEIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_WEEK_VOLUME"))] = ModelBase::toJson(m_CURRENT_WEEK_VOLUME);
    }
    if(m_CURRENT_WEEK_VOLUME_BUYIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_WEEK_VOLUME_BUY"))] = ModelBase::toJson(m_CURRENT_WEEK_VOLUME_BUY);
    }
    if(m_CURRENT_WEEK_VOLUME_SELLIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_WEEK_VOLUME_SELL"))] = ModelBase::toJson(m_CURRENT_WEEK_VOLUME_SELL);
    }
    if(m_CURRENT_WEEK_VOLUME_UNKNOWNIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_WEEK_VOLUME_UNKNOWN"))] = ModelBase::toJson(m_CURRENT_WEEK_VOLUME_UNKNOWN);
    }
    if(m_CURRENT_YEAR_HIGHIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_YEAR_HIGH"))] = ModelBase::toJson(m_CURRENT_YEAR_HIGH);
    }
    if(m_CURRENT_YEAR_LOWIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_YEAR_LOW"))] = ModelBase::toJson(m_CURRENT_YEAR_LOW);
    }
    if(m_CURRENT_YEAR_OPENIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_YEAR_OPEN"))] = ModelBase::toJson(m_CURRENT_YEAR_OPEN);
    }
    if(m_CURRENT_YEAR_QUOTE_VOLUMEIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_YEAR_QUOTE_VOLUME"))] = ModelBase::toJson(m_CURRENT_YEAR_QUOTE_VOLUME);
    }
    if(m_CURRENT_YEAR_QUOTE_VOLUME_BUYIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_YEAR_QUOTE_VOLUME_BUY"))] = ModelBase::toJson(m_CURRENT_YEAR_QUOTE_VOLUME_BUY);
    }
    if(m_CURRENT_YEAR_QUOTE_VOLUME_SELLIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_YEAR_QUOTE_VOLUME_SELL"))] = ModelBase::toJson(m_CURRENT_YEAR_QUOTE_VOLUME_SELL);
    }
    if(m_CURRENT_YEAR_QUOTE_VOLUME_UNKNOWNIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_YEAR_QUOTE_VOLUME_UNKNOWN"))] = ModelBase::toJson(m_CURRENT_YEAR_QUOTE_VOLUME_UNKNOWN);
    }
    if(m_CURRENT_YEAR_TOTAL_TRADESIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_YEAR_TOTAL_TRADES"))] = ModelBase::toJson(m_CURRENT_YEAR_TOTAL_TRADES);
    }
    if(m_CURRENT_YEAR_TOTAL_TRADES_BUYIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_YEAR_TOTAL_TRADES_BUY"))] = ModelBase::toJson(m_CURRENT_YEAR_TOTAL_TRADES_BUY);
    }
    if(m_CURRENT_YEAR_TOTAL_TRADES_SELLIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_YEAR_TOTAL_TRADES_SELL"))] = ModelBase::toJson(m_CURRENT_YEAR_TOTAL_TRADES_SELL);
    }
    if(m_CURRENT_YEAR_TOTAL_TRADES_UNKNOWNIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_YEAR_TOTAL_TRADES_UNKNOWN"))] = ModelBase::toJson(m_CURRENT_YEAR_TOTAL_TRADES_UNKNOWN);
    }
    if(m_CURRENT_YEAR_VOLUMEIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_YEAR_VOLUME"))] = ModelBase::toJson(m_CURRENT_YEAR_VOLUME);
    }
    if(m_CURRENT_YEAR_VOLUME_BUYIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_YEAR_VOLUME_BUY"))] = ModelBase::toJson(m_CURRENT_YEAR_VOLUME_BUY);
    }
    if(m_CURRENT_YEAR_VOLUME_SELLIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_YEAR_VOLUME_SELL"))] = ModelBase::toJson(m_CURRENT_YEAR_VOLUME_SELL);
    }
    if(m_CURRENT_YEAR_VOLUME_UNKNOWNIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENT_YEAR_VOLUME_UNKNOWN"))] = ModelBase::toJson(m_CURRENT_YEAR_VOLUME_UNKNOWN);
    }
    if(m_INSTRUMENTIsSet)
    {
        val[utility::conversions::to_string_t(U("INSTRUMENT"))] = ModelBase::toJson(m_INSTRUMENT);
    }
    if(m_LAST_PROCESSED_TRADE_CCSEQIsSet)
    {
        val[utility::conversions::to_string_t(U("LAST_PROCESSED_TRADE_CCSEQ"))] = ModelBase::toJson(m_LAST_PROCESSED_TRADE_CCSEQ);
    }
    if(m_LAST_PROCESSED_TRADE_PRICEIsSet)
    {
        val[utility::conversions::to_string_t(U("LAST_PROCESSED_TRADE_PRICE"))] = ModelBase::toJson(m_LAST_PROCESSED_TRADE_PRICE);
    }
    if(m_LAST_PROCESSED_TRADE_QUANTITYIsSet)
    {
        val[utility::conversions::to_string_t(U("LAST_PROCESSED_TRADE_QUANTITY"))] = ModelBase::toJson(m_LAST_PROCESSED_TRADE_QUANTITY);
    }
    if(m_LAST_PROCESSED_TRADE_QUOTE_QUANTITYIsSet)
    {
        val[utility::conversions::to_string_t(U("LAST_PROCESSED_TRADE_QUOTE_QUANTITY"))] = ModelBase::toJson(m_LAST_PROCESSED_TRADE_QUOTE_QUANTITY);
    }
    if(m_LAST_PROCESSED_TRADE_SIDEIsSet)
    {
        val[utility::conversions::to_string_t(U("LAST_PROCESSED_TRADE_SIDE"))] = ModelBase::toJson(m_LAST_PROCESSED_TRADE_SIDE);
    }
    if(m_LAST_PROCESSED_TRADE_TSIsSet)
    {
        val[utility::conversions::to_string_t(U("LAST_PROCESSED_TRADE_TS"))] = ModelBase::toJson(m_LAST_PROCESSED_TRADE_TS);
    }
    if(m_LAST_TRADE_CCSEQIsSet)
    {
        val[utility::conversions::to_string_t(U("LAST_TRADE_CCSEQ"))] = ModelBase::toJson(m_LAST_TRADE_CCSEQ);
    }
    if(m_LAST_TRADE_IDIsSet)
    {
        val[utility::conversions::to_string_t(U("LAST_TRADE_ID"))] = ModelBase::toJson(m_LAST_TRADE_ID);
    }
    if(m_LAST_TRADE_QUANTITYIsSet)
    {
        val[utility::conversions::to_string_t(U("LAST_TRADE_QUANTITY"))] = ModelBase::toJson(m_LAST_TRADE_QUANTITY);
    }
    if(m_LAST_TRADE_QUOTE_QUANTITYIsSet)
    {
        val[utility::conversions::to_string_t(U("LAST_TRADE_QUOTE_QUANTITY"))] = ModelBase::toJson(m_LAST_TRADE_QUOTE_QUANTITY);
    }
    if(m_LAST_TRADE_SIDEIsSet)
    {
        val[utility::conversions::to_string_t(U("LAST_TRADE_SIDE"))] = ModelBase::toJson(m_LAST_TRADE_SIDE);
    }
    if(m_LIFETIME_FIRST_TRADE_TSIsSet)
    {
        val[utility::conversions::to_string_t(U("LIFETIME_FIRST_TRADE_TS"))] = ModelBase::toJson(m_LIFETIME_FIRST_TRADE_TS);
    }
    if(m_LIFETIME_HIGHIsSet)
    {
        val[utility::conversions::to_string_t(U("LIFETIME_HIGH"))] = ModelBase::toJson(m_LIFETIME_HIGH);
    }
    if(m_LIFETIME_HIGH_TSIsSet)
    {
        val[utility::conversions::to_string_t(U("LIFETIME_HIGH_TS"))] = ModelBase::toJson(m_LIFETIME_HIGH_TS);
    }
    if(m_LIFETIME_LOWIsSet)
    {
        val[utility::conversions::to_string_t(U("LIFETIME_LOW"))] = ModelBase::toJson(m_LIFETIME_LOW);
    }
    if(m_LIFETIME_LOW_TSIsSet)
    {
        val[utility::conversions::to_string_t(U("LIFETIME_LOW_TS"))] = ModelBase::toJson(m_LIFETIME_LOW_TS);
    }
    if(m_LIFETIME_OPENIsSet)
    {
        val[utility::conversions::to_string_t(U("LIFETIME_OPEN"))] = ModelBase::toJson(m_LIFETIME_OPEN);
    }
    if(m_LIFETIME_QUOTE_VOLUMEIsSet)
    {
        val[utility::conversions::to_string_t(U("LIFETIME_QUOTE_VOLUME"))] = ModelBase::toJson(m_LIFETIME_QUOTE_VOLUME);
    }
    if(m_LIFETIME_QUOTE_VOLUME_BUYIsSet)
    {
        val[utility::conversions::to_string_t(U("LIFETIME_QUOTE_VOLUME_BUY"))] = ModelBase::toJson(m_LIFETIME_QUOTE_VOLUME_BUY);
    }
    if(m_LIFETIME_QUOTE_VOLUME_SELLIsSet)
    {
        val[utility::conversions::to_string_t(U("LIFETIME_QUOTE_VOLUME_SELL"))] = ModelBase::toJson(m_LIFETIME_QUOTE_VOLUME_SELL);
    }
    if(m_LIFETIME_QUOTE_VOLUME_UNKNOWNIsSet)
    {
        val[utility::conversions::to_string_t(U("LIFETIME_QUOTE_VOLUME_UNKNOWN"))] = ModelBase::toJson(m_LIFETIME_QUOTE_VOLUME_UNKNOWN);
    }
    if(m_LIFETIME_TOTAL_TRADESIsSet)
    {
        val[utility::conversions::to_string_t(U("LIFETIME_TOTAL_TRADES"))] = ModelBase::toJson(m_LIFETIME_TOTAL_TRADES);
    }
    if(m_LIFETIME_TOTAL_TRADES_BUYIsSet)
    {
        val[utility::conversions::to_string_t(U("LIFETIME_TOTAL_TRADES_BUY"))] = ModelBase::toJson(m_LIFETIME_TOTAL_TRADES_BUY);
    }
    if(m_LIFETIME_TOTAL_TRADES_SELLIsSet)
    {
        val[utility::conversions::to_string_t(U("LIFETIME_TOTAL_TRADES_SELL"))] = ModelBase::toJson(m_LIFETIME_TOTAL_TRADES_SELL);
    }
    if(m_LIFETIME_TOTAL_TRADES_UNKNOWNIsSet)
    {
        val[utility::conversions::to_string_t(U("LIFETIME_TOTAL_TRADES_UNKNOWN"))] = ModelBase::toJson(m_LIFETIME_TOTAL_TRADES_UNKNOWN);
    }
    if(m_LIFETIME_VOLUMEIsSet)
    {
        val[utility::conversions::to_string_t(U("LIFETIME_VOLUME"))] = ModelBase::toJson(m_LIFETIME_VOLUME);
    }
    if(m_LIFETIME_VOLUME_BUYIsSet)
    {
        val[utility::conversions::to_string_t(U("LIFETIME_VOLUME_BUY"))] = ModelBase::toJson(m_LIFETIME_VOLUME_BUY);
    }
    if(m_LIFETIME_VOLUME_SELLIsSet)
    {
        val[utility::conversions::to_string_t(U("LIFETIME_VOLUME_SELL"))] = ModelBase::toJson(m_LIFETIME_VOLUME_SELL);
    }
    if(m_LIFETIME_VOLUME_UNKNOWNIsSet)
    {
        val[utility::conversions::to_string_t(U("LIFETIME_VOLUME_UNKNOWN"))] = ModelBase::toJson(m_LIFETIME_VOLUME_UNKNOWN);
    }
    if(m_MAPPED_INSTRUMENTIsSet)
    {
        val[utility::conversions::to_string_t(U("MAPPED_INSTRUMENT"))] = ModelBase::toJson(m_MAPPED_INSTRUMENT);
    }
    if(m_MARKETIsSet)
    {
        val[utility::conversions::to_string_t(U("MARKET"))] = ModelBase::toJson(m_MARKET);
    }
    if(m_MOVING_180_DAY_HIGHIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_180_DAY_HIGH"))] = ModelBase::toJson(m_MOVING_180_DAY_HIGH);
    }
    if(m_MOVING_180_DAY_LOWIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_180_DAY_LOW"))] = ModelBase::toJson(m_MOVING_180_DAY_LOW);
    }
    if(m_MOVING_180_DAY_OPENIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_180_DAY_OPEN"))] = ModelBase::toJson(m_MOVING_180_DAY_OPEN);
    }
    if(m_MOVING_180_DAY_QUOTE_VOLUMEIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_180_DAY_QUOTE_VOLUME"))] = ModelBase::toJson(m_MOVING_180_DAY_QUOTE_VOLUME);
    }
    if(m_MOVING_180_DAY_QUOTE_VOLUME_BUYIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_180_DAY_QUOTE_VOLUME_BUY"))] = ModelBase::toJson(m_MOVING_180_DAY_QUOTE_VOLUME_BUY);
    }
    if(m_MOVING_180_DAY_QUOTE_VOLUME_SELLIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_180_DAY_QUOTE_VOLUME_SELL"))] = ModelBase::toJson(m_MOVING_180_DAY_QUOTE_VOLUME_SELL);
    }
    if(m_MOVING_180_DAY_QUOTE_VOLUME_UNKNOWNIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_180_DAY_QUOTE_VOLUME_UNKNOWN"))] = ModelBase::toJson(m_MOVING_180_DAY_QUOTE_VOLUME_UNKNOWN);
    }
    if(m_MOVING_180_DAY_TOTAL_TRADESIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_180_DAY_TOTAL_TRADES"))] = ModelBase::toJson(m_MOVING_180_DAY_TOTAL_TRADES);
    }
    if(m_MOVING_180_DAY_TOTAL_TRADES_BUYIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_180_DAY_TOTAL_TRADES_BUY"))] = ModelBase::toJson(m_MOVING_180_DAY_TOTAL_TRADES_BUY);
    }
    if(m_MOVING_180_DAY_TOTAL_TRADES_SELLIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_180_DAY_TOTAL_TRADES_SELL"))] = ModelBase::toJson(m_MOVING_180_DAY_TOTAL_TRADES_SELL);
    }
    if(m_MOVING_180_DAY_TOTAL_TRADES_UNKNOWNIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_180_DAY_TOTAL_TRADES_UNKNOWN"))] = ModelBase::toJson(m_MOVING_180_DAY_TOTAL_TRADES_UNKNOWN);
    }
    if(m_MOVING_180_DAY_VOLUMEIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_180_DAY_VOLUME"))] = ModelBase::toJson(m_MOVING_180_DAY_VOLUME);
    }
    if(m_MOVING_180_DAY_VOLUME_BUYIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_180_DAY_VOLUME_BUY"))] = ModelBase::toJson(m_MOVING_180_DAY_VOLUME_BUY);
    }
    if(m_MOVING_180_DAY_VOLUME_SELLIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_180_DAY_VOLUME_SELL"))] = ModelBase::toJson(m_MOVING_180_DAY_VOLUME_SELL);
    }
    if(m_MOVING_180_DAY_VOLUME_UNKNOWNIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_180_DAY_VOLUME_UNKNOWN"))] = ModelBase::toJson(m_MOVING_180_DAY_VOLUME_UNKNOWN);
    }
    if(m_MOVING_24_HOUR_HIGHIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_24_HOUR_HIGH"))] = ModelBase::toJson(m_MOVING_24_HOUR_HIGH);
    }
    if(m_MOVING_24_HOUR_LOWIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_24_HOUR_LOW"))] = ModelBase::toJson(m_MOVING_24_HOUR_LOW);
    }
    if(m_MOVING_24_HOUR_OPENIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_24_HOUR_OPEN"))] = ModelBase::toJson(m_MOVING_24_HOUR_OPEN);
    }
    if(m_MOVING_24_HOUR_QUOTE_VOLUMEIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_24_HOUR_QUOTE_VOLUME"))] = ModelBase::toJson(m_MOVING_24_HOUR_QUOTE_VOLUME);
    }
    if(m_MOVING_24_HOUR_QUOTE_VOLUME_BUYIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_24_HOUR_QUOTE_VOLUME_BUY"))] = ModelBase::toJson(m_MOVING_24_HOUR_QUOTE_VOLUME_BUY);
    }
    if(m_MOVING_24_HOUR_QUOTE_VOLUME_SELLIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_24_HOUR_QUOTE_VOLUME_SELL"))] = ModelBase::toJson(m_MOVING_24_HOUR_QUOTE_VOLUME_SELL);
    }
    if(m_MOVING_24_HOUR_QUOTE_VOLUME_UNKNOWNIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_24_HOUR_QUOTE_VOLUME_UNKNOWN"))] = ModelBase::toJson(m_MOVING_24_HOUR_QUOTE_VOLUME_UNKNOWN);
    }
    if(m_MOVING_24_HOUR_TOTAL_TRADESIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_24_HOUR_TOTAL_TRADES"))] = ModelBase::toJson(m_MOVING_24_HOUR_TOTAL_TRADES);
    }
    if(m_MOVING_24_HOUR_TOTAL_TRADES_BUYIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_24_HOUR_TOTAL_TRADES_BUY"))] = ModelBase::toJson(m_MOVING_24_HOUR_TOTAL_TRADES_BUY);
    }
    if(m_MOVING_24_HOUR_TOTAL_TRADES_SELLIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_24_HOUR_TOTAL_TRADES_SELL"))] = ModelBase::toJson(m_MOVING_24_HOUR_TOTAL_TRADES_SELL);
    }
    if(m_MOVING_24_HOUR_TOTAL_TRADES_UNKNOWNIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_24_HOUR_TOTAL_TRADES_UNKNOWN"))] = ModelBase::toJson(m_MOVING_24_HOUR_TOTAL_TRADES_UNKNOWN);
    }
    if(m_MOVING_24_HOUR_VOLUMEIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_24_HOUR_VOLUME"))] = ModelBase::toJson(m_MOVING_24_HOUR_VOLUME);
    }
    if(m_MOVING_24_HOUR_VOLUME_BUYIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_24_HOUR_VOLUME_BUY"))] = ModelBase::toJson(m_MOVING_24_HOUR_VOLUME_BUY);
    }
    if(m_MOVING_24_HOUR_VOLUME_SELLIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_24_HOUR_VOLUME_SELL"))] = ModelBase::toJson(m_MOVING_24_HOUR_VOLUME_SELL);
    }
    if(m_MOVING_24_HOUR_VOLUME_UNKNOWNIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_24_HOUR_VOLUME_UNKNOWN"))] = ModelBase::toJson(m_MOVING_24_HOUR_VOLUME_UNKNOWN);
    }
    if(m_MOVING_30_DAY_HIGHIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_30_DAY_HIGH"))] = ModelBase::toJson(m_MOVING_30_DAY_HIGH);
    }
    if(m_MOVING_30_DAY_LOWIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_30_DAY_LOW"))] = ModelBase::toJson(m_MOVING_30_DAY_LOW);
    }
    if(m_MOVING_30_DAY_OPENIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_30_DAY_OPEN"))] = ModelBase::toJson(m_MOVING_30_DAY_OPEN);
    }
    if(m_MOVING_30_DAY_QUOTE_VOLUMEIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_30_DAY_QUOTE_VOLUME"))] = ModelBase::toJson(m_MOVING_30_DAY_QUOTE_VOLUME);
    }
    if(m_MOVING_30_DAY_QUOTE_VOLUME_BUYIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_30_DAY_QUOTE_VOLUME_BUY"))] = ModelBase::toJson(m_MOVING_30_DAY_QUOTE_VOLUME_BUY);
    }
    if(m_MOVING_30_DAY_QUOTE_VOLUME_SELLIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_30_DAY_QUOTE_VOLUME_SELL"))] = ModelBase::toJson(m_MOVING_30_DAY_QUOTE_VOLUME_SELL);
    }
    if(m_MOVING_30_DAY_QUOTE_VOLUME_UNKNOWNIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_30_DAY_QUOTE_VOLUME_UNKNOWN"))] = ModelBase::toJson(m_MOVING_30_DAY_QUOTE_VOLUME_UNKNOWN);
    }
    if(m_MOVING_30_DAY_TOTAL_TRADESIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_30_DAY_TOTAL_TRADES"))] = ModelBase::toJson(m_MOVING_30_DAY_TOTAL_TRADES);
    }
    if(m_MOVING_30_DAY_TOTAL_TRADES_BUYIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_30_DAY_TOTAL_TRADES_BUY"))] = ModelBase::toJson(m_MOVING_30_DAY_TOTAL_TRADES_BUY);
    }
    if(m_MOVING_30_DAY_TOTAL_TRADES_SELLIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_30_DAY_TOTAL_TRADES_SELL"))] = ModelBase::toJson(m_MOVING_30_DAY_TOTAL_TRADES_SELL);
    }
    if(m_MOVING_30_DAY_TOTAL_TRADES_UNKNOWNIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_30_DAY_TOTAL_TRADES_UNKNOWN"))] = ModelBase::toJson(m_MOVING_30_DAY_TOTAL_TRADES_UNKNOWN);
    }
    if(m_MOVING_30_DAY_VOLUMEIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_30_DAY_VOLUME"))] = ModelBase::toJson(m_MOVING_30_DAY_VOLUME);
    }
    if(m_MOVING_30_DAY_VOLUME_BUYIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_30_DAY_VOLUME_BUY"))] = ModelBase::toJson(m_MOVING_30_DAY_VOLUME_BUY);
    }
    if(m_MOVING_30_DAY_VOLUME_SELLIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_30_DAY_VOLUME_SELL"))] = ModelBase::toJson(m_MOVING_30_DAY_VOLUME_SELL);
    }
    if(m_MOVING_30_DAY_VOLUME_UNKNOWNIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_30_DAY_VOLUME_UNKNOWN"))] = ModelBase::toJson(m_MOVING_30_DAY_VOLUME_UNKNOWN);
    }
    if(m_MOVING_365_DAY_HIGHIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_365_DAY_HIGH"))] = ModelBase::toJson(m_MOVING_365_DAY_HIGH);
    }
    if(m_MOVING_365_DAY_LOWIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_365_DAY_LOW"))] = ModelBase::toJson(m_MOVING_365_DAY_LOW);
    }
    if(m_MOVING_365_DAY_OPENIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_365_DAY_OPEN"))] = ModelBase::toJson(m_MOVING_365_DAY_OPEN);
    }
    if(m_MOVING_365_DAY_QUOTE_VOLUMEIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_365_DAY_QUOTE_VOLUME"))] = ModelBase::toJson(m_MOVING_365_DAY_QUOTE_VOLUME);
    }
    if(m_MOVING_365_DAY_QUOTE_VOLUME_BUYIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_365_DAY_QUOTE_VOLUME_BUY"))] = ModelBase::toJson(m_MOVING_365_DAY_QUOTE_VOLUME_BUY);
    }
    if(m_MOVING_365_DAY_QUOTE_VOLUME_SELLIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_365_DAY_QUOTE_VOLUME_SELL"))] = ModelBase::toJson(m_MOVING_365_DAY_QUOTE_VOLUME_SELL);
    }
    if(m_MOVING_365_DAY_QUOTE_VOLUME_UNKNOWNIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_365_DAY_QUOTE_VOLUME_UNKNOWN"))] = ModelBase::toJson(m_MOVING_365_DAY_QUOTE_VOLUME_UNKNOWN);
    }
    if(m_MOVING_365_DAY_TOTAL_TRADESIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_365_DAY_TOTAL_TRADES"))] = ModelBase::toJson(m_MOVING_365_DAY_TOTAL_TRADES);
    }
    if(m_MOVING_365_DAY_TOTAL_TRADES_BUYIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_365_DAY_TOTAL_TRADES_BUY"))] = ModelBase::toJson(m_MOVING_365_DAY_TOTAL_TRADES_BUY);
    }
    if(m_MOVING_365_DAY_TOTAL_TRADES_SELLIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_365_DAY_TOTAL_TRADES_SELL"))] = ModelBase::toJson(m_MOVING_365_DAY_TOTAL_TRADES_SELL);
    }
    if(m_MOVING_365_DAY_TOTAL_TRADES_UNKNOWNIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_365_DAY_TOTAL_TRADES_UNKNOWN"))] = ModelBase::toJson(m_MOVING_365_DAY_TOTAL_TRADES_UNKNOWN);
    }
    if(m_MOVING_365_DAY_VOLUMEIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_365_DAY_VOLUME"))] = ModelBase::toJson(m_MOVING_365_DAY_VOLUME);
    }
    if(m_MOVING_365_DAY_VOLUME_BUYIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_365_DAY_VOLUME_BUY"))] = ModelBase::toJson(m_MOVING_365_DAY_VOLUME_BUY);
    }
    if(m_MOVING_365_DAY_VOLUME_SELLIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_365_DAY_VOLUME_SELL"))] = ModelBase::toJson(m_MOVING_365_DAY_VOLUME_SELL);
    }
    if(m_MOVING_365_DAY_VOLUME_UNKNOWNIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_365_DAY_VOLUME_UNKNOWN"))] = ModelBase::toJson(m_MOVING_365_DAY_VOLUME_UNKNOWN);
    }
    if(m_MOVING_7_DAY_HIGHIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_7_DAY_HIGH"))] = ModelBase::toJson(m_MOVING_7_DAY_HIGH);
    }
    if(m_MOVING_7_DAY_LOWIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_7_DAY_LOW"))] = ModelBase::toJson(m_MOVING_7_DAY_LOW);
    }
    if(m_MOVING_7_DAY_OPENIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_7_DAY_OPEN"))] = ModelBase::toJson(m_MOVING_7_DAY_OPEN);
    }
    if(m_MOVING_7_DAY_QUOTE_VOLUMEIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_7_DAY_QUOTE_VOLUME"))] = ModelBase::toJson(m_MOVING_7_DAY_QUOTE_VOLUME);
    }
    if(m_MOVING_7_DAY_QUOTE_VOLUME_BUYIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_7_DAY_QUOTE_VOLUME_BUY"))] = ModelBase::toJson(m_MOVING_7_DAY_QUOTE_VOLUME_BUY);
    }
    if(m_MOVING_7_DAY_QUOTE_VOLUME_SELLIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_7_DAY_QUOTE_VOLUME_SELL"))] = ModelBase::toJson(m_MOVING_7_DAY_QUOTE_VOLUME_SELL);
    }
    if(m_MOVING_7_DAY_QUOTE_VOLUME_UNKNOWNIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_7_DAY_QUOTE_VOLUME_UNKNOWN"))] = ModelBase::toJson(m_MOVING_7_DAY_QUOTE_VOLUME_UNKNOWN);
    }
    if(m_MOVING_7_DAY_TOTAL_TRADESIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_7_DAY_TOTAL_TRADES"))] = ModelBase::toJson(m_MOVING_7_DAY_TOTAL_TRADES);
    }
    if(m_MOVING_7_DAY_TOTAL_TRADES_BUYIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_7_DAY_TOTAL_TRADES_BUY"))] = ModelBase::toJson(m_MOVING_7_DAY_TOTAL_TRADES_BUY);
    }
    if(m_MOVING_7_DAY_TOTAL_TRADES_SELLIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_7_DAY_TOTAL_TRADES_SELL"))] = ModelBase::toJson(m_MOVING_7_DAY_TOTAL_TRADES_SELL);
    }
    if(m_MOVING_7_DAY_TOTAL_TRADES_UNKNOWNIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_7_DAY_TOTAL_TRADES_UNKNOWN"))] = ModelBase::toJson(m_MOVING_7_DAY_TOTAL_TRADES_UNKNOWN);
    }
    if(m_MOVING_7_DAY_VOLUMEIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_7_DAY_VOLUME"))] = ModelBase::toJson(m_MOVING_7_DAY_VOLUME);
    }
    if(m_MOVING_7_DAY_VOLUME_BUYIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_7_DAY_VOLUME_BUY"))] = ModelBase::toJson(m_MOVING_7_DAY_VOLUME_BUY);
    }
    if(m_MOVING_7_DAY_VOLUME_SELLIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_7_DAY_VOLUME_SELL"))] = ModelBase::toJson(m_MOVING_7_DAY_VOLUME_SELL);
    }
    if(m_MOVING_7_DAY_VOLUME_UNKNOWNIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_7_DAY_VOLUME_UNKNOWN"))] = ModelBase::toJson(m_MOVING_7_DAY_VOLUME_UNKNOWN);
    }
    if(m_MOVING_90_DAY_HIGHIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_90_DAY_HIGH"))] = ModelBase::toJson(m_MOVING_90_DAY_HIGH);
    }
    if(m_MOVING_90_DAY_LOWIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_90_DAY_LOW"))] = ModelBase::toJson(m_MOVING_90_DAY_LOW);
    }
    if(m_MOVING_90_DAY_OPENIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_90_DAY_OPEN"))] = ModelBase::toJson(m_MOVING_90_DAY_OPEN);
    }
    if(m_MOVING_90_DAY_QUOTE_VOLUMEIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_90_DAY_QUOTE_VOLUME"))] = ModelBase::toJson(m_MOVING_90_DAY_QUOTE_VOLUME);
    }
    if(m_MOVING_90_DAY_QUOTE_VOLUME_BUYIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_90_DAY_QUOTE_VOLUME_BUY"))] = ModelBase::toJson(m_MOVING_90_DAY_QUOTE_VOLUME_BUY);
    }
    if(m_MOVING_90_DAY_QUOTE_VOLUME_SELLIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_90_DAY_QUOTE_VOLUME_SELL"))] = ModelBase::toJson(m_MOVING_90_DAY_QUOTE_VOLUME_SELL);
    }
    if(m_MOVING_90_DAY_QUOTE_VOLUME_UNKNOWNIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_90_DAY_QUOTE_VOLUME_UNKNOWN"))] = ModelBase::toJson(m_MOVING_90_DAY_QUOTE_VOLUME_UNKNOWN);
    }
    if(m_MOVING_90_DAY_TOTAL_TRADESIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_90_DAY_TOTAL_TRADES"))] = ModelBase::toJson(m_MOVING_90_DAY_TOTAL_TRADES);
    }
    if(m_MOVING_90_DAY_TOTAL_TRADES_BUYIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_90_DAY_TOTAL_TRADES_BUY"))] = ModelBase::toJson(m_MOVING_90_DAY_TOTAL_TRADES_BUY);
    }
    if(m_MOVING_90_DAY_TOTAL_TRADES_SELLIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_90_DAY_TOTAL_TRADES_SELL"))] = ModelBase::toJson(m_MOVING_90_DAY_TOTAL_TRADES_SELL);
    }
    if(m_MOVING_90_DAY_TOTAL_TRADES_UNKNOWNIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_90_DAY_TOTAL_TRADES_UNKNOWN"))] = ModelBase::toJson(m_MOVING_90_DAY_TOTAL_TRADES_UNKNOWN);
    }
    if(m_MOVING_90_DAY_VOLUMEIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_90_DAY_VOLUME"))] = ModelBase::toJson(m_MOVING_90_DAY_VOLUME);
    }
    if(m_MOVING_90_DAY_VOLUME_BUYIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_90_DAY_VOLUME_BUY"))] = ModelBase::toJson(m_MOVING_90_DAY_VOLUME_BUY);
    }
    if(m_MOVING_90_DAY_VOLUME_SELLIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_90_DAY_VOLUME_SELL"))] = ModelBase::toJson(m_MOVING_90_DAY_VOLUME_SELL);
    }
    if(m_MOVING_90_DAY_VOLUME_UNKNOWNIsSet)
    {
        val[utility::conversions::to_string_t(U("MOVING_90_DAY_VOLUME_UNKNOWN"))] = ModelBase::toJson(m_MOVING_90_DAY_VOLUME_UNKNOWN);
    }
    if(m_PRICEIsSet)
    {
        val[utility::conversions::to_string_t(U("PRICE"))] = ModelBase::toJson(m_PRICE);
    }
    if(m_PRICE_FLAGIsSet)
    {
        val[utility::conversions::to_string_t(U("PRICE_FLAG"))] = ModelBase::toJson(m_PRICE_FLAG);
    }
    if(m_PRICE_LAST_UPDATE_TSIsSet)
    {
        val[utility::conversions::to_string_t(U("PRICE_LAST_UPDATE_TS"))] = ModelBase::toJson(m_PRICE_LAST_UPDATE_TS);
    }
    if(m_QUOTEIsSet)
    {
        val[utility::conversions::to_string_t(U("QUOTE"))] = ModelBase::toJson(m_QUOTE);
    }
    if(m_TOP_ASK_LAST_UPDATE_TSIsSet)
    {
        val[utility::conversions::to_string_t(U("TOP_ASK_LAST_UPDATE_TS"))] = ModelBase::toJson(m_TOP_ASK_LAST_UPDATE_TS);
    }
    if(m_TOP_ASK_PRICEIsSet)
    {
        val[utility::conversions::to_string_t(U("TOP_ASK_PRICE"))] = ModelBase::toJson(m_TOP_ASK_PRICE);
    }
    if(m_TOP_ASK_QUANTITYIsSet)
    {
        val[utility::conversions::to_string_t(U("TOP_ASK_QUANTITY"))] = ModelBase::toJson(m_TOP_ASK_QUANTITY);
    }
    if(m_TOP_BID_LAST_UPDATE_TSIsSet)
    {
        val[utility::conversions::to_string_t(U("TOP_BID_LAST_UPDATE_TS"))] = ModelBase::toJson(m_TOP_BID_LAST_UPDATE_TS);
    }
    if(m_TOP_BID_PRICEIsSet)
    {
        val[utility::conversions::to_string_t(U("TOP_BID_PRICE"))] = ModelBase::toJson(m_TOP_BID_PRICE);
    }
    if(m_TOP_BID_QUANTITYIsSet)
    {
        val[utility::conversions::to_string_t(U("TOP_BID_QUANTITY"))] = ModelBase::toJson(m_TOP_BID_QUANTITY);
    }
    if(m_TYPEIsSet)
    {
        val[utility::conversions::to_string_t(U("TYPE"))] = ModelBase::toJson(m_TYPE);
    }

    return val;
}

bool SPOT_INSTRUMENT_MARKET_DATA::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("BASE"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("BASE")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBASE;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBASE);
            setBASE(refVal_setBASE);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CCSEQ"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CCSEQ")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCCSEQ;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCCSEQ);
            setCCSEQ(refVal_setCCSEQ);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_DAY_HIGH"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_DAY_HIGH")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTDAYHIGH;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTDAYHIGH);
            setCURRENTDAYHIGH(refVal_setCURRENTDAYHIGH);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_DAY_LOW"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_DAY_LOW")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTDAYLOW;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTDAYLOW);
            setCURRENTDAYLOW(refVal_setCURRENTDAYLOW);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_DAY_OPEN"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_DAY_OPEN")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTDAYOPEN;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTDAYOPEN);
            setCURRENTDAYOPEN(refVal_setCURRENTDAYOPEN);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_DAY_QUOTE_VOLUME"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_DAY_QUOTE_VOLUME")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTDAYQUOTEVOLUME;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTDAYQUOTEVOLUME);
            setCURRENTDAYQUOTEVOLUME(refVal_setCURRENTDAYQUOTEVOLUME);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_DAY_QUOTE_VOLUME_BUY"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_DAY_QUOTE_VOLUME_BUY")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTDAYQUOTEVOLUMEBUY;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTDAYQUOTEVOLUMEBUY);
            setCURRENTDAYQUOTEVOLUMEBUY(refVal_setCURRENTDAYQUOTEVOLUMEBUY);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_DAY_QUOTE_VOLUME_SELL"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_DAY_QUOTE_VOLUME_SELL")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTDAYQUOTEVOLUMESELL;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTDAYQUOTEVOLUMESELL);
            setCURRENTDAYQUOTEVOLUMESELL(refVal_setCURRENTDAYQUOTEVOLUMESELL);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_DAY_QUOTE_VOLUME_UNKNOWN"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_DAY_QUOTE_VOLUME_UNKNOWN")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTDAYQUOTEVOLUMEUNKNOWN;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTDAYQUOTEVOLUMEUNKNOWN);
            setCURRENTDAYQUOTEVOLUMEUNKNOWN(refVal_setCURRENTDAYQUOTEVOLUMEUNKNOWN);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_DAY_TOTAL_TRADES"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_DAY_TOTAL_TRADES")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTDAYTOTALTRADES;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTDAYTOTALTRADES);
            setCURRENTDAYTOTALTRADES(refVal_setCURRENTDAYTOTALTRADES);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_DAY_TOTAL_TRADES_BUY"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_DAY_TOTAL_TRADES_BUY")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTDAYTOTALTRADESBUY;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTDAYTOTALTRADESBUY);
            setCURRENTDAYTOTALTRADESBUY(refVal_setCURRENTDAYTOTALTRADESBUY);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_DAY_TOTAL_TRADES_SELL"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_DAY_TOTAL_TRADES_SELL")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTDAYTOTALTRADESSELL;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTDAYTOTALTRADESSELL);
            setCURRENTDAYTOTALTRADESSELL(refVal_setCURRENTDAYTOTALTRADESSELL);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_DAY_TOTAL_TRADES_UNKNOWN"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_DAY_TOTAL_TRADES_UNKNOWN")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTDAYTOTALTRADESUNKNOWN;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTDAYTOTALTRADESUNKNOWN);
            setCURRENTDAYTOTALTRADESUNKNOWN(refVal_setCURRENTDAYTOTALTRADESUNKNOWN);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_DAY_VOLUME"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_DAY_VOLUME")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTDAYVOLUME;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTDAYVOLUME);
            setCURRENTDAYVOLUME(refVal_setCURRENTDAYVOLUME);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_DAY_VOLUME_BUY"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_DAY_VOLUME_BUY")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTDAYVOLUMEBUY;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTDAYVOLUMEBUY);
            setCURRENTDAYVOLUMEBUY(refVal_setCURRENTDAYVOLUMEBUY);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_DAY_VOLUME_SELL"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_DAY_VOLUME_SELL")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTDAYVOLUMESELL;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTDAYVOLUMESELL);
            setCURRENTDAYVOLUMESELL(refVal_setCURRENTDAYVOLUMESELL);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_DAY_VOLUME_UNKNOWN"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_DAY_VOLUME_UNKNOWN")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTDAYVOLUMEUNKNOWN;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTDAYVOLUMEUNKNOWN);
            setCURRENTDAYVOLUMEUNKNOWN(refVal_setCURRENTDAYVOLUMEUNKNOWN);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_HOUR_HIGH"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_HOUR_HIGH")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTHOURHIGH;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTHOURHIGH);
            setCURRENTHOURHIGH(refVal_setCURRENTHOURHIGH);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_HOUR_LOW"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_HOUR_LOW")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTHOURLOW;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTHOURLOW);
            setCURRENTHOURLOW(refVal_setCURRENTHOURLOW);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_HOUR_OPEN"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_HOUR_OPEN")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTHOUROPEN;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTHOUROPEN);
            setCURRENTHOUROPEN(refVal_setCURRENTHOUROPEN);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_HOUR_QUOTE_VOLUME"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_HOUR_QUOTE_VOLUME")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTHOURQUOTEVOLUME;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTHOURQUOTEVOLUME);
            setCURRENTHOURQUOTEVOLUME(refVal_setCURRENTHOURQUOTEVOLUME);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_HOUR_QUOTE_VOLUME_BUY"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_HOUR_QUOTE_VOLUME_BUY")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTHOURQUOTEVOLUMEBUY;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTHOURQUOTEVOLUMEBUY);
            setCURRENTHOURQUOTEVOLUMEBUY(refVal_setCURRENTHOURQUOTEVOLUMEBUY);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_HOUR_QUOTE_VOLUME_SELL"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_HOUR_QUOTE_VOLUME_SELL")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTHOURQUOTEVOLUMESELL;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTHOURQUOTEVOLUMESELL);
            setCURRENTHOURQUOTEVOLUMESELL(refVal_setCURRENTHOURQUOTEVOLUMESELL);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_HOUR_QUOTE_VOLUME_UNKNOWN"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_HOUR_QUOTE_VOLUME_UNKNOWN")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTHOURQUOTEVOLUMEUNKNOWN;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTHOURQUOTEVOLUMEUNKNOWN);
            setCURRENTHOURQUOTEVOLUMEUNKNOWN(refVal_setCURRENTHOURQUOTEVOLUMEUNKNOWN);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_HOUR_TOTAL_TRADES"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_HOUR_TOTAL_TRADES")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTHOURTOTALTRADES;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTHOURTOTALTRADES);
            setCURRENTHOURTOTALTRADES(refVal_setCURRENTHOURTOTALTRADES);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_HOUR_TOTAL_TRADES_BUY"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_HOUR_TOTAL_TRADES_BUY")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTHOURTOTALTRADESBUY;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTHOURTOTALTRADESBUY);
            setCURRENTHOURTOTALTRADESBUY(refVal_setCURRENTHOURTOTALTRADESBUY);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_HOUR_TOTAL_TRADES_SELL"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_HOUR_TOTAL_TRADES_SELL")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTHOURTOTALTRADESSELL;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTHOURTOTALTRADESSELL);
            setCURRENTHOURTOTALTRADESSELL(refVal_setCURRENTHOURTOTALTRADESSELL);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_HOUR_TOTAL_TRADES_UNKNOWN"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_HOUR_TOTAL_TRADES_UNKNOWN")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTHOURTOTALTRADESUNKNOWN;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTHOURTOTALTRADESUNKNOWN);
            setCURRENTHOURTOTALTRADESUNKNOWN(refVal_setCURRENTHOURTOTALTRADESUNKNOWN);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_HOUR_VOLUME"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_HOUR_VOLUME")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTHOURVOLUME;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTHOURVOLUME);
            setCURRENTHOURVOLUME(refVal_setCURRENTHOURVOLUME);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_HOUR_VOLUME_BUY"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_HOUR_VOLUME_BUY")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTHOURVOLUMEBUY;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTHOURVOLUMEBUY);
            setCURRENTHOURVOLUMEBUY(refVal_setCURRENTHOURVOLUMEBUY);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_HOUR_VOLUME_SELL"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_HOUR_VOLUME_SELL")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTHOURVOLUMESELL;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTHOURVOLUMESELL);
            setCURRENTHOURVOLUMESELL(refVal_setCURRENTHOURVOLUMESELL);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_HOUR_VOLUME_UNKNOWN"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_HOUR_VOLUME_UNKNOWN")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTHOURVOLUMEUNKNOWN;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTHOURVOLUMEUNKNOWN);
            setCURRENTHOURVOLUMEUNKNOWN(refVal_setCURRENTHOURVOLUMEUNKNOWN);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_MONTH_HIGH"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_MONTH_HIGH")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTMONTHHIGH;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTMONTHHIGH);
            setCURRENTMONTHHIGH(refVal_setCURRENTMONTHHIGH);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_MONTH_LOW"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_MONTH_LOW")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTMONTHLOW;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTMONTHLOW);
            setCURRENTMONTHLOW(refVal_setCURRENTMONTHLOW);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_MONTH_OPEN"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_MONTH_OPEN")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTMONTHOPEN;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTMONTHOPEN);
            setCURRENTMONTHOPEN(refVal_setCURRENTMONTHOPEN);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_MONTH_QUOTE_VOLUME"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_MONTH_QUOTE_VOLUME")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTMONTHQUOTEVOLUME;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTMONTHQUOTEVOLUME);
            setCURRENTMONTHQUOTEVOLUME(refVal_setCURRENTMONTHQUOTEVOLUME);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_MONTH_QUOTE_VOLUME_BUY"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_MONTH_QUOTE_VOLUME_BUY")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTMONTHQUOTEVOLUMEBUY;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTMONTHQUOTEVOLUMEBUY);
            setCURRENTMONTHQUOTEVOLUMEBUY(refVal_setCURRENTMONTHQUOTEVOLUMEBUY);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_MONTH_QUOTE_VOLUME_SELL"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_MONTH_QUOTE_VOLUME_SELL")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTMONTHQUOTEVOLUMESELL;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTMONTHQUOTEVOLUMESELL);
            setCURRENTMONTHQUOTEVOLUMESELL(refVal_setCURRENTMONTHQUOTEVOLUMESELL);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_MONTH_QUOTE_VOLUME_UNKNOWN"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_MONTH_QUOTE_VOLUME_UNKNOWN")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTMONTHQUOTEVOLUMEUNKNOWN;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTMONTHQUOTEVOLUMEUNKNOWN);
            setCURRENTMONTHQUOTEVOLUMEUNKNOWN(refVal_setCURRENTMONTHQUOTEVOLUMEUNKNOWN);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_MONTH_TOTAL_TRADES"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_MONTH_TOTAL_TRADES")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTMONTHTOTALTRADES;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTMONTHTOTALTRADES);
            setCURRENTMONTHTOTALTRADES(refVal_setCURRENTMONTHTOTALTRADES);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_MONTH_TOTAL_TRADES_BUY"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_MONTH_TOTAL_TRADES_BUY")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTMONTHTOTALTRADESBUY;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTMONTHTOTALTRADESBUY);
            setCURRENTMONTHTOTALTRADESBUY(refVal_setCURRENTMONTHTOTALTRADESBUY);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_MONTH_TOTAL_TRADES_SELL"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_MONTH_TOTAL_TRADES_SELL")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTMONTHTOTALTRADESSELL;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTMONTHTOTALTRADESSELL);
            setCURRENTMONTHTOTALTRADESSELL(refVal_setCURRENTMONTHTOTALTRADESSELL);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_MONTH_TOTAL_TRADES_UNKNOWN"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_MONTH_TOTAL_TRADES_UNKNOWN")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTMONTHTOTALTRADESUNKNOWN;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTMONTHTOTALTRADESUNKNOWN);
            setCURRENTMONTHTOTALTRADESUNKNOWN(refVal_setCURRENTMONTHTOTALTRADESUNKNOWN);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_MONTH_VOLUME"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_MONTH_VOLUME")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTMONTHVOLUME;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTMONTHVOLUME);
            setCURRENTMONTHVOLUME(refVal_setCURRENTMONTHVOLUME);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_MONTH_VOLUME_BUY"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_MONTH_VOLUME_BUY")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTMONTHVOLUMEBUY;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTMONTHVOLUMEBUY);
            setCURRENTMONTHVOLUMEBUY(refVal_setCURRENTMONTHVOLUMEBUY);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_MONTH_VOLUME_SELL"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_MONTH_VOLUME_SELL")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTMONTHVOLUMESELL;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTMONTHVOLUMESELL);
            setCURRENTMONTHVOLUMESELL(refVal_setCURRENTMONTHVOLUMESELL);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_MONTH_VOLUME_UNKNOWN"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_MONTH_VOLUME_UNKNOWN")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTMONTHVOLUMEUNKNOWN;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTMONTHVOLUMEUNKNOWN);
            setCURRENTMONTHVOLUMEUNKNOWN(refVal_setCURRENTMONTHVOLUMEUNKNOWN);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_WEEK_HIGH"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_WEEK_HIGH")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTWEEKHIGH;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTWEEKHIGH);
            setCURRENTWEEKHIGH(refVal_setCURRENTWEEKHIGH);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_WEEK_LOW"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_WEEK_LOW")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTWEEKLOW;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTWEEKLOW);
            setCURRENTWEEKLOW(refVal_setCURRENTWEEKLOW);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_WEEK_OPEN"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_WEEK_OPEN")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTWEEKOPEN;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTWEEKOPEN);
            setCURRENTWEEKOPEN(refVal_setCURRENTWEEKOPEN);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_WEEK_QUOTE_VOLUME"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_WEEK_QUOTE_VOLUME")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTWEEKQUOTEVOLUME;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTWEEKQUOTEVOLUME);
            setCURRENTWEEKQUOTEVOLUME(refVal_setCURRENTWEEKQUOTEVOLUME);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_WEEK_QUOTE_VOLUME_BUY"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_WEEK_QUOTE_VOLUME_BUY")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTWEEKQUOTEVOLUMEBUY;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTWEEKQUOTEVOLUMEBUY);
            setCURRENTWEEKQUOTEVOLUMEBUY(refVal_setCURRENTWEEKQUOTEVOLUMEBUY);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_WEEK_QUOTE_VOLUME_SELL"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_WEEK_QUOTE_VOLUME_SELL")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTWEEKQUOTEVOLUMESELL;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTWEEKQUOTEVOLUMESELL);
            setCURRENTWEEKQUOTEVOLUMESELL(refVal_setCURRENTWEEKQUOTEVOLUMESELL);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_WEEK_QUOTE_VOLUME_UNKNOWN"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_WEEK_QUOTE_VOLUME_UNKNOWN")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTWEEKQUOTEVOLUMEUNKNOWN;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTWEEKQUOTEVOLUMEUNKNOWN);
            setCURRENTWEEKQUOTEVOLUMEUNKNOWN(refVal_setCURRENTWEEKQUOTEVOLUMEUNKNOWN);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_WEEK_TOTAL_TRADES"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_WEEK_TOTAL_TRADES")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTWEEKTOTALTRADES;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTWEEKTOTALTRADES);
            setCURRENTWEEKTOTALTRADES(refVal_setCURRENTWEEKTOTALTRADES);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_WEEK_TOTAL_TRADES_BUY"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_WEEK_TOTAL_TRADES_BUY")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTWEEKTOTALTRADESBUY;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTWEEKTOTALTRADESBUY);
            setCURRENTWEEKTOTALTRADESBUY(refVal_setCURRENTWEEKTOTALTRADESBUY);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_WEEK_TOTAL_TRADES_SELL"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_WEEK_TOTAL_TRADES_SELL")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTWEEKTOTALTRADESSELL;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTWEEKTOTALTRADESSELL);
            setCURRENTWEEKTOTALTRADESSELL(refVal_setCURRENTWEEKTOTALTRADESSELL);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_WEEK_TOTAL_TRADES_UNKNOWN"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_WEEK_TOTAL_TRADES_UNKNOWN")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTWEEKTOTALTRADESUNKNOWN;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTWEEKTOTALTRADESUNKNOWN);
            setCURRENTWEEKTOTALTRADESUNKNOWN(refVal_setCURRENTWEEKTOTALTRADESUNKNOWN);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_WEEK_VOLUME"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_WEEK_VOLUME")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTWEEKVOLUME;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTWEEKVOLUME);
            setCURRENTWEEKVOLUME(refVal_setCURRENTWEEKVOLUME);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_WEEK_VOLUME_BUY"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_WEEK_VOLUME_BUY")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTWEEKVOLUMEBUY;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTWEEKVOLUMEBUY);
            setCURRENTWEEKVOLUMEBUY(refVal_setCURRENTWEEKVOLUMEBUY);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_WEEK_VOLUME_SELL"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_WEEK_VOLUME_SELL")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTWEEKVOLUMESELL;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTWEEKVOLUMESELL);
            setCURRENTWEEKVOLUMESELL(refVal_setCURRENTWEEKVOLUMESELL);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_WEEK_VOLUME_UNKNOWN"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_WEEK_VOLUME_UNKNOWN")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTWEEKVOLUMEUNKNOWN;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTWEEKVOLUMEUNKNOWN);
            setCURRENTWEEKVOLUMEUNKNOWN(refVal_setCURRENTWEEKVOLUMEUNKNOWN);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_YEAR_HIGH"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_YEAR_HIGH")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTYEARHIGH;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTYEARHIGH);
            setCURRENTYEARHIGH(refVal_setCURRENTYEARHIGH);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_YEAR_LOW"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_YEAR_LOW")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTYEARLOW;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTYEARLOW);
            setCURRENTYEARLOW(refVal_setCURRENTYEARLOW);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_YEAR_OPEN"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_YEAR_OPEN")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTYEAROPEN;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTYEAROPEN);
            setCURRENTYEAROPEN(refVal_setCURRENTYEAROPEN);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_YEAR_QUOTE_VOLUME"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_YEAR_QUOTE_VOLUME")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTYEARQUOTEVOLUME;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTYEARQUOTEVOLUME);
            setCURRENTYEARQUOTEVOLUME(refVal_setCURRENTYEARQUOTEVOLUME);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_YEAR_QUOTE_VOLUME_BUY"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_YEAR_QUOTE_VOLUME_BUY")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTYEARQUOTEVOLUMEBUY;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTYEARQUOTEVOLUMEBUY);
            setCURRENTYEARQUOTEVOLUMEBUY(refVal_setCURRENTYEARQUOTEVOLUMEBUY);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_YEAR_QUOTE_VOLUME_SELL"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_YEAR_QUOTE_VOLUME_SELL")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTYEARQUOTEVOLUMESELL;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTYEARQUOTEVOLUMESELL);
            setCURRENTYEARQUOTEVOLUMESELL(refVal_setCURRENTYEARQUOTEVOLUMESELL);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_YEAR_QUOTE_VOLUME_UNKNOWN"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_YEAR_QUOTE_VOLUME_UNKNOWN")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTYEARQUOTEVOLUMEUNKNOWN;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTYEARQUOTEVOLUMEUNKNOWN);
            setCURRENTYEARQUOTEVOLUMEUNKNOWN(refVal_setCURRENTYEARQUOTEVOLUMEUNKNOWN);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_YEAR_TOTAL_TRADES"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_YEAR_TOTAL_TRADES")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTYEARTOTALTRADES;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTYEARTOTALTRADES);
            setCURRENTYEARTOTALTRADES(refVal_setCURRENTYEARTOTALTRADES);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_YEAR_TOTAL_TRADES_BUY"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_YEAR_TOTAL_TRADES_BUY")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTYEARTOTALTRADESBUY;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTYEARTOTALTRADESBUY);
            setCURRENTYEARTOTALTRADESBUY(refVal_setCURRENTYEARTOTALTRADESBUY);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_YEAR_TOTAL_TRADES_SELL"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_YEAR_TOTAL_TRADES_SELL")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTYEARTOTALTRADESSELL;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTYEARTOTALTRADESSELL);
            setCURRENTYEARTOTALTRADESSELL(refVal_setCURRENTYEARTOTALTRADESSELL);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_YEAR_TOTAL_TRADES_UNKNOWN"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_YEAR_TOTAL_TRADES_UNKNOWN")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTYEARTOTALTRADESUNKNOWN;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTYEARTOTALTRADESUNKNOWN);
            setCURRENTYEARTOTALTRADESUNKNOWN(refVal_setCURRENTYEARTOTALTRADESUNKNOWN);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_YEAR_VOLUME"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_YEAR_VOLUME")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTYEARVOLUME;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTYEARVOLUME);
            setCURRENTYEARVOLUME(refVal_setCURRENTYEARVOLUME);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_YEAR_VOLUME_BUY"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_YEAR_VOLUME_BUY")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTYEARVOLUMEBUY;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTYEARVOLUMEBUY);
            setCURRENTYEARVOLUMEBUY(refVal_setCURRENTYEARVOLUMEBUY);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_YEAR_VOLUME_SELL"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_YEAR_VOLUME_SELL")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTYEARVOLUMESELL;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTYEARVOLUMESELL);
            setCURRENTYEARVOLUMESELL(refVal_setCURRENTYEARVOLUMESELL);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENT_YEAR_VOLUME_UNKNOWN"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENT_YEAR_VOLUME_UNKNOWN")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCURRENTYEARVOLUMEUNKNOWN;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENTYEARVOLUMEUNKNOWN);
            setCURRENTYEARVOLUMEUNKNOWN(refVal_setCURRENTYEARVOLUMEUNKNOWN);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("INSTRUMENT"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("INSTRUMENT")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setINSTRUMENT;
            ok &= ModelBase::fromJson(fieldValue, refVal_setINSTRUMENT);
            setINSTRUMENT(refVal_setINSTRUMENT);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("LAST_PROCESSED_TRADE_CCSEQ"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("LAST_PROCESSED_TRADE_CCSEQ")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLASTPROCESSEDTRADECCSEQ;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLASTPROCESSEDTRADECCSEQ);
            setLASTPROCESSEDTRADECCSEQ(refVal_setLASTPROCESSEDTRADECCSEQ);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("LAST_PROCESSED_TRADE_PRICE"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("LAST_PROCESSED_TRADE_PRICE")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setLASTPROCESSEDTRADEPRICE;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLASTPROCESSEDTRADEPRICE);
            setLASTPROCESSEDTRADEPRICE(refVal_setLASTPROCESSEDTRADEPRICE);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("LAST_PROCESSED_TRADE_QUANTITY"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("LAST_PROCESSED_TRADE_QUANTITY")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setLASTPROCESSEDTRADEQUANTITY;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLASTPROCESSEDTRADEQUANTITY);
            setLASTPROCESSEDTRADEQUANTITY(refVal_setLASTPROCESSEDTRADEQUANTITY);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("LAST_PROCESSED_TRADE_QUOTE_QUANTITY"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("LAST_PROCESSED_TRADE_QUOTE_QUANTITY")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setLASTPROCESSEDTRADEQUOTEQUANTITY;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLASTPROCESSEDTRADEQUOTEQUANTITY);
            setLASTPROCESSEDTRADEQUOTEQUANTITY(refVal_setLASTPROCESSEDTRADEQUOTEQUANTITY);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("LAST_PROCESSED_TRADE_SIDE"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("LAST_PROCESSED_TRADE_SIDE")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLASTPROCESSEDTRADESIDE;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLASTPROCESSEDTRADESIDE);
            setLASTPROCESSEDTRADESIDE(refVal_setLASTPROCESSEDTRADESIDE);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("LAST_PROCESSED_TRADE_TS"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("LAST_PROCESSED_TRADE_TS")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setLASTPROCESSEDTRADETS;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLASTPROCESSEDTRADETS);
            setLASTPROCESSEDTRADETS(refVal_setLASTPROCESSEDTRADETS);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("LAST_TRADE_CCSEQ"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("LAST_TRADE_CCSEQ")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLASTTRADECCSEQ;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLASTTRADECCSEQ);
            setLASTTRADECCSEQ(refVal_setLASTTRADECCSEQ);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("LAST_TRADE_ID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("LAST_TRADE_ID")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLASTTRADEID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLASTTRADEID);
            setLASTTRADEID(refVal_setLASTTRADEID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("LAST_TRADE_QUANTITY"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("LAST_TRADE_QUANTITY")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setLASTTRADEQUANTITY;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLASTTRADEQUANTITY);
            setLASTTRADEQUANTITY(refVal_setLASTTRADEQUANTITY);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("LAST_TRADE_QUOTE_QUANTITY"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("LAST_TRADE_QUOTE_QUANTITY")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setLASTTRADEQUOTEQUANTITY;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLASTTRADEQUOTEQUANTITY);
            setLASTTRADEQUOTEQUANTITY(refVal_setLASTTRADEQUOTEQUANTITY);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("LAST_TRADE_SIDE"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("LAST_TRADE_SIDE")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLASTTRADESIDE;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLASTTRADESIDE);
            setLASTTRADESIDE(refVal_setLASTTRADESIDE);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("LIFETIME_FIRST_TRADE_TS"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("LIFETIME_FIRST_TRADE_TS")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setLIFETIMEFIRSTTRADETS;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLIFETIMEFIRSTTRADETS);
            setLIFETIMEFIRSTTRADETS(refVal_setLIFETIMEFIRSTTRADETS);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("LIFETIME_HIGH"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("LIFETIME_HIGH")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setLIFETIMEHIGH;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLIFETIMEHIGH);
            setLIFETIMEHIGH(refVal_setLIFETIMEHIGH);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("LIFETIME_HIGH_TS"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("LIFETIME_HIGH_TS")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setLIFETIMEHIGHTS;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLIFETIMEHIGHTS);
            setLIFETIMEHIGHTS(refVal_setLIFETIMEHIGHTS);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("LIFETIME_LOW"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("LIFETIME_LOW")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setLIFETIMELOW;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLIFETIMELOW);
            setLIFETIMELOW(refVal_setLIFETIMELOW);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("LIFETIME_LOW_TS"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("LIFETIME_LOW_TS")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setLIFETIMELOWTS;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLIFETIMELOWTS);
            setLIFETIMELOWTS(refVal_setLIFETIMELOWTS);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("LIFETIME_OPEN"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("LIFETIME_OPEN")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setLIFETIMEOPEN;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLIFETIMEOPEN);
            setLIFETIMEOPEN(refVal_setLIFETIMEOPEN);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("LIFETIME_QUOTE_VOLUME"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("LIFETIME_QUOTE_VOLUME")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setLIFETIMEQUOTEVOLUME;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLIFETIMEQUOTEVOLUME);
            setLIFETIMEQUOTEVOLUME(refVal_setLIFETIMEQUOTEVOLUME);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("LIFETIME_QUOTE_VOLUME_BUY"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("LIFETIME_QUOTE_VOLUME_BUY")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setLIFETIMEQUOTEVOLUMEBUY;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLIFETIMEQUOTEVOLUMEBUY);
            setLIFETIMEQUOTEVOLUMEBUY(refVal_setLIFETIMEQUOTEVOLUMEBUY);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("LIFETIME_QUOTE_VOLUME_SELL"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("LIFETIME_QUOTE_VOLUME_SELL")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setLIFETIMEQUOTEVOLUMESELL;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLIFETIMEQUOTEVOLUMESELL);
            setLIFETIMEQUOTEVOLUMESELL(refVal_setLIFETIMEQUOTEVOLUMESELL);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("LIFETIME_QUOTE_VOLUME_UNKNOWN"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("LIFETIME_QUOTE_VOLUME_UNKNOWN")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setLIFETIMEQUOTEVOLUMEUNKNOWN;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLIFETIMEQUOTEVOLUMEUNKNOWN);
            setLIFETIMEQUOTEVOLUMEUNKNOWN(refVal_setLIFETIMEQUOTEVOLUMEUNKNOWN);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("LIFETIME_TOTAL_TRADES"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("LIFETIME_TOTAL_TRADES")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setLIFETIMETOTALTRADES;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLIFETIMETOTALTRADES);
            setLIFETIMETOTALTRADES(refVal_setLIFETIMETOTALTRADES);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("LIFETIME_TOTAL_TRADES_BUY"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("LIFETIME_TOTAL_TRADES_BUY")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setLIFETIMETOTALTRADESBUY;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLIFETIMETOTALTRADESBUY);
            setLIFETIMETOTALTRADESBUY(refVal_setLIFETIMETOTALTRADESBUY);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("LIFETIME_TOTAL_TRADES_SELL"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("LIFETIME_TOTAL_TRADES_SELL")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setLIFETIMETOTALTRADESSELL;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLIFETIMETOTALTRADESSELL);
            setLIFETIMETOTALTRADESSELL(refVal_setLIFETIMETOTALTRADESSELL);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("LIFETIME_TOTAL_TRADES_UNKNOWN"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("LIFETIME_TOTAL_TRADES_UNKNOWN")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setLIFETIMETOTALTRADESUNKNOWN;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLIFETIMETOTALTRADESUNKNOWN);
            setLIFETIMETOTALTRADESUNKNOWN(refVal_setLIFETIMETOTALTRADESUNKNOWN);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("LIFETIME_VOLUME"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("LIFETIME_VOLUME")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setLIFETIMEVOLUME;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLIFETIMEVOLUME);
            setLIFETIMEVOLUME(refVal_setLIFETIMEVOLUME);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("LIFETIME_VOLUME_BUY"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("LIFETIME_VOLUME_BUY")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setLIFETIMEVOLUMEBUY;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLIFETIMEVOLUMEBUY);
            setLIFETIMEVOLUMEBUY(refVal_setLIFETIMEVOLUMEBUY);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("LIFETIME_VOLUME_SELL"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("LIFETIME_VOLUME_SELL")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setLIFETIMEVOLUMESELL;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLIFETIMEVOLUMESELL);
            setLIFETIMEVOLUMESELL(refVal_setLIFETIMEVOLUMESELL);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("LIFETIME_VOLUME_UNKNOWN"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("LIFETIME_VOLUME_UNKNOWN")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setLIFETIMEVOLUMEUNKNOWN;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLIFETIMEVOLUMEUNKNOWN);
            setLIFETIMEVOLUMEUNKNOWN(refVal_setLIFETIMEVOLUMEUNKNOWN);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MAPPED_INSTRUMENT"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MAPPED_INSTRUMENT")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMAPPEDINSTRUMENT;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMAPPEDINSTRUMENT);
            setMAPPEDINSTRUMENT(refVal_setMAPPEDINSTRUMENT);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MARKET"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MARKET")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMARKET;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMARKET);
            setMARKET(refVal_setMARKET);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_180_DAY_HIGH"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_180_DAY_HIGH")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING180DAYHIGH;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING180DAYHIGH);
            setMOVING180DAYHIGH(refVal_setMOVING180DAYHIGH);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_180_DAY_LOW"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_180_DAY_LOW")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING180DAYLOW;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING180DAYLOW);
            setMOVING180DAYLOW(refVal_setMOVING180DAYLOW);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_180_DAY_OPEN"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_180_DAY_OPEN")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING180DAYOPEN;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING180DAYOPEN);
            setMOVING180DAYOPEN(refVal_setMOVING180DAYOPEN);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_180_DAY_QUOTE_VOLUME"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_180_DAY_QUOTE_VOLUME")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING180DAYQUOTEVOLUME;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING180DAYQUOTEVOLUME);
            setMOVING180DAYQUOTEVOLUME(refVal_setMOVING180DAYQUOTEVOLUME);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_180_DAY_QUOTE_VOLUME_BUY"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_180_DAY_QUOTE_VOLUME_BUY")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING180DAYQUOTEVOLUMEBUY;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING180DAYQUOTEVOLUMEBUY);
            setMOVING180DAYQUOTEVOLUMEBUY(refVal_setMOVING180DAYQUOTEVOLUMEBUY);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_180_DAY_QUOTE_VOLUME_SELL"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_180_DAY_QUOTE_VOLUME_SELL")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING180DAYQUOTEVOLUMESELL;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING180DAYQUOTEVOLUMESELL);
            setMOVING180DAYQUOTEVOLUMESELL(refVal_setMOVING180DAYQUOTEVOLUMESELL);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_180_DAY_QUOTE_VOLUME_UNKNOWN"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_180_DAY_QUOTE_VOLUME_UNKNOWN")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING180DAYQUOTEVOLUMEUNKNOWN;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING180DAYQUOTEVOLUMEUNKNOWN);
            setMOVING180DAYQUOTEVOLUMEUNKNOWN(refVal_setMOVING180DAYQUOTEVOLUMEUNKNOWN);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_180_DAY_TOTAL_TRADES"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_180_DAY_TOTAL_TRADES")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING180DAYTOTALTRADES;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING180DAYTOTALTRADES);
            setMOVING180DAYTOTALTRADES(refVal_setMOVING180DAYTOTALTRADES);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_180_DAY_TOTAL_TRADES_BUY"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_180_DAY_TOTAL_TRADES_BUY")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING180DAYTOTALTRADESBUY;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING180DAYTOTALTRADESBUY);
            setMOVING180DAYTOTALTRADESBUY(refVal_setMOVING180DAYTOTALTRADESBUY);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_180_DAY_TOTAL_TRADES_SELL"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_180_DAY_TOTAL_TRADES_SELL")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING180DAYTOTALTRADESSELL;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING180DAYTOTALTRADESSELL);
            setMOVING180DAYTOTALTRADESSELL(refVal_setMOVING180DAYTOTALTRADESSELL);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_180_DAY_TOTAL_TRADES_UNKNOWN"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_180_DAY_TOTAL_TRADES_UNKNOWN")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING180DAYTOTALTRADESUNKNOWN;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING180DAYTOTALTRADESUNKNOWN);
            setMOVING180DAYTOTALTRADESUNKNOWN(refVal_setMOVING180DAYTOTALTRADESUNKNOWN);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_180_DAY_VOLUME"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_180_DAY_VOLUME")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING180DAYVOLUME;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING180DAYVOLUME);
            setMOVING180DAYVOLUME(refVal_setMOVING180DAYVOLUME);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_180_DAY_VOLUME_BUY"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_180_DAY_VOLUME_BUY")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING180DAYVOLUMEBUY;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING180DAYVOLUMEBUY);
            setMOVING180DAYVOLUMEBUY(refVal_setMOVING180DAYVOLUMEBUY);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_180_DAY_VOLUME_SELL"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_180_DAY_VOLUME_SELL")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING180DAYVOLUMESELL;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING180DAYVOLUMESELL);
            setMOVING180DAYVOLUMESELL(refVal_setMOVING180DAYVOLUMESELL);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_180_DAY_VOLUME_UNKNOWN"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_180_DAY_VOLUME_UNKNOWN")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING180DAYVOLUMEUNKNOWN;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING180DAYVOLUMEUNKNOWN);
            setMOVING180DAYVOLUMEUNKNOWN(refVal_setMOVING180DAYVOLUMEUNKNOWN);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_24_HOUR_HIGH"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_24_HOUR_HIGH")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING24HOURHIGH;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING24HOURHIGH);
            setMOVING24HOURHIGH(refVal_setMOVING24HOURHIGH);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_24_HOUR_LOW"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_24_HOUR_LOW")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING24HOURLOW;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING24HOURLOW);
            setMOVING24HOURLOW(refVal_setMOVING24HOURLOW);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_24_HOUR_OPEN"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_24_HOUR_OPEN")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING24HOUROPEN;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING24HOUROPEN);
            setMOVING24HOUROPEN(refVal_setMOVING24HOUROPEN);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_24_HOUR_QUOTE_VOLUME"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_24_HOUR_QUOTE_VOLUME")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING24HOURQUOTEVOLUME;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING24HOURQUOTEVOLUME);
            setMOVING24HOURQUOTEVOLUME(refVal_setMOVING24HOURQUOTEVOLUME);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_24_HOUR_QUOTE_VOLUME_BUY"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_24_HOUR_QUOTE_VOLUME_BUY")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING24HOURQUOTEVOLUMEBUY;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING24HOURQUOTEVOLUMEBUY);
            setMOVING24HOURQUOTEVOLUMEBUY(refVal_setMOVING24HOURQUOTEVOLUMEBUY);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_24_HOUR_QUOTE_VOLUME_SELL"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_24_HOUR_QUOTE_VOLUME_SELL")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING24HOURQUOTEVOLUMESELL;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING24HOURQUOTEVOLUMESELL);
            setMOVING24HOURQUOTEVOLUMESELL(refVal_setMOVING24HOURQUOTEVOLUMESELL);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_24_HOUR_QUOTE_VOLUME_UNKNOWN"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_24_HOUR_QUOTE_VOLUME_UNKNOWN")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING24HOURQUOTEVOLUMEUNKNOWN;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING24HOURQUOTEVOLUMEUNKNOWN);
            setMOVING24HOURQUOTEVOLUMEUNKNOWN(refVal_setMOVING24HOURQUOTEVOLUMEUNKNOWN);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_24_HOUR_TOTAL_TRADES"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_24_HOUR_TOTAL_TRADES")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING24HOURTOTALTRADES;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING24HOURTOTALTRADES);
            setMOVING24HOURTOTALTRADES(refVal_setMOVING24HOURTOTALTRADES);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_24_HOUR_TOTAL_TRADES_BUY"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_24_HOUR_TOTAL_TRADES_BUY")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING24HOURTOTALTRADESBUY;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING24HOURTOTALTRADESBUY);
            setMOVING24HOURTOTALTRADESBUY(refVal_setMOVING24HOURTOTALTRADESBUY);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_24_HOUR_TOTAL_TRADES_SELL"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_24_HOUR_TOTAL_TRADES_SELL")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING24HOURTOTALTRADESSELL;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING24HOURTOTALTRADESSELL);
            setMOVING24HOURTOTALTRADESSELL(refVal_setMOVING24HOURTOTALTRADESSELL);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_24_HOUR_TOTAL_TRADES_UNKNOWN"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_24_HOUR_TOTAL_TRADES_UNKNOWN")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING24HOURTOTALTRADESUNKNOWN;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING24HOURTOTALTRADESUNKNOWN);
            setMOVING24HOURTOTALTRADESUNKNOWN(refVal_setMOVING24HOURTOTALTRADESUNKNOWN);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_24_HOUR_VOLUME"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_24_HOUR_VOLUME")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING24HOURVOLUME;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING24HOURVOLUME);
            setMOVING24HOURVOLUME(refVal_setMOVING24HOURVOLUME);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_24_HOUR_VOLUME_BUY"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_24_HOUR_VOLUME_BUY")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING24HOURVOLUMEBUY;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING24HOURVOLUMEBUY);
            setMOVING24HOURVOLUMEBUY(refVal_setMOVING24HOURVOLUMEBUY);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_24_HOUR_VOLUME_SELL"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_24_HOUR_VOLUME_SELL")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING24HOURVOLUMESELL;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING24HOURVOLUMESELL);
            setMOVING24HOURVOLUMESELL(refVal_setMOVING24HOURVOLUMESELL);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_24_HOUR_VOLUME_UNKNOWN"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_24_HOUR_VOLUME_UNKNOWN")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING24HOURVOLUMEUNKNOWN;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING24HOURVOLUMEUNKNOWN);
            setMOVING24HOURVOLUMEUNKNOWN(refVal_setMOVING24HOURVOLUMEUNKNOWN);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_30_DAY_HIGH"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_30_DAY_HIGH")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING30DAYHIGH;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING30DAYHIGH);
            setMOVING30DAYHIGH(refVal_setMOVING30DAYHIGH);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_30_DAY_LOW"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_30_DAY_LOW")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING30DAYLOW;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING30DAYLOW);
            setMOVING30DAYLOW(refVal_setMOVING30DAYLOW);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_30_DAY_OPEN"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_30_DAY_OPEN")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING30DAYOPEN;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING30DAYOPEN);
            setMOVING30DAYOPEN(refVal_setMOVING30DAYOPEN);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_30_DAY_QUOTE_VOLUME"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_30_DAY_QUOTE_VOLUME")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING30DAYQUOTEVOLUME;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING30DAYQUOTEVOLUME);
            setMOVING30DAYQUOTEVOLUME(refVal_setMOVING30DAYQUOTEVOLUME);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_30_DAY_QUOTE_VOLUME_BUY"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_30_DAY_QUOTE_VOLUME_BUY")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING30DAYQUOTEVOLUMEBUY;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING30DAYQUOTEVOLUMEBUY);
            setMOVING30DAYQUOTEVOLUMEBUY(refVal_setMOVING30DAYQUOTEVOLUMEBUY);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_30_DAY_QUOTE_VOLUME_SELL"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_30_DAY_QUOTE_VOLUME_SELL")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING30DAYQUOTEVOLUMESELL;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING30DAYQUOTEVOLUMESELL);
            setMOVING30DAYQUOTEVOLUMESELL(refVal_setMOVING30DAYQUOTEVOLUMESELL);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_30_DAY_QUOTE_VOLUME_UNKNOWN"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_30_DAY_QUOTE_VOLUME_UNKNOWN")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING30DAYQUOTEVOLUMEUNKNOWN;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING30DAYQUOTEVOLUMEUNKNOWN);
            setMOVING30DAYQUOTEVOLUMEUNKNOWN(refVal_setMOVING30DAYQUOTEVOLUMEUNKNOWN);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_30_DAY_TOTAL_TRADES"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_30_DAY_TOTAL_TRADES")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING30DAYTOTALTRADES;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING30DAYTOTALTRADES);
            setMOVING30DAYTOTALTRADES(refVal_setMOVING30DAYTOTALTRADES);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_30_DAY_TOTAL_TRADES_BUY"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_30_DAY_TOTAL_TRADES_BUY")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING30DAYTOTALTRADESBUY;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING30DAYTOTALTRADESBUY);
            setMOVING30DAYTOTALTRADESBUY(refVal_setMOVING30DAYTOTALTRADESBUY);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_30_DAY_TOTAL_TRADES_SELL"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_30_DAY_TOTAL_TRADES_SELL")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING30DAYTOTALTRADESSELL;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING30DAYTOTALTRADESSELL);
            setMOVING30DAYTOTALTRADESSELL(refVal_setMOVING30DAYTOTALTRADESSELL);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_30_DAY_TOTAL_TRADES_UNKNOWN"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_30_DAY_TOTAL_TRADES_UNKNOWN")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING30DAYTOTALTRADESUNKNOWN;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING30DAYTOTALTRADESUNKNOWN);
            setMOVING30DAYTOTALTRADESUNKNOWN(refVal_setMOVING30DAYTOTALTRADESUNKNOWN);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_30_DAY_VOLUME"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_30_DAY_VOLUME")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING30DAYVOLUME;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING30DAYVOLUME);
            setMOVING30DAYVOLUME(refVal_setMOVING30DAYVOLUME);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_30_DAY_VOLUME_BUY"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_30_DAY_VOLUME_BUY")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING30DAYVOLUMEBUY;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING30DAYVOLUMEBUY);
            setMOVING30DAYVOLUMEBUY(refVal_setMOVING30DAYVOLUMEBUY);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_30_DAY_VOLUME_SELL"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_30_DAY_VOLUME_SELL")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING30DAYVOLUMESELL;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING30DAYVOLUMESELL);
            setMOVING30DAYVOLUMESELL(refVal_setMOVING30DAYVOLUMESELL);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_30_DAY_VOLUME_UNKNOWN"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_30_DAY_VOLUME_UNKNOWN")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING30DAYVOLUMEUNKNOWN;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING30DAYVOLUMEUNKNOWN);
            setMOVING30DAYVOLUMEUNKNOWN(refVal_setMOVING30DAYVOLUMEUNKNOWN);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_365_DAY_HIGH"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_365_DAY_HIGH")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING365DAYHIGH;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING365DAYHIGH);
            setMOVING365DAYHIGH(refVal_setMOVING365DAYHIGH);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_365_DAY_LOW"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_365_DAY_LOW")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING365DAYLOW;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING365DAYLOW);
            setMOVING365DAYLOW(refVal_setMOVING365DAYLOW);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_365_DAY_OPEN"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_365_DAY_OPEN")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING365DAYOPEN;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING365DAYOPEN);
            setMOVING365DAYOPEN(refVal_setMOVING365DAYOPEN);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_365_DAY_QUOTE_VOLUME"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_365_DAY_QUOTE_VOLUME")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING365DAYQUOTEVOLUME;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING365DAYQUOTEVOLUME);
            setMOVING365DAYQUOTEVOLUME(refVal_setMOVING365DAYQUOTEVOLUME);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_365_DAY_QUOTE_VOLUME_BUY"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_365_DAY_QUOTE_VOLUME_BUY")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING365DAYQUOTEVOLUMEBUY;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING365DAYQUOTEVOLUMEBUY);
            setMOVING365DAYQUOTEVOLUMEBUY(refVal_setMOVING365DAYQUOTEVOLUMEBUY);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_365_DAY_QUOTE_VOLUME_SELL"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_365_DAY_QUOTE_VOLUME_SELL")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING365DAYQUOTEVOLUMESELL;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING365DAYQUOTEVOLUMESELL);
            setMOVING365DAYQUOTEVOLUMESELL(refVal_setMOVING365DAYQUOTEVOLUMESELL);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_365_DAY_QUOTE_VOLUME_UNKNOWN"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_365_DAY_QUOTE_VOLUME_UNKNOWN")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING365DAYQUOTEVOLUMEUNKNOWN;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING365DAYQUOTEVOLUMEUNKNOWN);
            setMOVING365DAYQUOTEVOLUMEUNKNOWN(refVal_setMOVING365DAYQUOTEVOLUMEUNKNOWN);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_365_DAY_TOTAL_TRADES"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_365_DAY_TOTAL_TRADES")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING365DAYTOTALTRADES;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING365DAYTOTALTRADES);
            setMOVING365DAYTOTALTRADES(refVal_setMOVING365DAYTOTALTRADES);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_365_DAY_TOTAL_TRADES_BUY"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_365_DAY_TOTAL_TRADES_BUY")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING365DAYTOTALTRADESBUY;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING365DAYTOTALTRADESBUY);
            setMOVING365DAYTOTALTRADESBUY(refVal_setMOVING365DAYTOTALTRADESBUY);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_365_DAY_TOTAL_TRADES_SELL"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_365_DAY_TOTAL_TRADES_SELL")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING365DAYTOTALTRADESSELL;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING365DAYTOTALTRADESSELL);
            setMOVING365DAYTOTALTRADESSELL(refVal_setMOVING365DAYTOTALTRADESSELL);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_365_DAY_TOTAL_TRADES_UNKNOWN"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_365_DAY_TOTAL_TRADES_UNKNOWN")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING365DAYTOTALTRADESUNKNOWN;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING365DAYTOTALTRADESUNKNOWN);
            setMOVING365DAYTOTALTRADESUNKNOWN(refVal_setMOVING365DAYTOTALTRADESUNKNOWN);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_365_DAY_VOLUME"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_365_DAY_VOLUME")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING365DAYVOLUME;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING365DAYVOLUME);
            setMOVING365DAYVOLUME(refVal_setMOVING365DAYVOLUME);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_365_DAY_VOLUME_BUY"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_365_DAY_VOLUME_BUY")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING365DAYVOLUMEBUY;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING365DAYVOLUMEBUY);
            setMOVING365DAYVOLUMEBUY(refVal_setMOVING365DAYVOLUMEBUY);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_365_DAY_VOLUME_SELL"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_365_DAY_VOLUME_SELL")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING365DAYVOLUMESELL;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING365DAYVOLUMESELL);
            setMOVING365DAYVOLUMESELL(refVal_setMOVING365DAYVOLUMESELL);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_365_DAY_VOLUME_UNKNOWN"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_365_DAY_VOLUME_UNKNOWN")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING365DAYVOLUMEUNKNOWN;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING365DAYVOLUMEUNKNOWN);
            setMOVING365DAYVOLUMEUNKNOWN(refVal_setMOVING365DAYVOLUMEUNKNOWN);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_7_DAY_HIGH"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_7_DAY_HIGH")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING7DAYHIGH;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING7DAYHIGH);
            setMOVING7DAYHIGH(refVal_setMOVING7DAYHIGH);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_7_DAY_LOW"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_7_DAY_LOW")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING7DAYLOW;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING7DAYLOW);
            setMOVING7DAYLOW(refVal_setMOVING7DAYLOW);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_7_DAY_OPEN"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_7_DAY_OPEN")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING7DAYOPEN;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING7DAYOPEN);
            setMOVING7DAYOPEN(refVal_setMOVING7DAYOPEN);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_7_DAY_QUOTE_VOLUME"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_7_DAY_QUOTE_VOLUME")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING7DAYQUOTEVOLUME;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING7DAYQUOTEVOLUME);
            setMOVING7DAYQUOTEVOLUME(refVal_setMOVING7DAYQUOTEVOLUME);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_7_DAY_QUOTE_VOLUME_BUY"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_7_DAY_QUOTE_VOLUME_BUY")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING7DAYQUOTEVOLUMEBUY;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING7DAYQUOTEVOLUMEBUY);
            setMOVING7DAYQUOTEVOLUMEBUY(refVal_setMOVING7DAYQUOTEVOLUMEBUY);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_7_DAY_QUOTE_VOLUME_SELL"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_7_DAY_QUOTE_VOLUME_SELL")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING7DAYQUOTEVOLUMESELL;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING7DAYQUOTEVOLUMESELL);
            setMOVING7DAYQUOTEVOLUMESELL(refVal_setMOVING7DAYQUOTEVOLUMESELL);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_7_DAY_QUOTE_VOLUME_UNKNOWN"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_7_DAY_QUOTE_VOLUME_UNKNOWN")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING7DAYQUOTEVOLUMEUNKNOWN;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING7DAYQUOTEVOLUMEUNKNOWN);
            setMOVING7DAYQUOTEVOLUMEUNKNOWN(refVal_setMOVING7DAYQUOTEVOLUMEUNKNOWN);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_7_DAY_TOTAL_TRADES"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_7_DAY_TOTAL_TRADES")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING7DAYTOTALTRADES;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING7DAYTOTALTRADES);
            setMOVING7DAYTOTALTRADES(refVal_setMOVING7DAYTOTALTRADES);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_7_DAY_TOTAL_TRADES_BUY"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_7_DAY_TOTAL_TRADES_BUY")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING7DAYTOTALTRADESBUY;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING7DAYTOTALTRADESBUY);
            setMOVING7DAYTOTALTRADESBUY(refVal_setMOVING7DAYTOTALTRADESBUY);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_7_DAY_TOTAL_TRADES_SELL"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_7_DAY_TOTAL_TRADES_SELL")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING7DAYTOTALTRADESSELL;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING7DAYTOTALTRADESSELL);
            setMOVING7DAYTOTALTRADESSELL(refVal_setMOVING7DAYTOTALTRADESSELL);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_7_DAY_TOTAL_TRADES_UNKNOWN"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_7_DAY_TOTAL_TRADES_UNKNOWN")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING7DAYTOTALTRADESUNKNOWN;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING7DAYTOTALTRADESUNKNOWN);
            setMOVING7DAYTOTALTRADESUNKNOWN(refVal_setMOVING7DAYTOTALTRADESUNKNOWN);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_7_DAY_VOLUME"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_7_DAY_VOLUME")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING7DAYVOLUME;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING7DAYVOLUME);
            setMOVING7DAYVOLUME(refVal_setMOVING7DAYVOLUME);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_7_DAY_VOLUME_BUY"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_7_DAY_VOLUME_BUY")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING7DAYVOLUMEBUY;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING7DAYVOLUMEBUY);
            setMOVING7DAYVOLUMEBUY(refVal_setMOVING7DAYVOLUMEBUY);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_7_DAY_VOLUME_SELL"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_7_DAY_VOLUME_SELL")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING7DAYVOLUMESELL;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING7DAYVOLUMESELL);
            setMOVING7DAYVOLUMESELL(refVal_setMOVING7DAYVOLUMESELL);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_7_DAY_VOLUME_UNKNOWN"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_7_DAY_VOLUME_UNKNOWN")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING7DAYVOLUMEUNKNOWN;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING7DAYVOLUMEUNKNOWN);
            setMOVING7DAYVOLUMEUNKNOWN(refVal_setMOVING7DAYVOLUMEUNKNOWN);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_90_DAY_HIGH"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_90_DAY_HIGH")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING90DAYHIGH;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING90DAYHIGH);
            setMOVING90DAYHIGH(refVal_setMOVING90DAYHIGH);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_90_DAY_LOW"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_90_DAY_LOW")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING90DAYLOW;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING90DAYLOW);
            setMOVING90DAYLOW(refVal_setMOVING90DAYLOW);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_90_DAY_OPEN"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_90_DAY_OPEN")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING90DAYOPEN;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING90DAYOPEN);
            setMOVING90DAYOPEN(refVal_setMOVING90DAYOPEN);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_90_DAY_QUOTE_VOLUME"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_90_DAY_QUOTE_VOLUME")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING90DAYQUOTEVOLUME;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING90DAYQUOTEVOLUME);
            setMOVING90DAYQUOTEVOLUME(refVal_setMOVING90DAYQUOTEVOLUME);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_90_DAY_QUOTE_VOLUME_BUY"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_90_DAY_QUOTE_VOLUME_BUY")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING90DAYQUOTEVOLUMEBUY;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING90DAYQUOTEVOLUMEBUY);
            setMOVING90DAYQUOTEVOLUMEBUY(refVal_setMOVING90DAYQUOTEVOLUMEBUY);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_90_DAY_QUOTE_VOLUME_SELL"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_90_DAY_QUOTE_VOLUME_SELL")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING90DAYQUOTEVOLUMESELL;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING90DAYQUOTEVOLUMESELL);
            setMOVING90DAYQUOTEVOLUMESELL(refVal_setMOVING90DAYQUOTEVOLUMESELL);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_90_DAY_QUOTE_VOLUME_UNKNOWN"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_90_DAY_QUOTE_VOLUME_UNKNOWN")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING90DAYQUOTEVOLUMEUNKNOWN;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING90DAYQUOTEVOLUMEUNKNOWN);
            setMOVING90DAYQUOTEVOLUMEUNKNOWN(refVal_setMOVING90DAYQUOTEVOLUMEUNKNOWN);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_90_DAY_TOTAL_TRADES"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_90_DAY_TOTAL_TRADES")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING90DAYTOTALTRADES;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING90DAYTOTALTRADES);
            setMOVING90DAYTOTALTRADES(refVal_setMOVING90DAYTOTALTRADES);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_90_DAY_TOTAL_TRADES_BUY"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_90_DAY_TOTAL_TRADES_BUY")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING90DAYTOTALTRADESBUY;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING90DAYTOTALTRADESBUY);
            setMOVING90DAYTOTALTRADESBUY(refVal_setMOVING90DAYTOTALTRADESBUY);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_90_DAY_TOTAL_TRADES_SELL"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_90_DAY_TOTAL_TRADES_SELL")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING90DAYTOTALTRADESSELL;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING90DAYTOTALTRADESSELL);
            setMOVING90DAYTOTALTRADESSELL(refVal_setMOVING90DAYTOTALTRADESSELL);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_90_DAY_TOTAL_TRADES_UNKNOWN"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_90_DAY_TOTAL_TRADES_UNKNOWN")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING90DAYTOTALTRADESUNKNOWN;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING90DAYTOTALTRADESUNKNOWN);
            setMOVING90DAYTOTALTRADESUNKNOWN(refVal_setMOVING90DAYTOTALTRADESUNKNOWN);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_90_DAY_VOLUME"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_90_DAY_VOLUME")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING90DAYVOLUME;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING90DAYVOLUME);
            setMOVING90DAYVOLUME(refVal_setMOVING90DAYVOLUME);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_90_DAY_VOLUME_BUY"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_90_DAY_VOLUME_BUY")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING90DAYVOLUMEBUY;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING90DAYVOLUMEBUY);
            setMOVING90DAYVOLUMEBUY(refVal_setMOVING90DAYVOLUMEBUY);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_90_DAY_VOLUME_SELL"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_90_DAY_VOLUME_SELL")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING90DAYVOLUMESELL;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING90DAYVOLUMESELL);
            setMOVING90DAYVOLUMESELL(refVal_setMOVING90DAYVOLUMESELL);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MOVING_90_DAY_VOLUME_UNKNOWN"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MOVING_90_DAY_VOLUME_UNKNOWN")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMOVING90DAYVOLUMEUNKNOWN;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMOVING90DAYVOLUMEUNKNOWN);
            setMOVING90DAYVOLUMEUNKNOWN(refVal_setMOVING90DAYVOLUMEUNKNOWN);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("PRICE"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("PRICE")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPRICE;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPRICE);
            setPRICE(refVal_setPRICE);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("PRICE_FLAG"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("PRICE_FLAG")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPRICEFLAG;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPRICEFLAG);
            setPRICEFLAG(refVal_setPRICEFLAG);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("PRICE_LAST_UPDATE_TS"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("PRICE_LAST_UPDATE_TS")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPRICELASTUPDATETS;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPRICELASTUPDATETS);
            setPRICELASTUPDATETS(refVal_setPRICELASTUPDATETS);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("QUOTE"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("QUOTE")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setQUOTE;
            ok &= ModelBase::fromJson(fieldValue, refVal_setQUOTE);
            setQUOTE(refVal_setQUOTE);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("TOP_ASK_LAST_UPDATE_TS"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("TOP_ASK_LAST_UPDATE_TS")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTOPASKLASTUPDATETS;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTOPASKLASTUPDATETS);
            setTOPASKLASTUPDATETS(refVal_setTOPASKLASTUPDATETS);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("TOP_ASK_PRICE"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("TOP_ASK_PRICE")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTOPASKPRICE;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTOPASKPRICE);
            setTOPASKPRICE(refVal_setTOPASKPRICE);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("TOP_ASK_QUANTITY"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("TOP_ASK_QUANTITY")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTOPASKQUANTITY;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTOPASKQUANTITY);
            setTOPASKQUANTITY(refVal_setTOPASKQUANTITY);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("TOP_BID_LAST_UPDATE_TS"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("TOP_BID_LAST_UPDATE_TS")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTOPBIDLASTUPDATETS;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTOPBIDLASTUPDATETS);
            setTOPBIDLASTUPDATETS(refVal_setTOPBIDLASTUPDATETS);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("TOP_BID_PRICE"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("TOP_BID_PRICE")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTOPBIDPRICE;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTOPBIDPRICE);
            setTOPBIDPRICE(refVal_setTOPBIDPRICE);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("TOP_BID_QUANTITY"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("TOP_BID_QUANTITY")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTOPBIDQUANTITY;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTOPBIDQUANTITY);
            setTOPBIDQUANTITY(refVal_setTOPBIDQUANTITY);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("TYPE"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("TYPE")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTYPE;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTYPE);
            setTYPE(refVal_setTYPE);
        }
    }
    return ok;
}

void SPOT_INSTRUMENT_MARKET_DATA::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_BASEIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("BASE")), m_BASE));
    }
    if(m_CCSEQIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CCSEQ")), m_CCSEQ));
    }
    if(m_CURRENT_DAY_HIGHIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_DAY_HIGH")), m_CURRENT_DAY_HIGH));
    }
    if(m_CURRENT_DAY_LOWIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_DAY_LOW")), m_CURRENT_DAY_LOW));
    }
    if(m_CURRENT_DAY_OPENIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_DAY_OPEN")), m_CURRENT_DAY_OPEN));
    }
    if(m_CURRENT_DAY_QUOTE_VOLUMEIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_DAY_QUOTE_VOLUME")), m_CURRENT_DAY_QUOTE_VOLUME));
    }
    if(m_CURRENT_DAY_QUOTE_VOLUME_BUYIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_DAY_QUOTE_VOLUME_BUY")), m_CURRENT_DAY_QUOTE_VOLUME_BUY));
    }
    if(m_CURRENT_DAY_QUOTE_VOLUME_SELLIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_DAY_QUOTE_VOLUME_SELL")), m_CURRENT_DAY_QUOTE_VOLUME_SELL));
    }
    if(m_CURRENT_DAY_QUOTE_VOLUME_UNKNOWNIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_DAY_QUOTE_VOLUME_UNKNOWN")), m_CURRENT_DAY_QUOTE_VOLUME_UNKNOWN));
    }
    if(m_CURRENT_DAY_TOTAL_TRADESIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_DAY_TOTAL_TRADES")), m_CURRENT_DAY_TOTAL_TRADES));
    }
    if(m_CURRENT_DAY_TOTAL_TRADES_BUYIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_DAY_TOTAL_TRADES_BUY")), m_CURRENT_DAY_TOTAL_TRADES_BUY));
    }
    if(m_CURRENT_DAY_TOTAL_TRADES_SELLIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_DAY_TOTAL_TRADES_SELL")), m_CURRENT_DAY_TOTAL_TRADES_SELL));
    }
    if(m_CURRENT_DAY_TOTAL_TRADES_UNKNOWNIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_DAY_TOTAL_TRADES_UNKNOWN")), m_CURRENT_DAY_TOTAL_TRADES_UNKNOWN));
    }
    if(m_CURRENT_DAY_VOLUMEIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_DAY_VOLUME")), m_CURRENT_DAY_VOLUME));
    }
    if(m_CURRENT_DAY_VOLUME_BUYIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_DAY_VOLUME_BUY")), m_CURRENT_DAY_VOLUME_BUY));
    }
    if(m_CURRENT_DAY_VOLUME_SELLIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_DAY_VOLUME_SELL")), m_CURRENT_DAY_VOLUME_SELL));
    }
    if(m_CURRENT_DAY_VOLUME_UNKNOWNIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_DAY_VOLUME_UNKNOWN")), m_CURRENT_DAY_VOLUME_UNKNOWN));
    }
    if(m_CURRENT_HOUR_HIGHIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_HOUR_HIGH")), m_CURRENT_HOUR_HIGH));
    }
    if(m_CURRENT_HOUR_LOWIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_HOUR_LOW")), m_CURRENT_HOUR_LOW));
    }
    if(m_CURRENT_HOUR_OPENIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_HOUR_OPEN")), m_CURRENT_HOUR_OPEN));
    }
    if(m_CURRENT_HOUR_QUOTE_VOLUMEIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_HOUR_QUOTE_VOLUME")), m_CURRENT_HOUR_QUOTE_VOLUME));
    }
    if(m_CURRENT_HOUR_QUOTE_VOLUME_BUYIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_HOUR_QUOTE_VOLUME_BUY")), m_CURRENT_HOUR_QUOTE_VOLUME_BUY));
    }
    if(m_CURRENT_HOUR_QUOTE_VOLUME_SELLIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_HOUR_QUOTE_VOLUME_SELL")), m_CURRENT_HOUR_QUOTE_VOLUME_SELL));
    }
    if(m_CURRENT_HOUR_QUOTE_VOLUME_UNKNOWNIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_HOUR_QUOTE_VOLUME_UNKNOWN")), m_CURRENT_HOUR_QUOTE_VOLUME_UNKNOWN));
    }
    if(m_CURRENT_HOUR_TOTAL_TRADESIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_HOUR_TOTAL_TRADES")), m_CURRENT_HOUR_TOTAL_TRADES));
    }
    if(m_CURRENT_HOUR_TOTAL_TRADES_BUYIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_HOUR_TOTAL_TRADES_BUY")), m_CURRENT_HOUR_TOTAL_TRADES_BUY));
    }
    if(m_CURRENT_HOUR_TOTAL_TRADES_SELLIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_HOUR_TOTAL_TRADES_SELL")), m_CURRENT_HOUR_TOTAL_TRADES_SELL));
    }
    if(m_CURRENT_HOUR_TOTAL_TRADES_UNKNOWNIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_HOUR_TOTAL_TRADES_UNKNOWN")), m_CURRENT_HOUR_TOTAL_TRADES_UNKNOWN));
    }
    if(m_CURRENT_HOUR_VOLUMEIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_HOUR_VOLUME")), m_CURRENT_HOUR_VOLUME));
    }
    if(m_CURRENT_HOUR_VOLUME_BUYIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_HOUR_VOLUME_BUY")), m_CURRENT_HOUR_VOLUME_BUY));
    }
    if(m_CURRENT_HOUR_VOLUME_SELLIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_HOUR_VOLUME_SELL")), m_CURRENT_HOUR_VOLUME_SELL));
    }
    if(m_CURRENT_HOUR_VOLUME_UNKNOWNIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_HOUR_VOLUME_UNKNOWN")), m_CURRENT_HOUR_VOLUME_UNKNOWN));
    }
    if(m_CURRENT_MONTH_HIGHIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_MONTH_HIGH")), m_CURRENT_MONTH_HIGH));
    }
    if(m_CURRENT_MONTH_LOWIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_MONTH_LOW")), m_CURRENT_MONTH_LOW));
    }
    if(m_CURRENT_MONTH_OPENIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_MONTH_OPEN")), m_CURRENT_MONTH_OPEN));
    }
    if(m_CURRENT_MONTH_QUOTE_VOLUMEIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_MONTH_QUOTE_VOLUME")), m_CURRENT_MONTH_QUOTE_VOLUME));
    }
    if(m_CURRENT_MONTH_QUOTE_VOLUME_BUYIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_MONTH_QUOTE_VOLUME_BUY")), m_CURRENT_MONTH_QUOTE_VOLUME_BUY));
    }
    if(m_CURRENT_MONTH_QUOTE_VOLUME_SELLIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_MONTH_QUOTE_VOLUME_SELL")), m_CURRENT_MONTH_QUOTE_VOLUME_SELL));
    }
    if(m_CURRENT_MONTH_QUOTE_VOLUME_UNKNOWNIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_MONTH_QUOTE_VOLUME_UNKNOWN")), m_CURRENT_MONTH_QUOTE_VOLUME_UNKNOWN));
    }
    if(m_CURRENT_MONTH_TOTAL_TRADESIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_MONTH_TOTAL_TRADES")), m_CURRENT_MONTH_TOTAL_TRADES));
    }
    if(m_CURRENT_MONTH_TOTAL_TRADES_BUYIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_MONTH_TOTAL_TRADES_BUY")), m_CURRENT_MONTH_TOTAL_TRADES_BUY));
    }
    if(m_CURRENT_MONTH_TOTAL_TRADES_SELLIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_MONTH_TOTAL_TRADES_SELL")), m_CURRENT_MONTH_TOTAL_TRADES_SELL));
    }
    if(m_CURRENT_MONTH_TOTAL_TRADES_UNKNOWNIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_MONTH_TOTAL_TRADES_UNKNOWN")), m_CURRENT_MONTH_TOTAL_TRADES_UNKNOWN));
    }
    if(m_CURRENT_MONTH_VOLUMEIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_MONTH_VOLUME")), m_CURRENT_MONTH_VOLUME));
    }
    if(m_CURRENT_MONTH_VOLUME_BUYIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_MONTH_VOLUME_BUY")), m_CURRENT_MONTH_VOLUME_BUY));
    }
    if(m_CURRENT_MONTH_VOLUME_SELLIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_MONTH_VOLUME_SELL")), m_CURRENT_MONTH_VOLUME_SELL));
    }
    if(m_CURRENT_MONTH_VOLUME_UNKNOWNIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_MONTH_VOLUME_UNKNOWN")), m_CURRENT_MONTH_VOLUME_UNKNOWN));
    }
    if(m_CURRENT_WEEK_HIGHIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_WEEK_HIGH")), m_CURRENT_WEEK_HIGH));
    }
    if(m_CURRENT_WEEK_LOWIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_WEEK_LOW")), m_CURRENT_WEEK_LOW));
    }
    if(m_CURRENT_WEEK_OPENIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_WEEK_OPEN")), m_CURRENT_WEEK_OPEN));
    }
    if(m_CURRENT_WEEK_QUOTE_VOLUMEIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_WEEK_QUOTE_VOLUME")), m_CURRENT_WEEK_QUOTE_VOLUME));
    }
    if(m_CURRENT_WEEK_QUOTE_VOLUME_BUYIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_WEEK_QUOTE_VOLUME_BUY")), m_CURRENT_WEEK_QUOTE_VOLUME_BUY));
    }
    if(m_CURRENT_WEEK_QUOTE_VOLUME_SELLIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_WEEK_QUOTE_VOLUME_SELL")), m_CURRENT_WEEK_QUOTE_VOLUME_SELL));
    }
    if(m_CURRENT_WEEK_QUOTE_VOLUME_UNKNOWNIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_WEEK_QUOTE_VOLUME_UNKNOWN")), m_CURRENT_WEEK_QUOTE_VOLUME_UNKNOWN));
    }
    if(m_CURRENT_WEEK_TOTAL_TRADESIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_WEEK_TOTAL_TRADES")), m_CURRENT_WEEK_TOTAL_TRADES));
    }
    if(m_CURRENT_WEEK_TOTAL_TRADES_BUYIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_WEEK_TOTAL_TRADES_BUY")), m_CURRENT_WEEK_TOTAL_TRADES_BUY));
    }
    if(m_CURRENT_WEEK_TOTAL_TRADES_SELLIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_WEEK_TOTAL_TRADES_SELL")), m_CURRENT_WEEK_TOTAL_TRADES_SELL));
    }
    if(m_CURRENT_WEEK_TOTAL_TRADES_UNKNOWNIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_WEEK_TOTAL_TRADES_UNKNOWN")), m_CURRENT_WEEK_TOTAL_TRADES_UNKNOWN));
    }
    if(m_CURRENT_WEEK_VOLUMEIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_WEEK_VOLUME")), m_CURRENT_WEEK_VOLUME));
    }
    if(m_CURRENT_WEEK_VOLUME_BUYIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_WEEK_VOLUME_BUY")), m_CURRENT_WEEK_VOLUME_BUY));
    }
    if(m_CURRENT_WEEK_VOLUME_SELLIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_WEEK_VOLUME_SELL")), m_CURRENT_WEEK_VOLUME_SELL));
    }
    if(m_CURRENT_WEEK_VOLUME_UNKNOWNIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_WEEK_VOLUME_UNKNOWN")), m_CURRENT_WEEK_VOLUME_UNKNOWN));
    }
    if(m_CURRENT_YEAR_HIGHIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_YEAR_HIGH")), m_CURRENT_YEAR_HIGH));
    }
    if(m_CURRENT_YEAR_LOWIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_YEAR_LOW")), m_CURRENT_YEAR_LOW));
    }
    if(m_CURRENT_YEAR_OPENIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_YEAR_OPEN")), m_CURRENT_YEAR_OPEN));
    }
    if(m_CURRENT_YEAR_QUOTE_VOLUMEIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_YEAR_QUOTE_VOLUME")), m_CURRENT_YEAR_QUOTE_VOLUME));
    }
    if(m_CURRENT_YEAR_QUOTE_VOLUME_BUYIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_YEAR_QUOTE_VOLUME_BUY")), m_CURRENT_YEAR_QUOTE_VOLUME_BUY));
    }
    if(m_CURRENT_YEAR_QUOTE_VOLUME_SELLIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_YEAR_QUOTE_VOLUME_SELL")), m_CURRENT_YEAR_QUOTE_VOLUME_SELL));
    }
    if(m_CURRENT_YEAR_QUOTE_VOLUME_UNKNOWNIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_YEAR_QUOTE_VOLUME_UNKNOWN")), m_CURRENT_YEAR_QUOTE_VOLUME_UNKNOWN));
    }
    if(m_CURRENT_YEAR_TOTAL_TRADESIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_YEAR_TOTAL_TRADES")), m_CURRENT_YEAR_TOTAL_TRADES));
    }
    if(m_CURRENT_YEAR_TOTAL_TRADES_BUYIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_YEAR_TOTAL_TRADES_BUY")), m_CURRENT_YEAR_TOTAL_TRADES_BUY));
    }
    if(m_CURRENT_YEAR_TOTAL_TRADES_SELLIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_YEAR_TOTAL_TRADES_SELL")), m_CURRENT_YEAR_TOTAL_TRADES_SELL));
    }
    if(m_CURRENT_YEAR_TOTAL_TRADES_UNKNOWNIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_YEAR_TOTAL_TRADES_UNKNOWN")), m_CURRENT_YEAR_TOTAL_TRADES_UNKNOWN));
    }
    if(m_CURRENT_YEAR_VOLUMEIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_YEAR_VOLUME")), m_CURRENT_YEAR_VOLUME));
    }
    if(m_CURRENT_YEAR_VOLUME_BUYIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_YEAR_VOLUME_BUY")), m_CURRENT_YEAR_VOLUME_BUY));
    }
    if(m_CURRENT_YEAR_VOLUME_SELLIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_YEAR_VOLUME_SELL")), m_CURRENT_YEAR_VOLUME_SELL));
    }
    if(m_CURRENT_YEAR_VOLUME_UNKNOWNIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENT_YEAR_VOLUME_UNKNOWN")), m_CURRENT_YEAR_VOLUME_UNKNOWN));
    }
    if(m_INSTRUMENTIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("INSTRUMENT")), m_INSTRUMENT));
    }
    if(m_LAST_PROCESSED_TRADE_CCSEQIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("LAST_PROCESSED_TRADE_CCSEQ")), m_LAST_PROCESSED_TRADE_CCSEQ));
    }
    if(m_LAST_PROCESSED_TRADE_PRICEIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("LAST_PROCESSED_TRADE_PRICE")), m_LAST_PROCESSED_TRADE_PRICE));
    }
    if(m_LAST_PROCESSED_TRADE_QUANTITYIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("LAST_PROCESSED_TRADE_QUANTITY")), m_LAST_PROCESSED_TRADE_QUANTITY));
    }
    if(m_LAST_PROCESSED_TRADE_QUOTE_QUANTITYIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("LAST_PROCESSED_TRADE_QUOTE_QUANTITY")), m_LAST_PROCESSED_TRADE_QUOTE_QUANTITY));
    }
    if(m_LAST_PROCESSED_TRADE_SIDEIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("LAST_PROCESSED_TRADE_SIDE")), m_LAST_PROCESSED_TRADE_SIDE));
    }
    if(m_LAST_PROCESSED_TRADE_TSIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("LAST_PROCESSED_TRADE_TS")), m_LAST_PROCESSED_TRADE_TS));
    }
    if(m_LAST_TRADE_CCSEQIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("LAST_TRADE_CCSEQ")), m_LAST_TRADE_CCSEQ));
    }
    if(m_LAST_TRADE_IDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("LAST_TRADE_ID")), m_LAST_TRADE_ID));
    }
    if(m_LAST_TRADE_QUANTITYIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("LAST_TRADE_QUANTITY")), m_LAST_TRADE_QUANTITY));
    }
    if(m_LAST_TRADE_QUOTE_QUANTITYIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("LAST_TRADE_QUOTE_QUANTITY")), m_LAST_TRADE_QUOTE_QUANTITY));
    }
    if(m_LAST_TRADE_SIDEIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("LAST_TRADE_SIDE")), m_LAST_TRADE_SIDE));
    }
    if(m_LIFETIME_FIRST_TRADE_TSIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("LIFETIME_FIRST_TRADE_TS")), m_LIFETIME_FIRST_TRADE_TS));
    }
    if(m_LIFETIME_HIGHIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("LIFETIME_HIGH")), m_LIFETIME_HIGH));
    }
    if(m_LIFETIME_HIGH_TSIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("LIFETIME_HIGH_TS")), m_LIFETIME_HIGH_TS));
    }
    if(m_LIFETIME_LOWIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("LIFETIME_LOW")), m_LIFETIME_LOW));
    }
    if(m_LIFETIME_LOW_TSIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("LIFETIME_LOW_TS")), m_LIFETIME_LOW_TS));
    }
    if(m_LIFETIME_OPENIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("LIFETIME_OPEN")), m_LIFETIME_OPEN));
    }
    if(m_LIFETIME_QUOTE_VOLUMEIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("LIFETIME_QUOTE_VOLUME")), m_LIFETIME_QUOTE_VOLUME));
    }
    if(m_LIFETIME_QUOTE_VOLUME_BUYIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("LIFETIME_QUOTE_VOLUME_BUY")), m_LIFETIME_QUOTE_VOLUME_BUY));
    }
    if(m_LIFETIME_QUOTE_VOLUME_SELLIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("LIFETIME_QUOTE_VOLUME_SELL")), m_LIFETIME_QUOTE_VOLUME_SELL));
    }
    if(m_LIFETIME_QUOTE_VOLUME_UNKNOWNIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("LIFETIME_QUOTE_VOLUME_UNKNOWN")), m_LIFETIME_QUOTE_VOLUME_UNKNOWN));
    }
    if(m_LIFETIME_TOTAL_TRADESIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("LIFETIME_TOTAL_TRADES")), m_LIFETIME_TOTAL_TRADES));
    }
    if(m_LIFETIME_TOTAL_TRADES_BUYIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("LIFETIME_TOTAL_TRADES_BUY")), m_LIFETIME_TOTAL_TRADES_BUY));
    }
    if(m_LIFETIME_TOTAL_TRADES_SELLIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("LIFETIME_TOTAL_TRADES_SELL")), m_LIFETIME_TOTAL_TRADES_SELL));
    }
    if(m_LIFETIME_TOTAL_TRADES_UNKNOWNIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("LIFETIME_TOTAL_TRADES_UNKNOWN")), m_LIFETIME_TOTAL_TRADES_UNKNOWN));
    }
    if(m_LIFETIME_VOLUMEIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("LIFETIME_VOLUME")), m_LIFETIME_VOLUME));
    }
    if(m_LIFETIME_VOLUME_BUYIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("LIFETIME_VOLUME_BUY")), m_LIFETIME_VOLUME_BUY));
    }
    if(m_LIFETIME_VOLUME_SELLIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("LIFETIME_VOLUME_SELL")), m_LIFETIME_VOLUME_SELL));
    }
    if(m_LIFETIME_VOLUME_UNKNOWNIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("LIFETIME_VOLUME_UNKNOWN")), m_LIFETIME_VOLUME_UNKNOWN));
    }
    if(m_MAPPED_INSTRUMENTIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MAPPED_INSTRUMENT")), m_MAPPED_INSTRUMENT));
    }
    if(m_MARKETIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MARKET")), m_MARKET));
    }
    if(m_MOVING_180_DAY_HIGHIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_180_DAY_HIGH")), m_MOVING_180_DAY_HIGH));
    }
    if(m_MOVING_180_DAY_LOWIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_180_DAY_LOW")), m_MOVING_180_DAY_LOW));
    }
    if(m_MOVING_180_DAY_OPENIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_180_DAY_OPEN")), m_MOVING_180_DAY_OPEN));
    }
    if(m_MOVING_180_DAY_QUOTE_VOLUMEIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_180_DAY_QUOTE_VOLUME")), m_MOVING_180_DAY_QUOTE_VOLUME));
    }
    if(m_MOVING_180_DAY_QUOTE_VOLUME_BUYIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_180_DAY_QUOTE_VOLUME_BUY")), m_MOVING_180_DAY_QUOTE_VOLUME_BUY));
    }
    if(m_MOVING_180_DAY_QUOTE_VOLUME_SELLIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_180_DAY_QUOTE_VOLUME_SELL")), m_MOVING_180_DAY_QUOTE_VOLUME_SELL));
    }
    if(m_MOVING_180_DAY_QUOTE_VOLUME_UNKNOWNIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_180_DAY_QUOTE_VOLUME_UNKNOWN")), m_MOVING_180_DAY_QUOTE_VOLUME_UNKNOWN));
    }
    if(m_MOVING_180_DAY_TOTAL_TRADESIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_180_DAY_TOTAL_TRADES")), m_MOVING_180_DAY_TOTAL_TRADES));
    }
    if(m_MOVING_180_DAY_TOTAL_TRADES_BUYIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_180_DAY_TOTAL_TRADES_BUY")), m_MOVING_180_DAY_TOTAL_TRADES_BUY));
    }
    if(m_MOVING_180_DAY_TOTAL_TRADES_SELLIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_180_DAY_TOTAL_TRADES_SELL")), m_MOVING_180_DAY_TOTAL_TRADES_SELL));
    }
    if(m_MOVING_180_DAY_TOTAL_TRADES_UNKNOWNIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_180_DAY_TOTAL_TRADES_UNKNOWN")), m_MOVING_180_DAY_TOTAL_TRADES_UNKNOWN));
    }
    if(m_MOVING_180_DAY_VOLUMEIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_180_DAY_VOLUME")), m_MOVING_180_DAY_VOLUME));
    }
    if(m_MOVING_180_DAY_VOLUME_BUYIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_180_DAY_VOLUME_BUY")), m_MOVING_180_DAY_VOLUME_BUY));
    }
    if(m_MOVING_180_DAY_VOLUME_SELLIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_180_DAY_VOLUME_SELL")), m_MOVING_180_DAY_VOLUME_SELL));
    }
    if(m_MOVING_180_DAY_VOLUME_UNKNOWNIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_180_DAY_VOLUME_UNKNOWN")), m_MOVING_180_DAY_VOLUME_UNKNOWN));
    }
    if(m_MOVING_24_HOUR_HIGHIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_24_HOUR_HIGH")), m_MOVING_24_HOUR_HIGH));
    }
    if(m_MOVING_24_HOUR_LOWIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_24_HOUR_LOW")), m_MOVING_24_HOUR_LOW));
    }
    if(m_MOVING_24_HOUR_OPENIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_24_HOUR_OPEN")), m_MOVING_24_HOUR_OPEN));
    }
    if(m_MOVING_24_HOUR_QUOTE_VOLUMEIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_24_HOUR_QUOTE_VOLUME")), m_MOVING_24_HOUR_QUOTE_VOLUME));
    }
    if(m_MOVING_24_HOUR_QUOTE_VOLUME_BUYIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_24_HOUR_QUOTE_VOLUME_BUY")), m_MOVING_24_HOUR_QUOTE_VOLUME_BUY));
    }
    if(m_MOVING_24_HOUR_QUOTE_VOLUME_SELLIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_24_HOUR_QUOTE_VOLUME_SELL")), m_MOVING_24_HOUR_QUOTE_VOLUME_SELL));
    }
    if(m_MOVING_24_HOUR_QUOTE_VOLUME_UNKNOWNIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_24_HOUR_QUOTE_VOLUME_UNKNOWN")), m_MOVING_24_HOUR_QUOTE_VOLUME_UNKNOWN));
    }
    if(m_MOVING_24_HOUR_TOTAL_TRADESIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_24_HOUR_TOTAL_TRADES")), m_MOVING_24_HOUR_TOTAL_TRADES));
    }
    if(m_MOVING_24_HOUR_TOTAL_TRADES_BUYIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_24_HOUR_TOTAL_TRADES_BUY")), m_MOVING_24_HOUR_TOTAL_TRADES_BUY));
    }
    if(m_MOVING_24_HOUR_TOTAL_TRADES_SELLIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_24_HOUR_TOTAL_TRADES_SELL")), m_MOVING_24_HOUR_TOTAL_TRADES_SELL));
    }
    if(m_MOVING_24_HOUR_TOTAL_TRADES_UNKNOWNIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_24_HOUR_TOTAL_TRADES_UNKNOWN")), m_MOVING_24_HOUR_TOTAL_TRADES_UNKNOWN));
    }
    if(m_MOVING_24_HOUR_VOLUMEIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_24_HOUR_VOLUME")), m_MOVING_24_HOUR_VOLUME));
    }
    if(m_MOVING_24_HOUR_VOLUME_BUYIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_24_HOUR_VOLUME_BUY")), m_MOVING_24_HOUR_VOLUME_BUY));
    }
    if(m_MOVING_24_HOUR_VOLUME_SELLIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_24_HOUR_VOLUME_SELL")), m_MOVING_24_HOUR_VOLUME_SELL));
    }
    if(m_MOVING_24_HOUR_VOLUME_UNKNOWNIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_24_HOUR_VOLUME_UNKNOWN")), m_MOVING_24_HOUR_VOLUME_UNKNOWN));
    }
    if(m_MOVING_30_DAY_HIGHIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_30_DAY_HIGH")), m_MOVING_30_DAY_HIGH));
    }
    if(m_MOVING_30_DAY_LOWIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_30_DAY_LOW")), m_MOVING_30_DAY_LOW));
    }
    if(m_MOVING_30_DAY_OPENIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_30_DAY_OPEN")), m_MOVING_30_DAY_OPEN));
    }
    if(m_MOVING_30_DAY_QUOTE_VOLUMEIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_30_DAY_QUOTE_VOLUME")), m_MOVING_30_DAY_QUOTE_VOLUME));
    }
    if(m_MOVING_30_DAY_QUOTE_VOLUME_BUYIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_30_DAY_QUOTE_VOLUME_BUY")), m_MOVING_30_DAY_QUOTE_VOLUME_BUY));
    }
    if(m_MOVING_30_DAY_QUOTE_VOLUME_SELLIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_30_DAY_QUOTE_VOLUME_SELL")), m_MOVING_30_DAY_QUOTE_VOLUME_SELL));
    }
    if(m_MOVING_30_DAY_QUOTE_VOLUME_UNKNOWNIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_30_DAY_QUOTE_VOLUME_UNKNOWN")), m_MOVING_30_DAY_QUOTE_VOLUME_UNKNOWN));
    }
    if(m_MOVING_30_DAY_TOTAL_TRADESIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_30_DAY_TOTAL_TRADES")), m_MOVING_30_DAY_TOTAL_TRADES));
    }
    if(m_MOVING_30_DAY_TOTAL_TRADES_BUYIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_30_DAY_TOTAL_TRADES_BUY")), m_MOVING_30_DAY_TOTAL_TRADES_BUY));
    }
    if(m_MOVING_30_DAY_TOTAL_TRADES_SELLIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_30_DAY_TOTAL_TRADES_SELL")), m_MOVING_30_DAY_TOTAL_TRADES_SELL));
    }
    if(m_MOVING_30_DAY_TOTAL_TRADES_UNKNOWNIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_30_DAY_TOTAL_TRADES_UNKNOWN")), m_MOVING_30_DAY_TOTAL_TRADES_UNKNOWN));
    }
    if(m_MOVING_30_DAY_VOLUMEIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_30_DAY_VOLUME")), m_MOVING_30_DAY_VOLUME));
    }
    if(m_MOVING_30_DAY_VOLUME_BUYIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_30_DAY_VOLUME_BUY")), m_MOVING_30_DAY_VOLUME_BUY));
    }
    if(m_MOVING_30_DAY_VOLUME_SELLIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_30_DAY_VOLUME_SELL")), m_MOVING_30_DAY_VOLUME_SELL));
    }
    if(m_MOVING_30_DAY_VOLUME_UNKNOWNIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_30_DAY_VOLUME_UNKNOWN")), m_MOVING_30_DAY_VOLUME_UNKNOWN));
    }
    if(m_MOVING_365_DAY_HIGHIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_365_DAY_HIGH")), m_MOVING_365_DAY_HIGH));
    }
    if(m_MOVING_365_DAY_LOWIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_365_DAY_LOW")), m_MOVING_365_DAY_LOW));
    }
    if(m_MOVING_365_DAY_OPENIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_365_DAY_OPEN")), m_MOVING_365_DAY_OPEN));
    }
    if(m_MOVING_365_DAY_QUOTE_VOLUMEIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_365_DAY_QUOTE_VOLUME")), m_MOVING_365_DAY_QUOTE_VOLUME));
    }
    if(m_MOVING_365_DAY_QUOTE_VOLUME_BUYIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_365_DAY_QUOTE_VOLUME_BUY")), m_MOVING_365_DAY_QUOTE_VOLUME_BUY));
    }
    if(m_MOVING_365_DAY_QUOTE_VOLUME_SELLIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_365_DAY_QUOTE_VOLUME_SELL")), m_MOVING_365_DAY_QUOTE_VOLUME_SELL));
    }
    if(m_MOVING_365_DAY_QUOTE_VOLUME_UNKNOWNIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_365_DAY_QUOTE_VOLUME_UNKNOWN")), m_MOVING_365_DAY_QUOTE_VOLUME_UNKNOWN));
    }
    if(m_MOVING_365_DAY_TOTAL_TRADESIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_365_DAY_TOTAL_TRADES")), m_MOVING_365_DAY_TOTAL_TRADES));
    }
    if(m_MOVING_365_DAY_TOTAL_TRADES_BUYIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_365_DAY_TOTAL_TRADES_BUY")), m_MOVING_365_DAY_TOTAL_TRADES_BUY));
    }
    if(m_MOVING_365_DAY_TOTAL_TRADES_SELLIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_365_DAY_TOTAL_TRADES_SELL")), m_MOVING_365_DAY_TOTAL_TRADES_SELL));
    }
    if(m_MOVING_365_DAY_TOTAL_TRADES_UNKNOWNIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_365_DAY_TOTAL_TRADES_UNKNOWN")), m_MOVING_365_DAY_TOTAL_TRADES_UNKNOWN));
    }
    if(m_MOVING_365_DAY_VOLUMEIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_365_DAY_VOLUME")), m_MOVING_365_DAY_VOLUME));
    }
    if(m_MOVING_365_DAY_VOLUME_BUYIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_365_DAY_VOLUME_BUY")), m_MOVING_365_DAY_VOLUME_BUY));
    }
    if(m_MOVING_365_DAY_VOLUME_SELLIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_365_DAY_VOLUME_SELL")), m_MOVING_365_DAY_VOLUME_SELL));
    }
    if(m_MOVING_365_DAY_VOLUME_UNKNOWNIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_365_DAY_VOLUME_UNKNOWN")), m_MOVING_365_DAY_VOLUME_UNKNOWN));
    }
    if(m_MOVING_7_DAY_HIGHIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_7_DAY_HIGH")), m_MOVING_7_DAY_HIGH));
    }
    if(m_MOVING_7_DAY_LOWIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_7_DAY_LOW")), m_MOVING_7_DAY_LOW));
    }
    if(m_MOVING_7_DAY_OPENIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_7_DAY_OPEN")), m_MOVING_7_DAY_OPEN));
    }
    if(m_MOVING_7_DAY_QUOTE_VOLUMEIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_7_DAY_QUOTE_VOLUME")), m_MOVING_7_DAY_QUOTE_VOLUME));
    }
    if(m_MOVING_7_DAY_QUOTE_VOLUME_BUYIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_7_DAY_QUOTE_VOLUME_BUY")), m_MOVING_7_DAY_QUOTE_VOLUME_BUY));
    }
    if(m_MOVING_7_DAY_QUOTE_VOLUME_SELLIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_7_DAY_QUOTE_VOLUME_SELL")), m_MOVING_7_DAY_QUOTE_VOLUME_SELL));
    }
    if(m_MOVING_7_DAY_QUOTE_VOLUME_UNKNOWNIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_7_DAY_QUOTE_VOLUME_UNKNOWN")), m_MOVING_7_DAY_QUOTE_VOLUME_UNKNOWN));
    }
    if(m_MOVING_7_DAY_TOTAL_TRADESIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_7_DAY_TOTAL_TRADES")), m_MOVING_7_DAY_TOTAL_TRADES));
    }
    if(m_MOVING_7_DAY_TOTAL_TRADES_BUYIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_7_DAY_TOTAL_TRADES_BUY")), m_MOVING_7_DAY_TOTAL_TRADES_BUY));
    }
    if(m_MOVING_7_DAY_TOTAL_TRADES_SELLIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_7_DAY_TOTAL_TRADES_SELL")), m_MOVING_7_DAY_TOTAL_TRADES_SELL));
    }
    if(m_MOVING_7_DAY_TOTAL_TRADES_UNKNOWNIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_7_DAY_TOTAL_TRADES_UNKNOWN")), m_MOVING_7_DAY_TOTAL_TRADES_UNKNOWN));
    }
    if(m_MOVING_7_DAY_VOLUMEIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_7_DAY_VOLUME")), m_MOVING_7_DAY_VOLUME));
    }
    if(m_MOVING_7_DAY_VOLUME_BUYIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_7_DAY_VOLUME_BUY")), m_MOVING_7_DAY_VOLUME_BUY));
    }
    if(m_MOVING_7_DAY_VOLUME_SELLIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_7_DAY_VOLUME_SELL")), m_MOVING_7_DAY_VOLUME_SELL));
    }
    if(m_MOVING_7_DAY_VOLUME_UNKNOWNIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_7_DAY_VOLUME_UNKNOWN")), m_MOVING_7_DAY_VOLUME_UNKNOWN));
    }
    if(m_MOVING_90_DAY_HIGHIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_90_DAY_HIGH")), m_MOVING_90_DAY_HIGH));
    }
    if(m_MOVING_90_DAY_LOWIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_90_DAY_LOW")), m_MOVING_90_DAY_LOW));
    }
    if(m_MOVING_90_DAY_OPENIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_90_DAY_OPEN")), m_MOVING_90_DAY_OPEN));
    }
    if(m_MOVING_90_DAY_QUOTE_VOLUMEIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_90_DAY_QUOTE_VOLUME")), m_MOVING_90_DAY_QUOTE_VOLUME));
    }
    if(m_MOVING_90_DAY_QUOTE_VOLUME_BUYIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_90_DAY_QUOTE_VOLUME_BUY")), m_MOVING_90_DAY_QUOTE_VOLUME_BUY));
    }
    if(m_MOVING_90_DAY_QUOTE_VOLUME_SELLIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_90_DAY_QUOTE_VOLUME_SELL")), m_MOVING_90_DAY_QUOTE_VOLUME_SELL));
    }
    if(m_MOVING_90_DAY_QUOTE_VOLUME_UNKNOWNIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_90_DAY_QUOTE_VOLUME_UNKNOWN")), m_MOVING_90_DAY_QUOTE_VOLUME_UNKNOWN));
    }
    if(m_MOVING_90_DAY_TOTAL_TRADESIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_90_DAY_TOTAL_TRADES")), m_MOVING_90_DAY_TOTAL_TRADES));
    }
    if(m_MOVING_90_DAY_TOTAL_TRADES_BUYIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_90_DAY_TOTAL_TRADES_BUY")), m_MOVING_90_DAY_TOTAL_TRADES_BUY));
    }
    if(m_MOVING_90_DAY_TOTAL_TRADES_SELLIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_90_DAY_TOTAL_TRADES_SELL")), m_MOVING_90_DAY_TOTAL_TRADES_SELL));
    }
    if(m_MOVING_90_DAY_TOTAL_TRADES_UNKNOWNIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_90_DAY_TOTAL_TRADES_UNKNOWN")), m_MOVING_90_DAY_TOTAL_TRADES_UNKNOWN));
    }
    if(m_MOVING_90_DAY_VOLUMEIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_90_DAY_VOLUME")), m_MOVING_90_DAY_VOLUME));
    }
    if(m_MOVING_90_DAY_VOLUME_BUYIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_90_DAY_VOLUME_BUY")), m_MOVING_90_DAY_VOLUME_BUY));
    }
    if(m_MOVING_90_DAY_VOLUME_SELLIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_90_DAY_VOLUME_SELL")), m_MOVING_90_DAY_VOLUME_SELL));
    }
    if(m_MOVING_90_DAY_VOLUME_UNKNOWNIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MOVING_90_DAY_VOLUME_UNKNOWN")), m_MOVING_90_DAY_VOLUME_UNKNOWN));
    }
    if(m_PRICEIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("PRICE")), m_PRICE));
    }
    if(m_PRICE_FLAGIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("PRICE_FLAG")), m_PRICE_FLAG));
    }
    if(m_PRICE_LAST_UPDATE_TSIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("PRICE_LAST_UPDATE_TS")), m_PRICE_LAST_UPDATE_TS));
    }
    if(m_QUOTEIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("QUOTE")), m_QUOTE));
    }
    if(m_TOP_ASK_LAST_UPDATE_TSIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("TOP_ASK_LAST_UPDATE_TS")), m_TOP_ASK_LAST_UPDATE_TS));
    }
    if(m_TOP_ASK_PRICEIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("TOP_ASK_PRICE")), m_TOP_ASK_PRICE));
    }
    if(m_TOP_ASK_QUANTITYIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("TOP_ASK_QUANTITY")), m_TOP_ASK_QUANTITY));
    }
    if(m_TOP_BID_LAST_UPDATE_TSIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("TOP_BID_LAST_UPDATE_TS")), m_TOP_BID_LAST_UPDATE_TS));
    }
    if(m_TOP_BID_PRICEIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("TOP_BID_PRICE")), m_TOP_BID_PRICE));
    }
    if(m_TOP_BID_QUANTITYIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("TOP_BID_QUANTITY")), m_TOP_BID_QUANTITY));
    }
    if(m_TYPEIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("TYPE")), m_TYPE));
    }
}

bool SPOT_INSTRUMENT_MARKET_DATA::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("BASE"))))
    {
        utility::string_t refVal_setBASE;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("BASE"))), refVal_setBASE );
        setBASE(refVal_setBASE);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CCSEQ"))))
    {
        int32_t refVal_setCCSEQ;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CCSEQ"))), refVal_setCCSEQ );
        setCCSEQ(refVal_setCCSEQ);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_DAY_HIGH"))))
    {
        int32_t refVal_setCURRENTDAYHIGH;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_DAY_HIGH"))), refVal_setCURRENTDAYHIGH );
        setCURRENTDAYHIGH(refVal_setCURRENTDAYHIGH);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_DAY_LOW"))))
    {
        int32_t refVal_setCURRENTDAYLOW;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_DAY_LOW"))), refVal_setCURRENTDAYLOW );
        setCURRENTDAYLOW(refVal_setCURRENTDAYLOW);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_DAY_OPEN"))))
    {
        int32_t refVal_setCURRENTDAYOPEN;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_DAY_OPEN"))), refVal_setCURRENTDAYOPEN );
        setCURRENTDAYOPEN(refVal_setCURRENTDAYOPEN);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_DAY_QUOTE_VOLUME"))))
    {
        int32_t refVal_setCURRENTDAYQUOTEVOLUME;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_DAY_QUOTE_VOLUME"))), refVal_setCURRENTDAYQUOTEVOLUME );
        setCURRENTDAYQUOTEVOLUME(refVal_setCURRENTDAYQUOTEVOLUME);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_DAY_QUOTE_VOLUME_BUY"))))
    {
        int32_t refVal_setCURRENTDAYQUOTEVOLUMEBUY;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_DAY_QUOTE_VOLUME_BUY"))), refVal_setCURRENTDAYQUOTEVOLUMEBUY );
        setCURRENTDAYQUOTEVOLUMEBUY(refVal_setCURRENTDAYQUOTEVOLUMEBUY);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_DAY_QUOTE_VOLUME_SELL"))))
    {
        int32_t refVal_setCURRENTDAYQUOTEVOLUMESELL;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_DAY_QUOTE_VOLUME_SELL"))), refVal_setCURRENTDAYQUOTEVOLUMESELL );
        setCURRENTDAYQUOTEVOLUMESELL(refVal_setCURRENTDAYQUOTEVOLUMESELL);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_DAY_QUOTE_VOLUME_UNKNOWN"))))
    {
        int32_t refVal_setCURRENTDAYQUOTEVOLUMEUNKNOWN;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_DAY_QUOTE_VOLUME_UNKNOWN"))), refVal_setCURRENTDAYQUOTEVOLUMEUNKNOWN );
        setCURRENTDAYQUOTEVOLUMEUNKNOWN(refVal_setCURRENTDAYQUOTEVOLUMEUNKNOWN);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_DAY_TOTAL_TRADES"))))
    {
        int32_t refVal_setCURRENTDAYTOTALTRADES;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_DAY_TOTAL_TRADES"))), refVal_setCURRENTDAYTOTALTRADES );
        setCURRENTDAYTOTALTRADES(refVal_setCURRENTDAYTOTALTRADES);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_DAY_TOTAL_TRADES_BUY"))))
    {
        int32_t refVal_setCURRENTDAYTOTALTRADESBUY;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_DAY_TOTAL_TRADES_BUY"))), refVal_setCURRENTDAYTOTALTRADESBUY );
        setCURRENTDAYTOTALTRADESBUY(refVal_setCURRENTDAYTOTALTRADESBUY);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_DAY_TOTAL_TRADES_SELL"))))
    {
        int32_t refVal_setCURRENTDAYTOTALTRADESSELL;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_DAY_TOTAL_TRADES_SELL"))), refVal_setCURRENTDAYTOTALTRADESSELL );
        setCURRENTDAYTOTALTRADESSELL(refVal_setCURRENTDAYTOTALTRADESSELL);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_DAY_TOTAL_TRADES_UNKNOWN"))))
    {
        int32_t refVal_setCURRENTDAYTOTALTRADESUNKNOWN;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_DAY_TOTAL_TRADES_UNKNOWN"))), refVal_setCURRENTDAYTOTALTRADESUNKNOWN );
        setCURRENTDAYTOTALTRADESUNKNOWN(refVal_setCURRENTDAYTOTALTRADESUNKNOWN);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_DAY_VOLUME"))))
    {
        int32_t refVal_setCURRENTDAYVOLUME;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_DAY_VOLUME"))), refVal_setCURRENTDAYVOLUME );
        setCURRENTDAYVOLUME(refVal_setCURRENTDAYVOLUME);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_DAY_VOLUME_BUY"))))
    {
        int32_t refVal_setCURRENTDAYVOLUMEBUY;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_DAY_VOLUME_BUY"))), refVal_setCURRENTDAYVOLUMEBUY );
        setCURRENTDAYVOLUMEBUY(refVal_setCURRENTDAYVOLUMEBUY);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_DAY_VOLUME_SELL"))))
    {
        int32_t refVal_setCURRENTDAYVOLUMESELL;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_DAY_VOLUME_SELL"))), refVal_setCURRENTDAYVOLUMESELL );
        setCURRENTDAYVOLUMESELL(refVal_setCURRENTDAYVOLUMESELL);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_DAY_VOLUME_UNKNOWN"))))
    {
        int32_t refVal_setCURRENTDAYVOLUMEUNKNOWN;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_DAY_VOLUME_UNKNOWN"))), refVal_setCURRENTDAYVOLUMEUNKNOWN );
        setCURRENTDAYVOLUMEUNKNOWN(refVal_setCURRENTDAYVOLUMEUNKNOWN);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_HOUR_HIGH"))))
    {
        int32_t refVal_setCURRENTHOURHIGH;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_HOUR_HIGH"))), refVal_setCURRENTHOURHIGH );
        setCURRENTHOURHIGH(refVal_setCURRENTHOURHIGH);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_HOUR_LOW"))))
    {
        int32_t refVal_setCURRENTHOURLOW;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_HOUR_LOW"))), refVal_setCURRENTHOURLOW );
        setCURRENTHOURLOW(refVal_setCURRENTHOURLOW);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_HOUR_OPEN"))))
    {
        int32_t refVal_setCURRENTHOUROPEN;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_HOUR_OPEN"))), refVal_setCURRENTHOUROPEN );
        setCURRENTHOUROPEN(refVal_setCURRENTHOUROPEN);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_HOUR_QUOTE_VOLUME"))))
    {
        int32_t refVal_setCURRENTHOURQUOTEVOLUME;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_HOUR_QUOTE_VOLUME"))), refVal_setCURRENTHOURQUOTEVOLUME );
        setCURRENTHOURQUOTEVOLUME(refVal_setCURRENTHOURQUOTEVOLUME);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_HOUR_QUOTE_VOLUME_BUY"))))
    {
        int32_t refVal_setCURRENTHOURQUOTEVOLUMEBUY;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_HOUR_QUOTE_VOLUME_BUY"))), refVal_setCURRENTHOURQUOTEVOLUMEBUY );
        setCURRENTHOURQUOTEVOLUMEBUY(refVal_setCURRENTHOURQUOTEVOLUMEBUY);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_HOUR_QUOTE_VOLUME_SELL"))))
    {
        int32_t refVal_setCURRENTHOURQUOTEVOLUMESELL;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_HOUR_QUOTE_VOLUME_SELL"))), refVal_setCURRENTHOURQUOTEVOLUMESELL );
        setCURRENTHOURQUOTEVOLUMESELL(refVal_setCURRENTHOURQUOTEVOLUMESELL);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_HOUR_QUOTE_VOLUME_UNKNOWN"))))
    {
        int32_t refVal_setCURRENTHOURQUOTEVOLUMEUNKNOWN;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_HOUR_QUOTE_VOLUME_UNKNOWN"))), refVal_setCURRENTHOURQUOTEVOLUMEUNKNOWN );
        setCURRENTHOURQUOTEVOLUMEUNKNOWN(refVal_setCURRENTHOURQUOTEVOLUMEUNKNOWN);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_HOUR_TOTAL_TRADES"))))
    {
        int32_t refVal_setCURRENTHOURTOTALTRADES;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_HOUR_TOTAL_TRADES"))), refVal_setCURRENTHOURTOTALTRADES );
        setCURRENTHOURTOTALTRADES(refVal_setCURRENTHOURTOTALTRADES);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_HOUR_TOTAL_TRADES_BUY"))))
    {
        int32_t refVal_setCURRENTHOURTOTALTRADESBUY;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_HOUR_TOTAL_TRADES_BUY"))), refVal_setCURRENTHOURTOTALTRADESBUY );
        setCURRENTHOURTOTALTRADESBUY(refVal_setCURRENTHOURTOTALTRADESBUY);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_HOUR_TOTAL_TRADES_SELL"))))
    {
        int32_t refVal_setCURRENTHOURTOTALTRADESSELL;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_HOUR_TOTAL_TRADES_SELL"))), refVal_setCURRENTHOURTOTALTRADESSELL );
        setCURRENTHOURTOTALTRADESSELL(refVal_setCURRENTHOURTOTALTRADESSELL);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_HOUR_TOTAL_TRADES_UNKNOWN"))))
    {
        int32_t refVal_setCURRENTHOURTOTALTRADESUNKNOWN;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_HOUR_TOTAL_TRADES_UNKNOWN"))), refVal_setCURRENTHOURTOTALTRADESUNKNOWN );
        setCURRENTHOURTOTALTRADESUNKNOWN(refVal_setCURRENTHOURTOTALTRADESUNKNOWN);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_HOUR_VOLUME"))))
    {
        int32_t refVal_setCURRENTHOURVOLUME;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_HOUR_VOLUME"))), refVal_setCURRENTHOURVOLUME );
        setCURRENTHOURVOLUME(refVal_setCURRENTHOURVOLUME);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_HOUR_VOLUME_BUY"))))
    {
        int32_t refVal_setCURRENTHOURVOLUMEBUY;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_HOUR_VOLUME_BUY"))), refVal_setCURRENTHOURVOLUMEBUY );
        setCURRENTHOURVOLUMEBUY(refVal_setCURRENTHOURVOLUMEBUY);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_HOUR_VOLUME_SELL"))))
    {
        int32_t refVal_setCURRENTHOURVOLUMESELL;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_HOUR_VOLUME_SELL"))), refVal_setCURRENTHOURVOLUMESELL );
        setCURRENTHOURVOLUMESELL(refVal_setCURRENTHOURVOLUMESELL);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_HOUR_VOLUME_UNKNOWN"))))
    {
        int32_t refVal_setCURRENTHOURVOLUMEUNKNOWN;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_HOUR_VOLUME_UNKNOWN"))), refVal_setCURRENTHOURVOLUMEUNKNOWN );
        setCURRENTHOURVOLUMEUNKNOWN(refVal_setCURRENTHOURVOLUMEUNKNOWN);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_MONTH_HIGH"))))
    {
        int32_t refVal_setCURRENTMONTHHIGH;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_MONTH_HIGH"))), refVal_setCURRENTMONTHHIGH );
        setCURRENTMONTHHIGH(refVal_setCURRENTMONTHHIGH);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_MONTH_LOW"))))
    {
        int32_t refVal_setCURRENTMONTHLOW;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_MONTH_LOW"))), refVal_setCURRENTMONTHLOW );
        setCURRENTMONTHLOW(refVal_setCURRENTMONTHLOW);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_MONTH_OPEN"))))
    {
        int32_t refVal_setCURRENTMONTHOPEN;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_MONTH_OPEN"))), refVal_setCURRENTMONTHOPEN );
        setCURRENTMONTHOPEN(refVal_setCURRENTMONTHOPEN);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_MONTH_QUOTE_VOLUME"))))
    {
        int32_t refVal_setCURRENTMONTHQUOTEVOLUME;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_MONTH_QUOTE_VOLUME"))), refVal_setCURRENTMONTHQUOTEVOLUME );
        setCURRENTMONTHQUOTEVOLUME(refVal_setCURRENTMONTHQUOTEVOLUME);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_MONTH_QUOTE_VOLUME_BUY"))))
    {
        int32_t refVal_setCURRENTMONTHQUOTEVOLUMEBUY;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_MONTH_QUOTE_VOLUME_BUY"))), refVal_setCURRENTMONTHQUOTEVOLUMEBUY );
        setCURRENTMONTHQUOTEVOLUMEBUY(refVal_setCURRENTMONTHQUOTEVOLUMEBUY);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_MONTH_QUOTE_VOLUME_SELL"))))
    {
        int32_t refVal_setCURRENTMONTHQUOTEVOLUMESELL;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_MONTH_QUOTE_VOLUME_SELL"))), refVal_setCURRENTMONTHQUOTEVOLUMESELL );
        setCURRENTMONTHQUOTEVOLUMESELL(refVal_setCURRENTMONTHQUOTEVOLUMESELL);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_MONTH_QUOTE_VOLUME_UNKNOWN"))))
    {
        int32_t refVal_setCURRENTMONTHQUOTEVOLUMEUNKNOWN;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_MONTH_QUOTE_VOLUME_UNKNOWN"))), refVal_setCURRENTMONTHQUOTEVOLUMEUNKNOWN );
        setCURRENTMONTHQUOTEVOLUMEUNKNOWN(refVal_setCURRENTMONTHQUOTEVOLUMEUNKNOWN);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_MONTH_TOTAL_TRADES"))))
    {
        int32_t refVal_setCURRENTMONTHTOTALTRADES;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_MONTH_TOTAL_TRADES"))), refVal_setCURRENTMONTHTOTALTRADES );
        setCURRENTMONTHTOTALTRADES(refVal_setCURRENTMONTHTOTALTRADES);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_MONTH_TOTAL_TRADES_BUY"))))
    {
        int32_t refVal_setCURRENTMONTHTOTALTRADESBUY;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_MONTH_TOTAL_TRADES_BUY"))), refVal_setCURRENTMONTHTOTALTRADESBUY );
        setCURRENTMONTHTOTALTRADESBUY(refVal_setCURRENTMONTHTOTALTRADESBUY);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_MONTH_TOTAL_TRADES_SELL"))))
    {
        int32_t refVal_setCURRENTMONTHTOTALTRADESSELL;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_MONTH_TOTAL_TRADES_SELL"))), refVal_setCURRENTMONTHTOTALTRADESSELL );
        setCURRENTMONTHTOTALTRADESSELL(refVal_setCURRENTMONTHTOTALTRADESSELL);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_MONTH_TOTAL_TRADES_UNKNOWN"))))
    {
        int32_t refVal_setCURRENTMONTHTOTALTRADESUNKNOWN;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_MONTH_TOTAL_TRADES_UNKNOWN"))), refVal_setCURRENTMONTHTOTALTRADESUNKNOWN );
        setCURRENTMONTHTOTALTRADESUNKNOWN(refVal_setCURRENTMONTHTOTALTRADESUNKNOWN);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_MONTH_VOLUME"))))
    {
        int32_t refVal_setCURRENTMONTHVOLUME;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_MONTH_VOLUME"))), refVal_setCURRENTMONTHVOLUME );
        setCURRENTMONTHVOLUME(refVal_setCURRENTMONTHVOLUME);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_MONTH_VOLUME_BUY"))))
    {
        int32_t refVal_setCURRENTMONTHVOLUMEBUY;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_MONTH_VOLUME_BUY"))), refVal_setCURRENTMONTHVOLUMEBUY );
        setCURRENTMONTHVOLUMEBUY(refVal_setCURRENTMONTHVOLUMEBUY);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_MONTH_VOLUME_SELL"))))
    {
        int32_t refVal_setCURRENTMONTHVOLUMESELL;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_MONTH_VOLUME_SELL"))), refVal_setCURRENTMONTHVOLUMESELL );
        setCURRENTMONTHVOLUMESELL(refVal_setCURRENTMONTHVOLUMESELL);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_MONTH_VOLUME_UNKNOWN"))))
    {
        int32_t refVal_setCURRENTMONTHVOLUMEUNKNOWN;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_MONTH_VOLUME_UNKNOWN"))), refVal_setCURRENTMONTHVOLUMEUNKNOWN );
        setCURRENTMONTHVOLUMEUNKNOWN(refVal_setCURRENTMONTHVOLUMEUNKNOWN);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_WEEK_HIGH"))))
    {
        int32_t refVal_setCURRENTWEEKHIGH;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_WEEK_HIGH"))), refVal_setCURRENTWEEKHIGH );
        setCURRENTWEEKHIGH(refVal_setCURRENTWEEKHIGH);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_WEEK_LOW"))))
    {
        int32_t refVal_setCURRENTWEEKLOW;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_WEEK_LOW"))), refVal_setCURRENTWEEKLOW );
        setCURRENTWEEKLOW(refVal_setCURRENTWEEKLOW);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_WEEK_OPEN"))))
    {
        int32_t refVal_setCURRENTWEEKOPEN;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_WEEK_OPEN"))), refVal_setCURRENTWEEKOPEN );
        setCURRENTWEEKOPEN(refVal_setCURRENTWEEKOPEN);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_WEEK_QUOTE_VOLUME"))))
    {
        int32_t refVal_setCURRENTWEEKQUOTEVOLUME;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_WEEK_QUOTE_VOLUME"))), refVal_setCURRENTWEEKQUOTEVOLUME );
        setCURRENTWEEKQUOTEVOLUME(refVal_setCURRENTWEEKQUOTEVOLUME);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_WEEK_QUOTE_VOLUME_BUY"))))
    {
        int32_t refVal_setCURRENTWEEKQUOTEVOLUMEBUY;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_WEEK_QUOTE_VOLUME_BUY"))), refVal_setCURRENTWEEKQUOTEVOLUMEBUY );
        setCURRENTWEEKQUOTEVOLUMEBUY(refVal_setCURRENTWEEKQUOTEVOLUMEBUY);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_WEEK_QUOTE_VOLUME_SELL"))))
    {
        int32_t refVal_setCURRENTWEEKQUOTEVOLUMESELL;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_WEEK_QUOTE_VOLUME_SELL"))), refVal_setCURRENTWEEKQUOTEVOLUMESELL );
        setCURRENTWEEKQUOTEVOLUMESELL(refVal_setCURRENTWEEKQUOTEVOLUMESELL);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_WEEK_QUOTE_VOLUME_UNKNOWN"))))
    {
        int32_t refVal_setCURRENTWEEKQUOTEVOLUMEUNKNOWN;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_WEEK_QUOTE_VOLUME_UNKNOWN"))), refVal_setCURRENTWEEKQUOTEVOLUMEUNKNOWN );
        setCURRENTWEEKQUOTEVOLUMEUNKNOWN(refVal_setCURRENTWEEKQUOTEVOLUMEUNKNOWN);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_WEEK_TOTAL_TRADES"))))
    {
        int32_t refVal_setCURRENTWEEKTOTALTRADES;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_WEEK_TOTAL_TRADES"))), refVal_setCURRENTWEEKTOTALTRADES );
        setCURRENTWEEKTOTALTRADES(refVal_setCURRENTWEEKTOTALTRADES);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_WEEK_TOTAL_TRADES_BUY"))))
    {
        int32_t refVal_setCURRENTWEEKTOTALTRADESBUY;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_WEEK_TOTAL_TRADES_BUY"))), refVal_setCURRENTWEEKTOTALTRADESBUY );
        setCURRENTWEEKTOTALTRADESBUY(refVal_setCURRENTWEEKTOTALTRADESBUY);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_WEEK_TOTAL_TRADES_SELL"))))
    {
        int32_t refVal_setCURRENTWEEKTOTALTRADESSELL;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_WEEK_TOTAL_TRADES_SELL"))), refVal_setCURRENTWEEKTOTALTRADESSELL );
        setCURRENTWEEKTOTALTRADESSELL(refVal_setCURRENTWEEKTOTALTRADESSELL);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_WEEK_TOTAL_TRADES_UNKNOWN"))))
    {
        int32_t refVal_setCURRENTWEEKTOTALTRADESUNKNOWN;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_WEEK_TOTAL_TRADES_UNKNOWN"))), refVal_setCURRENTWEEKTOTALTRADESUNKNOWN );
        setCURRENTWEEKTOTALTRADESUNKNOWN(refVal_setCURRENTWEEKTOTALTRADESUNKNOWN);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_WEEK_VOLUME"))))
    {
        int32_t refVal_setCURRENTWEEKVOLUME;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_WEEK_VOLUME"))), refVal_setCURRENTWEEKVOLUME );
        setCURRENTWEEKVOLUME(refVal_setCURRENTWEEKVOLUME);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_WEEK_VOLUME_BUY"))))
    {
        int32_t refVal_setCURRENTWEEKVOLUMEBUY;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_WEEK_VOLUME_BUY"))), refVal_setCURRENTWEEKVOLUMEBUY );
        setCURRENTWEEKVOLUMEBUY(refVal_setCURRENTWEEKVOLUMEBUY);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_WEEK_VOLUME_SELL"))))
    {
        int32_t refVal_setCURRENTWEEKVOLUMESELL;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_WEEK_VOLUME_SELL"))), refVal_setCURRENTWEEKVOLUMESELL );
        setCURRENTWEEKVOLUMESELL(refVal_setCURRENTWEEKVOLUMESELL);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_WEEK_VOLUME_UNKNOWN"))))
    {
        int32_t refVal_setCURRENTWEEKVOLUMEUNKNOWN;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_WEEK_VOLUME_UNKNOWN"))), refVal_setCURRENTWEEKVOLUMEUNKNOWN );
        setCURRENTWEEKVOLUMEUNKNOWN(refVal_setCURRENTWEEKVOLUMEUNKNOWN);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_YEAR_HIGH"))))
    {
        int32_t refVal_setCURRENTYEARHIGH;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_YEAR_HIGH"))), refVal_setCURRENTYEARHIGH );
        setCURRENTYEARHIGH(refVal_setCURRENTYEARHIGH);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_YEAR_LOW"))))
    {
        int32_t refVal_setCURRENTYEARLOW;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_YEAR_LOW"))), refVal_setCURRENTYEARLOW );
        setCURRENTYEARLOW(refVal_setCURRENTYEARLOW);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_YEAR_OPEN"))))
    {
        int32_t refVal_setCURRENTYEAROPEN;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_YEAR_OPEN"))), refVal_setCURRENTYEAROPEN );
        setCURRENTYEAROPEN(refVal_setCURRENTYEAROPEN);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_YEAR_QUOTE_VOLUME"))))
    {
        int32_t refVal_setCURRENTYEARQUOTEVOLUME;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_YEAR_QUOTE_VOLUME"))), refVal_setCURRENTYEARQUOTEVOLUME );
        setCURRENTYEARQUOTEVOLUME(refVal_setCURRENTYEARQUOTEVOLUME);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_YEAR_QUOTE_VOLUME_BUY"))))
    {
        int32_t refVal_setCURRENTYEARQUOTEVOLUMEBUY;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_YEAR_QUOTE_VOLUME_BUY"))), refVal_setCURRENTYEARQUOTEVOLUMEBUY );
        setCURRENTYEARQUOTEVOLUMEBUY(refVal_setCURRENTYEARQUOTEVOLUMEBUY);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_YEAR_QUOTE_VOLUME_SELL"))))
    {
        int32_t refVal_setCURRENTYEARQUOTEVOLUMESELL;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_YEAR_QUOTE_VOLUME_SELL"))), refVal_setCURRENTYEARQUOTEVOLUMESELL );
        setCURRENTYEARQUOTEVOLUMESELL(refVal_setCURRENTYEARQUOTEVOLUMESELL);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_YEAR_QUOTE_VOLUME_UNKNOWN"))))
    {
        int32_t refVal_setCURRENTYEARQUOTEVOLUMEUNKNOWN;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_YEAR_QUOTE_VOLUME_UNKNOWN"))), refVal_setCURRENTYEARQUOTEVOLUMEUNKNOWN );
        setCURRENTYEARQUOTEVOLUMEUNKNOWN(refVal_setCURRENTYEARQUOTEVOLUMEUNKNOWN);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_YEAR_TOTAL_TRADES"))))
    {
        int32_t refVal_setCURRENTYEARTOTALTRADES;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_YEAR_TOTAL_TRADES"))), refVal_setCURRENTYEARTOTALTRADES );
        setCURRENTYEARTOTALTRADES(refVal_setCURRENTYEARTOTALTRADES);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_YEAR_TOTAL_TRADES_BUY"))))
    {
        int32_t refVal_setCURRENTYEARTOTALTRADESBUY;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_YEAR_TOTAL_TRADES_BUY"))), refVal_setCURRENTYEARTOTALTRADESBUY );
        setCURRENTYEARTOTALTRADESBUY(refVal_setCURRENTYEARTOTALTRADESBUY);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_YEAR_TOTAL_TRADES_SELL"))))
    {
        int32_t refVal_setCURRENTYEARTOTALTRADESSELL;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_YEAR_TOTAL_TRADES_SELL"))), refVal_setCURRENTYEARTOTALTRADESSELL );
        setCURRENTYEARTOTALTRADESSELL(refVal_setCURRENTYEARTOTALTRADESSELL);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_YEAR_TOTAL_TRADES_UNKNOWN"))))
    {
        int32_t refVal_setCURRENTYEARTOTALTRADESUNKNOWN;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_YEAR_TOTAL_TRADES_UNKNOWN"))), refVal_setCURRENTYEARTOTALTRADESUNKNOWN );
        setCURRENTYEARTOTALTRADESUNKNOWN(refVal_setCURRENTYEARTOTALTRADESUNKNOWN);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_YEAR_VOLUME"))))
    {
        int32_t refVal_setCURRENTYEARVOLUME;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_YEAR_VOLUME"))), refVal_setCURRENTYEARVOLUME );
        setCURRENTYEARVOLUME(refVal_setCURRENTYEARVOLUME);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_YEAR_VOLUME_BUY"))))
    {
        int32_t refVal_setCURRENTYEARVOLUMEBUY;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_YEAR_VOLUME_BUY"))), refVal_setCURRENTYEARVOLUMEBUY );
        setCURRENTYEARVOLUMEBUY(refVal_setCURRENTYEARVOLUMEBUY);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_YEAR_VOLUME_SELL"))))
    {
        int32_t refVal_setCURRENTYEARVOLUMESELL;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_YEAR_VOLUME_SELL"))), refVal_setCURRENTYEARVOLUMESELL );
        setCURRENTYEARVOLUMESELL(refVal_setCURRENTYEARVOLUMESELL);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENT_YEAR_VOLUME_UNKNOWN"))))
    {
        int32_t refVal_setCURRENTYEARVOLUMEUNKNOWN;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENT_YEAR_VOLUME_UNKNOWN"))), refVal_setCURRENTYEARVOLUMEUNKNOWN );
        setCURRENTYEARVOLUMEUNKNOWN(refVal_setCURRENTYEARVOLUMEUNKNOWN);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("INSTRUMENT"))))
    {
        utility::string_t refVal_setINSTRUMENT;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("INSTRUMENT"))), refVal_setINSTRUMENT );
        setINSTRUMENT(refVal_setINSTRUMENT);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("LAST_PROCESSED_TRADE_CCSEQ"))))
    {
        utility::string_t refVal_setLASTPROCESSEDTRADECCSEQ;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("LAST_PROCESSED_TRADE_CCSEQ"))), refVal_setLASTPROCESSEDTRADECCSEQ );
        setLASTPROCESSEDTRADECCSEQ(refVal_setLASTPROCESSEDTRADECCSEQ);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("LAST_PROCESSED_TRADE_PRICE"))))
    {
        int32_t refVal_setLASTPROCESSEDTRADEPRICE;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("LAST_PROCESSED_TRADE_PRICE"))), refVal_setLASTPROCESSEDTRADEPRICE );
        setLASTPROCESSEDTRADEPRICE(refVal_setLASTPROCESSEDTRADEPRICE);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("LAST_PROCESSED_TRADE_QUANTITY"))))
    {
        int32_t refVal_setLASTPROCESSEDTRADEQUANTITY;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("LAST_PROCESSED_TRADE_QUANTITY"))), refVal_setLASTPROCESSEDTRADEQUANTITY );
        setLASTPROCESSEDTRADEQUANTITY(refVal_setLASTPROCESSEDTRADEQUANTITY);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("LAST_PROCESSED_TRADE_QUOTE_QUANTITY"))))
    {
        int32_t refVal_setLASTPROCESSEDTRADEQUOTEQUANTITY;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("LAST_PROCESSED_TRADE_QUOTE_QUANTITY"))), refVal_setLASTPROCESSEDTRADEQUOTEQUANTITY );
        setLASTPROCESSEDTRADEQUOTEQUANTITY(refVal_setLASTPROCESSEDTRADEQUOTEQUANTITY);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("LAST_PROCESSED_TRADE_SIDE"))))
    {
        utility::string_t refVal_setLASTPROCESSEDTRADESIDE;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("LAST_PROCESSED_TRADE_SIDE"))), refVal_setLASTPROCESSEDTRADESIDE );
        setLASTPROCESSEDTRADESIDE(refVal_setLASTPROCESSEDTRADESIDE);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("LAST_PROCESSED_TRADE_TS"))))
    {
        int32_t refVal_setLASTPROCESSEDTRADETS;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("LAST_PROCESSED_TRADE_TS"))), refVal_setLASTPROCESSEDTRADETS );
        setLASTPROCESSEDTRADETS(refVal_setLASTPROCESSEDTRADETS);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("LAST_TRADE_CCSEQ"))))
    {
        utility::string_t refVal_setLASTTRADECCSEQ;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("LAST_TRADE_CCSEQ"))), refVal_setLASTTRADECCSEQ );
        setLASTTRADECCSEQ(refVal_setLASTTRADECCSEQ);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("LAST_TRADE_ID"))))
    {
        utility::string_t refVal_setLASTTRADEID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("LAST_TRADE_ID"))), refVal_setLASTTRADEID );
        setLASTTRADEID(refVal_setLASTTRADEID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("LAST_TRADE_QUANTITY"))))
    {
        int32_t refVal_setLASTTRADEQUANTITY;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("LAST_TRADE_QUANTITY"))), refVal_setLASTTRADEQUANTITY );
        setLASTTRADEQUANTITY(refVal_setLASTTRADEQUANTITY);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("LAST_TRADE_QUOTE_QUANTITY"))))
    {
        int32_t refVal_setLASTTRADEQUOTEQUANTITY;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("LAST_TRADE_QUOTE_QUANTITY"))), refVal_setLASTTRADEQUOTEQUANTITY );
        setLASTTRADEQUOTEQUANTITY(refVal_setLASTTRADEQUOTEQUANTITY);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("LAST_TRADE_SIDE"))))
    {
        utility::string_t refVal_setLASTTRADESIDE;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("LAST_TRADE_SIDE"))), refVal_setLASTTRADESIDE );
        setLASTTRADESIDE(refVal_setLASTTRADESIDE);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("LIFETIME_FIRST_TRADE_TS"))))
    {
        int32_t refVal_setLIFETIMEFIRSTTRADETS;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("LIFETIME_FIRST_TRADE_TS"))), refVal_setLIFETIMEFIRSTTRADETS );
        setLIFETIMEFIRSTTRADETS(refVal_setLIFETIMEFIRSTTRADETS);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("LIFETIME_HIGH"))))
    {
        int32_t refVal_setLIFETIMEHIGH;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("LIFETIME_HIGH"))), refVal_setLIFETIMEHIGH );
        setLIFETIMEHIGH(refVal_setLIFETIMEHIGH);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("LIFETIME_HIGH_TS"))))
    {
        int32_t refVal_setLIFETIMEHIGHTS;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("LIFETIME_HIGH_TS"))), refVal_setLIFETIMEHIGHTS );
        setLIFETIMEHIGHTS(refVal_setLIFETIMEHIGHTS);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("LIFETIME_LOW"))))
    {
        int32_t refVal_setLIFETIMELOW;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("LIFETIME_LOW"))), refVal_setLIFETIMELOW );
        setLIFETIMELOW(refVal_setLIFETIMELOW);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("LIFETIME_LOW_TS"))))
    {
        int32_t refVal_setLIFETIMELOWTS;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("LIFETIME_LOW_TS"))), refVal_setLIFETIMELOWTS );
        setLIFETIMELOWTS(refVal_setLIFETIMELOWTS);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("LIFETIME_OPEN"))))
    {
        int32_t refVal_setLIFETIMEOPEN;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("LIFETIME_OPEN"))), refVal_setLIFETIMEOPEN );
        setLIFETIMEOPEN(refVal_setLIFETIMEOPEN);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("LIFETIME_QUOTE_VOLUME"))))
    {
        int32_t refVal_setLIFETIMEQUOTEVOLUME;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("LIFETIME_QUOTE_VOLUME"))), refVal_setLIFETIMEQUOTEVOLUME );
        setLIFETIMEQUOTEVOLUME(refVal_setLIFETIMEQUOTEVOLUME);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("LIFETIME_QUOTE_VOLUME_BUY"))))
    {
        int32_t refVal_setLIFETIMEQUOTEVOLUMEBUY;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("LIFETIME_QUOTE_VOLUME_BUY"))), refVal_setLIFETIMEQUOTEVOLUMEBUY );
        setLIFETIMEQUOTEVOLUMEBUY(refVal_setLIFETIMEQUOTEVOLUMEBUY);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("LIFETIME_QUOTE_VOLUME_SELL"))))
    {
        int32_t refVal_setLIFETIMEQUOTEVOLUMESELL;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("LIFETIME_QUOTE_VOLUME_SELL"))), refVal_setLIFETIMEQUOTEVOLUMESELL );
        setLIFETIMEQUOTEVOLUMESELL(refVal_setLIFETIMEQUOTEVOLUMESELL);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("LIFETIME_QUOTE_VOLUME_UNKNOWN"))))
    {
        int32_t refVal_setLIFETIMEQUOTEVOLUMEUNKNOWN;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("LIFETIME_QUOTE_VOLUME_UNKNOWN"))), refVal_setLIFETIMEQUOTEVOLUMEUNKNOWN );
        setLIFETIMEQUOTEVOLUMEUNKNOWN(refVal_setLIFETIMEQUOTEVOLUMEUNKNOWN);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("LIFETIME_TOTAL_TRADES"))))
    {
        int32_t refVal_setLIFETIMETOTALTRADES;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("LIFETIME_TOTAL_TRADES"))), refVal_setLIFETIMETOTALTRADES );
        setLIFETIMETOTALTRADES(refVal_setLIFETIMETOTALTRADES);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("LIFETIME_TOTAL_TRADES_BUY"))))
    {
        int32_t refVal_setLIFETIMETOTALTRADESBUY;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("LIFETIME_TOTAL_TRADES_BUY"))), refVal_setLIFETIMETOTALTRADESBUY );
        setLIFETIMETOTALTRADESBUY(refVal_setLIFETIMETOTALTRADESBUY);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("LIFETIME_TOTAL_TRADES_SELL"))))
    {
        int32_t refVal_setLIFETIMETOTALTRADESSELL;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("LIFETIME_TOTAL_TRADES_SELL"))), refVal_setLIFETIMETOTALTRADESSELL );
        setLIFETIMETOTALTRADESSELL(refVal_setLIFETIMETOTALTRADESSELL);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("LIFETIME_TOTAL_TRADES_UNKNOWN"))))
    {
        int32_t refVal_setLIFETIMETOTALTRADESUNKNOWN;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("LIFETIME_TOTAL_TRADES_UNKNOWN"))), refVal_setLIFETIMETOTALTRADESUNKNOWN );
        setLIFETIMETOTALTRADESUNKNOWN(refVal_setLIFETIMETOTALTRADESUNKNOWN);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("LIFETIME_VOLUME"))))
    {
        int32_t refVal_setLIFETIMEVOLUME;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("LIFETIME_VOLUME"))), refVal_setLIFETIMEVOLUME );
        setLIFETIMEVOLUME(refVal_setLIFETIMEVOLUME);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("LIFETIME_VOLUME_BUY"))))
    {
        int32_t refVal_setLIFETIMEVOLUMEBUY;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("LIFETIME_VOLUME_BUY"))), refVal_setLIFETIMEVOLUMEBUY );
        setLIFETIMEVOLUMEBUY(refVal_setLIFETIMEVOLUMEBUY);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("LIFETIME_VOLUME_SELL"))))
    {
        int32_t refVal_setLIFETIMEVOLUMESELL;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("LIFETIME_VOLUME_SELL"))), refVal_setLIFETIMEVOLUMESELL );
        setLIFETIMEVOLUMESELL(refVal_setLIFETIMEVOLUMESELL);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("LIFETIME_VOLUME_UNKNOWN"))))
    {
        int32_t refVal_setLIFETIMEVOLUMEUNKNOWN;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("LIFETIME_VOLUME_UNKNOWN"))), refVal_setLIFETIMEVOLUMEUNKNOWN );
        setLIFETIMEVOLUMEUNKNOWN(refVal_setLIFETIMEVOLUMEUNKNOWN);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MAPPED_INSTRUMENT"))))
    {
        utility::string_t refVal_setMAPPEDINSTRUMENT;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MAPPED_INSTRUMENT"))), refVal_setMAPPEDINSTRUMENT );
        setMAPPEDINSTRUMENT(refVal_setMAPPEDINSTRUMENT);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MARKET"))))
    {
        utility::string_t refVal_setMARKET;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MARKET"))), refVal_setMARKET );
        setMARKET(refVal_setMARKET);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_180_DAY_HIGH"))))
    {
        int32_t refVal_setMOVING180DAYHIGH;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_180_DAY_HIGH"))), refVal_setMOVING180DAYHIGH );
        setMOVING180DAYHIGH(refVal_setMOVING180DAYHIGH);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_180_DAY_LOW"))))
    {
        int32_t refVal_setMOVING180DAYLOW;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_180_DAY_LOW"))), refVal_setMOVING180DAYLOW );
        setMOVING180DAYLOW(refVal_setMOVING180DAYLOW);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_180_DAY_OPEN"))))
    {
        int32_t refVal_setMOVING180DAYOPEN;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_180_DAY_OPEN"))), refVal_setMOVING180DAYOPEN );
        setMOVING180DAYOPEN(refVal_setMOVING180DAYOPEN);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_180_DAY_QUOTE_VOLUME"))))
    {
        int32_t refVal_setMOVING180DAYQUOTEVOLUME;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_180_DAY_QUOTE_VOLUME"))), refVal_setMOVING180DAYQUOTEVOLUME );
        setMOVING180DAYQUOTEVOLUME(refVal_setMOVING180DAYQUOTEVOLUME);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_180_DAY_QUOTE_VOLUME_BUY"))))
    {
        int32_t refVal_setMOVING180DAYQUOTEVOLUMEBUY;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_180_DAY_QUOTE_VOLUME_BUY"))), refVal_setMOVING180DAYQUOTEVOLUMEBUY );
        setMOVING180DAYQUOTEVOLUMEBUY(refVal_setMOVING180DAYQUOTEVOLUMEBUY);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_180_DAY_QUOTE_VOLUME_SELL"))))
    {
        int32_t refVal_setMOVING180DAYQUOTEVOLUMESELL;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_180_DAY_QUOTE_VOLUME_SELL"))), refVal_setMOVING180DAYQUOTEVOLUMESELL );
        setMOVING180DAYQUOTEVOLUMESELL(refVal_setMOVING180DAYQUOTEVOLUMESELL);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_180_DAY_QUOTE_VOLUME_UNKNOWN"))))
    {
        int32_t refVal_setMOVING180DAYQUOTEVOLUMEUNKNOWN;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_180_DAY_QUOTE_VOLUME_UNKNOWN"))), refVal_setMOVING180DAYQUOTEVOLUMEUNKNOWN );
        setMOVING180DAYQUOTEVOLUMEUNKNOWN(refVal_setMOVING180DAYQUOTEVOLUMEUNKNOWN);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_180_DAY_TOTAL_TRADES"))))
    {
        int32_t refVal_setMOVING180DAYTOTALTRADES;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_180_DAY_TOTAL_TRADES"))), refVal_setMOVING180DAYTOTALTRADES );
        setMOVING180DAYTOTALTRADES(refVal_setMOVING180DAYTOTALTRADES);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_180_DAY_TOTAL_TRADES_BUY"))))
    {
        int32_t refVal_setMOVING180DAYTOTALTRADESBUY;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_180_DAY_TOTAL_TRADES_BUY"))), refVal_setMOVING180DAYTOTALTRADESBUY );
        setMOVING180DAYTOTALTRADESBUY(refVal_setMOVING180DAYTOTALTRADESBUY);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_180_DAY_TOTAL_TRADES_SELL"))))
    {
        int32_t refVal_setMOVING180DAYTOTALTRADESSELL;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_180_DAY_TOTAL_TRADES_SELL"))), refVal_setMOVING180DAYTOTALTRADESSELL );
        setMOVING180DAYTOTALTRADESSELL(refVal_setMOVING180DAYTOTALTRADESSELL);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_180_DAY_TOTAL_TRADES_UNKNOWN"))))
    {
        int32_t refVal_setMOVING180DAYTOTALTRADESUNKNOWN;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_180_DAY_TOTAL_TRADES_UNKNOWN"))), refVal_setMOVING180DAYTOTALTRADESUNKNOWN );
        setMOVING180DAYTOTALTRADESUNKNOWN(refVal_setMOVING180DAYTOTALTRADESUNKNOWN);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_180_DAY_VOLUME"))))
    {
        int32_t refVal_setMOVING180DAYVOLUME;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_180_DAY_VOLUME"))), refVal_setMOVING180DAYVOLUME );
        setMOVING180DAYVOLUME(refVal_setMOVING180DAYVOLUME);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_180_DAY_VOLUME_BUY"))))
    {
        int32_t refVal_setMOVING180DAYVOLUMEBUY;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_180_DAY_VOLUME_BUY"))), refVal_setMOVING180DAYVOLUMEBUY );
        setMOVING180DAYVOLUMEBUY(refVal_setMOVING180DAYVOLUMEBUY);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_180_DAY_VOLUME_SELL"))))
    {
        int32_t refVal_setMOVING180DAYVOLUMESELL;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_180_DAY_VOLUME_SELL"))), refVal_setMOVING180DAYVOLUMESELL );
        setMOVING180DAYVOLUMESELL(refVal_setMOVING180DAYVOLUMESELL);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_180_DAY_VOLUME_UNKNOWN"))))
    {
        int32_t refVal_setMOVING180DAYVOLUMEUNKNOWN;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_180_DAY_VOLUME_UNKNOWN"))), refVal_setMOVING180DAYVOLUMEUNKNOWN );
        setMOVING180DAYVOLUMEUNKNOWN(refVal_setMOVING180DAYVOLUMEUNKNOWN);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_24_HOUR_HIGH"))))
    {
        int32_t refVal_setMOVING24HOURHIGH;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_24_HOUR_HIGH"))), refVal_setMOVING24HOURHIGH );
        setMOVING24HOURHIGH(refVal_setMOVING24HOURHIGH);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_24_HOUR_LOW"))))
    {
        int32_t refVal_setMOVING24HOURLOW;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_24_HOUR_LOW"))), refVal_setMOVING24HOURLOW );
        setMOVING24HOURLOW(refVal_setMOVING24HOURLOW);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_24_HOUR_OPEN"))))
    {
        int32_t refVal_setMOVING24HOUROPEN;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_24_HOUR_OPEN"))), refVal_setMOVING24HOUROPEN );
        setMOVING24HOUROPEN(refVal_setMOVING24HOUROPEN);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_24_HOUR_QUOTE_VOLUME"))))
    {
        int32_t refVal_setMOVING24HOURQUOTEVOLUME;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_24_HOUR_QUOTE_VOLUME"))), refVal_setMOVING24HOURQUOTEVOLUME );
        setMOVING24HOURQUOTEVOLUME(refVal_setMOVING24HOURQUOTEVOLUME);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_24_HOUR_QUOTE_VOLUME_BUY"))))
    {
        int32_t refVal_setMOVING24HOURQUOTEVOLUMEBUY;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_24_HOUR_QUOTE_VOLUME_BUY"))), refVal_setMOVING24HOURQUOTEVOLUMEBUY );
        setMOVING24HOURQUOTEVOLUMEBUY(refVal_setMOVING24HOURQUOTEVOLUMEBUY);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_24_HOUR_QUOTE_VOLUME_SELL"))))
    {
        int32_t refVal_setMOVING24HOURQUOTEVOLUMESELL;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_24_HOUR_QUOTE_VOLUME_SELL"))), refVal_setMOVING24HOURQUOTEVOLUMESELL );
        setMOVING24HOURQUOTEVOLUMESELL(refVal_setMOVING24HOURQUOTEVOLUMESELL);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_24_HOUR_QUOTE_VOLUME_UNKNOWN"))))
    {
        int32_t refVal_setMOVING24HOURQUOTEVOLUMEUNKNOWN;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_24_HOUR_QUOTE_VOLUME_UNKNOWN"))), refVal_setMOVING24HOURQUOTEVOLUMEUNKNOWN );
        setMOVING24HOURQUOTEVOLUMEUNKNOWN(refVal_setMOVING24HOURQUOTEVOLUMEUNKNOWN);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_24_HOUR_TOTAL_TRADES"))))
    {
        int32_t refVal_setMOVING24HOURTOTALTRADES;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_24_HOUR_TOTAL_TRADES"))), refVal_setMOVING24HOURTOTALTRADES );
        setMOVING24HOURTOTALTRADES(refVal_setMOVING24HOURTOTALTRADES);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_24_HOUR_TOTAL_TRADES_BUY"))))
    {
        int32_t refVal_setMOVING24HOURTOTALTRADESBUY;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_24_HOUR_TOTAL_TRADES_BUY"))), refVal_setMOVING24HOURTOTALTRADESBUY );
        setMOVING24HOURTOTALTRADESBUY(refVal_setMOVING24HOURTOTALTRADESBUY);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_24_HOUR_TOTAL_TRADES_SELL"))))
    {
        int32_t refVal_setMOVING24HOURTOTALTRADESSELL;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_24_HOUR_TOTAL_TRADES_SELL"))), refVal_setMOVING24HOURTOTALTRADESSELL );
        setMOVING24HOURTOTALTRADESSELL(refVal_setMOVING24HOURTOTALTRADESSELL);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_24_HOUR_TOTAL_TRADES_UNKNOWN"))))
    {
        int32_t refVal_setMOVING24HOURTOTALTRADESUNKNOWN;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_24_HOUR_TOTAL_TRADES_UNKNOWN"))), refVal_setMOVING24HOURTOTALTRADESUNKNOWN );
        setMOVING24HOURTOTALTRADESUNKNOWN(refVal_setMOVING24HOURTOTALTRADESUNKNOWN);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_24_HOUR_VOLUME"))))
    {
        int32_t refVal_setMOVING24HOURVOLUME;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_24_HOUR_VOLUME"))), refVal_setMOVING24HOURVOLUME );
        setMOVING24HOURVOLUME(refVal_setMOVING24HOURVOLUME);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_24_HOUR_VOLUME_BUY"))))
    {
        int32_t refVal_setMOVING24HOURVOLUMEBUY;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_24_HOUR_VOLUME_BUY"))), refVal_setMOVING24HOURVOLUMEBUY );
        setMOVING24HOURVOLUMEBUY(refVal_setMOVING24HOURVOLUMEBUY);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_24_HOUR_VOLUME_SELL"))))
    {
        int32_t refVal_setMOVING24HOURVOLUMESELL;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_24_HOUR_VOLUME_SELL"))), refVal_setMOVING24HOURVOLUMESELL );
        setMOVING24HOURVOLUMESELL(refVal_setMOVING24HOURVOLUMESELL);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_24_HOUR_VOLUME_UNKNOWN"))))
    {
        int32_t refVal_setMOVING24HOURVOLUMEUNKNOWN;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_24_HOUR_VOLUME_UNKNOWN"))), refVal_setMOVING24HOURVOLUMEUNKNOWN );
        setMOVING24HOURVOLUMEUNKNOWN(refVal_setMOVING24HOURVOLUMEUNKNOWN);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_30_DAY_HIGH"))))
    {
        int32_t refVal_setMOVING30DAYHIGH;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_30_DAY_HIGH"))), refVal_setMOVING30DAYHIGH );
        setMOVING30DAYHIGH(refVal_setMOVING30DAYHIGH);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_30_DAY_LOW"))))
    {
        int32_t refVal_setMOVING30DAYLOW;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_30_DAY_LOW"))), refVal_setMOVING30DAYLOW );
        setMOVING30DAYLOW(refVal_setMOVING30DAYLOW);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_30_DAY_OPEN"))))
    {
        int32_t refVal_setMOVING30DAYOPEN;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_30_DAY_OPEN"))), refVal_setMOVING30DAYOPEN );
        setMOVING30DAYOPEN(refVal_setMOVING30DAYOPEN);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_30_DAY_QUOTE_VOLUME"))))
    {
        int32_t refVal_setMOVING30DAYQUOTEVOLUME;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_30_DAY_QUOTE_VOLUME"))), refVal_setMOVING30DAYQUOTEVOLUME );
        setMOVING30DAYQUOTEVOLUME(refVal_setMOVING30DAYQUOTEVOLUME);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_30_DAY_QUOTE_VOLUME_BUY"))))
    {
        int32_t refVal_setMOVING30DAYQUOTEVOLUMEBUY;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_30_DAY_QUOTE_VOLUME_BUY"))), refVal_setMOVING30DAYQUOTEVOLUMEBUY );
        setMOVING30DAYQUOTEVOLUMEBUY(refVal_setMOVING30DAYQUOTEVOLUMEBUY);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_30_DAY_QUOTE_VOLUME_SELL"))))
    {
        int32_t refVal_setMOVING30DAYQUOTEVOLUMESELL;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_30_DAY_QUOTE_VOLUME_SELL"))), refVal_setMOVING30DAYQUOTEVOLUMESELL );
        setMOVING30DAYQUOTEVOLUMESELL(refVal_setMOVING30DAYQUOTEVOLUMESELL);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_30_DAY_QUOTE_VOLUME_UNKNOWN"))))
    {
        int32_t refVal_setMOVING30DAYQUOTEVOLUMEUNKNOWN;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_30_DAY_QUOTE_VOLUME_UNKNOWN"))), refVal_setMOVING30DAYQUOTEVOLUMEUNKNOWN );
        setMOVING30DAYQUOTEVOLUMEUNKNOWN(refVal_setMOVING30DAYQUOTEVOLUMEUNKNOWN);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_30_DAY_TOTAL_TRADES"))))
    {
        int32_t refVal_setMOVING30DAYTOTALTRADES;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_30_DAY_TOTAL_TRADES"))), refVal_setMOVING30DAYTOTALTRADES );
        setMOVING30DAYTOTALTRADES(refVal_setMOVING30DAYTOTALTRADES);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_30_DAY_TOTAL_TRADES_BUY"))))
    {
        int32_t refVal_setMOVING30DAYTOTALTRADESBUY;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_30_DAY_TOTAL_TRADES_BUY"))), refVal_setMOVING30DAYTOTALTRADESBUY );
        setMOVING30DAYTOTALTRADESBUY(refVal_setMOVING30DAYTOTALTRADESBUY);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_30_DAY_TOTAL_TRADES_SELL"))))
    {
        int32_t refVal_setMOVING30DAYTOTALTRADESSELL;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_30_DAY_TOTAL_TRADES_SELL"))), refVal_setMOVING30DAYTOTALTRADESSELL );
        setMOVING30DAYTOTALTRADESSELL(refVal_setMOVING30DAYTOTALTRADESSELL);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_30_DAY_TOTAL_TRADES_UNKNOWN"))))
    {
        int32_t refVal_setMOVING30DAYTOTALTRADESUNKNOWN;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_30_DAY_TOTAL_TRADES_UNKNOWN"))), refVal_setMOVING30DAYTOTALTRADESUNKNOWN );
        setMOVING30DAYTOTALTRADESUNKNOWN(refVal_setMOVING30DAYTOTALTRADESUNKNOWN);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_30_DAY_VOLUME"))))
    {
        int32_t refVal_setMOVING30DAYVOLUME;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_30_DAY_VOLUME"))), refVal_setMOVING30DAYVOLUME );
        setMOVING30DAYVOLUME(refVal_setMOVING30DAYVOLUME);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_30_DAY_VOLUME_BUY"))))
    {
        int32_t refVal_setMOVING30DAYVOLUMEBUY;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_30_DAY_VOLUME_BUY"))), refVal_setMOVING30DAYVOLUMEBUY );
        setMOVING30DAYVOLUMEBUY(refVal_setMOVING30DAYVOLUMEBUY);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_30_DAY_VOLUME_SELL"))))
    {
        int32_t refVal_setMOVING30DAYVOLUMESELL;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_30_DAY_VOLUME_SELL"))), refVal_setMOVING30DAYVOLUMESELL );
        setMOVING30DAYVOLUMESELL(refVal_setMOVING30DAYVOLUMESELL);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_30_DAY_VOLUME_UNKNOWN"))))
    {
        int32_t refVal_setMOVING30DAYVOLUMEUNKNOWN;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_30_DAY_VOLUME_UNKNOWN"))), refVal_setMOVING30DAYVOLUMEUNKNOWN );
        setMOVING30DAYVOLUMEUNKNOWN(refVal_setMOVING30DAYVOLUMEUNKNOWN);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_365_DAY_HIGH"))))
    {
        int32_t refVal_setMOVING365DAYHIGH;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_365_DAY_HIGH"))), refVal_setMOVING365DAYHIGH );
        setMOVING365DAYHIGH(refVal_setMOVING365DAYHIGH);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_365_DAY_LOW"))))
    {
        int32_t refVal_setMOVING365DAYLOW;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_365_DAY_LOW"))), refVal_setMOVING365DAYLOW );
        setMOVING365DAYLOW(refVal_setMOVING365DAYLOW);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_365_DAY_OPEN"))))
    {
        int32_t refVal_setMOVING365DAYOPEN;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_365_DAY_OPEN"))), refVal_setMOVING365DAYOPEN );
        setMOVING365DAYOPEN(refVal_setMOVING365DAYOPEN);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_365_DAY_QUOTE_VOLUME"))))
    {
        int32_t refVal_setMOVING365DAYQUOTEVOLUME;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_365_DAY_QUOTE_VOLUME"))), refVal_setMOVING365DAYQUOTEVOLUME );
        setMOVING365DAYQUOTEVOLUME(refVal_setMOVING365DAYQUOTEVOLUME);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_365_DAY_QUOTE_VOLUME_BUY"))))
    {
        int32_t refVal_setMOVING365DAYQUOTEVOLUMEBUY;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_365_DAY_QUOTE_VOLUME_BUY"))), refVal_setMOVING365DAYQUOTEVOLUMEBUY );
        setMOVING365DAYQUOTEVOLUMEBUY(refVal_setMOVING365DAYQUOTEVOLUMEBUY);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_365_DAY_QUOTE_VOLUME_SELL"))))
    {
        int32_t refVal_setMOVING365DAYQUOTEVOLUMESELL;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_365_DAY_QUOTE_VOLUME_SELL"))), refVal_setMOVING365DAYQUOTEVOLUMESELL );
        setMOVING365DAYQUOTEVOLUMESELL(refVal_setMOVING365DAYQUOTEVOLUMESELL);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_365_DAY_QUOTE_VOLUME_UNKNOWN"))))
    {
        int32_t refVal_setMOVING365DAYQUOTEVOLUMEUNKNOWN;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_365_DAY_QUOTE_VOLUME_UNKNOWN"))), refVal_setMOVING365DAYQUOTEVOLUMEUNKNOWN );
        setMOVING365DAYQUOTEVOLUMEUNKNOWN(refVal_setMOVING365DAYQUOTEVOLUMEUNKNOWN);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_365_DAY_TOTAL_TRADES"))))
    {
        int32_t refVal_setMOVING365DAYTOTALTRADES;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_365_DAY_TOTAL_TRADES"))), refVal_setMOVING365DAYTOTALTRADES );
        setMOVING365DAYTOTALTRADES(refVal_setMOVING365DAYTOTALTRADES);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_365_DAY_TOTAL_TRADES_BUY"))))
    {
        int32_t refVal_setMOVING365DAYTOTALTRADESBUY;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_365_DAY_TOTAL_TRADES_BUY"))), refVal_setMOVING365DAYTOTALTRADESBUY );
        setMOVING365DAYTOTALTRADESBUY(refVal_setMOVING365DAYTOTALTRADESBUY);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_365_DAY_TOTAL_TRADES_SELL"))))
    {
        int32_t refVal_setMOVING365DAYTOTALTRADESSELL;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_365_DAY_TOTAL_TRADES_SELL"))), refVal_setMOVING365DAYTOTALTRADESSELL );
        setMOVING365DAYTOTALTRADESSELL(refVal_setMOVING365DAYTOTALTRADESSELL);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_365_DAY_TOTAL_TRADES_UNKNOWN"))))
    {
        int32_t refVal_setMOVING365DAYTOTALTRADESUNKNOWN;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_365_DAY_TOTAL_TRADES_UNKNOWN"))), refVal_setMOVING365DAYTOTALTRADESUNKNOWN );
        setMOVING365DAYTOTALTRADESUNKNOWN(refVal_setMOVING365DAYTOTALTRADESUNKNOWN);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_365_DAY_VOLUME"))))
    {
        int32_t refVal_setMOVING365DAYVOLUME;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_365_DAY_VOLUME"))), refVal_setMOVING365DAYVOLUME );
        setMOVING365DAYVOLUME(refVal_setMOVING365DAYVOLUME);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_365_DAY_VOLUME_BUY"))))
    {
        int32_t refVal_setMOVING365DAYVOLUMEBUY;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_365_DAY_VOLUME_BUY"))), refVal_setMOVING365DAYVOLUMEBUY );
        setMOVING365DAYVOLUMEBUY(refVal_setMOVING365DAYVOLUMEBUY);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_365_DAY_VOLUME_SELL"))))
    {
        int32_t refVal_setMOVING365DAYVOLUMESELL;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_365_DAY_VOLUME_SELL"))), refVal_setMOVING365DAYVOLUMESELL );
        setMOVING365DAYVOLUMESELL(refVal_setMOVING365DAYVOLUMESELL);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_365_DAY_VOLUME_UNKNOWN"))))
    {
        int32_t refVal_setMOVING365DAYVOLUMEUNKNOWN;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_365_DAY_VOLUME_UNKNOWN"))), refVal_setMOVING365DAYVOLUMEUNKNOWN );
        setMOVING365DAYVOLUMEUNKNOWN(refVal_setMOVING365DAYVOLUMEUNKNOWN);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_7_DAY_HIGH"))))
    {
        int32_t refVal_setMOVING7DAYHIGH;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_7_DAY_HIGH"))), refVal_setMOVING7DAYHIGH );
        setMOVING7DAYHIGH(refVal_setMOVING7DAYHIGH);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_7_DAY_LOW"))))
    {
        int32_t refVal_setMOVING7DAYLOW;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_7_DAY_LOW"))), refVal_setMOVING7DAYLOW );
        setMOVING7DAYLOW(refVal_setMOVING7DAYLOW);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_7_DAY_OPEN"))))
    {
        int32_t refVal_setMOVING7DAYOPEN;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_7_DAY_OPEN"))), refVal_setMOVING7DAYOPEN );
        setMOVING7DAYOPEN(refVal_setMOVING7DAYOPEN);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_7_DAY_QUOTE_VOLUME"))))
    {
        int32_t refVal_setMOVING7DAYQUOTEVOLUME;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_7_DAY_QUOTE_VOLUME"))), refVal_setMOVING7DAYQUOTEVOLUME );
        setMOVING7DAYQUOTEVOLUME(refVal_setMOVING7DAYQUOTEVOLUME);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_7_DAY_QUOTE_VOLUME_BUY"))))
    {
        int32_t refVal_setMOVING7DAYQUOTEVOLUMEBUY;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_7_DAY_QUOTE_VOLUME_BUY"))), refVal_setMOVING7DAYQUOTEVOLUMEBUY );
        setMOVING7DAYQUOTEVOLUMEBUY(refVal_setMOVING7DAYQUOTEVOLUMEBUY);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_7_DAY_QUOTE_VOLUME_SELL"))))
    {
        int32_t refVal_setMOVING7DAYQUOTEVOLUMESELL;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_7_DAY_QUOTE_VOLUME_SELL"))), refVal_setMOVING7DAYQUOTEVOLUMESELL );
        setMOVING7DAYQUOTEVOLUMESELL(refVal_setMOVING7DAYQUOTEVOLUMESELL);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_7_DAY_QUOTE_VOLUME_UNKNOWN"))))
    {
        int32_t refVal_setMOVING7DAYQUOTEVOLUMEUNKNOWN;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_7_DAY_QUOTE_VOLUME_UNKNOWN"))), refVal_setMOVING7DAYQUOTEVOLUMEUNKNOWN );
        setMOVING7DAYQUOTEVOLUMEUNKNOWN(refVal_setMOVING7DAYQUOTEVOLUMEUNKNOWN);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_7_DAY_TOTAL_TRADES"))))
    {
        int32_t refVal_setMOVING7DAYTOTALTRADES;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_7_DAY_TOTAL_TRADES"))), refVal_setMOVING7DAYTOTALTRADES );
        setMOVING7DAYTOTALTRADES(refVal_setMOVING7DAYTOTALTRADES);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_7_DAY_TOTAL_TRADES_BUY"))))
    {
        int32_t refVal_setMOVING7DAYTOTALTRADESBUY;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_7_DAY_TOTAL_TRADES_BUY"))), refVal_setMOVING7DAYTOTALTRADESBUY );
        setMOVING7DAYTOTALTRADESBUY(refVal_setMOVING7DAYTOTALTRADESBUY);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_7_DAY_TOTAL_TRADES_SELL"))))
    {
        int32_t refVal_setMOVING7DAYTOTALTRADESSELL;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_7_DAY_TOTAL_TRADES_SELL"))), refVal_setMOVING7DAYTOTALTRADESSELL );
        setMOVING7DAYTOTALTRADESSELL(refVal_setMOVING7DAYTOTALTRADESSELL);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_7_DAY_TOTAL_TRADES_UNKNOWN"))))
    {
        int32_t refVal_setMOVING7DAYTOTALTRADESUNKNOWN;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_7_DAY_TOTAL_TRADES_UNKNOWN"))), refVal_setMOVING7DAYTOTALTRADESUNKNOWN );
        setMOVING7DAYTOTALTRADESUNKNOWN(refVal_setMOVING7DAYTOTALTRADESUNKNOWN);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_7_DAY_VOLUME"))))
    {
        int32_t refVal_setMOVING7DAYVOLUME;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_7_DAY_VOLUME"))), refVal_setMOVING7DAYVOLUME );
        setMOVING7DAYVOLUME(refVal_setMOVING7DAYVOLUME);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_7_DAY_VOLUME_BUY"))))
    {
        int32_t refVal_setMOVING7DAYVOLUMEBUY;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_7_DAY_VOLUME_BUY"))), refVal_setMOVING7DAYVOLUMEBUY );
        setMOVING7DAYVOLUMEBUY(refVal_setMOVING7DAYVOLUMEBUY);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_7_DAY_VOLUME_SELL"))))
    {
        int32_t refVal_setMOVING7DAYVOLUMESELL;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_7_DAY_VOLUME_SELL"))), refVal_setMOVING7DAYVOLUMESELL );
        setMOVING7DAYVOLUMESELL(refVal_setMOVING7DAYVOLUMESELL);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_7_DAY_VOLUME_UNKNOWN"))))
    {
        int32_t refVal_setMOVING7DAYVOLUMEUNKNOWN;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_7_DAY_VOLUME_UNKNOWN"))), refVal_setMOVING7DAYVOLUMEUNKNOWN );
        setMOVING7DAYVOLUMEUNKNOWN(refVal_setMOVING7DAYVOLUMEUNKNOWN);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_90_DAY_HIGH"))))
    {
        int32_t refVal_setMOVING90DAYHIGH;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_90_DAY_HIGH"))), refVal_setMOVING90DAYHIGH );
        setMOVING90DAYHIGH(refVal_setMOVING90DAYHIGH);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_90_DAY_LOW"))))
    {
        int32_t refVal_setMOVING90DAYLOW;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_90_DAY_LOW"))), refVal_setMOVING90DAYLOW );
        setMOVING90DAYLOW(refVal_setMOVING90DAYLOW);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_90_DAY_OPEN"))))
    {
        int32_t refVal_setMOVING90DAYOPEN;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_90_DAY_OPEN"))), refVal_setMOVING90DAYOPEN );
        setMOVING90DAYOPEN(refVal_setMOVING90DAYOPEN);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_90_DAY_QUOTE_VOLUME"))))
    {
        int32_t refVal_setMOVING90DAYQUOTEVOLUME;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_90_DAY_QUOTE_VOLUME"))), refVal_setMOVING90DAYQUOTEVOLUME );
        setMOVING90DAYQUOTEVOLUME(refVal_setMOVING90DAYQUOTEVOLUME);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_90_DAY_QUOTE_VOLUME_BUY"))))
    {
        int32_t refVal_setMOVING90DAYQUOTEVOLUMEBUY;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_90_DAY_QUOTE_VOLUME_BUY"))), refVal_setMOVING90DAYQUOTEVOLUMEBUY );
        setMOVING90DAYQUOTEVOLUMEBUY(refVal_setMOVING90DAYQUOTEVOLUMEBUY);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_90_DAY_QUOTE_VOLUME_SELL"))))
    {
        int32_t refVal_setMOVING90DAYQUOTEVOLUMESELL;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_90_DAY_QUOTE_VOLUME_SELL"))), refVal_setMOVING90DAYQUOTEVOLUMESELL );
        setMOVING90DAYQUOTEVOLUMESELL(refVal_setMOVING90DAYQUOTEVOLUMESELL);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_90_DAY_QUOTE_VOLUME_UNKNOWN"))))
    {
        int32_t refVal_setMOVING90DAYQUOTEVOLUMEUNKNOWN;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_90_DAY_QUOTE_VOLUME_UNKNOWN"))), refVal_setMOVING90DAYQUOTEVOLUMEUNKNOWN );
        setMOVING90DAYQUOTEVOLUMEUNKNOWN(refVal_setMOVING90DAYQUOTEVOLUMEUNKNOWN);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_90_DAY_TOTAL_TRADES"))))
    {
        int32_t refVal_setMOVING90DAYTOTALTRADES;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_90_DAY_TOTAL_TRADES"))), refVal_setMOVING90DAYTOTALTRADES );
        setMOVING90DAYTOTALTRADES(refVal_setMOVING90DAYTOTALTRADES);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_90_DAY_TOTAL_TRADES_BUY"))))
    {
        int32_t refVal_setMOVING90DAYTOTALTRADESBUY;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_90_DAY_TOTAL_TRADES_BUY"))), refVal_setMOVING90DAYTOTALTRADESBUY );
        setMOVING90DAYTOTALTRADESBUY(refVal_setMOVING90DAYTOTALTRADESBUY);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_90_DAY_TOTAL_TRADES_SELL"))))
    {
        int32_t refVal_setMOVING90DAYTOTALTRADESSELL;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_90_DAY_TOTAL_TRADES_SELL"))), refVal_setMOVING90DAYTOTALTRADESSELL );
        setMOVING90DAYTOTALTRADESSELL(refVal_setMOVING90DAYTOTALTRADESSELL);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_90_DAY_TOTAL_TRADES_UNKNOWN"))))
    {
        int32_t refVal_setMOVING90DAYTOTALTRADESUNKNOWN;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_90_DAY_TOTAL_TRADES_UNKNOWN"))), refVal_setMOVING90DAYTOTALTRADESUNKNOWN );
        setMOVING90DAYTOTALTRADESUNKNOWN(refVal_setMOVING90DAYTOTALTRADESUNKNOWN);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_90_DAY_VOLUME"))))
    {
        int32_t refVal_setMOVING90DAYVOLUME;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_90_DAY_VOLUME"))), refVal_setMOVING90DAYVOLUME );
        setMOVING90DAYVOLUME(refVal_setMOVING90DAYVOLUME);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_90_DAY_VOLUME_BUY"))))
    {
        int32_t refVal_setMOVING90DAYVOLUMEBUY;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_90_DAY_VOLUME_BUY"))), refVal_setMOVING90DAYVOLUMEBUY );
        setMOVING90DAYVOLUMEBUY(refVal_setMOVING90DAYVOLUMEBUY);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_90_DAY_VOLUME_SELL"))))
    {
        int32_t refVal_setMOVING90DAYVOLUMESELL;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_90_DAY_VOLUME_SELL"))), refVal_setMOVING90DAYVOLUMESELL );
        setMOVING90DAYVOLUMESELL(refVal_setMOVING90DAYVOLUMESELL);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MOVING_90_DAY_VOLUME_UNKNOWN"))))
    {
        int32_t refVal_setMOVING90DAYVOLUMEUNKNOWN;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MOVING_90_DAY_VOLUME_UNKNOWN"))), refVal_setMOVING90DAYVOLUMEUNKNOWN );
        setMOVING90DAYVOLUMEUNKNOWN(refVal_setMOVING90DAYVOLUMEUNKNOWN);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("PRICE"))))
    {
        int32_t refVal_setPRICE;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("PRICE"))), refVal_setPRICE );
        setPRICE(refVal_setPRICE);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("PRICE_FLAG"))))
    {
        utility::string_t refVal_setPRICEFLAG;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("PRICE_FLAG"))), refVal_setPRICEFLAG );
        setPRICEFLAG(refVal_setPRICEFLAG);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("PRICE_LAST_UPDATE_TS"))))
    {
        int32_t refVal_setPRICELASTUPDATETS;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("PRICE_LAST_UPDATE_TS"))), refVal_setPRICELASTUPDATETS );
        setPRICELASTUPDATETS(refVal_setPRICELASTUPDATETS);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("QUOTE"))))
    {
        utility::string_t refVal_setQUOTE;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("QUOTE"))), refVal_setQUOTE );
        setQUOTE(refVal_setQUOTE);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("TOP_ASK_LAST_UPDATE_TS"))))
    {
        int32_t refVal_setTOPASKLASTUPDATETS;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("TOP_ASK_LAST_UPDATE_TS"))), refVal_setTOPASKLASTUPDATETS );
        setTOPASKLASTUPDATETS(refVal_setTOPASKLASTUPDATETS);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("TOP_ASK_PRICE"))))
    {
        int32_t refVal_setTOPASKPRICE;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("TOP_ASK_PRICE"))), refVal_setTOPASKPRICE );
        setTOPASKPRICE(refVal_setTOPASKPRICE);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("TOP_ASK_QUANTITY"))))
    {
        int32_t refVal_setTOPASKQUANTITY;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("TOP_ASK_QUANTITY"))), refVal_setTOPASKQUANTITY );
        setTOPASKQUANTITY(refVal_setTOPASKQUANTITY);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("TOP_BID_LAST_UPDATE_TS"))))
    {
        int32_t refVal_setTOPBIDLASTUPDATETS;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("TOP_BID_LAST_UPDATE_TS"))), refVal_setTOPBIDLASTUPDATETS );
        setTOPBIDLASTUPDATETS(refVal_setTOPBIDLASTUPDATETS);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("TOP_BID_PRICE"))))
    {
        int32_t refVal_setTOPBIDPRICE;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("TOP_BID_PRICE"))), refVal_setTOPBIDPRICE );
        setTOPBIDPRICE(refVal_setTOPBIDPRICE);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("TOP_BID_QUANTITY"))))
    {
        int32_t refVal_setTOPBIDQUANTITY;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("TOP_BID_QUANTITY"))), refVal_setTOPBIDQUANTITY );
        setTOPBIDQUANTITY(refVal_setTOPBIDQUANTITY);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("TYPE"))))
    {
        utility::string_t refVal_setTYPE;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("TYPE"))), refVal_setTYPE );
        setTYPE(refVal_setTYPE);
    }
    return ok;
}

utility::string_t SPOT_INSTRUMENT_MARKET_DATA::getBASE() const
{
    return m_BASE;
}

void SPOT_INSTRUMENT_MARKET_DATA::setBASE(const utility::string_t& value)
{
    m_BASE = value;
    m_BASEIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::bASEIsSet() const
{
    return m_BASEIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetBASE()
{
    m_BASEIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCCSEQ() const
{
    return m_CCSEQ;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCCSEQ(int32_t value)
{
    m_CCSEQ = value;
    m_CCSEQIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cCSEQIsSet() const
{
    return m_CCSEQIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCCSEQ()
{
    m_CCSEQIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTDAYHIGH() const
{
    return m_CURRENT_DAY_HIGH;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTDAYHIGH(int32_t value)
{
    m_CURRENT_DAY_HIGH = value;
    m_CURRENT_DAY_HIGHIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTDAYHIGHIsSet() const
{
    return m_CURRENT_DAY_HIGHIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_DAY_HIGH()
{
    m_CURRENT_DAY_HIGHIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTDAYLOW() const
{
    return m_CURRENT_DAY_LOW;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTDAYLOW(int32_t value)
{
    m_CURRENT_DAY_LOW = value;
    m_CURRENT_DAY_LOWIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTDAYLOWIsSet() const
{
    return m_CURRENT_DAY_LOWIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_DAY_LOW()
{
    m_CURRENT_DAY_LOWIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTDAYOPEN() const
{
    return m_CURRENT_DAY_OPEN;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTDAYOPEN(int32_t value)
{
    m_CURRENT_DAY_OPEN = value;
    m_CURRENT_DAY_OPENIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTDAYOPENIsSet() const
{
    return m_CURRENT_DAY_OPENIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_DAY_OPEN()
{
    m_CURRENT_DAY_OPENIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTDAYQUOTEVOLUME() const
{
    return m_CURRENT_DAY_QUOTE_VOLUME;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTDAYQUOTEVOLUME(int32_t value)
{
    m_CURRENT_DAY_QUOTE_VOLUME = value;
    m_CURRENT_DAY_QUOTE_VOLUMEIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTDAYQUOTEVOLUMEIsSet() const
{
    return m_CURRENT_DAY_QUOTE_VOLUMEIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_DAY_QUOTE_VOLUME()
{
    m_CURRENT_DAY_QUOTE_VOLUMEIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTDAYQUOTEVOLUMEBUY() const
{
    return m_CURRENT_DAY_QUOTE_VOLUME_BUY;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTDAYQUOTEVOLUMEBUY(int32_t value)
{
    m_CURRENT_DAY_QUOTE_VOLUME_BUY = value;
    m_CURRENT_DAY_QUOTE_VOLUME_BUYIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTDAYQUOTEVOLUMEBUYIsSet() const
{
    return m_CURRENT_DAY_QUOTE_VOLUME_BUYIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_DAY_QUOTE_VOLUME_BUY()
{
    m_CURRENT_DAY_QUOTE_VOLUME_BUYIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTDAYQUOTEVOLUMESELL() const
{
    return m_CURRENT_DAY_QUOTE_VOLUME_SELL;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTDAYQUOTEVOLUMESELL(int32_t value)
{
    m_CURRENT_DAY_QUOTE_VOLUME_SELL = value;
    m_CURRENT_DAY_QUOTE_VOLUME_SELLIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTDAYQUOTEVOLUMESELLIsSet() const
{
    return m_CURRENT_DAY_QUOTE_VOLUME_SELLIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_DAY_QUOTE_VOLUME_SELL()
{
    m_CURRENT_DAY_QUOTE_VOLUME_SELLIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTDAYQUOTEVOLUMEUNKNOWN() const
{
    return m_CURRENT_DAY_QUOTE_VOLUME_UNKNOWN;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTDAYQUOTEVOLUMEUNKNOWN(int32_t value)
{
    m_CURRENT_DAY_QUOTE_VOLUME_UNKNOWN = value;
    m_CURRENT_DAY_QUOTE_VOLUME_UNKNOWNIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTDAYQUOTEVOLUMEUNKNOWNIsSet() const
{
    return m_CURRENT_DAY_QUOTE_VOLUME_UNKNOWNIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_DAY_QUOTE_VOLUME_UNKNOWN()
{
    m_CURRENT_DAY_QUOTE_VOLUME_UNKNOWNIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTDAYTOTALTRADES() const
{
    return m_CURRENT_DAY_TOTAL_TRADES;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTDAYTOTALTRADES(int32_t value)
{
    m_CURRENT_DAY_TOTAL_TRADES = value;
    m_CURRENT_DAY_TOTAL_TRADESIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTDAYTOTALTRADESIsSet() const
{
    return m_CURRENT_DAY_TOTAL_TRADESIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_DAY_TOTAL_TRADES()
{
    m_CURRENT_DAY_TOTAL_TRADESIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTDAYTOTALTRADESBUY() const
{
    return m_CURRENT_DAY_TOTAL_TRADES_BUY;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTDAYTOTALTRADESBUY(int32_t value)
{
    m_CURRENT_DAY_TOTAL_TRADES_BUY = value;
    m_CURRENT_DAY_TOTAL_TRADES_BUYIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTDAYTOTALTRADESBUYIsSet() const
{
    return m_CURRENT_DAY_TOTAL_TRADES_BUYIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_DAY_TOTAL_TRADES_BUY()
{
    m_CURRENT_DAY_TOTAL_TRADES_BUYIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTDAYTOTALTRADESSELL() const
{
    return m_CURRENT_DAY_TOTAL_TRADES_SELL;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTDAYTOTALTRADESSELL(int32_t value)
{
    m_CURRENT_DAY_TOTAL_TRADES_SELL = value;
    m_CURRENT_DAY_TOTAL_TRADES_SELLIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTDAYTOTALTRADESSELLIsSet() const
{
    return m_CURRENT_DAY_TOTAL_TRADES_SELLIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_DAY_TOTAL_TRADES_SELL()
{
    m_CURRENT_DAY_TOTAL_TRADES_SELLIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTDAYTOTALTRADESUNKNOWN() const
{
    return m_CURRENT_DAY_TOTAL_TRADES_UNKNOWN;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTDAYTOTALTRADESUNKNOWN(int32_t value)
{
    m_CURRENT_DAY_TOTAL_TRADES_UNKNOWN = value;
    m_CURRENT_DAY_TOTAL_TRADES_UNKNOWNIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTDAYTOTALTRADESUNKNOWNIsSet() const
{
    return m_CURRENT_DAY_TOTAL_TRADES_UNKNOWNIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_DAY_TOTAL_TRADES_UNKNOWN()
{
    m_CURRENT_DAY_TOTAL_TRADES_UNKNOWNIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTDAYVOLUME() const
{
    return m_CURRENT_DAY_VOLUME;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTDAYVOLUME(int32_t value)
{
    m_CURRENT_DAY_VOLUME = value;
    m_CURRENT_DAY_VOLUMEIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTDAYVOLUMEIsSet() const
{
    return m_CURRENT_DAY_VOLUMEIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_DAY_VOLUME()
{
    m_CURRENT_DAY_VOLUMEIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTDAYVOLUMEBUY() const
{
    return m_CURRENT_DAY_VOLUME_BUY;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTDAYVOLUMEBUY(int32_t value)
{
    m_CURRENT_DAY_VOLUME_BUY = value;
    m_CURRENT_DAY_VOLUME_BUYIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTDAYVOLUMEBUYIsSet() const
{
    return m_CURRENT_DAY_VOLUME_BUYIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_DAY_VOLUME_BUY()
{
    m_CURRENT_DAY_VOLUME_BUYIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTDAYVOLUMESELL() const
{
    return m_CURRENT_DAY_VOLUME_SELL;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTDAYVOLUMESELL(int32_t value)
{
    m_CURRENT_DAY_VOLUME_SELL = value;
    m_CURRENT_DAY_VOLUME_SELLIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTDAYVOLUMESELLIsSet() const
{
    return m_CURRENT_DAY_VOLUME_SELLIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_DAY_VOLUME_SELL()
{
    m_CURRENT_DAY_VOLUME_SELLIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTDAYVOLUMEUNKNOWN() const
{
    return m_CURRENT_DAY_VOLUME_UNKNOWN;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTDAYVOLUMEUNKNOWN(int32_t value)
{
    m_CURRENT_DAY_VOLUME_UNKNOWN = value;
    m_CURRENT_DAY_VOLUME_UNKNOWNIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTDAYVOLUMEUNKNOWNIsSet() const
{
    return m_CURRENT_DAY_VOLUME_UNKNOWNIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_DAY_VOLUME_UNKNOWN()
{
    m_CURRENT_DAY_VOLUME_UNKNOWNIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTHOURHIGH() const
{
    return m_CURRENT_HOUR_HIGH;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTHOURHIGH(int32_t value)
{
    m_CURRENT_HOUR_HIGH = value;
    m_CURRENT_HOUR_HIGHIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTHOURHIGHIsSet() const
{
    return m_CURRENT_HOUR_HIGHIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_HOUR_HIGH()
{
    m_CURRENT_HOUR_HIGHIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTHOURLOW() const
{
    return m_CURRENT_HOUR_LOW;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTHOURLOW(int32_t value)
{
    m_CURRENT_HOUR_LOW = value;
    m_CURRENT_HOUR_LOWIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTHOURLOWIsSet() const
{
    return m_CURRENT_HOUR_LOWIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_HOUR_LOW()
{
    m_CURRENT_HOUR_LOWIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTHOUROPEN() const
{
    return m_CURRENT_HOUR_OPEN;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTHOUROPEN(int32_t value)
{
    m_CURRENT_HOUR_OPEN = value;
    m_CURRENT_HOUR_OPENIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTHOUROPENIsSet() const
{
    return m_CURRENT_HOUR_OPENIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_HOUR_OPEN()
{
    m_CURRENT_HOUR_OPENIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTHOURQUOTEVOLUME() const
{
    return m_CURRENT_HOUR_QUOTE_VOLUME;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTHOURQUOTEVOLUME(int32_t value)
{
    m_CURRENT_HOUR_QUOTE_VOLUME = value;
    m_CURRENT_HOUR_QUOTE_VOLUMEIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTHOURQUOTEVOLUMEIsSet() const
{
    return m_CURRENT_HOUR_QUOTE_VOLUMEIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_HOUR_QUOTE_VOLUME()
{
    m_CURRENT_HOUR_QUOTE_VOLUMEIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTHOURQUOTEVOLUMEBUY() const
{
    return m_CURRENT_HOUR_QUOTE_VOLUME_BUY;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTHOURQUOTEVOLUMEBUY(int32_t value)
{
    m_CURRENT_HOUR_QUOTE_VOLUME_BUY = value;
    m_CURRENT_HOUR_QUOTE_VOLUME_BUYIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTHOURQUOTEVOLUMEBUYIsSet() const
{
    return m_CURRENT_HOUR_QUOTE_VOLUME_BUYIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_HOUR_QUOTE_VOLUME_BUY()
{
    m_CURRENT_HOUR_QUOTE_VOLUME_BUYIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTHOURQUOTEVOLUMESELL() const
{
    return m_CURRENT_HOUR_QUOTE_VOLUME_SELL;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTHOURQUOTEVOLUMESELL(int32_t value)
{
    m_CURRENT_HOUR_QUOTE_VOLUME_SELL = value;
    m_CURRENT_HOUR_QUOTE_VOLUME_SELLIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTHOURQUOTEVOLUMESELLIsSet() const
{
    return m_CURRENT_HOUR_QUOTE_VOLUME_SELLIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_HOUR_QUOTE_VOLUME_SELL()
{
    m_CURRENT_HOUR_QUOTE_VOLUME_SELLIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTHOURQUOTEVOLUMEUNKNOWN() const
{
    return m_CURRENT_HOUR_QUOTE_VOLUME_UNKNOWN;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTHOURQUOTEVOLUMEUNKNOWN(int32_t value)
{
    m_CURRENT_HOUR_QUOTE_VOLUME_UNKNOWN = value;
    m_CURRENT_HOUR_QUOTE_VOLUME_UNKNOWNIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTHOURQUOTEVOLUMEUNKNOWNIsSet() const
{
    return m_CURRENT_HOUR_QUOTE_VOLUME_UNKNOWNIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_HOUR_QUOTE_VOLUME_UNKNOWN()
{
    m_CURRENT_HOUR_QUOTE_VOLUME_UNKNOWNIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTHOURTOTALTRADES() const
{
    return m_CURRENT_HOUR_TOTAL_TRADES;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTHOURTOTALTRADES(int32_t value)
{
    m_CURRENT_HOUR_TOTAL_TRADES = value;
    m_CURRENT_HOUR_TOTAL_TRADESIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTHOURTOTALTRADESIsSet() const
{
    return m_CURRENT_HOUR_TOTAL_TRADESIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_HOUR_TOTAL_TRADES()
{
    m_CURRENT_HOUR_TOTAL_TRADESIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTHOURTOTALTRADESBUY() const
{
    return m_CURRENT_HOUR_TOTAL_TRADES_BUY;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTHOURTOTALTRADESBUY(int32_t value)
{
    m_CURRENT_HOUR_TOTAL_TRADES_BUY = value;
    m_CURRENT_HOUR_TOTAL_TRADES_BUYIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTHOURTOTALTRADESBUYIsSet() const
{
    return m_CURRENT_HOUR_TOTAL_TRADES_BUYIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_HOUR_TOTAL_TRADES_BUY()
{
    m_CURRENT_HOUR_TOTAL_TRADES_BUYIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTHOURTOTALTRADESSELL() const
{
    return m_CURRENT_HOUR_TOTAL_TRADES_SELL;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTHOURTOTALTRADESSELL(int32_t value)
{
    m_CURRENT_HOUR_TOTAL_TRADES_SELL = value;
    m_CURRENT_HOUR_TOTAL_TRADES_SELLIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTHOURTOTALTRADESSELLIsSet() const
{
    return m_CURRENT_HOUR_TOTAL_TRADES_SELLIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_HOUR_TOTAL_TRADES_SELL()
{
    m_CURRENT_HOUR_TOTAL_TRADES_SELLIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTHOURTOTALTRADESUNKNOWN() const
{
    return m_CURRENT_HOUR_TOTAL_TRADES_UNKNOWN;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTHOURTOTALTRADESUNKNOWN(int32_t value)
{
    m_CURRENT_HOUR_TOTAL_TRADES_UNKNOWN = value;
    m_CURRENT_HOUR_TOTAL_TRADES_UNKNOWNIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTHOURTOTALTRADESUNKNOWNIsSet() const
{
    return m_CURRENT_HOUR_TOTAL_TRADES_UNKNOWNIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_HOUR_TOTAL_TRADES_UNKNOWN()
{
    m_CURRENT_HOUR_TOTAL_TRADES_UNKNOWNIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTHOURVOLUME() const
{
    return m_CURRENT_HOUR_VOLUME;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTHOURVOLUME(int32_t value)
{
    m_CURRENT_HOUR_VOLUME = value;
    m_CURRENT_HOUR_VOLUMEIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTHOURVOLUMEIsSet() const
{
    return m_CURRENT_HOUR_VOLUMEIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_HOUR_VOLUME()
{
    m_CURRENT_HOUR_VOLUMEIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTHOURVOLUMEBUY() const
{
    return m_CURRENT_HOUR_VOLUME_BUY;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTHOURVOLUMEBUY(int32_t value)
{
    m_CURRENT_HOUR_VOLUME_BUY = value;
    m_CURRENT_HOUR_VOLUME_BUYIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTHOURVOLUMEBUYIsSet() const
{
    return m_CURRENT_HOUR_VOLUME_BUYIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_HOUR_VOLUME_BUY()
{
    m_CURRENT_HOUR_VOLUME_BUYIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTHOURVOLUMESELL() const
{
    return m_CURRENT_HOUR_VOLUME_SELL;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTHOURVOLUMESELL(int32_t value)
{
    m_CURRENT_HOUR_VOLUME_SELL = value;
    m_CURRENT_HOUR_VOLUME_SELLIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTHOURVOLUMESELLIsSet() const
{
    return m_CURRENT_HOUR_VOLUME_SELLIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_HOUR_VOLUME_SELL()
{
    m_CURRENT_HOUR_VOLUME_SELLIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTHOURVOLUMEUNKNOWN() const
{
    return m_CURRENT_HOUR_VOLUME_UNKNOWN;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTHOURVOLUMEUNKNOWN(int32_t value)
{
    m_CURRENT_HOUR_VOLUME_UNKNOWN = value;
    m_CURRENT_HOUR_VOLUME_UNKNOWNIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTHOURVOLUMEUNKNOWNIsSet() const
{
    return m_CURRENT_HOUR_VOLUME_UNKNOWNIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_HOUR_VOLUME_UNKNOWN()
{
    m_CURRENT_HOUR_VOLUME_UNKNOWNIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTMONTHHIGH() const
{
    return m_CURRENT_MONTH_HIGH;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTMONTHHIGH(int32_t value)
{
    m_CURRENT_MONTH_HIGH = value;
    m_CURRENT_MONTH_HIGHIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTMONTHHIGHIsSet() const
{
    return m_CURRENT_MONTH_HIGHIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_MONTH_HIGH()
{
    m_CURRENT_MONTH_HIGHIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTMONTHLOW() const
{
    return m_CURRENT_MONTH_LOW;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTMONTHLOW(int32_t value)
{
    m_CURRENT_MONTH_LOW = value;
    m_CURRENT_MONTH_LOWIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTMONTHLOWIsSet() const
{
    return m_CURRENT_MONTH_LOWIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_MONTH_LOW()
{
    m_CURRENT_MONTH_LOWIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTMONTHOPEN() const
{
    return m_CURRENT_MONTH_OPEN;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTMONTHOPEN(int32_t value)
{
    m_CURRENT_MONTH_OPEN = value;
    m_CURRENT_MONTH_OPENIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTMONTHOPENIsSet() const
{
    return m_CURRENT_MONTH_OPENIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_MONTH_OPEN()
{
    m_CURRENT_MONTH_OPENIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTMONTHQUOTEVOLUME() const
{
    return m_CURRENT_MONTH_QUOTE_VOLUME;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTMONTHQUOTEVOLUME(int32_t value)
{
    m_CURRENT_MONTH_QUOTE_VOLUME = value;
    m_CURRENT_MONTH_QUOTE_VOLUMEIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTMONTHQUOTEVOLUMEIsSet() const
{
    return m_CURRENT_MONTH_QUOTE_VOLUMEIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_MONTH_QUOTE_VOLUME()
{
    m_CURRENT_MONTH_QUOTE_VOLUMEIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTMONTHQUOTEVOLUMEBUY() const
{
    return m_CURRENT_MONTH_QUOTE_VOLUME_BUY;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTMONTHQUOTEVOLUMEBUY(int32_t value)
{
    m_CURRENT_MONTH_QUOTE_VOLUME_BUY = value;
    m_CURRENT_MONTH_QUOTE_VOLUME_BUYIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTMONTHQUOTEVOLUMEBUYIsSet() const
{
    return m_CURRENT_MONTH_QUOTE_VOLUME_BUYIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_MONTH_QUOTE_VOLUME_BUY()
{
    m_CURRENT_MONTH_QUOTE_VOLUME_BUYIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTMONTHQUOTEVOLUMESELL() const
{
    return m_CURRENT_MONTH_QUOTE_VOLUME_SELL;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTMONTHQUOTEVOLUMESELL(int32_t value)
{
    m_CURRENT_MONTH_QUOTE_VOLUME_SELL = value;
    m_CURRENT_MONTH_QUOTE_VOLUME_SELLIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTMONTHQUOTEVOLUMESELLIsSet() const
{
    return m_CURRENT_MONTH_QUOTE_VOLUME_SELLIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_MONTH_QUOTE_VOLUME_SELL()
{
    m_CURRENT_MONTH_QUOTE_VOLUME_SELLIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTMONTHQUOTEVOLUMEUNKNOWN() const
{
    return m_CURRENT_MONTH_QUOTE_VOLUME_UNKNOWN;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTMONTHQUOTEVOLUMEUNKNOWN(int32_t value)
{
    m_CURRENT_MONTH_QUOTE_VOLUME_UNKNOWN = value;
    m_CURRENT_MONTH_QUOTE_VOLUME_UNKNOWNIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTMONTHQUOTEVOLUMEUNKNOWNIsSet() const
{
    return m_CURRENT_MONTH_QUOTE_VOLUME_UNKNOWNIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_MONTH_QUOTE_VOLUME_UNKNOWN()
{
    m_CURRENT_MONTH_QUOTE_VOLUME_UNKNOWNIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTMONTHTOTALTRADES() const
{
    return m_CURRENT_MONTH_TOTAL_TRADES;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTMONTHTOTALTRADES(int32_t value)
{
    m_CURRENT_MONTH_TOTAL_TRADES = value;
    m_CURRENT_MONTH_TOTAL_TRADESIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTMONTHTOTALTRADESIsSet() const
{
    return m_CURRENT_MONTH_TOTAL_TRADESIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_MONTH_TOTAL_TRADES()
{
    m_CURRENT_MONTH_TOTAL_TRADESIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTMONTHTOTALTRADESBUY() const
{
    return m_CURRENT_MONTH_TOTAL_TRADES_BUY;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTMONTHTOTALTRADESBUY(int32_t value)
{
    m_CURRENT_MONTH_TOTAL_TRADES_BUY = value;
    m_CURRENT_MONTH_TOTAL_TRADES_BUYIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTMONTHTOTALTRADESBUYIsSet() const
{
    return m_CURRENT_MONTH_TOTAL_TRADES_BUYIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_MONTH_TOTAL_TRADES_BUY()
{
    m_CURRENT_MONTH_TOTAL_TRADES_BUYIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTMONTHTOTALTRADESSELL() const
{
    return m_CURRENT_MONTH_TOTAL_TRADES_SELL;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTMONTHTOTALTRADESSELL(int32_t value)
{
    m_CURRENT_MONTH_TOTAL_TRADES_SELL = value;
    m_CURRENT_MONTH_TOTAL_TRADES_SELLIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTMONTHTOTALTRADESSELLIsSet() const
{
    return m_CURRENT_MONTH_TOTAL_TRADES_SELLIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_MONTH_TOTAL_TRADES_SELL()
{
    m_CURRENT_MONTH_TOTAL_TRADES_SELLIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTMONTHTOTALTRADESUNKNOWN() const
{
    return m_CURRENT_MONTH_TOTAL_TRADES_UNKNOWN;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTMONTHTOTALTRADESUNKNOWN(int32_t value)
{
    m_CURRENT_MONTH_TOTAL_TRADES_UNKNOWN = value;
    m_CURRENT_MONTH_TOTAL_TRADES_UNKNOWNIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTMONTHTOTALTRADESUNKNOWNIsSet() const
{
    return m_CURRENT_MONTH_TOTAL_TRADES_UNKNOWNIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_MONTH_TOTAL_TRADES_UNKNOWN()
{
    m_CURRENT_MONTH_TOTAL_TRADES_UNKNOWNIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTMONTHVOLUME() const
{
    return m_CURRENT_MONTH_VOLUME;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTMONTHVOLUME(int32_t value)
{
    m_CURRENT_MONTH_VOLUME = value;
    m_CURRENT_MONTH_VOLUMEIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTMONTHVOLUMEIsSet() const
{
    return m_CURRENT_MONTH_VOLUMEIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_MONTH_VOLUME()
{
    m_CURRENT_MONTH_VOLUMEIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTMONTHVOLUMEBUY() const
{
    return m_CURRENT_MONTH_VOLUME_BUY;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTMONTHVOLUMEBUY(int32_t value)
{
    m_CURRENT_MONTH_VOLUME_BUY = value;
    m_CURRENT_MONTH_VOLUME_BUYIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTMONTHVOLUMEBUYIsSet() const
{
    return m_CURRENT_MONTH_VOLUME_BUYIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_MONTH_VOLUME_BUY()
{
    m_CURRENT_MONTH_VOLUME_BUYIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTMONTHVOLUMESELL() const
{
    return m_CURRENT_MONTH_VOLUME_SELL;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTMONTHVOLUMESELL(int32_t value)
{
    m_CURRENT_MONTH_VOLUME_SELL = value;
    m_CURRENT_MONTH_VOLUME_SELLIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTMONTHVOLUMESELLIsSet() const
{
    return m_CURRENT_MONTH_VOLUME_SELLIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_MONTH_VOLUME_SELL()
{
    m_CURRENT_MONTH_VOLUME_SELLIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTMONTHVOLUMEUNKNOWN() const
{
    return m_CURRENT_MONTH_VOLUME_UNKNOWN;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTMONTHVOLUMEUNKNOWN(int32_t value)
{
    m_CURRENT_MONTH_VOLUME_UNKNOWN = value;
    m_CURRENT_MONTH_VOLUME_UNKNOWNIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTMONTHVOLUMEUNKNOWNIsSet() const
{
    return m_CURRENT_MONTH_VOLUME_UNKNOWNIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_MONTH_VOLUME_UNKNOWN()
{
    m_CURRENT_MONTH_VOLUME_UNKNOWNIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTWEEKHIGH() const
{
    return m_CURRENT_WEEK_HIGH;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTWEEKHIGH(int32_t value)
{
    m_CURRENT_WEEK_HIGH = value;
    m_CURRENT_WEEK_HIGHIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTWEEKHIGHIsSet() const
{
    return m_CURRENT_WEEK_HIGHIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_WEEK_HIGH()
{
    m_CURRENT_WEEK_HIGHIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTWEEKLOW() const
{
    return m_CURRENT_WEEK_LOW;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTWEEKLOW(int32_t value)
{
    m_CURRENT_WEEK_LOW = value;
    m_CURRENT_WEEK_LOWIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTWEEKLOWIsSet() const
{
    return m_CURRENT_WEEK_LOWIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_WEEK_LOW()
{
    m_CURRENT_WEEK_LOWIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTWEEKOPEN() const
{
    return m_CURRENT_WEEK_OPEN;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTWEEKOPEN(int32_t value)
{
    m_CURRENT_WEEK_OPEN = value;
    m_CURRENT_WEEK_OPENIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTWEEKOPENIsSet() const
{
    return m_CURRENT_WEEK_OPENIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_WEEK_OPEN()
{
    m_CURRENT_WEEK_OPENIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTWEEKQUOTEVOLUME() const
{
    return m_CURRENT_WEEK_QUOTE_VOLUME;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTWEEKQUOTEVOLUME(int32_t value)
{
    m_CURRENT_WEEK_QUOTE_VOLUME = value;
    m_CURRENT_WEEK_QUOTE_VOLUMEIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTWEEKQUOTEVOLUMEIsSet() const
{
    return m_CURRENT_WEEK_QUOTE_VOLUMEIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_WEEK_QUOTE_VOLUME()
{
    m_CURRENT_WEEK_QUOTE_VOLUMEIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTWEEKQUOTEVOLUMEBUY() const
{
    return m_CURRENT_WEEK_QUOTE_VOLUME_BUY;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTWEEKQUOTEVOLUMEBUY(int32_t value)
{
    m_CURRENT_WEEK_QUOTE_VOLUME_BUY = value;
    m_CURRENT_WEEK_QUOTE_VOLUME_BUYIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTWEEKQUOTEVOLUMEBUYIsSet() const
{
    return m_CURRENT_WEEK_QUOTE_VOLUME_BUYIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_WEEK_QUOTE_VOLUME_BUY()
{
    m_CURRENT_WEEK_QUOTE_VOLUME_BUYIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTWEEKQUOTEVOLUMESELL() const
{
    return m_CURRENT_WEEK_QUOTE_VOLUME_SELL;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTWEEKQUOTEVOLUMESELL(int32_t value)
{
    m_CURRENT_WEEK_QUOTE_VOLUME_SELL = value;
    m_CURRENT_WEEK_QUOTE_VOLUME_SELLIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTWEEKQUOTEVOLUMESELLIsSet() const
{
    return m_CURRENT_WEEK_QUOTE_VOLUME_SELLIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_WEEK_QUOTE_VOLUME_SELL()
{
    m_CURRENT_WEEK_QUOTE_VOLUME_SELLIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTWEEKQUOTEVOLUMEUNKNOWN() const
{
    return m_CURRENT_WEEK_QUOTE_VOLUME_UNKNOWN;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTWEEKQUOTEVOLUMEUNKNOWN(int32_t value)
{
    m_CURRENT_WEEK_QUOTE_VOLUME_UNKNOWN = value;
    m_CURRENT_WEEK_QUOTE_VOLUME_UNKNOWNIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTWEEKQUOTEVOLUMEUNKNOWNIsSet() const
{
    return m_CURRENT_WEEK_QUOTE_VOLUME_UNKNOWNIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_WEEK_QUOTE_VOLUME_UNKNOWN()
{
    m_CURRENT_WEEK_QUOTE_VOLUME_UNKNOWNIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTWEEKTOTALTRADES() const
{
    return m_CURRENT_WEEK_TOTAL_TRADES;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTWEEKTOTALTRADES(int32_t value)
{
    m_CURRENT_WEEK_TOTAL_TRADES = value;
    m_CURRENT_WEEK_TOTAL_TRADESIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTWEEKTOTALTRADESIsSet() const
{
    return m_CURRENT_WEEK_TOTAL_TRADESIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_WEEK_TOTAL_TRADES()
{
    m_CURRENT_WEEK_TOTAL_TRADESIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTWEEKTOTALTRADESBUY() const
{
    return m_CURRENT_WEEK_TOTAL_TRADES_BUY;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTWEEKTOTALTRADESBUY(int32_t value)
{
    m_CURRENT_WEEK_TOTAL_TRADES_BUY = value;
    m_CURRENT_WEEK_TOTAL_TRADES_BUYIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTWEEKTOTALTRADESBUYIsSet() const
{
    return m_CURRENT_WEEK_TOTAL_TRADES_BUYIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_WEEK_TOTAL_TRADES_BUY()
{
    m_CURRENT_WEEK_TOTAL_TRADES_BUYIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTWEEKTOTALTRADESSELL() const
{
    return m_CURRENT_WEEK_TOTAL_TRADES_SELL;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTWEEKTOTALTRADESSELL(int32_t value)
{
    m_CURRENT_WEEK_TOTAL_TRADES_SELL = value;
    m_CURRENT_WEEK_TOTAL_TRADES_SELLIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTWEEKTOTALTRADESSELLIsSet() const
{
    return m_CURRENT_WEEK_TOTAL_TRADES_SELLIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_WEEK_TOTAL_TRADES_SELL()
{
    m_CURRENT_WEEK_TOTAL_TRADES_SELLIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTWEEKTOTALTRADESUNKNOWN() const
{
    return m_CURRENT_WEEK_TOTAL_TRADES_UNKNOWN;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTWEEKTOTALTRADESUNKNOWN(int32_t value)
{
    m_CURRENT_WEEK_TOTAL_TRADES_UNKNOWN = value;
    m_CURRENT_WEEK_TOTAL_TRADES_UNKNOWNIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTWEEKTOTALTRADESUNKNOWNIsSet() const
{
    return m_CURRENT_WEEK_TOTAL_TRADES_UNKNOWNIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_WEEK_TOTAL_TRADES_UNKNOWN()
{
    m_CURRENT_WEEK_TOTAL_TRADES_UNKNOWNIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTWEEKVOLUME() const
{
    return m_CURRENT_WEEK_VOLUME;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTWEEKVOLUME(int32_t value)
{
    m_CURRENT_WEEK_VOLUME = value;
    m_CURRENT_WEEK_VOLUMEIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTWEEKVOLUMEIsSet() const
{
    return m_CURRENT_WEEK_VOLUMEIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_WEEK_VOLUME()
{
    m_CURRENT_WEEK_VOLUMEIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTWEEKVOLUMEBUY() const
{
    return m_CURRENT_WEEK_VOLUME_BUY;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTWEEKVOLUMEBUY(int32_t value)
{
    m_CURRENT_WEEK_VOLUME_BUY = value;
    m_CURRENT_WEEK_VOLUME_BUYIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTWEEKVOLUMEBUYIsSet() const
{
    return m_CURRENT_WEEK_VOLUME_BUYIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_WEEK_VOLUME_BUY()
{
    m_CURRENT_WEEK_VOLUME_BUYIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTWEEKVOLUMESELL() const
{
    return m_CURRENT_WEEK_VOLUME_SELL;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTWEEKVOLUMESELL(int32_t value)
{
    m_CURRENT_WEEK_VOLUME_SELL = value;
    m_CURRENT_WEEK_VOLUME_SELLIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTWEEKVOLUMESELLIsSet() const
{
    return m_CURRENT_WEEK_VOLUME_SELLIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_WEEK_VOLUME_SELL()
{
    m_CURRENT_WEEK_VOLUME_SELLIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTWEEKVOLUMEUNKNOWN() const
{
    return m_CURRENT_WEEK_VOLUME_UNKNOWN;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTWEEKVOLUMEUNKNOWN(int32_t value)
{
    m_CURRENT_WEEK_VOLUME_UNKNOWN = value;
    m_CURRENT_WEEK_VOLUME_UNKNOWNIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTWEEKVOLUMEUNKNOWNIsSet() const
{
    return m_CURRENT_WEEK_VOLUME_UNKNOWNIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_WEEK_VOLUME_UNKNOWN()
{
    m_CURRENT_WEEK_VOLUME_UNKNOWNIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTYEARHIGH() const
{
    return m_CURRENT_YEAR_HIGH;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTYEARHIGH(int32_t value)
{
    m_CURRENT_YEAR_HIGH = value;
    m_CURRENT_YEAR_HIGHIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTYEARHIGHIsSet() const
{
    return m_CURRENT_YEAR_HIGHIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_YEAR_HIGH()
{
    m_CURRENT_YEAR_HIGHIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTYEARLOW() const
{
    return m_CURRENT_YEAR_LOW;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTYEARLOW(int32_t value)
{
    m_CURRENT_YEAR_LOW = value;
    m_CURRENT_YEAR_LOWIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTYEARLOWIsSet() const
{
    return m_CURRENT_YEAR_LOWIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_YEAR_LOW()
{
    m_CURRENT_YEAR_LOWIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTYEAROPEN() const
{
    return m_CURRENT_YEAR_OPEN;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTYEAROPEN(int32_t value)
{
    m_CURRENT_YEAR_OPEN = value;
    m_CURRENT_YEAR_OPENIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTYEAROPENIsSet() const
{
    return m_CURRENT_YEAR_OPENIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_YEAR_OPEN()
{
    m_CURRENT_YEAR_OPENIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTYEARQUOTEVOLUME() const
{
    return m_CURRENT_YEAR_QUOTE_VOLUME;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTYEARQUOTEVOLUME(int32_t value)
{
    m_CURRENT_YEAR_QUOTE_VOLUME = value;
    m_CURRENT_YEAR_QUOTE_VOLUMEIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTYEARQUOTEVOLUMEIsSet() const
{
    return m_CURRENT_YEAR_QUOTE_VOLUMEIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_YEAR_QUOTE_VOLUME()
{
    m_CURRENT_YEAR_QUOTE_VOLUMEIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTYEARQUOTEVOLUMEBUY() const
{
    return m_CURRENT_YEAR_QUOTE_VOLUME_BUY;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTYEARQUOTEVOLUMEBUY(int32_t value)
{
    m_CURRENT_YEAR_QUOTE_VOLUME_BUY = value;
    m_CURRENT_YEAR_QUOTE_VOLUME_BUYIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTYEARQUOTEVOLUMEBUYIsSet() const
{
    return m_CURRENT_YEAR_QUOTE_VOLUME_BUYIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_YEAR_QUOTE_VOLUME_BUY()
{
    m_CURRENT_YEAR_QUOTE_VOLUME_BUYIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTYEARQUOTEVOLUMESELL() const
{
    return m_CURRENT_YEAR_QUOTE_VOLUME_SELL;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTYEARQUOTEVOLUMESELL(int32_t value)
{
    m_CURRENT_YEAR_QUOTE_VOLUME_SELL = value;
    m_CURRENT_YEAR_QUOTE_VOLUME_SELLIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTYEARQUOTEVOLUMESELLIsSet() const
{
    return m_CURRENT_YEAR_QUOTE_VOLUME_SELLIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_YEAR_QUOTE_VOLUME_SELL()
{
    m_CURRENT_YEAR_QUOTE_VOLUME_SELLIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTYEARQUOTEVOLUMEUNKNOWN() const
{
    return m_CURRENT_YEAR_QUOTE_VOLUME_UNKNOWN;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTYEARQUOTEVOLUMEUNKNOWN(int32_t value)
{
    m_CURRENT_YEAR_QUOTE_VOLUME_UNKNOWN = value;
    m_CURRENT_YEAR_QUOTE_VOLUME_UNKNOWNIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTYEARQUOTEVOLUMEUNKNOWNIsSet() const
{
    return m_CURRENT_YEAR_QUOTE_VOLUME_UNKNOWNIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_YEAR_QUOTE_VOLUME_UNKNOWN()
{
    m_CURRENT_YEAR_QUOTE_VOLUME_UNKNOWNIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTYEARTOTALTRADES() const
{
    return m_CURRENT_YEAR_TOTAL_TRADES;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTYEARTOTALTRADES(int32_t value)
{
    m_CURRENT_YEAR_TOTAL_TRADES = value;
    m_CURRENT_YEAR_TOTAL_TRADESIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTYEARTOTALTRADESIsSet() const
{
    return m_CURRENT_YEAR_TOTAL_TRADESIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_YEAR_TOTAL_TRADES()
{
    m_CURRENT_YEAR_TOTAL_TRADESIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTYEARTOTALTRADESBUY() const
{
    return m_CURRENT_YEAR_TOTAL_TRADES_BUY;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTYEARTOTALTRADESBUY(int32_t value)
{
    m_CURRENT_YEAR_TOTAL_TRADES_BUY = value;
    m_CURRENT_YEAR_TOTAL_TRADES_BUYIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTYEARTOTALTRADESBUYIsSet() const
{
    return m_CURRENT_YEAR_TOTAL_TRADES_BUYIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_YEAR_TOTAL_TRADES_BUY()
{
    m_CURRENT_YEAR_TOTAL_TRADES_BUYIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTYEARTOTALTRADESSELL() const
{
    return m_CURRENT_YEAR_TOTAL_TRADES_SELL;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTYEARTOTALTRADESSELL(int32_t value)
{
    m_CURRENT_YEAR_TOTAL_TRADES_SELL = value;
    m_CURRENT_YEAR_TOTAL_TRADES_SELLIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTYEARTOTALTRADESSELLIsSet() const
{
    return m_CURRENT_YEAR_TOTAL_TRADES_SELLIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_YEAR_TOTAL_TRADES_SELL()
{
    m_CURRENT_YEAR_TOTAL_TRADES_SELLIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTYEARTOTALTRADESUNKNOWN() const
{
    return m_CURRENT_YEAR_TOTAL_TRADES_UNKNOWN;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTYEARTOTALTRADESUNKNOWN(int32_t value)
{
    m_CURRENT_YEAR_TOTAL_TRADES_UNKNOWN = value;
    m_CURRENT_YEAR_TOTAL_TRADES_UNKNOWNIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTYEARTOTALTRADESUNKNOWNIsSet() const
{
    return m_CURRENT_YEAR_TOTAL_TRADES_UNKNOWNIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_YEAR_TOTAL_TRADES_UNKNOWN()
{
    m_CURRENT_YEAR_TOTAL_TRADES_UNKNOWNIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTYEARVOLUME() const
{
    return m_CURRENT_YEAR_VOLUME;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTYEARVOLUME(int32_t value)
{
    m_CURRENT_YEAR_VOLUME = value;
    m_CURRENT_YEAR_VOLUMEIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTYEARVOLUMEIsSet() const
{
    return m_CURRENT_YEAR_VOLUMEIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_YEAR_VOLUME()
{
    m_CURRENT_YEAR_VOLUMEIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTYEARVOLUMEBUY() const
{
    return m_CURRENT_YEAR_VOLUME_BUY;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTYEARVOLUMEBUY(int32_t value)
{
    m_CURRENT_YEAR_VOLUME_BUY = value;
    m_CURRENT_YEAR_VOLUME_BUYIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTYEARVOLUMEBUYIsSet() const
{
    return m_CURRENT_YEAR_VOLUME_BUYIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_YEAR_VOLUME_BUY()
{
    m_CURRENT_YEAR_VOLUME_BUYIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTYEARVOLUMESELL() const
{
    return m_CURRENT_YEAR_VOLUME_SELL;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTYEARVOLUMESELL(int32_t value)
{
    m_CURRENT_YEAR_VOLUME_SELL = value;
    m_CURRENT_YEAR_VOLUME_SELLIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTYEARVOLUMESELLIsSet() const
{
    return m_CURRENT_YEAR_VOLUME_SELLIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_YEAR_VOLUME_SELL()
{
    m_CURRENT_YEAR_VOLUME_SELLIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getCURRENTYEARVOLUMEUNKNOWN() const
{
    return m_CURRENT_YEAR_VOLUME_UNKNOWN;
}

void SPOT_INSTRUMENT_MARKET_DATA::setCURRENTYEARVOLUMEUNKNOWN(int32_t value)
{
    m_CURRENT_YEAR_VOLUME_UNKNOWN = value;
    m_CURRENT_YEAR_VOLUME_UNKNOWNIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::cURRENTYEARVOLUMEUNKNOWNIsSet() const
{
    return m_CURRENT_YEAR_VOLUME_UNKNOWNIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetCURRENT_YEAR_VOLUME_UNKNOWN()
{
    m_CURRENT_YEAR_VOLUME_UNKNOWNIsSet = false;
}
utility::string_t SPOT_INSTRUMENT_MARKET_DATA::getINSTRUMENT() const
{
    return m_INSTRUMENT;
}

void SPOT_INSTRUMENT_MARKET_DATA::setINSTRUMENT(const utility::string_t& value)
{
    m_INSTRUMENT = value;
    m_INSTRUMENTIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::iNSTRUMENTIsSet() const
{
    return m_INSTRUMENTIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetINSTRUMENT()
{
    m_INSTRUMENTIsSet = false;
}
utility::string_t SPOT_INSTRUMENT_MARKET_DATA::getLASTPROCESSEDTRADECCSEQ() const
{
    return m_LAST_PROCESSED_TRADE_CCSEQ;
}

void SPOT_INSTRUMENT_MARKET_DATA::setLASTPROCESSEDTRADECCSEQ(const utility::string_t& value)
{
    m_LAST_PROCESSED_TRADE_CCSEQ = value;
    m_LAST_PROCESSED_TRADE_CCSEQIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::lASTPROCESSEDTRADECCSEQIsSet() const
{
    return m_LAST_PROCESSED_TRADE_CCSEQIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetLAST_PROCESSED_TRADE_CCSEQ()
{
    m_LAST_PROCESSED_TRADE_CCSEQIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getLASTPROCESSEDTRADEPRICE() const
{
    return m_LAST_PROCESSED_TRADE_PRICE;
}

void SPOT_INSTRUMENT_MARKET_DATA::setLASTPROCESSEDTRADEPRICE(int32_t value)
{
    m_LAST_PROCESSED_TRADE_PRICE = value;
    m_LAST_PROCESSED_TRADE_PRICEIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::lASTPROCESSEDTRADEPRICEIsSet() const
{
    return m_LAST_PROCESSED_TRADE_PRICEIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetLAST_PROCESSED_TRADE_PRICE()
{
    m_LAST_PROCESSED_TRADE_PRICEIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getLASTPROCESSEDTRADEQUANTITY() const
{
    return m_LAST_PROCESSED_TRADE_QUANTITY;
}

void SPOT_INSTRUMENT_MARKET_DATA::setLASTPROCESSEDTRADEQUANTITY(int32_t value)
{
    m_LAST_PROCESSED_TRADE_QUANTITY = value;
    m_LAST_PROCESSED_TRADE_QUANTITYIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::lASTPROCESSEDTRADEQUANTITYIsSet() const
{
    return m_LAST_PROCESSED_TRADE_QUANTITYIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetLAST_PROCESSED_TRADE_QUANTITY()
{
    m_LAST_PROCESSED_TRADE_QUANTITYIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getLASTPROCESSEDTRADEQUOTEQUANTITY() const
{
    return m_LAST_PROCESSED_TRADE_QUOTE_QUANTITY;
}

void SPOT_INSTRUMENT_MARKET_DATA::setLASTPROCESSEDTRADEQUOTEQUANTITY(int32_t value)
{
    m_LAST_PROCESSED_TRADE_QUOTE_QUANTITY = value;
    m_LAST_PROCESSED_TRADE_QUOTE_QUANTITYIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::lASTPROCESSEDTRADEQUOTEQUANTITYIsSet() const
{
    return m_LAST_PROCESSED_TRADE_QUOTE_QUANTITYIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetLAST_PROCESSED_TRADE_QUOTE_QUANTITY()
{
    m_LAST_PROCESSED_TRADE_QUOTE_QUANTITYIsSet = false;
}
utility::string_t SPOT_INSTRUMENT_MARKET_DATA::getLASTPROCESSEDTRADESIDE() const
{
    return m_LAST_PROCESSED_TRADE_SIDE;
}

void SPOT_INSTRUMENT_MARKET_DATA::setLASTPROCESSEDTRADESIDE(const utility::string_t& value)
{
    m_LAST_PROCESSED_TRADE_SIDE = value;
    m_LAST_PROCESSED_TRADE_SIDEIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::lASTPROCESSEDTRADESIDEIsSet() const
{
    return m_LAST_PROCESSED_TRADE_SIDEIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetLAST_PROCESSED_TRADE_SIDE()
{
    m_LAST_PROCESSED_TRADE_SIDEIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getLASTPROCESSEDTRADETS() const
{
    return m_LAST_PROCESSED_TRADE_TS;
}

void SPOT_INSTRUMENT_MARKET_DATA::setLASTPROCESSEDTRADETS(int32_t value)
{
    m_LAST_PROCESSED_TRADE_TS = value;
    m_LAST_PROCESSED_TRADE_TSIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::lASTPROCESSEDTRADETSIsSet() const
{
    return m_LAST_PROCESSED_TRADE_TSIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetLAST_PROCESSED_TRADE_TS()
{
    m_LAST_PROCESSED_TRADE_TSIsSet = false;
}
utility::string_t SPOT_INSTRUMENT_MARKET_DATA::getLASTTRADECCSEQ() const
{
    return m_LAST_TRADE_CCSEQ;
}

void SPOT_INSTRUMENT_MARKET_DATA::setLASTTRADECCSEQ(const utility::string_t& value)
{
    m_LAST_TRADE_CCSEQ = value;
    m_LAST_TRADE_CCSEQIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::lASTTRADECCSEQIsSet() const
{
    return m_LAST_TRADE_CCSEQIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetLAST_TRADE_CCSEQ()
{
    m_LAST_TRADE_CCSEQIsSet = false;
}
utility::string_t SPOT_INSTRUMENT_MARKET_DATA::getLASTTRADEID() const
{
    return m_LAST_TRADE_ID;
}

void SPOT_INSTRUMENT_MARKET_DATA::setLASTTRADEID(const utility::string_t& value)
{
    m_LAST_TRADE_ID = value;
    m_LAST_TRADE_IDIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::lASTTRADEIDIsSet() const
{
    return m_LAST_TRADE_IDIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetLAST_TRADE_ID()
{
    m_LAST_TRADE_IDIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getLASTTRADEQUANTITY() const
{
    return m_LAST_TRADE_QUANTITY;
}

void SPOT_INSTRUMENT_MARKET_DATA::setLASTTRADEQUANTITY(int32_t value)
{
    m_LAST_TRADE_QUANTITY = value;
    m_LAST_TRADE_QUANTITYIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::lASTTRADEQUANTITYIsSet() const
{
    return m_LAST_TRADE_QUANTITYIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetLAST_TRADE_QUANTITY()
{
    m_LAST_TRADE_QUANTITYIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getLASTTRADEQUOTEQUANTITY() const
{
    return m_LAST_TRADE_QUOTE_QUANTITY;
}

void SPOT_INSTRUMENT_MARKET_DATA::setLASTTRADEQUOTEQUANTITY(int32_t value)
{
    m_LAST_TRADE_QUOTE_QUANTITY = value;
    m_LAST_TRADE_QUOTE_QUANTITYIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::lASTTRADEQUOTEQUANTITYIsSet() const
{
    return m_LAST_TRADE_QUOTE_QUANTITYIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetLAST_TRADE_QUOTE_QUANTITY()
{
    m_LAST_TRADE_QUOTE_QUANTITYIsSet = false;
}
utility::string_t SPOT_INSTRUMENT_MARKET_DATA::getLASTTRADESIDE() const
{
    return m_LAST_TRADE_SIDE;
}

void SPOT_INSTRUMENT_MARKET_DATA::setLASTTRADESIDE(const utility::string_t& value)
{
    m_LAST_TRADE_SIDE = value;
    m_LAST_TRADE_SIDEIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::lASTTRADESIDEIsSet() const
{
    return m_LAST_TRADE_SIDEIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetLAST_TRADE_SIDE()
{
    m_LAST_TRADE_SIDEIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getLIFETIMEFIRSTTRADETS() const
{
    return m_LIFETIME_FIRST_TRADE_TS;
}

void SPOT_INSTRUMENT_MARKET_DATA::setLIFETIMEFIRSTTRADETS(int32_t value)
{
    m_LIFETIME_FIRST_TRADE_TS = value;
    m_LIFETIME_FIRST_TRADE_TSIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::lIFETIMEFIRSTTRADETSIsSet() const
{
    return m_LIFETIME_FIRST_TRADE_TSIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetLIFETIME_FIRST_TRADE_TS()
{
    m_LIFETIME_FIRST_TRADE_TSIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getLIFETIMEHIGH() const
{
    return m_LIFETIME_HIGH;
}

void SPOT_INSTRUMENT_MARKET_DATA::setLIFETIMEHIGH(int32_t value)
{
    m_LIFETIME_HIGH = value;
    m_LIFETIME_HIGHIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::lIFETIMEHIGHIsSet() const
{
    return m_LIFETIME_HIGHIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetLIFETIME_HIGH()
{
    m_LIFETIME_HIGHIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getLIFETIMEHIGHTS() const
{
    return m_LIFETIME_HIGH_TS;
}

void SPOT_INSTRUMENT_MARKET_DATA::setLIFETIMEHIGHTS(int32_t value)
{
    m_LIFETIME_HIGH_TS = value;
    m_LIFETIME_HIGH_TSIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::lIFETIMEHIGHTSIsSet() const
{
    return m_LIFETIME_HIGH_TSIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetLIFETIME_HIGH_TS()
{
    m_LIFETIME_HIGH_TSIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getLIFETIMELOW() const
{
    return m_LIFETIME_LOW;
}

void SPOT_INSTRUMENT_MARKET_DATA::setLIFETIMELOW(int32_t value)
{
    m_LIFETIME_LOW = value;
    m_LIFETIME_LOWIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::lIFETIMELOWIsSet() const
{
    return m_LIFETIME_LOWIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetLIFETIME_LOW()
{
    m_LIFETIME_LOWIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getLIFETIMELOWTS() const
{
    return m_LIFETIME_LOW_TS;
}

void SPOT_INSTRUMENT_MARKET_DATA::setLIFETIMELOWTS(int32_t value)
{
    m_LIFETIME_LOW_TS = value;
    m_LIFETIME_LOW_TSIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::lIFETIMELOWTSIsSet() const
{
    return m_LIFETIME_LOW_TSIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetLIFETIME_LOW_TS()
{
    m_LIFETIME_LOW_TSIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getLIFETIMEOPEN() const
{
    return m_LIFETIME_OPEN;
}

void SPOT_INSTRUMENT_MARKET_DATA::setLIFETIMEOPEN(int32_t value)
{
    m_LIFETIME_OPEN = value;
    m_LIFETIME_OPENIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::lIFETIMEOPENIsSet() const
{
    return m_LIFETIME_OPENIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetLIFETIME_OPEN()
{
    m_LIFETIME_OPENIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getLIFETIMEQUOTEVOLUME() const
{
    return m_LIFETIME_QUOTE_VOLUME;
}

void SPOT_INSTRUMENT_MARKET_DATA::setLIFETIMEQUOTEVOLUME(int32_t value)
{
    m_LIFETIME_QUOTE_VOLUME = value;
    m_LIFETIME_QUOTE_VOLUMEIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::lIFETIMEQUOTEVOLUMEIsSet() const
{
    return m_LIFETIME_QUOTE_VOLUMEIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetLIFETIME_QUOTE_VOLUME()
{
    m_LIFETIME_QUOTE_VOLUMEIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getLIFETIMEQUOTEVOLUMEBUY() const
{
    return m_LIFETIME_QUOTE_VOLUME_BUY;
}

void SPOT_INSTRUMENT_MARKET_DATA::setLIFETIMEQUOTEVOLUMEBUY(int32_t value)
{
    m_LIFETIME_QUOTE_VOLUME_BUY = value;
    m_LIFETIME_QUOTE_VOLUME_BUYIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::lIFETIMEQUOTEVOLUMEBUYIsSet() const
{
    return m_LIFETIME_QUOTE_VOLUME_BUYIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetLIFETIME_QUOTE_VOLUME_BUY()
{
    m_LIFETIME_QUOTE_VOLUME_BUYIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getLIFETIMEQUOTEVOLUMESELL() const
{
    return m_LIFETIME_QUOTE_VOLUME_SELL;
}

void SPOT_INSTRUMENT_MARKET_DATA::setLIFETIMEQUOTEVOLUMESELL(int32_t value)
{
    m_LIFETIME_QUOTE_VOLUME_SELL = value;
    m_LIFETIME_QUOTE_VOLUME_SELLIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::lIFETIMEQUOTEVOLUMESELLIsSet() const
{
    return m_LIFETIME_QUOTE_VOLUME_SELLIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetLIFETIME_QUOTE_VOLUME_SELL()
{
    m_LIFETIME_QUOTE_VOLUME_SELLIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getLIFETIMEQUOTEVOLUMEUNKNOWN() const
{
    return m_LIFETIME_QUOTE_VOLUME_UNKNOWN;
}

void SPOT_INSTRUMENT_MARKET_DATA::setLIFETIMEQUOTEVOLUMEUNKNOWN(int32_t value)
{
    m_LIFETIME_QUOTE_VOLUME_UNKNOWN = value;
    m_LIFETIME_QUOTE_VOLUME_UNKNOWNIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::lIFETIMEQUOTEVOLUMEUNKNOWNIsSet() const
{
    return m_LIFETIME_QUOTE_VOLUME_UNKNOWNIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetLIFETIME_QUOTE_VOLUME_UNKNOWN()
{
    m_LIFETIME_QUOTE_VOLUME_UNKNOWNIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getLIFETIMETOTALTRADES() const
{
    return m_LIFETIME_TOTAL_TRADES;
}

void SPOT_INSTRUMENT_MARKET_DATA::setLIFETIMETOTALTRADES(int32_t value)
{
    m_LIFETIME_TOTAL_TRADES = value;
    m_LIFETIME_TOTAL_TRADESIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::lIFETIMETOTALTRADESIsSet() const
{
    return m_LIFETIME_TOTAL_TRADESIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetLIFETIME_TOTAL_TRADES()
{
    m_LIFETIME_TOTAL_TRADESIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getLIFETIMETOTALTRADESBUY() const
{
    return m_LIFETIME_TOTAL_TRADES_BUY;
}

void SPOT_INSTRUMENT_MARKET_DATA::setLIFETIMETOTALTRADESBUY(int32_t value)
{
    m_LIFETIME_TOTAL_TRADES_BUY = value;
    m_LIFETIME_TOTAL_TRADES_BUYIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::lIFETIMETOTALTRADESBUYIsSet() const
{
    return m_LIFETIME_TOTAL_TRADES_BUYIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetLIFETIME_TOTAL_TRADES_BUY()
{
    m_LIFETIME_TOTAL_TRADES_BUYIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getLIFETIMETOTALTRADESSELL() const
{
    return m_LIFETIME_TOTAL_TRADES_SELL;
}

void SPOT_INSTRUMENT_MARKET_DATA::setLIFETIMETOTALTRADESSELL(int32_t value)
{
    m_LIFETIME_TOTAL_TRADES_SELL = value;
    m_LIFETIME_TOTAL_TRADES_SELLIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::lIFETIMETOTALTRADESSELLIsSet() const
{
    return m_LIFETIME_TOTAL_TRADES_SELLIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetLIFETIME_TOTAL_TRADES_SELL()
{
    m_LIFETIME_TOTAL_TRADES_SELLIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getLIFETIMETOTALTRADESUNKNOWN() const
{
    return m_LIFETIME_TOTAL_TRADES_UNKNOWN;
}

void SPOT_INSTRUMENT_MARKET_DATA::setLIFETIMETOTALTRADESUNKNOWN(int32_t value)
{
    m_LIFETIME_TOTAL_TRADES_UNKNOWN = value;
    m_LIFETIME_TOTAL_TRADES_UNKNOWNIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::lIFETIMETOTALTRADESUNKNOWNIsSet() const
{
    return m_LIFETIME_TOTAL_TRADES_UNKNOWNIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetLIFETIME_TOTAL_TRADES_UNKNOWN()
{
    m_LIFETIME_TOTAL_TRADES_UNKNOWNIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getLIFETIMEVOLUME() const
{
    return m_LIFETIME_VOLUME;
}

void SPOT_INSTRUMENT_MARKET_DATA::setLIFETIMEVOLUME(int32_t value)
{
    m_LIFETIME_VOLUME = value;
    m_LIFETIME_VOLUMEIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::lIFETIMEVOLUMEIsSet() const
{
    return m_LIFETIME_VOLUMEIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetLIFETIME_VOLUME()
{
    m_LIFETIME_VOLUMEIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getLIFETIMEVOLUMEBUY() const
{
    return m_LIFETIME_VOLUME_BUY;
}

void SPOT_INSTRUMENT_MARKET_DATA::setLIFETIMEVOLUMEBUY(int32_t value)
{
    m_LIFETIME_VOLUME_BUY = value;
    m_LIFETIME_VOLUME_BUYIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::lIFETIMEVOLUMEBUYIsSet() const
{
    return m_LIFETIME_VOLUME_BUYIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetLIFETIME_VOLUME_BUY()
{
    m_LIFETIME_VOLUME_BUYIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getLIFETIMEVOLUMESELL() const
{
    return m_LIFETIME_VOLUME_SELL;
}

void SPOT_INSTRUMENT_MARKET_DATA::setLIFETIMEVOLUMESELL(int32_t value)
{
    m_LIFETIME_VOLUME_SELL = value;
    m_LIFETIME_VOLUME_SELLIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::lIFETIMEVOLUMESELLIsSet() const
{
    return m_LIFETIME_VOLUME_SELLIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetLIFETIME_VOLUME_SELL()
{
    m_LIFETIME_VOLUME_SELLIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getLIFETIMEVOLUMEUNKNOWN() const
{
    return m_LIFETIME_VOLUME_UNKNOWN;
}

void SPOT_INSTRUMENT_MARKET_DATA::setLIFETIMEVOLUMEUNKNOWN(int32_t value)
{
    m_LIFETIME_VOLUME_UNKNOWN = value;
    m_LIFETIME_VOLUME_UNKNOWNIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::lIFETIMEVOLUMEUNKNOWNIsSet() const
{
    return m_LIFETIME_VOLUME_UNKNOWNIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetLIFETIME_VOLUME_UNKNOWN()
{
    m_LIFETIME_VOLUME_UNKNOWNIsSet = false;
}
utility::string_t SPOT_INSTRUMENT_MARKET_DATA::getMAPPEDINSTRUMENT() const
{
    return m_MAPPED_INSTRUMENT;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMAPPEDINSTRUMENT(const utility::string_t& value)
{
    m_MAPPED_INSTRUMENT = value;
    m_MAPPED_INSTRUMENTIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mAPPEDINSTRUMENTIsSet() const
{
    return m_MAPPED_INSTRUMENTIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMAPPED_INSTRUMENT()
{
    m_MAPPED_INSTRUMENTIsSet = false;
}
utility::string_t SPOT_INSTRUMENT_MARKET_DATA::getMARKET() const
{
    return m_MARKET;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMARKET(const utility::string_t& value)
{
    m_MARKET = value;
    m_MARKETIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mARKETIsSet() const
{
    return m_MARKETIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMARKET()
{
    m_MARKETIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING180DAYHIGH() const
{
    return m_MOVING_180_DAY_HIGH;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING180DAYHIGH(int32_t value)
{
    m_MOVING_180_DAY_HIGH = value;
    m_MOVING_180_DAY_HIGHIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING180DAYHIGHIsSet() const
{
    return m_MOVING_180_DAY_HIGHIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_180_DAY_HIGH()
{
    m_MOVING_180_DAY_HIGHIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING180DAYLOW() const
{
    return m_MOVING_180_DAY_LOW;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING180DAYLOW(int32_t value)
{
    m_MOVING_180_DAY_LOW = value;
    m_MOVING_180_DAY_LOWIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING180DAYLOWIsSet() const
{
    return m_MOVING_180_DAY_LOWIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_180_DAY_LOW()
{
    m_MOVING_180_DAY_LOWIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING180DAYOPEN() const
{
    return m_MOVING_180_DAY_OPEN;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING180DAYOPEN(int32_t value)
{
    m_MOVING_180_DAY_OPEN = value;
    m_MOVING_180_DAY_OPENIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING180DAYOPENIsSet() const
{
    return m_MOVING_180_DAY_OPENIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_180_DAY_OPEN()
{
    m_MOVING_180_DAY_OPENIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING180DAYQUOTEVOLUME() const
{
    return m_MOVING_180_DAY_QUOTE_VOLUME;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING180DAYQUOTEVOLUME(int32_t value)
{
    m_MOVING_180_DAY_QUOTE_VOLUME = value;
    m_MOVING_180_DAY_QUOTE_VOLUMEIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING180DAYQUOTEVOLUMEIsSet() const
{
    return m_MOVING_180_DAY_QUOTE_VOLUMEIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_180_DAY_QUOTE_VOLUME()
{
    m_MOVING_180_DAY_QUOTE_VOLUMEIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING180DAYQUOTEVOLUMEBUY() const
{
    return m_MOVING_180_DAY_QUOTE_VOLUME_BUY;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING180DAYQUOTEVOLUMEBUY(int32_t value)
{
    m_MOVING_180_DAY_QUOTE_VOLUME_BUY = value;
    m_MOVING_180_DAY_QUOTE_VOLUME_BUYIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING180DAYQUOTEVOLUMEBUYIsSet() const
{
    return m_MOVING_180_DAY_QUOTE_VOLUME_BUYIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_180_DAY_QUOTE_VOLUME_BUY()
{
    m_MOVING_180_DAY_QUOTE_VOLUME_BUYIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING180DAYQUOTEVOLUMESELL() const
{
    return m_MOVING_180_DAY_QUOTE_VOLUME_SELL;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING180DAYQUOTEVOLUMESELL(int32_t value)
{
    m_MOVING_180_DAY_QUOTE_VOLUME_SELL = value;
    m_MOVING_180_DAY_QUOTE_VOLUME_SELLIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING180DAYQUOTEVOLUMESELLIsSet() const
{
    return m_MOVING_180_DAY_QUOTE_VOLUME_SELLIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_180_DAY_QUOTE_VOLUME_SELL()
{
    m_MOVING_180_DAY_QUOTE_VOLUME_SELLIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING180DAYQUOTEVOLUMEUNKNOWN() const
{
    return m_MOVING_180_DAY_QUOTE_VOLUME_UNKNOWN;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING180DAYQUOTEVOLUMEUNKNOWN(int32_t value)
{
    m_MOVING_180_DAY_QUOTE_VOLUME_UNKNOWN = value;
    m_MOVING_180_DAY_QUOTE_VOLUME_UNKNOWNIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING180DAYQUOTEVOLUMEUNKNOWNIsSet() const
{
    return m_MOVING_180_DAY_QUOTE_VOLUME_UNKNOWNIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_180_DAY_QUOTE_VOLUME_UNKNOWN()
{
    m_MOVING_180_DAY_QUOTE_VOLUME_UNKNOWNIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING180DAYTOTALTRADES() const
{
    return m_MOVING_180_DAY_TOTAL_TRADES;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING180DAYTOTALTRADES(int32_t value)
{
    m_MOVING_180_DAY_TOTAL_TRADES = value;
    m_MOVING_180_DAY_TOTAL_TRADESIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING180DAYTOTALTRADESIsSet() const
{
    return m_MOVING_180_DAY_TOTAL_TRADESIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_180_DAY_TOTAL_TRADES()
{
    m_MOVING_180_DAY_TOTAL_TRADESIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING180DAYTOTALTRADESBUY() const
{
    return m_MOVING_180_DAY_TOTAL_TRADES_BUY;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING180DAYTOTALTRADESBUY(int32_t value)
{
    m_MOVING_180_DAY_TOTAL_TRADES_BUY = value;
    m_MOVING_180_DAY_TOTAL_TRADES_BUYIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING180DAYTOTALTRADESBUYIsSet() const
{
    return m_MOVING_180_DAY_TOTAL_TRADES_BUYIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_180_DAY_TOTAL_TRADES_BUY()
{
    m_MOVING_180_DAY_TOTAL_TRADES_BUYIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING180DAYTOTALTRADESSELL() const
{
    return m_MOVING_180_DAY_TOTAL_TRADES_SELL;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING180DAYTOTALTRADESSELL(int32_t value)
{
    m_MOVING_180_DAY_TOTAL_TRADES_SELL = value;
    m_MOVING_180_DAY_TOTAL_TRADES_SELLIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING180DAYTOTALTRADESSELLIsSet() const
{
    return m_MOVING_180_DAY_TOTAL_TRADES_SELLIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_180_DAY_TOTAL_TRADES_SELL()
{
    m_MOVING_180_DAY_TOTAL_TRADES_SELLIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING180DAYTOTALTRADESUNKNOWN() const
{
    return m_MOVING_180_DAY_TOTAL_TRADES_UNKNOWN;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING180DAYTOTALTRADESUNKNOWN(int32_t value)
{
    m_MOVING_180_DAY_TOTAL_TRADES_UNKNOWN = value;
    m_MOVING_180_DAY_TOTAL_TRADES_UNKNOWNIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING180DAYTOTALTRADESUNKNOWNIsSet() const
{
    return m_MOVING_180_DAY_TOTAL_TRADES_UNKNOWNIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_180_DAY_TOTAL_TRADES_UNKNOWN()
{
    m_MOVING_180_DAY_TOTAL_TRADES_UNKNOWNIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING180DAYVOLUME() const
{
    return m_MOVING_180_DAY_VOLUME;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING180DAYVOLUME(int32_t value)
{
    m_MOVING_180_DAY_VOLUME = value;
    m_MOVING_180_DAY_VOLUMEIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING180DAYVOLUMEIsSet() const
{
    return m_MOVING_180_DAY_VOLUMEIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_180_DAY_VOLUME()
{
    m_MOVING_180_DAY_VOLUMEIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING180DAYVOLUMEBUY() const
{
    return m_MOVING_180_DAY_VOLUME_BUY;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING180DAYVOLUMEBUY(int32_t value)
{
    m_MOVING_180_DAY_VOLUME_BUY = value;
    m_MOVING_180_DAY_VOLUME_BUYIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING180DAYVOLUMEBUYIsSet() const
{
    return m_MOVING_180_DAY_VOLUME_BUYIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_180_DAY_VOLUME_BUY()
{
    m_MOVING_180_DAY_VOLUME_BUYIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING180DAYVOLUMESELL() const
{
    return m_MOVING_180_DAY_VOLUME_SELL;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING180DAYVOLUMESELL(int32_t value)
{
    m_MOVING_180_DAY_VOLUME_SELL = value;
    m_MOVING_180_DAY_VOLUME_SELLIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING180DAYVOLUMESELLIsSet() const
{
    return m_MOVING_180_DAY_VOLUME_SELLIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_180_DAY_VOLUME_SELL()
{
    m_MOVING_180_DAY_VOLUME_SELLIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING180DAYVOLUMEUNKNOWN() const
{
    return m_MOVING_180_DAY_VOLUME_UNKNOWN;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING180DAYVOLUMEUNKNOWN(int32_t value)
{
    m_MOVING_180_DAY_VOLUME_UNKNOWN = value;
    m_MOVING_180_DAY_VOLUME_UNKNOWNIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING180DAYVOLUMEUNKNOWNIsSet() const
{
    return m_MOVING_180_DAY_VOLUME_UNKNOWNIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_180_DAY_VOLUME_UNKNOWN()
{
    m_MOVING_180_DAY_VOLUME_UNKNOWNIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING24HOURHIGH() const
{
    return m_MOVING_24_HOUR_HIGH;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING24HOURHIGH(int32_t value)
{
    m_MOVING_24_HOUR_HIGH = value;
    m_MOVING_24_HOUR_HIGHIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING24HOURHIGHIsSet() const
{
    return m_MOVING_24_HOUR_HIGHIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_24_HOUR_HIGH()
{
    m_MOVING_24_HOUR_HIGHIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING24HOURLOW() const
{
    return m_MOVING_24_HOUR_LOW;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING24HOURLOW(int32_t value)
{
    m_MOVING_24_HOUR_LOW = value;
    m_MOVING_24_HOUR_LOWIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING24HOURLOWIsSet() const
{
    return m_MOVING_24_HOUR_LOWIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_24_HOUR_LOW()
{
    m_MOVING_24_HOUR_LOWIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING24HOUROPEN() const
{
    return m_MOVING_24_HOUR_OPEN;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING24HOUROPEN(int32_t value)
{
    m_MOVING_24_HOUR_OPEN = value;
    m_MOVING_24_HOUR_OPENIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING24HOUROPENIsSet() const
{
    return m_MOVING_24_HOUR_OPENIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_24_HOUR_OPEN()
{
    m_MOVING_24_HOUR_OPENIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING24HOURQUOTEVOLUME() const
{
    return m_MOVING_24_HOUR_QUOTE_VOLUME;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING24HOURQUOTEVOLUME(int32_t value)
{
    m_MOVING_24_HOUR_QUOTE_VOLUME = value;
    m_MOVING_24_HOUR_QUOTE_VOLUMEIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING24HOURQUOTEVOLUMEIsSet() const
{
    return m_MOVING_24_HOUR_QUOTE_VOLUMEIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_24_HOUR_QUOTE_VOLUME()
{
    m_MOVING_24_HOUR_QUOTE_VOLUMEIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING24HOURQUOTEVOLUMEBUY() const
{
    return m_MOVING_24_HOUR_QUOTE_VOLUME_BUY;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING24HOURQUOTEVOLUMEBUY(int32_t value)
{
    m_MOVING_24_HOUR_QUOTE_VOLUME_BUY = value;
    m_MOVING_24_HOUR_QUOTE_VOLUME_BUYIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING24HOURQUOTEVOLUMEBUYIsSet() const
{
    return m_MOVING_24_HOUR_QUOTE_VOLUME_BUYIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_24_HOUR_QUOTE_VOLUME_BUY()
{
    m_MOVING_24_HOUR_QUOTE_VOLUME_BUYIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING24HOURQUOTEVOLUMESELL() const
{
    return m_MOVING_24_HOUR_QUOTE_VOLUME_SELL;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING24HOURQUOTEVOLUMESELL(int32_t value)
{
    m_MOVING_24_HOUR_QUOTE_VOLUME_SELL = value;
    m_MOVING_24_HOUR_QUOTE_VOLUME_SELLIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING24HOURQUOTEVOLUMESELLIsSet() const
{
    return m_MOVING_24_HOUR_QUOTE_VOLUME_SELLIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_24_HOUR_QUOTE_VOLUME_SELL()
{
    m_MOVING_24_HOUR_QUOTE_VOLUME_SELLIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING24HOURQUOTEVOLUMEUNKNOWN() const
{
    return m_MOVING_24_HOUR_QUOTE_VOLUME_UNKNOWN;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING24HOURQUOTEVOLUMEUNKNOWN(int32_t value)
{
    m_MOVING_24_HOUR_QUOTE_VOLUME_UNKNOWN = value;
    m_MOVING_24_HOUR_QUOTE_VOLUME_UNKNOWNIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING24HOURQUOTEVOLUMEUNKNOWNIsSet() const
{
    return m_MOVING_24_HOUR_QUOTE_VOLUME_UNKNOWNIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_24_HOUR_QUOTE_VOLUME_UNKNOWN()
{
    m_MOVING_24_HOUR_QUOTE_VOLUME_UNKNOWNIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING24HOURTOTALTRADES() const
{
    return m_MOVING_24_HOUR_TOTAL_TRADES;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING24HOURTOTALTRADES(int32_t value)
{
    m_MOVING_24_HOUR_TOTAL_TRADES = value;
    m_MOVING_24_HOUR_TOTAL_TRADESIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING24HOURTOTALTRADESIsSet() const
{
    return m_MOVING_24_HOUR_TOTAL_TRADESIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_24_HOUR_TOTAL_TRADES()
{
    m_MOVING_24_HOUR_TOTAL_TRADESIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING24HOURTOTALTRADESBUY() const
{
    return m_MOVING_24_HOUR_TOTAL_TRADES_BUY;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING24HOURTOTALTRADESBUY(int32_t value)
{
    m_MOVING_24_HOUR_TOTAL_TRADES_BUY = value;
    m_MOVING_24_HOUR_TOTAL_TRADES_BUYIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING24HOURTOTALTRADESBUYIsSet() const
{
    return m_MOVING_24_HOUR_TOTAL_TRADES_BUYIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_24_HOUR_TOTAL_TRADES_BUY()
{
    m_MOVING_24_HOUR_TOTAL_TRADES_BUYIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING24HOURTOTALTRADESSELL() const
{
    return m_MOVING_24_HOUR_TOTAL_TRADES_SELL;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING24HOURTOTALTRADESSELL(int32_t value)
{
    m_MOVING_24_HOUR_TOTAL_TRADES_SELL = value;
    m_MOVING_24_HOUR_TOTAL_TRADES_SELLIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING24HOURTOTALTRADESSELLIsSet() const
{
    return m_MOVING_24_HOUR_TOTAL_TRADES_SELLIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_24_HOUR_TOTAL_TRADES_SELL()
{
    m_MOVING_24_HOUR_TOTAL_TRADES_SELLIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING24HOURTOTALTRADESUNKNOWN() const
{
    return m_MOVING_24_HOUR_TOTAL_TRADES_UNKNOWN;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING24HOURTOTALTRADESUNKNOWN(int32_t value)
{
    m_MOVING_24_HOUR_TOTAL_TRADES_UNKNOWN = value;
    m_MOVING_24_HOUR_TOTAL_TRADES_UNKNOWNIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING24HOURTOTALTRADESUNKNOWNIsSet() const
{
    return m_MOVING_24_HOUR_TOTAL_TRADES_UNKNOWNIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_24_HOUR_TOTAL_TRADES_UNKNOWN()
{
    m_MOVING_24_HOUR_TOTAL_TRADES_UNKNOWNIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING24HOURVOLUME() const
{
    return m_MOVING_24_HOUR_VOLUME;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING24HOURVOLUME(int32_t value)
{
    m_MOVING_24_HOUR_VOLUME = value;
    m_MOVING_24_HOUR_VOLUMEIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING24HOURVOLUMEIsSet() const
{
    return m_MOVING_24_HOUR_VOLUMEIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_24_HOUR_VOLUME()
{
    m_MOVING_24_HOUR_VOLUMEIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING24HOURVOLUMEBUY() const
{
    return m_MOVING_24_HOUR_VOLUME_BUY;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING24HOURVOLUMEBUY(int32_t value)
{
    m_MOVING_24_HOUR_VOLUME_BUY = value;
    m_MOVING_24_HOUR_VOLUME_BUYIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING24HOURVOLUMEBUYIsSet() const
{
    return m_MOVING_24_HOUR_VOLUME_BUYIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_24_HOUR_VOLUME_BUY()
{
    m_MOVING_24_HOUR_VOLUME_BUYIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING24HOURVOLUMESELL() const
{
    return m_MOVING_24_HOUR_VOLUME_SELL;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING24HOURVOLUMESELL(int32_t value)
{
    m_MOVING_24_HOUR_VOLUME_SELL = value;
    m_MOVING_24_HOUR_VOLUME_SELLIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING24HOURVOLUMESELLIsSet() const
{
    return m_MOVING_24_HOUR_VOLUME_SELLIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_24_HOUR_VOLUME_SELL()
{
    m_MOVING_24_HOUR_VOLUME_SELLIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING24HOURVOLUMEUNKNOWN() const
{
    return m_MOVING_24_HOUR_VOLUME_UNKNOWN;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING24HOURVOLUMEUNKNOWN(int32_t value)
{
    m_MOVING_24_HOUR_VOLUME_UNKNOWN = value;
    m_MOVING_24_HOUR_VOLUME_UNKNOWNIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING24HOURVOLUMEUNKNOWNIsSet() const
{
    return m_MOVING_24_HOUR_VOLUME_UNKNOWNIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_24_HOUR_VOLUME_UNKNOWN()
{
    m_MOVING_24_HOUR_VOLUME_UNKNOWNIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING30DAYHIGH() const
{
    return m_MOVING_30_DAY_HIGH;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING30DAYHIGH(int32_t value)
{
    m_MOVING_30_DAY_HIGH = value;
    m_MOVING_30_DAY_HIGHIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING30DAYHIGHIsSet() const
{
    return m_MOVING_30_DAY_HIGHIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_30_DAY_HIGH()
{
    m_MOVING_30_DAY_HIGHIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING30DAYLOW() const
{
    return m_MOVING_30_DAY_LOW;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING30DAYLOW(int32_t value)
{
    m_MOVING_30_DAY_LOW = value;
    m_MOVING_30_DAY_LOWIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING30DAYLOWIsSet() const
{
    return m_MOVING_30_DAY_LOWIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_30_DAY_LOW()
{
    m_MOVING_30_DAY_LOWIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING30DAYOPEN() const
{
    return m_MOVING_30_DAY_OPEN;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING30DAYOPEN(int32_t value)
{
    m_MOVING_30_DAY_OPEN = value;
    m_MOVING_30_DAY_OPENIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING30DAYOPENIsSet() const
{
    return m_MOVING_30_DAY_OPENIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_30_DAY_OPEN()
{
    m_MOVING_30_DAY_OPENIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING30DAYQUOTEVOLUME() const
{
    return m_MOVING_30_DAY_QUOTE_VOLUME;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING30DAYQUOTEVOLUME(int32_t value)
{
    m_MOVING_30_DAY_QUOTE_VOLUME = value;
    m_MOVING_30_DAY_QUOTE_VOLUMEIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING30DAYQUOTEVOLUMEIsSet() const
{
    return m_MOVING_30_DAY_QUOTE_VOLUMEIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_30_DAY_QUOTE_VOLUME()
{
    m_MOVING_30_DAY_QUOTE_VOLUMEIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING30DAYQUOTEVOLUMEBUY() const
{
    return m_MOVING_30_DAY_QUOTE_VOLUME_BUY;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING30DAYQUOTEVOLUMEBUY(int32_t value)
{
    m_MOVING_30_DAY_QUOTE_VOLUME_BUY = value;
    m_MOVING_30_DAY_QUOTE_VOLUME_BUYIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING30DAYQUOTEVOLUMEBUYIsSet() const
{
    return m_MOVING_30_DAY_QUOTE_VOLUME_BUYIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_30_DAY_QUOTE_VOLUME_BUY()
{
    m_MOVING_30_DAY_QUOTE_VOLUME_BUYIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING30DAYQUOTEVOLUMESELL() const
{
    return m_MOVING_30_DAY_QUOTE_VOLUME_SELL;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING30DAYQUOTEVOLUMESELL(int32_t value)
{
    m_MOVING_30_DAY_QUOTE_VOLUME_SELL = value;
    m_MOVING_30_DAY_QUOTE_VOLUME_SELLIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING30DAYQUOTEVOLUMESELLIsSet() const
{
    return m_MOVING_30_DAY_QUOTE_VOLUME_SELLIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_30_DAY_QUOTE_VOLUME_SELL()
{
    m_MOVING_30_DAY_QUOTE_VOLUME_SELLIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING30DAYQUOTEVOLUMEUNKNOWN() const
{
    return m_MOVING_30_DAY_QUOTE_VOLUME_UNKNOWN;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING30DAYQUOTEVOLUMEUNKNOWN(int32_t value)
{
    m_MOVING_30_DAY_QUOTE_VOLUME_UNKNOWN = value;
    m_MOVING_30_DAY_QUOTE_VOLUME_UNKNOWNIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING30DAYQUOTEVOLUMEUNKNOWNIsSet() const
{
    return m_MOVING_30_DAY_QUOTE_VOLUME_UNKNOWNIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_30_DAY_QUOTE_VOLUME_UNKNOWN()
{
    m_MOVING_30_DAY_QUOTE_VOLUME_UNKNOWNIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING30DAYTOTALTRADES() const
{
    return m_MOVING_30_DAY_TOTAL_TRADES;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING30DAYTOTALTRADES(int32_t value)
{
    m_MOVING_30_DAY_TOTAL_TRADES = value;
    m_MOVING_30_DAY_TOTAL_TRADESIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING30DAYTOTALTRADESIsSet() const
{
    return m_MOVING_30_DAY_TOTAL_TRADESIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_30_DAY_TOTAL_TRADES()
{
    m_MOVING_30_DAY_TOTAL_TRADESIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING30DAYTOTALTRADESBUY() const
{
    return m_MOVING_30_DAY_TOTAL_TRADES_BUY;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING30DAYTOTALTRADESBUY(int32_t value)
{
    m_MOVING_30_DAY_TOTAL_TRADES_BUY = value;
    m_MOVING_30_DAY_TOTAL_TRADES_BUYIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING30DAYTOTALTRADESBUYIsSet() const
{
    return m_MOVING_30_DAY_TOTAL_TRADES_BUYIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_30_DAY_TOTAL_TRADES_BUY()
{
    m_MOVING_30_DAY_TOTAL_TRADES_BUYIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING30DAYTOTALTRADESSELL() const
{
    return m_MOVING_30_DAY_TOTAL_TRADES_SELL;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING30DAYTOTALTRADESSELL(int32_t value)
{
    m_MOVING_30_DAY_TOTAL_TRADES_SELL = value;
    m_MOVING_30_DAY_TOTAL_TRADES_SELLIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING30DAYTOTALTRADESSELLIsSet() const
{
    return m_MOVING_30_DAY_TOTAL_TRADES_SELLIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_30_DAY_TOTAL_TRADES_SELL()
{
    m_MOVING_30_DAY_TOTAL_TRADES_SELLIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING30DAYTOTALTRADESUNKNOWN() const
{
    return m_MOVING_30_DAY_TOTAL_TRADES_UNKNOWN;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING30DAYTOTALTRADESUNKNOWN(int32_t value)
{
    m_MOVING_30_DAY_TOTAL_TRADES_UNKNOWN = value;
    m_MOVING_30_DAY_TOTAL_TRADES_UNKNOWNIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING30DAYTOTALTRADESUNKNOWNIsSet() const
{
    return m_MOVING_30_DAY_TOTAL_TRADES_UNKNOWNIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_30_DAY_TOTAL_TRADES_UNKNOWN()
{
    m_MOVING_30_DAY_TOTAL_TRADES_UNKNOWNIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING30DAYVOLUME() const
{
    return m_MOVING_30_DAY_VOLUME;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING30DAYVOLUME(int32_t value)
{
    m_MOVING_30_DAY_VOLUME = value;
    m_MOVING_30_DAY_VOLUMEIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING30DAYVOLUMEIsSet() const
{
    return m_MOVING_30_DAY_VOLUMEIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_30_DAY_VOLUME()
{
    m_MOVING_30_DAY_VOLUMEIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING30DAYVOLUMEBUY() const
{
    return m_MOVING_30_DAY_VOLUME_BUY;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING30DAYVOLUMEBUY(int32_t value)
{
    m_MOVING_30_DAY_VOLUME_BUY = value;
    m_MOVING_30_DAY_VOLUME_BUYIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING30DAYVOLUMEBUYIsSet() const
{
    return m_MOVING_30_DAY_VOLUME_BUYIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_30_DAY_VOLUME_BUY()
{
    m_MOVING_30_DAY_VOLUME_BUYIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING30DAYVOLUMESELL() const
{
    return m_MOVING_30_DAY_VOLUME_SELL;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING30DAYVOLUMESELL(int32_t value)
{
    m_MOVING_30_DAY_VOLUME_SELL = value;
    m_MOVING_30_DAY_VOLUME_SELLIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING30DAYVOLUMESELLIsSet() const
{
    return m_MOVING_30_DAY_VOLUME_SELLIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_30_DAY_VOLUME_SELL()
{
    m_MOVING_30_DAY_VOLUME_SELLIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING30DAYVOLUMEUNKNOWN() const
{
    return m_MOVING_30_DAY_VOLUME_UNKNOWN;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING30DAYVOLUMEUNKNOWN(int32_t value)
{
    m_MOVING_30_DAY_VOLUME_UNKNOWN = value;
    m_MOVING_30_DAY_VOLUME_UNKNOWNIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING30DAYVOLUMEUNKNOWNIsSet() const
{
    return m_MOVING_30_DAY_VOLUME_UNKNOWNIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_30_DAY_VOLUME_UNKNOWN()
{
    m_MOVING_30_DAY_VOLUME_UNKNOWNIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING365DAYHIGH() const
{
    return m_MOVING_365_DAY_HIGH;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING365DAYHIGH(int32_t value)
{
    m_MOVING_365_DAY_HIGH = value;
    m_MOVING_365_DAY_HIGHIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING365DAYHIGHIsSet() const
{
    return m_MOVING_365_DAY_HIGHIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_365_DAY_HIGH()
{
    m_MOVING_365_DAY_HIGHIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING365DAYLOW() const
{
    return m_MOVING_365_DAY_LOW;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING365DAYLOW(int32_t value)
{
    m_MOVING_365_DAY_LOW = value;
    m_MOVING_365_DAY_LOWIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING365DAYLOWIsSet() const
{
    return m_MOVING_365_DAY_LOWIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_365_DAY_LOW()
{
    m_MOVING_365_DAY_LOWIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING365DAYOPEN() const
{
    return m_MOVING_365_DAY_OPEN;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING365DAYOPEN(int32_t value)
{
    m_MOVING_365_DAY_OPEN = value;
    m_MOVING_365_DAY_OPENIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING365DAYOPENIsSet() const
{
    return m_MOVING_365_DAY_OPENIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_365_DAY_OPEN()
{
    m_MOVING_365_DAY_OPENIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING365DAYQUOTEVOLUME() const
{
    return m_MOVING_365_DAY_QUOTE_VOLUME;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING365DAYQUOTEVOLUME(int32_t value)
{
    m_MOVING_365_DAY_QUOTE_VOLUME = value;
    m_MOVING_365_DAY_QUOTE_VOLUMEIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING365DAYQUOTEVOLUMEIsSet() const
{
    return m_MOVING_365_DAY_QUOTE_VOLUMEIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_365_DAY_QUOTE_VOLUME()
{
    m_MOVING_365_DAY_QUOTE_VOLUMEIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING365DAYQUOTEVOLUMEBUY() const
{
    return m_MOVING_365_DAY_QUOTE_VOLUME_BUY;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING365DAYQUOTEVOLUMEBUY(int32_t value)
{
    m_MOVING_365_DAY_QUOTE_VOLUME_BUY = value;
    m_MOVING_365_DAY_QUOTE_VOLUME_BUYIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING365DAYQUOTEVOLUMEBUYIsSet() const
{
    return m_MOVING_365_DAY_QUOTE_VOLUME_BUYIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_365_DAY_QUOTE_VOLUME_BUY()
{
    m_MOVING_365_DAY_QUOTE_VOLUME_BUYIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING365DAYQUOTEVOLUMESELL() const
{
    return m_MOVING_365_DAY_QUOTE_VOLUME_SELL;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING365DAYQUOTEVOLUMESELL(int32_t value)
{
    m_MOVING_365_DAY_QUOTE_VOLUME_SELL = value;
    m_MOVING_365_DAY_QUOTE_VOLUME_SELLIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING365DAYQUOTEVOLUMESELLIsSet() const
{
    return m_MOVING_365_DAY_QUOTE_VOLUME_SELLIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_365_DAY_QUOTE_VOLUME_SELL()
{
    m_MOVING_365_DAY_QUOTE_VOLUME_SELLIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING365DAYQUOTEVOLUMEUNKNOWN() const
{
    return m_MOVING_365_DAY_QUOTE_VOLUME_UNKNOWN;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING365DAYQUOTEVOLUMEUNKNOWN(int32_t value)
{
    m_MOVING_365_DAY_QUOTE_VOLUME_UNKNOWN = value;
    m_MOVING_365_DAY_QUOTE_VOLUME_UNKNOWNIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING365DAYQUOTEVOLUMEUNKNOWNIsSet() const
{
    return m_MOVING_365_DAY_QUOTE_VOLUME_UNKNOWNIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_365_DAY_QUOTE_VOLUME_UNKNOWN()
{
    m_MOVING_365_DAY_QUOTE_VOLUME_UNKNOWNIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING365DAYTOTALTRADES() const
{
    return m_MOVING_365_DAY_TOTAL_TRADES;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING365DAYTOTALTRADES(int32_t value)
{
    m_MOVING_365_DAY_TOTAL_TRADES = value;
    m_MOVING_365_DAY_TOTAL_TRADESIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING365DAYTOTALTRADESIsSet() const
{
    return m_MOVING_365_DAY_TOTAL_TRADESIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_365_DAY_TOTAL_TRADES()
{
    m_MOVING_365_DAY_TOTAL_TRADESIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING365DAYTOTALTRADESBUY() const
{
    return m_MOVING_365_DAY_TOTAL_TRADES_BUY;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING365DAYTOTALTRADESBUY(int32_t value)
{
    m_MOVING_365_DAY_TOTAL_TRADES_BUY = value;
    m_MOVING_365_DAY_TOTAL_TRADES_BUYIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING365DAYTOTALTRADESBUYIsSet() const
{
    return m_MOVING_365_DAY_TOTAL_TRADES_BUYIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_365_DAY_TOTAL_TRADES_BUY()
{
    m_MOVING_365_DAY_TOTAL_TRADES_BUYIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING365DAYTOTALTRADESSELL() const
{
    return m_MOVING_365_DAY_TOTAL_TRADES_SELL;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING365DAYTOTALTRADESSELL(int32_t value)
{
    m_MOVING_365_DAY_TOTAL_TRADES_SELL = value;
    m_MOVING_365_DAY_TOTAL_TRADES_SELLIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING365DAYTOTALTRADESSELLIsSet() const
{
    return m_MOVING_365_DAY_TOTAL_TRADES_SELLIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_365_DAY_TOTAL_TRADES_SELL()
{
    m_MOVING_365_DAY_TOTAL_TRADES_SELLIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING365DAYTOTALTRADESUNKNOWN() const
{
    return m_MOVING_365_DAY_TOTAL_TRADES_UNKNOWN;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING365DAYTOTALTRADESUNKNOWN(int32_t value)
{
    m_MOVING_365_DAY_TOTAL_TRADES_UNKNOWN = value;
    m_MOVING_365_DAY_TOTAL_TRADES_UNKNOWNIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING365DAYTOTALTRADESUNKNOWNIsSet() const
{
    return m_MOVING_365_DAY_TOTAL_TRADES_UNKNOWNIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_365_DAY_TOTAL_TRADES_UNKNOWN()
{
    m_MOVING_365_DAY_TOTAL_TRADES_UNKNOWNIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING365DAYVOLUME() const
{
    return m_MOVING_365_DAY_VOLUME;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING365DAYVOLUME(int32_t value)
{
    m_MOVING_365_DAY_VOLUME = value;
    m_MOVING_365_DAY_VOLUMEIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING365DAYVOLUMEIsSet() const
{
    return m_MOVING_365_DAY_VOLUMEIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_365_DAY_VOLUME()
{
    m_MOVING_365_DAY_VOLUMEIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING365DAYVOLUMEBUY() const
{
    return m_MOVING_365_DAY_VOLUME_BUY;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING365DAYVOLUMEBUY(int32_t value)
{
    m_MOVING_365_DAY_VOLUME_BUY = value;
    m_MOVING_365_DAY_VOLUME_BUYIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING365DAYVOLUMEBUYIsSet() const
{
    return m_MOVING_365_DAY_VOLUME_BUYIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_365_DAY_VOLUME_BUY()
{
    m_MOVING_365_DAY_VOLUME_BUYIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING365DAYVOLUMESELL() const
{
    return m_MOVING_365_DAY_VOLUME_SELL;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING365DAYVOLUMESELL(int32_t value)
{
    m_MOVING_365_DAY_VOLUME_SELL = value;
    m_MOVING_365_DAY_VOLUME_SELLIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING365DAYVOLUMESELLIsSet() const
{
    return m_MOVING_365_DAY_VOLUME_SELLIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_365_DAY_VOLUME_SELL()
{
    m_MOVING_365_DAY_VOLUME_SELLIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING365DAYVOLUMEUNKNOWN() const
{
    return m_MOVING_365_DAY_VOLUME_UNKNOWN;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING365DAYVOLUMEUNKNOWN(int32_t value)
{
    m_MOVING_365_DAY_VOLUME_UNKNOWN = value;
    m_MOVING_365_DAY_VOLUME_UNKNOWNIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING365DAYVOLUMEUNKNOWNIsSet() const
{
    return m_MOVING_365_DAY_VOLUME_UNKNOWNIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_365_DAY_VOLUME_UNKNOWN()
{
    m_MOVING_365_DAY_VOLUME_UNKNOWNIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING7DAYHIGH() const
{
    return m_MOVING_7_DAY_HIGH;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING7DAYHIGH(int32_t value)
{
    m_MOVING_7_DAY_HIGH = value;
    m_MOVING_7_DAY_HIGHIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING7DAYHIGHIsSet() const
{
    return m_MOVING_7_DAY_HIGHIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_7_DAY_HIGH()
{
    m_MOVING_7_DAY_HIGHIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING7DAYLOW() const
{
    return m_MOVING_7_DAY_LOW;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING7DAYLOW(int32_t value)
{
    m_MOVING_7_DAY_LOW = value;
    m_MOVING_7_DAY_LOWIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING7DAYLOWIsSet() const
{
    return m_MOVING_7_DAY_LOWIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_7_DAY_LOW()
{
    m_MOVING_7_DAY_LOWIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING7DAYOPEN() const
{
    return m_MOVING_7_DAY_OPEN;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING7DAYOPEN(int32_t value)
{
    m_MOVING_7_DAY_OPEN = value;
    m_MOVING_7_DAY_OPENIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING7DAYOPENIsSet() const
{
    return m_MOVING_7_DAY_OPENIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_7_DAY_OPEN()
{
    m_MOVING_7_DAY_OPENIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING7DAYQUOTEVOLUME() const
{
    return m_MOVING_7_DAY_QUOTE_VOLUME;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING7DAYQUOTEVOLUME(int32_t value)
{
    m_MOVING_7_DAY_QUOTE_VOLUME = value;
    m_MOVING_7_DAY_QUOTE_VOLUMEIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING7DAYQUOTEVOLUMEIsSet() const
{
    return m_MOVING_7_DAY_QUOTE_VOLUMEIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_7_DAY_QUOTE_VOLUME()
{
    m_MOVING_7_DAY_QUOTE_VOLUMEIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING7DAYQUOTEVOLUMEBUY() const
{
    return m_MOVING_7_DAY_QUOTE_VOLUME_BUY;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING7DAYQUOTEVOLUMEBUY(int32_t value)
{
    m_MOVING_7_DAY_QUOTE_VOLUME_BUY = value;
    m_MOVING_7_DAY_QUOTE_VOLUME_BUYIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING7DAYQUOTEVOLUMEBUYIsSet() const
{
    return m_MOVING_7_DAY_QUOTE_VOLUME_BUYIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_7_DAY_QUOTE_VOLUME_BUY()
{
    m_MOVING_7_DAY_QUOTE_VOLUME_BUYIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING7DAYQUOTEVOLUMESELL() const
{
    return m_MOVING_7_DAY_QUOTE_VOLUME_SELL;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING7DAYQUOTEVOLUMESELL(int32_t value)
{
    m_MOVING_7_DAY_QUOTE_VOLUME_SELL = value;
    m_MOVING_7_DAY_QUOTE_VOLUME_SELLIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING7DAYQUOTEVOLUMESELLIsSet() const
{
    return m_MOVING_7_DAY_QUOTE_VOLUME_SELLIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_7_DAY_QUOTE_VOLUME_SELL()
{
    m_MOVING_7_DAY_QUOTE_VOLUME_SELLIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING7DAYQUOTEVOLUMEUNKNOWN() const
{
    return m_MOVING_7_DAY_QUOTE_VOLUME_UNKNOWN;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING7DAYQUOTEVOLUMEUNKNOWN(int32_t value)
{
    m_MOVING_7_DAY_QUOTE_VOLUME_UNKNOWN = value;
    m_MOVING_7_DAY_QUOTE_VOLUME_UNKNOWNIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING7DAYQUOTEVOLUMEUNKNOWNIsSet() const
{
    return m_MOVING_7_DAY_QUOTE_VOLUME_UNKNOWNIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_7_DAY_QUOTE_VOLUME_UNKNOWN()
{
    m_MOVING_7_DAY_QUOTE_VOLUME_UNKNOWNIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING7DAYTOTALTRADES() const
{
    return m_MOVING_7_DAY_TOTAL_TRADES;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING7DAYTOTALTRADES(int32_t value)
{
    m_MOVING_7_DAY_TOTAL_TRADES = value;
    m_MOVING_7_DAY_TOTAL_TRADESIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING7DAYTOTALTRADESIsSet() const
{
    return m_MOVING_7_DAY_TOTAL_TRADESIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_7_DAY_TOTAL_TRADES()
{
    m_MOVING_7_DAY_TOTAL_TRADESIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING7DAYTOTALTRADESBUY() const
{
    return m_MOVING_7_DAY_TOTAL_TRADES_BUY;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING7DAYTOTALTRADESBUY(int32_t value)
{
    m_MOVING_7_DAY_TOTAL_TRADES_BUY = value;
    m_MOVING_7_DAY_TOTAL_TRADES_BUYIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING7DAYTOTALTRADESBUYIsSet() const
{
    return m_MOVING_7_DAY_TOTAL_TRADES_BUYIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_7_DAY_TOTAL_TRADES_BUY()
{
    m_MOVING_7_DAY_TOTAL_TRADES_BUYIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING7DAYTOTALTRADESSELL() const
{
    return m_MOVING_7_DAY_TOTAL_TRADES_SELL;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING7DAYTOTALTRADESSELL(int32_t value)
{
    m_MOVING_7_DAY_TOTAL_TRADES_SELL = value;
    m_MOVING_7_DAY_TOTAL_TRADES_SELLIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING7DAYTOTALTRADESSELLIsSet() const
{
    return m_MOVING_7_DAY_TOTAL_TRADES_SELLIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_7_DAY_TOTAL_TRADES_SELL()
{
    m_MOVING_7_DAY_TOTAL_TRADES_SELLIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING7DAYTOTALTRADESUNKNOWN() const
{
    return m_MOVING_7_DAY_TOTAL_TRADES_UNKNOWN;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING7DAYTOTALTRADESUNKNOWN(int32_t value)
{
    m_MOVING_7_DAY_TOTAL_TRADES_UNKNOWN = value;
    m_MOVING_7_DAY_TOTAL_TRADES_UNKNOWNIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING7DAYTOTALTRADESUNKNOWNIsSet() const
{
    return m_MOVING_7_DAY_TOTAL_TRADES_UNKNOWNIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_7_DAY_TOTAL_TRADES_UNKNOWN()
{
    m_MOVING_7_DAY_TOTAL_TRADES_UNKNOWNIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING7DAYVOLUME() const
{
    return m_MOVING_7_DAY_VOLUME;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING7DAYVOLUME(int32_t value)
{
    m_MOVING_7_DAY_VOLUME = value;
    m_MOVING_7_DAY_VOLUMEIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING7DAYVOLUMEIsSet() const
{
    return m_MOVING_7_DAY_VOLUMEIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_7_DAY_VOLUME()
{
    m_MOVING_7_DAY_VOLUMEIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING7DAYVOLUMEBUY() const
{
    return m_MOVING_7_DAY_VOLUME_BUY;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING7DAYVOLUMEBUY(int32_t value)
{
    m_MOVING_7_DAY_VOLUME_BUY = value;
    m_MOVING_7_DAY_VOLUME_BUYIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING7DAYVOLUMEBUYIsSet() const
{
    return m_MOVING_7_DAY_VOLUME_BUYIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_7_DAY_VOLUME_BUY()
{
    m_MOVING_7_DAY_VOLUME_BUYIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING7DAYVOLUMESELL() const
{
    return m_MOVING_7_DAY_VOLUME_SELL;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING7DAYVOLUMESELL(int32_t value)
{
    m_MOVING_7_DAY_VOLUME_SELL = value;
    m_MOVING_7_DAY_VOLUME_SELLIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING7DAYVOLUMESELLIsSet() const
{
    return m_MOVING_7_DAY_VOLUME_SELLIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_7_DAY_VOLUME_SELL()
{
    m_MOVING_7_DAY_VOLUME_SELLIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING7DAYVOLUMEUNKNOWN() const
{
    return m_MOVING_7_DAY_VOLUME_UNKNOWN;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING7DAYVOLUMEUNKNOWN(int32_t value)
{
    m_MOVING_7_DAY_VOLUME_UNKNOWN = value;
    m_MOVING_7_DAY_VOLUME_UNKNOWNIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING7DAYVOLUMEUNKNOWNIsSet() const
{
    return m_MOVING_7_DAY_VOLUME_UNKNOWNIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_7_DAY_VOLUME_UNKNOWN()
{
    m_MOVING_7_DAY_VOLUME_UNKNOWNIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING90DAYHIGH() const
{
    return m_MOVING_90_DAY_HIGH;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING90DAYHIGH(int32_t value)
{
    m_MOVING_90_DAY_HIGH = value;
    m_MOVING_90_DAY_HIGHIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING90DAYHIGHIsSet() const
{
    return m_MOVING_90_DAY_HIGHIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_90_DAY_HIGH()
{
    m_MOVING_90_DAY_HIGHIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING90DAYLOW() const
{
    return m_MOVING_90_DAY_LOW;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING90DAYLOW(int32_t value)
{
    m_MOVING_90_DAY_LOW = value;
    m_MOVING_90_DAY_LOWIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING90DAYLOWIsSet() const
{
    return m_MOVING_90_DAY_LOWIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_90_DAY_LOW()
{
    m_MOVING_90_DAY_LOWIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING90DAYOPEN() const
{
    return m_MOVING_90_DAY_OPEN;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING90DAYOPEN(int32_t value)
{
    m_MOVING_90_DAY_OPEN = value;
    m_MOVING_90_DAY_OPENIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING90DAYOPENIsSet() const
{
    return m_MOVING_90_DAY_OPENIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_90_DAY_OPEN()
{
    m_MOVING_90_DAY_OPENIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING90DAYQUOTEVOLUME() const
{
    return m_MOVING_90_DAY_QUOTE_VOLUME;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING90DAYQUOTEVOLUME(int32_t value)
{
    m_MOVING_90_DAY_QUOTE_VOLUME = value;
    m_MOVING_90_DAY_QUOTE_VOLUMEIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING90DAYQUOTEVOLUMEIsSet() const
{
    return m_MOVING_90_DAY_QUOTE_VOLUMEIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_90_DAY_QUOTE_VOLUME()
{
    m_MOVING_90_DAY_QUOTE_VOLUMEIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING90DAYQUOTEVOLUMEBUY() const
{
    return m_MOVING_90_DAY_QUOTE_VOLUME_BUY;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING90DAYQUOTEVOLUMEBUY(int32_t value)
{
    m_MOVING_90_DAY_QUOTE_VOLUME_BUY = value;
    m_MOVING_90_DAY_QUOTE_VOLUME_BUYIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING90DAYQUOTEVOLUMEBUYIsSet() const
{
    return m_MOVING_90_DAY_QUOTE_VOLUME_BUYIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_90_DAY_QUOTE_VOLUME_BUY()
{
    m_MOVING_90_DAY_QUOTE_VOLUME_BUYIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING90DAYQUOTEVOLUMESELL() const
{
    return m_MOVING_90_DAY_QUOTE_VOLUME_SELL;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING90DAYQUOTEVOLUMESELL(int32_t value)
{
    m_MOVING_90_DAY_QUOTE_VOLUME_SELL = value;
    m_MOVING_90_DAY_QUOTE_VOLUME_SELLIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING90DAYQUOTEVOLUMESELLIsSet() const
{
    return m_MOVING_90_DAY_QUOTE_VOLUME_SELLIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_90_DAY_QUOTE_VOLUME_SELL()
{
    m_MOVING_90_DAY_QUOTE_VOLUME_SELLIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING90DAYQUOTEVOLUMEUNKNOWN() const
{
    return m_MOVING_90_DAY_QUOTE_VOLUME_UNKNOWN;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING90DAYQUOTEVOLUMEUNKNOWN(int32_t value)
{
    m_MOVING_90_DAY_QUOTE_VOLUME_UNKNOWN = value;
    m_MOVING_90_DAY_QUOTE_VOLUME_UNKNOWNIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING90DAYQUOTEVOLUMEUNKNOWNIsSet() const
{
    return m_MOVING_90_DAY_QUOTE_VOLUME_UNKNOWNIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_90_DAY_QUOTE_VOLUME_UNKNOWN()
{
    m_MOVING_90_DAY_QUOTE_VOLUME_UNKNOWNIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING90DAYTOTALTRADES() const
{
    return m_MOVING_90_DAY_TOTAL_TRADES;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING90DAYTOTALTRADES(int32_t value)
{
    m_MOVING_90_DAY_TOTAL_TRADES = value;
    m_MOVING_90_DAY_TOTAL_TRADESIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING90DAYTOTALTRADESIsSet() const
{
    return m_MOVING_90_DAY_TOTAL_TRADESIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_90_DAY_TOTAL_TRADES()
{
    m_MOVING_90_DAY_TOTAL_TRADESIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING90DAYTOTALTRADESBUY() const
{
    return m_MOVING_90_DAY_TOTAL_TRADES_BUY;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING90DAYTOTALTRADESBUY(int32_t value)
{
    m_MOVING_90_DAY_TOTAL_TRADES_BUY = value;
    m_MOVING_90_DAY_TOTAL_TRADES_BUYIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING90DAYTOTALTRADESBUYIsSet() const
{
    return m_MOVING_90_DAY_TOTAL_TRADES_BUYIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_90_DAY_TOTAL_TRADES_BUY()
{
    m_MOVING_90_DAY_TOTAL_TRADES_BUYIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING90DAYTOTALTRADESSELL() const
{
    return m_MOVING_90_DAY_TOTAL_TRADES_SELL;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING90DAYTOTALTRADESSELL(int32_t value)
{
    m_MOVING_90_DAY_TOTAL_TRADES_SELL = value;
    m_MOVING_90_DAY_TOTAL_TRADES_SELLIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING90DAYTOTALTRADESSELLIsSet() const
{
    return m_MOVING_90_DAY_TOTAL_TRADES_SELLIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_90_DAY_TOTAL_TRADES_SELL()
{
    m_MOVING_90_DAY_TOTAL_TRADES_SELLIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING90DAYTOTALTRADESUNKNOWN() const
{
    return m_MOVING_90_DAY_TOTAL_TRADES_UNKNOWN;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING90DAYTOTALTRADESUNKNOWN(int32_t value)
{
    m_MOVING_90_DAY_TOTAL_TRADES_UNKNOWN = value;
    m_MOVING_90_DAY_TOTAL_TRADES_UNKNOWNIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING90DAYTOTALTRADESUNKNOWNIsSet() const
{
    return m_MOVING_90_DAY_TOTAL_TRADES_UNKNOWNIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_90_DAY_TOTAL_TRADES_UNKNOWN()
{
    m_MOVING_90_DAY_TOTAL_TRADES_UNKNOWNIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING90DAYVOLUME() const
{
    return m_MOVING_90_DAY_VOLUME;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING90DAYVOLUME(int32_t value)
{
    m_MOVING_90_DAY_VOLUME = value;
    m_MOVING_90_DAY_VOLUMEIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING90DAYVOLUMEIsSet() const
{
    return m_MOVING_90_DAY_VOLUMEIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_90_DAY_VOLUME()
{
    m_MOVING_90_DAY_VOLUMEIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING90DAYVOLUMEBUY() const
{
    return m_MOVING_90_DAY_VOLUME_BUY;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING90DAYVOLUMEBUY(int32_t value)
{
    m_MOVING_90_DAY_VOLUME_BUY = value;
    m_MOVING_90_DAY_VOLUME_BUYIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING90DAYVOLUMEBUYIsSet() const
{
    return m_MOVING_90_DAY_VOLUME_BUYIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_90_DAY_VOLUME_BUY()
{
    m_MOVING_90_DAY_VOLUME_BUYIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING90DAYVOLUMESELL() const
{
    return m_MOVING_90_DAY_VOLUME_SELL;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING90DAYVOLUMESELL(int32_t value)
{
    m_MOVING_90_DAY_VOLUME_SELL = value;
    m_MOVING_90_DAY_VOLUME_SELLIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING90DAYVOLUMESELLIsSet() const
{
    return m_MOVING_90_DAY_VOLUME_SELLIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_90_DAY_VOLUME_SELL()
{
    m_MOVING_90_DAY_VOLUME_SELLIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getMOVING90DAYVOLUMEUNKNOWN() const
{
    return m_MOVING_90_DAY_VOLUME_UNKNOWN;
}

void SPOT_INSTRUMENT_MARKET_DATA::setMOVING90DAYVOLUMEUNKNOWN(int32_t value)
{
    m_MOVING_90_DAY_VOLUME_UNKNOWN = value;
    m_MOVING_90_DAY_VOLUME_UNKNOWNIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::mOVING90DAYVOLUMEUNKNOWNIsSet() const
{
    return m_MOVING_90_DAY_VOLUME_UNKNOWNIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetMOVING_90_DAY_VOLUME_UNKNOWN()
{
    m_MOVING_90_DAY_VOLUME_UNKNOWNIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getPRICE() const
{
    return m_PRICE;
}

void SPOT_INSTRUMENT_MARKET_DATA::setPRICE(int32_t value)
{
    m_PRICE = value;
    m_PRICEIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::pRICEIsSet() const
{
    return m_PRICEIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetPRICE()
{
    m_PRICEIsSet = false;
}
utility::string_t SPOT_INSTRUMENT_MARKET_DATA::getPRICEFLAG() const
{
    return m_PRICE_FLAG;
}

void SPOT_INSTRUMENT_MARKET_DATA::setPRICEFLAG(const utility::string_t& value)
{
    m_PRICE_FLAG = value;
    m_PRICE_FLAGIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::pRICEFLAGIsSet() const
{
    return m_PRICE_FLAGIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetPRICE_FLAG()
{
    m_PRICE_FLAGIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getPRICELASTUPDATETS() const
{
    return m_PRICE_LAST_UPDATE_TS;
}

void SPOT_INSTRUMENT_MARKET_DATA::setPRICELASTUPDATETS(int32_t value)
{
    m_PRICE_LAST_UPDATE_TS = value;
    m_PRICE_LAST_UPDATE_TSIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::pRICELASTUPDATETSIsSet() const
{
    return m_PRICE_LAST_UPDATE_TSIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetPRICE_LAST_UPDATE_TS()
{
    m_PRICE_LAST_UPDATE_TSIsSet = false;
}
utility::string_t SPOT_INSTRUMENT_MARKET_DATA::getQUOTE() const
{
    return m_QUOTE;
}

void SPOT_INSTRUMENT_MARKET_DATA::setQUOTE(const utility::string_t& value)
{
    m_QUOTE = value;
    m_QUOTEIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::qUOTEIsSet() const
{
    return m_QUOTEIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetQUOTE()
{
    m_QUOTEIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getTOPASKLASTUPDATETS() const
{
    return m_TOP_ASK_LAST_UPDATE_TS;
}

void SPOT_INSTRUMENT_MARKET_DATA::setTOPASKLASTUPDATETS(int32_t value)
{
    m_TOP_ASK_LAST_UPDATE_TS = value;
    m_TOP_ASK_LAST_UPDATE_TSIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::tOPASKLASTUPDATETSIsSet() const
{
    return m_TOP_ASK_LAST_UPDATE_TSIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetTOP_ASK_LAST_UPDATE_TS()
{
    m_TOP_ASK_LAST_UPDATE_TSIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getTOPASKPRICE() const
{
    return m_TOP_ASK_PRICE;
}

void SPOT_INSTRUMENT_MARKET_DATA::setTOPASKPRICE(int32_t value)
{
    m_TOP_ASK_PRICE = value;
    m_TOP_ASK_PRICEIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::tOPASKPRICEIsSet() const
{
    return m_TOP_ASK_PRICEIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetTOP_ASK_PRICE()
{
    m_TOP_ASK_PRICEIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getTOPASKQUANTITY() const
{
    return m_TOP_ASK_QUANTITY;
}

void SPOT_INSTRUMENT_MARKET_DATA::setTOPASKQUANTITY(int32_t value)
{
    m_TOP_ASK_QUANTITY = value;
    m_TOP_ASK_QUANTITYIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::tOPASKQUANTITYIsSet() const
{
    return m_TOP_ASK_QUANTITYIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetTOP_ASK_QUANTITY()
{
    m_TOP_ASK_QUANTITYIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getTOPBIDLASTUPDATETS() const
{
    return m_TOP_BID_LAST_UPDATE_TS;
}

void SPOT_INSTRUMENT_MARKET_DATA::setTOPBIDLASTUPDATETS(int32_t value)
{
    m_TOP_BID_LAST_UPDATE_TS = value;
    m_TOP_BID_LAST_UPDATE_TSIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::tOPBIDLASTUPDATETSIsSet() const
{
    return m_TOP_BID_LAST_UPDATE_TSIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetTOP_BID_LAST_UPDATE_TS()
{
    m_TOP_BID_LAST_UPDATE_TSIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getTOPBIDPRICE() const
{
    return m_TOP_BID_PRICE;
}

void SPOT_INSTRUMENT_MARKET_DATA::setTOPBIDPRICE(int32_t value)
{
    m_TOP_BID_PRICE = value;
    m_TOP_BID_PRICEIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::tOPBIDPRICEIsSet() const
{
    return m_TOP_BID_PRICEIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetTOP_BID_PRICE()
{
    m_TOP_BID_PRICEIsSet = false;
}
int32_t SPOT_INSTRUMENT_MARKET_DATA::getTOPBIDQUANTITY() const
{
    return m_TOP_BID_QUANTITY;
}

void SPOT_INSTRUMENT_MARKET_DATA::setTOPBIDQUANTITY(int32_t value)
{
    m_TOP_BID_QUANTITY = value;
    m_TOP_BID_QUANTITYIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::tOPBIDQUANTITYIsSet() const
{
    return m_TOP_BID_QUANTITYIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetTOP_BID_QUANTITY()
{
    m_TOP_BID_QUANTITYIsSet = false;
}
utility::string_t SPOT_INSTRUMENT_MARKET_DATA::getTYPE() const
{
    return m_TYPE;
}

void SPOT_INSTRUMENT_MARKET_DATA::setTYPE(const utility::string_t& value)
{
    m_TYPE = value;
    m_TYPEIsSet = true;
}

bool SPOT_INSTRUMENT_MARKET_DATA::tYPEIsSet() const
{
    return m_TYPEIsSet;
}

void SPOT_INSTRUMENT_MARKET_DATA::unsetTYPE()
{
    m_TYPEIsSet = false;
}
}
}
}
}


