/**
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 * CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: data@cryptocompare.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.3.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/SPOT_INSTRUMENT_HISTO_DATA.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



SPOT_INSTRUMENT_HISTO_DATA::SPOT_INSTRUMENT_HISTO_DATA()
{
    m_BASE = utility::conversions::to_string_t("");
    m_BASEIsSet = false;
    m_CLOSE = 0;
    m_CLOSEIsSet = false;
    m_FIRST_TRADE_PRICE = 0;
    m_FIRST_TRADE_PRICEIsSet = false;
    m_FIRST_TRADE_TIMESTAMP = 0;
    m_FIRST_TRADE_TIMESTAMPIsSet = false;
    m_HIGH = 0;
    m_HIGHIsSet = false;
    m_HIGH_TRADE_PRICE = 0;
    m_HIGH_TRADE_PRICEIsSet = false;
    m_HIGH_TRADE_TIMESTAMP = 0;
    m_HIGH_TRADE_TIMESTAMPIsSet = false;
    m_INSTRUMENT = utility::conversions::to_string_t("");
    m_INSTRUMENTIsSet = false;
    m_LAST_TRADE_PRICE = 0;
    m_LAST_TRADE_PRICEIsSet = false;
    m_LAST_TRADE_TIMESTAMP = 0;
    m_LAST_TRADE_TIMESTAMPIsSet = false;
    m_LOW = 0;
    m_LOWIsSet = false;
    m_LOW_TRADE_PRICE = 0;
    m_LOW_TRADE_PRICEIsSet = false;
    m_LOW_TRADE_TIMESTAMP = 0;
    m_LOW_TRADE_TIMESTAMPIsSet = false;
    m_MAPPED_INSTRUMENT = utility::conversions::to_string_t("");
    m_MAPPED_INSTRUMENTIsSet = false;
    m_MARKET = utility::conversions::to_string_t("");
    m_MARKETIsSet = false;
    m_OPEN = 0;
    m_OPENIsSet = false;
    m_QUOTE = utility::conversions::to_string_t("");
    m_QUOTEIsSet = false;
    m_QUOTE_VOLUME = 0;
    m_QUOTE_VOLUMEIsSet = false;
    m_QUOTE_VOLUME_BUY = 0;
    m_QUOTE_VOLUME_BUYIsSet = false;
    m_QUOTE_VOLUME_SELL = 0;
    m_QUOTE_VOLUME_SELLIsSet = false;
    m_QUOTE_VOLUME_UNKNOWN = 0;
    m_QUOTE_VOLUME_UNKNOWNIsSet = false;
    m_TIMESTAMP = 0;
    m_TIMESTAMPIsSet = false;
    m_TOTAL_TRADES = 0;
    m_TOTAL_TRADESIsSet = false;
    m_TOTAL_TRADES_BUY = 0;
    m_TOTAL_TRADES_BUYIsSet = false;
    m_TOTAL_TRADES_SELL = 0;
    m_TOTAL_TRADES_SELLIsSet = false;
    m_TOTAL_TRADES_UNKNOWN = 0;
    m_TOTAL_TRADES_UNKNOWNIsSet = false;
    m_TYPE = utility::conversions::to_string_t("");
    m_TYPEIsSet = false;
    m_UNIT = utility::conversions::to_string_t("");
    m_UNITIsSet = false;
    m_VOLUME = 0;
    m_VOLUMEIsSet = false;
    m_VOLUME_BUY = 0;
    m_VOLUME_BUYIsSet = false;
    m_VOLUME_SELL = 0;
    m_VOLUME_SELLIsSet = false;
    m_VOLUME_UNKNOWN = 0;
    m_VOLUME_UNKNOWNIsSet = false;
}

SPOT_INSTRUMENT_HISTO_DATA::~SPOT_INSTRUMENT_HISTO_DATA()
{
}

void SPOT_INSTRUMENT_HISTO_DATA::validate()
{
    // TODO: implement validation
}

web::json::value SPOT_INSTRUMENT_HISTO_DATA::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_BASEIsSet)
    {
        val[utility::conversions::to_string_t(U("BASE"))] = ModelBase::toJson(m_BASE);
    }
    if(m_CLOSEIsSet)
    {
        val[utility::conversions::to_string_t(U("CLOSE"))] = ModelBase::toJson(m_CLOSE);
    }
    if(m_FIRST_TRADE_PRICEIsSet)
    {
        val[utility::conversions::to_string_t(U("FIRST_TRADE_PRICE"))] = ModelBase::toJson(m_FIRST_TRADE_PRICE);
    }
    if(m_FIRST_TRADE_TIMESTAMPIsSet)
    {
        val[utility::conversions::to_string_t(U("FIRST_TRADE_TIMESTAMP"))] = ModelBase::toJson(m_FIRST_TRADE_TIMESTAMP);
    }
    if(m_HIGHIsSet)
    {
        val[utility::conversions::to_string_t(U("HIGH"))] = ModelBase::toJson(m_HIGH);
    }
    if(m_HIGH_TRADE_PRICEIsSet)
    {
        val[utility::conversions::to_string_t(U("HIGH_TRADE_PRICE"))] = ModelBase::toJson(m_HIGH_TRADE_PRICE);
    }
    if(m_HIGH_TRADE_TIMESTAMPIsSet)
    {
        val[utility::conversions::to_string_t(U("HIGH_TRADE_TIMESTAMP"))] = ModelBase::toJson(m_HIGH_TRADE_TIMESTAMP);
    }
    if(m_INSTRUMENTIsSet)
    {
        val[utility::conversions::to_string_t(U("INSTRUMENT"))] = ModelBase::toJson(m_INSTRUMENT);
    }
    if(m_LAST_TRADE_PRICEIsSet)
    {
        val[utility::conversions::to_string_t(U("LAST_TRADE_PRICE"))] = ModelBase::toJson(m_LAST_TRADE_PRICE);
    }
    if(m_LAST_TRADE_TIMESTAMPIsSet)
    {
        val[utility::conversions::to_string_t(U("LAST_TRADE_TIMESTAMP"))] = ModelBase::toJson(m_LAST_TRADE_TIMESTAMP);
    }
    if(m_LOWIsSet)
    {
        val[utility::conversions::to_string_t(U("LOW"))] = ModelBase::toJson(m_LOW);
    }
    if(m_LOW_TRADE_PRICEIsSet)
    {
        val[utility::conversions::to_string_t(U("LOW_TRADE_PRICE"))] = ModelBase::toJson(m_LOW_TRADE_PRICE);
    }
    if(m_LOW_TRADE_TIMESTAMPIsSet)
    {
        val[utility::conversions::to_string_t(U("LOW_TRADE_TIMESTAMP"))] = ModelBase::toJson(m_LOW_TRADE_TIMESTAMP);
    }
    if(m_MAPPED_INSTRUMENTIsSet)
    {
        val[utility::conversions::to_string_t(U("MAPPED_INSTRUMENT"))] = ModelBase::toJson(m_MAPPED_INSTRUMENT);
    }
    if(m_MARKETIsSet)
    {
        val[utility::conversions::to_string_t(U("MARKET"))] = ModelBase::toJson(m_MARKET);
    }
    if(m_OPENIsSet)
    {
        val[utility::conversions::to_string_t(U("OPEN"))] = ModelBase::toJson(m_OPEN);
    }
    if(m_QUOTEIsSet)
    {
        val[utility::conversions::to_string_t(U("QUOTE"))] = ModelBase::toJson(m_QUOTE);
    }
    if(m_QUOTE_VOLUMEIsSet)
    {
        val[utility::conversions::to_string_t(U("QUOTE_VOLUME"))] = ModelBase::toJson(m_QUOTE_VOLUME);
    }
    if(m_QUOTE_VOLUME_BUYIsSet)
    {
        val[utility::conversions::to_string_t(U("QUOTE_VOLUME_BUY"))] = ModelBase::toJson(m_QUOTE_VOLUME_BUY);
    }
    if(m_QUOTE_VOLUME_SELLIsSet)
    {
        val[utility::conversions::to_string_t(U("QUOTE_VOLUME_SELL"))] = ModelBase::toJson(m_QUOTE_VOLUME_SELL);
    }
    if(m_QUOTE_VOLUME_UNKNOWNIsSet)
    {
        val[utility::conversions::to_string_t(U("QUOTE_VOLUME_UNKNOWN"))] = ModelBase::toJson(m_QUOTE_VOLUME_UNKNOWN);
    }
    if(m_TIMESTAMPIsSet)
    {
        val[utility::conversions::to_string_t(U("TIMESTAMP"))] = ModelBase::toJson(m_TIMESTAMP);
    }
    if(m_TOTAL_TRADESIsSet)
    {
        val[utility::conversions::to_string_t(U("TOTAL_TRADES"))] = ModelBase::toJson(m_TOTAL_TRADES);
    }
    if(m_TOTAL_TRADES_BUYIsSet)
    {
        val[utility::conversions::to_string_t(U("TOTAL_TRADES_BUY"))] = ModelBase::toJson(m_TOTAL_TRADES_BUY);
    }
    if(m_TOTAL_TRADES_SELLIsSet)
    {
        val[utility::conversions::to_string_t(U("TOTAL_TRADES_SELL"))] = ModelBase::toJson(m_TOTAL_TRADES_SELL);
    }
    if(m_TOTAL_TRADES_UNKNOWNIsSet)
    {
        val[utility::conversions::to_string_t(U("TOTAL_TRADES_UNKNOWN"))] = ModelBase::toJson(m_TOTAL_TRADES_UNKNOWN);
    }
    if(m_TYPEIsSet)
    {
        val[utility::conversions::to_string_t(U("TYPE"))] = ModelBase::toJson(m_TYPE);
    }
    if(m_UNITIsSet)
    {
        val[utility::conversions::to_string_t(U("UNIT"))] = ModelBase::toJson(m_UNIT);
    }
    if(m_VOLUMEIsSet)
    {
        val[utility::conversions::to_string_t(U("VOLUME"))] = ModelBase::toJson(m_VOLUME);
    }
    if(m_VOLUME_BUYIsSet)
    {
        val[utility::conversions::to_string_t(U("VOLUME_BUY"))] = ModelBase::toJson(m_VOLUME_BUY);
    }
    if(m_VOLUME_SELLIsSet)
    {
        val[utility::conversions::to_string_t(U("VOLUME_SELL"))] = ModelBase::toJson(m_VOLUME_SELL);
    }
    if(m_VOLUME_UNKNOWNIsSet)
    {
        val[utility::conversions::to_string_t(U("VOLUME_UNKNOWN"))] = ModelBase::toJson(m_VOLUME_UNKNOWN);
    }

    return val;
}

bool SPOT_INSTRUMENT_HISTO_DATA::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("BASE"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("BASE")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBASE;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBASE);
            setBASE(refVal_setBASE);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CLOSE"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CLOSE")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCLOSE;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCLOSE);
            setCLOSE(refVal_setCLOSE);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("FIRST_TRADE_PRICE"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("FIRST_TRADE_PRICE")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setFIRSTTRADEPRICE;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFIRSTTRADEPRICE);
            setFIRSTTRADEPRICE(refVal_setFIRSTTRADEPRICE);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("FIRST_TRADE_TIMESTAMP"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("FIRST_TRADE_TIMESTAMP")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setFIRSTTRADETIMESTAMP;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFIRSTTRADETIMESTAMP);
            setFIRSTTRADETIMESTAMP(refVal_setFIRSTTRADETIMESTAMP);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("HIGH"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("HIGH")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setHIGH;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHIGH);
            setHIGH(refVal_setHIGH);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("HIGH_TRADE_PRICE"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("HIGH_TRADE_PRICE")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setHIGHTRADEPRICE;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHIGHTRADEPRICE);
            setHIGHTRADEPRICE(refVal_setHIGHTRADEPRICE);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("HIGH_TRADE_TIMESTAMP"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("HIGH_TRADE_TIMESTAMP")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setHIGHTRADETIMESTAMP;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHIGHTRADETIMESTAMP);
            setHIGHTRADETIMESTAMP(refVal_setHIGHTRADETIMESTAMP);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("INSTRUMENT"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("INSTRUMENT")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setINSTRUMENT;
            ok &= ModelBase::fromJson(fieldValue, refVal_setINSTRUMENT);
            setINSTRUMENT(refVal_setINSTRUMENT);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("LAST_TRADE_PRICE"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("LAST_TRADE_PRICE")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setLASTTRADEPRICE;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLASTTRADEPRICE);
            setLASTTRADEPRICE(refVal_setLASTTRADEPRICE);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("LAST_TRADE_TIMESTAMP"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("LAST_TRADE_TIMESTAMP")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setLASTTRADETIMESTAMP;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLASTTRADETIMESTAMP);
            setLASTTRADETIMESTAMP(refVal_setLASTTRADETIMESTAMP);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("LOW"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("LOW")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setLOW;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLOW);
            setLOW(refVal_setLOW);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("LOW_TRADE_PRICE"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("LOW_TRADE_PRICE")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setLOWTRADEPRICE;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLOWTRADEPRICE);
            setLOWTRADEPRICE(refVal_setLOWTRADEPRICE);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("LOW_TRADE_TIMESTAMP"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("LOW_TRADE_TIMESTAMP")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setLOWTRADETIMESTAMP;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLOWTRADETIMESTAMP);
            setLOWTRADETIMESTAMP(refVal_setLOWTRADETIMESTAMP);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MAPPED_INSTRUMENT"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MAPPED_INSTRUMENT")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMAPPEDINSTRUMENT;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMAPPEDINSTRUMENT);
            setMAPPEDINSTRUMENT(refVal_setMAPPEDINSTRUMENT);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MARKET"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MARKET")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMARKET;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMARKET);
            setMARKET(refVal_setMARKET);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("OPEN"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("OPEN")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setOPEN;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOPEN);
            setOPEN(refVal_setOPEN);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("QUOTE"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("QUOTE")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setQUOTE;
            ok &= ModelBase::fromJson(fieldValue, refVal_setQUOTE);
            setQUOTE(refVal_setQUOTE);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("QUOTE_VOLUME"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("QUOTE_VOLUME")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setQUOTEVOLUME;
            ok &= ModelBase::fromJson(fieldValue, refVal_setQUOTEVOLUME);
            setQUOTEVOLUME(refVal_setQUOTEVOLUME);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("QUOTE_VOLUME_BUY"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("QUOTE_VOLUME_BUY")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setQUOTEVOLUMEBUY;
            ok &= ModelBase::fromJson(fieldValue, refVal_setQUOTEVOLUMEBUY);
            setQUOTEVOLUMEBUY(refVal_setQUOTEVOLUMEBUY);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("QUOTE_VOLUME_SELL"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("QUOTE_VOLUME_SELL")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setQUOTEVOLUMESELL;
            ok &= ModelBase::fromJson(fieldValue, refVal_setQUOTEVOLUMESELL);
            setQUOTEVOLUMESELL(refVal_setQUOTEVOLUMESELL);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("QUOTE_VOLUME_UNKNOWN"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("QUOTE_VOLUME_UNKNOWN")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setQUOTEVOLUMEUNKNOWN;
            ok &= ModelBase::fromJson(fieldValue, refVal_setQUOTEVOLUMEUNKNOWN);
            setQUOTEVOLUMEUNKNOWN(refVal_setQUOTEVOLUMEUNKNOWN);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("TIMESTAMP"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("TIMESTAMP")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTIMESTAMP;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTIMESTAMP);
            setTIMESTAMP(refVal_setTIMESTAMP);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("TOTAL_TRADES"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("TOTAL_TRADES")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTOTALTRADES;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTOTALTRADES);
            setTOTALTRADES(refVal_setTOTALTRADES);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("TOTAL_TRADES_BUY"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("TOTAL_TRADES_BUY")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTOTALTRADESBUY;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTOTALTRADESBUY);
            setTOTALTRADESBUY(refVal_setTOTALTRADESBUY);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("TOTAL_TRADES_SELL"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("TOTAL_TRADES_SELL")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTOTALTRADESSELL;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTOTALTRADESSELL);
            setTOTALTRADESSELL(refVal_setTOTALTRADESSELL);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("TOTAL_TRADES_UNKNOWN"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("TOTAL_TRADES_UNKNOWN")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTOTALTRADESUNKNOWN;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTOTALTRADESUNKNOWN);
            setTOTALTRADESUNKNOWN(refVal_setTOTALTRADESUNKNOWN);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("TYPE"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("TYPE")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTYPE;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTYPE);
            setTYPE(refVal_setTYPE);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("UNIT"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("UNIT")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUNIT;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUNIT);
            setUNIT(refVal_setUNIT);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("VOLUME"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("VOLUME")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setVOLUME;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVOLUME);
            setVOLUME(refVal_setVOLUME);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("VOLUME_BUY"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("VOLUME_BUY")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setVOLUMEBUY;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVOLUMEBUY);
            setVOLUMEBUY(refVal_setVOLUMEBUY);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("VOLUME_SELL"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("VOLUME_SELL")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setVOLUMESELL;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVOLUMESELL);
            setVOLUMESELL(refVal_setVOLUMESELL);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("VOLUME_UNKNOWN"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("VOLUME_UNKNOWN")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setVOLUMEUNKNOWN;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVOLUMEUNKNOWN);
            setVOLUMEUNKNOWN(refVal_setVOLUMEUNKNOWN);
        }
    }
    return ok;
}

void SPOT_INSTRUMENT_HISTO_DATA::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_BASEIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("BASE")), m_BASE));
    }
    if(m_CLOSEIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CLOSE")), m_CLOSE));
    }
    if(m_FIRST_TRADE_PRICEIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("FIRST_TRADE_PRICE")), m_FIRST_TRADE_PRICE));
    }
    if(m_FIRST_TRADE_TIMESTAMPIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("FIRST_TRADE_TIMESTAMP")), m_FIRST_TRADE_TIMESTAMP));
    }
    if(m_HIGHIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("HIGH")), m_HIGH));
    }
    if(m_HIGH_TRADE_PRICEIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("HIGH_TRADE_PRICE")), m_HIGH_TRADE_PRICE));
    }
    if(m_HIGH_TRADE_TIMESTAMPIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("HIGH_TRADE_TIMESTAMP")), m_HIGH_TRADE_TIMESTAMP));
    }
    if(m_INSTRUMENTIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("INSTRUMENT")), m_INSTRUMENT));
    }
    if(m_LAST_TRADE_PRICEIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("LAST_TRADE_PRICE")), m_LAST_TRADE_PRICE));
    }
    if(m_LAST_TRADE_TIMESTAMPIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("LAST_TRADE_TIMESTAMP")), m_LAST_TRADE_TIMESTAMP));
    }
    if(m_LOWIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("LOW")), m_LOW));
    }
    if(m_LOW_TRADE_PRICEIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("LOW_TRADE_PRICE")), m_LOW_TRADE_PRICE));
    }
    if(m_LOW_TRADE_TIMESTAMPIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("LOW_TRADE_TIMESTAMP")), m_LOW_TRADE_TIMESTAMP));
    }
    if(m_MAPPED_INSTRUMENTIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MAPPED_INSTRUMENT")), m_MAPPED_INSTRUMENT));
    }
    if(m_MARKETIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MARKET")), m_MARKET));
    }
    if(m_OPENIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("OPEN")), m_OPEN));
    }
    if(m_QUOTEIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("QUOTE")), m_QUOTE));
    }
    if(m_QUOTE_VOLUMEIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("QUOTE_VOLUME")), m_QUOTE_VOLUME));
    }
    if(m_QUOTE_VOLUME_BUYIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("QUOTE_VOLUME_BUY")), m_QUOTE_VOLUME_BUY));
    }
    if(m_QUOTE_VOLUME_SELLIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("QUOTE_VOLUME_SELL")), m_QUOTE_VOLUME_SELL));
    }
    if(m_QUOTE_VOLUME_UNKNOWNIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("QUOTE_VOLUME_UNKNOWN")), m_QUOTE_VOLUME_UNKNOWN));
    }
    if(m_TIMESTAMPIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("TIMESTAMP")), m_TIMESTAMP));
    }
    if(m_TOTAL_TRADESIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("TOTAL_TRADES")), m_TOTAL_TRADES));
    }
    if(m_TOTAL_TRADES_BUYIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("TOTAL_TRADES_BUY")), m_TOTAL_TRADES_BUY));
    }
    if(m_TOTAL_TRADES_SELLIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("TOTAL_TRADES_SELL")), m_TOTAL_TRADES_SELL));
    }
    if(m_TOTAL_TRADES_UNKNOWNIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("TOTAL_TRADES_UNKNOWN")), m_TOTAL_TRADES_UNKNOWN));
    }
    if(m_TYPEIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("TYPE")), m_TYPE));
    }
    if(m_UNITIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("UNIT")), m_UNIT));
    }
    if(m_VOLUMEIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("VOLUME")), m_VOLUME));
    }
    if(m_VOLUME_BUYIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("VOLUME_BUY")), m_VOLUME_BUY));
    }
    if(m_VOLUME_SELLIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("VOLUME_SELL")), m_VOLUME_SELL));
    }
    if(m_VOLUME_UNKNOWNIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("VOLUME_UNKNOWN")), m_VOLUME_UNKNOWN));
    }
}

bool SPOT_INSTRUMENT_HISTO_DATA::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("BASE"))))
    {
        utility::string_t refVal_setBASE;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("BASE"))), refVal_setBASE );
        setBASE(refVal_setBASE);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CLOSE"))))
    {
        int32_t refVal_setCLOSE;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CLOSE"))), refVal_setCLOSE );
        setCLOSE(refVal_setCLOSE);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("FIRST_TRADE_PRICE"))))
    {
        int32_t refVal_setFIRSTTRADEPRICE;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("FIRST_TRADE_PRICE"))), refVal_setFIRSTTRADEPRICE );
        setFIRSTTRADEPRICE(refVal_setFIRSTTRADEPRICE);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("FIRST_TRADE_TIMESTAMP"))))
    {
        int32_t refVal_setFIRSTTRADETIMESTAMP;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("FIRST_TRADE_TIMESTAMP"))), refVal_setFIRSTTRADETIMESTAMP );
        setFIRSTTRADETIMESTAMP(refVal_setFIRSTTRADETIMESTAMP);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("HIGH"))))
    {
        int32_t refVal_setHIGH;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("HIGH"))), refVal_setHIGH );
        setHIGH(refVal_setHIGH);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("HIGH_TRADE_PRICE"))))
    {
        int32_t refVal_setHIGHTRADEPRICE;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("HIGH_TRADE_PRICE"))), refVal_setHIGHTRADEPRICE );
        setHIGHTRADEPRICE(refVal_setHIGHTRADEPRICE);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("HIGH_TRADE_TIMESTAMP"))))
    {
        int32_t refVal_setHIGHTRADETIMESTAMP;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("HIGH_TRADE_TIMESTAMP"))), refVal_setHIGHTRADETIMESTAMP );
        setHIGHTRADETIMESTAMP(refVal_setHIGHTRADETIMESTAMP);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("INSTRUMENT"))))
    {
        utility::string_t refVal_setINSTRUMENT;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("INSTRUMENT"))), refVal_setINSTRUMENT );
        setINSTRUMENT(refVal_setINSTRUMENT);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("LAST_TRADE_PRICE"))))
    {
        int32_t refVal_setLASTTRADEPRICE;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("LAST_TRADE_PRICE"))), refVal_setLASTTRADEPRICE );
        setLASTTRADEPRICE(refVal_setLASTTRADEPRICE);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("LAST_TRADE_TIMESTAMP"))))
    {
        int32_t refVal_setLASTTRADETIMESTAMP;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("LAST_TRADE_TIMESTAMP"))), refVal_setLASTTRADETIMESTAMP );
        setLASTTRADETIMESTAMP(refVal_setLASTTRADETIMESTAMP);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("LOW"))))
    {
        int32_t refVal_setLOW;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("LOW"))), refVal_setLOW );
        setLOW(refVal_setLOW);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("LOW_TRADE_PRICE"))))
    {
        int32_t refVal_setLOWTRADEPRICE;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("LOW_TRADE_PRICE"))), refVal_setLOWTRADEPRICE );
        setLOWTRADEPRICE(refVal_setLOWTRADEPRICE);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("LOW_TRADE_TIMESTAMP"))))
    {
        int32_t refVal_setLOWTRADETIMESTAMP;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("LOW_TRADE_TIMESTAMP"))), refVal_setLOWTRADETIMESTAMP );
        setLOWTRADETIMESTAMP(refVal_setLOWTRADETIMESTAMP);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MAPPED_INSTRUMENT"))))
    {
        utility::string_t refVal_setMAPPEDINSTRUMENT;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MAPPED_INSTRUMENT"))), refVal_setMAPPEDINSTRUMENT );
        setMAPPEDINSTRUMENT(refVal_setMAPPEDINSTRUMENT);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MARKET"))))
    {
        utility::string_t refVal_setMARKET;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MARKET"))), refVal_setMARKET );
        setMARKET(refVal_setMARKET);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("OPEN"))))
    {
        int32_t refVal_setOPEN;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("OPEN"))), refVal_setOPEN );
        setOPEN(refVal_setOPEN);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("QUOTE"))))
    {
        utility::string_t refVal_setQUOTE;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("QUOTE"))), refVal_setQUOTE );
        setQUOTE(refVal_setQUOTE);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("QUOTE_VOLUME"))))
    {
        int32_t refVal_setQUOTEVOLUME;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("QUOTE_VOLUME"))), refVal_setQUOTEVOLUME );
        setQUOTEVOLUME(refVal_setQUOTEVOLUME);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("QUOTE_VOLUME_BUY"))))
    {
        int32_t refVal_setQUOTEVOLUMEBUY;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("QUOTE_VOLUME_BUY"))), refVal_setQUOTEVOLUMEBUY );
        setQUOTEVOLUMEBUY(refVal_setQUOTEVOLUMEBUY);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("QUOTE_VOLUME_SELL"))))
    {
        int32_t refVal_setQUOTEVOLUMESELL;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("QUOTE_VOLUME_SELL"))), refVal_setQUOTEVOLUMESELL );
        setQUOTEVOLUMESELL(refVal_setQUOTEVOLUMESELL);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("QUOTE_VOLUME_UNKNOWN"))))
    {
        int32_t refVal_setQUOTEVOLUMEUNKNOWN;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("QUOTE_VOLUME_UNKNOWN"))), refVal_setQUOTEVOLUMEUNKNOWN );
        setQUOTEVOLUMEUNKNOWN(refVal_setQUOTEVOLUMEUNKNOWN);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("TIMESTAMP"))))
    {
        int32_t refVal_setTIMESTAMP;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("TIMESTAMP"))), refVal_setTIMESTAMP );
        setTIMESTAMP(refVal_setTIMESTAMP);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("TOTAL_TRADES"))))
    {
        int32_t refVal_setTOTALTRADES;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("TOTAL_TRADES"))), refVal_setTOTALTRADES );
        setTOTALTRADES(refVal_setTOTALTRADES);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("TOTAL_TRADES_BUY"))))
    {
        int32_t refVal_setTOTALTRADESBUY;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("TOTAL_TRADES_BUY"))), refVal_setTOTALTRADESBUY );
        setTOTALTRADESBUY(refVal_setTOTALTRADESBUY);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("TOTAL_TRADES_SELL"))))
    {
        int32_t refVal_setTOTALTRADESSELL;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("TOTAL_TRADES_SELL"))), refVal_setTOTALTRADESSELL );
        setTOTALTRADESSELL(refVal_setTOTALTRADESSELL);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("TOTAL_TRADES_UNKNOWN"))))
    {
        int32_t refVal_setTOTALTRADESUNKNOWN;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("TOTAL_TRADES_UNKNOWN"))), refVal_setTOTALTRADESUNKNOWN );
        setTOTALTRADESUNKNOWN(refVal_setTOTALTRADESUNKNOWN);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("TYPE"))))
    {
        utility::string_t refVal_setTYPE;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("TYPE"))), refVal_setTYPE );
        setTYPE(refVal_setTYPE);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("UNIT"))))
    {
        utility::string_t refVal_setUNIT;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("UNIT"))), refVal_setUNIT );
        setUNIT(refVal_setUNIT);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("VOLUME"))))
    {
        int32_t refVal_setVOLUME;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("VOLUME"))), refVal_setVOLUME );
        setVOLUME(refVal_setVOLUME);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("VOLUME_BUY"))))
    {
        int32_t refVal_setVOLUMEBUY;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("VOLUME_BUY"))), refVal_setVOLUMEBUY );
        setVOLUMEBUY(refVal_setVOLUMEBUY);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("VOLUME_SELL"))))
    {
        int32_t refVal_setVOLUMESELL;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("VOLUME_SELL"))), refVal_setVOLUMESELL );
        setVOLUMESELL(refVal_setVOLUMESELL);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("VOLUME_UNKNOWN"))))
    {
        int32_t refVal_setVOLUMEUNKNOWN;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("VOLUME_UNKNOWN"))), refVal_setVOLUMEUNKNOWN );
        setVOLUMEUNKNOWN(refVal_setVOLUMEUNKNOWN);
    }
    return ok;
}

utility::string_t SPOT_INSTRUMENT_HISTO_DATA::getBASE() const
{
    return m_BASE;
}

void SPOT_INSTRUMENT_HISTO_DATA::setBASE(const utility::string_t& value)
{
    m_BASE = value;
    m_BASEIsSet = true;
}

bool SPOT_INSTRUMENT_HISTO_DATA::bASEIsSet() const
{
    return m_BASEIsSet;
}

void SPOT_INSTRUMENT_HISTO_DATA::unsetBASE()
{
    m_BASEIsSet = false;
}
int32_t SPOT_INSTRUMENT_HISTO_DATA::getCLOSE() const
{
    return m_CLOSE;
}

void SPOT_INSTRUMENT_HISTO_DATA::setCLOSE(int32_t value)
{
    m_CLOSE = value;
    m_CLOSEIsSet = true;
}

bool SPOT_INSTRUMENT_HISTO_DATA::cLOSEIsSet() const
{
    return m_CLOSEIsSet;
}

void SPOT_INSTRUMENT_HISTO_DATA::unsetCLOSE()
{
    m_CLOSEIsSet = false;
}
int32_t SPOT_INSTRUMENT_HISTO_DATA::getFIRSTTRADEPRICE() const
{
    return m_FIRST_TRADE_PRICE;
}

void SPOT_INSTRUMENT_HISTO_DATA::setFIRSTTRADEPRICE(int32_t value)
{
    m_FIRST_TRADE_PRICE = value;
    m_FIRST_TRADE_PRICEIsSet = true;
}

bool SPOT_INSTRUMENT_HISTO_DATA::fIRSTTRADEPRICEIsSet() const
{
    return m_FIRST_TRADE_PRICEIsSet;
}

void SPOT_INSTRUMENT_HISTO_DATA::unsetFIRST_TRADE_PRICE()
{
    m_FIRST_TRADE_PRICEIsSet = false;
}
int32_t SPOT_INSTRUMENT_HISTO_DATA::getFIRSTTRADETIMESTAMP() const
{
    return m_FIRST_TRADE_TIMESTAMP;
}

void SPOT_INSTRUMENT_HISTO_DATA::setFIRSTTRADETIMESTAMP(int32_t value)
{
    m_FIRST_TRADE_TIMESTAMP = value;
    m_FIRST_TRADE_TIMESTAMPIsSet = true;
}

bool SPOT_INSTRUMENT_HISTO_DATA::fIRSTTRADETIMESTAMPIsSet() const
{
    return m_FIRST_TRADE_TIMESTAMPIsSet;
}

void SPOT_INSTRUMENT_HISTO_DATA::unsetFIRST_TRADE_TIMESTAMP()
{
    m_FIRST_TRADE_TIMESTAMPIsSet = false;
}
int32_t SPOT_INSTRUMENT_HISTO_DATA::getHIGH() const
{
    return m_HIGH;
}

void SPOT_INSTRUMENT_HISTO_DATA::setHIGH(int32_t value)
{
    m_HIGH = value;
    m_HIGHIsSet = true;
}

bool SPOT_INSTRUMENT_HISTO_DATA::hIGHIsSet() const
{
    return m_HIGHIsSet;
}

void SPOT_INSTRUMENT_HISTO_DATA::unsetHIGH()
{
    m_HIGHIsSet = false;
}
int32_t SPOT_INSTRUMENT_HISTO_DATA::getHIGHTRADEPRICE() const
{
    return m_HIGH_TRADE_PRICE;
}

void SPOT_INSTRUMENT_HISTO_DATA::setHIGHTRADEPRICE(int32_t value)
{
    m_HIGH_TRADE_PRICE = value;
    m_HIGH_TRADE_PRICEIsSet = true;
}

bool SPOT_INSTRUMENT_HISTO_DATA::hIGHTRADEPRICEIsSet() const
{
    return m_HIGH_TRADE_PRICEIsSet;
}

void SPOT_INSTRUMENT_HISTO_DATA::unsetHIGH_TRADE_PRICE()
{
    m_HIGH_TRADE_PRICEIsSet = false;
}
int32_t SPOT_INSTRUMENT_HISTO_DATA::getHIGHTRADETIMESTAMP() const
{
    return m_HIGH_TRADE_TIMESTAMP;
}

void SPOT_INSTRUMENT_HISTO_DATA::setHIGHTRADETIMESTAMP(int32_t value)
{
    m_HIGH_TRADE_TIMESTAMP = value;
    m_HIGH_TRADE_TIMESTAMPIsSet = true;
}

bool SPOT_INSTRUMENT_HISTO_DATA::hIGHTRADETIMESTAMPIsSet() const
{
    return m_HIGH_TRADE_TIMESTAMPIsSet;
}

void SPOT_INSTRUMENT_HISTO_DATA::unsetHIGH_TRADE_TIMESTAMP()
{
    m_HIGH_TRADE_TIMESTAMPIsSet = false;
}
utility::string_t SPOT_INSTRUMENT_HISTO_DATA::getINSTRUMENT() const
{
    return m_INSTRUMENT;
}

void SPOT_INSTRUMENT_HISTO_DATA::setINSTRUMENT(const utility::string_t& value)
{
    m_INSTRUMENT = value;
    m_INSTRUMENTIsSet = true;
}

bool SPOT_INSTRUMENT_HISTO_DATA::iNSTRUMENTIsSet() const
{
    return m_INSTRUMENTIsSet;
}

void SPOT_INSTRUMENT_HISTO_DATA::unsetINSTRUMENT()
{
    m_INSTRUMENTIsSet = false;
}
int32_t SPOT_INSTRUMENT_HISTO_DATA::getLASTTRADEPRICE() const
{
    return m_LAST_TRADE_PRICE;
}

void SPOT_INSTRUMENT_HISTO_DATA::setLASTTRADEPRICE(int32_t value)
{
    m_LAST_TRADE_PRICE = value;
    m_LAST_TRADE_PRICEIsSet = true;
}

bool SPOT_INSTRUMENT_HISTO_DATA::lASTTRADEPRICEIsSet() const
{
    return m_LAST_TRADE_PRICEIsSet;
}

void SPOT_INSTRUMENT_HISTO_DATA::unsetLAST_TRADE_PRICE()
{
    m_LAST_TRADE_PRICEIsSet = false;
}
int32_t SPOT_INSTRUMENT_HISTO_DATA::getLASTTRADETIMESTAMP() const
{
    return m_LAST_TRADE_TIMESTAMP;
}

void SPOT_INSTRUMENT_HISTO_DATA::setLASTTRADETIMESTAMP(int32_t value)
{
    m_LAST_TRADE_TIMESTAMP = value;
    m_LAST_TRADE_TIMESTAMPIsSet = true;
}

bool SPOT_INSTRUMENT_HISTO_DATA::lASTTRADETIMESTAMPIsSet() const
{
    return m_LAST_TRADE_TIMESTAMPIsSet;
}

void SPOT_INSTRUMENT_HISTO_DATA::unsetLAST_TRADE_TIMESTAMP()
{
    m_LAST_TRADE_TIMESTAMPIsSet = false;
}
int32_t SPOT_INSTRUMENT_HISTO_DATA::getLOW() const
{
    return m_LOW;
}

void SPOT_INSTRUMENT_HISTO_DATA::setLOW(int32_t value)
{
    m_LOW = value;
    m_LOWIsSet = true;
}

bool SPOT_INSTRUMENT_HISTO_DATA::lOWIsSet() const
{
    return m_LOWIsSet;
}

void SPOT_INSTRUMENT_HISTO_DATA::unsetLOW()
{
    m_LOWIsSet = false;
}
int32_t SPOT_INSTRUMENT_HISTO_DATA::getLOWTRADEPRICE() const
{
    return m_LOW_TRADE_PRICE;
}

void SPOT_INSTRUMENT_HISTO_DATA::setLOWTRADEPRICE(int32_t value)
{
    m_LOW_TRADE_PRICE = value;
    m_LOW_TRADE_PRICEIsSet = true;
}

bool SPOT_INSTRUMENT_HISTO_DATA::lOWTRADEPRICEIsSet() const
{
    return m_LOW_TRADE_PRICEIsSet;
}

void SPOT_INSTRUMENT_HISTO_DATA::unsetLOW_TRADE_PRICE()
{
    m_LOW_TRADE_PRICEIsSet = false;
}
int32_t SPOT_INSTRUMENT_HISTO_DATA::getLOWTRADETIMESTAMP() const
{
    return m_LOW_TRADE_TIMESTAMP;
}

void SPOT_INSTRUMENT_HISTO_DATA::setLOWTRADETIMESTAMP(int32_t value)
{
    m_LOW_TRADE_TIMESTAMP = value;
    m_LOW_TRADE_TIMESTAMPIsSet = true;
}

bool SPOT_INSTRUMENT_HISTO_DATA::lOWTRADETIMESTAMPIsSet() const
{
    return m_LOW_TRADE_TIMESTAMPIsSet;
}

void SPOT_INSTRUMENT_HISTO_DATA::unsetLOW_TRADE_TIMESTAMP()
{
    m_LOW_TRADE_TIMESTAMPIsSet = false;
}
utility::string_t SPOT_INSTRUMENT_HISTO_DATA::getMAPPEDINSTRUMENT() const
{
    return m_MAPPED_INSTRUMENT;
}

void SPOT_INSTRUMENT_HISTO_DATA::setMAPPEDINSTRUMENT(const utility::string_t& value)
{
    m_MAPPED_INSTRUMENT = value;
    m_MAPPED_INSTRUMENTIsSet = true;
}

bool SPOT_INSTRUMENT_HISTO_DATA::mAPPEDINSTRUMENTIsSet() const
{
    return m_MAPPED_INSTRUMENTIsSet;
}

void SPOT_INSTRUMENT_HISTO_DATA::unsetMAPPED_INSTRUMENT()
{
    m_MAPPED_INSTRUMENTIsSet = false;
}
utility::string_t SPOT_INSTRUMENT_HISTO_DATA::getMARKET() const
{
    return m_MARKET;
}

void SPOT_INSTRUMENT_HISTO_DATA::setMARKET(const utility::string_t& value)
{
    m_MARKET = value;
    m_MARKETIsSet = true;
}

bool SPOT_INSTRUMENT_HISTO_DATA::mARKETIsSet() const
{
    return m_MARKETIsSet;
}

void SPOT_INSTRUMENT_HISTO_DATA::unsetMARKET()
{
    m_MARKETIsSet = false;
}
int32_t SPOT_INSTRUMENT_HISTO_DATA::getOPEN() const
{
    return m_OPEN;
}

void SPOT_INSTRUMENT_HISTO_DATA::setOPEN(int32_t value)
{
    m_OPEN = value;
    m_OPENIsSet = true;
}

bool SPOT_INSTRUMENT_HISTO_DATA::oPENIsSet() const
{
    return m_OPENIsSet;
}

void SPOT_INSTRUMENT_HISTO_DATA::unsetOPEN()
{
    m_OPENIsSet = false;
}
utility::string_t SPOT_INSTRUMENT_HISTO_DATA::getQUOTE() const
{
    return m_QUOTE;
}

void SPOT_INSTRUMENT_HISTO_DATA::setQUOTE(const utility::string_t& value)
{
    m_QUOTE = value;
    m_QUOTEIsSet = true;
}

bool SPOT_INSTRUMENT_HISTO_DATA::qUOTEIsSet() const
{
    return m_QUOTEIsSet;
}

void SPOT_INSTRUMENT_HISTO_DATA::unsetQUOTE()
{
    m_QUOTEIsSet = false;
}
int32_t SPOT_INSTRUMENT_HISTO_DATA::getQUOTEVOLUME() const
{
    return m_QUOTE_VOLUME;
}

void SPOT_INSTRUMENT_HISTO_DATA::setQUOTEVOLUME(int32_t value)
{
    m_QUOTE_VOLUME = value;
    m_QUOTE_VOLUMEIsSet = true;
}

bool SPOT_INSTRUMENT_HISTO_DATA::qUOTEVOLUMEIsSet() const
{
    return m_QUOTE_VOLUMEIsSet;
}

void SPOT_INSTRUMENT_HISTO_DATA::unsetQUOTE_VOLUME()
{
    m_QUOTE_VOLUMEIsSet = false;
}
int32_t SPOT_INSTRUMENT_HISTO_DATA::getQUOTEVOLUMEBUY() const
{
    return m_QUOTE_VOLUME_BUY;
}

void SPOT_INSTRUMENT_HISTO_DATA::setQUOTEVOLUMEBUY(int32_t value)
{
    m_QUOTE_VOLUME_BUY = value;
    m_QUOTE_VOLUME_BUYIsSet = true;
}

bool SPOT_INSTRUMENT_HISTO_DATA::qUOTEVOLUMEBUYIsSet() const
{
    return m_QUOTE_VOLUME_BUYIsSet;
}

void SPOT_INSTRUMENT_HISTO_DATA::unsetQUOTE_VOLUME_BUY()
{
    m_QUOTE_VOLUME_BUYIsSet = false;
}
int32_t SPOT_INSTRUMENT_HISTO_DATA::getQUOTEVOLUMESELL() const
{
    return m_QUOTE_VOLUME_SELL;
}

void SPOT_INSTRUMENT_HISTO_DATA::setQUOTEVOLUMESELL(int32_t value)
{
    m_QUOTE_VOLUME_SELL = value;
    m_QUOTE_VOLUME_SELLIsSet = true;
}

bool SPOT_INSTRUMENT_HISTO_DATA::qUOTEVOLUMESELLIsSet() const
{
    return m_QUOTE_VOLUME_SELLIsSet;
}

void SPOT_INSTRUMENT_HISTO_DATA::unsetQUOTE_VOLUME_SELL()
{
    m_QUOTE_VOLUME_SELLIsSet = false;
}
int32_t SPOT_INSTRUMENT_HISTO_DATA::getQUOTEVOLUMEUNKNOWN() const
{
    return m_QUOTE_VOLUME_UNKNOWN;
}

void SPOT_INSTRUMENT_HISTO_DATA::setQUOTEVOLUMEUNKNOWN(int32_t value)
{
    m_QUOTE_VOLUME_UNKNOWN = value;
    m_QUOTE_VOLUME_UNKNOWNIsSet = true;
}

bool SPOT_INSTRUMENT_HISTO_DATA::qUOTEVOLUMEUNKNOWNIsSet() const
{
    return m_QUOTE_VOLUME_UNKNOWNIsSet;
}

void SPOT_INSTRUMENT_HISTO_DATA::unsetQUOTE_VOLUME_UNKNOWN()
{
    m_QUOTE_VOLUME_UNKNOWNIsSet = false;
}
int32_t SPOT_INSTRUMENT_HISTO_DATA::getTIMESTAMP() const
{
    return m_TIMESTAMP;
}

void SPOT_INSTRUMENT_HISTO_DATA::setTIMESTAMP(int32_t value)
{
    m_TIMESTAMP = value;
    m_TIMESTAMPIsSet = true;
}

bool SPOT_INSTRUMENT_HISTO_DATA::tIMESTAMPIsSet() const
{
    return m_TIMESTAMPIsSet;
}

void SPOT_INSTRUMENT_HISTO_DATA::unsetTIMESTAMP()
{
    m_TIMESTAMPIsSet = false;
}
int32_t SPOT_INSTRUMENT_HISTO_DATA::getTOTALTRADES() const
{
    return m_TOTAL_TRADES;
}

void SPOT_INSTRUMENT_HISTO_DATA::setTOTALTRADES(int32_t value)
{
    m_TOTAL_TRADES = value;
    m_TOTAL_TRADESIsSet = true;
}

bool SPOT_INSTRUMENT_HISTO_DATA::tOTALTRADESIsSet() const
{
    return m_TOTAL_TRADESIsSet;
}

void SPOT_INSTRUMENT_HISTO_DATA::unsetTOTAL_TRADES()
{
    m_TOTAL_TRADESIsSet = false;
}
int32_t SPOT_INSTRUMENT_HISTO_DATA::getTOTALTRADESBUY() const
{
    return m_TOTAL_TRADES_BUY;
}

void SPOT_INSTRUMENT_HISTO_DATA::setTOTALTRADESBUY(int32_t value)
{
    m_TOTAL_TRADES_BUY = value;
    m_TOTAL_TRADES_BUYIsSet = true;
}

bool SPOT_INSTRUMENT_HISTO_DATA::tOTALTRADESBUYIsSet() const
{
    return m_TOTAL_TRADES_BUYIsSet;
}

void SPOT_INSTRUMENT_HISTO_DATA::unsetTOTAL_TRADES_BUY()
{
    m_TOTAL_TRADES_BUYIsSet = false;
}
int32_t SPOT_INSTRUMENT_HISTO_DATA::getTOTALTRADESSELL() const
{
    return m_TOTAL_TRADES_SELL;
}

void SPOT_INSTRUMENT_HISTO_DATA::setTOTALTRADESSELL(int32_t value)
{
    m_TOTAL_TRADES_SELL = value;
    m_TOTAL_TRADES_SELLIsSet = true;
}

bool SPOT_INSTRUMENT_HISTO_DATA::tOTALTRADESSELLIsSet() const
{
    return m_TOTAL_TRADES_SELLIsSet;
}

void SPOT_INSTRUMENT_HISTO_DATA::unsetTOTAL_TRADES_SELL()
{
    m_TOTAL_TRADES_SELLIsSet = false;
}
int32_t SPOT_INSTRUMENT_HISTO_DATA::getTOTALTRADESUNKNOWN() const
{
    return m_TOTAL_TRADES_UNKNOWN;
}

void SPOT_INSTRUMENT_HISTO_DATA::setTOTALTRADESUNKNOWN(int32_t value)
{
    m_TOTAL_TRADES_UNKNOWN = value;
    m_TOTAL_TRADES_UNKNOWNIsSet = true;
}

bool SPOT_INSTRUMENT_HISTO_DATA::tOTALTRADESUNKNOWNIsSet() const
{
    return m_TOTAL_TRADES_UNKNOWNIsSet;
}

void SPOT_INSTRUMENT_HISTO_DATA::unsetTOTAL_TRADES_UNKNOWN()
{
    m_TOTAL_TRADES_UNKNOWNIsSet = false;
}
utility::string_t SPOT_INSTRUMENT_HISTO_DATA::getTYPE() const
{
    return m_TYPE;
}

void SPOT_INSTRUMENT_HISTO_DATA::setTYPE(const utility::string_t& value)
{
    m_TYPE = value;
    m_TYPEIsSet = true;
}

bool SPOT_INSTRUMENT_HISTO_DATA::tYPEIsSet() const
{
    return m_TYPEIsSet;
}

void SPOT_INSTRUMENT_HISTO_DATA::unsetTYPE()
{
    m_TYPEIsSet = false;
}
utility::string_t SPOT_INSTRUMENT_HISTO_DATA::getUNIT() const
{
    return m_UNIT;
}

void SPOT_INSTRUMENT_HISTO_DATA::setUNIT(const utility::string_t& value)
{
    m_UNIT = value;
    m_UNITIsSet = true;
}

bool SPOT_INSTRUMENT_HISTO_DATA::uNITIsSet() const
{
    return m_UNITIsSet;
}

void SPOT_INSTRUMENT_HISTO_DATA::unsetUNIT()
{
    m_UNITIsSet = false;
}
int32_t SPOT_INSTRUMENT_HISTO_DATA::getVOLUME() const
{
    return m_VOLUME;
}

void SPOT_INSTRUMENT_HISTO_DATA::setVOLUME(int32_t value)
{
    m_VOLUME = value;
    m_VOLUMEIsSet = true;
}

bool SPOT_INSTRUMENT_HISTO_DATA::vOLUMEIsSet() const
{
    return m_VOLUMEIsSet;
}

void SPOT_INSTRUMENT_HISTO_DATA::unsetVOLUME()
{
    m_VOLUMEIsSet = false;
}
int32_t SPOT_INSTRUMENT_HISTO_DATA::getVOLUMEBUY() const
{
    return m_VOLUME_BUY;
}

void SPOT_INSTRUMENT_HISTO_DATA::setVOLUMEBUY(int32_t value)
{
    m_VOLUME_BUY = value;
    m_VOLUME_BUYIsSet = true;
}

bool SPOT_INSTRUMENT_HISTO_DATA::vOLUMEBUYIsSet() const
{
    return m_VOLUME_BUYIsSet;
}

void SPOT_INSTRUMENT_HISTO_DATA::unsetVOLUME_BUY()
{
    m_VOLUME_BUYIsSet = false;
}
int32_t SPOT_INSTRUMENT_HISTO_DATA::getVOLUMESELL() const
{
    return m_VOLUME_SELL;
}

void SPOT_INSTRUMENT_HISTO_DATA::setVOLUMESELL(int32_t value)
{
    m_VOLUME_SELL = value;
    m_VOLUME_SELLIsSet = true;
}

bool SPOT_INSTRUMENT_HISTO_DATA::vOLUMESELLIsSet() const
{
    return m_VOLUME_SELLIsSet;
}

void SPOT_INSTRUMENT_HISTO_DATA::unsetVOLUME_SELL()
{
    m_VOLUME_SELLIsSet = false;
}
int32_t SPOT_INSTRUMENT_HISTO_DATA::getVOLUMEUNKNOWN() const
{
    return m_VOLUME_UNKNOWN;
}

void SPOT_INSTRUMENT_HISTO_DATA::setVOLUMEUNKNOWN(int32_t value)
{
    m_VOLUME_UNKNOWN = value;
    m_VOLUME_UNKNOWNIsSet = true;
}

bool SPOT_INSTRUMENT_HISTO_DATA::vOLUMEUNKNOWNIsSet() const
{
    return m_VOLUME_UNKNOWNIsSet;
}

void SPOT_INSTRUMENT_HISTO_DATA::unsetVOLUME_UNKNOWN()
{
    m_VOLUME_UNKNOWNIsSet = false;
}
}
}
}
}


