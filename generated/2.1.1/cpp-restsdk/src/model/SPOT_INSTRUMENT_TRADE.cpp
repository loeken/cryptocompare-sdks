/**
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 * CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: data@cryptocompare.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.3.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/SPOT_INSTRUMENT_TRADE.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



SPOT_INSTRUMENT_TRADE::SPOT_INSTRUMENT_TRADE()
{
    m_BASE = utility::conversions::to_string_t("");
    m_BASEIsSet = false;
    m_CCSEQ = 0;
    m_CCSEQIsSet = false;
    m_ID = utility::conversions::to_string_t("");
    m_IDIsSet = false;
    m_INSTRUMENT = utility::conversions::to_string_t("");
    m_INSTRUMENTIsSet = false;
    m_MAPPED_INSTRUMENT = utility::conversions::to_string_t("");
    m_MAPPED_INSTRUMENTIsSet = false;
    m_MARKET = utility::conversions::to_string_t("");
    m_MARKETIsSet = false;
    m_PRICE = 0;
    m_PRICEIsSet = false;
    m_QUANTITY = 0;
    m_QUANTITYIsSet = false;
    m_QUOTE = utility::conversions::to_string_t("");
    m_QUOTEIsSet = false;
    m_QUOTE_QUANTITY = 0;
    m_QUOTE_QUANTITYIsSet = false;
    m_RECEIVED_TIMESTAMP = 0;
    m_RECEIVED_TIMESTAMPIsSet = false;
    m_RECEIVED_TIMESTAMP_NS = 0;
    m_RECEIVED_TIMESTAMP_NSIsSet = false;
    m_SIDE = utility::conversions::to_string_t("");
    m_SIDEIsSet = false;
    m_SOURCE = utility::conversions::to_string_t("");
    m_SOURCEIsSet = false;
    m_TIMESTAMP = 0;
    m_TIMESTAMPIsSet = false;
    m_TIMESTAMP_NS = 0;
    m_TIMESTAMP_NSIsSet = false;
    m_TYPE = utility::conversions::to_string_t("");
    m_TYPEIsSet = false;
}

SPOT_INSTRUMENT_TRADE::~SPOT_INSTRUMENT_TRADE()
{
}

void SPOT_INSTRUMENT_TRADE::validate()
{
    // TODO: implement validation
}

web::json::value SPOT_INSTRUMENT_TRADE::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_BASEIsSet)
    {
        val[utility::conversions::to_string_t(U("BASE"))] = ModelBase::toJson(m_BASE);
    }
    if(m_CCSEQIsSet)
    {
        val[utility::conversions::to_string_t(U("CCSEQ"))] = ModelBase::toJson(m_CCSEQ);
    }
    if(m_IDIsSet)
    {
        val[utility::conversions::to_string_t(U("ID"))] = ModelBase::toJson(m_ID);
    }
    if(m_INSTRUMENTIsSet)
    {
        val[utility::conversions::to_string_t(U("INSTRUMENT"))] = ModelBase::toJson(m_INSTRUMENT);
    }
    if(m_MAPPED_INSTRUMENTIsSet)
    {
        val[utility::conversions::to_string_t(U("MAPPED_INSTRUMENT"))] = ModelBase::toJson(m_MAPPED_INSTRUMENT);
    }
    if(m_MARKETIsSet)
    {
        val[utility::conversions::to_string_t(U("MARKET"))] = ModelBase::toJson(m_MARKET);
    }
    if(m_PRICEIsSet)
    {
        val[utility::conversions::to_string_t(U("PRICE"))] = ModelBase::toJson(m_PRICE);
    }
    if(m_QUANTITYIsSet)
    {
        val[utility::conversions::to_string_t(U("QUANTITY"))] = ModelBase::toJson(m_QUANTITY);
    }
    if(m_QUOTEIsSet)
    {
        val[utility::conversions::to_string_t(U("QUOTE"))] = ModelBase::toJson(m_QUOTE);
    }
    if(m_QUOTE_QUANTITYIsSet)
    {
        val[utility::conversions::to_string_t(U("QUOTE_QUANTITY"))] = ModelBase::toJson(m_QUOTE_QUANTITY);
    }
    if(m_RECEIVED_TIMESTAMPIsSet)
    {
        val[utility::conversions::to_string_t(U("RECEIVED_TIMESTAMP"))] = ModelBase::toJson(m_RECEIVED_TIMESTAMP);
    }
    if(m_RECEIVED_TIMESTAMP_NSIsSet)
    {
        val[utility::conversions::to_string_t(U("RECEIVED_TIMESTAMP_NS"))] = ModelBase::toJson(m_RECEIVED_TIMESTAMP_NS);
    }
    if(m_SIDEIsSet)
    {
        val[utility::conversions::to_string_t(U("SIDE"))] = ModelBase::toJson(m_SIDE);
    }
    if(m_SOURCEIsSet)
    {
        val[utility::conversions::to_string_t(U("SOURCE"))] = ModelBase::toJson(m_SOURCE);
    }
    if(m_TIMESTAMPIsSet)
    {
        val[utility::conversions::to_string_t(U("TIMESTAMP"))] = ModelBase::toJson(m_TIMESTAMP);
    }
    if(m_TIMESTAMP_NSIsSet)
    {
        val[utility::conversions::to_string_t(U("TIMESTAMP_NS"))] = ModelBase::toJson(m_TIMESTAMP_NS);
    }
    if(m_TYPEIsSet)
    {
        val[utility::conversions::to_string_t(U("TYPE"))] = ModelBase::toJson(m_TYPE);
    }

    return val;
}

bool SPOT_INSTRUMENT_TRADE::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("BASE"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("BASE")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBASE;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBASE);
            setBASE(refVal_setBASE);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CCSEQ"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CCSEQ")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCCSEQ;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCCSEQ);
            setCCSEQ(refVal_setCCSEQ);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ID")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setID);
            setID(refVal_setID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("INSTRUMENT"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("INSTRUMENT")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setINSTRUMENT;
            ok &= ModelBase::fromJson(fieldValue, refVal_setINSTRUMENT);
            setINSTRUMENT(refVal_setINSTRUMENT);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MAPPED_INSTRUMENT"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MAPPED_INSTRUMENT")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMAPPEDINSTRUMENT;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMAPPEDINSTRUMENT);
            setMAPPEDINSTRUMENT(refVal_setMAPPEDINSTRUMENT);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MARKET"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MARKET")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMARKET;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMARKET);
            setMARKET(refVal_setMARKET);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("PRICE"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("PRICE")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPRICE;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPRICE);
            setPRICE(refVal_setPRICE);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("QUANTITY"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("QUANTITY")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setQUANTITY;
            ok &= ModelBase::fromJson(fieldValue, refVal_setQUANTITY);
            setQUANTITY(refVal_setQUANTITY);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("QUOTE"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("QUOTE")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setQUOTE;
            ok &= ModelBase::fromJson(fieldValue, refVal_setQUOTE);
            setQUOTE(refVal_setQUOTE);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("QUOTE_QUANTITY"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("QUOTE_QUANTITY")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setQUOTEQUANTITY;
            ok &= ModelBase::fromJson(fieldValue, refVal_setQUOTEQUANTITY);
            setQUOTEQUANTITY(refVal_setQUOTEQUANTITY);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("RECEIVED_TIMESTAMP"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("RECEIVED_TIMESTAMP")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setRECEIVEDTIMESTAMP;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRECEIVEDTIMESTAMP);
            setRECEIVEDTIMESTAMP(refVal_setRECEIVEDTIMESTAMP);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("RECEIVED_TIMESTAMP_NS"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("RECEIVED_TIMESTAMP_NS")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setRECEIVEDTIMESTAMPNS;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRECEIVEDTIMESTAMPNS);
            setRECEIVEDTIMESTAMPNS(refVal_setRECEIVEDTIMESTAMPNS);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("SIDE"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("SIDE")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSIDE;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSIDE);
            setSIDE(refVal_setSIDE);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("SOURCE"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("SOURCE")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSOURCE;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSOURCE);
            setSOURCE(refVal_setSOURCE);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("TIMESTAMP"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("TIMESTAMP")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTIMESTAMP;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTIMESTAMP);
            setTIMESTAMP(refVal_setTIMESTAMP);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("TIMESTAMP_NS"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("TIMESTAMP_NS")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTIMESTAMPNS;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTIMESTAMPNS);
            setTIMESTAMPNS(refVal_setTIMESTAMPNS);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("TYPE"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("TYPE")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTYPE;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTYPE);
            setTYPE(refVal_setTYPE);
        }
    }
    return ok;
}

void SPOT_INSTRUMENT_TRADE::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_BASEIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("BASE")), m_BASE));
    }
    if(m_CCSEQIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CCSEQ")), m_CCSEQ));
    }
    if(m_IDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ID")), m_ID));
    }
    if(m_INSTRUMENTIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("INSTRUMENT")), m_INSTRUMENT));
    }
    if(m_MAPPED_INSTRUMENTIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MAPPED_INSTRUMENT")), m_MAPPED_INSTRUMENT));
    }
    if(m_MARKETIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MARKET")), m_MARKET));
    }
    if(m_PRICEIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("PRICE")), m_PRICE));
    }
    if(m_QUANTITYIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("QUANTITY")), m_QUANTITY));
    }
    if(m_QUOTEIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("QUOTE")), m_QUOTE));
    }
    if(m_QUOTE_QUANTITYIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("QUOTE_QUANTITY")), m_QUOTE_QUANTITY));
    }
    if(m_RECEIVED_TIMESTAMPIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("RECEIVED_TIMESTAMP")), m_RECEIVED_TIMESTAMP));
    }
    if(m_RECEIVED_TIMESTAMP_NSIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("RECEIVED_TIMESTAMP_NS")), m_RECEIVED_TIMESTAMP_NS));
    }
    if(m_SIDEIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("SIDE")), m_SIDE));
    }
    if(m_SOURCEIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("SOURCE")), m_SOURCE));
    }
    if(m_TIMESTAMPIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("TIMESTAMP")), m_TIMESTAMP));
    }
    if(m_TIMESTAMP_NSIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("TIMESTAMP_NS")), m_TIMESTAMP_NS));
    }
    if(m_TYPEIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("TYPE")), m_TYPE));
    }
}

bool SPOT_INSTRUMENT_TRADE::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("BASE"))))
    {
        utility::string_t refVal_setBASE;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("BASE"))), refVal_setBASE );
        setBASE(refVal_setBASE);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CCSEQ"))))
    {
        int32_t refVal_setCCSEQ;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CCSEQ"))), refVal_setCCSEQ );
        setCCSEQ(refVal_setCCSEQ);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ID"))))
    {
        utility::string_t refVal_setID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ID"))), refVal_setID );
        setID(refVal_setID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("INSTRUMENT"))))
    {
        utility::string_t refVal_setINSTRUMENT;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("INSTRUMENT"))), refVal_setINSTRUMENT );
        setINSTRUMENT(refVal_setINSTRUMENT);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MAPPED_INSTRUMENT"))))
    {
        utility::string_t refVal_setMAPPEDINSTRUMENT;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MAPPED_INSTRUMENT"))), refVal_setMAPPEDINSTRUMENT );
        setMAPPEDINSTRUMENT(refVal_setMAPPEDINSTRUMENT);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MARKET"))))
    {
        utility::string_t refVal_setMARKET;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MARKET"))), refVal_setMARKET );
        setMARKET(refVal_setMARKET);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("PRICE"))))
    {
        int32_t refVal_setPRICE;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("PRICE"))), refVal_setPRICE );
        setPRICE(refVal_setPRICE);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("QUANTITY"))))
    {
        int32_t refVal_setQUANTITY;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("QUANTITY"))), refVal_setQUANTITY );
        setQUANTITY(refVal_setQUANTITY);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("QUOTE"))))
    {
        utility::string_t refVal_setQUOTE;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("QUOTE"))), refVal_setQUOTE );
        setQUOTE(refVal_setQUOTE);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("QUOTE_QUANTITY"))))
    {
        int32_t refVal_setQUOTEQUANTITY;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("QUOTE_QUANTITY"))), refVal_setQUOTEQUANTITY );
        setQUOTEQUANTITY(refVal_setQUOTEQUANTITY);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("RECEIVED_TIMESTAMP"))))
    {
        int32_t refVal_setRECEIVEDTIMESTAMP;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("RECEIVED_TIMESTAMP"))), refVal_setRECEIVEDTIMESTAMP );
        setRECEIVEDTIMESTAMP(refVal_setRECEIVEDTIMESTAMP);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("RECEIVED_TIMESTAMP_NS"))))
    {
        int32_t refVal_setRECEIVEDTIMESTAMPNS;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("RECEIVED_TIMESTAMP_NS"))), refVal_setRECEIVEDTIMESTAMPNS );
        setRECEIVEDTIMESTAMPNS(refVal_setRECEIVEDTIMESTAMPNS);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("SIDE"))))
    {
        utility::string_t refVal_setSIDE;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("SIDE"))), refVal_setSIDE );
        setSIDE(refVal_setSIDE);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("SOURCE"))))
    {
        utility::string_t refVal_setSOURCE;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("SOURCE"))), refVal_setSOURCE );
        setSOURCE(refVal_setSOURCE);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("TIMESTAMP"))))
    {
        int32_t refVal_setTIMESTAMP;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("TIMESTAMP"))), refVal_setTIMESTAMP );
        setTIMESTAMP(refVal_setTIMESTAMP);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("TIMESTAMP_NS"))))
    {
        int32_t refVal_setTIMESTAMPNS;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("TIMESTAMP_NS"))), refVal_setTIMESTAMPNS );
        setTIMESTAMPNS(refVal_setTIMESTAMPNS);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("TYPE"))))
    {
        utility::string_t refVal_setTYPE;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("TYPE"))), refVal_setTYPE );
        setTYPE(refVal_setTYPE);
    }
    return ok;
}

utility::string_t SPOT_INSTRUMENT_TRADE::getBASE() const
{
    return m_BASE;
}

void SPOT_INSTRUMENT_TRADE::setBASE(const utility::string_t& value)
{
    m_BASE = value;
    m_BASEIsSet = true;
}

bool SPOT_INSTRUMENT_TRADE::bASEIsSet() const
{
    return m_BASEIsSet;
}

void SPOT_INSTRUMENT_TRADE::unsetBASE()
{
    m_BASEIsSet = false;
}
int32_t SPOT_INSTRUMENT_TRADE::getCCSEQ() const
{
    return m_CCSEQ;
}

void SPOT_INSTRUMENT_TRADE::setCCSEQ(int32_t value)
{
    m_CCSEQ = value;
    m_CCSEQIsSet = true;
}

bool SPOT_INSTRUMENT_TRADE::cCSEQIsSet() const
{
    return m_CCSEQIsSet;
}

void SPOT_INSTRUMENT_TRADE::unsetCCSEQ()
{
    m_CCSEQIsSet = false;
}
utility::string_t SPOT_INSTRUMENT_TRADE::getID() const
{
    return m_ID;
}

void SPOT_INSTRUMENT_TRADE::setID(const utility::string_t& value)
{
    m_ID = value;
    m_IDIsSet = true;
}

bool SPOT_INSTRUMENT_TRADE::iDIsSet() const
{
    return m_IDIsSet;
}

void SPOT_INSTRUMENT_TRADE::unsetID()
{
    m_IDIsSet = false;
}
utility::string_t SPOT_INSTRUMENT_TRADE::getINSTRUMENT() const
{
    return m_INSTRUMENT;
}

void SPOT_INSTRUMENT_TRADE::setINSTRUMENT(const utility::string_t& value)
{
    m_INSTRUMENT = value;
    m_INSTRUMENTIsSet = true;
}

bool SPOT_INSTRUMENT_TRADE::iNSTRUMENTIsSet() const
{
    return m_INSTRUMENTIsSet;
}

void SPOT_INSTRUMENT_TRADE::unsetINSTRUMENT()
{
    m_INSTRUMENTIsSet = false;
}
utility::string_t SPOT_INSTRUMENT_TRADE::getMAPPEDINSTRUMENT() const
{
    return m_MAPPED_INSTRUMENT;
}

void SPOT_INSTRUMENT_TRADE::setMAPPEDINSTRUMENT(const utility::string_t& value)
{
    m_MAPPED_INSTRUMENT = value;
    m_MAPPED_INSTRUMENTIsSet = true;
}

bool SPOT_INSTRUMENT_TRADE::mAPPEDINSTRUMENTIsSet() const
{
    return m_MAPPED_INSTRUMENTIsSet;
}

void SPOT_INSTRUMENT_TRADE::unsetMAPPED_INSTRUMENT()
{
    m_MAPPED_INSTRUMENTIsSet = false;
}
utility::string_t SPOT_INSTRUMENT_TRADE::getMARKET() const
{
    return m_MARKET;
}

void SPOT_INSTRUMENT_TRADE::setMARKET(const utility::string_t& value)
{
    m_MARKET = value;
    m_MARKETIsSet = true;
}

bool SPOT_INSTRUMENT_TRADE::mARKETIsSet() const
{
    return m_MARKETIsSet;
}

void SPOT_INSTRUMENT_TRADE::unsetMARKET()
{
    m_MARKETIsSet = false;
}
int32_t SPOT_INSTRUMENT_TRADE::getPRICE() const
{
    return m_PRICE;
}

void SPOT_INSTRUMENT_TRADE::setPRICE(int32_t value)
{
    m_PRICE = value;
    m_PRICEIsSet = true;
}

bool SPOT_INSTRUMENT_TRADE::pRICEIsSet() const
{
    return m_PRICEIsSet;
}

void SPOT_INSTRUMENT_TRADE::unsetPRICE()
{
    m_PRICEIsSet = false;
}
int32_t SPOT_INSTRUMENT_TRADE::getQUANTITY() const
{
    return m_QUANTITY;
}

void SPOT_INSTRUMENT_TRADE::setQUANTITY(int32_t value)
{
    m_QUANTITY = value;
    m_QUANTITYIsSet = true;
}

bool SPOT_INSTRUMENT_TRADE::qUANTITYIsSet() const
{
    return m_QUANTITYIsSet;
}

void SPOT_INSTRUMENT_TRADE::unsetQUANTITY()
{
    m_QUANTITYIsSet = false;
}
utility::string_t SPOT_INSTRUMENT_TRADE::getQUOTE() const
{
    return m_QUOTE;
}

void SPOT_INSTRUMENT_TRADE::setQUOTE(const utility::string_t& value)
{
    m_QUOTE = value;
    m_QUOTEIsSet = true;
}

bool SPOT_INSTRUMENT_TRADE::qUOTEIsSet() const
{
    return m_QUOTEIsSet;
}

void SPOT_INSTRUMENT_TRADE::unsetQUOTE()
{
    m_QUOTEIsSet = false;
}
int32_t SPOT_INSTRUMENT_TRADE::getQUOTEQUANTITY() const
{
    return m_QUOTE_QUANTITY;
}

void SPOT_INSTRUMENT_TRADE::setQUOTEQUANTITY(int32_t value)
{
    m_QUOTE_QUANTITY = value;
    m_QUOTE_QUANTITYIsSet = true;
}

bool SPOT_INSTRUMENT_TRADE::qUOTEQUANTITYIsSet() const
{
    return m_QUOTE_QUANTITYIsSet;
}

void SPOT_INSTRUMENT_TRADE::unsetQUOTE_QUANTITY()
{
    m_QUOTE_QUANTITYIsSet = false;
}
int32_t SPOT_INSTRUMENT_TRADE::getRECEIVEDTIMESTAMP() const
{
    return m_RECEIVED_TIMESTAMP;
}

void SPOT_INSTRUMENT_TRADE::setRECEIVEDTIMESTAMP(int32_t value)
{
    m_RECEIVED_TIMESTAMP = value;
    m_RECEIVED_TIMESTAMPIsSet = true;
}

bool SPOT_INSTRUMENT_TRADE::rECEIVEDTIMESTAMPIsSet() const
{
    return m_RECEIVED_TIMESTAMPIsSet;
}

void SPOT_INSTRUMENT_TRADE::unsetRECEIVED_TIMESTAMP()
{
    m_RECEIVED_TIMESTAMPIsSet = false;
}
int32_t SPOT_INSTRUMENT_TRADE::getRECEIVEDTIMESTAMPNS() const
{
    return m_RECEIVED_TIMESTAMP_NS;
}

void SPOT_INSTRUMENT_TRADE::setRECEIVEDTIMESTAMPNS(int32_t value)
{
    m_RECEIVED_TIMESTAMP_NS = value;
    m_RECEIVED_TIMESTAMP_NSIsSet = true;
}

bool SPOT_INSTRUMENT_TRADE::rECEIVEDTIMESTAMPNSIsSet() const
{
    return m_RECEIVED_TIMESTAMP_NSIsSet;
}

void SPOT_INSTRUMENT_TRADE::unsetRECEIVED_TIMESTAMP_NS()
{
    m_RECEIVED_TIMESTAMP_NSIsSet = false;
}
utility::string_t SPOT_INSTRUMENT_TRADE::getSIDE() const
{
    return m_SIDE;
}

void SPOT_INSTRUMENT_TRADE::setSIDE(const utility::string_t& value)
{
    m_SIDE = value;
    m_SIDEIsSet = true;
}

bool SPOT_INSTRUMENT_TRADE::sIDEIsSet() const
{
    return m_SIDEIsSet;
}

void SPOT_INSTRUMENT_TRADE::unsetSIDE()
{
    m_SIDEIsSet = false;
}
utility::string_t SPOT_INSTRUMENT_TRADE::getSOURCE() const
{
    return m_SOURCE;
}

void SPOT_INSTRUMENT_TRADE::setSOURCE(const utility::string_t& value)
{
    m_SOURCE = value;
    m_SOURCEIsSet = true;
}

bool SPOT_INSTRUMENT_TRADE::sOURCEIsSet() const
{
    return m_SOURCEIsSet;
}

void SPOT_INSTRUMENT_TRADE::unsetSOURCE()
{
    m_SOURCEIsSet = false;
}
int32_t SPOT_INSTRUMENT_TRADE::getTIMESTAMP() const
{
    return m_TIMESTAMP;
}

void SPOT_INSTRUMENT_TRADE::setTIMESTAMP(int32_t value)
{
    m_TIMESTAMP = value;
    m_TIMESTAMPIsSet = true;
}

bool SPOT_INSTRUMENT_TRADE::tIMESTAMPIsSet() const
{
    return m_TIMESTAMPIsSet;
}

void SPOT_INSTRUMENT_TRADE::unsetTIMESTAMP()
{
    m_TIMESTAMPIsSet = false;
}
int32_t SPOT_INSTRUMENT_TRADE::getTIMESTAMPNS() const
{
    return m_TIMESTAMP_NS;
}

void SPOT_INSTRUMENT_TRADE::setTIMESTAMPNS(int32_t value)
{
    m_TIMESTAMP_NS = value;
    m_TIMESTAMP_NSIsSet = true;
}

bool SPOT_INSTRUMENT_TRADE::tIMESTAMPNSIsSet() const
{
    return m_TIMESTAMP_NSIsSet;
}

void SPOT_INSTRUMENT_TRADE::unsetTIMESTAMP_NS()
{
    m_TIMESTAMP_NSIsSet = false;
}
utility::string_t SPOT_INSTRUMENT_TRADE::getTYPE() const
{
    return m_TYPE;
}

void SPOT_INSTRUMENT_TRADE::setTYPE(const utility::string_t& value)
{
    m_TYPE = value;
    m_TYPEIsSet = true;
}

bool SPOT_INSTRUMENT_TRADE::tYPEIsSet() const
{
    return m_TYPEIsSet;
}

void SPOT_INSTRUMENT_TRADE::unsetTYPE()
{
    m_TYPEIsSet = false;
}
}
}
}
}


