/**
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 * CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: data@cryptocompare.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.3.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/GENERIC_RESPONSE_Data.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



GENERIC_RESPONSE_Data::GENERIC_RESPONSE_Data()
{
    m_NO_DATA = utility::conversions::to_string_t("");
    m_NO_DATAIsSet = false;
}

GENERIC_RESPONSE_Data::~GENERIC_RESPONSE_Data()
{
}

void GENERIC_RESPONSE_Data::validate()
{
    // TODO: implement validation
}

web::json::value GENERIC_RESPONSE_Data::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_NO_DATAIsSet)
    {
        val[utility::conversions::to_string_t(U("NO_DATA"))] = ModelBase::toJson(m_NO_DATA);
    }

    return val;
}

bool GENERIC_RESPONSE_Data::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("NO_DATA"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("NO_DATA")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setNODATA;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNODATA);
            setNODATA(refVal_setNODATA);
        }
    }
    return ok;
}

void GENERIC_RESPONSE_Data::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_NO_DATAIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("NO_DATA")), m_NO_DATA));
    }
}

bool GENERIC_RESPONSE_Data::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("NO_DATA"))))
    {
        utility::string_t refVal_setNODATA;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("NO_DATA"))), refVal_setNODATA );
        setNODATA(refVal_setNODATA);
    }
    return ok;
}

utility::string_t GENERIC_RESPONSE_Data::getNODATA() const
{
    return m_NO_DATA;
}

void GENERIC_RESPONSE_Data::setNODATA(const utility::string_t& value)
{
    m_NO_DATA = value;
    m_NO_DATAIsSet = true;
}

bool GENERIC_RESPONSE_Data::nODATAIsSet() const
{
    return m_NO_DATAIsSet;
}

void GENERIC_RESPONSE_Data::unsetNO_DATA()
{
    m_NO_DATAIsSet = false;
}
}
}
}
}


