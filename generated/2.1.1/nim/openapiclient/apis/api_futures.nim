#
# CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
# 
# CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
# The version of the OpenAPI document: 2.1.1
# Contact: data@cryptocompare.com
# Generated by: https://openapi-generator.tech
#

import httpclient
import json
import logging
import marshal
import options
import strformat
import strutils
import tables
import typetraits
import uri

import ../models/model_error
import ../models/model_generic_response

const basepath = "https://data-api.cryptocompare.com"

template constructResult[T](response: Response): untyped =
  if response.code in {Http200, Http201, Http202, Http204, Http206}:
    try:
      when name(stripGenericParams(T.typedesc).typedesc) == name(Table):
        (some(json.to(parseJson(response.body), T.typedesc)), response)
      else:
        (some(marshal.to[T](response.body)), response)
    except JsonParsingError:
      # The server returned a malformed response though the response code is 2XX
      # TODO: need better error handling
      error("JsonParsingError")
      (none(T.typedesc), response)
  else:
    (none(T.typedesc), response)


proc futuresV1HistoricalDays*(httpClient: HttpClient, market: string, instrument: string, groups: seq[string], limit: int, toTs: int, aggregate: int, fill: bool, mappingPriority: string, responseFormat: string): (Option[GENERIC_RESPONSE], Response) =
  ## 
  let query_for_api_call = encodeQuery([
    ("market", $market), # The exchange to obtain data from
    ("instrument", $instrument), # The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
    ("groups", $groups.join(",")), # When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME
    ("limit", $limit), # The number of data points to return
    ("to_ts", $toTs), # Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}
    ("aggregate", $aggregate), # The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
    ("fill", $fill), # Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
    ("mapping_priority", $mappingPriority), # The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
    ("response_format", $responseFormat), # The format of the data response in uppercase. It can be one of the following: JSON,CSV
  ])

  let response = httpClient.get(basepath & "/futures/v1/historical/days" & "?" & query_for_api_call)
  constructResult[GENERIC_RESPONSE](response)


proc futuresV1HistoricalFundingRateDays*(httpClient: HttpClient, market: string, instrument: string, groups: seq[string], limit: int, toTs: int, aggregate: int, fill: bool, mappingPriority: string, responseFormat: string): (Option[GENERIC_RESPONSE], Response) =
  ## 
  let query_for_api_call = encodeQuery([
    ("market", $market), # The exchange to obtain data from
    ("instrument", $instrument), # The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
    ("groups", $groups.join(",")), # When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,OHLC,OHLC_MESSAGE,MESSAGE
    ("limit", $limit), # The number of data points to return
    ("to_ts", $toTs), # Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}
    ("aggregate", $aggregate), # The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
    ("fill", $fill), # Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
    ("mapping_priority", $mappingPriority), # The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
    ("response_format", $responseFormat), # The format of the data response in uppercase. It can be one of the following: JSON,CSV
  ])

  let response = httpClient.get(basepath & "/futures/v1/historical/funding-rate/days" & "?" & query_for_api_call)
  constructResult[GENERIC_RESPONSE](response)


proc futuresV1HistoricalFundingRateHours*(httpClient: HttpClient, market: string, instrument: string, groups: seq[string], limit: int, toTs: int, aggregate: int, fill: bool, mappingPriority: string, responseFormat: string): (Option[GENERIC_RESPONSE], Response) =
  ## 
  let query_for_api_call = encodeQuery([
    ("market", $market), # The exchange to obtain data from
    ("instrument", $instrument), # The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
    ("groups", $groups.join(",")), # When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,OHLC,OHLC_MESSAGE,MESSAGE
    ("limit", $limit), # The number of data points to return
    ("to_ts", $toTs), # Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}
    ("aggregate", $aggregate), # The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
    ("fill", $fill), # Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
    ("mapping_priority", $mappingPriority), # The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
    ("response_format", $responseFormat), # The format of the data response in uppercase. It can be one of the following: JSON,CSV
  ])

  let response = httpClient.get(basepath & "/futures/v1/historical/funding-rate/hours" & "?" & query_for_api_call)
  constructResult[GENERIC_RESPONSE](response)


proc futuresV1HistoricalFundingRateMessages*(httpClient: HttpClient, market: string, instrument: string, afterTs: int, lastCcseq: int, limit: int, mappingPriority: string, responseFormat: string, return404OnEmptyResponse: bool): (Option[GENERIC_RESPONSE], Response) =
  ## 
  let query_for_api_call = encodeQuery([
    ("market", $market), # The exchange to obtain data from
    ("instrument", $instrument), # The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
    ("after_ts", $afterTs), # Unix timestamp in seconds of the earliest funding rate message in the response
    ("last_ccseq", $lastCcseq), # The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request.
    ("limit", $limit), # The maximum number of funding rate messages to return
    ("mapping_priority", $mappingPriority), # The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
    ("response_format", $responseFormat), # The format of the data response in uppercase. It can be one of the following: JSON,CSV
    ("return_404_on_empty_response", $return404OnEmptyResponse), # If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.
  ])

  let response = httpClient.get(basepath & "/futures/v1/historical/funding-rate-messages" & "?" & query_for_api_call)
  constructResult[GENERIC_RESPONSE](response)


proc futuresV1HistoricalFundingRateMessagesHour*(httpClient: HttpClient, market: string, instrument: string, hourTs: int, mappingPriority: string, responseFormat: string, return404OnEmptyResponse: bool): (Option[GENERIC_RESPONSE], Response) =
  ## 
  let query_for_api_call = encodeQuery([
    ("market", $market), # The exchange to obtain data from
    ("instrument", $instrument), # The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
    ("hour_ts", $hourTs), # Unix timestamp in seconds for the hour containing the funding rate updates you are interested in. You can pass any timestamp in the hour but we will round it down the the full hour timestmap and return all funding rate updates in that hour.
    ("mapping_priority", $mappingPriority), # The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
    ("response_format", $responseFormat), # The format of the data response in uppercase. It can be one of the following: JSON,CSV
    ("return_404_on_empty_response", $return404OnEmptyResponse), # If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.
  ])

  let response = httpClient.get(basepath & "/futures/v1/historical/funding-rate-messages/hour" & "?" & query_for_api_call)
  constructResult[GENERIC_RESPONSE](response)


proc futuresV1HistoricalFundingRateMinutes*(httpClient: HttpClient, market: string, instrument: string, groups: seq[string], limit: int, toTs: int, aggregate: int, fill: bool, mappingPriority: string, responseFormat: string): (Option[GENERIC_RESPONSE], Response) =
  ## 
  let query_for_api_call = encodeQuery([
    ("market", $market), # The exchange to obtain data from
    ("instrument", $instrument), # The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
    ("groups", $groups.join(",")), # When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,OHLC,OHLC_MESSAGE,MESSAGE
    ("limit", $limit), # The number of data points to return
    ("to_ts", $toTs), # Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}
    ("aggregate", $aggregate), # The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
    ("fill", $fill), # Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
    ("mapping_priority", $mappingPriority), # The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
    ("response_format", $responseFormat), # The format of the data response in uppercase. It can be one of the following: JSON,CSV
  ])

  let response = httpClient.get(basepath & "/futures/v1/historical/funding-rate/minutes" & "?" & query_for_api_call)
  constructResult[GENERIC_RESPONSE](response)


proc futuresV1HistoricalHours*(httpClient: HttpClient, market: string, instrument: string, groups: seq[string], limit: int, toTs: int, aggregate: int, fill: bool, mappingPriority: string, responseFormat: string): (Option[GENERIC_RESPONSE], Response) =
  ## 
  let query_for_api_call = encodeQuery([
    ("market", $market), # The exchange to obtain data from
    ("instrument", $instrument), # The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
    ("groups", $groups.join(",")), # When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME
    ("limit", $limit), # The number of data points to return
    ("to_ts", $toTs), # Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}
    ("aggregate", $aggregate), # The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
    ("fill", $fill), # Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
    ("mapping_priority", $mappingPriority), # The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
    ("response_format", $responseFormat), # The format of the data response in uppercase. It can be one of the following: JSON,CSV
  ])

  let response = httpClient.get(basepath & "/futures/v1/historical/hours" & "?" & query_for_api_call)
  constructResult[GENERIC_RESPONSE](response)


proc futuresV1HistoricalMinutes*(httpClient: HttpClient, market: string, instrument: string, groups: seq[string], limit: int, toTs: int, aggregate: int, fill: bool, mappingPriority: string, responseFormat: string): (Option[GENERIC_RESPONSE], Response) =
  ## 
  let query_for_api_call = encodeQuery([
    ("market", $market), # The exchange to obtain data from
    ("instrument", $instrument), # The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
    ("groups", $groups.join(",")), # When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_TRADE,TRADE,VOLUME
    ("limit", $limit), # The number of data points to return
    ("to_ts", $toTs), # Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}
    ("aggregate", $aggregate), # The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
    ("fill", $fill), # Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
    ("mapping_priority", $mappingPriority), # The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
    ("response_format", $responseFormat), # The format of the data response in uppercase. It can be one of the following: JSON,CSV
  ])

  let response = httpClient.get(basepath & "/futures/v1/historical/minutes" & "?" & query_for_api_call)
  constructResult[GENERIC_RESPONSE](response)


proc futuresV1HistoricalOpenInterestDays*(httpClient: HttpClient, market: string, instrument: string, groups: seq[string], limit: int, toTs: int, aggregate: int, fill: bool, mappingPriority: string, responseFormat: string): (Option[GENERIC_RESPONSE], Response) =
  ## 
  let query_for_api_call = encodeQuery([
    ("market", $market), # The exchange to obtain data from
    ("instrument", $instrument), # The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
    ("groups", $groups.join(",")), # When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_MESSAGE,MESSAGE
    ("limit", $limit), # The number of data points to return
    ("to_ts", $toTs), # Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}
    ("aggregate", $aggregate), # The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
    ("fill", $fill), # Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
    ("mapping_priority", $mappingPriority), # The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
    ("response_format", $responseFormat), # The format of the data response in uppercase. It can be one of the following: JSON,CSV
  ])

  let response = httpClient.get(basepath & "/futures/v1/historical/open-interest/days" & "?" & query_for_api_call)
  constructResult[GENERIC_RESPONSE](response)


proc futuresV1HistoricalOpenInterestHours*(httpClient: HttpClient, market: string, instrument: string, groups: seq[string], limit: int, toTs: int, aggregate: int, fill: bool, mappingPriority: string, responseFormat: string): (Option[GENERIC_RESPONSE], Response) =
  ## 
  let query_for_api_call = encodeQuery([
    ("market", $market), # The exchange to obtain data from
    ("instrument", $instrument), # The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
    ("groups", $groups.join(",")), # When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_MESSAGE,MESSAGE
    ("limit", $limit), # The number of data points to return
    ("to_ts", $toTs), # Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}
    ("aggregate", $aggregate), # The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
    ("fill", $fill), # Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
    ("mapping_priority", $mappingPriority), # The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
    ("response_format", $responseFormat), # The format of the data response in uppercase. It can be one of the following: JSON,CSV
  ])

  let response = httpClient.get(basepath & "/futures/v1/historical/open-interest/hours" & "?" & query_for_api_call)
  constructResult[GENERIC_RESPONSE](response)


proc futuresV1HistoricalOpenInterestMessages*(httpClient: HttpClient, market: string, instrument: string, afterTs: int, lastCcseq: int, limit: int, mappingPriority: string, responseFormat: string, return404OnEmptyResponse: bool): (Option[GENERIC_RESPONSE], Response) =
  ## 
  let query_for_api_call = encodeQuery([
    ("market", $market), # The exchange to obtain data from
    ("instrument", $instrument), # The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
    ("after_ts", $afterTs), # Unix timestamp in seconds of the earliest open interest message in the response
    ("last_ccseq", $lastCcseq), # The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request.
    ("limit", $limit), # The maximum number of open interest messages to return
    ("mapping_priority", $mappingPriority), # The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
    ("response_format", $responseFormat), # The format of the data response in uppercase. It can be one of the following: JSON,CSV
    ("return_404_on_empty_response", $return404OnEmptyResponse), # If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.
  ])

  let response = httpClient.get(basepath & "/futures/v1/historical/open-interest-messages" & "?" & query_for_api_call)
  constructResult[GENERIC_RESPONSE](response)


proc futuresV1HistoricalOpenInterestMessagesHour*(httpClient: HttpClient, market: string, instrument: string, hourTs: int, mappingPriority: string, responseFormat: string, return404OnEmptyResponse: bool): (Option[GENERIC_RESPONSE], Response) =
  ## 
  let query_for_api_call = encodeQuery([
    ("market", $market), # The exchange to obtain data from
    ("instrument", $instrument), # The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
    ("hour_ts", $hourTs), # Unix timestamp in seconds for the hour containing the open interest updates you are interested in. You can pass any timestamp in the hour but we will round it down the the full hour timestmap and return all open interest updates in that hour.
    ("mapping_priority", $mappingPriority), # The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
    ("response_format", $responseFormat), # The format of the data response in uppercase. It can be one of the following: JSON,CSV
    ("return_404_on_empty_response", $return404OnEmptyResponse), # If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.
  ])

  let response = httpClient.get(basepath & "/futures/v1/historical/open-interest-messages/hour" & "?" & query_for_api_call)
  constructResult[GENERIC_RESPONSE](response)


proc futuresV1HistoricalOpenInterestMinutes*(httpClient: HttpClient, market: string, instrument: string, groups: seq[string], limit: int, toTs: int, aggregate: int, fill: bool, mappingPriority: string, responseFormat: string): (Option[GENERIC_RESPONSE], Response) =
  ## 
  let query_for_api_call = encodeQuery([
    ("market", $market), # The exchange to obtain data from
    ("instrument", $instrument), # The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
    ("groups", $groups.join(",")), # When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,OHLC,OHLC_MESSAGE,MESSAGE
    ("limit", $limit), # The number of data points to return
    ("to_ts", $toTs), # Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}
    ("aggregate", $aggregate), # The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
    ("fill", $fill), # Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
    ("mapping_priority", $mappingPriority), # The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
    ("response_format", $responseFormat), # The format of the data response in uppercase. It can be one of the following: JSON,CSV
  ])

  let response = httpClient.get(basepath & "/futures/v1/historical/open-interest/minutes" & "?" & query_for_api_call)
  constructResult[GENERIC_RESPONSE](response)


proc futuresV1HistoricalTrades*(httpClient: HttpClient, market: string, instrument: string, afterTs: int, lastCcseq: int, limit: int, mappingPriority: string, responseFormat: string, return404OnEmptyResponse: bool): (Option[GENERIC_RESPONSE], Response) =
  ## 
  let query_for_api_call = encodeQuery([
    ("market", $market), # The exchange to obtain data from
    ("instrument", $instrument), # The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
    ("after_ts", $afterTs), # Unix timestamp in seconds of the earliest trade in the response.
    ("last_ccseq", $lastCcseq), # The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request.
    ("limit", $limit), # The maximum number of trades to return
    ("mapping_priority", $mappingPriority), # The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
    ("response_format", $responseFormat), # The format of the data response in uppercase. It can be one of the following: JSON,CSV
    ("return_404_on_empty_response", $return404OnEmptyResponse), # If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.
  ])

  let response = httpClient.get(basepath & "/futures/v1/historical/trades" & "?" & query_for_api_call)
  constructResult[GENERIC_RESPONSE](response)


proc futuresV1HistoricalTradesHour*(httpClient: HttpClient, market: string, instrument: string, hourTs: int, mappingPriority: string, responseFormat: string, return404OnEmptyResponse: bool): (Option[GENERIC_RESPONSE], Response) =
  ## 
  let query_for_api_call = encodeQuery([
    ("market", $market), # The exchange to obtain data from
    ("instrument", $instrument), # The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
    ("hour_ts", $hourTs), # Unix timestamp in seconds for the hour containing the trades you are interested in. You can pass any timestamp within an hour but we will round it down the the full hour timestmap and return all trades in that hour.
    ("mapping_priority", $mappingPriority), # The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
    ("response_format", $responseFormat), # The format of the data response in uppercase. It can be one of the following: JSON,CSV
    ("return_404_on_empty_response", $return404OnEmptyResponse), # If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.
  ])

  let response = httpClient.get(basepath & "/futures/v1/historical/trades/hour" & "?" & query_for_api_call)
  constructResult[GENERIC_RESPONSE](response)


proc futuresV1LatestFundingRateTick*(httpClient: HttpClient, market: string, instruments: seq[string], groups: seq[string], mappingPriority: string): (Option[GENERIC_RESPONSE], Response) =
  ## 
  let query_for_api_call = encodeQuery([
    ("market", $market), # The exchange to obtain data from
    ("instruments", $instruments.join(",")), # A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.
    ("groups", $groups.join(",")), # When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME
    ("mapping_priority", $mappingPriority), # The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
  ])

  let response = httpClient.get(basepath & "/futures/v1/latest/funding-rate/tick" & "?" & query_for_api_call)
  constructResult[GENERIC_RESPONSE](response)


proc futuresV1LatestInstrumentMetadata*(httpClient: HttpClient, market: string, instruments: seq[string], groups: seq[string], mappingPriority: string): (Option[GENERIC_RESPONSE], Response) =
  ## 
  let query_for_api_call = encodeQuery([
    ("market", $market), # The exchange to obtain data from
    ("instruments", $instruments.join(",")), # A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.
    ("groups", $groups.join(",")), # When requesting metadata entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: STATUS,INTERNAL,GENERAL,MIGRATION,SOURCE
    ("mapping_priority", $mappingPriority), # The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
  ])

  let response = httpClient.get(basepath & "/futures/v1/latest/instrument/metadata" & "?" & query_for_api_call)
  constructResult[GENERIC_RESPONSE](response)


proc futuresV1LatestOpenInterestTick*(httpClient: HttpClient, market: string, instruments: seq[string], groups: seq[string], mappingPriority: string): (Option[GENERIC_RESPONSE], Response) =
  ## 
  let query_for_api_call = encodeQuery([
    ("market", $market), # The exchange to obtain data from
    ("instruments", $instruments.join(",")), # A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.
    ("groups", $groups.join(",")), # When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME
    ("mapping_priority", $mappingPriority), # The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
  ])

  let response = httpClient.get(basepath & "/futures/v1/latest/open-interest/tick" & "?" & query_for_api_call)
  constructResult[GENERIC_RESPONSE](response)


proc futuresV1LatestTick*(httpClient: HttpClient, market: string, instruments: seq[string], groups: seq[string], mappingPriority: string): (Option[GENERIC_RESPONSE], Response) =
  ## 
  let query_for_api_call = encodeQuery([
    ("market", $market), # The exchange to obtain data from
    ("instruments", $instruments.join(",")), # A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.
    ("groups", $groups.join(",")), # When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,MAPPING,VALUE,LAST_UPDATE,TOP_OF_BOOK,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME
    ("mapping_priority", $mappingPriority), # The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
  ])

  let response = httpClient.get(basepath & "/futures/v1/latest/tick" & "?" & query_for_api_call)
  constructResult[GENERIC_RESPONSE](response)


proc futuresV1Markets*(httpClient: HttpClient, market: string): (Option[GENERIC_RESPONSE], Response) =
  ## 
  let query_for_api_call = encodeQuery([
    ("market", $market), # The exchange to obtain data from
  ])

  let response = httpClient.get(basepath & "/futures/v1/markets" & "?" & query_for_api_call)
  constructResult[GENERIC_RESPONSE](response)


proc futuresV1MarketsInstruments*(httpClient: HttpClient, market: string, instrument: string, instrumentStatus: seq[InstrumentStatus]): (Option[GENERIC_RESPONSE], Response) =
  ## 
  let query_for_api_call = encodeQuery([
    ("market", $market), # The exchange to obtain data from
    ("instrument", $instrument), # The mapped instrument to retrieve on a specific market.
    ("instrument_status", $instrumentStatus.join(",")), # The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED
  ])

  let response = httpClient.get(basepath & "/futures/v1/markets/instruments" & "?" & query_for_api_call)
  constructResult[GENERIC_RESPONSE](response)


proc futuresV1MarketsInstrumentsUnmapped*(httpClient: HttpClient, market: string, instrument: string, instrumentStatus: seq[InstrumentStatus]): (Option[GENERIC_RESPONSE], Response) =
  ## 
  let query_for_api_call = encodeQuery([
    ("market", $market), # The exchange to obtain data from
    ("instrument", $instrument), # The unmapped instrument to retrieve on a specific market.
    ("instrument_status", $instrumentStatus.join(",")), # The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED
  ])

  let response = httpClient.get(basepath & "/futures/v1/markets/instruments/unmapped" & "?" & query_for_api_call)
  constructResult[GENERIC_RESPONSE](response)


proc indexV1HistoricalDays*(httpClient: HttpClient, market: string, instrument: string, groups: seq[string], limit: int, toTs: int, aggregate: int, fill: bool, mappingPriority: string, responseFormat: string): (Option[GENERIC_RESPONSE], Response) =
  ## 
  let query_for_api_call = encodeQuery([
    ("market", $market), # The exchange to obtain data from
    ("instrument", $instrument), # The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
    ("groups", $groups.join(",")), # When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME
    ("limit", $limit), # The number of data points to return
    ("to_ts", $toTs), # Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}
    ("aggregate", $aggregate), # The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
    ("fill", $fill), # Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
    ("mapping_priority", $mappingPriority), # The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
    ("response_format", $responseFormat), # The format of the data response in uppercase. It can be one of the following: JSON,CSV
  ])

  let response = httpClient.get(basepath & "/index/v1/historical/days" & "?" & query_for_api_call)
  constructResult[GENERIC_RESPONSE](response)


proc indexV1HistoricalHours*(httpClient: HttpClient, market: string, instrument: string, groups: seq[string], limit: int, toTs: int, aggregate: int, fill: bool, mappingPriority: string, responseFormat: string): (Option[GENERIC_RESPONSE], Response) =
  ## 
  let query_for_api_call = encodeQuery([
    ("market", $market), # The exchange to obtain data from
    ("instrument", $instrument), # The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
    ("groups", $groups.join(",")), # When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME
    ("limit", $limit), # The number of data points to return
    ("to_ts", $toTs), # Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}
    ("aggregate", $aggregate), # The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
    ("fill", $fill), # Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
    ("mapping_priority", $mappingPriority), # The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
    ("response_format", $responseFormat), # The format of the data response in uppercase. It can be one of the following: JSON,CSV
  ])

  let response = httpClient.get(basepath & "/index/v1/historical/hours" & "?" & query_for_api_call)
  constructResult[GENERIC_RESPONSE](response)


proc indexV1HistoricalMessages*(httpClient: HttpClient, market: string, instrument: string, afterTs: int, lastCcseq: int, limit: int, mappingPriority: string, responseFormat: string, return404OnEmptyResponse: bool): (Option[GENERIC_RESPONSE], Response) =
  ## 
  let query_for_api_call = encodeQuery([
    ("market", $market), # The exchange to obtain data from
    ("instrument", $instrument), # The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
    ("after_ts", $afterTs), # Unix timestamp in seconds of the earliest index message in the response
    ("last_ccseq", $lastCcseq), # The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request.
    ("limit", $limit), # The maximum number of index messages to return
    ("mapping_priority", $mappingPriority), # The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
    ("response_format", $responseFormat), # The format of the data response in uppercase. It can be one of the following: JSON,CSV
    ("return_404_on_empty_response", $return404OnEmptyResponse), # If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.
  ])

  let response = httpClient.get(basepath & "/index/v1/historical/messages" & "?" & query_for_api_call)
  constructResult[GENERIC_RESPONSE](response)


proc indexV1HistoricalMessagesHour*(httpClient: HttpClient, market: string, instrument: string, hourTs: int, mappingPriority: string, responseFormat: string, return404OnEmptyResponse: bool): (Option[GENERIC_RESPONSE], Response) =
  ## 
  let query_for_api_call = encodeQuery([
    ("market", $market), # The exchange to obtain data from
    ("instrument", $instrument), # The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
    ("hour_ts", $hourTs), # Unix timestamp in seconds for the hour containing the index updates you are interested in. You can pass any timestamp in the hour but we will round it down the the full hour timestmap and return all index updates in that hour.
    ("mapping_priority", $mappingPriority), # The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
    ("response_format", $responseFormat), # The format of the data response in uppercase. It can be one of the following: JSON,CSV
    ("return_404_on_empty_response", $return404OnEmptyResponse), # If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.
  ])

  let response = httpClient.get(basepath & "/index/v1/historical/messages/hour" & "?" & query_for_api_call)
  constructResult[GENERIC_RESPONSE](response)


proc indexV1HistoricalMinutes*(httpClient: HttpClient, market: string, instrument: string, groups: seq[string], limit: int, toTs: int, aggregate: int, fill: bool, mappingPriority: string, responseFormat: string): (Option[GENERIC_RESPONSE], Response) =
  ## 
  let query_for_api_call = encodeQuery([
    ("market", $market), # The exchange to obtain data from
    ("instrument", $instrument), # The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
    ("groups", $groups.join(",")), # When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME
    ("limit", $limit), # The number of data points to return
    ("to_ts", $toTs), # Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}
    ("aggregate", $aggregate), # The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
    ("fill", $fill), # Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
    ("mapping_priority", $mappingPriority), # The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
    ("response_format", $responseFormat), # The format of the data response in uppercase. It can be one of the following: JSON,CSV
  ])

  let response = httpClient.get(basepath & "/index/v1/historical/minutes" & "?" & query_for_api_call)
  constructResult[GENERIC_RESPONSE](response)


proc indexV1LatestInstrumentMetadata*(httpClient: HttpClient, market: string, instruments: seq[string], groups: seq[string], mappingPriority: string): (Option[GENERIC_RESPONSE], Response) =
  ## 
  let query_for_api_call = encodeQuery([
    ("market", $market), # The exchange to obtain data from
    ("instruments", $instruments.join(",")), # A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.
    ("groups", $groups.join(",")), # When requesting metadata entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: STATUS,INTERNAL,GENERAL,MIGRATION,SOURCE
    ("mapping_priority", $mappingPriority), # The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
  ])

  let response = httpClient.get(basepath & "/index/v1/latest/instrument/metadata" & "?" & query_for_api_call)
  constructResult[GENERIC_RESPONSE](response)


proc indexV1LatestTick*(httpClient: HttpClient, market: string, instruments: seq[string], groups: seq[string], mappingPriority: string): (Option[GENERIC_RESPONSE], Response) =
  ## 
  let query_for_api_call = encodeQuery([
    ("market", $market), # The exchange to obtain data from
    ("instruments", $instruments.join(",")), # A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.
    ("groups", $groups.join(",")), # When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME
    ("mapping_priority", $mappingPriority), # The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
  ])

  let response = httpClient.get(basepath & "/index/v1/latest/tick" & "?" & query_for_api_call)
  constructResult[GENERIC_RESPONSE](response)


proc indexV1Markets*(httpClient: HttpClient, market: string): (Option[GENERIC_RESPONSE], Response) =
  ## 
  let query_for_api_call = encodeQuery([
    ("market", $market), # The exchange to obtain data from
  ])

  let response = httpClient.get(basepath & "/index/v1/markets" & "?" & query_for_api_call)
  constructResult[GENERIC_RESPONSE](response)


proc indexV1MarketsInstruments*(httpClient: HttpClient, market: string, instrument: string, instrumentStatus: seq[InstrumentStatus]): (Option[GENERIC_RESPONSE], Response) =
  ## 
  let query_for_api_call = encodeQuery([
    ("market", $market), # The exchange to obtain data from
    ("instrument", $instrument), # The mapped instrument to retrieve on a specific market.
    ("instrument_status", $instrumentStatus.join(",")), # The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED
  ])

  let response = httpClient.get(basepath & "/index/v1/markets/instruments" & "?" & query_for_api_call)
  constructResult[GENERIC_RESPONSE](response)


proc indexV1MarketsInstrumentsUnmapped*(httpClient: HttpClient, market: string, instrument: string, instrumentStatus: seq[InstrumentStatus]): (Option[GENERIC_RESPONSE], Response) =
  ## 
  let query_for_api_call = encodeQuery([
    ("market", $market), # The exchange to obtain data from
    ("instrument", $instrument), # The unmapped instrument to retrieve on a specific market.
    ("instrument_status", $instrumentStatus.join(",")), # The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED
  ])

  let response = httpClient.get(basepath & "/index/v1/markets/instruments/unmapped" & "?" & query_for_api_call)
  constructResult[GENERIC_RESPONSE](response)

