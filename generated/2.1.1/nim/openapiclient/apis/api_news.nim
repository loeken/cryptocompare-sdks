#
# CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
# 
# CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
# The version of the OpenAPI document: 2.1.1
# Contact: data@cryptocompare.com
# Generated by: https://openapi-generator.tech
#

import httpclient
import json
import logging
import marshal
import options
import strformat
import strutils
import tables
import typetraits
import uri

import ../models/model_error
import ../models/model_generic_response

const basepath = "https://data-api.cryptocompare.com"

template constructResult[T](response: Response): untyped =
  if response.code in {Http200, Http201, Http202, Http204, Http206}:
    try:
      when name(stripGenericParams(T.typedesc).typedesc) == name(Table):
        (some(json.to(parseJson(response.body), T.typedesc)), response)
      else:
        (some(marshal.to[T](response.body)), response)
    except JsonParsingError:
      # The server returned a malformed response though the response code is 2XX
      # TODO: need better error handling
      error("JsonParsingError")
      (none(T.typedesc), response)
  else:
    (none(T.typedesc), response)


proc newsV1ArticleList*(httpClient: HttpClient, sourceIds: seq[string], lang: string, categories: seq[Categories], excludeCategories: seq[ExcludeCategories], toTs: int): (Option[GENERIC_RESPONSE], Response) =
  ## 
  let query_for_api_call = encodeQuery([
    ("source_ids", $sourceIds.join(",")), # Get articles from specific sources; either by their ids or keys
    ("lang", $lang), # The article Preferred language - English (EN), Portuguese (PT), Espanol (ES)
    ("categories", $categories.join(",")), # News article categories to return
    ("exclude_categories", $excludeCategories.join(",")), # News article categories to exclude from results
    ("to_ts", $toTs), # Articles published on or before this timestamp
  ])

  let response = httpClient.get(basepath & "/news/v1/article/list" & "?" & query_for_api_call)
  constructResult[GENERIC_RESPONSE](response)


proc newsV1CategoryList*(httpClient: HttpClient): (Option[GENERIC_RESPONSE], Response) =
  ## 

  let response = httpClient.get(basepath & "/news/v1/category/list")
  constructResult[GENERIC_RESPONSE](response)


proc newsV1SourceList*(httpClient: HttpClient, lang: string, `type`: string, status: string): (Option[GENERIC_RESPONSE], Response) =
  ## 
  let query_for_api_call = encodeQuery([
    ("lang", $lang), # The article source Preferred language - English (EN), Portuguese (PT), Espanol (ES)
    ("type", $`type`), # RSS, API, TWITTER
    ("status", $status), # The status for the  article source entry. Allowed values: ACTIVE, INACTIVE
  ])

  let response = httpClient.get(basepath & "/news/v1/source/list" & "?" & query_for_api_call)
  constructResult[GENERIC_RESPONSE](response)

