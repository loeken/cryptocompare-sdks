#
# CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
# 
# CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
# The version of the OpenAPI document: 2.1.1
# Contact: data@cryptocompare.com
# Generated by: https://openapi-generator.tech
#

import httpclient
import json
import logging
import marshal
import options
import strformat
import strutils
import tables
import typetraits
import uri

import ../models/model_error
import ../models/model_generic_response

const basepath = "https://data-api.cryptocompare.com"

template constructResult[T](response: Response): untyped =
  if response.code in {Http200, Http201, Http202, Http204, Http206}:
    try:
      when name(stripGenericParams(T.typedesc).typedesc) == name(Table):
        (some(json.to(parseJson(response.body), T.typedesc)), response)
      else:
        (some(marshal.to[T](response.body)), response)
    except JsonParsingError:
      # The server returned a malformed response though the response code is 2XX
      # TODO: need better error handling
      error("JsonParsingError")
      (none(T.typedesc), response)
  else:
    (none(T.typedesc), response)


proc overviewV1HistoricalMarketcapAllAssetsDays*(httpClient: HttpClient, groups: seq[string], limit: int, toTs: int, aggregate: int, fill: bool, responseFormat: string): (Option[GENERIC_RESPONSE], Response) =
  ## 
  let query_for_api_call = encodeQuery([
    ("groups", $groups.join(",")), # When requesting all market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME
    ("limit", $limit), # The number of data points to return
    ("to_ts", $toTs), # Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}
    ("aggregate", $aggregate), # The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
    ("fill", $fill), # Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
    ("response_format", $responseFormat), # The format of the data response in uppercase. It can be one of the following: JSON,CSV
  ])

  let response = httpClient.get(basepath & "/overview/v1/historical/marketcap/all/assets/days" & "?" & query_for_api_call)
  constructResult[GENERIC_RESPONSE](response)


proc overviewV1HistoricalMarketcapAllAssetsHours*(httpClient: HttpClient, groups: seq[string], limit: int, toTs: int, aggregate: int, fill: bool, responseFormat: string): (Option[GENERIC_RESPONSE], Response) =
  ## 
  let query_for_api_call = encodeQuery([
    ("groups", $groups.join(",")), # When requesting all market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME
    ("limit", $limit), # The number of data points to return
    ("to_ts", $toTs), # Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}
    ("aggregate", $aggregate), # The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
    ("fill", $fill), # Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
    ("response_format", $responseFormat), # The format of the data response in uppercase. It can be one of the following: JSON,CSV
  ])

  let response = httpClient.get(basepath & "/overview/v1/historical/marketcap/all/assets/hours" & "?" & query_for_api_call)
  constructResult[GENERIC_RESPONSE](response)


proc overviewV1HistoricalMarketcapFtwAssetsDays*(httpClient: HttpClient, groups: seq[string], limit: int, toTs: int, aggregate: int, fill: bool, responseFormat: string): (Option[GENERIC_RESPONSE], Response) =
  ## 
  let query_for_api_call = encodeQuery([
    ("groups", $groups.join(",")), # When requesting ftw universe market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME
    ("limit", $limit), # The number of data points to return
    ("to_ts", $toTs), # Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}
    ("aggregate", $aggregate), # The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
    ("fill", $fill), # Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
    ("response_format", $responseFormat), # The format of the data response in uppercase. It can be one of the following: JSON,CSV
  ])

  let response = httpClient.get(basepath & "/overview/v1/historical/marketcap/ftw/assets/days" & "?" & query_for_api_call)
  constructResult[GENERIC_RESPONSE](response)


proc overviewV1HistoricalMarketcapFtwAssetsHours*(httpClient: HttpClient, groups: seq[string], limit: int, toTs: int, aggregate: int, fill: bool, responseFormat: string): (Option[GENERIC_RESPONSE], Response) =
  ## 
  let query_for_api_call = encodeQuery([
    ("groups", $groups.join(",")), # When requesting ftw universe market cap historical data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,VOLUME
    ("limit", $limit), # The number of data points to return
    ("to_ts", $toTs), # Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit=2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &limit=2000&to_ts={the earliest unix timestamp received}
    ("aggregate", $aggregate), # The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
    ("fill", $fill), # Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
    ("response_format", $responseFormat), # The format of the data response in uppercase. It can be one of the following: JSON,CSV
  ])

  let response = httpClient.get(basepath & "/overview/v1/historical/marketcap/ftw/assets/hours" & "?" & query_for_api_call)
  constructResult[GENERIC_RESPONSE](response)


proc overviewV1LatestMarketcapAllTick*(httpClient: HttpClient, groups: seq[string]): (Option[GENERIC_RESPONSE], Response) =
  ## 
  let query_for_api_call = encodeQuery([
    ("groups", $groups.join(",")), # When requesting all market cap tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,MOVING_24_HOUR
  ])

  let response = httpClient.get(basepath & "/overview/v1/latest/marketcap/all/tick" & "?" & query_for_api_call)
  constructResult[GENERIC_RESPONSE](response)


proc overviewV1LatestMarketcapFtwTick*(httpClient: HttpClient, groups: seq[string]): (Option[GENERIC_RESPONSE], Response) =
  ## 
  let query_for_api_call = encodeQuery([
    ("groups", $groups.join(",")), # When requesting ftw universe market cap tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,MOVING_24_HOUR
  ])

  let response = httpClient.get(basepath & "/overview/v1/latest/marketcap/ftw/tick" & "?" & query_for_api_call)
  constructResult[GENERIC_RESPONSE](response)

