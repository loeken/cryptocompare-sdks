{-
   CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
   CryptoCompare is the world's leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.

   The version of the OpenAPI document: 2.1.1
   Contact: data@cryptocompare.com

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git

   DO NOT EDIT THIS FILE MANUALLY.

   For more info on generating Elm code, see https://eriktim.github.io/openapi-elm/
-}


module Api.Request.Spot exposing
    ( spotV1HistoricalDays, MappingPriority(..), mappingPriorityVariants, ResponseFormat(..), responseFormatVariants
    , spotV1HistoricalHours, MappingPriority(..), mappingPriorityVariants, ResponseFormat(..), responseFormatVariants
    , spotV1HistoricalMinutes, MappingPriority(..), mappingPriorityVariants, ResponseFormat(..), responseFormatVariants
    , spotV1HistoricalOrderbookL2SnapshotMinute, MappingPriority(..), mappingPriorityVariants, ResponseFormat(..), responseFormatVariants
    , spotV1HistoricalTrades, MappingPriority(..), mappingPriorityVariants, ResponseFormat(..), responseFormatVariants
    , spotV1HistoricalTradesHour, MappingPriority(..), mappingPriorityVariants, ResponseFormat(..), responseFormatVariants
    , spotV1LatestInstrumentMetadata, MappingPriority(..), mappingPriorityVariants
    , spotV1LatestTick, MappingPriority(..), mappingPriorityVariants
    , spotV1Markets
    , spotV1MarketsInstruments, InstrumentStatus(..), instrumentStatusVariants
    , spotV1MarketsInstrumentsUnmapped, InstrumentStatus(..), instrumentStatusVariants
    )

import Api
import Api.Data
import Dict
import Http
import Json.Decode
import Json.Encode


type MappingPriority
    = MappingPriorityMAPPEDFIRST
    | MappingPriorityUNMAPPEDFIRST


mappingPriorityVariants : List MappingPriority
mappingPriorityVariants =
    [ MappingPriorityMAPPEDFIRST
    , MappingPriorityUNMAPPEDFIRST
    ]


stringFromMappingPriority : MappingPriority -> String
stringFromMappingPriority model =
    case model of
        MappingPriorityMAPPEDFIRST ->
            "CHECK_MAPPED_FIRST"

        MappingPriorityUNMAPPEDFIRST ->
            "CHECK_UNMAPPED_FIRST"




type ResponseFormat
    = ResponseFormatJSON
    | ResponseFormatCSV


responseFormatVariants : List ResponseFormat
responseFormatVariants =
    [ ResponseFormatJSON
    , ResponseFormatCSV
    ]


stringFromResponseFormat : ResponseFormat -> String
stringFromResponseFormat model =
    case model of
        ResponseFormatJSON ->
            "JSON"

        ResponseFormatCSV ->
            "CSV"




type MappingPriority
    = MappingPriorityMAPPEDFIRST
    | MappingPriorityUNMAPPEDFIRST


mappingPriorityVariants : List MappingPriority
mappingPriorityVariants =
    [ MappingPriorityMAPPEDFIRST
    , MappingPriorityUNMAPPEDFIRST
    ]


stringFromMappingPriority : MappingPriority -> String
stringFromMappingPriority model =
    case model of
        MappingPriorityMAPPEDFIRST ->
            "CHECK_MAPPED_FIRST"

        MappingPriorityUNMAPPEDFIRST ->
            "CHECK_UNMAPPED_FIRST"




type ResponseFormat
    = ResponseFormatJSON
    | ResponseFormatCSV


responseFormatVariants : List ResponseFormat
responseFormatVariants =
    [ ResponseFormatJSON
    , ResponseFormatCSV
    ]


stringFromResponseFormat : ResponseFormat -> String
stringFromResponseFormat model =
    case model of
        ResponseFormatJSON ->
            "JSON"

        ResponseFormatCSV ->
            "CSV"




type MappingPriority
    = MappingPriorityMAPPEDFIRST
    | MappingPriorityUNMAPPEDFIRST


mappingPriorityVariants : List MappingPriority
mappingPriorityVariants =
    [ MappingPriorityMAPPEDFIRST
    , MappingPriorityUNMAPPEDFIRST
    ]


stringFromMappingPriority : MappingPriority -> String
stringFromMappingPriority model =
    case model of
        MappingPriorityMAPPEDFIRST ->
            "CHECK_MAPPED_FIRST"

        MappingPriorityUNMAPPEDFIRST ->
            "CHECK_UNMAPPED_FIRST"




type ResponseFormat
    = ResponseFormatJSON
    | ResponseFormatCSV


responseFormatVariants : List ResponseFormat
responseFormatVariants =
    [ ResponseFormatJSON
    , ResponseFormatCSV
    ]


stringFromResponseFormat : ResponseFormat -> String
stringFromResponseFormat model =
    case model of
        ResponseFormatJSON ->
            "JSON"

        ResponseFormatCSV ->
            "CSV"




type MappingPriority
    = MappingPriorityMAPPEDFIRST
    | MappingPriorityUNMAPPEDFIRST


mappingPriorityVariants : List MappingPriority
mappingPriorityVariants =
    [ MappingPriorityMAPPEDFIRST
    , MappingPriorityUNMAPPEDFIRST
    ]


stringFromMappingPriority : MappingPriority -> String
stringFromMappingPriority model =
    case model of
        MappingPriorityMAPPEDFIRST ->
            "CHECK_MAPPED_FIRST"

        MappingPriorityUNMAPPEDFIRST ->
            "CHECK_UNMAPPED_FIRST"




type ResponseFormat
    = ResponseFormatJSON
    | ResponseFormatCSV


responseFormatVariants : List ResponseFormat
responseFormatVariants =
    [ ResponseFormatJSON
    , ResponseFormatCSV
    ]


stringFromResponseFormat : ResponseFormat -> String
stringFromResponseFormat model =
    case model of
        ResponseFormatJSON ->
            "JSON"

        ResponseFormatCSV ->
            "CSV"




type MappingPriority
    = MappingPriorityMAPPEDFIRST
    | MappingPriorityUNMAPPEDFIRST


mappingPriorityVariants : List MappingPriority
mappingPriorityVariants =
    [ MappingPriorityMAPPEDFIRST
    , MappingPriorityUNMAPPEDFIRST
    ]


stringFromMappingPriority : MappingPriority -> String
stringFromMappingPriority model =
    case model of
        MappingPriorityMAPPEDFIRST ->
            "CHECK_MAPPED_FIRST"

        MappingPriorityUNMAPPEDFIRST ->
            "CHECK_UNMAPPED_FIRST"




type ResponseFormat
    = ResponseFormatJSON
    | ResponseFormatCSV


responseFormatVariants : List ResponseFormat
responseFormatVariants =
    [ ResponseFormatJSON
    , ResponseFormatCSV
    ]


stringFromResponseFormat : ResponseFormat -> String
stringFromResponseFormat model =
    case model of
        ResponseFormatJSON ->
            "JSON"

        ResponseFormatCSV ->
            "CSV"




type MappingPriority
    = MappingPriorityMAPPEDFIRST
    | MappingPriorityUNMAPPEDFIRST


mappingPriorityVariants : List MappingPriority
mappingPriorityVariants =
    [ MappingPriorityMAPPEDFIRST
    , MappingPriorityUNMAPPEDFIRST
    ]


stringFromMappingPriority : MappingPriority -> String
stringFromMappingPriority model =
    case model of
        MappingPriorityMAPPEDFIRST ->
            "CHECK_MAPPED_FIRST"

        MappingPriorityUNMAPPEDFIRST ->
            "CHECK_UNMAPPED_FIRST"




type ResponseFormat
    = ResponseFormatJSON
    | ResponseFormatCSV


responseFormatVariants : List ResponseFormat
responseFormatVariants =
    [ ResponseFormatJSON
    , ResponseFormatCSV
    ]


stringFromResponseFormat : ResponseFormat -> String
stringFromResponseFormat model =
    case model of
        ResponseFormatJSON ->
            "JSON"

        ResponseFormatCSV ->
            "CSV"




type MappingPriority
    = MappingPriorityMAPPEDFIRST
    | MappingPriorityUNMAPPEDFIRST


mappingPriorityVariants : List MappingPriority
mappingPriorityVariants =
    [ MappingPriorityMAPPEDFIRST
    , MappingPriorityUNMAPPEDFIRST
    ]


stringFromMappingPriority : MappingPriority -> String
stringFromMappingPriority model =
    case model of
        MappingPriorityMAPPEDFIRST ->
            "CHECK_MAPPED_FIRST"

        MappingPriorityUNMAPPEDFIRST ->
            "CHECK_UNMAPPED_FIRST"




type MappingPriority
    = MappingPriorityMAPPEDFIRST
    | MappingPriorityUNMAPPEDFIRST


mappingPriorityVariants : List MappingPriority
mappingPriorityVariants =
    [ MappingPriorityMAPPEDFIRST
    , MappingPriorityUNMAPPEDFIRST
    ]


stringFromMappingPriority : MappingPriority -> String
stringFromMappingPriority model =
    case model of
        MappingPriorityMAPPEDFIRST ->
            "CHECK_MAPPED_FIRST"

        MappingPriorityUNMAPPEDFIRST ->
            "CHECK_UNMAPPED_FIRST"




type InstrumentStatus
    = InstrumentStatusACTIVE
    | InstrumentStatusIGNORED
    | InstrumentStatusRETIRED
    | InstrumentStatusEXPIRED


instrumentStatusVariants : List InstrumentStatus
instrumentStatusVariants =
    [ InstrumentStatusACTIVE
    , InstrumentStatusIGNORED
    , InstrumentStatusRETIRED
    , InstrumentStatusEXPIRED
    ]


stringFromInstrumentStatus : InstrumentStatus -> String
stringFromInstrumentStatus model =
    case model of
        InstrumentStatusACTIVE ->
            "ACTIVE"

        InstrumentStatusIGNORED ->
            "IGNORED"

        InstrumentStatusRETIRED ->
            "RETIRED"

        InstrumentStatusEXPIRED ->
            "EXPIRED"




type InstrumentStatus
    = InstrumentStatusACTIVE
    | InstrumentStatusIGNORED
    | InstrumentStatusRETIRED
    | InstrumentStatusEXPIRED


instrumentStatusVariants : List InstrumentStatus
instrumentStatusVariants =
    [ InstrumentStatusACTIVE
    , InstrumentStatusIGNORED
    , InstrumentStatusRETIRED
    , InstrumentStatusEXPIRED
    ]


stringFromInstrumentStatus : InstrumentStatus -> String
stringFromInstrumentStatus model =
    case model of
        InstrumentStatusACTIVE ->
            "ACTIVE"

        InstrumentStatusIGNORED ->
            "IGNORED"

        InstrumentStatusRETIRED ->
            "RETIRED"

        InstrumentStatusEXPIRED ->
            "EXPIRED"





spotV1HistoricalDays : String -> String -> Maybe List String -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Bool -> Maybe MappingPriority -> Maybe ResponseFormat -> Api.Request Api.Data.SPOTINSTRUMENTHISTODATARESPONSE
spotV1HistoricalDays market_query instrument_query groups_query limit_query toTs_query aggregate_query fill_query mappingPriority_query responseFormat_query =
    Api.request
        "GET"
        "/spot/v1/historical/days"
        []
        [ ( "market", Just <| identity market_query ), ( "instrument", Just <| identity instrument_query ), ( "groups", Maybe.map String.join "," << List.map identity groups_query ), ( "limit", Maybe.map String.fromInt limit_query ), ( "to_ts", Maybe.map String.fromInt toTs_query ), ( "aggregate", Maybe.map String.fromInt aggregate_query ), ( "fill", Maybe.map (\val -> if val then "true" else "false") fill_query ), ( "mapping_priority", Maybe.map stringFromMappingPriority mappingPriority_query ), ( "response_format", Maybe.map stringFromResponseFormat responseFormat_query ) ]
        []
        Nothing
        Api.Data.sPOTINSTRUMENTHISTODATARESPONSEDecoder



spotV1HistoricalHours : String -> String -> Maybe List String -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Bool -> Maybe MappingPriority -> Maybe ResponseFormat -> Api.Request Api.Data.SPOTINSTRUMENTHISTODATARESPONSE
spotV1HistoricalHours market_query instrument_query groups_query limit_query toTs_query aggregate_query fill_query mappingPriority_query responseFormat_query =
    Api.request
        "GET"
        "/spot/v1/historical/hours"
        []
        [ ( "market", Just <| identity market_query ), ( "instrument", Just <| identity instrument_query ), ( "groups", Maybe.map String.join "," << List.map identity groups_query ), ( "limit", Maybe.map String.fromInt limit_query ), ( "to_ts", Maybe.map String.fromInt toTs_query ), ( "aggregate", Maybe.map String.fromInt aggregate_query ), ( "fill", Maybe.map (\val -> if val then "true" else "false") fill_query ), ( "mapping_priority", Maybe.map stringFromMappingPriority mappingPriority_query ), ( "response_format", Maybe.map stringFromResponseFormat responseFormat_query ) ]
        []
        Nothing
        Api.Data.sPOTINSTRUMENTHISTODATARESPONSEDecoder



spotV1HistoricalMinutes : String -> String -> Maybe List String -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Bool -> Maybe MappingPriority -> Maybe ResponseFormat -> Api.Request Api.Data.SPOTINSTRUMENTHISTODATARESPONSE
spotV1HistoricalMinutes market_query instrument_query groups_query limit_query toTs_query aggregate_query fill_query mappingPriority_query responseFormat_query =
    Api.request
        "GET"
        "/spot/v1/historical/minutes"
        []
        [ ( "market", Just <| identity market_query ), ( "instrument", Just <| identity instrument_query ), ( "groups", Maybe.map String.join "," << List.map identity groups_query ), ( "limit", Maybe.map String.fromInt limit_query ), ( "to_ts", Maybe.map String.fromInt toTs_query ), ( "aggregate", Maybe.map String.fromInt aggregate_query ), ( "fill", Maybe.map (\val -> if val then "true" else "false") fill_query ), ( "mapping_priority", Maybe.map stringFromMappingPriority mappingPriority_query ), ( "response_format", Maybe.map stringFromResponseFormat responseFormat_query ) ]
        []
        Nothing
        Api.Data.sPOTINSTRUMENTHISTODATARESPONSEDecoder



spotV1HistoricalOrderbookL2SnapshotMinute : String -> String -> Int -> Maybe Int -> Maybe MappingPriority -> Maybe ResponseFormat -> Api.Request Api.Data.GENERICRESPONSE
spotV1HistoricalOrderbookL2SnapshotMinute market_query instrument_query minuteTs_query depth_query mappingPriority_query responseFormat_query =
    Api.request
        "GET"
        "/spot/v1/historical/orderbook/l2/snapshot/minute"
        []
        [ ( "market", Just <| identity market_query ), ( "instrument", Just <| identity instrument_query ), ( "minute_ts", Just <| String.fromInt minuteTs_query ), ( "depth", Maybe.map String.fromInt depth_query ), ( "mapping_priority", Maybe.map stringFromMappingPriority mappingPriority_query ), ( "response_format", Maybe.map stringFromResponseFormat responseFormat_query ) ]
        []
        Nothing
        Api.Data.gENERICRESPONSEDecoder



spotV1HistoricalTrades : String -> String -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe MappingPriority -> Maybe ResponseFormat -> Maybe Bool -> Api.Request Api.Data.SPOTINSTRUMENTTRADERESPONSE
spotV1HistoricalTrades market_query instrument_query afterTs_query lastCcseq_query limit_query mappingPriority_query responseFormat_query return404OnEmptyResponse_query =
    Api.request
        "GET"
        "/spot/v1/historical/trades"
        []
        [ ( "market", Just <| identity market_query ), ( "instrument", Just <| identity instrument_query ), ( "after_ts", Maybe.map String.fromInt afterTs_query ), ( "last_ccseq", Maybe.map String.fromInt lastCcseq_query ), ( "limit", Maybe.map String.fromInt limit_query ), ( "mapping_priority", Maybe.map stringFromMappingPriority mappingPriority_query ), ( "response_format", Maybe.map stringFromResponseFormat responseFormat_query ), ( "return_404_on_empty_response", Maybe.map (\val -> if val then "true" else "false") return404OnEmptyResponse_query ) ]
        []
        Nothing
        Api.Data.sPOTINSTRUMENTTRADERESPONSEDecoder



spotV1HistoricalTradesHour : String -> String -> Maybe Int -> Maybe MappingPriority -> Maybe ResponseFormat -> Maybe Bool -> Api.Request Api.Data.SPOTINSTRUMENTTRADERESPONSE
spotV1HistoricalTradesHour market_query instrument_query hourTs_query mappingPriority_query responseFormat_query return404OnEmptyResponse_query =
    Api.request
        "GET"
        "/spot/v1/historical/trades/hour"
        []
        [ ( "market", Just <| identity market_query ), ( "instrument", Just <| identity instrument_query ), ( "hour_ts", Maybe.map String.fromInt hourTs_query ), ( "mapping_priority", Maybe.map stringFromMappingPriority mappingPriority_query ), ( "response_format", Maybe.map stringFromResponseFormat responseFormat_query ), ( "return_404_on_empty_response", Maybe.map (\val -> if val then "true" else "false") return404OnEmptyResponse_query ) ]
        []
        Nothing
        Api.Data.sPOTINSTRUMENTTRADERESPONSEDecoder



spotV1LatestInstrumentMetadata : String -> List String -> Maybe List String -> Maybe MappingPriority -> Api.Request Api.Data.SPOTINSTRUMENTMETADATARESPONSE
spotV1LatestInstrumentMetadata market_query instruments_query groups_query mappingPriority_query =
    Api.request
        "GET"
        "/spot/v1/latest/instrument/metadata"
        []
        [ ( "market", Just <| identity market_query ), ( "instruments", Just <| String.join "," << List.map identity instruments_query ), ( "groups", Maybe.map String.join "," << List.map identity groups_query ), ( "mapping_priority", Maybe.map stringFromMappingPriority mappingPriority_query ) ]
        []
        Nothing
        Api.Data.sPOTINSTRUMENTMETADATARESPONSEDecoder



spotV1LatestTick : String -> List String -> Maybe List String -> Maybe MappingPriority -> Api.Request Api.Data.SPOTINSTRUMENTMARKETDATARESPONSE
spotV1LatestTick market_query instruments_query groups_query mappingPriority_query =
    Api.request
        "GET"
        "/spot/v1/latest/tick"
        []
        [ ( "market", Just <| identity market_query ), ( "instruments", Just <| String.join "," << List.map identity instruments_query ), ( "groups", Maybe.map String.join "," << List.map identity groups_query ), ( "mapping_priority", Maybe.map stringFromMappingPriority mappingPriority_query ) ]
        []
        Nothing
        Api.Data.sPOTINSTRUMENTMARKETDATARESPONSEDecoder



spotV1Markets : Maybe String -> Api.Request Api.Data.GENERICRESPONSE
spotV1Markets market_query =
    Api.request
        "GET"
        "/spot/v1/markets"
        []
        [ ( "market", Maybe.map identity market_query ) ]
        []
        Nothing
        Api.Data.gENERICRESPONSEDecoder



spotV1MarketsInstruments : Maybe String -> Maybe String -> Maybe List InstrumentStatus -> Api.Request Api.Data.GENERICRESPONSE
spotV1MarketsInstruments market_query instrument_query instrumentStatus_query =
    Api.request
        "GET"
        "/spot/v1/markets/instruments"
        []
        [ ( "market", Maybe.map identity market_query ), ( "instrument", Maybe.map identity instrument_query ), ( "instrument_status", Maybe.map String.join "," << List.map stringFromInstrumentStatus instrumentStatus_query ) ]
        []
        Nothing
        Api.Data.gENERICRESPONSEDecoder



spotV1MarketsInstrumentsUnmapped : Maybe String -> Maybe String -> Maybe List InstrumentStatus -> Api.Request Api.Data.GENERICRESPONSE
spotV1MarketsInstrumentsUnmapped market_query instrument_query instrumentStatus_query =
    Api.request
        "GET"
        "/spot/v1/markets/instruments/unmapped"
        []
        [ ( "market", Maybe.map identity market_query ), ( "instrument", Maybe.map identity instrument_query ), ( "instrument_status", Maybe.map String.join "," << List.map stringFromInstrumentStatus instrumentStatus_query ) ]
        []
        Nothing
        Api.Data.gENERICRESPONSEDecoder
