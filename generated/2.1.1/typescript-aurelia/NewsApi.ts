/**
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 * CryptoCompare is the world\'s leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: data@cryptocompare.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  GENERICRESPONSE,
} from './models';

/**
 * newsV1ArticleList - parameters interface
 */
export interface INewsV1ArticleListParams {
  sourceIds?: Array<string>;
  lang?: 'EN' | 'ES' | 'PT' | '';
  categories?: Array<'1INCH' | 'AAVE' | 'ADA' | 'ALGO' | 'ALTCOIN' | 'ASIA' | 'ATOM' | 'AVAX' | 'AXS' | 'BAL' | 'BAT' | 'BCH' | 'BLOCKCHAIN' | 'BTC' | 'BUSINESS' | 'COMMODITY' | 'COMP' | 'CRV' | 'DASH' | 'DOGE' | 'DOT' | 'ENJ' | 'ETC' | 'ETH' | 'EXCHANGE' | 'FIAT' | 'FIL' | 'FTM' | 'ICO' | 'KNC' | 'LINK' | 'LRC' | 'LTC' | 'LUNA' | 'LUNC' | 'MANA' | 'MARKET' | 'MATIC' | 'MINING' | 'MKR' | 'REGULATION' | 'REN' | 'SAND' | 'SHIB' | 'SNX' | 'SOL' | 'SPONSORED' | 'SUSHI' | 'TECHNOLOGY' | 'TRADING' | 'TRX' | 'UMA' | 'UNI' | 'USDT' | 'WALLET' | 'XLM' | 'XMR' | 'XRP' | 'XTZ' | 'YFI' | 'ZEC' | 'ZRX' | ''>;
  excludeCategories?: Array<'1INCH' | 'AAVE' | 'ADA' | 'ALGO' | 'ALTCOIN' | 'ASIA' | 'ATOM' | 'AVAX' | 'AXS' | 'BAL' | 'BAT' | 'BCH' | 'BLOCKCHAIN' | 'BTC' | 'BUSINESS' | 'COMMODITY' | 'COMP' | 'CRV' | 'DASH' | 'DOGE' | 'DOT' | 'ENJ' | 'ETC' | 'ETH' | 'EXCHANGE' | 'FIAT' | 'FIL' | 'FTM' | 'ICO' | 'KNC' | 'LINK' | 'LRC' | 'LTC' | 'LUNA' | 'LUNC' | 'MANA' | 'MARKET' | 'MATIC' | 'MINING' | 'MKR' | 'REGULATION' | 'REN' | 'SAND' | 'SHIB' | 'SNX' | 'SOL' | 'SPONSORED' | 'SUSHI' | 'TECHNOLOGY' | 'TRADING' | 'TRX' | 'UMA' | 'UNI' | 'USDT' | 'WALLET' | 'XLM' | 'XMR' | 'XRP' | 'XTZ' | 'YFI' | 'ZEC' | 'ZRX' | ''>;
  toTs?: number;
}

/**
 * newsV1CategoryList - parameters interface
 */
export interface INewsV1CategoryListParams {
}

/**
 * newsV1SourceList - parameters interface
 */
export interface INewsV1SourceListParams {
  lang?: 'EN' | 'ES' | 'PT' | '';
  type?: 'RSS' | 'API' | 'TWITTER' | '';
  status?: 'ACTIVE' | 'INACTIVE' | '';
}

/**
 * NewsApi - API class
 */
@autoinject()
export class NewsApi extends Api {

  /**
   * Creates a new NewsApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * @param params.sourceIds Get articles from specific sources; either by their ids or keys
   * @param params.lang The article Preferred language - English (EN), Portuguese (PT), Espanol (ES)
   * @param params.categories News article categories to return
   * @param params.excludeCategories News article categories to exclude from results
   * @param params.toTs Articles published on or before this timestamp
   */
  async newsV1ArticleList(params: INewsV1ArticleListParams): Promise<GENERICRESPONSE> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/news/v1/article/list`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'source_ids': params['sourceIds'],
        'lang': params['lang'],
        'categories': params['categories'],
        'exclude_categories': params['excludeCategories'],
        'to_ts': params['toTs'],
      })

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   */
  async newsV1CategoryList(): Promise<GENERICRESPONSE> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/news/v1/category/list`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * @param params.lang The article source Preferred language - English (EN), Portuguese (PT), Espanol (ES)
   * @param params.type RSS, API, TWITTER
   * @param params.status The status for the  article source entry. Allowed values: ACTIVE, INACTIVE
   */
  async newsV1SourceList(params: INewsV1SourceListParams): Promise<GENERICRESPONSE> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/news/v1/source/list`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'lang': params['lang'],
        'type': params['type'],
        'status': params['status'],
      })

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

