/**
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 * CryptoCompare is the world\'s leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: data@cryptocompare.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  GENERICRESPONSE,
} from './models';

/**
 * assetV1DataByAddress - parameters interface
 */
export interface IAssetV1DataByAddressParams {
  address: string;
  chainSymbol: string;
  groups?: string;
}

/**
 * assetV1DataById - parameters interface
 */
export interface IAssetV1DataByIdParams {
  assetId: number;
  groups?: string;
}

/**
 * assetV1DataBySymbol - parameters interface
 */
export interface IAssetV1DataBySymbolParams {
  assetSymbol: string;
  groups?: string;
}

/**
 * assetV1TopList - parameters interface
 */
export interface IAssetV1TopListParams {
  page?: number;
  pageSize?: number;
  assetType?: string;
  sortBy?: 'CREATED_ON' | 'UPDATED_ON' | 'SYMBOL';
  sortDirection?: 'DESC' | 'ASC';
  groups?: string;
}

/**
 * AssetApi - API class
 */
@autoinject()
export class AssetApi extends Api {

  /**
   * Creates a new AssetApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * @param params.address 
   * @param params.chainSymbol 
   * @param params.groups 
   */
  async assetV1DataByAddress(params: IAssetV1DataByAddressParams): Promise<GENERICRESPONSE> {
    // Verify required parameters are set
    this.ensureParamIsSet('assetV1DataByAddress', params, 'address');
    this.ensureParamIsSet('assetV1DataByAddress', params, 'chainSymbol');

    // Create URL to call
    const url = `${this.basePath}/asset/v1/data/by/address`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'address': params['address'],
        'chain_symbol': params['chainSymbol'],
        'groups': params['groups'],
      })

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * @param params.assetId The asset id you are interested in
   * @param params.groups 
   */
  async assetV1DataById(params: IAssetV1DataByIdParams): Promise<GENERICRESPONSE> {
    // Verify required parameters are set
    this.ensureParamIsSet('assetV1DataById', params, 'assetId');

    // Create URL to call
    const url = `${this.basePath}/asset/v1/data/by/id`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'asset_id': params['assetId'],
        'groups': params['groups'],
      })

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * @param params.assetSymbol The asset symbol you are interested in
   * @param params.groups 
   */
  async assetV1DataBySymbol(params: IAssetV1DataBySymbolParams): Promise<GENERICRESPONSE> {
    // Verify required parameters are set
    this.ensureParamIsSet('assetV1DataBySymbol', params, 'assetSymbol');

    // Create URL to call
    const url = `${this.basePath}/asset/v1/data/by/symbol`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'asset_symbol': params['assetSymbol'],
        'groups': params['groups'],
      })

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * @param params.page The page number for the request to get {page_size} coins at the time.
   * @param params.pageSize The number of items returned per page
   * @param params.assetType The asset class/type
   * @param params.sortBy Sort by field ( CREATED_ON,UPDATED_ON,SYMBOL )
   * @param params.sortDirection Sort direction ( DESC,ASC )
   * @param params.groups 
   */
  async assetV1TopList(params: IAssetV1TopListParams): Promise<GENERICRESPONSE> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/asset/v1/top/list`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'page': params['page'],
        'page_size': params['pageSize'],
        'asset_type': params['assetType'],
        'sort_by': params['sortBy'],
        'sort_direction': params['sortDirection'],
        'groups': params['groups'],
      })

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

