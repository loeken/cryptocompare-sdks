/**
 * CryptoCompare Market, Index, Reference Data, News and Overview Metrcis API for the Cryptocurrency Industry
 * CryptoCompare is the world\'s leading digital asset data company, providing services that cater to corporate, government and retail clients. Our main reference index is widely recognized as a reliable benchmark, and we have been authorized by the Financial Conduct Authority (FCA) in the United Kingdom to operate as a benchmark administrator. In addition to catering to corporate, government, and retail clients, we offer a range of services including comprehensive market data for cryptocurrency exchanges in both the centralized and decentralized finance sectors, as well as individual asset data on custodians, supported platforms, and privacy solutions. Our offerings include price, volume, trade, and orderbook updates, as well as historical OHLCV data.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: data@cryptocompare.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  GENERICRESPONSE,
} from './models';

/**
 * indexCcV1HistoricalDays - parameters interface
 */
export interface IIndexCcV1HistoricalDaysParams {
  market: string;
  instrument: string;
  groups?: Array<string>;
  limit?: number;
  toTs?: number;
  aggregate?: number;
  fill?: boolean;
  mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST';
  responseFormat?: 'JSON' | 'CSV';
}

/**
 * indexCcV1HistoricalHours - parameters interface
 */
export interface IIndexCcV1HistoricalHoursParams {
  market: string;
  instrument: string;
  groups?: Array<string>;
  limit?: number;
  toTs?: number;
  aggregate?: number;
  fill?: boolean;
  mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST';
  responseFormat?: 'JSON' | 'CSV';
}

/**
 * indexCcV1HistoricalMessages - parameters interface
 */
export interface IIndexCcV1HistoricalMessagesParams {
  market: string;
  instrument: string;
  afterTs?: number;
  lastCcseq?: number;
  mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST';
  limit?: number;
  responseFormat?: 'JSON' | 'CSV';
  return404OnEmptyResponse?: boolean;
}

/**
 * indexCcV1HistoricalMessagesHour - parameters interface
 */
export interface IIndexCcV1HistoricalMessagesHourParams {
  market: string;
  instrument: string;
  hourTs?: number;
  mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST';
  responseFormat?: 'JSON' | 'CSV';
  return404OnEmptyResponse?: boolean;
}

/**
 * indexCcV1HistoricalMinutes - parameters interface
 */
export interface IIndexCcV1HistoricalMinutesParams {
  market: string;
  instrument: string;
  groups?: Array<string>;
  limit?: number;
  toTs?: number;
  aggregate?: number;
  fill?: boolean;
  mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST';
  responseFormat?: 'JSON' | 'CSV';
}

/**
 * indexCcV1LatestInstrumentMetadata - parameters interface
 */
export interface IIndexCcV1LatestInstrumentMetadataParams {
  market: string;
  instruments: Array<string>;
  groups?: Array<string>;
  mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST';
}

/**
 * indexCcV1LatestTick - parameters interface
 */
export interface IIndexCcV1LatestTickParams {
  market: string;
  instruments: Array<string>;
  groups?: Array<string>;
  mappingPriority?: 'CHECK_MAPPED_FIRST' | 'CHECK_UNMAPPED_FIRST';
}

/**
 * indexCcV1Markets - parameters interface
 */
export interface IIndexCcV1MarketsParams {
  market?: string;
}

/**
 * indexCcV1MarketsInstruments - parameters interface
 */
export interface IIndexCcV1MarketsInstrumentsParams {
  market?: string;
  instrument?: string;
  instrumentStatus?: Array<'ACTIVE' | 'IGNORED' | 'RETIRED' | 'EXPIRED'>;
}

/**
 * indexCcV1MarketsInstrumentsUnmapped - parameters interface
 */
export interface IIndexCcV1MarketsInstrumentsUnmappedParams {
  market?: string;
  instrument?: string;
  instrumentStatus?: Array<'ACTIVE' | 'IGNORED' | 'RETIRED' | 'EXPIRED'>;
}

/**
 * ReferenceRatesApi - API class
 */
@autoinject()
export class ReferenceRatesApi extends Api {

  /**
   * Creates a new ReferenceRatesApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * @param params.market The exchange to obtain data from
   * @param params.instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
   * @param params.groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME
   * @param params.limit The number of data points to return
   * @param params.toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
   * @param params.aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
   * @param params.fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
   * @param params.mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
   * @param params.responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV
   */
  async indexCcV1HistoricalDays(params: IIndexCcV1HistoricalDaysParams): Promise<GENERICRESPONSE> {
    // Verify required parameters are set
    this.ensureParamIsSet('indexCcV1HistoricalDays', params, 'market');
    this.ensureParamIsSet('indexCcV1HistoricalDays', params, 'instrument');

    // Create URL to call
    const url = `${this.basePath}/index/cc/v1/historical/days`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'market': params['market'],
        'instrument': params['instrument'],
        'groups': params['groups'],
        'limit': params['limit'],
        'to_ts': params['toTs'],
        'aggregate': params['aggregate'],
        'fill': params['fill'],
        'mapping_priority': params['mappingPriority'],
        'response_format': params['responseFormat'],
      })

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * @param params.market The exchange to obtain data from
   * @param params.instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
   * @param params.groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME
   * @param params.limit The number of data points to return
   * @param params.toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
   * @param params.aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
   * @param params.fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
   * @param params.mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
   * @param params.responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV
   */
  async indexCcV1HistoricalHours(params: IIndexCcV1HistoricalHoursParams): Promise<GENERICRESPONSE> {
    // Verify required parameters are set
    this.ensureParamIsSet('indexCcV1HistoricalHours', params, 'market');
    this.ensureParamIsSet('indexCcV1HistoricalHours', params, 'instrument');

    // Create URL to call
    const url = `${this.basePath}/index/cc/v1/historical/hours`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'market': params['market'],
        'instrument': params['instrument'],
        'groups': params['groups'],
        'limit': params['limit'],
        'to_ts': params['toTs'],
        'aggregate': params['aggregate'],
        'fill': params['fill'],
        'mapping_priority': params['mappingPriority'],
        'response_format': params['responseFormat'],
      })

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * @param params.market The exchange to obtain data from
   * @param params.instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
   * @param params.afterTs Unix timestamp in seconds of the earliest index message in the response
   * @param params.lastCcseq The CCSEQ of the last message seen in the previous request. Useful for pagination within messages that happened in the same second. It will look though the messages in the same second and discard all messages until it reaches the CCSEQ from the last_ccseq parameter. If the CCSEQ is not part of that second, it will discard all messages in the second and only return messages starting from the next second onwards. When starting an integration with our API, on the first request, you should either not send a value for this paramater (defaults to 0 and does not discard any messages) or send 0. After you get a response use the TIMESTAMP and CCSEQ from the last message in the response. Pass the TIMESTAMP in the after_ts parameter and the CCSEQ in the last_ccseq parameter on your next request.
   * @param params.mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
   * @param params.limit The maximum number of index messages to return
   * @param params.responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV
   * @param params.return404OnEmptyResponse If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.
   */
  async indexCcV1HistoricalMessages(params: IIndexCcV1HistoricalMessagesParams): Promise<GENERICRESPONSE> {
    // Verify required parameters are set
    this.ensureParamIsSet('indexCcV1HistoricalMessages', params, 'market');
    this.ensureParamIsSet('indexCcV1HistoricalMessages', params, 'instrument');

    // Create URL to call
    const url = `${this.basePath}/index/cc/v1/historical/messages`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'market': params['market'],
        'instrument': params['instrument'],
        'after_ts': params['afterTs'],
        'last_ccseq': params['lastCcseq'],
        'mapping_priority': params['mappingPriority'],
        'limit': params['limit'],
        'response_format': params['responseFormat'],
        'return_404_on_empty_response': params['return404OnEmptyResponse'],
      })

      // Authentication 'api_key_header' required
      .withHeader('authorization', this.authStorage.getapi_key_header())
      // Authentication 'api_key_query' required
      .withParams({ api_key: this.authStorage.getapi_key_query() })
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * @param params.market The exchange to obtain data from
   * @param params.instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
   * @param params.hourTs Unix timestamp in seconds for the hour containing the index updates you are interested in. You can pass any timestamp in the hour but we will round it down the the full hour timestmap and return all index updates in that hour.
   * @param params.mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
   * @param params.responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV
   * @param params.return404OnEmptyResponse If set to false (default) then when there are no items to return, you will get a response status code of 200 and an empty JSON array or a CSV file with just the header. If set to true then when there are no items you will get a 404 status code for both JSON and CSV response_formats.
   */
  async indexCcV1HistoricalMessagesHour(params: IIndexCcV1HistoricalMessagesHourParams): Promise<GENERICRESPONSE> {
    // Verify required parameters are set
    this.ensureParamIsSet('indexCcV1HistoricalMessagesHour', params, 'market');
    this.ensureParamIsSet('indexCcV1HistoricalMessagesHour', params, 'instrument');

    // Create URL to call
    const url = `${this.basePath}/index/cc/v1/historical/messages/hour`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'market': params['market'],
        'instrument': params['instrument'],
        'hour_ts': params['hourTs'],
        'mapping_priority': params['mappingPriority'],
        'response_format': params['responseFormat'],
        'return_404_on_empty_response': params['return404OnEmptyResponse'],
      })

      // Authentication 'api_key_header' required
      .withHeader('authorization', this.authStorage.getapi_key_header())
      // Authentication 'api_key_query' required
      .withParams({ api_key: this.authStorage.getapi_key_query() })
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * @param params.market The exchange to obtain data from
   * @param params.instrument The mapped or unmapped instrument to retrieve on a specific market. We first check the instrument against the mapped list and then against the unmapped list          but you can use the mapping_priority param to check the unmapped list first.
   * @param params.groups When requesting historical entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,OHLC,OHLC_MESSAGE,MESSAGE,VOLUME
   * @param params.limit The number of data points to return
   * @param params.toTs Returns historical data before this unix timestamp. If you want to get all the available historical data, you can use limit&#x3D;2000 and keep going back in time using the to_ts param. You can then keep requesting batches using: &amp;limit&#x3D;2000&amp;to_ts&#x3D;{the earliest unix timestamp received}
   * @param params.aggregate The number of points to aggregate for each returned value. E.g. passing 5 on a minute histo data endpoint will return data at 5 minute intervals. You are still limited to a maximum of 2000 minute points so the maximum you can get is 400 5 minutes interval entries
   * @param params.fill Boolean value, if set to false or 0 we will not return data points for periods with no trading activity.
   * @param params.mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
   * @param params.responseFormat The format of the data response in uppercase. It can be one of the following: JSON,CSV
   */
  async indexCcV1HistoricalMinutes(params: IIndexCcV1HistoricalMinutesParams): Promise<GENERICRESPONSE> {
    // Verify required parameters are set
    this.ensureParamIsSet('indexCcV1HistoricalMinutes', params, 'market');
    this.ensureParamIsSet('indexCcV1HistoricalMinutes', params, 'instrument');

    // Create URL to call
    const url = `${this.basePath}/index/cc/v1/historical/minutes`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'market': params['market'],
        'instrument': params['instrument'],
        'groups': params['groups'],
        'limit': params['limit'],
        'to_ts': params['toTs'],
        'aggregate': params['aggregate'],
        'fill': params['fill'],
        'mapping_priority': params['mappingPriority'],
        'response_format': params['responseFormat'],
      })

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * @param params.market The exchange to obtain data from
   * @param params.instruments A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.
   * @param params.groups When requesting metadata entries you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: STATUS,INTERNAL,GENERAL,MIGRATION,SOURCE
   * @param params.mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
   */
  async indexCcV1LatestInstrumentMetadata(params: IIndexCcV1LatestInstrumentMetadataParams): Promise<GENERICRESPONSE> {
    // Verify required parameters are set
    this.ensureParamIsSet('indexCcV1LatestInstrumentMetadata', params, 'market');
    this.ensureParamIsSet('indexCcV1LatestInstrumentMetadata', params, 'instruments');

    // Create URL to call
    const url = `${this.basePath}/index/cc/v1/latest/instrument/metadata`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'market': params['market'],
        'instruments': params['instruments'],
        'groups': params['groups'],
        'mapping_priority': params['mappingPriority'],
      })

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * @param params.market The exchange to obtain data from
   * @param params.instruments A comma separated array of mapped and/or unmapped instruments to retrieve for a specific market (you can use either the instrument XXBTZUSD or mapped instrument (base - quote) BTC-USD on kraken as an example). We first check each instrument against the mapped list and then against the unmapped list but you can use the mapping_priority param to check the unmapped list first.
   * @param params.groups When requesting tick data you can fiter by specific groups of interest. To do so just pass the groups of interest into the URL as a comma separted list. If left empty it will get all data that you account is allowed to access. The groups available are: ID,VALUE,LAST_UPDATE,CURRENT_HOUR,CURRENT_DAY,CURRENT_WEEK,CURRENT_MONTH,CURRENT_YEAR,MOVING_24_HOUR,MOVING_7_DAY,MOVING_30_DAY,MOVING_90_DAY,MOVING_180_DAY,MOVING_365_DAY,LIFETIME
   * @param params.mappingPriority The mapping priority of the instrument. It is set to CHECK_MAPPED_FIRST by default. It can be one of the following: CHECK_MAPPED_FIRST,CHECK_UNMAPPED_FIRST
   */
  async indexCcV1LatestTick(params: IIndexCcV1LatestTickParams): Promise<GENERICRESPONSE> {
    // Verify required parameters are set
    this.ensureParamIsSet('indexCcV1LatestTick', params, 'market');
    this.ensureParamIsSet('indexCcV1LatestTick', params, 'instruments');

    // Create URL to call
    const url = `${this.basePath}/index/cc/v1/latest/tick`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'market': params['market'],
        'instruments': params['instruments'],
        'groups': params['groups'],
        'mapping_priority': params['mappingPriority'],
      })

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * @param params.market The exchange to obtain data from
   */
  async indexCcV1Markets(params: IIndexCcV1MarketsParams): Promise<GENERICRESPONSE> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/index/cc/v1/markets`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'market': params['market'],
      })

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * @param params.market The exchange to obtain data from
   * @param params.instrument The mapped instrument to retrieve on a specific market.
   * @param params.instrumentStatus The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED
   */
  async indexCcV1MarketsInstruments(params: IIndexCcV1MarketsInstrumentsParams): Promise<GENERICRESPONSE> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/index/cc/v1/markets/instruments`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'market': params['market'],
        'instrument': params['instrument'],
        'instrument_status': params['instrumentStatus'],
      })

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * @param params.market The exchange to obtain data from
   * @param params.instrument The unmapped instrument to retrieve on a specific market.
   * @param params.instrumentStatus The status of the instrument, can be one of the following: ACTIVE, IGNORED, RETIRED, EXPIRED
   */
  async indexCcV1MarketsInstrumentsUnmapped(params: IIndexCcV1MarketsInstrumentsUnmappedParams): Promise<GENERICRESPONSE> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/index/cc/v1/markets/instruments/unmapped`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'market': params['market'],
        'instrument': params['instrument'],
        'instrument_status': params['instrumentStatus'],
      })

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

